
uAnemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08015048  08015048  00016048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015718  08015718  000176c8  2**0
                  CONTENTS
  4 .ARM          00000008  08015718  08015718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015720  08015720  000176c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015720  08015720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015728  08015728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c8  20000000  0801572c  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003374  200006c8  08015df4  000176c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003a3c  08015df4  00017a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000176c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ab72  00000000  00000000  000176f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f1  00000000  00000000  0004226a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  00047460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b60  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064e0  00000000  00000000  0004b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029795  00000000  00000000  000517d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee3b9  00000000  00000000  0007af65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016931e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acfc  00000000  00000000  00169364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00174060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006c8 	.word	0x200006c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015030 	.word	0x08015030

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006cc 	.word	0x200006cc
 800021c:	08015030 	.word	0x08015030

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100); //for polling just use this line
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 8001008:	e007      	b.n	800101a <lcd_send_cmd+0x52>
	{
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge its address)
		Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800100a:	480f      	ldr	r0, [pc, #60]	@ (8001048 <lcd_send_cmd+0x80>)
 800100c:	f005 fa3b 	bl	8006486 <HAL_I2C_GetError>
 8001010:	4603      	mov	r3, r0
 8001012:	2b04      	cmp	r3, #4
 8001014:	d001      	beq.n	800101a <lcd_send_cmd+0x52>
		{
			Error_Handler();
 8001016:	f001 fa25 	bl	8002464 <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800101a:	f107 0208 	add.w	r2, r7, #8
 800101e:	2304      	movs	r3, #4
 8001020:	214e      	movs	r1, #78	@ 0x4e
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <lcd_send_cmd+0x80>)
 8001024:	f005 f83a 	bl	800609c <HAL_I2C_Master_Transmit_DMA>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ed      	bne.n	800100a <lcd_send_cmd+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800102e:	bf00      	nop
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <lcd_send_cmd+0x80>)
 8001032:	f005 fa1a 	bl	800646a <HAL_I2C_GetState>
 8001036:	4603      	mov	r3, r0
 8001038:	2b20      	cmp	r3, #32
 800103a:	d1f9      	bne.n	8001030 <lcd_send_cmd+0x68>
		//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
	 	 "aTxBuffer" buffer */
	}
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000824 	.word	0x20000824

0800104c <lcd_send_data>:

void lcd_send_data (char data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f043 030d 	orr.w	r3, r3, #13
 800106a:	b2db      	uxtb	r3, r3
 800106c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f043 0309 	orr.w	r3, r3, #9
 8001074:	b2db      	uxtb	r3, r3
 8001076:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	f043 030d 	orr.w	r3, r3, #13
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f043 0309 	orr.w	r3, r3, #9
 8001088:	b2db      	uxtb	r3, r3
 800108a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);  //for polling just use this line
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800108c:	e007      	b.n	800109e <lcd_send_data+0x52>
	{
		/* Error_Handler() function is called when Timeout error occurs.
	 	 When Acknowledge failure occurs (Slave don't acknowledge its address)
		Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <lcd_send_data+0x80>)
 8001090:	f005 f9f9 	bl	8006486 <HAL_I2C_GetError>
 8001094:	4603      	mov	r3, r0
 8001096:	2b04      	cmp	r3, #4
 8001098:	d001      	beq.n	800109e <lcd_send_data+0x52>
		{
			Error_Handler();
 800109a:	f001 f9e3 	bl	8002464 <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800109e:	f107 0208 	add.w	r2, r7, #8
 80010a2:	2304      	movs	r3, #4
 80010a4:	214e      	movs	r1, #78	@ 0x4e
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <lcd_send_data+0x80>)
 80010a8:	f004 fff8 	bl	800609c <HAL_I2C_Master_Transmit_DMA>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ed      	bne.n	800108e <lcd_send_data+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80010b2:	bf00      	nop
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <lcd_send_data+0x80>)
 80010b6:	f005 f9d8 	bl	800646a <HAL_I2C_GetState>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b20      	cmp	r3, #32
 80010be:	d1f9      	bne.n	80010b4 <lcd_send_data+0x68>
		//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		"aTxBuffer" buffer */
	}
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000824 	.word	0x20000824

080010d0 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    switch (row)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <lcd_put_cur+0x18>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <lcd_put_cur+0x22>
 80010e6:	e009      	b.n	80010fc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ee:	603b      	str	r3, [r7, #0]
            break;
 80010f0:	e004      	b.n	80010fc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010f8:	603b      	str	r3, [r7, #0]
            break;
 80010fa:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff61 	bl	8000fc8 <lcd_send_cmd>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <lcd_init>:


void lcd_init (void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001112:	2032      	movs	r0, #50	@ 0x32
 8001114:	f001 ff70 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001118:	2030      	movs	r0, #48	@ 0x30
 800111a:	f7ff ff55 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800111e:	2005      	movs	r0, #5
 8001120:	f001 ff6a 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001124:	2030      	movs	r0, #48	@ 0x30
 8001126:	f7ff ff4f 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800112a:	2001      	movs	r0, #1
 800112c:	f001 ff64 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001130:	2030      	movs	r0, #48	@ 0x30
 8001132:	f7ff ff49 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 ff5e 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800113c:	2020      	movs	r0, #32
 800113e:	f7ff ff43 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f001 ff58 	bl	8002ff8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001148:	2028      	movs	r0, #40	@ 0x28
 800114a:	f7ff ff3d 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f001 ff52 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001154:	2008      	movs	r0, #8
 8001156:	f7ff ff37 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 ff4c 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff ff31 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f001 ff46 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800116c:	2006      	movs	r0, #6
 800116e:	f7ff ff2b 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f001 ff40 	bl	8002ff8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001178:	200c      	movs	r0, #12
 800117a:	f7ff ff25 	bl	8000fc8 <lcd_send_cmd>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}

08001182 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800118a:	e006      	b.n	800119a <lcd_send_string+0x18>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff59 	bl	800104c <lcd_send_data>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f4      	bne.n	800118c <lcd_send_string+0xa>
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    return;
 80011b4:	bf00      	nop
}
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_UART_RxHalfCpltCallback>:
int HTC = 0, FTC = 0;

char inp;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	HTC=1;  // half transfer complete callback was called
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_UART_RxHalfCpltCallback+0x20>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
	FTC=0;
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_UART_RxHalfCpltCallback+0x24>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	2000140c 	.word	0x2000140c
 80011e4:	20001410 	.word	0x20001410

080011e8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	  HTC=0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_UART_RxCpltCallback+0x20>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	  FTC=1;
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_UART_RxCpltCallback+0x24>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	2000140c 	.word	0x2000140c
 800120c:	20001410 	.word	0x20001410

08001210 <uart_dma>:

void uart_dma(void);
void uart_dma(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	4907      	ldr	r1, [pc, #28]	@ (8001234 <uart_dma+0x24>)
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <uart_dma+0x28>)
 800121a:	f00a fd7d 	bl	800bd18 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit_DMA(&huart2, RxData, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	4904      	ldr	r1, [pc, #16]	@ (8001234 <uart_dma+0x24>)
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <uart_dma+0x28>)
 8001224:	f009 fcf6 	bl	800ac14 <HAL_UART_Transmit_DMA>
	  		  FTC = 0;
	  		  HAL_UART_DMAStop(&huart2);
	  		  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
	  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
	  	  }*/
	    inp = RxData[0];
 8001228:	4b02      	ldr	r3, [pc, #8]	@ (8001234 <uart_dma+0x24>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <uart_dma+0x2c>)
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20001408 	.word	0x20001408
 8001238:	20000a7c 	.word	0x20000a7c
 800123c:	20001414 	.word	0x20001414

08001240 <HAL_TIM_IC_CaptureCallback>:

float windspeed_arr[vw_arr_size], windspeed_avg;

//Tim1 input capture callback function for calculating the pulseW
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	//if the interrupt is triggered by 1st Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7f1b      	ldrb	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <HAL_TIM_IC_CaptureCallback+0x16>
	{
		riseCaptured = 1;
 8001250:	4b8d      	ldr	r3, [pc, #564]	@ (8001488 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
	}
	//if the interrupt is triggered by 2nd Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7f1b      	ldrb	r3, [r3, #28]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d102      	bne.n	8001264 <HAL_TIM_IC_CaptureCallback+0x24>
	{
		fallCaptured = 1;
 800125e:	4b8b      	ldr	r3, [pc, #556]	@ (800148c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
	}
	if ((riseCaptured) && (fallCaptured))
 8001264:	4b88      	ldr	r3, [pc, #544]	@ (8001488 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8205 	beq.w	8001678 <HAL_TIM_IC_CaptureCallback+0x438>
 800126e:	4b87      	ldr	r3, [pc, #540]	@ (800148c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8200 	beq.w	8001678 <HAL_TIM_IC_CaptureCallback+0x438>
	{
		// calculate the reference clock
		//float refClock = TIMCLOCK/(PSCALAR+1);
		int indxr = 0, indxf = 0, countr = 0, countrf = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
		float riseavg = 0,  rfavg = 0;
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
		 //In case of high Frequencies, the DMA sometimes captures 0's in the beginning.
		// increment the index until some useful data shows up

		while (riseData[indxr] == 0) indxr++;
 8001294:	e002      	b.n	800129c <HAL_TIM_IC_CaptureCallback+0x5c>
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	3301      	adds	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
 800129c:	4a7c      	ldr	r2, [pc, #496]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f6      	beq.n	8001296 <HAL_TIM_IC_CaptureCallback+0x56>

		 //Again at very high frequencies, sometimes the values don't change
		//So we will wait for the update among the values

		while ( (MIN( (riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]) ) ) == 0) indxr++;
 80012a8:	e002      	b.n	80012b0 <HAL_TIM_IC_CaptureCallback+0x70>
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	3301      	adds	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	3302      	adds	r3, #2
 80012b4:	4a76      	ldr	r2, [pc, #472]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	4974      	ldr	r1, [pc, #464]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012c4:	1ad2      	subs	r2, r2, r3
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	4971      	ldr	r1, [pc, #452]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80012d0:	486f      	ldr	r0, [pc, #444]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012d8:	1acb      	subs	r3, r1, r3
 80012da:	4293      	cmp	r3, r2
 80012dc:	bf28      	it	cs
 80012de:	4613      	movcs	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0e2      	beq.n	80012aa <HAL_TIM_IC_CaptureCallback+0x6a>
		 //riseavg is the difference in the 2 consecutive rise Time

		 //Assign a start value to riseavg
		riseavg += MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]));
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a69      	ldr	r2, [pc, #420]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ee:	4968      	ldr	r1, [pc, #416]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	3302      	adds	r3, #2
 80012fc:	4964      	ldr	r1, [pc, #400]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012fe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	4862      	ldr	r0, [pc, #392]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001308:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800130c:	1acb      	subs	r3, r1, r3
 800130e:	429a      	cmp	r2, r3
 8001310:	d20e      	bcs.n	8001330 <HAL_TIM_IC_CaptureCallback+0xf0>
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	3301      	adds	r3, #1
 8001316:	4a5e      	ldr	r2, [pc, #376]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131c:	495c      	ldr	r1, [pc, #368]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132e:	e00e      	b.n	800134e <HAL_TIM_IC_CaptureCallback+0x10e>
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	3302      	adds	r3, #2
 8001334:	4a56      	ldr	r2, [pc, #344]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001336:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	4954      	ldr	r1, [pc, #336]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
		countr++;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3301      	adds	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
		// start adding the values to the riseavg
		while (indxr < (numval))
 8001366:	e03f      	b.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x1a8>
		{
			riseavg += MIN((riseData[indxr+1]-riseData[indxr]), riseavg/countr);
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	3301      	adds	r3, #1
 800136c:	4a48      	ldr	r2, [pc, #288]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 800136e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001372:	4947      	ldr	r1, [pc, #284]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800138e:	ed97 6a05 	vldr	s12, [r7, #20]
 8001392:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	d50e      	bpl.n	80013be <HAL_TIM_IC_CaptureCallback+0x17e>
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013aa:	4939      	ldr	r1, [pc, #228]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013bc:	e008      	b.n	80013d0 <HAL_TIM_IC_CaptureCallback+0x190>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80013cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80013d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d8:	edc7 7a05 	vstr	s15, [r7, #20]
			countr++;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
			indxr++;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
		while (indxr < (numval))
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	ddbc      	ble.n	8001368 <HAL_TIM_IC_CaptureCallback+0x128>
		}
		// Find the average riseavg, the average time between 2 RISE
		riseavg = riseavg/countr;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80013fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001400:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
		 //The calculation for the Falling pulse on second channel
		 //If the fall time is lower than rise time,
		// Then there must be some error and we will increment
		 // both, until the error is gone

		if (fallData[indxf] < riseData[indxr])
 8001408:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <HAL_TIM_IC_CaptureCallback+0x254>)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001410:	491f      	ldr	r1, [pc, #124]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001418:	429a      	cmp	r2, r3
 800141a:	d214      	bcs.n	8001446 <HAL_TIM_IC_CaptureCallback+0x206>
		{
			indxf+=2;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	3302      	adds	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
			indxr+=2;
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	3302      	adds	r3, #2
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] < riseData[indxr]) indxf++;
 8001428:	e002      	b.n	8001430 <HAL_TIM_IC_CaptureCallback+0x1f0>
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	3301      	adds	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	4a18      	ldr	r2, [pc, #96]	@ (8001494 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001438:	4915      	ldr	r1, [pc, #84]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3f2      	bcc.n	800142a <HAL_TIM_IC_CaptureCallback+0x1ea>
 8001444:	e0a7      	b.n	8001596 <HAL_TIM_IC_CaptureCallback+0x356>
		}

		else if (fallData[indxf] > riseData[indxr])
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800144e:	4910      	ldr	r1, [pc, #64]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001456:	429a      	cmp	r2, r3
 8001458:	f240 809d 	bls.w	8001596 <HAL_TIM_IC_CaptureCallback+0x356>
		{
			indxf+=2;
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	3302      	adds	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
			indxr+=2;
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	3302      	adds	r3, #2
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] > riseData[indxr+1]) indxr++;
 8001468:	e002      	b.n	8001470 <HAL_TIM_IC_CaptureCallback+0x230>
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	3301      	adds	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001470:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	3301      	adds	r3, #1
 800147c:	4904      	ldr	r1, [pc, #16]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x250>)
 800147e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001482:	429a      	cmp	r2, r3
 8001484:	d8f1      	bhi.n	800146a <HAL_TIM_IC_CaptureCallback+0x22a>
		// The method used for the calculation below is as follows:
		//If Fall time < Rise Time, increment Fall counter
		//If Fall time - Rise Time is in between 0 and (difference between 2 Rise times), then its a success
		//If fall time > Rise time, but is also > (difference between 2 Rise times), then increment Rise Counter

		while ((indxf < (numval)) && (indxr < (numval)))
 8001486:	e086      	b.n	8001596 <HAL_TIM_IC_CaptureCallback+0x356>
 8001488:	20000be4 	.word	0x20000be4
 800148c:	20000be8 	.word	0x20000be8
 8001490:	20000bec 	.word	0x20000bec
 8001494:	20000fec 	.word	0x20000fec
		{
			//If the Fall time is lower than rise time, increment the fall indx
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
			{
				indxf++;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	3301      	adds	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
 800149e:	4a7e      	ldr	r2, [pc, #504]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	497c      	ldr	r1, [pc, #496]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dbed      	blt.n	8001498 <HAL_TIM_IC_CaptureCallback+0x258>
			}
			// If the Difference in fall time and rise time is >0 and less than rise average,
			// Then we will register it as a success and increment the countrf (the number of successes)

			if (((int16_t)(fallData[indxf]-riseData[indxr]) >= 0) && (((int16_t)(fallData[indxf]-riseData[indxr]) <= riseavg)))
 80014bc:	4a76      	ldr	r2, [pc, #472]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4975      	ldr	r1, [pc, #468]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db5a      	blt.n	8001590 <HAL_TIM_IC_CaptureCallback+0x350>
 80014da:	4a6f      	ldr	r2, [pc, #444]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	496d      	ldr	r1, [pc, #436]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	db42      	blt.n	8001590 <HAL_TIM_IC_CaptureCallback+0x350>
			{
				rfavg += MIN((fallData[indxf]-riseData[indxr]), (fallData[indxf+1]-riseData[indxr+1]));
 800150a:	4a63      	ldr	r2, [pc, #396]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001512:	4962      	ldr	r1, [pc, #392]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	3301      	adds	r3, #1
 8001520:	495d      	ldr	r1, [pc, #372]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001522:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	485c      	ldr	r0, [pc, #368]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 800152c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001530:	1acb      	subs	r3, r1, r3
 8001532:	429a      	cmp	r2, r3
 8001534:	d20d      	bcs.n	8001552 <HAL_TIM_IC_CaptureCallback+0x312>
 8001536:	4a58      	ldr	r2, [pc, #352]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800153e:	4957      	ldr	r1, [pc, #348]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001550:	e00e      	b.n	8001570 <HAL_TIM_IC_CaptureCallback+0x330>
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	3301      	adds	r3, #1
 8001556:	4a50      	ldr	r2, [pc, #320]	@ (8001698 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	3301      	adds	r3, #1
 8001560:	494e      	ldr	r1, [pc, #312]	@ (800169c <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001570:	ed97 7a04 	vldr	s14, [r7, #16]
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	edc7 7a04 	vstr	s15, [r7, #16]
				indxf++;
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	3301      	adds	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
				indxr++;
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
				countrf++;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	3301      	adds	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	e002      	b.n	8001596 <HAL_TIM_IC_CaptureCallback+0x356>
			}
			else
			{
				indxr++;
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	3301      	adds	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
		while ((indxf < (numval)) && (indxr < (numval)))
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2bff      	cmp	r3, #255	@ 0xff
 800159a:	dc03      	bgt.n	80015a4 <HAL_TIM_IC_CaptureCallback+0x364>
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	2bff      	cmp	r3, #255	@ 0xff
 80015a0:	f77f af7d 	ble.w	800149e <HAL_TIM_IC_CaptureCallback+0x25e>
			}
		}
		//Calculate the Average time between 2 Rise
		rfavg = rfavg/countrf;
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ae:	edd7 6a04 	vldr	s13, [r7, #16]
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	edc7 7a04 	vstr	s15, [r7, #16]
		//v_sound = 331+0.61*temp;
		//pulseW = *deltaT * timeFactor/1000000000;
		pulseW = rfavg*timeFactor/1000000000;  //converting ns to s
 80015ba:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x460>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80016a4 <HAL_TIM_IC_CaptureCallback+0x464>
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d0:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <HAL_TIM_IC_CaptureCallback+0x468>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]

		float sum = 0;
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
		// if the magnitude of the pulse width outside of the range 1us to 40us, then do not do this
		if (pulseW > 0.000001 && pulseW <= 0.000040)
 80015dc:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_TIM_IC_CaptureCallback+0x468>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffd9 	bl	8000598 <__aeabi_f2d>
 80015e6:	a326      	add	r3, pc, #152	@ (adr r3, 8001680 <HAL_TIM_IC_CaptureCallback+0x440>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff fabc 	bl	8000b68 <__aeabi_dcmpgt>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d037      	beq.n	8001666 <HAL_TIM_IC_CaptureCallback+0x426>
 80015f6:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <HAL_TIM_IC_CaptureCallback+0x468>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffcc 	bl	8000598 <__aeabi_f2d>
 8001600:	a321      	add	r3, pc, #132	@ (adr r3, 8001688 <HAL_TIM_IC_CaptureCallback+0x448>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff fa9b 	bl	8000b40 <__aeabi_dcmple>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d02a      	beq.n	8001666 <HAL_TIM_IC_CaptureCallback+0x426>
		{
			windspeed = DIST/(pulseW*cal_val) - v_sound;
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <HAL_TIM_IC_CaptureCallback+0x468>)
 8001612:	ed93 7a00 	vldr	s14, [r3]
 8001616:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	ee17 0a90 	vmov	r0, s15
 8001624:	f7fe ffb8 	bl	8000598 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	a118      	add	r1, pc, #96	@ (adr r1, 8001690 <HAL_TIM_IC_CaptureCallback+0x450>)
 800162e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001632:	f7ff f933 	bl	800089c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x470>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ffa8 	bl	8000598 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fe42 	bl	80002d8 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff faec 	bl	8000c38 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x474>)
 8001664:	6013      	str	r3, [r2, #0]

//		deltaT_real = *delta_T_alg(pulseW);
		//windspeed = dist/((pulseW)*cali_val);  //d/(t*path diff)
//		windspeed = dist/(deltaT_real*cal_val) - v_sound; //might need to make this an array and take the average

		riseCaptured = 0;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_TIM_IC_CaptureCallback+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
		fallCaptured = 0;
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_TIM_IC_CaptureCallback+0x47c>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
		isMeasured = 1;
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
		}
	}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	@ 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	a0b5ed8d 	.word	0xa0b5ed8d
 8001684:	3eb0c6f7 	.word	0x3eb0c6f7
 8001688:	88e368f1 	.word	0x88e368f1
 800168c:	3f04f8b5 	.word	0x3f04f8b5
 8001690:	47ae147b 	.word	0x47ae147b
 8001694:	3f847ae1 	.word	0x3f847ae1
 8001698:	20000fec 	.word	0x20000fec
 800169c:	20000bec 	.word	0x20000bec
 80016a0:	20000000 	.word	0x20000000
 80016a4:	4e6e6b28 	.word	0x4e6e6b28
 80016a8:	200013f0 	.word	0x200013f0
 80016ac:	200013f4 	.word	0x200013f4
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20001404 	.word	0x20001404
 80016b8:	20000be4 	.word	0x20000be4
 80016bc:	20000be8 	.word	0x20000be8
 80016c0:	200013ec 	.word	0x200013ec

080016c4 <adc_dma>:

//adc in dma mode -get adc value for temperature

uint32_t adc_val[1];
void adc_dma(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	// calibrate ADC for better accuracy and start it w/ interrupt
	 if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80016c8:	217f      	movs	r1, #127	@ 0x7f
 80016ca:	4815      	ldr	r0, [pc, #84]	@ (8001720 <adc_dma+0x5c>)
 80016cc:	f003 f948 	bl	8004960 <HAL_ADCEx_Calibration_Start>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <adc_dma+0x16>
	 {
		 Error_Handler();
 80016d6:	f000 fec5 	bl	8002464 <Error_Handler>
	 /*if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
	 {
	 	 Error_Handler();
	}*/
	 // start pwm generation
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4811      	ldr	r0, [pc, #68]	@ (8001724 <adc_dma+0x60>)
 80016de:	f007 fc75 	bl	8008fcc <HAL_TIM_PWM_Start>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <adc_dma+0x28>
	{
		Error_Handler();
 80016e8:	f000 febc 	bl	8002464 <Error_Handler>
	 }
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1) != HAL_OK)
 80016ec:	2201      	movs	r2, #1
 80016ee:	490e      	ldr	r1, [pc, #56]	@ (8001728 <adc_dma+0x64>)
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <adc_dma+0x5c>)
 80016f2:	f002 f88d 	bl	8003810 <HAL_ADC_Start_DMA>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <adc_dma+0x3c>
	 {
		Error_Handler();
 80016fc:	f000 feb2 	bl	8002464 <Error_Handler>
	}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001700:	217f      	movs	r1, #127	@ 0x7f
 8001702:	4807      	ldr	r0, [pc, #28]	@ (8001720 <adc_dma+0x5c>)
 8001704:	f003 f92c 	bl	8004960 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	4907      	ldr	r1, [pc, #28]	@ (8001728 <adc_dma+0x64>)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <adc_dma+0x5c>)
 800170e:	f002 f87f 	bl	8003810 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001712:	2100      	movs	r1, #0
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <adc_dma+0x60>)
 8001716:	f007 fc59 	bl	8008fcc <HAL_TIM_PWM_Start>
	return;
 800171a:	bf00      	nop
}
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200006e4 	.word	0x200006e4
 8001724:	20000970 	.word	0x20000970
 8001728:	20001418 	.word	0x20001418

0800172c <getTemp>:
#define V_REF 3300 // mV
#define OFFSET 0.5
float adc_val_f;

float *getTemp(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
	float reading_mV = 0;
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//adc_val_f = adc_val[0];
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//temp = (adc_val_f/4095) *(125 - -40);
	reading_mV = adc_val[0] *  V_REF  / 4095 ;
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <getTemp+0x5c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001740:	fb03 f202 	mul.w	r2, r3, r2
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <getTemp+0x60>)
 8001746:	fba3 1302 	umull	r1, r3, r3, r2
 800174a:	1ad2      	subs	r2, r2, r3
 800174c:	0852      	lsrs	r2, r2, #1
 800174e:	4413      	add	r3, r2
 8001750:	0adb      	lsrs	r3, r3, #11
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175a:	edc7 7a01 	vstr	s15, [r7, #4]
	temp =(reading_mV - 500) / 10; // 10mV/degree_C
 800175e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001762:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001790 <getTemp+0x64>
 8001766:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800176a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800176e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <getTemp+0x68>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
	return &temp;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <getTemp+0x68>)
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20001418 	.word	0x20001418
 800178c:	00100101 	.word	0x00100101
 8001790:	43fa0000 	.word	0x43fa0000
 8001794:	200013fc 	.word	0x200013fc

08001798 <startSineW>:
#define PI 3.1415926
float dac_val = 1.2;
uint32_t var;

void startSineW(bool start)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	if (!start)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <startSineW+0x20>
	{
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80017ae:	2100      	movs	r1, #0
 80017b0:	482b      	ldr	r0, [pc, #172]	@ (8001860 <startSineW+0xc8>)
 80017b2:	f003 fbe3 	bl	8004f7c <HAL_DAC_Stop_DMA>
		 for (int i = 0; i < 100; i++)
		 {
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
		 }
	}
}
 80017b6:	e048      	b.n	800184a <startSineW+0xb2>
		 HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2364      	movs	r3, #100	@ 0x64
 80017be:	4a29      	ldr	r2, [pc, #164]	@ (8001864 <startSineW+0xcc>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4827      	ldr	r0, [pc, #156]	@ (8001860 <startSineW+0xc8>)
 80017c4:	f003 fb06 	bl	8004dd4 <HAL_DAC_Start_DMA>
		 for (int i = 0; i < 100; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e03a      	b.n	8001844 <startSineW+0xac>
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fece 	bl	8000574 <__aeabi_i2d>
 80017d8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001858 <startSineW+0xc0>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff33 	bl	8000648 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <startSineW+0xd0>)
 80017f0:	f7ff f854 	bl	800089c <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	ec43 2b17 	vmov	d7, r2, r3
 80017fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001800:	eef0 0a67 	vmov.f32	s1, s15
 8001804:	f012 fbe4 	bl	8013fd0 <sin>
 8001808:	ec51 0b10 	vmov	r0, r1, d0
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <startSineW+0xd4>)
 8001812:	f7fe fd63 	bl	80002dc <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <startSineW+0xd8>)
 8001824:	f7fe ff10 	bl	8000648 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f9e2 	bl	8000bf8 <__aeabi_d2uiz>
 8001834:	4602      	mov	r2, r0
 8001836:	490b      	ldr	r1, [pc, #44]	@ (8001864 <startSineW+0xcc>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 for (int i = 0; i < 100; i++)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b63      	cmp	r3, #99	@ 0x63
 8001848:	ddc1      	ble.n	80017ce <startSineW+0x36>
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	f3af 8000 	nop.w
 8001858:	4d12d84a 	.word	0x4d12d84a
 800185c:	400921fb 	.word	0x400921fb
 8001860:	200007b0 	.word	0x200007b0
 8001864:	2000141c 	.word	0x2000141c
 8001868:	40590000 	.word	0x40590000
 800186c:	3ff00000 	.word	0x3ff00000
 8001870:	40a00000 	.word	0x40a00000

08001874 <lcd_disp>:
/******************************************************************/

// lcd display*****************************************************/  something is wrong with this lcd code, need to fix th buffering from flooding while not affecting the pulse width measurement

void lcd_disp(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	char * fltChar = malloc (sizeof (char) * 7);
 800187a:	2007      	movs	r0, #7
 800187c:	f00d fd42 	bl	800f304 <malloc>
 8001880:	4603      	mov	r3, r0
 8001882:	607b      	str	r3, [r7, #4]
	//char *fltChar2 = malloc (sizeof(char) * 7);
	//lcd_send_cmd (0x80);
	//char fltChar [7];
	sprintf(fltChar, "%.4f", windspeed);
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <lcd_disp+0x4c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe85 	bl	8000598 <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	490c      	ldr	r1, [pc, #48]	@ (80018c4 <lcd_disp+0x50>)
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f00e f94d 	bl	800fb34 <sprintf>
	lcd_put_cur(0,11);
 800189a:	210b      	movs	r1, #11
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff fc17 	bl	80010d0 <lcd_put_cur>

	//lcd_send_string("Windspeed=");
	//lcd_send_data((windspeed/10) +48);
	lcd_send_string(fltChar);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc6d 	bl	8001182 <lcd_send_string>
	lcd_send_string(" ");
 80018a8:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <lcd_disp+0x54>)
 80018aa:	f7ff fc6a 	bl	8001182 <lcd_send_string>
	lcd_put_cur(1,8);
	lcd_send_string (fltChar2);
	lcd_send_string(" ");*/
	//lcd_put_cur(1,0);
	//lcd_send_string("m/s");
	osDelay(500);
 80018ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018b2:	f00a fbf4 	bl	800c09e <osDelay>
	return;
 80018b6:	bf00      	nop
}
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20001404 	.word	0x20001404
 80018c4:	08015080 	.word	0x08015080
 80018c8:	08015088 	.word	0x08015088
 80018cc:	00000000 	.word	0x00000000

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	setvbuf(stdin, NULL, _IONBF, 0);
 80018d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <main+0x130>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6858      	ldr	r0, [r3, #4]
 80018da:	2300      	movs	r3, #0
 80018dc:	2202      	movs	r2, #2
 80018de:	2100      	movs	r1, #0
 80018e0:	f00e f86e 	bl	800f9c0 <setvbuf>

	lambda = v_sound/FREQ;  //wavelength
 80018e4:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <main+0x134>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001a08 <main+0x138>
 80018ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f2:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <main+0x13c>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]
	pathDiff = (DIST/lambda)-0.5;  //destructive interference, L/lambda-0.5=delta_L
 80018f8:	4b44      	ldr	r3, [pc, #272]	@ (8001a0c <main+0x13c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe4b 	bl	8000598 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	a13c      	add	r1, pc, #240	@ (adr r1, 80019f8 <main+0x128>)
 8001908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800190c:	f7fe ffc6 	bl	800089c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a10 <main+0x140>)
 800191e:	f7fe fcdb 	bl	80002d8 <__aeabi_dsub>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f985 	bl	8000c38 <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4a38      	ldr	r2, [pc, #224]	@ (8001a14 <main+0x144>)
 8001932:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f001 fb29 	bl	8002f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f894 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 fbf4 	bl	8002128 <MX_GPIO_Init>
  MX_DMA_Init();
 8001940:	f000 fb8c 	bl	800205c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001944:	f000 fb3c 	bl	8001fc0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001948:	f000 fac4 	bl	8001ed4 <MX_TIM4_Init>
  MX_TIM1_Init();
 800194c:	f000 f9ca 	bl	8001ce4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001950:	f000 f8d4 	bl	8001afc <MX_ADC1_Init>
  MX_DAC1_Init();
 8001954:	f000 f94c 	bl	8001bf0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001958:	f000 fa4a 	bl	8001df0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800195c:	f000 f982 	bl	8001c64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 8001960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001964:	4a2c      	ldr	r2, [pc, #176]	@ (8001a18 <main+0x148>)
 8001966:	2100      	movs	r1, #0
 8001968:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <main+0x14c>)
 800196a:	f007 fc91 	bl	8009290 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 800196e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001972:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <main+0x150>)
 8001974:	2104      	movs	r1, #4
 8001976:	4829      	ldr	r0, [pc, #164]	@ (8001a1c <main+0x14c>)
 8001978:	f007 fc8a 	bl	8009290 <HAL_TIM_IC_Start_DMA>
  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  //start pwm timer
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //start TIM4 pwm ch1 - macro expan 0x00000000U

  lcd_init(); 														//initialize the lcd
 800197c:	f7ff fbc7 	bl	800110e <lcd_init>
  //start timer 2 for the sinewave
  HAL_TIM_Base_Start(&htim2);
 8001980:	4828      	ldr	r0, [pc, #160]	@ (8001a24 <main+0x154>)
 8001982:	f007 f9f5 	bl	8008d70 <HAL_TIM_Base_Start>

  //start adc dma
  adc_dma();
 8001986:	f7ff fe9d 	bl	80016c4 <adc_dma>
  //start uarat dma
  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
  uart_dma();
 800198a:	f7ff fc41 	bl	8001210 <uart_dma>

  //preprint something on the lcd
  lcd_put_cur(0,0);
 800198e:	2100      	movs	r1, #0
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fb9d 	bl	80010d0 <lcd_put_cur>
  lcd_send_string("W_vel[m/s]=");
 8001996:	4824      	ldr	r0, [pc, #144]	@ (8001a28 <main+0x158>)
 8001998:	f7ff fbf3 	bl	8001182 <lcd_send_string>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800199c:	f00a faa2 	bl	800bee4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80019a0:	4822      	ldr	r0, [pc, #136]	@ (8001a2c <main+0x15c>)
 80019a2:	f00a fb97 	bl	800c0d4 <osMutexNew>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <main+0x160>)
 80019aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80019ac:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <main+0x164>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4821      	ldr	r0, [pc, #132]	@ (8001a38 <main+0x168>)
 80019b2:	f00a fae1 	bl	800bf78 <osThreadNew>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a20      	ldr	r2, [pc, #128]	@ (8001a3c <main+0x16c>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* creation of getTemp */
  getTempHandle = osThreadNew(StartgetTemp, NULL, &getTemp_attributes);
 80019bc:	4a20      	ldr	r2, [pc, #128]	@ (8001a40 <main+0x170>)
 80019be:	2100      	movs	r1, #0
 80019c0:	4820      	ldr	r0, [pc, #128]	@ (8001a44 <main+0x174>)
 80019c2:	f00a fad9 	bl	800bf78 <osThreadNew>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <main+0x178>)
 80019ca:	6013      	str	r3, [r2, #0]

  /* creation of sendLCD */
  sendLCDHandle = osThreadNew(StartsendLCD, NULL, &sendLCD_attributes);
 80019cc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <main+0x17c>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	481f      	ldr	r0, [pc, #124]	@ (8001a50 <main+0x180>)
 80019d2:	f00a fad1 	bl	800bf78 <osThreadNew>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a54 <main+0x184>)
 80019da:	6013      	str	r3, [r2, #0]

  /* creation of getPulseW */
  getPulseWHandle = osThreadNew(StartgetPulseW, NULL, &getPulseW_attributes);
 80019dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a58 <main+0x188>)
 80019de:	2100      	movs	r1, #0
 80019e0:	481e      	ldr	r0, [pc, #120]	@ (8001a5c <main+0x18c>)
 80019e2:	f00a fac9 	bl	800bf78 <osThreadNew>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <main+0x190>)
 80019ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019ec:	f00a fa9e 	bl	800bf2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <main+0x120>
 80019f4:	f3af 8000 	nop.w
 80019f8:	47ae147b 	.word	0x47ae147b
 80019fc:	3f847ae1 	.word	0x3f847ae1
 8001a00:	20000434 	.word	0x20000434
 8001a04:	20000004 	.word	0x20000004
 8001a08:	46c35000 	.word	0x46c35000
 8001a0c:	200013f8 	.word	0x200013f8
 8001a10:	3fe00000 	.word	0x3fe00000
 8001a14:	20001400 	.word	0x20001400
 8001a18:	20000bec 	.word	0x20000bec
 8001a1c:	200008d8 	.word	0x200008d8
 8001a20:	20000fec 	.word	0x20000fec
 8001a24:	20000924 	.word	0x20000924
 8001a28:	0801508c 	.word	0x0801508c
 8001a2c:	08015164 	.word	0x08015164
 8001a30:	20000be0 	.word	0x20000be0
 8001a34:	080150d4 	.word	0x080150d4
 8001a38:	080021e9 	.word	0x080021e9
 8001a3c:	20000bd0 	.word	0x20000bd0
 8001a40:	080150f8 	.word	0x080150f8
 8001a44:	08002369 	.word	0x08002369
 8001a48:	20000bd4 	.word	0x20000bd4
 8001a4c:	0801511c 	.word	0x0801511c
 8001a50:	0800239d 	.word	0x0800239d
 8001a54:	20000bd8 	.word	0x20000bd8
 8001a58:	08015140 	.word	0x08015140
 8001a5c:	080023d1 	.word	0x080023d1
 8001a60:	20000bdc 	.word	0x20000bdc

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b094      	sub	sp, #80	@ 0x50
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0318 	add.w	r3, r7, #24
 8001a6e:	2238      	movs	r2, #56	@ 0x38
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00e f8c1 	bl	800fbfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f006 f916 	bl	8007cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a96:	2340      	movs	r3, #64	@ 0x40
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001aa6:	2355      	movs	r3, #85	@ 0x55
 8001aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	4618      	mov	r0, r3
 8001abc:	f006 f9b0 	bl	8007e20 <HAL_RCC_OscConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ac6:	f000 fccd 	bl	8002464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aca:	230f      	movs	r3, #15
 8001acc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fcae 	bl	8008444 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001aee:	f000 fcb9 	bl	8002464 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	@ 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	@ 0x30
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2220      	movs	r2, #32
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00e f870 	bl	800fbfa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b1a:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001b22:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b30:	4b2d      	ldr	r3, [pc, #180]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b36:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b44:	2204      	movs	r2, #4
 8001b46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b48:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b54:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b64:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b88:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001b8a:	f001 fcbd 	bl	8003508 <HAL_ADC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001b94:	f000 fc66 	bl	8002464 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4811      	ldr	r0, [pc, #68]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001ba4:	f002 ff70 	bl	8004a88 <HAL_ADCEx_MultiModeConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001bae:	f000 fc59 	bl	8002464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_ADC1_Init+0xf0>)
 8001bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bbe:	237f      	movs	r3, #127	@ 0x7f
 8001bc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <MX_ADC1_Init+0xec>)
 8001bd0:	f002 f90a 	bl	8003de8 <HAL_ADC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001bda:	f000 fc43 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3730      	adds	r7, #48	@ 0x30
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200006e4 	.word	0x200006e4
 8001bec:	04300002 	.word	0x04300002

08001bf0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2230      	movs	r2, #48	@ 0x30
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00d fffc 	bl	800fbfa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <MX_DAC1_Init+0x6c>)
 8001c04:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <MX_DAC1_Init+0x70>)
 8001c06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c08:	4814      	ldr	r0, [pc, #80]	@ (8001c5c <MX_DAC1_Init+0x6c>)
 8001c0a:	f003 f8c1 	bl	8004d90 <HAL_DAC_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c14:	f000 fc26 	bl	8002464 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001c28:	2312      	movs	r3, #18
 8001c2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001c34:	2301      	movs	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	@ (8001c5c <MX_DAC1_Init+0x6c>)
 8001c44:	f003 fa66 	bl	8005114 <HAL_DAC_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001c4e:	f000 fc09 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	@ 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200007b0 	.word	0x200007b0
 8001c60:	50000800 	.word	0x50000800

08001c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <MX_I2C1_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <MX_I2C1_Init+0x7c>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c9e:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001ca0:	f004 f960 	bl	8005f64 <HAL_I2C_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001caa:	f000 fbdb 	bl	8002464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001cb2:	f005 ff69 	bl	8007b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cbc:	f000 fbd2 	bl	8002464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001cc4:	f005 ffab 	bl	8007c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f000 fbc9 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000824 	.word	0x20000824
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	40b285c2 	.word	0x40b285c2

08001ce4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */
 // timer for PLL pulse width input capture. If we use prescaler 0, fclk = 170Mhz, then 5.882ns/tick
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d10:	4b35      	ldr	r3, [pc, #212]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d12:	4a36      	ldr	r2, [pc, #216]	@ (8001dec <MX_TIM1_Init+0x108>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d16:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d22:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d36:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d3c:	482a      	ldr	r0, [pc, #168]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d3e:	f006 ffbf 	bl	8008cc0 <HAL_TIM_Base_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001d48:	f000 fb8c 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d50:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	4619      	mov	r1, r3
 8001d58:	4823      	ldr	r0, [pc, #140]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d5a:	f007 fec3 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001d64:	f000 fb7e 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d68:	481f      	ldr	r0, [pc, #124]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d6a:	f007 fa2f 	bl	80091cc <HAL_TIM_IC_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d74:	f000 fb76 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4817      	ldr	r0, [pc, #92]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001d8c:	f008 fe2a 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001d96:	f000 fb65 	bl	8002464 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001db2:	f007 fdfb 	bl	80099ac <HAL_TIM_IC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001dbc:	f000 fb52 	bl	8002464 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_TIM1_Init+0x104>)
 8001dd0:	f007 fdec 	bl	80099ac <HAL_TIM_IC_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001dda:	f000 fb43 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3730      	adds	r7, #48	@ 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200008d8 	.word	0x200008d8
 8001dec:	40012c00 	.word	0x40012c00

08001df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	@ 0x38
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//this is used to generate a sinewave, f_sys_clk/(prescalar * 100)/4 = 25khz
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e10:	463b      	mov	r3, r7
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8001e2a:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8001e36:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e38:	2203      	movs	r2, #3
 8001e3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e42:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e48:	4821      	ldr	r0, [pc, #132]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e4a:	f006 ff39 	bl	8008cc0 <HAL_TIM_Base_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e54:	f000 fb06 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e62:	4619      	mov	r1, r3
 8001e64:	481a      	ldr	r0, [pc, #104]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e66:	f007 fe3d 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e70:	f000 faf8 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e74:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e76:	f007 f847 	bl	8008f08 <HAL_TIM_OC_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e80:	f000 faf0 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e84:	2320      	movs	r3, #32
 8001e86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	480f      	ldr	r0, [pc, #60]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001e94:	f008 fda6 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e9e:	f000 fae1 	bl	8002464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_TIM2_Init+0xe0>)
 8001eba:	f007 fcfd 	bl	80098b8 <HAL_TIM_OC_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ec4:	f000 face 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3738      	adds	r7, #56	@ 0x38
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000924 	.word	0x20000924

08001ed4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08e      	sub	sp, #56	@ 0x38
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	619a      	str	r2, [r3, #24]
  //arr/2-1 = 6800/2-1
  //timer 4 is unused right now since we are using the sinewave from timer 2
  // timer 4 is used for adc trigger event

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f06:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f08:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <MX_TIM4_Init+0xe8>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6799;
 8001f18:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f1a:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8001f1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f26:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f2c:	4822      	ldr	r0, [pc, #136]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f2e:	f006 fec7 	bl	8008cc0 <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f38:	f000 fa94 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f46:	4619      	mov	r1, r3
 8001f48:	481b      	ldr	r0, [pc, #108]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f4a:	f007 fdcb 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f54:	f000 fa86 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001f58:	4817      	ldr	r0, [pc, #92]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f5a:	f006 ffd5 	bl	8008f08 <HAL_TIM_OC_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f64:	f000 fa7e 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4810      	ldr	r0, [pc, #64]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001f78:	f008 fd34 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f82:	f000 fa6f 	bl	8002464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3399;
 8001f8a:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	@ (8001fb8 <MX_TIM4_Init+0xe4>)
 8001fa0:	f007 fc8a 	bl	80098b8 <HAL_TIM_OC_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001faa:	f000 fa5b 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3738      	adds	r7, #56	@ 0x38
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000970 	.word	0x20000970
 8001fbc:	40000800 	.word	0x40000800

08001fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc4:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fc6:	4a24      	ldr	r2, [pc, #144]	@ (8002058 <MX_USART2_UART_Init+0x98>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fca:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001ff6:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8001ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ffc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	4812      	ldr	r0, [pc, #72]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 800200c:	f008 fdb2 	bl	800ab74 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002016:	f000 fa25 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201a:	2100      	movs	r1, #0
 800201c:	480d      	ldr	r0, [pc, #52]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 800201e:	f009 fdff 	bl	800bc20 <HAL_UARTEx_SetTxFifoThreshold>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002028:	f000 fa1c 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202c:	2100      	movs	r1, #0
 800202e:	4809      	ldr	r0, [pc, #36]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8002030:	f009 fe34 	bl	800bc9c <HAL_UARTEx_SetRxFifoThreshold>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800203a:	f000 fa13 	bl	8002464 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART2_UART_Init+0x94>)
 8002040:	f009 fdb5 	bl	800bbae <HAL_UARTEx_DisableFifoMode>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800204a:	f000 fa0b 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000a7c 	.word	0x20000a7c
 8002058:	40004400 	.word	0x40004400

0800205c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002062:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	4a2f      	ldr	r2, [pc, #188]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6493      	str	r3, [r2, #72]	@ 0x48
 800206e:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207a:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <MX_DMA_Init+0xc8>)
 800207c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207e:	4a29      	ldr	r2, [pc, #164]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6493      	str	r3, [r2, #72]	@ 0x48
 8002086:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002092:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002096:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <MX_DMA_Init+0xc8>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6493      	str	r3, [r2, #72]	@ 0x48
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <MX_DMA_Init+0xc8>)
 80020a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	200b      	movs	r0, #11
 80020b0:	f002 fe46 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020b4:	200b      	movs	r0, #11
 80020b6:	f002 fe5d 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2105      	movs	r1, #5
 80020be:	200c      	movs	r0, #12
 80020c0:	f002 fe3e 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020c4:	200c      	movs	r0, #12
 80020c6:	f002 fe55 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	200d      	movs	r0, #13
 80020d0:	f002 fe36 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020d4:	200d      	movs	r0, #13
 80020d6:	f002 fe4d 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	200e      	movs	r0, #14
 80020e0:	f002 fe2e 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80020e4:	200e      	movs	r0, #14
 80020e6:	f002 fe45 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2105      	movs	r1, #5
 80020ee:	200f      	movs	r0, #15
 80020f0:	f002 fe26 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80020f4:	200f      	movs	r0, #15
 80020f6:	f002 fe3d 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2105      	movs	r1, #5
 80020fe:	2038      	movs	r0, #56	@ 0x38
 8002100:	f002 fe1e 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002104:	2038      	movs	r0, #56	@ 0x38
 8002106:	f002 fe35 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	2039      	movs	r0, #57	@ 0x39
 8002110:	f002 fe16 	bl	8004d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002114:	2039      	movs	r0, #57	@ 0x39
 8002116:	f002 fe2d 	bl	8004d74 <HAL_NVIC_EnableIRQ>

}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000

08002128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_GPIO_Init+0x94>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <MX_GPIO_Init+0x94>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214a:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <MX_GPIO_Init+0x94>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <MX_GPIO_Init+0x94>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <MX_GPIO_Init+0x94>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <MX_GPIO_Init+0x94>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002174:	4812      	ldr	r0, [pc, #72]	@ (80021c0 <MX_GPIO_Init+0x98>)
 8002176:	f003 fedd 	bl	8005f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800217a:	2360      	movs	r3, #96	@ 0x60
 800217c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002190:	f003 fd4e 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002194:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <MX_GPIO_Init+0x98>)
 80021ae:	f003 fd3f 	bl	8005c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48000400 	.word	0x48000400

080021c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//adc dma callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	//adc_val[0] = HAL_ADC_GetValue(&hadc1);
	//adc_val_f = adc_val;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	4904      	ldr	r1, [pc, #16]	@ (80021e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80021d0:	4804      	ldr	r0, [pc, #16]	@ (80021e4 <HAL_ADC_ConvCpltCallback+0x20>)
 80021d2:	f001 fb1d 	bl	8003810 <HAL_ADC_Start_DMA>
	return;
 80021d6:	bf00      	nop
}
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20001418 	.word	0x20001418
 80021e4:	200006e4 	.word	0x200006e4

080021e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 80021f0:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <StartDefaultTask+0x158>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	4618      	mov	r0, r3
 80021fa:	f009 fff1 	bl	800c1e0 <osMutexAcquire>
	  	  //scan for user inpt for the state machine

	  	 //inp = *scanInp();
	  	  //wait again so we don't flood the serial terminal
	  	  //HAL_Delay(100);
	  	  inp = RxData[0];
 80021fe:	4b51      	ldr	r3, [pc, #324]	@ (8002344 <StartDefaultTask+0x15c>)
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <StartDefaultTask+0x160>)
 8002204:	701a      	strb	r2, [r3, #0]
	  	  if (inp == 'i')
 8002206:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <StartDefaultTask+0x160>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b69      	cmp	r3, #105	@ 0x69
 800220c:	d103      	bne.n	8002216 <StartDefaultTask+0x2e>
	  	  {
	  		  State = IDLE;
 800220e:	4b4f      	ldr	r3, [pc, #316]	@ (800234c <StartDefaultTask+0x164>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e00e      	b.n	8002234 <StartDefaultTask+0x4c>
	  	  }
	  	  else if (inp == 's')
 8002216:	4b4c      	ldr	r3, [pc, #304]	@ (8002348 <StartDefaultTask+0x160>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b73      	cmp	r3, #115	@ 0x73
 800221c:	d103      	bne.n	8002226 <StartDefaultTask+0x3e>
	  	  {
	  		  State = START;
 800221e:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <StartDefaultTask+0x164>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e006      	b.n	8002234 <StartDefaultTask+0x4c>
	  	  }
	  	  else if (inp == 't')
 8002226:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <StartDefaultTask+0x160>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b74      	cmp	r3, #116	@ 0x74
 800222c:	d102      	bne.n	8002234 <StartDefaultTask+0x4c>
	  	  {
	  		  State = STOP;
 800222e:	4b47      	ldr	r3, [pc, #284]	@ (800234c <StartDefaultTask+0x164>)
 8002230:	2203      	movs	r2, #3
 8002232:	701a      	strb	r2, [r3, #0]
	  	  }else{};

	  	  //State Machine starts here
	  	  switch (State)
 8002234:	4b45      	ldr	r3, [pc, #276]	@ (800234c <StartDefaultTask+0x164>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d862      	bhi.n	8002302 <StartDefaultTask+0x11a>
 800223c:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <StartDefaultTask+0x5c>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002255 	.word	0x08002255
 8002248:	0800226b 	.word	0x0800226b
 800224c:	08002311 	.word	0x08002311
 8002250:	080022ef 	.word	0x080022ef
	  		 // uart_buf_len = sprintf(uart_buf, "In IDLE state\r\n");
	  		  //printf("In IDLE State\r\n");
	  		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	  		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); /// disable nShutdown pin for digital amp
	  		  //startSpeaker(0); //turn off speaker
	  		  startSineW(0); //using sinewave instead
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff fa9f 	bl	8001798 <startSineW>
	  		  RxData[0] = '\0';
 800225a:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <StartDefaultTask+0x15c>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]

	  		  osDelay(1000);
 8002260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002264:	f009 ff1b 	bl	800c09e <osDelay>

	  		  break;
 8002268:	e053      	b.n	8002312 <StartDefaultTask+0x12a>
	  	  case START:
	  		  //nShutdownDamp = 1; // start digital amplifier
	  		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	  		  //printf("In START State\r\n"); // print status in terminal
	  		  //startSpeaker(1);
	  		  startSineW(1); //using sinewave instead
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff fa94 	bl	8001798 <startSineW>
	  		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	  		  /*the following is use to do pulse output and measure the very beginning****
	  		  //HAL_Delay(100);  //wait 20ms
	  		  //startSpeaker(0);
	  		   */
	  		  v_sound = 331+0.61*temp; // only capturing temp once
 8002270:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <StartDefaultTask+0x168>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f98f 	bl	8000598 <__aeabi_f2d>
 800227a:	a32b      	add	r3, pc, #172	@ (adr r3, 8002328 <StartDefaultTask+0x140>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f9e2 	bl	8000648 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	a328      	add	r3, pc, #160	@ (adr r3, 8002330 <StartDefaultTask+0x148>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe f823 	bl	80002dc <__adddf3>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fccb 	bl	8000c38 <__aeabi_d2f>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002354 <StartDefaultTask+0x16c>)
 80022a6:	6013      	str	r3, [r2, #0]
	  		  cal_val = DIST/(pulseW*v_sound);  //get the calibration value from the drift and temperature
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <StartDefaultTask+0x170>)
 80022aa:	ed93 7a00 	vldr	s14, [r3]
 80022ae:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <StartDefaultTask+0x16c>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b8:	ee17 0a90 	vmov	r0, s15
 80022bc:	f7fe f96c 	bl	8000598 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	a11c      	add	r1, pc, #112	@ (adr r1, 8002338 <StartDefaultTask+0x150>)
 80022c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022ca:	f7fe fae7 	bl	800089c <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fcaf 	bl	8000c38 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <StartDefaultTask+0x174>)
 80022de:	6013      	str	r3, [r2, #0]
	  		 // lcd_init();
	  		  RxData[0] = '\0';
 80022e0:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <StartDefaultTask+0x15c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
	  		  State = CALTIME;
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <StartDefaultTask+0x164>)
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]

	  		  break;
 80022ec:	e011      	b.n	8002312 <StartDefaultTask+0x12a>
	  		  break;

	  	  case STOP:
	  		  //nShutdownDamp = 0; //stop digital amplifier
	  		  //startSpeaker(0);
	  		  startSineW(0); //using sinewave instead
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff fa52 	bl	8001798 <startSineW>
	  		  printf("In STOP State\r\n"); // print status in terminal
 80022f4:	481a      	ldr	r0, [pc, #104]	@ (8002360 <StartDefaultTask+0x178>)
 80022f6:	f00d fb5b 	bl	800f9b0 <puts>
	  		  HAL_Delay(100);  //wait 100ms
 80022fa:	2064      	movs	r0, #100	@ 0x64
 80022fc:	f000 fe7c 	bl	8002ff8 <HAL_Delay>
	  		  break;
 8002300:	e007      	b.n	8002312 <StartDefaultTask+0x12a>

	  	  default:
	  		  /*uart_buf_len = sprintf(uart_buf, "In Default State\r\n");
	    		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
	  		  printf("In DEFAULT State\r\n"); // print status in terminal
 8002302:	4818      	ldr	r0, [pc, #96]	@ (8002364 <StartDefaultTask+0x17c>)
 8002304:	f00d fb54 	bl	800f9b0 <puts>
	  		  HAL_Delay(100);  //wait 100ms
 8002308:	2064      	movs	r0, #100	@ 0x64
 800230a:	f000 fe75 	bl	8002ff8 <HAL_Delay>
	  		  break;
 800230e:	e000      	b.n	8002312 <StartDefaultTask+0x12a>
	  		  break;
 8002310:	bf00      	nop

	  	  }
	  	  //osSemaphoreRelease(BinSemHandle);
	  	osMutexRelease(myMutex01Handle);
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <StartDefaultTask+0x158>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f009 ffad 	bl	800c276 <osMutexRelease>
    osDelay(100);
 800231c:	2064      	movs	r0, #100	@ 0x64
 800231e:	f009 febe 	bl	800c09e <osDelay>
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8002322:	e765      	b.n	80021f0 <StartDefaultTask+0x8>
 8002324:	f3af 8000 	nop.w
 8002328:	b851eb85 	.word	0xb851eb85
 800232c:	3fe3851e 	.word	0x3fe3851e
 8002330:	00000000 	.word	0x00000000
 8002334:	4074b000 	.word	0x4074b000
 8002338:	47ae147b 	.word	0x47ae147b
 800233c:	3f847ae1 	.word	0x3f847ae1
 8002340:	20000be0 	.word	0x20000be0
 8002344:	20001408 	.word	0x20001408
 8002348:	20001414 	.word	0x20001414
 800234c:	200015ac 	.word	0x200015ac
 8002350:	200013fc 	.word	0x200013fc
 8002354:	20000004 	.word	0x20000004
 8002358:	200013f0 	.word	0x200013f0
 800235c:	200013f4 	.word	0x200013f4
 8002360:	08015098 	.word	0x08015098
 8002364:	080150a8 	.word	0x080150a8

08002368 <StartgetTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartgetTemp */
void StartgetTemp(void *argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartgetTemp */
  /* Infinite loop */
  while(1)
  {
	osMutexAcquire(myMutex01Handle, osWaitForever);
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <StartgetTemp+0x30>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	4618      	mov	r0, r3
 800237a:	f009 ff31 	bl	800c1e0 <osMutexAcquire>
	//osSemaphoreWait(BinSemHandle, osWaitForever); // it is osSemaphoreAcquire instead of osSemaphoreWait
	getTemp();
 800237e:	f7ff f9d5 	bl	800172c <getTemp>
	// osSemaphoreRelease(BinSemHandle);
	osMutexRelease(myMutex01Handle);
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <StartgetTemp+0x30>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f009 ff75 	bl	800c276 <osMutexRelease>
    osDelay(100);
 800238c:	2064      	movs	r0, #100	@ 0x64
 800238e:	f009 fe86 	bl	800c09e <osDelay>
	osMutexAcquire(myMutex01Handle, osWaitForever);
 8002392:	bf00      	nop
 8002394:	e7ec      	b.n	8002370 <StartgetTemp+0x8>
 8002396:	bf00      	nop
 8002398:	20000be0 	.word	0x20000be0

0800239c <StartsendLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartsendLCD */
void StartsendLCD(void *argument)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartsendLCD */
  /* Infinite loop */
  while(1)
  {
	osMutexAcquire(myMutex01Handle, osWaitForever);
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <StartsendLCD+0x30>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	4618      	mov	r0, r3
 80023ae:	f009 ff17 	bl	800c1e0 <osMutexAcquire>
	//osSemaphoreWait(BinSemHandle, osWaitForever); // it is osSemaphoreAcquire instead of osSemaphoreWait
	lcd_disp();
 80023b2:	f7ff fa5f 	bl	8001874 <lcd_disp>
	//osSemaphoreRelease(BinSemHandle);
	osMutexRelease(myMutex01Handle);
 80023b6:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <StartsendLCD+0x30>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f009 ff5b 	bl	800c276 <osMutexRelease>
    osDelay(100);
 80023c0:	2064      	movs	r0, #100	@ 0x64
 80023c2:	f009 fe6c 	bl	800c09e <osDelay>
	osMutexAcquire(myMutex01Handle, osWaitForever);
 80023c6:	bf00      	nop
 80023c8:	e7ec      	b.n	80023a4 <StartsendLCD+0x8>
 80023ca:	bf00      	nop
 80023cc:	20000be0 	.word	0x20000be0

080023d0 <StartgetPulseW>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartgetPulseW */
void StartgetPulseW(void *argument)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartgetPulseW */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <StartgetPulseW+0x58>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	4618      	mov	r0, r3
 80023e2:	f009 fefd 	bl	800c1e0 <osMutexAcquire>
	  if (isMeasured)
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <StartgetPulseW+0x5c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <StartgetPulseW+0x46>
	  {
		  TIM1->CNT = 0;
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <StartgetPulseW+0x60>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 80023f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002434 <StartgetPulseW+0x64>)
 80023fa:	2100      	movs	r1, #0
 80023fc:	480e      	ldr	r0, [pc, #56]	@ (8002438 <StartgetPulseW+0x68>)
 80023fe:	f006 ff47 	bl	8009290 <HAL_TIM_IC_Start_DMA>
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 8002402:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002406:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <StartgetPulseW+0x6c>)
 8002408:	2104      	movs	r1, #4
 800240a:	480b      	ldr	r0, [pc, #44]	@ (8002438 <StartgetPulseW+0x68>)
 800240c:	f006 ff40 	bl	8009290 <HAL_TIM_IC_Start_DMA>
		  isMeasured = 0;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <StartgetPulseW+0x5c>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
	  }
	  osMutexRelease(myMutex01Handle);
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <StartgetPulseW+0x58>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f009 ff2b 	bl	800c276 <osMutexRelease>
	  osDelay(1);
 8002420:	2001      	movs	r0, #1
 8002422:	f009 fe3c 	bl	800c09e <osDelay>
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8002426:	e7d7      	b.n	80023d8 <StartgetPulseW+0x8>
 8002428:	20000be0 	.word	0x20000be0
 800242c:	200013ec 	.word	0x200013ec
 8002430:	40012c00 	.word	0x40012c00
 8002434:	20000bec 	.word	0x20000bec
 8002438:	200008d8 	.word	0x200008d8
 800243c:	20000fec 	.word	0x20000fec

08002440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002452:	f000 fdb3 	bl	8002fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40000400 	.word	0x40000400

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <Error_Handler+0x8>

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_MspInit+0x50>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <HAL_MspInit+0x50>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6613      	str	r3, [r2, #96]	@ 0x60
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_MspInit+0x50>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <HAL_MspInit+0x50>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a0b      	ldr	r2, [pc, #44]	@ (80024c0 <HAL_MspInit+0x50>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_MspInit+0x50>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	210f      	movs	r1, #15
 80024aa:	f06f 0001 	mvn.w	r0, #1
 80024ae:	f002 fc47 	bl	8004d40 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024b2:	f005 fca5 	bl	8007e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b09a      	sub	sp, #104	@ 0x68
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	2244      	movs	r2, #68	@ 0x44
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00d fb88 	bl	800fbfa <memset>
  if(hadc->Instance==ADC1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f2:	d167      	bne.n	80025c4 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80024fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80024fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f006 f9eb 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002510:	f7ff ffa8 	bl	8002464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002514:	4b2d      	ldr	r3, [pc, #180]	@ (80025cc <HAL_ADC_MspInit+0x108>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <HAL_ADC_MspInit+0x108>)
 800251a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800251e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002520:	4b2a      	ldr	r3, [pc, #168]	@ (80025cc <HAL_ADC_MspInit+0x108>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <HAL_ADC_MspInit+0x108>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002530:	4a26      	ldr	r2, [pc, #152]	@ (80025cc <HAL_ADC_MspInit+0x108>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002538:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <HAL_ADC_MspInit+0x108>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002544:	2301      	movs	r3, #1
 8002546:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002548:	2303      	movs	r3, #3
 800254a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255a:	f003 fb69 	bl	8005c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_ADC_MspInit+0x110>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 8002566:	2205      	movs	r2, #5
 8002568:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 800257e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002582:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 8002586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800258a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 800258e:	2220      	movs	r2, #32
 8002590:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002598:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 800259a:	f003 f809 	bl	80055b0 <HAL_DMA_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80025a4:	f7ff ff5e 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a09      	ldr	r2, [pc, #36]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80025ae:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <HAL_ADC_MspInit+0x10c>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2105      	movs	r1, #5
 80025b8:	2012      	movs	r0, #18
 80025ba:	f002 fbc1 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025be:	2012      	movs	r0, #18
 80025c0:	f002 fbd8 	bl	8004d74 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025c4:	bf00      	nop
 80025c6:	3768      	adds	r7, #104	@ 0x68
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	20000750 	.word	0x20000750
 80025d4:	40020058 	.word	0x40020058

080025d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2f      	ldr	r2, [pc, #188]	@ (80026b4 <HAL_DAC_MspInit+0xdc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d157      	bne.n	80026aa <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80025fa:	4b2f      	ldr	r3, [pc, #188]	@ (80026b8 <HAL_DAC_MspInit+0xe0>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	4a2e      	ldr	r2, [pc, #184]	@ (80026b8 <HAL_DAC_MspInit+0xe0>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002606:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_DAC_MspInit+0xe0>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <HAL_DAC_MspInit+0xe0>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a28      	ldr	r2, [pc, #160]	@ (80026b8 <HAL_DAC_MspInit+0xe0>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <HAL_DAC_MspInit+0xe0>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800262a:	2310      	movs	r3, #16
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262e:	2303      	movs	r3, #3
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002640:	f003 faf6 	bl	8005c30 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002646:	4a1e      	ldr	r2, [pc, #120]	@ (80026c0 <HAL_DAC_MspInit+0xe8>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 800264c:	2206      	movs	r2, #6
 800264e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002652:	2210      	movs	r2, #16
 8002654:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800265c:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 800265e:	2280      	movs	r2, #128	@ 0x80
 8002660:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 800266c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002670:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002674:	2220      	movs	r2, #32
 8002676:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800267e:	480f      	ldr	r0, [pc, #60]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002680:	f002 ff96 	bl	80055b0 <HAL_DMA_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800268a:	f7ff feeb 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <HAL_DAC_MspInit+0xe4>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	210f      	movs	r1, #15
 800269e:	2036      	movs	r0, #54	@ 0x36
 80026a0:	f002 fb4e 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026a4:	2036      	movs	r0, #54	@ 0x36
 80026a6:	f002 fb65 	bl	8004d74 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	@ 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	50000800 	.word	0x50000800
 80026b8:	40021000 	.word	0x40021000
 80026bc:	200007c4 	.word	0x200007c4
 80026c0:	40020030 	.word	0x40020030

080026c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b09c      	sub	sp, #112	@ 0x70
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	2244      	movs	r2, #68	@ 0x44
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00d fa88 	bl	800fbfa <memset>
  if(hi2c->Instance==I2C1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002818 <HAL_I2C_MspInit+0x154>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f040 808d 	bne.w	8002810 <HAL_I2C_MspInit+0x14c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026f6:	2340      	movs	r3, #64	@ 0x40
 80026f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	4618      	mov	r0, r3
 8002704:	f006 f8ec 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800270e:	f7ff fea9 	bl	8002464 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	4b42      	ldr	r3, [pc, #264]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	4a41      	ldr	r2, [pc, #260]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271e:	4b3f      	ldr	r3, [pc, #252]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b3c      	ldr	r3, [pc, #240]	@ (800281c <HAL_I2C_MspInit+0x158>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	4a3b      	ldr	r2, [pc, #236]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002736:	4b39      	ldr	r3, [pc, #228]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002746:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002748:	2312      	movs	r3, #18
 800274a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002754:	2304      	movs	r3, #4
 8002756:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002762:	f003 fa65 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276a:	2312      	movs	r3, #18
 800276c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002776:	2304      	movs	r3, #4
 8002778:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800277e:	4619      	mov	r1, r3
 8002780:	4827      	ldr	r0, [pc, #156]	@ (8002820 <HAL_I2C_MspInit+0x15c>)
 8002782:	f003 fa55 	bl	8005c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002786:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_I2C_MspInit+0x158>)
 800278c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002790:	6593      	str	r3, [r2, #88]	@ 0x58
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_I2C_MspInit+0x158>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 800279e:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027a0:	4a21      	ldr	r2, [pc, #132]	@ (8002828 <HAL_I2C_MspInit+0x164>)
 80027a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027a6:	2211      	movs	r2, #17
 80027a8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027ac:	2210      	movs	r2, #16
 80027ae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027b8:	2280      	movs	r2, #128	@ 0x80
 80027ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80027d4:	4813      	ldr	r0, [pc, #76]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027d6:	f002 feeb 	bl	80055b0 <HAL_DMA_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80027e0:	f7ff fe40 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80027ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002824 <HAL_I2C_MspInit+0x160>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2105      	movs	r1, #5
 80027f4:	201f      	movs	r0, #31
 80027f6:	f002 faa3 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027fa:	201f      	movs	r0, #31
 80027fc:	f002 faba 	bl	8004d74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2105      	movs	r1, #5
 8002804:	2020      	movs	r0, #32
 8002806:	f002 fa9b 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800280a:	2020      	movs	r0, #32
 800280c:	f002 fab2 	bl	8004d74 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002810:	bf00      	nop
 8002812:	3770      	adds	r7, #112	@ 0x70
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40005400 	.word	0x40005400
 800281c:	40021000 	.word	0x40021000
 8002820:	48000400 	.word	0x48000400
 8002824:	20000878 	.word	0x20000878
 8002828:	40020044 	.word	0x40020044

0800282c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	@ 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a68      	ldr	r2, [pc, #416]	@ (80029ec <HAL_TIM_Base_MspInit+0x1c0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 808b 	bne.w	8002966 <HAL_TIM_Base_MspInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002850:	4b67      	ldr	r3, [pc, #412]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002854:	4a66      	ldr	r2, [pc, #408]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002856:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800285a:	6613      	str	r3, [r2, #96]	@ 0x60
 800285c:	4b64      	ldr	r3, [pc, #400]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	4b61      	ldr	r3, [pc, #388]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286c:	4a60      	ldr	r2, [pc, #384]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002874:	4b5e      	ldr	r3, [pc, #376]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002892:	2306      	movs	r3, #6
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a0:	f003 f9c6 	bl	8005c30 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80028a4:	4b53      	ldr	r3, [pc, #332]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028a6:	4a54      	ldr	r2, [pc, #336]	@ (80029f8 <HAL_TIM_Base_MspInit+0x1cc>)
 80028a8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80028aa:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028ac:	222a      	movs	r2, #42	@ 0x2a
 80028ae:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b0:	4b50      	ldr	r3, [pc, #320]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b6:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028bc:	4b4d      	ldr	r3, [pc, #308]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028be:	2280      	movs	r2, #128	@ 0x80
 80028c0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028c2:	4b4c      	ldr	r3, [pc, #304]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028d0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80028d2:	4b48      	ldr	r3, [pc, #288]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028d4:	2220      	movs	r2, #32
 80028d6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80028e0:	4844      	ldr	r0, [pc, #272]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028e2:	f002 fe65 	bl	80055b0 <HAL_DMA_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 80028ec:	f7ff fdba 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a40      	ldr	r2, [pc, #256]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80028f6:	4a3f      	ldr	r2, [pc, #252]	@ (80029f4 <HAL_TIM_Base_MspInit+0x1c8>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 80028fc:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 80028fe:	4a40      	ldr	r2, [pc, #256]	@ (8002a00 <HAL_TIM_Base_MspInit+0x1d4>)
 8002900:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002902:	4b3e      	ldr	r3, [pc, #248]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 8002904:	222b      	movs	r2, #43	@ 0x2b
 8002906:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002908:	4b3c      	ldr	r3, [pc, #240]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800290e:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002914:	4b39      	ldr	r3, [pc, #228]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800291a:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 800291c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002920:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002922:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 8002924:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002928:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 800292c:	2220      	movs	r2, #32
 800292e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002930:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 8002932:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002936:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002938:	4830      	ldr	r0, [pc, #192]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 800293a:	f002 fe39 	bl	80055b0 <HAL_DMA_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_TIM_Base_MspInit+0x11c>
    {
      Error_Handler();
 8002944:	f7ff fd8e 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a2c      	ldr	r2, [pc, #176]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 800294c:	629a      	str	r2, [r3, #40]	@ 0x28
 800294e:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <HAL_TIM_Base_MspInit+0x1d0>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2105      	movs	r1, #5
 8002958:	201b      	movs	r0, #27
 800295a:	f002 f9f1 	bl	8004d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800295e:	201b      	movs	r0, #27
 8002960:	f002 fa08 	bl	8004d74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002964:	e03e      	b.n	80029e4 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296e:	d10c      	bne.n	800298a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002970:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6593      	str	r3, [r2, #88]	@ 0x58
 800297c:	4b1c      	ldr	r3, [pc, #112]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]
}
 8002988:	e02c      	b.n	80029e4 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_TIM_Base_MspInit+0x1d8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d127      	bne.n	80029e4 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	4a15      	ldr	r2, [pc, #84]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ac:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b0:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b8:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_TIM_Base_MspInit+0x1c4>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c4:	2340      	movs	r3, #64	@ 0x40
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d4:	2302      	movs	r3, #2
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	480a      	ldr	r0, [pc, #40]	@ (8002a08 <HAL_TIM_Base_MspInit+0x1dc>)
 80029e0:	f003 f926 	bl	8005c30 <HAL_GPIO_Init>
}
 80029e4:	bf00      	nop
 80029e6:	3730      	adds	r7, #48	@ 0x30
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	200009bc 	.word	0x200009bc
 80029f8:	40020008 	.word	0x40020008
 80029fc:	20000a1c 	.word	0x20000a1c
 8002a00:	4002001c 	.word	0x4002001c
 8002a04:	40000800 	.word	0x40000800
 8002a08:	48000400 	.word	0x48000400

08002a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b09a      	sub	sp, #104	@ 0x68
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	2244      	movs	r2, #68	@ 0x44
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00d f8e4 	bl	800fbfa <memset>
  if(huart->Instance==USART2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a49      	ldr	r2, [pc, #292]	@ (8002b5c <HAL_UART_MspInit+0x150>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f040 808a 	bne.w	8002b52 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f005 ff48 	bl	80088e0 <HAL_RCCEx_PeriphCLKConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a56:	f7ff fd05 	bl	8002464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a5a:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_UART_MspInit+0x154>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	4a40      	ldr	r2, [pc, #256]	@ (8002b60 <HAL_UART_MspInit+0x154>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a66:	4b3e      	ldr	r3, [pc, #248]	@ (8002b60 <HAL_UART_MspInit+0x154>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <HAL_UART_MspInit+0x154>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	4a3a      	ldr	r2, [pc, #232]	@ (8002b60 <HAL_UART_MspInit+0x154>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_UART_MspInit+0x154>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa8:	f003 f8c2 	bl	8005c30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel2;
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002aae:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <HAL_UART_MspInit+0x15c>)
 8002ab0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ab4:	221a      	movs	r2, #26
 8002ab6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abe:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac4:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ac6:	2280      	movs	r2, #128	@ 0x80
 8002ac8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aca:	4b26      	ldr	r3, [pc, #152]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ad8:	2220      	movs	r2, #32
 8002ada:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002adc:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ae2:	4820      	ldr	r0, [pc, #128]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002ae4:	f002 fd64 	bl	80055b0 <HAL_DMA_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002aee:	f7ff fcb9 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002afa:	4a1a      	ldr	r2, [pc, #104]	@ (8002b64 <HAL_UART_MspInit+0x158>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Channel1;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b02:	4a1b      	ldr	r2, [pc, #108]	@ (8002b70 <HAL_UART_MspInit+0x164>)
 8002b04:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b06:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b08:	221b      	movs	r2, #27
 8002b0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b0e:	2210      	movs	r2, #16
 8002b10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b12:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b18:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b1a:	2280      	movs	r2, #128	@ 0x80
 8002b1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b36:	480d      	ldr	r0, [pc, #52]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b38:	f002 fd3a 	bl	80055b0 <HAL_DMA_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002b42:	f7ff fc8f 	bl	8002464 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b4a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b4c:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <HAL_UART_MspInit+0x160>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b52:	bf00      	nop
 8002b54:	3768      	adds	r7, #104	@ 0x68
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40004400 	.word	0x40004400
 8002b60:	40021000 	.word	0x40021000
 8002b64:	20000b10 	.word	0x20000b10
 8002b68:	4002041c 	.word	0x4002041c
 8002b6c:	20000b70 	.word	0x20000b70
 8002b70:	40020408 	.word	0x40020408

08002b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	@ 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002b84:	4b2c      	ldr	r3, [pc, #176]	@ (8002c38 <HAL_InitTick+0xc4>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <HAL_InitTick+0xc4>)
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b90:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <HAL_InitTick+0xc4>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b9c:	f107 020c 	add.w	r2, r7, #12
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 fe22 	bl	80087f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bac:	f005 fdf4 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	4a21      	ldr	r2, [pc, #132]	@ (8002c3c <HAL_InitTick+0xc8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9b      	lsrs	r3, r3, #18
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002bc2:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <HAL_InitTick+0xd0>)
 8002bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002bc8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bcc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002bce:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim3);
 8002be0:	4817      	ldr	r0, [pc, #92]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002be2:	f006 f86d 	bl	8008cc0 <HAL_TIM_Base_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002bec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11b      	bne.n	8002c2c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002bf4:	4812      	ldr	r0, [pc, #72]	@ (8002c40 <HAL_InitTick+0xcc>)
 8002bf6:	f006 f91d 	bl	8008e34 <HAL_TIM_Base_Start_IT>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d111      	bne.n	8002c2c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c08:	201d      	movs	r0, #29
 8002c0a:	f002 f8b3 	bl	8004d74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d808      	bhi.n	8002c26 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002c14:	2200      	movs	r2, #0
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	201d      	movs	r0, #29
 8002c1a:	f002 f891 	bl	8004d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_InitTick+0xd4>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e002      	b.n	8002c2c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3730      	adds	r7, #48	@ 0x30
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	431bde83 	.word	0x431bde83
 8002c40:	200015b0 	.word	0x200015b0
 8002c44:	40000400 	.word	0x40000400
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <NMI_Handler+0x4>

08002c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <MemManage_Handler+0x4>

08002c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <BusFault_Handler+0x4>

08002c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <UsageFault_Handler+0x4>

08002c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <DMA1_Channel1_IRQHandler+0x10>)
 8002c8a:	f002 fe74 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200009bc 	.word	0x200009bc

08002c98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <DMA1_Channel2_IRQHandler+0x10>)
 8002c9e:	f002 fe6a 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000a1c 	.word	0x20000a1c

08002cac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	@ (8002cbc <DMA1_Channel3_IRQHandler+0x10>)
 8002cb2:	f002 fe60 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200007c4 	.word	0x200007c4

08002cc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002cc4:	4802      	ldr	r0, [pc, #8]	@ (8002cd0 <DMA1_Channel4_IRQHandler+0x10>)
 8002cc6:	f002 fe56 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000878 	.word	0x20000878

08002cd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <DMA1_Channel5_IRQHandler+0x10>)
 8002cda:	f002 fe4c 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000750 	.word	0x20000750

08002ce8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cec:	4802      	ldr	r0, [pc, #8]	@ (8002cf8 <ADC1_2_IRQHandler+0x10>)
 8002cee:	f000 fe43 	bl	8003978 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200006e4 	.word	0x200006e4

08002cfc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <TIM1_CC_IRQHandler+0x10>)
 8002d02:	f006 fc89 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200008d8 	.word	0x200008d8

08002d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <TIM3_IRQHandler+0x10>)
 8002d16:	f006 fc7f 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200015b0 	.word	0x200015b0

08002d24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <I2C1_EV_IRQHandler+0x10>)
 8002d2a:	f003 facb 	bl	80062c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000824 	.word	0x20000824

08002d38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <I2C1_ER_IRQHandler+0x10>)
 8002d3e:	f003 fadb 	bl	80062f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000824 	.word	0x20000824

08002d4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <TIM6_DAC_IRQHandler+0x10>)
 8002d52:	f002 f960 	bl	8005016 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200007b0 	.word	0x200007b0

08002d60 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <DMA2_Channel1_IRQHandler+0x10>)
 8002d66:	f002 fe06 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000b70 	.word	0x20000b70

08002d74 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <DMA2_Channel2_IRQHandler+0x10>)
 8002d7a:	f002 fdfc 	bl	8005976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000b10 	.word	0x20000b10

08002d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return 1;
 8002d8c:	2301      	movs	r3, #1
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_kill>:

int _kill(int pid, int sig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002da2:	f00c ffb5 	bl	800fd10 <__errno>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2216      	movs	r2, #22
 8002daa:	601a      	str	r2, [r3, #0]
  return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_exit>:

void _exit (int status)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ffe7 	bl	8002d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <_exit+0x12>

08002dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e00a      	b.n	8002df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002de0:	f3af 8000 	nop.w
 8002de4:	4601      	mov	r1, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	60ba      	str	r2, [r7, #8]
 8002dec:	b2ca      	uxtb	r2, r1
 8002dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3301      	adds	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dbf0      	blt.n	8002de0 <_read+0x12>
  }

  return len;
 8002dfe:	687b      	ldr	r3, [r7, #4]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e009      	b.n	8002e2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	60ba      	str	r2, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dbf1      	blt.n	8002e1a <_write+0x12>
  }
  return len;
 8002e36:	687b      	ldr	r3, [r7, #4]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_close>:

int _close(int file)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e68:	605a      	str	r2, [r3, #4]
  return 0;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_isatty>:

int _isatty(int file)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e80:	2301      	movs	r3, #1
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb0:	4a14      	ldr	r2, [pc, #80]	@ (8002f04 <_sbrk+0x5c>)
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <_sbrk+0x60>)
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ebc:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <_sbrk+0x64>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <_sbrk+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d207      	bcs.n	8002ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed8:	f00c ff1a 	bl	800fd10 <__errno>
 8002edc:	4603      	mov	r3, r0
 8002ede:	220c      	movs	r2, #12
 8002ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e009      	b.n	8002efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eee:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <_sbrk+0x64>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a05      	ldr	r2, [pc, #20]	@ (8002f0c <_sbrk+0x64>)
 8002ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20008000 	.word	0x20008000
 8002f08:	00000400 	.word	0x00000400
 8002f0c:	200015fc 	.word	0x200015fc
 8002f10:	20003a40 	.word	0x20003a40

08002f14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <SystemInit+0x20>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1e:	4a05      	ldr	r2, [pc, #20]	@ (8002f34 <SystemInit+0x20>)
 8002f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f38:	480d      	ldr	r0, [pc, #52]	@ (8002f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f3c:	f7ff ffea 	bl	8002f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f40:	480c      	ldr	r0, [pc, #48]	@ (8002f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f42:	490d      	ldr	r1, [pc, #52]	@ (8002f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <LoopForever+0xe>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f58:	4c0a      	ldr	r4, [pc, #40]	@ (8002f84 <LoopForever+0x16>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002f66:	f00c fed9 	bl	800fd1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f6a:	f7fe fcb1 	bl	80018d0 <main>

08002f6e <LoopForever>:

LoopForever:
    b LoopForever
 8002f6e:	e7fe      	b.n	8002f6e <LoopForever>
  ldr   r0, =_estack
 8002f70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f78:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 8002f7c:	0801572c 	.word	0x0801572c
  ldr r2, =_sbss
 8002f80:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 8002f84:	20003a3c 	.word	0x20003a3c

08002f88 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f88:	e7fe      	b.n	8002f88 <COMP1_2_3_IRQHandler>

08002f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f001 fec8 	bl	8004d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f9a:	200f      	movs	r0, #15
 8002f9c:	f7ff fdea 	bl	8002b74 <HAL_InitTick>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	71fb      	strb	r3, [r7, #7]
 8002faa:	e001      	b.n	8002fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fac:	f7ff fa60 	bl	8002470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fb0:	79fb      	ldrb	r3, [r7, #7]

}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_IncTick+0x1c>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_IncTick+0x20>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a03      	ldr	r2, [pc, #12]	@ (8002fd8 <HAL_IncTick+0x1c>)
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	20001600 	.word	0x20001600
 8002fdc:	20000010 	.word	0x20000010

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20001600 	.word	0x20001600

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d004      	beq.n	800301c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_Delay+0x40>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800301c:	bf00      	nop
 800301e:	f7ff ffdf 	bl	8002fe0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d8f7      	bhi.n	800301e <HAL_Delay+0x26>
  {
  }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000010 	.word	0x20000010

0800303c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3360      	adds	r3, #96	@ 0x60
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <LL_ADC_SetOffset+0x44>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	03fff000 	.word	0x03fff000

080030ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3360      	adds	r3, #96	@ 0x60
 80030fa:	461a      	mov	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3360      	adds	r3, #96	@ 0x60
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3360      	adds	r3, #96	@ 0x60
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	431a      	orrs	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3360      	adds	r3, #96	@ 0x60
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	615a      	str	r2, [r3, #20]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003206:	b480      	push	{r7}
 8003208:	b087      	sub	sp, #28
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3330      	adds	r3, #48	@ 0x30
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	4413      	add	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	211f      	movs	r1, #31
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	401a      	ands	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	f003 011f 	and.w	r1, r3, #31
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	431a      	orrs	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3314      	adds	r3, #20
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	0e5b      	lsrs	r3, r3, #25
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	0d1b      	lsrs	r3, r3, #20
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2107      	movs	r1, #7
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0d1b      	lsrs	r3, r3, #20
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0318 	and.w	r3, r3, #24
 80032fe:	4908      	ldr	r1, [pc, #32]	@ (8003320 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003300:	40d9      	lsrs	r1, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	400b      	ands	r3, r1
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	0007ffff 	.word	0x0007ffff

08003324 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 031f 	and.w	r3, r3, #31
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800336c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6093      	str	r3, [r2, #8]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003394:	d101      	bne.n	800339a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033e4:	d101      	bne.n	80033ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003434:	f043 0202 	orr.w	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <LL_ADC_IsEnabled+0x18>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <LL_ADC_IsEnabled+0x1a>
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d101      	bne.n	8003486 <LL_ADC_IsDisableOngoing+0x18>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <LL_ADC_IsDisableOngoing+0x1a>
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d101      	bne.n	80034d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d101      	bne.n	80034fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e167      	b.n	80037f2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe ffc7 	bl	80024c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff19 	bl	8003380 <LL_ADC_IsDeepPowerDownEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff feff 	bl	800335c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff34 	bl	80033d0 <LL_ADC_IsInternalRegulatorEnabled>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff18 	bl	80033a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003578:	4ba0      	ldr	r3, [pc, #640]	@ (80037fc <HAL_ADC_Init+0x2f4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	4aa0      	ldr	r2, [pc, #640]	@ (8003800 <HAL_ADC_Init+0x2f8>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800358c:	e002      	b.n	8003594 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3b01      	subs	r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f9      	bne.n	800358e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff16 	bl	80033d0 <LL_ADC_IsInternalRegulatorEnabled>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f043 0210 	orr.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff76 	bl	80034bc <LL_ADC_REG_IsConversionOngoing>
 80035d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 8100 	bne.w	80037e0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80fc 	bne.w	80037e0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035f0:	f043 0202 	orr.w	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff23 	bl	8003448 <LL_ADC_IsEnabled>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003608:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800360c:	f7ff ff1c 	bl	8003448 <LL_ADC_IsEnabled>
 8003610:	4604      	mov	r4, r0
 8003612:	487c      	ldr	r0, [pc, #496]	@ (8003804 <HAL_ADC_Init+0x2fc>)
 8003614:	f7ff ff18 	bl	8003448 <LL_ADC_IsEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	4323      	orrs	r3, r4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4619      	mov	r1, r3
 8003626:	4878      	ldr	r0, [pc, #480]	@ (8003808 <HAL_ADC_Init+0x300>)
 8003628:	f7ff fd08 	bl	800303c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7f5b      	ldrb	r3, [r3, #29]
 8003630:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003636:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800363c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003642:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800364a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003656:	2b01      	cmp	r3, #1
 8003658:	d106      	bne.n	8003668 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	045b      	lsls	r3, r3, #17
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b60      	ldr	r3, [pc, #384]	@ (800380c <HAL_ADC_Init+0x304>)
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	430b      	orrs	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff15 	bl	80034e2 <LL_ADC_INJ_IsConversionOngoing>
 80036b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d16d      	bne.n	800379c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d16a      	bne.n	800379c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e2:	f023 0302 	bic.w	r3, r3, #2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d017      	beq.n	8003728 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003706:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003710:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003714:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6911      	ldr	r1, [r2, #16]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003726:	e013      	b.n	8003750 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003736:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003748:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800374c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003756:	2b01      	cmp	r3, #1
 8003758:	d118      	bne.n	800378c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800377c:	430a      	orrs	r2, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e007      	b.n	800379c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f023 010f 	bic.w	r1, r3, #15
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80037bc:	e007      	b.n	80037ce <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 020f 	bic.w	r2, r2, #15
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037de:	e007      	b.n	80037f0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	f043 0210 	orr.w	r2, r3, #16
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3724      	adds	r7, #36	@ 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000008 	.word	0x20000008
 8003800:	053e2d63 	.word	0x053e2d63
 8003804:	50000100 	.word	0x50000100
 8003808:	50000300 	.word	0x50000300
 800380c:	fff04007 	.word	0xfff04007

08003810 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800381c:	4851      	ldr	r0, [pc, #324]	@ (8003964 <HAL_ADC_Start_DMA+0x154>)
 800381e:	f7ff fd81 	bl	8003324 <LL_ADC_GetMultimode>
 8003822:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fe47 	bl	80034bc <LL_ADC_REG_IsConversionOngoing>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	f040 808f 	bne.w	8003954 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_ADC_Start_DMA+0x34>
 8003840:	2302      	movs	r3, #2
 8003842:	e08a      	b.n	800395a <HAL_ADC_Start_DMA+0x14a>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d002      	beq.n	800385e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b09      	cmp	r3, #9
 800385c:	d173      	bne.n	8003946 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 feb2 	bl	80045c8 <ADC_Enable>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d166      	bne.n	800393c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <HAL_ADC_Start_DMA+0x158>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d002      	beq.n	8003892 <HAL_ADC_Start_DMA+0x82>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	e001      	b.n	8003896 <HAL_ADC_Start_DMA+0x86>
 8003892:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4293      	cmp	r3, r2
 800389c:	d002      	beq.n	80038a4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	f023 0206 	bic.w	r2, r3, #6
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80038c8:	e002      	b.n	80038d0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	4a25      	ldr	r2, [pc, #148]	@ (800396c <HAL_ADC_Start_DMA+0x15c>)
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	4a24      	ldr	r2, [pc, #144]	@ (8003970 <HAL_ADC_Start_DMA+0x160>)
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e4:	4a23      	ldr	r2, [pc, #140]	@ (8003974 <HAL_ADC_Start_DMA+0x164>)
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	221c      	movs	r2, #28
 80038ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0210 	orr.w	r2, r2, #16
 8003906:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3340      	adds	r3, #64	@ 0x40
 8003922:	4619      	mov	r1, r3
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f001 feea 	bl	8005700 <HAL_DMA_Start_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fdad 	bl	8003494 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800393a:	e00d      	b.n	8003958 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003944:	e008      	b.n	8003958 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003952:	e001      	b.n	8003958 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003954:	2302      	movs	r3, #2
 8003956:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	50000300 	.word	0x50000300
 8003968:	50000100 	.word	0x50000100
 800396c:	08004793 	.word	0x08004793
 8003970:	0800486b 	.word	0x0800486b
 8003974:	08004887 	.word	0x08004887

08003978 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003994:	4883      	ldr	r0, [pc, #524]	@ (8003ba4 <HAL_ADC_IRQHandler+0x22c>)
 8003996:	f7ff fcc5 	bl	8003324 <LL_ADC_GetMultimode>
 800399a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d017      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x5e>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d012      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 f853 	bl	8004a74 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_ADC_IRQHandler+0x72>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8085 	beq.w	8003b00 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d07f      	beq.n	8003b00 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fbdf 	bl	80031e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d064      	beq.n	8003af2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba8 <HAL_ADC_IRQHandler+0x230>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d002      	beq.n	8003a38 <HAL_ADC_IRQHandler+0xc0>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	e001      	b.n	8003a3c <HAL_ADC_IRQHandler+0xc4>
 8003a38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d008      	beq.n	8003a56 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d002      	beq.n	8003a56 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	d104      	bne.n	8003a60 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	e00d      	b.n	8003a7c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a50      	ldr	r2, [pc, #320]	@ (8003ba8 <HAL_ADC_IRQHandler+0x230>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d002      	beq.n	8003a70 <HAL_ADC_IRQHandler+0xf8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	e001      	b.n	8003a74 <HAL_ADC_IRQHandler+0xfc>
 8003a70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a74:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d135      	bne.n	8003af2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d12e      	bne.n	8003af2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fd0f 	bl	80034bc <LL_ADC_REG_IsConversionOngoing>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11a      	bne.n	8003ada <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020c 	bic.w	r2, r2, #12
 8003ab2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d112      	bne.n	8003af2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ad8:	e00b      	b.n	8003af2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	f043 0210 	orr.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe fb66 	bl	80021c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	220c      	movs	r2, #12
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x19c>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 809e 	beq.w	8003c5c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8098 	beq.w	8003c5c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fb88 	bl	800325e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003b4e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fb43 	bl	80031e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b5a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a11      	ldr	r2, [pc, #68]	@ (8003ba8 <HAL_ADC_IRQHandler+0x230>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d002      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x1f4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	e001      	b.n	8003b70 <HAL_ADC_IRQHandler+0x1f8>
 8003b6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d008      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d002      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b07      	cmp	r3, #7
 8003b88:	d104      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	e011      	b.n	8003bb8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a03      	ldr	r2, [pc, #12]	@ (8003ba8 <HAL_ADC_IRQHandler+0x230>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d006      	beq.n	8003bac <HAL_ADC_IRQHandler+0x234>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	e005      	b.n	8003bb0 <HAL_ADC_IRQHandler+0x238>
 8003ba4:	50000300 	.word	0x50000300
 8003ba8:	50000100 	.word	0x50000100
 8003bac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003bb0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d047      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x260>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d03f      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13a      	bne.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d133      	bne.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d12e      	bne.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fc74 	bl	80034e2 <LL_ADC_INJ_IsConversionOngoing>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11a      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c0e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d112      	bne.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c34:	e00b      	b.n	8003c4e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	f043 0210 	orr.w	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fee8 	bl	8004a24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2260      	movs	r2, #96	@ 0x60
 8003c5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <HAL_ADC_IRQHandler+0x312>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f89f 	bl	8003dc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2280      	movs	r2, #128	@ 0x80
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <HAL_ADC_IRQHandler+0x342>
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fece 	bl	8004a4c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <HAL_ADC_IRQHandler+0x372>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fec0 	bl	8004a60 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d036      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x3ea>
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d031      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003d06:	2301      	movs	r3, #1
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0a:	e014      	b.n	8003d36 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d12:	4825      	ldr	r0, [pc, #148]	@ (8003da8 <HAL_ADC_IRQHandler+0x430>)
 8003d14:	f7ff fb14 	bl	8003340 <LL_ADC_GetMultiDMATransfer>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d22:	e008      	b.n	8003d36 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003d32:	2301      	movs	r3, #1
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10e      	bne.n	8003d5a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4c:	f043 0202 	orr.w	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f83d 	bl	8003dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x426>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d013      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d86:	f043 0208 	orr.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d96:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fe4d 	bl	8004a38 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d9e:	bf00      	nop
 8003da0:	3728      	adds	r7, #40	@ 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	50000300 	.word	0x50000300

08003dac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b0b6      	sub	sp, #216	@ 0xd8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x22>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e3c8      	b.n	800459c <HAL_ADC_ConfigChannel+0x7b4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fb50 	bl	80034bc <LL_ADC_REG_IsConversionOngoing>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f040 83ad 	bne.w	800457e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f7ff f9e8 	bl	8003206 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fb3e 	bl	80034bc <LL_ADC_REG_IsConversionOngoing>
 8003e40:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fb4a 	bl	80034e2 <LL_ADC_INJ_IsConversionOngoing>
 8003e4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 81d9 	bne.w	800420e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 81d4 	bne.w	800420e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e6e:	d10f      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7ff fa02 	bl	8003284 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff f996 	bl	80031ba <LL_ADC_SetSamplingTimeCommonConfig>
 8003e8e:	e00e      	b.n	8003eae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f7ff f9f1 	bl	8003284 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f986 	bl	80031ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d022      	beq.n	8003f16 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6919      	ldr	r1, [r3, #16]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ee0:	f7ff f8e0 	bl	80030a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6919      	ldr	r1, [r3, #16]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f7ff f92c 	bl	800314e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x124>
 8003f06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f0a:	e000      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x126>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7ff f938 	bl	8003184 <LL_ADC_SetOffsetSaturation>
 8003f14:	e17b      	b.n	800420e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f8e5 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x15a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f8da 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	e01e      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x198>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff f8cf 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003f70:	2320      	movs	r3, #32
 8003f72:	e004      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x1b0>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	e018      	b.n	8003fca <HAL_ADC_ConfigChannel+0x1e2>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e004      	b.n	8003fca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003fc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d106      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff f89e 	bl	8003118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f882 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x220>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff f877 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	f003 021f 	and.w	r2, r3, #31
 8004006:	e01e      	b.n	8004046 <HAL_ADC_ConfigChannel+0x25e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff f86c 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800402a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800402e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004036:	2320      	movs	r3, #32
 8004038:	e004      	b.n	8004044 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800403a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_ADC_ConfigChannel+0x276>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	0e9b      	lsrs	r3, r3, #26
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	e018      	b.n	8004090 <HAL_ADC_ConfigChannel+0x2a8>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004072:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800407a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004082:	2320      	movs	r3, #32
 8004084:	e004      	b.n	8004090 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004086:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004090:	429a      	cmp	r2, r3
 8004092:	d106      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff f83b 	bl	8003118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f81f 	bl	80030ec <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x2e6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f814 	bl	80030ec <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	e01e      	b.n	800410c <HAL_ADC_ConfigChannel+0x324>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f809 	bl	80030ec <LL_ADC_GetOffsetChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80040ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80040f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80040fc:	2320      	movs	r3, #32
 80040fe:	e004      	b.n	800410a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004100:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x33c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	e016      	b.n	8004152 <HAL_ADC_ConfigChannel+0x36a>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004136:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800413c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e004      	b.n	8004152 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004152:	429a      	cmp	r2, r3
 8004154:	d106      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	2102      	movs	r1, #2
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe ffda 	bl	8003118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2103      	movs	r1, #3
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe ffbe 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x3a8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2103      	movs	r1, #3
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ffb3 	bl	80030ec <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	f003 021f 	and.w	r2, r3, #31
 800418e:	e017      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x3d8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2103      	movs	r1, #3
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe ffa8 	bl	80030ec <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80041a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041aa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80041ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e003      	b.n	80041be <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80041b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x3f0>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0e9b      	lsrs	r3, r3, #26
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	e011      	b.n	80041fc <HAL_ADC_ConfigChannel+0x414>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80041e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80041ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80041f0:	2320      	movs	r3, #32
 80041f2:	e003      	b.n	80041fc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80041f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d106      	bne.n	800420e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	2103      	movs	r1, #3
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe ff85 	bl	8003118 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff f918 	bl	8003448 <LL_ADC_IsEnabled>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 8140 	bne.w	80044a0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6819      	ldr	r1, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	461a      	mov	r2, r3
 800422e:	f7ff f855 	bl	80032dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4a8f      	ldr	r2, [pc, #572]	@ (8004474 <HAL_ADC_ConfigChannel+0x68c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	f040 8131 	bne.w	80044a0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x47e>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	0e9b      	lsrs	r3, r3, #26
 8004254:	3301      	adds	r3, #1
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2b09      	cmp	r3, #9
 800425c:	bf94      	ite	ls
 800425e:	2301      	movls	r3, #1
 8004260:	2300      	movhi	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e019      	b.n	800429a <HAL_ADC_ConfigChannel+0x4b2>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004276:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800427e:	2320      	movs	r3, #32
 8004280:	e003      	b.n	800428a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	2b09      	cmp	r3, #9
 8004292:	bf94      	ite	ls
 8004294:	2301      	movls	r3, #1
 8004296:	2300      	movhi	r3, #0
 8004298:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800429a:	2b00      	cmp	r3, #0
 800429c:	d079      	beq.n	8004392 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x4d2>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0e9b      	lsrs	r3, r3, #26
 80042b0:	3301      	adds	r3, #1
 80042b2:	069b      	lsls	r3, r3, #26
 80042b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042b8:	e015      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x4fe>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80042d2:	2320      	movs	r3, #32
 80042d4:	e003      	b.n	80042de <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80042d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	069b      	lsls	r3, r3, #26
 80042e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x51e>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	0e9b      	lsrs	r3, r3, #26
 80042f8:	3301      	adds	r3, #1
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	e017      	b.n	8004336 <HAL_ADC_ConfigChannel+0x54e>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800431e:	2320      	movs	r3, #32
 8004320:	e003      	b.n	800432a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	3301      	adds	r3, #1
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	ea42 0103 	orr.w	r1, r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_ADC_ConfigChannel+0x574>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	3301      	adds	r3, #1
 800434e:	f003 021f 	and.w	r2, r3, #31
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	051b      	lsls	r3, r3, #20
 800435a:	e018      	b.n	800438e <HAL_ADC_ConfigChannel+0x5a6>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800436e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004374:	2320      	movs	r3, #32
 8004376:	e003      	b.n	8004380 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f003 021f 	and.w	r2, r3, #31
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438e:	430b      	orrs	r3, r1
 8004390:	e081      	b.n	8004496 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x5c6>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	0e9b      	lsrs	r3, r3, #26
 80043a4:	3301      	adds	r3, #1
 80043a6:	069b      	lsls	r3, r3, #26
 80043a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ac:	e015      	b.n	80043da <HAL_ADC_ConfigChannel+0x5f2>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80043c6:	2320      	movs	r3, #32
 80043c8:	e003      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x612>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	0e9b      	lsrs	r3, r3, #26
 80043ec:	3301      	adds	r3, #1
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	e017      	b.n	800442a <HAL_ADC_ConfigChannel+0x642>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	61fb      	str	r3, [r7, #28]
  return result;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004412:	2320      	movs	r3, #32
 8004414:	e003      	b.n	800441e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	ea42 0103 	orr.w	r1, r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x66e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	3301      	adds	r3, #1
 8004442:	f003 021f 	and.w	r2, r3, #31
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	3b1e      	subs	r3, #30
 800444e:	051b      	lsls	r3, r3, #20
 8004450:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004454:	e01e      	b.n	8004494 <HAL_ADC_ConfigChannel+0x6ac>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	613b      	str	r3, [r7, #16]
  return result;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800446e:	2320      	movs	r3, #32
 8004470:	e006      	b.n	8004480 <HAL_ADC_ConfigChannel+0x698>
 8004472:	bf00      	nop
 8004474:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	f003 021f 	and.w	r2, r3, #31
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	3b1e      	subs	r3, #30
 800448e:	051b      	lsls	r3, r3, #20
 8004490:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004494:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800449a:	4619      	mov	r1, r3
 800449c:	f7fe fef2 	bl	8003284 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b3f      	ldr	r3, [pc, #252]	@ (80045a4 <HAL_ADC_ConfigChannel+0x7bc>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d071      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ac:	483e      	ldr	r0, [pc, #248]	@ (80045a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80044ae:	f7fe fdeb 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 80044b2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3c      	ldr	r2, [pc, #240]	@ (80045ac <HAL_ADC_ConfigChannel+0x7c4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_ADC_ConfigChannel+0x6e2>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3a      	ldr	r2, [pc, #232]	@ (80045b0 <HAL_ADC_ConfigChannel+0x7c8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d127      	bne.n	800451a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d121      	bne.n	800451a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044de:	d157      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044e8:	4619      	mov	r1, r3
 80044ea:	482f      	ldr	r0, [pc, #188]	@ (80045a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80044ec:	f7fe fdb9 	bl	8003062 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044f0:	4b30      	ldr	r3, [pc, #192]	@ (80045b4 <HAL_ADC_ConfigChannel+0x7cc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	4a30      	ldr	r2, [pc, #192]	@ (80045b8 <HAL_ADC_ConfigChannel+0x7d0>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	099b      	lsrs	r3, r3, #6
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800450a:	e002      	b.n	8004512 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b01      	subs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f9      	bne.n	800450c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004518:	e03a      	b.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a27      	ldr	r2, [pc, #156]	@ (80045bc <HAL_ADC_ConfigChannel+0x7d4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d113      	bne.n	800454c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02a      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004542:	4619      	mov	r1, r3
 8004544:	4818      	ldr	r0, [pc, #96]	@ (80045a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004546:	f7fe fd8c 	bl	8003062 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800454a:	e021      	b.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d11c      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800455a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d116      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d011      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800456c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004574:	4619      	mov	r1, r3
 8004576:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004578:	f7fe fd73 	bl	8003062 <LL_ADC_SetCommonPathInternalCh>
 800457c:	e008      	b.n	8004590 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004598:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800459c:	4618      	mov	r0, r3
 800459e:	37d8      	adds	r7, #216	@ 0xd8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	80080000 	.word	0x80080000
 80045a8:	50000300 	.word	0x50000300
 80045ac:	c3210000 	.word	0xc3210000
 80045b0:	90c00010 	.word	0x90c00010
 80045b4:	20000008 	.word	0x20000008
 80045b8:	053e2d63 	.word	0x053e2d63
 80045bc:	c7520000 	.word	0xc7520000
 80045c0:	50000100 	.word	0x50000100
 80045c4:	cb840000 	.word	0xcb840000

080045c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe ff35 	bl	8003448 <LL_ADC_IsEnabled>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d169      	bne.n	80046b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <ADC_Enable+0xfc>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f6:	f043 0210 	orr.w	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004602:	f043 0201 	orr.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e055      	b.n	80046ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fef0 	bl	80033f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004618:	482b      	ldr	r0, [pc, #172]	@ (80046c8 <ADC_Enable+0x100>)
 800461a:	f7fe fd35 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 800461e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004620:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004628:	4b28      	ldr	r3, [pc, #160]	@ (80046cc <ADC_Enable+0x104>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	4a28      	ldr	r2, [pc, #160]	@ (80046d0 <ADC_Enable+0x108>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004642:	e002      	b.n	800464a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f9      	bne.n	8004644 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004650:	f7fe fcc6 	bl	8002fe0 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004656:	e028      	b.n	80046aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fef3 	bl	8003448 <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fec3 	bl	80033f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004672:	f7fe fcb5 	bl	8002fe0 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d914      	bls.n	80046aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d00d      	beq.n	80046aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	f043 0210 	orr.w	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e007      	b.n	80046ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d1cf      	bne.n	8004658 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	8000003f 	.word	0x8000003f
 80046c8:	50000300 	.word	0x50000300
 80046cc:	20000008 	.word	0x20000008
 80046d0:	053e2d63 	.word	0x053e2d63

080046d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe fec4 	bl	800346e <LL_ADC_IsDisableOngoing>
 80046e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe feab 	bl	8003448 <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d047      	beq.n	8004788 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d144      	bne.n	8004788 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030d 	and.w	r3, r3, #13
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10c      	bne.n	8004726 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fe85 	bl	8003420 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2203      	movs	r2, #3
 800471c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800471e:	f7fe fc5f 	bl	8002fe0 <HAL_GetTick>
 8004722:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004724:	e029      	b.n	800477a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	f043 0210 	orr.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e023      	b.n	800478a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004742:	f7fe fc4d 	bl	8002fe0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d914      	bls.n	800477a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e007      	b.n	800478a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1dc      	bne.n	8004742 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d14b      	bne.n	8004844 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d021      	beq.n	800480a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fd08 	bl	80031e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d032      	beq.n	800483c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d12b      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11f      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	f043 0201 	orr.w	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004808:	e018      	b.n	800483c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7fd fcc1 	bl	80021c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004842:	e00e      	b.n	8004862 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fabf 	bl	8003dd4 <HAL_ADC_ErrorCallback>
}
 8004856:	e004      	b.n	8004862 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fa97 	bl	8003dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004898:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fa91 	bl	8003dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <LL_ADC_IsEnabled>:
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <LL_ADC_IsEnabled+0x18>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <LL_ADC_IsEnabled+0x1a>
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_StartCalibration>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80048f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	609a      	str	r2, [r3, #8]
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <LL_ADC_IsCalibrationOnGoing>:
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004926:	d101      	bne.n	800492c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <LL_ADC_REG_IsConversionOngoing>:
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d101      	bne.n	8004952 <LL_ADC_REG_IsConversionOngoing+0x18>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_ADCEx_Calibration_Start+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e04d      	b.n	8004a18 <HAL_ADCEx_Calibration_Start+0xb8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fea5 	bl	80046d4 <ADC_Disable>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d136      	bne.n	8004a02 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	f043 0202 	orr.w	r2, r3, #2
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff ff96 	bl	80048e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049b4:	e014      	b.n	80049e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_ADCEx_Calibration_Start+0xc0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d90d      	bls.n	80049e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	f023 0312 	bic.w	r3, r3, #18
 80049cc:	f043 0210 	orr.w	r2, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e01b      	b.n	8004a18 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff94 	bl	8004912 <LL_ADC_IsCalibrationOnGoing>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e2      	bne.n	80049b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a00:	e005      	b.n	8004a0e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a06:	f043 0210 	orr.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	0004de01 	.word	0x0004de01

08004a24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b0a1      	sub	sp, #132	@ 0x84
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e08b      	b.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004abe:	d102      	bne.n	8004ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ac0:	4b41      	ldr	r3, [pc, #260]	@ (8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	e001      	b.n	8004aca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e06a      	b.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ff25 	bl	800493a <LL_ADC_REG_IsConversionOngoing>
 8004af0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff ff1f 	bl	800493a <LL_ADC_REG_IsConversionOngoing>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d14c      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d149      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b08:	4b30      	ldr	r3, [pc, #192]	@ (8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004b0a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d028      	beq.n	8004b66 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b26:	035b      	lsls	r3, r3, #13
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b34:	f7ff fec1 	bl	80048ba <LL_ADC_IsEnabled>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4823      	ldr	r0, [pc, #140]	@ (8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b3c:	f7ff febd 	bl	80048ba <LL_ADC_IsEnabled>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4323      	orrs	r3, r4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d133      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b50:	f023 030f 	bic.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	6811      	ldr	r1, [r2, #0]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b62:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b64:	e024      	b.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b72:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b76:	f7ff fea0 	bl	80048ba <LL_ADC_IsEnabled>
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4812      	ldr	r0, [pc, #72]	@ (8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b7e:	f7ff fe9c 	bl	80048ba <LL_ADC_IsEnabled>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4323      	orrs	r3, r4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d112      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b92:	f023 030f 	bic.w	r3, r3, #15
 8004b96:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b9a:	e009      	b.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004bae:	e000      	b.n	8004bb2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3784      	adds	r7, #132	@ 0x84
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd90      	pop	{r4, r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	50000100 	.word	0x50000100
 8004bcc:	50000300 	.word	0x50000300

08004bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c02:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	60d3      	str	r3, [r2, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <__NVIC_GetPriorityGrouping+0x18>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0307 	and.w	r3, r3, #7
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	db0b      	blt.n	8004c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	f003 021f 	and.w	r2, r3, #31
 8004c4c:	4907      	ldr	r1, [pc, #28]	@ (8004c6c <__NVIC_EnableIRQ+0x38>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2001      	movs	r0, #1
 8004c56:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	6039      	str	r1, [r7, #0]
 8004c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db0a      	blt.n	8004c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	490c      	ldr	r1, [pc, #48]	@ (8004cbc <__NVIC_SetPriority+0x4c>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	440b      	add	r3, r1
 8004c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c98:	e00a      	b.n	8004cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4908      	ldr	r1, [pc, #32]	@ (8004cc0 <__NVIC_SetPriority+0x50>)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	0112      	lsls	r2, r2, #4
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	440b      	add	r3, r1
 8004cae:	761a      	strb	r2, [r3, #24]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000e100 	.word	0xe000e100
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	@ 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf28      	it	cs
 8004ce2:	2304      	movcs	r3, #4
 8004ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d902      	bls.n	8004cf4 <NVIC_EncodePriority+0x30>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	e000      	b.n	8004cf6 <NVIC_EncodePriority+0x32>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	401a      	ands	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	43d9      	mvns	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	4313      	orrs	r3, r2
         );
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	@ 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ff4c 	bl	8004bd0 <__NVIC_SetPriorityGrouping>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d4e:	f7ff ff63 	bl	8004c18 <__NVIC_GetPriorityGrouping>
 8004d52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f7ff ffb3 	bl	8004cc4 <NVIC_EncodePriority>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff ff82 	bl	8004c70 <__NVIC_SetPriority>
}
 8004d6c:	bf00      	nop
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff ff56 	bl	8004c34 <__NVIC_EnableIRQ>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e014      	b.n	8004dcc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	791b      	ldrb	r3, [r3, #4]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fc10 	bl	80025d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0b2      	b.n	8004f52 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	795b      	ldrb	r3, [r3, #5]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_DAC_Start_DMA+0x24>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0ac      	b.n	8004f52 <HAL_DAC_Start_DMA+0x17e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2202      	movs	r2, #2
 8004e02:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d129      	bne.n	8004e5e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4a53      	ldr	r2, [pc, #332]	@ (8004f5c <HAL_DAC_Start_DMA+0x188>)
 8004e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_DAC_Start_DMA+0x18c>)
 8004e18:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4a51      	ldr	r2, [pc, #324]	@ (8004f64 <HAL_DAC_Start_DMA+0x190>)
 8004e20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_DAC_Start_DMA+0x6c>
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d005      	beq.n	8004e4a <HAL_DAC_Start_DMA+0x76>
 8004e3e:	e009      	b.n	8004e54 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	61bb      	str	r3, [r7, #24]
        break;
 8004e48:	e033      	b.n	8004eb2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	61bb      	str	r3, [r7, #24]
        break;
 8004e52:	e02e      	b.n	8004eb2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3310      	adds	r3, #16
 8004e5a:	61bb      	str	r3, [r7, #24]
        break;
 8004e5c:	e029      	b.n	8004eb2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4a41      	ldr	r2, [pc, #260]	@ (8004f68 <HAL_DAC_Start_DMA+0x194>)
 8004e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	4a40      	ldr	r2, [pc, #256]	@ (8004f6c <HAL_DAC_Start_DMA+0x198>)
 8004e6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	4a3f      	ldr	r2, [pc, #252]	@ (8004f70 <HAL_DAC_Start_DMA+0x19c>)
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_DAC_Start_DMA+0xc0>
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d005      	beq.n	8004e9e <HAL_DAC_Start_DMA+0xca>
 8004e92:	e009      	b.n	8004ea8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3314      	adds	r3, #20
 8004e9a:	61bb      	str	r3, [r7, #24]
        break;
 8004e9c:	e009      	b.n	8004eb2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	61bb      	str	r3, [r7, #24]
        break;
 8004ea6:	e004      	b.n	8004eb2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	331c      	adds	r3, #28
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d111      	bne.n	8004edc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6898      	ldr	r0, [r3, #8]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	f000 fc15 	bl	8005700 <HAL_DMA_Start_IT>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e010      	b.n	8004efe <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004eea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68d8      	ldr	r0, [r3, #12]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	f000 fc03 	bl	8005700 <HAL_DMA_Start_IT>
 8004efa:	4603      	mov	r3, r0
 8004efc:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11c      	bne.n	8004f44 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2201      	movs	r2, #1
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f22:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <HAL_DAC_Start_DMA+0x1a0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <HAL_DAC_Start_DMA+0x1a4>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004f34:	e002      	b.n	8004f3c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f9      	bne.n	8004f36 <HAL_DAC_Start_DMA+0x162>
 8004f42:	e005      	b.n	8004f50 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f043 0204 	orr.w	r2, r3, #4
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08005489 	.word	0x08005489
 8004f60:	080054ab 	.word	0x080054ab
 8004f64:	080054c7 	.word	0x080054c7
 8004f68:	08005545 	.word	0x08005545
 8004f6c:	08005567 	.word	0x08005567
 8004f70:	08005583 	.word	0x08005583
 8004f74:	20000008 	.word	0x20000008
 8004f78:	053e2d63 	.word	0x053e2d63

08004f7c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e03e      	b.n	800500e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	400a      	ands	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2201      	movs	r2, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10d      	bne.n	8004fec <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fc0e 	bl	80057f6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e00c      	b.n	8005006 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fc00 	bl	80057f6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8005004:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01d      	beq.n	8005074 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f043 0201 	orr.w	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800505c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800506c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f845 	bl	80050fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01d      	beq.n	80050ba <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d018      	beq.n	80050ba <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2204      	movs	r2, #4
 800508c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80050a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa3b 	bl	8005530 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	@ 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_DAC_ConfigChannel+0x1c>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e1a1      	b.n	8005478 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	795b      	ldrb	r3, [r3, #5]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_DAC_ConfigChannel+0x32>
 8005142:	2302      	movs	r3, #2
 8005144:	e198      	b.n	8005478 <HAL_DAC_ConfigChannel+0x364>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2202      	movs	r2, #2
 8005150:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b04      	cmp	r3, #4
 8005158:	d17a      	bne.n	8005250 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800515a:	f7fd ff41 	bl	8002fe0 <HAL_GetTick>
 800515e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d13d      	bne.n	80051e2 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005166:	e018      	b.n	800519a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005168:	f7fd ff3a 	bl	8002fe0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d911      	bls.n	800519a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f043 0208 	orr.w	r2, r3, #8
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2203      	movs	r2, #3
 8005194:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e16e      	b.n	8005478 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1df      	bne.n	8005168 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80051b2:	e020      	b.n	80051f6 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051b4:	f7fd ff14 	bl	8002fe0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d90f      	bls.n	80051e2 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da0a      	bge.n	80051e2 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f043 0208 	orr.w	r2, r3, #8
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2203      	movs	r2, #3
 80051dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e14a      	b.n	8005478 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dbe3      	blt.n	80051b4 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	ea02 0103 	and.w	r1, r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	21ff      	movs	r1, #255	@ 0xff
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	ea02 0103 	and.w	r1, r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	409a      	lsls	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d11d      	bne.n	8005294 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	221f      	movs	r2, #31
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005270:	4013      	ands	r3, r2
 8005272:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005288:	4313      	orrs	r3, r2
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2207      	movs	r2, #7
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	4013      	ands	r3, r2
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	e00f      	b.n	80052de <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d102      	bne.n	80052cc <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80052c6:	2301      	movs	r3, #1
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	e008      	b.n	80052de <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80052d4:	2301      	movs	r3, #1
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	e001      	b.n	80052de <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80052da:	2300      	movs	r3, #0
 80052dc:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005300:	4013      	ands	r3, r2
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	791b      	ldrb	r3, [r3, #4]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d102      	bne.n	8005312 <HAL_DAC_ConfigChannel+0x1fe>
 800530c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005310:	e000      	b.n	8005314 <HAL_DAC_ConfigChannel+0x200>
 8005312:	2300      	movs	r3, #0
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532c:	4013      	ands	r3, r2
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	795b      	ldrb	r3, [r3, #5]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d102      	bne.n	800533e <HAL_DAC_ConfigChannel+0x22a>
 8005338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800533c:	e000      	b.n	8005340 <HAL_DAC_ConfigChannel+0x22c>
 800533e:	2300      	movs	r3, #0
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d114      	bne.n	8005380 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005356:	f003 fa13 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 800535a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4a48      	ldr	r2, [pc, #288]	@ (8005480 <HAL_DAC_ConfigChannel+0x36c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d904      	bls.n	800536e <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
 800536c:	e00f      	b.n	800538e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4a44      	ldr	r2, [pc, #272]	@ (8005484 <HAL_DAC_ConfigChannel+0x370>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d90a      	bls.n	800538c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
 800537e:	e006      	b.n	800538e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005386:	4313      	orrs	r3, r2
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
 800538a:	e000      	b.n	800538e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800538c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539c:	4313      	orrs	r3, r2
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6819      	ldr	r1, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43da      	mvns	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	400a      	ands	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e0:	4013      	ands	r3, r2
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f8:	4313      	orrs	r3, r2
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005402:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	22c0      	movs	r2, #192	@ 0xc0
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	400a      	ands	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	ea02 0103 	and.w	r1, r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	409a      	lsls	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005476:	7ffb      	ldrb	r3, [r7, #31]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	@ 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	09896800 	.word	0x09896800
 8005484:	04c4b400 	.word	0x04c4b400

08005488 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fe13 	bl	80050c2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	711a      	strb	r2, [r3, #4]
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff fe0c 	bl	80050d6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f043 0204 	orr.w	r2, r3, #4
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff fe02 	bl	80050ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	711a      	strb	r2, [r3, #4]
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ffce 	bl	80054f4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	711a      	strb	r2, [r3, #4]
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff ffc7 	bl	8005508 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f043 0204 	orr.w	r2, r3, #4
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff ffbd 	bl	800551c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2201      	movs	r2, #1
 80055a6:	711a      	strb	r2, [r3, #4]
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e08d      	b.n	80056de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b47      	ldr	r3, [pc, #284]	@ (80056e8 <HAL_DMA_Init+0x138>)
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d80f      	bhi.n	80055ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	4b45      	ldr	r3, [pc, #276]	@ (80056ec <HAL_DMA_Init+0x13c>)
 80055d6:	4413      	add	r3, r2
 80055d8:	4a45      	ldr	r2, [pc, #276]	@ (80056f0 <HAL_DMA_Init+0x140>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	009a      	lsls	r2, r3, #2
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a42      	ldr	r2, [pc, #264]	@ (80056f4 <HAL_DMA_Init+0x144>)
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80055ec:	e00e      	b.n	800560c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	4b40      	ldr	r3, [pc, #256]	@ (80056f8 <HAL_DMA_Init+0x148>)
 80055f6:	4413      	add	r3, r2
 80055f8:	4a3d      	ldr	r2, [pc, #244]	@ (80056f0 <HAL_DMA_Init+0x140>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	009a      	lsls	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a3c      	ldr	r2, [pc, #240]	@ (80056fc <HAL_DMA_Init+0x14c>)
 800560a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa84 	bl	8005b6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800566c:	d102      	bne.n	8005674 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005688:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d010      	beq.n	80056b4 <HAL_DMA_Init+0x104>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d80c      	bhi.n	80056b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 faa4 	bl	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e008      	b.n	80056c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40020407 	.word	0x40020407
 80056ec:	bffdfff8 	.word	0xbffdfff8
 80056f0:	cccccccd 	.word	0xcccccccd
 80056f4:	40020000 	.word	0x40020000
 80056f8:	bffdfbf8 	.word	0xbffdfbf8
 80056fc:	40020400 	.word	0x40020400

08005700 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_DMA_Start_IT+0x20>
 800571c:	2302      	movs	r3, #2
 800571e:	e066      	b.n	80057ee <HAL_DMA_Start_IT+0xee>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d155      	bne.n	80057e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f9c9 	bl	8005af0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 020e 	orr.w	r2, r2, #14
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e00f      	b.n	8005798 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 020a 	orr.w	r2, r2, #10
 8005796:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e005      	b.n	80057ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
 80057ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d005      	beq.n	800581a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e037      	b.n	800588a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 020e 	bic.w	r2, r2, #14
 8005828:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005838:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f003 021f 	and.w	r2, r3, #31
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2101      	movs	r1, #1
 8005858:	fa01 f202 	lsl.w	r2, r1, r2
 800585c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005866:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800587e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005888:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d00d      	beq.n	80058dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2204      	movs	r2, #4
 80058c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e047      	b.n	800596c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 020e 	bic.w	r2, r2, #14
 80058ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800590a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005910:	f003 021f 	and.w	r2, r3, #31
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	2101      	movs	r1, #1
 800591a:	fa01 f202 	lsl.w	r2, r1, r2
 800591e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005928:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00c      	beq.n	800594c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800594a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
    }
  }
  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2204      	movs	r2, #4
 8005998:	409a      	lsls	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d026      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x7a>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d021      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0204 	bic.w	r2, r2, #4
 80059c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ce:	f003 021f 	and.w	r2, r3, #31
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	2104      	movs	r1, #4
 80059d8:	fa01 f202 	lsl.w	r2, r1, r2
 80059dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d071      	beq.n	8005aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059ee:	e06c      	b.n	8005aca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	2202      	movs	r2, #2
 80059fa:	409a      	lsls	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02e      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d029      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020a 	bic.w	r2, r2, #10
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	2102      	movs	r1, #2
 8005a42:	fa01 f202 	lsl.w	r2, r1, r2
 8005a46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d038      	beq.n	8005aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a60:	e033      	b.n	8005aca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02a      	beq.n	8005acc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d025      	beq.n	8005acc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 020e 	bic.w	r2, r2, #14
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a94:	f003 021f 	and.w	r2, r3, #31
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
}
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ae2:	b2db      	uxtb	r3, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	f003 021f 	and.w	r2, r3, #31
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	2101      	movs	r1, #1
 8005b28:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d108      	bne.n	8005b50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b4e:	e007      	b.n	8005b60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d802      	bhi.n	8005b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b80:	4b15      	ldr	r3, [pc, #84]	@ (8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e001      	b.n	8005b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b88:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	3b08      	subs	r3, #8
 8005b96:	4a12      	ldr	r2, [pc, #72]	@ (8005be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba4:	089b      	lsrs	r3, r3, #2
 8005ba6:	009a      	lsls	r2, r3, #2
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40020407 	.word	0x40020407
 8005bd8:	40020800 	.word	0x40020800
 8005bdc:	40020820 	.word	0x40020820
 8005be0:	cccccccd 	.word	0xcccccccd
 8005be4:	40020880 	.word	0x40020880

08005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2201      	movs	r2, #1
 8005c16:	409a      	lsls	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	1000823f 	.word	0x1000823f
 8005c2c:	40020940 	.word	0x40020940

08005c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c3e:	e15a      	b.n	8005ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 814c 	beq.w	8005ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d005      	beq.n	8005c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d130      	bne.n	8005cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 0201 	and.w	r2, r3, #1
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d017      	beq.n	8005d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	2203      	movs	r2, #3
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d123      	bne.n	8005d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	08da      	lsrs	r2, r3, #3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3208      	adds	r2, #8
 8005d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	220f      	movs	r2, #15
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	08da      	lsrs	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3208      	adds	r2, #8
 8005d5c:	6939      	ldr	r1, [r7, #16]
 8005d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4013      	ands	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0203 	and.w	r2, r3, #3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80a6 	beq.w	8005ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f14 <HAL_GPIO_Init+0x2e4>)
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	4a5a      	ldr	r2, [pc, #360]	@ (8005f14 <HAL_GPIO_Init+0x2e4>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	6613      	str	r3, [r2, #96]	@ 0x60
 8005db0:	4b58      	ldr	r3, [pc, #352]	@ (8005f14 <HAL_GPIO_Init+0x2e4>)
 8005db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dbc:	4a56      	ldr	r2, [pc, #344]	@ (8005f18 <HAL_GPIO_Init+0x2e8>)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	220f      	movs	r2, #15
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005de6:	d01f      	beq.n	8005e28 <HAL_GPIO_Init+0x1f8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a4c      	ldr	r2, [pc, #304]	@ (8005f1c <HAL_GPIO_Init+0x2ec>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d019      	beq.n	8005e24 <HAL_GPIO_Init+0x1f4>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a4b      	ldr	r2, [pc, #300]	@ (8005f20 <HAL_GPIO_Init+0x2f0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_GPIO_Init+0x1f0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8005f24 <HAL_GPIO_Init+0x2f4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00d      	beq.n	8005e1c <HAL_GPIO_Init+0x1ec>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a49      	ldr	r2, [pc, #292]	@ (8005f28 <HAL_GPIO_Init+0x2f8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <HAL_GPIO_Init+0x1e8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a48      	ldr	r2, [pc, #288]	@ (8005f2c <HAL_GPIO_Init+0x2fc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d101      	bne.n	8005e14 <HAL_GPIO_Init+0x1e4>
 8005e10:	2305      	movs	r3, #5
 8005e12:	e00a      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e14:	2306      	movs	r3, #6
 8005e16:	e008      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e006      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e004      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e002      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_GPIO_Init+0x1fa>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	f002 0203 	and.w	r2, r2, #3
 8005e30:	0092      	lsls	r2, r2, #2
 8005e32:	4093      	lsls	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e3a:	4937      	ldr	r1, [pc, #220]	@ (8005f18 <HAL_GPIO_Init+0x2e8>)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	3302      	adds	r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e48:	4b39      	ldr	r3, [pc, #228]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e6c:	4a30      	ldr	r2, [pc, #192]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e72:	4b2f      	ldr	r3, [pc, #188]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e96:	4a26      	ldr	r2, [pc, #152]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005e9c:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eea:	4a11      	ldr	r2, [pc, #68]	@ (8005f30 <HAL_GPIO_Init+0x300>)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f ae9d 	bne.w	8005c40 <HAL_GPIO_Init+0x10>
  }
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	48000400 	.word	0x48000400
 8005f20:	48000800 	.word	0x48000800
 8005f24:	48000c00 	.word	0x48000c00
 8005f28:	48001000 	.word	0x48001000
 8005f2c:	48001400 	.word	0x48001400
 8005f30:	40010400 	.word	0x40010400

08005f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	807b      	strh	r3, [r7, #2]
 8005f40:	4613      	mov	r3, r2
 8005f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f44:	787b      	ldrb	r3, [r7, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f4a:	887a      	ldrh	r2, [r7, #2]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f50:	e002      	b.n	8005f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e08d      	b.n	8006092 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fc fb9a 	bl	80026c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	e006      	b.n	8005fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d108      	bne.n	8006006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	e007      	b.n	8006016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	@ 0x28
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	461a      	mov	r2, r3
 80060a8:	460b      	mov	r3, r1
 80060aa:	817b      	strh	r3, [r7, #10]
 80060ac:	4613      	mov	r3, r2
 80060ae:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b20      	cmp	r3, #32
 80060be:	f040 80ef 	bne.w	80062a0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0e5      	b.n	80062a2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_I2C_Master_Transmit_DMA+0x48>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e0de      	b.n	80062a2 <HAL_I2C_Master_Transmit_DMA+0x206>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2221      	movs	r2, #33	@ 0x21
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2210      	movs	r2, #16
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	893a      	ldrh	r2, [r7, #8]
 800610c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a66      	ldr	r2, [pc, #408]	@ (80062ac <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a66      	ldr	r2, [pc, #408]	@ (80062b0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006118:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	2bff      	cmp	r3, #255	@ 0xff
 8006122:	d906      	bls.n	8006132 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	22ff      	movs	r2, #255	@ 0xff
 8006128:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800612a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	e007      	b.n	8006142 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800613c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006140:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01a      	beq.n	8006180 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006164:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d074      	beq.n	8006272 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d022      	beq.n	80061d6 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	4a47      	ldr	r2, [pc, #284]	@ (80062b4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	4a46      	ldr	r2, [pc, #280]	@ (80062b8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800619e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	2200      	movs	r2, #0
 80061ae:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80061c0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80061c6:	f7ff fa9b 	bl	8005700 <HAL_DMA_Start_IT>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d13a      	bne.n	800624a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80061d4:	e013      	b.n	80061fe <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e051      	b.n	80062a2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006202:	b2db      	uxtb	r3, r3
 8006204:	3301      	adds	r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	8979      	ldrh	r1, [r7, #10]
 800620a:	4b2c      	ldr	r3, [pc, #176]	@ (80062bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 fba5 	bl	8007960 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006230:	2110      	movs	r1, #16
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f001 fbc6 	bl	80079c4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e028      	b.n	800629c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f043 0210 	orr.w	r2, r3, #16
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e017      	b.n	80062a2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a12      	ldr	r2, [pc, #72]	@ (80062c0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006276:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	8979      	ldrh	r1, [r7, #10]
 800627e:	4b0f      	ldr	r3, [pc, #60]	@ (80062bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f001 fb6a 	bl	8007960 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006294:	2101      	movs	r1, #1
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f001 fb94 	bl	80079c4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e000      	b.n	80062a2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	ffff0000 	.word	0xffff0000
 80062b0:	080068df 	.word	0x080068df
 80062b4:	0800785f 	.word	0x0800785f
 80062b8:	080078f5 	.word	0x080078f5
 80062bc:	80002000 	.word	0x80002000
 80062c0:	0800649f 	.word	0x0800649f

080062c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
  }
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006328:	f043 0201 	orr.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006338:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	f043 0208 	orr.w	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006362:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00f      	beq.n	800638e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637c:	f043 0202 	orr.w	r2, r3, #2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800638c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 030b 	and.w	r3, r3, #11
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f921 	bl	80075e8 <I2C_ITError>
  }
}
 80063a6:	bf00      	nop
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
 80063f6:	4613      	mov	r3, r2
 80063f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006478:	b2db      	uxtb	r3, r3
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b088      	sub	sp, #32
 80064a2:	af02      	add	r7, sp, #8
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <I2C_Master_ISR_IT+0x1e>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e113      	b.n	80066e4 <I2C_Master_ISR_IT+0x246>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d012      	beq.n	80064f4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2210      	movs	r2, #16
 80064de:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e4:	f043 0204 	orr.w	r2, r3, #4
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f001 f992 	bl	8007816 <I2C_Flush_TXDR>
 80064f2:	e0e4      	b.n	80066be <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d022      	beq.n	8006544 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01d      	beq.n	8006544 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0304 	bic.w	r3, r3, #4
 800650e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006542:	e0bc      	b.n	80066be <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d128      	bne.n	80065a0 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006554:	2b00      	cmp	r3, #0
 8006556:	d023      	beq.n	80065a0 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01e      	beq.n	80065a0 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a8 	beq.w	80066be <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800659e:	e08e      	b.n	80066be <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d05c      	beq.n	8006664 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d057      	beq.n	8006664 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d040      	beq.n	8006640 <I2C_Master_ISR_IT+0x1a2>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d13c      	bne.n	8006640 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2bff      	cmp	r3, #255	@ 0xff
 80065dc:	d90e      	bls.n	80065fc <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	22ff      	movs	r2, #255	@ 0xff
 80065e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8a79      	ldrh	r1, [r7, #18]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 f9b3 	bl	8007960 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065fa:	e032      	b.n	8006662 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800660e:	d00b      	beq.n	8006628 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006614:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800661a:	8a79      	ldrh	r1, [r7, #18]
 800661c:	2000      	movs	r0, #0
 800661e:	9000      	str	r0, [sp, #0]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f001 f99d 	bl	8007960 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006626:	e01c      	b.n	8006662 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800662c:	b2da      	uxtb	r2, r3
 800662e:	8a79      	ldrh	r1, [r7, #18]
 8006630:	2300      	movs	r3, #0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f001 f991 	bl	8007960 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800663e:	e010      	b.n	8006662 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800664e:	d003      	beq.n	8006658 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fcb0 	bl	8006fb6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006656:	e032      	b.n	80066be <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006658:	2140      	movs	r1, #64	@ 0x40
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 ffc4 	bl	80075e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006660:	e02d      	b.n	80066be <I2C_Master_ISR_IT+0x220>
 8006662:	e02c      	b.n	80066be <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d027      	beq.n	80066be <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006674:	2b00      	cmp	r3, #0
 8006676:	d022      	beq.n	80066be <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d119      	bne.n	80066b6 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800668c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006690:	d015      	beq.n	80066be <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800669a:	d108      	bne.n	80066ae <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066aa:	605a      	str	r2, [r3, #4]
 80066ac:	e007      	b.n	80066be <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fc81 	bl	8006fb6 <I2C_ITMasterSeqCplt>
 80066b4:	e003      	b.n	80066be <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066b6:	2140      	movs	r1, #64	@ 0x40
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 ff95 	bl	80075e8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066d2:	6979      	ldr	r1, [r7, #20]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fd07 	bl	80070e8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <I2C_Slave_ISR_IT+0x24>
 800670c:	2302      	movs	r3, #2
 800670e:	e0e2      	b.n	80068d6 <I2C_Slave_ISR_IT+0x1ea>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800672c:	6939      	ldr	r1, [r7, #16]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fda2 	bl	8007278 <I2C_ITSlaveCplt>
 8006734:	e0ca      	b.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b00      	cmp	r3, #0
 800673e:	d04b      	beq.n	80067d8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006746:	2b00      	cmp	r3, #0
 8006748:	d046      	beq.n	80067d8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d128      	bne.n	80067a6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b28      	cmp	r3, #40	@ 0x28
 800675e:	d108      	bne.n	8006772 <I2C_Slave_ISR_IT+0x86>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006766:	d104      	bne.n	8006772 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006768:	6939      	ldr	r1, [r7, #16]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fee8 	bl	8007540 <I2C_ITListenCplt>
 8006770:	e031      	b.n	80067d6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b29      	cmp	r3, #41	@ 0x29
 800677c:	d10e      	bne.n	800679c <I2C_Slave_ISR_IT+0xb0>
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006784:	d00a      	beq.n	800679c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2210      	movs	r2, #16
 800678c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f001 f841 	bl	8007816 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fc4b 	bl	8007030 <I2C_ITSlaveSeqCplt>
 800679a:	e01c      	b.n	80067d6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2210      	movs	r2, #16
 80067a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067a4:	e08f      	b.n	80068c6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2210      	movs	r2, #16
 80067ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b2:	f043 0204 	orr.w	r2, r3, #4
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <I2C_Slave_ISR_IT+0xdc>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067c6:	d17e      	bne.n	80068c6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 ff0a 	bl	80075e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067d4:	e077      	b.n	80068c6 <I2C_Slave_ISR_IT+0x1da>
 80067d6:	e076      	b.n	80068c6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d02f      	beq.n	8006842 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02a      	beq.n	8006842 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d018      	beq.n	8006828 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d14b      	bne.n	80068ca <I2C_Slave_ISR_IT+0x1de>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006838:	d047      	beq.n	80068ca <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fbf8 	bl	8007030 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006840:	e043      	b.n	80068ca <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006852:	2b00      	cmp	r3, #0
 8006854:	d004      	beq.n	8006860 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006856:	6939      	ldr	r1, [r7, #16]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fb28 	bl	8006eae <I2C_ITAddrCplt>
 800685e:	e035      	b.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d030      	beq.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02b      	beq.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80068ae:	e00d      	b.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068b6:	d002      	beq.n	80068be <I2C_Slave_ISR_IT+0x1d2>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fbb6 	bl	8007030 <I2C_ITSlaveSeqCplt>
 80068c4:	e002      	b.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80068ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af02      	add	r7, sp, #8
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <I2C_Master_ISR_DMA+0x1a>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0d9      	b.n	8006aac <I2C_Master_ISR_DMA+0x1ce>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006910:	2b00      	cmp	r3, #0
 8006912:	d011      	beq.n	8006938 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2210      	movs	r2, #16
 800691a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006920:	f043 0204 	orr.w	r2, r3, #4
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006928:	2120      	movs	r1, #32
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f001 f84a 	bl	80079c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 ff70 	bl	8007816 <I2C_Flush_TXDR>
 8006936:	e0b4      	b.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d071      	beq.n	8006a26 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006948:	2b00      	cmp	r3, #0
 800694a:	d06c      	beq.n	8006a26 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800695a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d04e      	beq.n	8006a04 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006972:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2bff      	cmp	r3, #255	@ 0xff
 800697c:	d906      	bls.n	800698c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	22ff      	movs	r2, #255	@ 0xff
 8006982:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006984:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e010      	b.n	80069ae <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800699e:	d003      	beq.n	80069a8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e002      	b.n	80069ae <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069ac:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	8a79      	ldrh	r1, [r7, #18]
 80069b6:	2300      	movs	r3, #0
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 ffcf 	bl	8007960 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b22      	cmp	r3, #34	@ 0x22
 80069de:	d108      	bne.n	80069f2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069f0:	e057      	b.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a02:	e04e      	b.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a12:	d003      	beq.n	8006a1c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 face 	bl	8006fb6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a1a:	e042      	b.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a1c:	2140      	movs	r1, #64	@ 0x40
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fde2 	bl	80075e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a24:	e03d      	b.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d028      	beq.n	8006a82 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d023      	beq.n	8006a82 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d119      	bne.n	8006a78 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a52:	d025      	beq.n	8006aa0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a5c:	d108      	bne.n	8006a70 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a6c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a6e:	e017      	b.n	8006aa0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 faa0 	bl	8006fb6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a76:	e013      	b.n	8006aa0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a78:	2140      	movs	r1, #64	@ 0x40
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fdb4 	bl	80075e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a80:	e00e      	b.n	8006aa0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fb25 	bl	80070e8 <I2C_ITMasterCplt>
 8006a9e:	e000      	b.n	8006aa2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006aa0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006ac0:	4b8d      	ldr	r3, [pc, #564]	@ (8006cf8 <I2C_Mem_ISR_DMA+0x244>)
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <I2C_Mem_ISR_DMA+0x1e>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e10e      	b.n	8006cf0 <I2C_Mem_ISR_DMA+0x23c>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d016      	beq.n	8006b12 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2210      	movs	r2, #16
 8006af4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b02:	2120      	movs	r1, #32
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 ff5d 	bl	80079c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fe83 	bl	8007816 <I2C_Flush_TXDR>
 8006b10:	e0e9      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f04f 32ff 	mov.w	r2, #4294967295
 8006b36:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b38:	e0d5      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d05f      	beq.n	8006c04 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05a      	beq.n	8006c04 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 ffbb 	bl	8007acc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b56:	2110      	movs	r1, #16
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 ff33 	bl	80079c4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d048      	beq.n	8006bfa <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2bff      	cmp	r3, #255	@ 0xff
 8006b70:	d910      	bls.n	8006b94 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	22ff      	movs	r2, #255	@ 0xff
 8006b76:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b7c:	b299      	uxth	r1, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 fee7 	bl	8007960 <I2C_TransferConfig>
 8006b92:	e011      	b.n	8006bb8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fed4 	bl	8007960 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b22      	cmp	r3, #34	@ 0x22
 8006bd4:	d108      	bne.n	8006be8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006be4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006be6:	e07e      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bf6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006bf8:	e075      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006bfa:	2140      	movs	r1, #64	@ 0x40
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fcf3 	bl	80075e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c02:	e070      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d05d      	beq.n	8006cca <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d058      	beq.n	8006cca <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c18:	2101      	movs	r1, #1
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 ff56 	bl	8007acc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c20:	2110      	movs	r1, #16
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fece 	bl	80079c4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b22      	cmp	r3, #34	@ 0x22
 8006c32:	d101      	bne.n	8006c38 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006c34:	4b31      	ldr	r3, [pc, #196]	@ (8006cfc <I2C_Mem_ISR_DMA+0x248>)
 8006c36:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2bff      	cmp	r3, #255	@ 0xff
 8006c40:	d910      	bls.n	8006c64 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	@ 0xff
 8006c46:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4c:	b299      	uxth	r1, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fe7f 	bl	8007960 <I2C_TransferConfig>
 8006c62:	e011      	b.n	8006c88 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c72:	b299      	uxth	r1, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fe6c 	bl	8007960 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b22      	cmp	r3, #34	@ 0x22
 8006ca4:	d108      	bne.n	8006cb8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cb6:	e016      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cc6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cc8:	e00d      	b.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fa01 	bl	80070e8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	80002000 	.word	0x80002000
 8006cfc:	80002400 	.word	0x80002400

08006d00 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d10:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <I2C_Slave_ISR_DMA+0x24>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e0c0      	b.n	8006ea6 <I2C_Slave_ISR_DMA+0x1a6>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fa98 	bl	8007278 <I2C_ITSlaveCplt>
 8006d48:	e0a8      	b.n	8006e9c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8095 	beq.w	8006e80 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 808f 	beq.w	8006e80 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d07d      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d007      	beq.n	8006d98 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006d94:	2301      	movs	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006db6:	2301      	movs	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d128      	bne.n	8006e12 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b28      	cmp	r3, #40	@ 0x28
 8006dca:	d108      	bne.n	8006dde <I2C_Slave_ISR_DMA+0xde>
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dd2:	d104      	bne.n	8006dde <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 fbb2 	bl	8007540 <I2C_ITListenCplt>
 8006ddc:	e048      	b.n	8006e70 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b29      	cmp	r3, #41	@ 0x29
 8006de8:	d10e      	bne.n	8006e08 <I2C_Slave_ISR_DMA+0x108>
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006df0:	d00a      	beq.n	8006e08 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2210      	movs	r2, #16
 8006df8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fd0b 	bl	8007816 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f915 	bl	8007030 <I2C_ITSlaveSeqCplt>
 8006e06:	e033      	b.n	8006e70 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006e10:	e034      	b.n	8006e7c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2210      	movs	r2, #16
 8006e18:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <I2C_Slave_ISR_DMA+0x13c>
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e3a:	d11f      	bne.n	8006e7c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b21      	cmp	r3, #33	@ 0x21
 8006e40:	d002      	beq.n	8006e48 <I2C_Slave_ISR_DMA+0x148>
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b29      	cmp	r3, #41	@ 0x29
 8006e46:	d103      	bne.n	8006e50 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2221      	movs	r2, #33	@ 0x21
 8006e4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e4e:	e008      	b.n	8006e62 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	2b22      	cmp	r3, #34	@ 0x22
 8006e54:	d002      	beq.n	8006e5c <I2C_Slave_ISR_DMA+0x15c>
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e5a:	d102      	bne.n	8006e62 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2222      	movs	r2, #34	@ 0x22
 8006e60:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fbbd 	bl	80075e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006e6e:	e005      	b.n	8006e7c <I2C_Slave_ISR_DMA+0x17c>
 8006e70:	e004      	b.n	8006e7c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2210      	movs	r2, #16
 8006e78:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e7a:	e00f      	b.n	8006e9c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006e7c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e7e:	e00d      	b.n	8006e9c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f809 	bl	8006eae <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ec4:	2b28      	cmp	r3, #40	@ 0x28
 8006ec6:	d16a      	bne.n	8006f9e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006ee6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f02:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d138      	bne.n	8006f7e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f0c:	897b      	ldrh	r3, [r7, #10]
 8006f0e:	09db      	lsrs	r3, r3, #7
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	89bb      	ldrh	r3, [r7, #12]
 8006f14:	4053      	eors	r3, r2
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f003 0306 	and.w	r3, r3, #6
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11c      	bne.n	8006f5a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f20:	897b      	ldrh	r3, [r7, #10]
 8006f22:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d13b      	bne.n	8006fae <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2208      	movs	r2, #8
 8006f42:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f4c:	89ba      	ldrh	r2, [r7, #12]
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fa49 	bl	80063ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f58:	e029      	b.n	8006fae <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006f5a:	893b      	ldrh	r3, [r7, #8]
 8006f5c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fdb2 	bl	8007acc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f70:	89ba      	ldrh	r2, [r7, #12]
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fa37 	bl	80063ea <HAL_I2C_AddrCallback>
}
 8006f7c:	e017      	b.n	8006fae <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fda2 	bl	8007acc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f90:	89ba      	ldrh	r2, [r7, #12]
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fa27 	bl	80063ea <HAL_I2C_AddrCallback>
}
 8006f9c:	e007      	b.n	8006fae <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b21      	cmp	r3, #33	@ 0x21
 8006fd0:	d115      	bne.n	8006ffe <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2211      	movs	r2, #17
 8006fde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fd6f 	bl	8007acc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fa f8d8 	bl	80011ac <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ffc:	e014      	b.n	8007028 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2212      	movs	r2, #18
 800700a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007012:	2102      	movs	r1, #2
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fd59 	bl	8007acc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff f9c3 	bl	80063ae <HAL_I2C_MasterRxCpltCallback>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e00c      	b.n	800707e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800707c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b29      	cmp	r3, #41	@ 0x29
 8007088:	d112      	bne.n	80070b0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2228      	movs	r2, #40	@ 0x28
 800708e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2221      	movs	r2, #33	@ 0x21
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007098:	2101      	movs	r1, #1
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fd16 	bl	8007acc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff f98a 	bl	80063c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070ae:	e017      	b.n	80070e0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ba:	d111      	bne.n	80070e0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2228      	movs	r2, #40	@ 0x28
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2222      	movs	r2, #34	@ 0x22
 80070c8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070ca:	2102      	movs	r1, #2
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fcfd 	bl	8007acc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff f97b 	bl	80063d6 <HAL_I2C_SlaveRxCpltCallback>
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2220      	movs	r2, #32
 80070fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b21      	cmp	r3, #33	@ 0x21
 8007108:	d107      	bne.n	800711a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800710a:	2101      	movs	r1, #1
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fcdd 	bl	8007acc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2211      	movs	r2, #17
 8007116:	631a      	str	r2, [r3, #48]	@ 0x30
 8007118:	e00c      	b.n	8007134 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b22      	cmp	r3, #34	@ 0x22
 8007124:	d106      	bne.n	8007134 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007126:	2102      	movs	r1, #2
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fccf 	bl	8007acc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2212      	movs	r2, #18
 8007132:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6859      	ldr	r1, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b4c      	ldr	r3, [pc, #304]	@ (8007270 <I2C_ITMasterCplt+0x188>)
 8007140:	400b      	ands	r3, r1
 8007142:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a49      	ldr	r2, [pc, #292]	@ (8007274 <I2C_ITMasterCplt+0x18c>)
 800714e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2210      	movs	r2, #16
 8007160:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f043 0204 	orr.w	r2, r3, #4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b60      	cmp	r3, #96	@ 0x60
 8007178:	d10a      	bne.n	8007190 <I2C_ITMasterCplt+0xa8>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718a:	b2db      	uxtb	r3, r3
 800718c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800718e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fb40 	bl	8007816 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b60      	cmp	r3, #96	@ 0x60
 80071a6:	d002      	beq.n	80071ae <I2C_ITMasterCplt+0xc6>
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d006      	beq.n	80071bc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fa17 	bl	80075e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80071ba:	e054      	b.n	8007266 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b21      	cmp	r3, #33	@ 0x21
 80071c6:	d124      	bne.n	8007212 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b40      	cmp	r3, #64	@ 0x40
 80071e0:	d10b      	bne.n	80071fa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff f911 	bl	800641a <HAL_I2C_MemTxCpltCallback>
}
 80071f8:	e035      	b.n	8007266 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7f9 ffce 	bl	80011ac <HAL_I2C_MasterTxCpltCallback>
}
 8007210:	e029      	b.n	8007266 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b22      	cmp	r3, #34	@ 0x22
 800721c:	d123      	bne.n	8007266 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d10b      	bne.n	8007250 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff f8f0 	bl	800642e <HAL_I2C_MemRxCpltCallback>
}
 800724e:	e00a      	b.n	8007266 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff f8a4 	bl	80063ae <HAL_I2C_MasterRxCpltCallback>
}
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	fe00e800 	.word	0xfe00e800
 8007274:	ffff0000 	.word	0xffff0000

08007278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2220      	movs	r2, #32
 80072a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	2b21      	cmp	r3, #33	@ 0x21
 80072a8:	d002      	beq.n	80072b0 <I2C_ITSlaveCplt+0x38>
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	2b29      	cmp	r3, #41	@ 0x29
 80072ae:	d108      	bne.n	80072c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80072b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc09 	bl	8007acc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2221      	movs	r2, #33	@ 0x21
 80072be:	631a      	str	r2, [r3, #48]	@ 0x30
 80072c0:	e019      	b.n	80072f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	2b22      	cmp	r3, #34	@ 0x22
 80072c6:	d002      	beq.n	80072ce <I2C_ITSlaveCplt+0x56>
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80072cc:	d108      	bne.n	80072e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fbfa 	bl	8007acc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2222      	movs	r2, #34	@ 0x22
 80072dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80072de:	e00a      	b.n	80072f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	2b28      	cmp	r3, #40	@ 0x28
 80072e4:	d107      	bne.n	80072f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80072e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fbee 	bl	8007acc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007304:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6859      	ldr	r1, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4b89      	ldr	r3, [pc, #548]	@ (8007538 <I2C_ITSlaveCplt+0x2c0>)
 8007312:	400b      	ands	r3, r1
 8007314:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa7d 	bl	8007816 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d013      	beq.n	800734e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007334:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01f      	beq.n	800737e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800734c:	e017      	b.n	800737e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d012      	beq.n	800737e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007366:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d006      	beq.n	800737e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d020      	beq.n	80073ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f023 0304 	bic.w	r3, r3, #4
 800738e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00c      	beq.n	80073ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d8:	f043 0204 	orr.w	r2, r3, #4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d049      	beq.n	800747e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d044      	beq.n	800747e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d128      	bne.n	8007450 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b28      	cmp	r3, #40	@ 0x28
 8007408:	d108      	bne.n	800741c <I2C_ITSlaveCplt+0x1a4>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007410:	d104      	bne.n	800741c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007412:	6979      	ldr	r1, [r7, #20]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f893 	bl	8007540 <I2C_ITListenCplt>
 800741a:	e030      	b.n	800747e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b29      	cmp	r3, #41	@ 0x29
 8007426:	d10e      	bne.n	8007446 <I2C_ITSlaveCplt+0x1ce>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800742e:	d00a      	beq.n	8007446 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2210      	movs	r2, #16
 8007436:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9ec 	bl	8007816 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fdf6 	bl	8007030 <I2C_ITSlaveSeqCplt>
 8007444:	e01b      	b.n	800747e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2210      	movs	r2, #16
 800744c:	61da      	str	r2, [r3, #28]
 800744e:	e016      	b.n	800747e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2210      	movs	r2, #16
 8007456:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745c:	f043 0204 	orr.w	r2, r3, #4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <I2C_ITSlaveCplt+0x1fa>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007470:	d105      	bne.n	800747e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8b5 	bl	80075e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007490:	2b00      	cmp	r3, #0
 8007492:	d010      	beq.n	80074b6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8a4 	bl	80075e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b28      	cmp	r3, #40	@ 0x28
 80074aa:	d141      	bne.n	8007530 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f846 	bl	8007540 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074b4:	e03c      	b.n	8007530 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074be:	d014      	beq.n	80074ea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fdb5 	bl	8007030 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	@ (800753c <I2C_ITSlaveCplt+0x2c4>)
 80074ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe ff8f 	bl	8006406 <HAL_I2C_ListenCpltCallback>
}
 80074e8:	e022      	b.n	8007530 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b22      	cmp	r3, #34	@ 0x22
 80074f4:	d10e      	bne.n	8007514 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fe ff62 	bl	80063d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007512:	e00d      	b.n	8007530 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fe ff49 	bl	80063c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	fe00e800 	.word	0xfe00e800
 800753c:	ffff0000 	.word	0xffff0000

08007540 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a25      	ldr	r2, [pc, #148]	@ (80075e4 <I2C_ITListenCplt+0xa4>)
 800754e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d022      	beq.n	80075bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d012      	beq.n	80075bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b4:	f043 0204 	orr.w	r2, r3, #4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa83 	bl	8007acc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2210      	movs	r2, #16
 80075cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fe ff15 	bl	8006406 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	ffff0000 	.word	0xffff0000

080075e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a6d      	ldr	r2, [pc, #436]	@ (80077bc <I2C_ITError+0x1d4>)
 8007606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b28      	cmp	r3, #40	@ 0x28
 800761e:	d005      	beq.n	800762c <I2C_ITError+0x44>
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b29      	cmp	r3, #41	@ 0x29
 8007624:	d002      	beq.n	800762c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	2b2a      	cmp	r3, #42	@ 0x2a
 800762a:	d10b      	bne.n	8007644 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800762c:	2103      	movs	r1, #3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa4c 	bl	8007acc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2228      	movs	r2, #40	@ 0x28
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a60      	ldr	r2, [pc, #384]	@ (80077c0 <I2C_ITError+0x1d8>)
 8007640:	635a      	str	r2, [r3, #52]	@ 0x34
 8007642:	e030      	b.n	80076a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007644:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fa3f 	bl	8007acc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f8e1 	bl	8007816 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b60      	cmp	r3, #96	@ 0x60
 800765e:	d01f      	beq.n	80076a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d114      	bne.n	80076a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b10      	cmp	r3, #16
 8007682:	d109      	bne.n	8007698 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2210      	movs	r2, #16
 800768a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007690:	f043 0204 	orr.w	r2, r3, #4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2220      	movs	r2, #32
 800769e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d039      	beq.n	8007728 <I2C_ITError+0x140>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b11      	cmp	r3, #17
 80076b8:	d002      	beq.n	80076c0 <I2C_ITError+0xd8>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b21      	cmp	r3, #33	@ 0x21
 80076be:	d133      	bne.n	8007728 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ce:	d107      	bne.n	80076e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe f9f5 	bl	8005ad4 <HAL_DMA_GetState>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d017      	beq.n	8007720 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f4:	4a33      	ldr	r2, [pc, #204]	@ (80077c4 <I2C_ITError+0x1dc>)
 80076f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe f8cf 	bl	80058a8 <HAL_DMA_Abort_IT>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d04d      	beq.n	80077ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800771a:	4610      	mov	r0, r2
 800771c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800771e:	e045      	b.n	80077ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f851 	bl	80077c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007726:	e041      	b.n	80077ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d039      	beq.n	80077a4 <I2C_ITError+0x1bc>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b12      	cmp	r3, #18
 8007734:	d002      	beq.n	800773c <I2C_ITError+0x154>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b22      	cmp	r3, #34	@ 0x22
 800773a:	d133      	bne.n	80077a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774a:	d107      	bne.n	800775c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800775a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe f9b7 	bl	8005ad4 <HAL_DMA_GetState>
 8007766:	4603      	mov	r3, r0
 8007768:	2b01      	cmp	r3, #1
 800776a:	d017      	beq.n	800779c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007770:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <I2C_ITError+0x1dc>)
 8007772:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe f891 	bl	80058a8 <HAL_DMA_Abort_IT>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d011      	beq.n	80077b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007796:	4610      	mov	r0, r2
 8007798:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800779a:	e009      	b.n	80077b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f813 	bl	80077c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077a2:	e005      	b.n	80077b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f80f 	bl	80077c8 <I2C_TreatErrorCallback>
  }
}
 80077aa:	e002      	b.n	80077b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077b0:	bf00      	nop
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	ffff0000 	.word	0xffff0000
 80077c0:	080066ed 	.word	0x080066ed
 80077c4:	08007923 	.word	0x08007923

080077c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b60      	cmp	r3, #96	@ 0x60
 80077da:	d10e      	bne.n	80077fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fe fe2f 	bl	8006456 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077f8:	e009      	b.n	800780e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7fe fe1a 	bl	8006442 <HAL_I2C_ErrorCallback>
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b02      	cmp	r3, #2
 800782a:	d103      	bne.n	8007834 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2200      	movs	r2, #0
 8007832:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b01      	cmp	r3, #1
 8007840:	d007      	beq.n	8007852 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	619a      	str	r2, [r3, #24]
  }
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800787a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007886:	2120      	movs	r1, #32
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f89b 	bl	80079c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800788e:	e02d      	b.n	80078ec <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007898:	441a      	add	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2bff      	cmp	r3, #255	@ 0xff
 80078a6:	d903      	bls.n	80078b0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22ff      	movs	r2, #255	@ 0xff
 80078ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80078ae:	e004      	b.n	80078ba <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c2:	4619      	mov	r1, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3328      	adds	r3, #40	@ 0x28
 80078ca:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80078d0:	f7fd ff16 	bl	8005700 <HAL_DMA_Start_IT>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80078da:	2110      	movs	r1, #16
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f7ff fe83 	bl	80075e8 <I2C_ITError>
}
 80078e2:	e003      	b.n	80078ec <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80078e4:	2140      	movs	r1, #64	@ 0x40
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f86c 	bl	80079c4 <I2C_Enable_IRQ>
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007910:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007912:	2110      	movs	r1, #16
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f7ff fe67 	bl	80075e8 <I2C_ITError>
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793c:	2200      	movs	r2, #0
 800793e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794c:	2200      	movs	r2, #0
 800794e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff ff39 	bl	80077c8 <I2C_TreatErrorCallback>
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	817b      	strh	r3, [r7, #10]
 800796e:	4613      	mov	r3, r2
 8007970:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007978:	7a7b      	ldrb	r3, [r7, #9]
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007980:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	4313      	orrs	r3, r2
 800798a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800798e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	0d5b      	lsrs	r3, r3, #21
 800799a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800799e:	4b08      	ldr	r3, [pc, #32]	@ (80079c0 <I2C_TransferConfig+0x60>)
 80079a0:	430b      	orrs	r3, r1
 80079a2:	43db      	mvns	r3, r3
 80079a4:	ea02 0103 	and.w	r1, r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	03ff63ff 	.word	0x03ff63ff

080079c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d8:	4a39      	ldr	r2, [pc, #228]	@ (8007ac0 <I2C_Enable_IRQ+0xfc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d032      	beq.n	8007a44 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80079e2:	4a38      	ldr	r2, [pc, #224]	@ (8007ac4 <I2C_Enable_IRQ+0x100>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d02d      	beq.n	8007a44 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80079ec:	4a36      	ldr	r2, [pc, #216]	@ (8007ac8 <I2C_Enable_IRQ+0x104>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d028      	beq.n	8007a44 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80079f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da03      	bge.n	8007a02 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007a00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007a02:	887b      	ldrh	r3, [r7, #2]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007a12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007a14:	887b      	ldrh	r3, [r7, #2]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007a24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	2b10      	cmp	r3, #16
 8007a2a:	d103      	bne.n	8007a34 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007a32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a34:	887b      	ldrh	r3, [r7, #2]
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d133      	bne.n	8007aa2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f043 0320 	orr.w	r3, r3, #32
 8007a40:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a42:	e02e      	b.n	8007aa2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da03      	bge.n	8007a54 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007a52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007a54:	887b      	ldrh	r3, [r7, #2]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007a64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007a66:	887b      	ldrh	r3, [r7, #2]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007a76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007a78:	887b      	ldrh	r3, [r7, #2]
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d103      	bne.n	8007a86 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007a84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d103      	bne.n	8007a94 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007a94:	887b      	ldrh	r3, [r7, #2]
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d103      	bne.n	8007aa2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6819      	ldr	r1, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	601a      	str	r2, [r3, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	080068df 	.word	0x080068df
 8007ac4:	08006d01 	.word	0x08006d01
 8007ac8:	08006ab5 	.word	0x08006ab5

08007acc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007adc:	887b      	ldrh	r3, [r7, #2]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007aec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007afa:	2b28      	cmp	r3, #40	@ 0x28
 8007afc:	d003      	beq.n	8007b06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007b04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b06:	887b      	ldrh	r3, [r7, #2]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00f      	beq.n	8007b30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007b16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b24:	2b28      	cmp	r3, #40	@ 0x28
 8007b26:	d003      	beq.n	8007b30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007b2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da03      	bge.n	8007b40 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b40:	887b      	ldrh	r3, [r7, #2]
 8007b42:	2b10      	cmp	r3, #16
 8007b44:	d103      	bne.n	8007b4e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b4e:	887b      	ldrh	r3, [r7, #2]
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d103      	bne.n	8007b5c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f043 0320 	orr.w	r3, r3, #32
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b5c:	887b      	ldrh	r3, [r7, #2]
 8007b5e:	2b40      	cmp	r3, #64	@ 0x40
 8007b60:	d103      	bne.n	8007b6a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6819      	ldr	r1, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	43da      	mvns	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	400a      	ands	r2, r1
 8007b7a:	601a      	str	r2, [r3, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d138      	bne.n	8007c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e032      	b.n	8007c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2224      	movs	r2, #36	@ 0x24
 8007bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0201 	bic.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e000      	b.n	8007c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c10:	2302      	movs	r3, #2
  }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d139      	bne.n	8007ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e033      	b.n	8007caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2224      	movs	r2, #36	@ 0x24
 8007c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0201 	bic.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0201 	orr.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e000      	b.n	8007caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ca8:	2302      	movs	r3, #2
  }
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d141      	bne.n	8007d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd2:	d131      	bne.n	8007d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cd4:	4b47      	ldr	r3, [pc, #284]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cda:	4a46      	ldr	r2, [pc, #280]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ce4:	4b43      	ldr	r3, [pc, #268]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007cec:	4a41      	ldr	r2, [pc, #260]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007cf4:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2232      	movs	r2, #50	@ 0x32
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8007dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d00:	fba2 2303 	umull	r2, r3, r2, r3
 8007d04:	0c9b      	lsrs	r3, r3, #18
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d0a:	e002      	b.n	8007d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d12:	4b38      	ldr	r3, [pc, #224]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d1e:	d102      	bne.n	8007d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f2      	bne.n	8007d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d26:	4b33      	ldr	r3, [pc, #204]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d32:	d158      	bne.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e057      	b.n	8007de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d38:	4b2e      	ldr	r3, [pc, #184]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d48:	e04d      	b.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d50:	d141      	bne.n	8007dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d52:	4b28      	ldr	r3, [pc, #160]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d5e:	d131      	bne.n	8007dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d60:	4b24      	ldr	r3, [pc, #144]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d66:	4a23      	ldr	r2, [pc, #140]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d70:	4b20      	ldr	r3, [pc, #128]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d78:	4a1e      	ldr	r2, [pc, #120]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d80:	4b1d      	ldr	r3, [pc, #116]	@ (8007df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2232      	movs	r2, #50	@ 0x32
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d90:	0c9b      	lsrs	r3, r3, #18
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d96:	e002      	b.n	8007d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d9e:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007daa:	d102      	bne.n	8007db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f2      	bne.n	8007d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007db2:	4b10      	ldr	r3, [pc, #64]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dbe:	d112      	bne.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e011      	b.n	8007de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dca:	4a0a      	ldr	r2, [pc, #40]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007dd4:	e007      	b.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dd6:	4b07      	ldr	r3, [pc, #28]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007dde:	4a05      	ldr	r2, [pc, #20]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	40007000 	.word	0x40007000
 8007df8:	20000008 	.word	0x20000008
 8007dfc:	431bde83 	.word	0x431bde83

08007e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e04:	4b05      	ldr	r3, [pc, #20]	@ (8007e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	4a04      	ldr	r2, [pc, #16]	@ (8007e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e0e:	6093      	str	r3, [r2, #8]
}
 8007e10:	bf00      	nop
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40007000 	.word	0x40007000

08007e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e2fe      	b.n	8008430 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d075      	beq.n	8007f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e3e:	4b97      	ldr	r3, [pc, #604]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e48:	4b94      	ldr	r3, [pc, #592]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b0c      	cmp	r3, #12
 8007e56:	d102      	bne.n	8007e5e <HAL_RCC_OscConfig+0x3e>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d002      	beq.n	8007e64 <HAL_RCC_OscConfig+0x44>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d10b      	bne.n	8007e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e64:	4b8d      	ldr	r3, [pc, #564]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d05b      	beq.n	8007f28 <HAL_RCC_OscConfig+0x108>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d157      	bne.n	8007f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e2d9      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e84:	d106      	bne.n	8007e94 <HAL_RCC_OscConfig+0x74>
 8007e86:	4b85      	ldr	r3, [pc, #532]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a84      	ldr	r2, [pc, #528]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	e01d      	b.n	8007ed0 <HAL_RCC_OscConfig+0xb0>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x98>
 8007e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a7b      	ldr	r2, [pc, #492]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	e00b      	b.n	8007ed0 <HAL_RCC_OscConfig+0xb0>
 8007eb8:	4b78      	ldr	r3, [pc, #480]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a77      	ldr	r2, [pc, #476]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	4b75      	ldr	r3, [pc, #468]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a74      	ldr	r2, [pc, #464]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d013      	beq.n	8007f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fb f882 	bl	8002fe0 <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee0:	f7fb f87e 	bl	8002fe0 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	@ 0x64
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e29e      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0xc0>
 8007efe:	e014      	b.n	8007f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fb f86e 	bl	8002fe0 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f08:	f7fb f86a 	bl	8002fe0 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b64      	cmp	r3, #100	@ 0x64
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e28a      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f1a:	4b60      	ldr	r3, [pc, #384]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <HAL_RCC_OscConfig+0xe8>
 8007f26:	e000      	b.n	8007f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d075      	beq.n	8008022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f36:	4b59      	ldr	r3, [pc, #356]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 030c 	and.w	r3, r3, #12
 8007f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f40:	4b56      	ldr	r3, [pc, #344]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b0c      	cmp	r3, #12
 8007f4e:	d102      	bne.n	8007f56 <HAL_RCC_OscConfig+0x136>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d002      	beq.n	8007f5c <HAL_RCC_OscConfig+0x13c>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d11f      	bne.n	8007f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_RCC_OscConfig+0x154>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e25d      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f74:	4b49      	ldr	r3, [pc, #292]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	061b      	lsls	r3, r3, #24
 8007f82:	4946      	ldr	r1, [pc, #280]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f88:	4b45      	ldr	r3, [pc, #276]	@ (80080a0 <HAL_RCC_OscConfig+0x280>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fa fdf1 	bl	8002b74 <HAL_InitTick>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d043      	beq.n	8008020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e249      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d023      	beq.n	8007fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fb f816 	bl	8002fe0 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fb8:	f7fb f812 	bl	8002fe0 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e232      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fca:	4b34      	ldr	r3, [pc, #208]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd6:	4b31      	ldr	r3, [pc, #196]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	061b      	lsls	r3, r3, #24
 8007fe4:	492d      	ldr	r1, [pc, #180]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	604b      	str	r3, [r1, #4]
 8007fea:	e01a      	b.n	8008022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fec:	4b2b      	ldr	r3, [pc, #172]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ff2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff8:	f7fa fff2 	bl	8002fe0 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008000:	f7fa ffee 	bl	8002fe0 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e20e      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008012:	4b22      	ldr	r3, [pc, #136]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f0      	bne.n	8008000 <HAL_RCC_OscConfig+0x1e0>
 800801e:	e000      	b.n	8008022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d041      	beq.n	80080b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01c      	beq.n	8008070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008036:	4b19      	ldr	r3, [pc, #100]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8008038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800803c:	4a17      	ldr	r2, [pc, #92]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008046:	f7fa ffcb 	bl	8002fe0 <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800804c:	e008      	b.n	8008060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800804e:	f7fa ffc7 	bl	8002fe0 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e1e7      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008060:	4b0e      	ldr	r3, [pc, #56]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8008062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0ef      	beq.n	800804e <HAL_RCC_OscConfig+0x22e>
 800806e:	e020      	b.n	80080b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8008072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008076:	4a09      	ldr	r2, [pc, #36]	@ (800809c <HAL_RCC_OscConfig+0x27c>)
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008080:	f7fa ffae 	bl	8002fe0 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008086:	e00d      	b.n	80080a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008088:	f7fa ffaa 	bl	8002fe0 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d906      	bls.n	80080a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e1ca      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
 800809a:	bf00      	nop
 800809c:	40021000 	.word	0x40021000
 80080a0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080a4:	4b8c      	ldr	r3, [pc, #560]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ea      	bne.n	8008088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80a6 	beq.w	800820c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c0:	2300      	movs	r3, #0
 80080c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080c4:	4b84      	ldr	r3, [pc, #528]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_OscConfig+0x2b4>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e000      	b.n	80080d6 <HAL_RCC_OscConfig+0x2b6>
 80080d4:	2300      	movs	r3, #0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00d      	beq.n	80080f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080da:	4b7f      	ldr	r3, [pc, #508]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080de:	4a7e      	ldr	r2, [pc, #504]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80080e6:	4b7c      	ldr	r3, [pc, #496]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080f2:	2301      	movs	r3, #1
 80080f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080f6:	4b79      	ldr	r3, [pc, #484]	@ (80082dc <HAL_RCC_OscConfig+0x4bc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d118      	bne.n	8008134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008102:	4b76      	ldr	r3, [pc, #472]	@ (80082dc <HAL_RCC_OscConfig+0x4bc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a75      	ldr	r2, [pc, #468]	@ (80082dc <HAL_RCC_OscConfig+0x4bc>)
 8008108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800810c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800810e:	f7fa ff67 	bl	8002fe0 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008116:	f7fa ff63 	bl	8002fe0 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e183      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008128:	4b6c      	ldr	r3, [pc, #432]	@ (80082dc <HAL_RCC_OscConfig+0x4bc>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d108      	bne.n	800814e <HAL_RCC_OscConfig+0x32e>
 800813c:	4b66      	ldr	r3, [pc, #408]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008142:	4a65      	ldr	r2, [pc, #404]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800814c:	e024      	b.n	8008198 <HAL_RCC_OscConfig+0x378>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b05      	cmp	r3, #5
 8008154:	d110      	bne.n	8008178 <HAL_RCC_OscConfig+0x358>
 8008156:	4b60      	ldr	r3, [pc, #384]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815c:	4a5e      	ldr	r2, [pc, #376]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800815e:	f043 0304 	orr.w	r3, r3, #4
 8008162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008166:	4b5c      	ldr	r3, [pc, #368]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816c:	4a5a      	ldr	r2, [pc, #360]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800816e:	f043 0301 	orr.w	r3, r3, #1
 8008172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008176:	e00f      	b.n	8008198 <HAL_RCC_OscConfig+0x378>
 8008178:	4b57      	ldr	r3, [pc, #348]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817e:	4a56      	ldr	r2, [pc, #344]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008188:	4b53      	ldr	r3, [pc, #332]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818e:	4a52      	ldr	r2, [pc, #328]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008190:	f023 0304 	bic.w	r3, r3, #4
 8008194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d016      	beq.n	80081ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a0:	f7fa ff1e 	bl	8002fe0 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081a6:	e00a      	b.n	80081be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a8:	f7fa ff1a 	bl	8002fe0 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e138      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081be:	4b46      	ldr	r3, [pc, #280]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80081c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0ed      	beq.n	80081a8 <HAL_RCC_OscConfig+0x388>
 80081cc:	e015      	b.n	80081fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ce:	f7fa ff07 	bl	8002fe0 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081d4:	e00a      	b.n	80081ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081d6:	f7fa ff03 	bl	8002fe0 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e121      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081ec:	4b3a      	ldr	r3, [pc, #232]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1ed      	bne.n	80081d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081fa:	7ffb      	ldrb	r3, [r7, #31]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d105      	bne.n	800820c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008200:	4b35      	ldr	r3, [pc, #212]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008204:	4a34      	ldr	r2, [pc, #208]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800820a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d03c      	beq.n	8008292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01c      	beq.n	800825a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008220:	4b2d      	ldr	r3, [pc, #180]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008226:	4a2c      	ldr	r2, [pc, #176]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008230:	f7fa fed6 	bl	8002fe0 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008238:	f7fa fed2 	bl	8002fe0 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e0f2      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800824a:	4b23      	ldr	r3, [pc, #140]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800824c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0ef      	beq.n	8008238 <HAL_RCC_OscConfig+0x418>
 8008258:	e01b      	b.n	8008292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800825a:	4b1f      	ldr	r3, [pc, #124]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800825c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008260:	4a1d      	ldr	r2, [pc, #116]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826a:	f7fa feb9 	bl	8002fe0 <HAL_GetTick>
 800826e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008272:	f7fa feb5 	bl	8002fe0 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e0d5      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008284:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ef      	bne.n	8008272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80c9 	beq.w	800842e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800829c:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	f000 8083 	beq.w	80083b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d15e      	bne.n	8008370 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a08      	ldr	r2, [pc, #32]	@ (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80082b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fa fe8f 	bl	8002fe0 <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082c4:	e00c      	b.n	80082e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c6:	f7fa fe8b 	bl	8002fe0 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d905      	bls.n	80082e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e0ab      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
 80082d8:	40021000 	.word	0x40021000
 80082dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082e0:	4b55      	ldr	r3, [pc, #340]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ec      	bne.n	80082c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082ec:	4b52      	ldr	r3, [pc, #328]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	4b52      	ldr	r3, [pc, #328]	@ (800843c <HAL_RCC_OscConfig+0x61c>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6a11      	ldr	r1, [r2, #32]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80082fc:	3a01      	subs	r2, #1
 80082fe:	0112      	lsls	r2, r2, #4
 8008300:	4311      	orrs	r1, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008306:	0212      	lsls	r2, r2, #8
 8008308:	4311      	orrs	r1, r2
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800830e:	0852      	lsrs	r2, r2, #1
 8008310:	3a01      	subs	r2, #1
 8008312:	0552      	lsls	r2, r2, #21
 8008314:	4311      	orrs	r1, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800831a:	0852      	lsrs	r2, r2, #1
 800831c:	3a01      	subs	r2, #1
 800831e:	0652      	lsls	r2, r2, #25
 8008320:	4311      	orrs	r1, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008326:	06d2      	lsls	r2, r2, #27
 8008328:	430a      	orrs	r2, r1
 800832a:	4943      	ldr	r1, [pc, #268]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 800832c:	4313      	orrs	r3, r2
 800832e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008330:	4b41      	ldr	r3, [pc, #260]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a40      	ldr	r2, [pc, #256]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800833a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800833c:	4b3e      	ldr	r3, [pc, #248]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	4a3d      	ldr	r2, [pc, #244]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7fa fe4a 	bl	8002fe0 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008350:	f7fa fe46 	bl	8002fe0 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e066      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008362:	4b35      	ldr	r3, [pc, #212]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f0      	beq.n	8008350 <HAL_RCC_OscConfig+0x530>
 800836e:	e05e      	b.n	800842e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008370:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a30      	ldr	r2, [pc, #192]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800837a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fa fe30 	bl	8002fe0 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008384:	f7fa fe2c 	bl	8002fe0 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e04c      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008396:	4b28      	ldr	r3, [pc, #160]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083a2:	4b25      	ldr	r3, [pc, #148]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	4924      	ldr	r1, [pc, #144]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 80083a8:	4b25      	ldr	r3, [pc, #148]	@ (8008440 <HAL_RCC_OscConfig+0x620>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	60cb      	str	r3, [r1, #12]
 80083ae:	e03e      	b.n	800842e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e039      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80083bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008438 <HAL_RCC_OscConfig+0x618>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f003 0203 	and.w	r2, r3, #3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d12c      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	3b01      	subs	r3, #1
 80083dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083de:	429a      	cmp	r2, r3
 80083e0:	d123      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d11b      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d113      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	3b01      	subs	r3, #1
 8008410:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008412:	429a      	cmp	r2, r3
 8008414:	d109      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008420:	085b      	lsrs	r3, r3, #1
 8008422:	3b01      	subs	r3, #1
 8008424:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008426:	429a      	cmp	r2, r3
 8008428:	d001      	beq.n	800842e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40021000 	.word	0x40021000
 800843c:	019f800c 	.word	0x019f800c
 8008440:	feeefffc 	.word	0xfeeefffc

08008444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e11e      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800845c:	4b91      	ldr	r3, [pc, #580]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d910      	bls.n	800848c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846a:	4b8e      	ldr	r3, [pc, #568]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f023 020f 	bic.w	r2, r3, #15
 8008472:	498c      	ldr	r1, [pc, #560]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	4313      	orrs	r3, r2
 8008478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800847a:	4b8a      	ldr	r3, [pc, #552]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d001      	beq.n	800848c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e106      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d073      	beq.n	8008580 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d129      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a0:	4b81      	ldr	r3, [pc, #516]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0f4      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084b0:	f000 f9d0 	bl	8008854 <RCC_GetSysClockFreqFromPLLSource>
 80084b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4a7c      	ldr	r2, [pc, #496]	@ (80086ac <HAL_RCC_ClockConfig+0x268>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d93f      	bls.n	800853e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084be:	4b7a      	ldr	r3, [pc, #488]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d033      	beq.n	800853e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12f      	bne.n	800853e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084de:	4b72      	ldr	r3, [pc, #456]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084e6:	4a70      	ldr	r2, [pc, #448]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80084ee:	2380      	movs	r3, #128	@ 0x80
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e024      	b.n	800853e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d107      	bne.n	800850c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084fc:	4b6a      	ldr	r3, [pc, #424]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0c6      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800850c:	4b66      	ldr	r3, [pc, #408]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0be      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800851c:	f000 f8ce 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 8008520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	4a61      	ldr	r2, [pc, #388]	@ (80086ac <HAL_RCC_ClockConfig+0x268>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d909      	bls.n	800853e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800852a:	4b5f      	ldr	r3, [pc, #380]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008532:	4a5d      	ldr	r2, [pc, #372]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800853a:	2380      	movs	r3, #128	@ 0x80
 800853c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800853e:	4b5a      	ldr	r3, [pc, #360]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f023 0203 	bic.w	r2, r3, #3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	4957      	ldr	r1, [pc, #348]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800854c:	4313      	orrs	r3, r2
 800854e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008550:	f7fa fd46 	bl	8002fe0 <HAL_GetTick>
 8008554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008556:	e00a      	b.n	800856e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008558:	f7fa fd42 	bl	8002fe0 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008566:	4293      	cmp	r3, r2
 8008568:	d901      	bls.n	800856e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e095      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800856e:	4b4e      	ldr	r3, [pc, #312]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 020c 	and.w	r2, r3, #12
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	429a      	cmp	r2, r3
 800857e:	d1eb      	bne.n	8008558 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d023      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008598:	4b43      	ldr	r3, [pc, #268]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	4a42      	ldr	r2, [pc, #264]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800859e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80085a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085b0:	4b3d      	ldr	r3, [pc, #244]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085b8:	4a3b      	ldr	r2, [pc, #236]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80085be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c0:	4b39      	ldr	r3, [pc, #228]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4936      	ldr	r1, [pc, #216]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	608b      	str	r3, [r1, #8]
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b80      	cmp	r3, #128	@ 0x80
 80085d8:	d105      	bne.n	80085e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085da:	4b33      	ldr	r3, [pc, #204]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4a32      	ldr	r2, [pc, #200]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085e6:	4b2f      	ldr	r3, [pc, #188]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d21d      	bcs.n	8008630 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f4:	4b2b      	ldr	r3, [pc, #172]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f023 020f 	bic.w	r2, r3, #15
 80085fc:	4929      	ldr	r1, [pc, #164]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	4313      	orrs	r3, r2
 8008602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008604:	f7fa fcec 	bl	8002fe0 <HAL_GetTick>
 8008608:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800860a:	e00a      	b.n	8008622 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800860c:	f7fa fce8 	bl	8002fe0 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800861a:	4293      	cmp	r3, r2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e03b      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008622:	4b20      	ldr	r3, [pc, #128]	@ (80086a4 <HAL_RCC_ClockConfig+0x260>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d1ed      	bne.n	800860c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800863c:	4b1a      	ldr	r3, [pc, #104]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	4917      	ldr	r1, [pc, #92]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0308 	and.w	r3, r3, #8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800865a:	4b13      	ldr	r3, [pc, #76]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	490f      	ldr	r1, [pc, #60]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800866a:	4313      	orrs	r3, r2
 800866c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800866e:	f000 f825 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	091b      	lsrs	r3, r3, #4
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	490c      	ldr	r1, [pc, #48]	@ (80086b0 <HAL_RCC_ClockConfig+0x26c>)
 8008680:	5ccb      	ldrb	r3, [r1, r3]
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	4a0a      	ldr	r2, [pc, #40]	@ (80086b4 <HAL_RCC_ClockConfig+0x270>)
 800868c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800868e:	4b0a      	ldr	r3, [pc, #40]	@ (80086b8 <HAL_RCC_ClockConfig+0x274>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fa fa6e 	bl	8002b74 <HAL_InitTick>
 8008698:	4603      	mov	r3, r0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40022000 	.word	0x40022000
 80086a8:	40021000 	.word	0x40021000
 80086ac:	04c4b400 	.word	0x04c4b400
 80086b0:	08015174 	.word	0x08015174
 80086b4:	20000008 	.word	0x20000008
 80086b8:	2000000c 	.word	0x2000000c

080086bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80086c2:	4b2c      	ldr	r3, [pc, #176]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d102      	bne.n	80086d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80086ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e047      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086d4:	4b27      	ldr	r3, [pc, #156]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 030c 	and.w	r3, r3, #12
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d102      	bne.n	80086e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086e0:	4b26      	ldr	r3, [pc, #152]	@ (800877c <HAL_RCC_GetSysClockFreq+0xc0>)
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	e03e      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80086e6:	4b23      	ldr	r3, [pc, #140]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d136      	bne.n	8008760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086f2:	4b20      	ldr	r3, [pc, #128]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	091b      	lsrs	r3, r3, #4
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	3301      	adds	r3, #1
 8008708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d10c      	bne.n	800872a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008710:	4a1a      	ldr	r2, [pc, #104]	@ (800877c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	fbb2 f3f3 	udiv	r3, r2, r3
 8008718:	4a16      	ldr	r2, [pc, #88]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800871a:	68d2      	ldr	r2, [r2, #12]
 800871c:	0a12      	lsrs	r2, r2, #8
 800871e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	617b      	str	r3, [r7, #20]
      break;
 8008728:	e00c      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800872a:	4a13      	ldr	r2, [pc, #76]	@ (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008732:	4a10      	ldr	r2, [pc, #64]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008734:	68d2      	ldr	r2, [r2, #12]
 8008736:	0a12      	lsrs	r2, r2, #8
 8008738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	617b      	str	r3, [r7, #20]
      break;
 8008742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	0e5b      	lsrs	r3, r3, #25
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	3301      	adds	r3, #1
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	fbb2 f3f3 	udiv	r3, r2, r3
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	e001      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008764:	693b      	ldr	r3, [r7, #16]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40021000 	.word	0x40021000
 8008778:	00f42400 	.word	0x00f42400
 800877c:	007a1200 	.word	0x007a1200

08008780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008784:	4b03      	ldr	r3, [pc, #12]	@ (8008794 <HAL_RCC_GetHCLKFreq+0x14>)
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000008 	.word	0x20000008

08008798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800879c:	f7ff fff0 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 80087a0:	4602      	mov	r2, r0
 80087a2:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	4904      	ldr	r1, [pc, #16]	@ (80087c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087ae:	5ccb      	ldrb	r3, [r1, r3]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40021000 	.word	0x40021000
 80087c0:	08015184 	.word	0x08015184

080087c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80087c8:	f7ff ffda 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 80087cc:	4602      	mov	r2, r0
 80087ce:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	0adb      	lsrs	r3, r3, #11
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	4904      	ldr	r1, [pc, #16]	@ (80087ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80087da:	5ccb      	ldrb	r3, [r1, r3]
 80087dc:	f003 031f 	and.w	r3, r3, #31
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	40021000 	.word	0x40021000
 80087ec:	08015184 	.word	0x08015184

080087f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	220f      	movs	r2, #15
 80087fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008800:	4b12      	ldr	r3, [pc, #72]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0203 	and.w	r2, r3, #3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800880c:	4b0f      	ldr	r3, [pc, #60]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008818:	4b0c      	ldr	r3, [pc, #48]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008824:	4b09      	ldr	r3, [pc, #36]	@ (800884c <HAL_RCC_GetClockConfig+0x5c>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008832:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <HAL_RCC_GetClockConfig+0x60>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	601a      	str	r2, [r3, #0]
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40021000 	.word	0x40021000
 8008850:	40022000 	.word	0x40022000

08008854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800885a:	4b1e      	ldr	r3, [pc, #120]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	091b      	lsrs	r3, r3, #4
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d10c      	bne.n	8008892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008878:	4a17      	ldr	r2, [pc, #92]	@ (80088d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008880:	4a14      	ldr	r2, [pc, #80]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008882:	68d2      	ldr	r2, [r2, #12]
 8008884:	0a12      	lsrs	r2, r2, #8
 8008886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	617b      	str	r3, [r7, #20]
    break;
 8008890:	e00c      	b.n	80088ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008892:	4a12      	ldr	r2, [pc, #72]	@ (80088dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	4a0e      	ldr	r2, [pc, #56]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800889c:	68d2      	ldr	r2, [r2, #12]
 800889e:	0a12      	lsrs	r2, r2, #8
 80088a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]
    break;
 80088aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088ac:	4b09      	ldr	r3, [pc, #36]	@ (80088d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	0e5b      	lsrs	r3, r3, #25
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	3301      	adds	r3, #1
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80088c6:	687b      	ldr	r3, [r7, #4]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	40021000 	.word	0x40021000
 80088d8:	007a1200 	.word	0x007a1200
 80088dc:	00f42400 	.word	0x00f42400

080088e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088e8:	2300      	movs	r3, #0
 80088ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088ec:	2300      	movs	r3, #0
 80088ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8098 	beq.w	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008902:	4b43      	ldr	r3, [pc, #268]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10d      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800890e:	4b40      	ldr	r3, [pc, #256]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008912:	4a3f      	ldr	r2, [pc, #252]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008918:	6593      	str	r3, [r2, #88]	@ 0x58
 800891a:	4b3d      	ldr	r3, [pc, #244]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800891c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800891e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008922:	60bb      	str	r3, [r7, #8]
 8008924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008926:	2301      	movs	r3, #1
 8008928:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800892a:	4b3a      	ldr	r3, [pc, #232]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a39      	ldr	r2, [pc, #228]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008936:	f7fa fb53 	bl	8002fe0 <HAL_GetTick>
 800893a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893c:	e009      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800893e:	f7fa fb4f 	bl	8002fe0 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d902      	bls.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	74fb      	strb	r3, [r7, #19]
        break;
 8008950:	e005      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008952:	4b30      	ldr	r3, [pc, #192]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0ef      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800895e:	7cfb      	ldrb	r3, [r7, #19]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d159      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008964:	4b2a      	ldr	r3, [pc, #168]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01e      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	429a      	cmp	r2, r3
 800897e:	d019      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008980:	4b23      	ldr	r3, [pc, #140]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800898a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800898c:	4b20      	ldr	r3, [pc, #128]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008992:	4a1f      	ldr	r2, [pc, #124]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800899c:	4b1c      	ldr	r3, [pc, #112]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800899e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089ac:	4a18      	ldr	r2, [pc, #96]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d016      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089be:	f7fa fb0f 	bl	8002fe0 <HAL_GetTick>
 80089c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089c4:	e00b      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c6:	f7fa fb0b 	bl	8002fe0 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d902      	bls.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	74fb      	strb	r3, [r7, #19]
            break;
 80089dc:	e006      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089de:	4b0c      	ldr	r3, [pc, #48]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0ec      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80089ec:	7cfb      	ldrb	r3, [r7, #19]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f2:	4b07      	ldr	r3, [pc, #28]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a00:	4903      	ldr	r1, [pc, #12]	@ (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a08:	e008      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a0a:	7cfb      	ldrb	r3, [r7, #19]
 8008a0c:	74bb      	strb	r3, [r7, #18]
 8008a0e:	e005      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a10:	40021000 	.word	0x40021000
 8008a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a18:	7cfb      	ldrb	r3, [r7, #19]
 8008a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a1c:	7c7b      	ldrb	r3, [r7, #17]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d105      	bne.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a22:	4ba6      	ldr	r3, [pc, #664]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	4aa5      	ldr	r2, [pc, #660]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a40:	f023 0203 	bic.w	r2, r3, #3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	499c      	ldr	r1, [pc, #624]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a5c:	4b97      	ldr	r3, [pc, #604]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a62:	f023 020c 	bic.w	r2, r3, #12
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	4994      	ldr	r1, [pc, #592]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	498b      	ldr	r1, [pc, #556]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008aa0:	4b86      	ldr	r3, [pc, #536]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	4983      	ldr	r1, [pc, #524]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0320 	and.w	r3, r3, #32
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	497a      	ldr	r1, [pc, #488]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ae4:	4b75      	ldr	r3, [pc, #468]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	4972      	ldr	r1, [pc, #456]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b06:	4b6d      	ldr	r3, [pc, #436]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	4969      	ldr	r1, [pc, #420]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b28:	4b64      	ldr	r3, [pc, #400]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	4961      	ldr	r1, [pc, #388]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	4958      	ldr	r1, [pc, #352]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d015      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b6c:	4b53      	ldr	r3, [pc, #332]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7a:	4950      	ldr	r1, [pc, #320]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b8a:	d105      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	4a4a      	ldr	r2, [pc, #296]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d015      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ba4:	4b45      	ldr	r3, [pc, #276]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008baa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb2:	4942      	ldr	r1, [pc, #264]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bc2:	d105      	bne.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d015      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bdc:	4b37      	ldr	r3, [pc, #220]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bea:	4934      	ldr	r1, [pc, #208]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bfa:	d105      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	4a2e      	ldr	r2, [pc, #184]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d015      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c14:	4b29      	ldr	r3, [pc, #164]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c22:	4926      	ldr	r1, [pc, #152]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c32:	d105      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c34:	4b21      	ldr	r3, [pc, #132]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a20      	ldr	r2, [pc, #128]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d015      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5a:	4918      	ldr	r1, [pc, #96]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c6a:	d105      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c6c:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	4a12      	ldr	r2, [pc, #72]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d015      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c84:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c92:	490a      	ldr	r1, [pc, #40]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ca2:	d105      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	4a04      	ldr	r2, [pc, #16]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	40021000 	.word	0x40021000

08008cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e049      	b.n	8008d66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7f9 fda0 	bl	800282c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f001 f8fe 	bl	8009f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d001      	beq.n	8008d88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e042      	b.n	8008e0e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a21      	ldr	r2, [pc, #132]	@ (8008e1c <HAL_TIM_Base_Start+0xac>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d018      	beq.n	8008dcc <HAL_TIM_Base_Start+0x5c>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da2:	d013      	beq.n	8008dcc <HAL_TIM_Base_Start+0x5c>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e20 <HAL_TIM_Base_Start+0xb0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00e      	beq.n	8008dcc <HAL_TIM_Base_Start+0x5c>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e24 <HAL_TIM_Base_Start+0xb4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d009      	beq.n	8008dcc <HAL_TIM_Base_Start+0x5c>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e28 <HAL_TIM_Base_Start+0xb8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d004      	beq.n	8008dcc <HAL_TIM_Base_Start+0x5c>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a19      	ldr	r2, [pc, #100]	@ (8008e2c <HAL_TIM_Base_Start+0xbc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d115      	bne.n	8008df8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	4b17      	ldr	r3, [pc, #92]	@ (8008e30 <HAL_TIM_Base_Start+0xc0>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b06      	cmp	r3, #6
 8008ddc:	d015      	beq.n	8008e0a <HAL_TIM_Base_Start+0x9a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de4:	d011      	beq.n	8008e0a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0201 	orr.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df6:	e008      	b.n	8008e0a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	e000      	b.n	8008e0c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	40000400 	.word	0x40000400
 8008e24:	40000800 	.word	0x40000800
 8008e28:	40013400 	.word	0x40013400
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	00010007 	.word	0x00010007

08008e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d001      	beq.n	8008e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e04a      	b.n	8008ee2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a21      	ldr	r2, [pc, #132]	@ (8008ef0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d018      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e76:	d013      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00e      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d009      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1a      	ldr	r2, [pc, #104]	@ (8008efc <HAL_TIM_Base_Start_IT+0xc8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d004      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a19      	ldr	r2, [pc, #100]	@ (8008f00 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d115      	bne.n	8008ecc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	4b17      	ldr	r3, [pc, #92]	@ (8008f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b06      	cmp	r3, #6
 8008eb0:	d015      	beq.n	8008ede <HAL_TIM_Base_Start_IT+0xaa>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb8:	d011      	beq.n	8008ede <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0201 	orr.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eca:	e008      	b.n	8008ede <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0201 	orr.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e000      	b.n	8008ee0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	40012c00 	.word	0x40012c00
 8008ef4:	40000400 	.word	0x40000400
 8008ef8:	40000800 	.word	0x40000800
 8008efc:	40013400 	.word	0x40013400
 8008f00:	40014000 	.word	0x40014000
 8008f04:	00010007 	.word	0x00010007

08008f08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e049      	b.n	8008fae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f841 	bl	8008fb6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	f000 ffda 	bl	8009f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
	...

08008fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d109      	bne.n	8008ff0 <HAL_TIM_PWM_Start+0x24>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	bf14      	ite	ne
 8008fe8:	2301      	movne	r3, #1
 8008fea:	2300      	moveq	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	e03c      	b.n	800906a <HAL_TIM_PWM_Start+0x9e>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d109      	bne.n	800900a <HAL_TIM_PWM_Start+0x3e>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	bf14      	ite	ne
 8009002:	2301      	movne	r3, #1
 8009004:	2300      	moveq	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	e02f      	b.n	800906a <HAL_TIM_PWM_Start+0x9e>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b08      	cmp	r3, #8
 800900e:	d109      	bne.n	8009024 <HAL_TIM_PWM_Start+0x58>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	e022      	b.n	800906a <HAL_TIM_PWM_Start+0x9e>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b0c      	cmp	r3, #12
 8009028:	d109      	bne.n	800903e <HAL_TIM_PWM_Start+0x72>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b01      	cmp	r3, #1
 8009034:	bf14      	ite	ne
 8009036:	2301      	movne	r3, #1
 8009038:	2300      	moveq	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	e015      	b.n	800906a <HAL_TIM_PWM_Start+0x9e>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b10      	cmp	r3, #16
 8009042:	d109      	bne.n	8009058 <HAL_TIM_PWM_Start+0x8c>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	bf14      	ite	ne
 8009050:	2301      	movne	r3, #1
 8009052:	2300      	moveq	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	e008      	b.n	800906a <HAL_TIM_PWM_Start+0x9e>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	bf14      	ite	ne
 8009064:	2301      	movne	r3, #1
 8009066:	2300      	moveq	r3, #0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e097      	b.n	80091a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <HAL_TIM_PWM_Start+0xb6>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009080:	e023      	b.n	80090ca <HAL_TIM_PWM_Start+0xfe>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b04      	cmp	r3, #4
 8009086:	d104      	bne.n	8009092 <HAL_TIM_PWM_Start+0xc6>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009090:	e01b      	b.n	80090ca <HAL_TIM_PWM_Start+0xfe>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d104      	bne.n	80090a2 <HAL_TIM_PWM_Start+0xd6>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090a0:	e013      	b.n	80090ca <HAL_TIM_PWM_Start+0xfe>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b0c      	cmp	r3, #12
 80090a6:	d104      	bne.n	80090b2 <HAL_TIM_PWM_Start+0xe6>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090b0:	e00b      	b.n	80090ca <HAL_TIM_PWM_Start+0xfe>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d104      	bne.n	80090c2 <HAL_TIM_PWM_Start+0xf6>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090c0:	e003      	b.n	80090ca <HAL_TIM_PWM_Start+0xfe>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2201      	movs	r2, #1
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 fc60 	bl	800a998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a33      	ldr	r2, [pc, #204]	@ (80091ac <HAL_TIM_PWM_Start+0x1e0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d013      	beq.n	800910a <HAL_TIM_PWM_Start+0x13e>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a32      	ldr	r2, [pc, #200]	@ (80091b0 <HAL_TIM_PWM_Start+0x1e4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00e      	beq.n	800910a <HAL_TIM_PWM_Start+0x13e>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a30      	ldr	r2, [pc, #192]	@ (80091b4 <HAL_TIM_PWM_Start+0x1e8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d009      	beq.n	800910a <HAL_TIM_PWM_Start+0x13e>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a2f      	ldr	r2, [pc, #188]	@ (80091b8 <HAL_TIM_PWM_Start+0x1ec>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d004      	beq.n	800910a <HAL_TIM_PWM_Start+0x13e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a2d      	ldr	r2, [pc, #180]	@ (80091bc <HAL_TIM_PWM_Start+0x1f0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d101      	bne.n	800910e <HAL_TIM_PWM_Start+0x142>
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <HAL_TIM_PWM_Start+0x144>
 800910e:	2300      	movs	r3, #0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009122:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a20      	ldr	r2, [pc, #128]	@ (80091ac <HAL_TIM_PWM_Start+0x1e0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d018      	beq.n	8009160 <HAL_TIM_PWM_Start+0x194>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009136:	d013      	beq.n	8009160 <HAL_TIM_PWM_Start+0x194>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a20      	ldr	r2, [pc, #128]	@ (80091c0 <HAL_TIM_PWM_Start+0x1f4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00e      	beq.n	8009160 <HAL_TIM_PWM_Start+0x194>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a1f      	ldr	r2, [pc, #124]	@ (80091c4 <HAL_TIM_PWM_Start+0x1f8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d009      	beq.n	8009160 <HAL_TIM_PWM_Start+0x194>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a17      	ldr	r2, [pc, #92]	@ (80091b0 <HAL_TIM_PWM_Start+0x1e4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <HAL_TIM_PWM_Start+0x194>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a16      	ldr	r2, [pc, #88]	@ (80091b4 <HAL_TIM_PWM_Start+0x1e8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d115      	bne.n	800918c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	4b18      	ldr	r3, [pc, #96]	@ (80091c8 <HAL_TIM_PWM_Start+0x1fc>)
 8009168:	4013      	ands	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b06      	cmp	r3, #6
 8009170:	d015      	beq.n	800919e <HAL_TIM_PWM_Start+0x1d2>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009178:	d011      	beq.n	800919e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0201 	orr.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800918a:	e008      	b.n	800919e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e000      	b.n	80091a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800919e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	40012c00 	.word	0x40012c00
 80091b0:	40013400 	.word	0x40013400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400
 80091bc:	40014800 	.word	0x40014800
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	00010007 	.word	0x00010007

080091cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e049      	b.n	8009272 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f841 	bl	800927a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f000 fe78 	bl	8009f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <HAL_TIM_IC_Start_DMA+0x22>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	e023      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x6a>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d104      	bne.n	80092c2 <HAL_TIM_IC_Start_DMA+0x32>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	e01b      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x6a>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d104      	bne.n	80092d2 <HAL_TIM_IC_Start_DMA+0x42>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	e013      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x6a>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b0c      	cmp	r3, #12
 80092d6:	d104      	bne.n	80092e2 <HAL_TIM_IC_Start_DMA+0x52>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	e00b      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x6a>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d104      	bne.n	80092f2 <HAL_TIM_IC_Start_DMA+0x62>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	e003      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x6a>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <HAL_TIM_IC_Start_DMA+0x7c>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009308:	b2db      	uxtb	r3, r3
 800930a:	e013      	b.n	8009334 <HAL_TIM_IC_Start_DMA+0xa4>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d104      	bne.n	800931c <HAL_TIM_IC_Start_DMA+0x8c>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009318:	b2db      	uxtb	r3, r3
 800931a:	e00b      	b.n	8009334 <HAL_TIM_IC_Start_DMA+0xa4>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b08      	cmp	r3, #8
 8009320:	d104      	bne.n	800932c <HAL_TIM_IC_Start_DMA+0x9c>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009328:	b2db      	uxtb	r3, r3
 800932a:	e003      	b.n	8009334 <HAL_TIM_IC_Start_DMA+0xa4>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009332:	b2db      	uxtb	r3, r3
 8009334:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8009336:	7dbb      	ldrb	r3, [r7, #22]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d002      	beq.n	8009342 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800933c:	7d7b      	ldrb	r3, [r7, #21]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d101      	bne.n	8009346 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8009342:	2302      	movs	r3, #2
 8009344:	e152      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8009346:	7dbb      	ldrb	r3, [r7, #22]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d153      	bne.n	80093f4 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800934c:	7d7b      	ldrb	r3, [r7, #21]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d150      	bne.n	80093f4 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <HAL_TIM_IC_Start_DMA+0xce>
 8009358:	887b      	ldrh	r3, [r7, #2]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e144      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d104      	bne.n	8009372 <HAL_TIM_IC_Start_DMA+0xe2>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009370:	e023      	b.n	80093ba <HAL_TIM_IC_Start_DMA+0x12a>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b04      	cmp	r3, #4
 8009376:	d104      	bne.n	8009382 <HAL_TIM_IC_Start_DMA+0xf2>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009380:	e01b      	b.n	80093ba <HAL_TIM_IC_Start_DMA+0x12a>
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d104      	bne.n	8009392 <HAL_TIM_IC_Start_DMA+0x102>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009390:	e013      	b.n	80093ba <HAL_TIM_IC_Start_DMA+0x12a>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b0c      	cmp	r3, #12
 8009396:	d104      	bne.n	80093a2 <HAL_TIM_IC_Start_DMA+0x112>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093a0:	e00b      	b.n	80093ba <HAL_TIM_IC_Start_DMA+0x12a>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d104      	bne.n	80093b2 <HAL_TIM_IC_Start_DMA+0x122>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093b0:	e003      	b.n	80093ba <HAL_TIM_IC_Start_DMA+0x12a>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <HAL_TIM_IC_Start_DMA+0x13a>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80093c8:	e016      	b.n	80093f8 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d104      	bne.n	80093da <HAL_TIM_IC_Start_DMA+0x14a>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 80093d8:	e00e      	b.n	80093f8 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d104      	bne.n	80093ea <HAL_TIM_IC_Start_DMA+0x15a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 80093e8:	e006      	b.n	80093f8 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2202      	movs	r2, #2
 80093ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 80093f2:	e001      	b.n	80093f8 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0f9      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2201      	movs	r2, #1
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fac9 	bl	800a998 <TIM_CCxChannelCmd>

  switch (Channel)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b0c      	cmp	r3, #12
 800940a:	f200 80ad 	bhi.w	8009568 <HAL_TIM_IC_Start_DMA+0x2d8>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <HAL_TIM_IC_Start_DMA+0x184>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009449 	.word	0x08009449
 8009418:	08009569 	.word	0x08009569
 800941c:	08009569 	.word	0x08009569
 8009420:	08009569 	.word	0x08009569
 8009424:	08009491 	.word	0x08009491
 8009428:	08009569 	.word	0x08009569
 800942c:	08009569 	.word	0x08009569
 8009430:	08009569 	.word	0x08009569
 8009434:	080094d9 	.word	0x080094d9
 8009438:	08009569 	.word	0x08009569
 800943c:	08009569 	.word	0x08009569
 8009440:	08009569 	.word	0x08009569
 8009444:	08009521 	.word	0x08009521
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	4a69      	ldr	r2, [pc, #420]	@ (80095f4 <HAL_TIM_IC_Start_DMA+0x364>)
 800944e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009454:	4a68      	ldr	r2, [pc, #416]	@ (80095f8 <HAL_TIM_IC_Start_DMA+0x368>)
 8009456:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	4a67      	ldr	r2, [pc, #412]	@ (80095fc <HAL_TIM_IC_Start_DMA+0x36c>)
 800945e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3334      	adds	r3, #52	@ 0x34
 800946a:	4619      	mov	r1, r3
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	887b      	ldrh	r3, [r7, #2]
 8009470:	f7fc f946 	bl	8005700 <HAL_DMA_Start_IT>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e0b6      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800948c:	60da      	str	r2, [r3, #12]
      break;
 800948e:	e06e      	b.n	800956e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	4a57      	ldr	r2, [pc, #348]	@ (80095f4 <HAL_TIM_IC_Start_DMA+0x364>)
 8009496:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949c:	4a56      	ldr	r2, [pc, #344]	@ (80095f8 <HAL_TIM_IC_Start_DMA+0x368>)
 800949e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	4a55      	ldr	r2, [pc, #340]	@ (80095fc <HAL_TIM_IC_Start_DMA+0x36c>)
 80094a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3338      	adds	r3, #56	@ 0x38
 80094b2:	4619      	mov	r1, r3
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	887b      	ldrh	r3, [r7, #2]
 80094b8:	f7fc f922 	bl	8005700 <HAL_DMA_Start_IT>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e092      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80094d4:	60da      	str	r2, [r3, #12]
      break;
 80094d6:	e04a      	b.n	800956e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	4a45      	ldr	r2, [pc, #276]	@ (80095f4 <HAL_TIM_IC_Start_DMA+0x364>)
 80094de:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	4a44      	ldr	r2, [pc, #272]	@ (80095f8 <HAL_TIM_IC_Start_DMA+0x368>)
 80094e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4a43      	ldr	r2, [pc, #268]	@ (80095fc <HAL_TIM_IC_Start_DMA+0x36c>)
 80094ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	333c      	adds	r3, #60	@ 0x3c
 80094fa:	4619      	mov	r1, r3
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	f7fc f8fe 	bl	8005700 <HAL_DMA_Start_IT>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e06e      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800951c:	60da      	str	r2, [r3, #12]
      break;
 800951e:	e026      	b.n	800956e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009524:	4a33      	ldr	r2, [pc, #204]	@ (80095f4 <HAL_TIM_IC_Start_DMA+0x364>)
 8009526:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800952c:	4a32      	ldr	r2, [pc, #200]	@ (80095f8 <HAL_TIM_IC_Start_DMA+0x368>)
 800952e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009534:	4a31      	ldr	r2, [pc, #196]	@ (80095fc <HAL_TIM_IC_Start_DMA+0x36c>)
 8009536:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3340      	adds	r3, #64	@ 0x40
 8009542:	4619      	mov	r1, r3
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	887b      	ldrh	r3, [r7, #2]
 8009548:	f7fc f8da 	bl	8005700 <HAL_DMA_Start_IT>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e04a      	b.n	80095ec <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009564:	60da      	str	r2, [r3, #12]
      break;
 8009566:	e002      	b.n	800956e <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	75fb      	strb	r3, [r7, #23]
      break;
 800956c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a23      	ldr	r2, [pc, #140]	@ (8009600 <HAL_TIM_IC_Start_DMA+0x370>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d018      	beq.n	80095aa <HAL_TIM_IC_Start_DMA+0x31a>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009580:	d013      	beq.n	80095aa <HAL_TIM_IC_Start_DMA+0x31a>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1f      	ldr	r2, [pc, #124]	@ (8009604 <HAL_TIM_IC_Start_DMA+0x374>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d00e      	beq.n	80095aa <HAL_TIM_IC_Start_DMA+0x31a>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a1d      	ldr	r2, [pc, #116]	@ (8009608 <HAL_TIM_IC_Start_DMA+0x378>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d009      	beq.n	80095aa <HAL_TIM_IC_Start_DMA+0x31a>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a1c      	ldr	r2, [pc, #112]	@ (800960c <HAL_TIM_IC_Start_DMA+0x37c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d004      	beq.n	80095aa <HAL_TIM_IC_Start_DMA+0x31a>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009610 <HAL_TIM_IC_Start_DMA+0x380>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d115      	bne.n	80095d6 <HAL_TIM_IC_Start_DMA+0x346>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	4b18      	ldr	r3, [pc, #96]	@ (8009614 <HAL_TIM_IC_Start_DMA+0x384>)
 80095b2:	4013      	ands	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2b06      	cmp	r3, #6
 80095ba:	d015      	beq.n	80095e8 <HAL_TIM_IC_Start_DMA+0x358>
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095c2:	d011      	beq.n	80095e8 <HAL_TIM_IC_Start_DMA+0x358>
    {
      __HAL_TIM_ENABLE(htim);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0201 	orr.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d4:	e008      	b.n	80095e8 <HAL_TIM_IC_Start_DMA+0x358>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f042 0201 	orr.w	r2, r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e000      	b.n	80095ea <HAL_TIM_IC_Start_DMA+0x35a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e8:	bf00      	nop
  }

  /* Return function status */
  return status;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	08009dcf 	.word	0x08009dcf
 80095f8:	08009e97 	.word	0x08009e97
 80095fc:	08009d3d 	.word	0x08009d3d
 8009600:	40012c00 	.word	0x40012c00
 8009604:	40000400 	.word	0x40000400
 8009608:	40000800 	.word	0x40000800
 800960c:	40013400 	.word	0x40013400
 8009610:	40014000 	.word	0x40014000
 8009614:	00010007 	.word	0x00010007

08009618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d020      	beq.n	800967c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01b      	beq.n	800967c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f06f 0202 	mvn.w	r2, #2
 800964c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7f7 fdec 	bl	8001240 <HAL_TIM_IC_CaptureCallback>
 8009668:	e005      	b.n	8009676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fb34 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb45 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d020      	beq.n	80096c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01b      	beq.n	80096c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f06f 0204 	mvn.w	r2, #4
 8009698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2202      	movs	r2, #2
 800969e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f7 fdc6 	bl	8001240 <HAL_TIM_IC_CaptureCallback>
 80096b4:	e005      	b.n	80096c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fb0e 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fb1f 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d020      	beq.n	8009714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01b      	beq.n	8009714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f06f 0208 	mvn.w	r2, #8
 80096e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2204      	movs	r2, #4
 80096ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7f7 fda0 	bl	8001240 <HAL_TIM_IC_CaptureCallback>
 8009700:	e005      	b.n	800970e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fae8 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 faf9 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b00      	cmp	r3, #0
 800971c:	d020      	beq.n	8009760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f003 0310 	and.w	r3, r3, #16
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01b      	beq.n	8009760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f06f 0210 	mvn.w	r2, #16
 8009730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2208      	movs	r2, #8
 8009736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7f7 fd7a 	bl	8001240 <HAL_TIM_IC_CaptureCallback>
 800974c:	e005      	b.n	800975a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fac2 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fad3 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	d007      	beq.n	8009784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0201 	mvn.w	r2, #1
 800977c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7f8 fe5e 	bl	8002440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00c      	beq.n	80097b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80097aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 f9a5 	bl	800aafc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00c      	beq.n	80097d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80097ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 f99d 	bl	800ab10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80097f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa8d 	bl	8009d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00c      	beq.n	800981e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b00      	cmp	r3, #0
 800980c:	d007      	beq.n	800981e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f06f 0220 	mvn.w	r2, #32
 8009816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 f965 	bl	800aae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00c      	beq.n	8009842 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800983a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 f971 	bl	800ab24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00c      	beq.n	8009866 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d007      	beq.n	8009866 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800985e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 f969 	bl	800ab38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00c      	beq.n	800988a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d007      	beq.n	800988a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 f961 	bl	800ab4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00c      	beq.n	80098ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80098a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 f959 	bl	800ab60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d101      	bne.n	80098d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e066      	b.n	80099a4 <HAL_TIM_OC_ConfigChannel+0xec>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b14      	cmp	r3, #20
 80098e2:	d857      	bhi.n	8009994 <HAL_TIM_OC_ConfigChannel+0xdc>
 80098e4:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80098e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ea:	bf00      	nop
 80098ec:	08009941 	.word	0x08009941
 80098f0:	08009995 	.word	0x08009995
 80098f4:	08009995 	.word	0x08009995
 80098f8:	08009995 	.word	0x08009995
 80098fc:	0800994f 	.word	0x0800994f
 8009900:	08009995 	.word	0x08009995
 8009904:	08009995 	.word	0x08009995
 8009908:	08009995 	.word	0x08009995
 800990c:	0800995d 	.word	0x0800995d
 8009910:	08009995 	.word	0x08009995
 8009914:	08009995 	.word	0x08009995
 8009918:	08009995 	.word	0x08009995
 800991c:	0800996b 	.word	0x0800996b
 8009920:	08009995 	.word	0x08009995
 8009924:	08009995 	.word	0x08009995
 8009928:	08009995 	.word	0x08009995
 800992c:	08009979 	.word	0x08009979
 8009930:	08009995 	.word	0x08009995
 8009934:	08009995 	.word	0x08009995
 8009938:	08009995 	.word	0x08009995
 800993c:	08009987 	.word	0x08009987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68b9      	ldr	r1, [r7, #8]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fb76 	bl	800a038 <TIM_OC1_SetConfig>
      break;
 800994c:	e025      	b.n	800999a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fbff 	bl	800a158 <TIM_OC2_SetConfig>
      break;
 800995a:	e01e      	b.n	800999a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fc82 	bl	800a26c <TIM_OC3_SetConfig>
      break;
 8009968:	e017      	b.n	800999a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fd03 	bl	800a37c <TIM_OC4_SetConfig>
      break;
 8009976:	e010      	b.n	800999a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fd86 	bl	800a490 <TIM_OC5_SetConfig>
      break;
 8009984:	e009      	b.n	800999a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fde3 	bl	800a558 <TIM_OC6_SetConfig>
      break;
 8009992:	e002      	b.n	800999a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	75fb      	strb	r3, [r7, #23]
      break;
 8009998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d101      	bne.n	80099ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e088      	b.n	8009adc <HAL_TIM_IC_ConfigChannel+0x130>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11b      	bne.n	8009a10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80099e8:	f000 fe1c 	bl	800a624 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699a      	ldr	r2, [r3, #24]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 020c 	bic.w	r2, r2, #12
 80099fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6999      	ldr	r1, [r3, #24]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	619a      	str	r2, [r3, #24]
 8009a0e:	e060      	b.n	8009ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d11c      	bne.n	8009a50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009a26:	f000 fe94 	bl	800a752 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699a      	ldr	r2, [r3, #24]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009a38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6999      	ldr	r1, [r3, #24]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	021a      	lsls	r2, r3, #8
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	619a      	str	r2, [r3, #24]
 8009a4e:	e040      	b.n	8009ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d11b      	bne.n	8009a8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009a66:	f000 fee1 	bl	800a82c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69da      	ldr	r2, [r3, #28]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 020c 	bic.w	r2, r2, #12
 8009a78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69d9      	ldr	r1, [r3, #28]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	61da      	str	r2, [r3, #28]
 8009a8c:	e021      	b.n	8009ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b0c      	cmp	r3, #12
 8009a92:	d11c      	bne.n	8009ace <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009aa4:	f000 fefe 	bl	800a8a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69da      	ldr	r2, [r3, #28]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009ab6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69d9      	ldr	r1, [r3, #28]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	021a      	lsls	r2, r3, #8
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	61da      	str	r2, [r3, #28]
 8009acc:	e001      	b.n	8009ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_TIM_ConfigClockSource+0x1c>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e0de      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x1da>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009b1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a63      	ldr	r2, [pc, #396]	@ (8009cc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	f000 80a9 	beq.w	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b40:	4a61      	ldr	r2, [pc, #388]	@ (8009cc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	f200 80ae 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b48:	4a60      	ldr	r2, [pc, #384]	@ (8009ccc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	f000 80a1 	beq.w	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b50:	4a5e      	ldr	r2, [pc, #376]	@ (8009ccc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f200 80a6 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b58:	4a5d      	ldr	r2, [pc, #372]	@ (8009cd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	f000 8099 	beq.w	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b60:	4a5b      	ldr	r2, [pc, #364]	@ (8009cd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	f200 809e 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b68:	4a5a      	ldr	r2, [pc, #360]	@ (8009cd4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	f000 8091 	beq.w	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b70:	4a58      	ldr	r2, [pc, #352]	@ (8009cd4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	f200 8096 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b7c:	f000 8089 	beq.w	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b84:	f200 808e 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b8c:	d03e      	beq.n	8009c0c <HAL_TIM_ConfigClockSource+0x128>
 8009b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b92:	f200 8087 	bhi.w	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b9a:	f000 8086 	beq.w	8009caa <HAL_TIM_ConfigClockSource+0x1c6>
 8009b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ba2:	d87f      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ba4:	2b70      	cmp	r3, #112	@ 0x70
 8009ba6:	d01a      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0xfa>
 8009ba8:	2b70      	cmp	r3, #112	@ 0x70
 8009baa:	d87b      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bac:	2b60      	cmp	r3, #96	@ 0x60
 8009bae:	d050      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x16e>
 8009bb0:	2b60      	cmp	r3, #96	@ 0x60
 8009bb2:	d877      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bb4:	2b50      	cmp	r3, #80	@ 0x50
 8009bb6:	d03c      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x14e>
 8009bb8:	2b50      	cmp	r3, #80	@ 0x50
 8009bba:	d873      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bbc:	2b40      	cmp	r3, #64	@ 0x40
 8009bbe:	d058      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x18e>
 8009bc0:	2b40      	cmp	r3, #64	@ 0x40
 8009bc2:	d86f      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bc4:	2b30      	cmp	r3, #48	@ 0x30
 8009bc6:	d064      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bc8:	2b30      	cmp	r3, #48	@ 0x30
 8009bca:	d86b      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d060      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	d867      	bhi.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d05c      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d05a      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bdc:	e062      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bee:	f000 feb3 	bl	800a958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	609a      	str	r2, [r3, #8]
      break;
 8009c0a:	e04f      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c1c:	f000 fe9c 	bl	800a958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c2e:	609a      	str	r2, [r3, #8]
      break;
 8009c30:	e03c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f000 fd58 	bl	800a6f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2150      	movs	r1, #80	@ 0x50
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fe67 	bl	800a91e <TIM_ITRx_SetConfig>
      break;
 8009c50:	e02c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f000 fdb4 	bl	800a7cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2160      	movs	r1, #96	@ 0x60
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fe57 	bl	800a91e <TIM_ITRx_SetConfig>
      break;
 8009c70:	e01c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f000 fd38 	bl	800a6f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2140      	movs	r1, #64	@ 0x40
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fe47 	bl	800a91e <TIM_ITRx_SetConfig>
      break;
 8009c90:	e00c      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f000 fe3e 	bl	800a91e <TIM_ITRx_SetConfig>
      break;
 8009ca2:	e003      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca8:	e000      	b.n	8009cac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	00100070 	.word	0x00100070
 8009ccc:	00100040 	.word	0x00100040
 8009cd0:	00100030 	.word	0x00100030
 8009cd4:	00100020 	.word	0x00100020

08009cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d48:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d107      	bne.n	8009d64 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d62:	e02a      	b.n	8009dba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d107      	bne.n	8009d7e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2202      	movs	r2, #2
 8009d72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d7c:	e01d      	b.n	8009dba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d107      	bne.n	8009d98 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d96:	e010      	b.n	8009dba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d107      	bne.n	8009db2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2208      	movs	r2, #8
 8009da6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009db0:	e003      	b.n	8009dba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff ffb4 	bl	8009d28 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	771a      	strb	r2, [r3, #28]
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dda:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d10f      	bne.n	8009e06 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d146      	bne.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e04:	e03d      	b.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d10f      	bne.n	8009e30 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2202      	movs	r2, #2
 8009e14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d131      	bne.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e2e:	e028      	b.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d10f      	bne.n	8009e5a <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2204      	movs	r2, #4
 8009e3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11c      	bne.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e58:	e013      	b.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d10e      	bne.n	8009e82 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2208      	movs	r2, #8
 8009e68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d107      	bne.n	8009e82 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7f7 f9dc 	bl	8001240 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	771a      	strb	r2, [r3, #28]
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d103      	bne.n	8009eb6 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	771a      	strb	r2, [r3, #28]
 8009eb4:	e019      	b.n	8009eea <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d103      	bne.n	8009ec8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	771a      	strb	r2, [r3, #28]
 8009ec6:	e010      	b.n	8009eea <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d103      	bne.n	8009eda <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2204      	movs	r2, #4
 8009ed6:	771a      	strb	r2, [r3, #28]
 8009ed8:	e007      	b.n	8009eea <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d102      	bne.n	8009eea <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2208      	movs	r2, #8
 8009ee8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fefe 	bl	8009cec <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	771a      	strb	r2, [r3, #28]
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a42      	ldr	r2, [pc, #264]	@ (800a01c <TIM_Base_SetConfig+0x11c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00f      	beq.n	8009f38 <TIM_Base_SetConfig+0x38>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f1e:	d00b      	beq.n	8009f38 <TIM_Base_SetConfig+0x38>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a3f      	ldr	r2, [pc, #252]	@ (800a020 <TIM_Base_SetConfig+0x120>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d007      	beq.n	8009f38 <TIM_Base_SetConfig+0x38>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a3e      	ldr	r2, [pc, #248]	@ (800a024 <TIM_Base_SetConfig+0x124>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d003      	beq.n	8009f38 <TIM_Base_SetConfig+0x38>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a3d      	ldr	r2, [pc, #244]	@ (800a028 <TIM_Base_SetConfig+0x128>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d108      	bne.n	8009f4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a33      	ldr	r2, [pc, #204]	@ (800a01c <TIM_Base_SetConfig+0x11c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d01b      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f58:	d017      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a30      	ldr	r2, [pc, #192]	@ (800a020 <TIM_Base_SetConfig+0x120>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d013      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a2f      	ldr	r2, [pc, #188]	@ (800a024 <TIM_Base_SetConfig+0x124>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00f      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a2e      	ldr	r2, [pc, #184]	@ (800a028 <TIM_Base_SetConfig+0x128>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00b      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a2d      	ldr	r2, [pc, #180]	@ (800a02c <TIM_Base_SetConfig+0x12c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d007      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a2c      	ldr	r2, [pc, #176]	@ (800a030 <TIM_Base_SetConfig+0x130>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d003      	beq.n	8009f8a <TIM_Base_SetConfig+0x8a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a2b      	ldr	r2, [pc, #172]	@ (800a034 <TIM_Base_SetConfig+0x134>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d108      	bne.n	8009f9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <TIM_Base_SetConfig+0x11c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d00f      	beq.n	8009fe8 <TIM_Base_SetConfig+0xe8>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a17      	ldr	r2, [pc, #92]	@ (800a028 <TIM_Base_SetConfig+0x128>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d00b      	beq.n	8009fe8 <TIM_Base_SetConfig+0xe8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <TIM_Base_SetConfig+0x12c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d007      	beq.n	8009fe8 <TIM_Base_SetConfig+0xe8>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a15      	ldr	r2, [pc, #84]	@ (800a030 <TIM_Base_SetConfig+0x130>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d003      	beq.n	8009fe8 <TIM_Base_SetConfig+0xe8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a14      	ldr	r2, [pc, #80]	@ (800a034 <TIM_Base_SetConfig+0x134>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d103      	bne.n	8009ff0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d105      	bne.n	800a00e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	611a      	str	r2, [r3, #16]
  }
}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	40012c00 	.word	0x40012c00
 800a020:	40000400 	.word	0x40000400
 800a024:	40000800 	.word	0x40000800
 800a028:	40013400 	.word	0x40013400
 800a02c:	40014000 	.word	0x40014000
 800a030:	40014400 	.word	0x40014400
 800a034:	40014800 	.word	0x40014800

0800a038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	f023 0201 	bic.w	r2, r3, #1
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0303 	bic.w	r3, r3, #3
 800a072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f023 0302 	bic.w	r3, r3, #2
 800a084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a2c      	ldr	r2, [pc, #176]	@ (800a144 <TIM_OC1_SetConfig+0x10c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d00f      	beq.n	800a0b8 <TIM_OC1_SetConfig+0x80>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a2b      	ldr	r2, [pc, #172]	@ (800a148 <TIM_OC1_SetConfig+0x110>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00b      	beq.n	800a0b8 <TIM_OC1_SetConfig+0x80>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a14c <TIM_OC1_SetConfig+0x114>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d007      	beq.n	800a0b8 <TIM_OC1_SetConfig+0x80>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a29      	ldr	r2, [pc, #164]	@ (800a150 <TIM_OC1_SetConfig+0x118>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d003      	beq.n	800a0b8 <TIM_OC1_SetConfig+0x80>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a28      	ldr	r2, [pc, #160]	@ (800a154 <TIM_OC1_SetConfig+0x11c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d10c      	bne.n	800a0d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f023 0308 	bic.w	r3, r3, #8
 800a0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f023 0304 	bic.w	r3, r3, #4
 800a0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a144 <TIM_OC1_SetConfig+0x10c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00f      	beq.n	800a0fa <TIM_OC1_SetConfig+0xc2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a148 <TIM_OC1_SetConfig+0x110>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00b      	beq.n	800a0fa <TIM_OC1_SetConfig+0xc2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a19      	ldr	r2, [pc, #100]	@ (800a14c <TIM_OC1_SetConfig+0x114>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d007      	beq.n	800a0fa <TIM_OC1_SetConfig+0xc2>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a18      	ldr	r2, [pc, #96]	@ (800a150 <TIM_OC1_SetConfig+0x118>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d003      	beq.n	800a0fa <TIM_OC1_SetConfig+0xc2>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a17      	ldr	r2, [pc, #92]	@ (800a154 <TIM_OC1_SetConfig+0x11c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d111      	bne.n	800a11e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	4313      	orrs	r3, r2
 800a112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	621a      	str	r2, [r3, #32]
}
 800a138:	bf00      	nop
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	40012c00 	.word	0x40012c00
 800a148:	40013400 	.word	0x40013400
 800a14c:	40014000 	.word	0x40014000
 800a150:	40014400 	.word	0x40014400
 800a154:	40014800 	.word	0x40014800

0800a158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	f023 0210 	bic.w	r2, r3, #16
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	021b      	lsls	r3, r3, #8
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f023 0320 	bic.w	r3, r3, #32
 800a1a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a28      	ldr	r2, [pc, #160]	@ (800a258 <TIM_OC2_SetConfig+0x100>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_OC2_SetConfig+0x6c>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a27      	ldr	r2, [pc, #156]	@ (800a25c <TIM_OC2_SetConfig+0x104>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d10d      	bne.n	800a1e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <TIM_OC2_SetConfig+0x100>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00f      	beq.n	800a208 <TIM_OC2_SetConfig+0xb0>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a25c <TIM_OC2_SetConfig+0x104>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00b      	beq.n	800a208 <TIM_OC2_SetConfig+0xb0>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a1b      	ldr	r2, [pc, #108]	@ (800a260 <TIM_OC2_SetConfig+0x108>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d007      	beq.n	800a208 <TIM_OC2_SetConfig+0xb0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a264 <TIM_OC2_SetConfig+0x10c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d003      	beq.n	800a208 <TIM_OC2_SetConfig+0xb0>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a19      	ldr	r2, [pc, #100]	@ (800a268 <TIM_OC2_SetConfig+0x110>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d113      	bne.n	800a230 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a20e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	621a      	str	r2, [r3, #32]
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40012c00 	.word	0x40012c00
 800a25c:	40013400 	.word	0x40013400
 800a260:	40014000 	.word	0x40014000
 800a264:	40014400 	.word	0x40014400
 800a268:	40014800 	.word	0x40014800

0800a26c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a29a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 0303 	bic.w	r3, r3, #3
 800a2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a27      	ldr	r2, [pc, #156]	@ (800a368 <TIM_OC3_SetConfig+0xfc>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <TIM_OC3_SetConfig+0x6a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a26      	ldr	r2, [pc, #152]	@ (800a36c <TIM_OC3_SetConfig+0x100>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d10d      	bne.n	800a2f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	021b      	lsls	r3, r3, #8
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a368 <TIM_OC3_SetConfig+0xfc>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d00f      	beq.n	800a31a <TIM_OC3_SetConfig+0xae>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a36c <TIM_OC3_SetConfig+0x100>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00b      	beq.n	800a31a <TIM_OC3_SetConfig+0xae>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a1a      	ldr	r2, [pc, #104]	@ (800a370 <TIM_OC3_SetConfig+0x104>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d007      	beq.n	800a31a <TIM_OC3_SetConfig+0xae>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a19      	ldr	r2, [pc, #100]	@ (800a374 <TIM_OC3_SetConfig+0x108>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d003      	beq.n	800a31a <TIM_OC3_SetConfig+0xae>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a18      	ldr	r2, [pc, #96]	@ (800a378 <TIM_OC3_SetConfig+0x10c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d113      	bne.n	800a342 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	011b      	lsls	r3, r3, #4
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	4313      	orrs	r3, r2
 800a340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	621a      	str	r2, [r3, #32]
}
 800a35c:	bf00      	nop
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40012c00 	.word	0x40012c00
 800a36c:	40013400 	.word	0x40013400
 800a370:	40014000 	.word	0x40014000
 800a374:	40014400 	.word	0x40014400
 800a378:	40014800 	.word	0x40014800

0800a37c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	031b      	lsls	r3, r3, #12
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a28      	ldr	r2, [pc, #160]	@ (800a47c <TIM_OC4_SetConfig+0x100>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_OC4_SetConfig+0x6c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a27      	ldr	r2, [pc, #156]	@ (800a480 <TIM_OC4_SetConfig+0x104>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d10d      	bne.n	800a404 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	031b      	lsls	r3, r3, #12
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a1d      	ldr	r2, [pc, #116]	@ (800a47c <TIM_OC4_SetConfig+0x100>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d00f      	beq.n	800a42c <TIM_OC4_SetConfig+0xb0>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a1c      	ldr	r2, [pc, #112]	@ (800a480 <TIM_OC4_SetConfig+0x104>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00b      	beq.n	800a42c <TIM_OC4_SetConfig+0xb0>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a1b      	ldr	r2, [pc, #108]	@ (800a484 <TIM_OC4_SetConfig+0x108>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d007      	beq.n	800a42c <TIM_OC4_SetConfig+0xb0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a1a      	ldr	r2, [pc, #104]	@ (800a488 <TIM_OC4_SetConfig+0x10c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_OC4_SetConfig+0xb0>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a19      	ldr	r2, [pc, #100]	@ (800a48c <TIM_OC4_SetConfig+0x110>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d113      	bne.n	800a454 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a432:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a43a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	019b      	lsls	r3, r3, #6
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4313      	orrs	r3, r2
 800a446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	019b      	lsls	r3, r3, #6
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4313      	orrs	r3, r2
 800a452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	621a      	str	r2, [r3, #32]
}
 800a46e:	bf00      	nop
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40012c00 	.word	0x40012c00
 800a480:	40013400 	.word	0x40013400
 800a484:	40014000 	.word	0x40014000
 800a488:	40014400 	.word	0x40014400
 800a48c:	40014800 	.word	0x40014800

0800a490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a4d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a17      	ldr	r2, [pc, #92]	@ (800a544 <TIM_OC5_SetConfig+0xb4>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00f      	beq.n	800a50a <TIM_OC5_SetConfig+0x7a>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a16      	ldr	r2, [pc, #88]	@ (800a548 <TIM_OC5_SetConfig+0xb8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00b      	beq.n	800a50a <TIM_OC5_SetConfig+0x7a>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a15      	ldr	r2, [pc, #84]	@ (800a54c <TIM_OC5_SetConfig+0xbc>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d007      	beq.n	800a50a <TIM_OC5_SetConfig+0x7a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a14      	ldr	r2, [pc, #80]	@ (800a550 <TIM_OC5_SetConfig+0xc0>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d003      	beq.n	800a50a <TIM_OC5_SetConfig+0x7a>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a13      	ldr	r2, [pc, #76]	@ (800a554 <TIM_OC5_SetConfig+0xc4>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d109      	bne.n	800a51e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	021b      	lsls	r3, r3, #8
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	621a      	str	r2, [r3, #32]
}
 800a538:	bf00      	nop
 800a53a:	371c      	adds	r7, #28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	40012c00 	.word	0x40012c00
 800a548:	40013400 	.word	0x40013400
 800a54c:	40014000 	.word	0x40014000
 800a550:	40014400 	.word	0x40014400
 800a554:	40014800 	.word	0x40014800

0800a558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4313      	orrs	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a59e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	051b      	lsls	r3, r3, #20
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a18      	ldr	r2, [pc, #96]	@ (800a610 <TIM_OC6_SetConfig+0xb8>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00f      	beq.n	800a5d4 <TIM_OC6_SetConfig+0x7c>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a17      	ldr	r2, [pc, #92]	@ (800a614 <TIM_OC6_SetConfig+0xbc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d00b      	beq.n	800a5d4 <TIM_OC6_SetConfig+0x7c>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a16      	ldr	r2, [pc, #88]	@ (800a618 <TIM_OC6_SetConfig+0xc0>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d007      	beq.n	800a5d4 <TIM_OC6_SetConfig+0x7c>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a15      	ldr	r2, [pc, #84]	@ (800a61c <TIM_OC6_SetConfig+0xc4>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d003      	beq.n	800a5d4 <TIM_OC6_SetConfig+0x7c>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a14      	ldr	r2, [pc, #80]	@ (800a620 <TIM_OC6_SetConfig+0xc8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d109      	bne.n	800a5e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	029b      	lsls	r3, r3, #10
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	621a      	str	r2, [r3, #32]
}
 800a602:	bf00      	nop
 800a604:	371c      	adds	r7, #28
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	40012c00 	.word	0x40012c00
 800a614:	40013400 	.word	0x40013400
 800a618:	40014000 	.word	0x40014000
 800a61c:	40014400 	.word	0x40014400
 800a620:	40014800 	.word	0x40014800

0800a624 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	f023 0201 	bic.w	r2, r3, #1
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4a24      	ldr	r2, [pc, #144]	@ (800a6e0 <TIM_TI1_SetConfig+0xbc>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d013      	beq.n	800a67a <TIM_TI1_SetConfig+0x56>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a658:	d00f      	beq.n	800a67a <TIM_TI1_SetConfig+0x56>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4a21      	ldr	r2, [pc, #132]	@ (800a6e4 <TIM_TI1_SetConfig+0xc0>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d00b      	beq.n	800a67a <TIM_TI1_SetConfig+0x56>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a20      	ldr	r2, [pc, #128]	@ (800a6e8 <TIM_TI1_SetConfig+0xc4>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d007      	beq.n	800a67a <TIM_TI1_SetConfig+0x56>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4a1f      	ldr	r2, [pc, #124]	@ (800a6ec <TIM_TI1_SetConfig+0xc8>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d003      	beq.n	800a67a <TIM_TI1_SetConfig+0x56>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4a1e      	ldr	r2, [pc, #120]	@ (800a6f0 <TIM_TI1_SetConfig+0xcc>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d101      	bne.n	800a67e <TIM_TI1_SetConfig+0x5a>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <TIM_TI1_SetConfig+0x5c>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f023 0303 	bic.w	r3, r3, #3
 800a68a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4313      	orrs	r3, r2
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	e003      	b.n	800a69e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f043 0301 	orr.w	r3, r3, #1
 800a69c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f023 030a 	bic.w	r3, r3, #10
 800a6b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f003 030a 	and.w	r3, r3, #10
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	621a      	str	r2, [r3, #32]
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40012c00 	.word	0x40012c00
 800a6e4:	40000400 	.word	0x40000400
 800a6e8:	40000800 	.word	0x40000800
 800a6ec:	40013400 	.word	0x40013400
 800a6f0:	40014000 	.word	0x40014000

0800a6f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	f023 0201 	bic.w	r2, r3, #1
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	011b      	lsls	r3, r3, #4
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f023 030a 	bic.w	r3, r3, #10
 800a730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	621a      	str	r2, [r3, #32]
}
 800a746:	bf00      	nop
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a752:	b480      	push	{r7}
 800a754:	b087      	sub	sp, #28
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	f023 0210 	bic.w	r2, r3, #16
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a77e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	4313      	orrs	r3, r2
 800a788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	031b      	lsls	r3, r3, #12
 800a796:	b29b      	uxth	r3, r3
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a7a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	621a      	str	r2, [r3, #32]
}
 800a7c0:	bf00      	nop
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	f023 0210 	bic.w	r2, r3, #16
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a7f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	031b      	lsls	r3, r3, #12
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a808:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4313      	orrs	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	621a      	str	r2, [r3, #32]
}
 800a820:	bf00      	nop
 800a822:	371c      	adds	r7, #28
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f023 0303 	bic.w	r3, r3, #3
 800a858:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4313      	orrs	r3, r2
 800a860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	4313      	orrs	r3, r2
 800a874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a87c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	021b      	lsls	r3, r3, #8
 800a882:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	4313      	orrs	r3, r2
 800a88a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	621a      	str	r2, [r3, #32]
}
 800a898:	bf00      	nop
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	031b      	lsls	r3, r3, #12
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a8f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	031b      	lsls	r3, r3, #12
 800a8fc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	4313      	orrs	r3, r2
 800a904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	621a      	str	r2, [r3, #32]
}
 800a912:	bf00      	nop
 800a914:	371c      	adds	r7, #28
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a91e:	b480      	push	{r7}
 800a920:	b085      	sub	sp, #20
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4313      	orrs	r3, r2
 800a940:	f043 0307 	orr.w	r3, r3, #7
 800a944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	609a      	str	r2, [r3, #8]
}
 800a94c:	bf00      	nop
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	021a      	lsls	r2, r3, #8
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	4313      	orrs	r3, r2
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	4313      	orrs	r3, r2
 800a984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	609a      	str	r2, [r3, #8]
}
 800a98c:	bf00      	nop
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a1a      	ldr	r2, [r3, #32]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	43db      	mvns	r3, r3
 800a9ba:	401a      	ands	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a1a      	ldr	r2, [r3, #32]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d101      	bne.n	800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e065      	b.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a2c      	ldr	r2, [pc, #176]	@ (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d004      	beq.n	800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a2b      	ldr	r2, [pc, #172]	@ (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d108      	bne.n	800aa42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aa36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aa48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a1b      	ldr	r2, [pc, #108]	@ (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d018      	beq.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa72:	d013      	beq.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a18      	ldr	r2, [pc, #96]	@ (800aadc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d00e      	beq.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a17      	ldr	r2, [pc, #92]	@ (800aae0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d009      	beq.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a12      	ldr	r2, [pc, #72]	@ (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d004      	beq.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a13      	ldr	r2, [pc, #76]	@ (800aae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d10c      	bne.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	40012c00 	.word	0x40012c00
 800aad8:	40013400 	.word	0x40013400
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	40014000 	.word	0x40014000

0800aae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e042      	b.n	800ac0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7f7 ff37 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2224      	movs	r2, #36	@ 0x24
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0201 	bic.w	r2, r2, #1
 800abb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fb9e 	bl	800b300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f8cf 	bl	800ad68 <UART_SetConfig>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e01b      	b.n	800ac0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800abe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800abf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0201 	orr.w	r2, r2, #1
 800ac02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fc1d 	bl	800b444 <UART_CheckIdleState>
 800ac0a:	4603      	mov	r3, r0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	@ 0x28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d167      	bne.n	800acfc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <HAL_UART_Transmit_DMA+0x24>
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e060      	b.n	800acfe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	88fa      	ldrh	r2, [r7, #6]
 800ac46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2221      	movs	r2, #33	@ 0x21
 800ac5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d028      	beq.n	800acbc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac6e:	4a26      	ldr	r2, [pc, #152]	@ (800ad08 <HAL_UART_Transmit_DMA+0xf4>)
 800ac70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac76:	4a25      	ldr	r2, [pc, #148]	@ (800ad0c <HAL_UART_Transmit_DMA+0xf8>)
 800ac78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac7e:	4a24      	ldr	r2, [pc, #144]	@ (800ad10 <HAL_UART_Transmit_DMA+0xfc>)
 800ac80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac86:	2200      	movs	r2, #0
 800ac88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac92:	4619      	mov	r1, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3328      	adds	r3, #40	@ 0x28
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	f7fa fd2f 	bl	8005700 <HAL_DMA_Start_IT>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d009      	beq.n	800acbc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2210      	movs	r2, #16
 800acac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2220      	movs	r2, #32
 800acb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e020      	b.n	800acfe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2240      	movs	r2, #64	@ 0x40
 800acc2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3308      	adds	r3, #8
 800acca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	613b      	str	r3, [r7, #16]
   return(result);
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3308      	adds	r3, #8
 800ace2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ace4:	623a      	str	r2, [r7, #32]
 800ace6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	69f9      	ldr	r1, [r7, #28]
 800acea:	6a3a      	ldr	r2, [r7, #32]
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	61bb      	str	r3, [r7, #24]
   return(result);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e5      	bne.n	800acc4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	e000      	b.n	800acfe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800acfc:	2302      	movs	r3, #2
  }
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3728      	adds	r7, #40	@ 0x28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	0800b90f 	.word	0x0800b90f
 800ad0c:	0800b9a9 	.word	0x0800b9a9
 800ad10:	0800bb2f 	.word	0x0800bb2f

0800ad14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad6c:	b08c      	sub	sp, #48	@ 0x30
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	689a      	ldr	r2, [r3, #8]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	431a      	orrs	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	431a      	orrs	r2, r3
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	4bab      	ldr	r3, [pc, #684]	@ (800b044 <UART_SetConfig+0x2dc>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4aa0      	ldr	r2, [pc, #640]	@ (800b048 <UART_SetConfig+0x2e0>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d004      	beq.n	800add4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800add0:	4313      	orrs	r3, r2
 800add2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800adde:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	6812      	ldr	r2, [r2, #0]
 800ade6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ade8:	430b      	orrs	r3, r1
 800adea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf2:	f023 010f 	bic.w	r1, r3, #15
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a91      	ldr	r2, [pc, #580]	@ (800b04c <UART_SetConfig+0x2e4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d125      	bne.n	800ae58 <UART_SetConfig+0xf0>
 800ae0c:	4b90      	ldr	r3, [pc, #576]	@ (800b050 <UART_SetConfig+0x2e8>)
 800ae0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d81a      	bhi.n	800ae50 <UART_SetConfig+0xe8>
 800ae1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae20 <UART_SetConfig+0xb8>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800ae31 	.word	0x0800ae31
 800ae24:	0800ae41 	.word	0x0800ae41
 800ae28:	0800ae39 	.word	0x0800ae39
 800ae2c:	0800ae49 	.word	0x0800ae49
 800ae30:	2301      	movs	r3, #1
 800ae32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae36:	e0d6      	b.n	800afe6 <UART_SetConfig+0x27e>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae3e:	e0d2      	b.n	800afe6 <UART_SetConfig+0x27e>
 800ae40:	2304      	movs	r3, #4
 800ae42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae46:	e0ce      	b.n	800afe6 <UART_SetConfig+0x27e>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae4e:	e0ca      	b.n	800afe6 <UART_SetConfig+0x27e>
 800ae50:	2310      	movs	r3, #16
 800ae52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae56:	e0c6      	b.n	800afe6 <UART_SetConfig+0x27e>
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a7d      	ldr	r2, [pc, #500]	@ (800b054 <UART_SetConfig+0x2ec>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d138      	bne.n	800aed4 <UART_SetConfig+0x16c>
 800ae62:	4b7b      	ldr	r3, [pc, #492]	@ (800b050 <UART_SetConfig+0x2e8>)
 800ae64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae68:	f003 030c 	and.w	r3, r3, #12
 800ae6c:	2b0c      	cmp	r3, #12
 800ae6e:	d82d      	bhi.n	800aecc <UART_SetConfig+0x164>
 800ae70:	a201      	add	r2, pc, #4	@ (adr r2, 800ae78 <UART_SetConfig+0x110>)
 800ae72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae76:	bf00      	nop
 800ae78:	0800aead 	.word	0x0800aead
 800ae7c:	0800aecd 	.word	0x0800aecd
 800ae80:	0800aecd 	.word	0x0800aecd
 800ae84:	0800aecd 	.word	0x0800aecd
 800ae88:	0800aebd 	.word	0x0800aebd
 800ae8c:	0800aecd 	.word	0x0800aecd
 800ae90:	0800aecd 	.word	0x0800aecd
 800ae94:	0800aecd 	.word	0x0800aecd
 800ae98:	0800aeb5 	.word	0x0800aeb5
 800ae9c:	0800aecd 	.word	0x0800aecd
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	0800aecd 	.word	0x0800aecd
 800aea8:	0800aec5 	.word	0x0800aec5
 800aeac:	2300      	movs	r3, #0
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb2:	e098      	b.n	800afe6 <UART_SetConfig+0x27e>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeba:	e094      	b.n	800afe6 <UART_SetConfig+0x27e>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec2:	e090      	b.n	800afe6 <UART_SetConfig+0x27e>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeca:	e08c      	b.n	800afe6 <UART_SetConfig+0x27e>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aed2:	e088      	b.n	800afe6 <UART_SetConfig+0x27e>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a5f      	ldr	r2, [pc, #380]	@ (800b058 <UART_SetConfig+0x2f0>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d125      	bne.n	800af2a <UART_SetConfig+0x1c2>
 800aede:	4b5c      	ldr	r3, [pc, #368]	@ (800b050 <UART_SetConfig+0x2e8>)
 800aee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aee8:	2b30      	cmp	r3, #48	@ 0x30
 800aeea:	d016      	beq.n	800af1a <UART_SetConfig+0x1b2>
 800aeec:	2b30      	cmp	r3, #48	@ 0x30
 800aeee:	d818      	bhi.n	800af22 <UART_SetConfig+0x1ba>
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	d00a      	beq.n	800af0a <UART_SetConfig+0x1a2>
 800aef4:	2b20      	cmp	r3, #32
 800aef6:	d814      	bhi.n	800af22 <UART_SetConfig+0x1ba>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <UART_SetConfig+0x19a>
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	d008      	beq.n	800af12 <UART_SetConfig+0x1aa>
 800af00:	e00f      	b.n	800af22 <UART_SetConfig+0x1ba>
 800af02:	2300      	movs	r3, #0
 800af04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af08:	e06d      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af0a:	2302      	movs	r3, #2
 800af0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af10:	e069      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af12:	2304      	movs	r3, #4
 800af14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af18:	e065      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af1a:	2308      	movs	r3, #8
 800af1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af20:	e061      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af22:	2310      	movs	r3, #16
 800af24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af28:	e05d      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a4b      	ldr	r2, [pc, #300]	@ (800b05c <UART_SetConfig+0x2f4>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d125      	bne.n	800af80 <UART_SetConfig+0x218>
 800af34:	4b46      	ldr	r3, [pc, #280]	@ (800b050 <UART_SetConfig+0x2e8>)
 800af36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800af3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800af40:	d016      	beq.n	800af70 <UART_SetConfig+0x208>
 800af42:	2bc0      	cmp	r3, #192	@ 0xc0
 800af44:	d818      	bhi.n	800af78 <UART_SetConfig+0x210>
 800af46:	2b80      	cmp	r3, #128	@ 0x80
 800af48:	d00a      	beq.n	800af60 <UART_SetConfig+0x1f8>
 800af4a:	2b80      	cmp	r3, #128	@ 0x80
 800af4c:	d814      	bhi.n	800af78 <UART_SetConfig+0x210>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <UART_SetConfig+0x1f0>
 800af52:	2b40      	cmp	r3, #64	@ 0x40
 800af54:	d008      	beq.n	800af68 <UART_SetConfig+0x200>
 800af56:	e00f      	b.n	800af78 <UART_SetConfig+0x210>
 800af58:	2300      	movs	r3, #0
 800af5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af5e:	e042      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af60:	2302      	movs	r3, #2
 800af62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af66:	e03e      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af68:	2304      	movs	r3, #4
 800af6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6e:	e03a      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af70:	2308      	movs	r3, #8
 800af72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af76:	e036      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af78:	2310      	movs	r3, #16
 800af7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7e:	e032      	b.n	800afe6 <UART_SetConfig+0x27e>
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a30      	ldr	r2, [pc, #192]	@ (800b048 <UART_SetConfig+0x2e0>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d12a      	bne.n	800afe0 <UART_SetConfig+0x278>
 800af8a:	4b31      	ldr	r3, [pc, #196]	@ (800b050 <UART_SetConfig+0x2e8>)
 800af8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af98:	d01a      	beq.n	800afd0 <UART_SetConfig+0x268>
 800af9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af9e:	d81b      	bhi.n	800afd8 <UART_SetConfig+0x270>
 800afa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afa4:	d00c      	beq.n	800afc0 <UART_SetConfig+0x258>
 800afa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afaa:	d815      	bhi.n	800afd8 <UART_SetConfig+0x270>
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <UART_SetConfig+0x250>
 800afb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afb4:	d008      	beq.n	800afc8 <UART_SetConfig+0x260>
 800afb6:	e00f      	b.n	800afd8 <UART_SetConfig+0x270>
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afbe:	e012      	b.n	800afe6 <UART_SetConfig+0x27e>
 800afc0:	2302      	movs	r3, #2
 800afc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc6:	e00e      	b.n	800afe6 <UART_SetConfig+0x27e>
 800afc8:	2304      	movs	r3, #4
 800afca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afce:	e00a      	b.n	800afe6 <UART_SetConfig+0x27e>
 800afd0:	2308      	movs	r3, #8
 800afd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd6:	e006      	b.n	800afe6 <UART_SetConfig+0x27e>
 800afd8:	2310      	movs	r3, #16
 800afda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afde:	e002      	b.n	800afe6 <UART_SetConfig+0x27e>
 800afe0:	2310      	movs	r3, #16
 800afe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a17      	ldr	r2, [pc, #92]	@ (800b048 <UART_SetConfig+0x2e0>)
 800afec:	4293      	cmp	r3, r2
 800afee:	f040 80a8 	bne.w	800b142 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aff2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aff6:	2b08      	cmp	r3, #8
 800aff8:	d834      	bhi.n	800b064 <UART_SetConfig+0x2fc>
 800affa:	a201      	add	r2, pc, #4	@ (adr r2, 800b000 <UART_SetConfig+0x298>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b025 	.word	0x0800b025
 800b004:	0800b065 	.word	0x0800b065
 800b008:	0800b02d 	.word	0x0800b02d
 800b00c:	0800b065 	.word	0x0800b065
 800b010:	0800b033 	.word	0x0800b033
 800b014:	0800b065 	.word	0x0800b065
 800b018:	0800b065 	.word	0x0800b065
 800b01c:	0800b065 	.word	0x0800b065
 800b020:	0800b03b 	.word	0x0800b03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b024:	f7fd fbb8 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800b028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b02a:	e021      	b.n	800b070 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b02c:	4b0c      	ldr	r3, [pc, #48]	@ (800b060 <UART_SetConfig+0x2f8>)
 800b02e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b030:	e01e      	b.n	800b070 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b032:	f7fd fb43 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800b036:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b038:	e01a      	b.n	800b070 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b03a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b03e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b040:	e016      	b.n	800b070 <UART_SetConfig+0x308>
 800b042:	bf00      	nop
 800b044:	cfff69f3 	.word	0xcfff69f3
 800b048:	40008000 	.word	0x40008000
 800b04c:	40013800 	.word	0x40013800
 800b050:	40021000 	.word	0x40021000
 800b054:	40004400 	.word	0x40004400
 800b058:	40004800 	.word	0x40004800
 800b05c:	40004c00 	.word	0x40004c00
 800b060:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b06e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 812a 	beq.w	800b2cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07c:	4a9e      	ldr	r2, [pc, #632]	@ (800b2f8 <UART_SetConfig+0x590>)
 800b07e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b082:	461a      	mov	r2, r3
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	fbb3 f3f2 	udiv	r3, r3, r2
 800b08a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	4613      	mov	r3, r2
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	4413      	add	r3, r2
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d305      	bcc.n	800b0a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d903      	bls.n	800b0b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0ae:	e10d      	b.n	800b2cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	60bb      	str	r3, [r7, #8]
 800b0b6:	60fa      	str	r2, [r7, #12]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0bc:	4a8e      	ldr	r2, [pc, #568]	@ (800b2f8 <UART_SetConfig+0x590>)
 800b0be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	607a      	str	r2, [r7, #4]
 800b0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0d2:	f7f5 fe01 	bl	8000cd8 <__aeabi_uldivmod>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4610      	mov	r0, r2
 800b0dc:	4619      	mov	r1, r3
 800b0de:	f04f 0200 	mov.w	r2, #0
 800b0e2:	f04f 0300 	mov.w	r3, #0
 800b0e6:	020b      	lsls	r3, r1, #8
 800b0e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0ec:	0202      	lsls	r2, r0, #8
 800b0ee:	6979      	ldr	r1, [r7, #20]
 800b0f0:	6849      	ldr	r1, [r1, #4]
 800b0f2:	0849      	lsrs	r1, r1, #1
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	eb12 0804 	adds.w	r8, r2, r4
 800b0fe:	eb43 0905 	adc.w	r9, r3, r5
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	469a      	mov	sl, r3
 800b10a:	4693      	mov	fp, r2
 800b10c:	4652      	mov	r2, sl
 800b10e:	465b      	mov	r3, fp
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fde0 	bl	8000cd8 <__aeabi_uldivmod>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4613      	mov	r3, r2
 800b11e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b126:	d308      	bcc.n	800b13a <UART_SetConfig+0x3d2>
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b12e:	d204      	bcs.n	800b13a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6a3a      	ldr	r2, [r7, #32]
 800b136:	60da      	str	r2, [r3, #12]
 800b138:	e0c8      	b.n	800b2cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b140:	e0c4      	b.n	800b2cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b14a:	d167      	bne.n	800b21c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b14c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b150:	2b08      	cmp	r3, #8
 800b152:	d828      	bhi.n	800b1a6 <UART_SetConfig+0x43e>
 800b154:	a201      	add	r2, pc, #4	@ (adr r2, 800b15c <UART_SetConfig+0x3f4>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b181 	.word	0x0800b181
 800b160:	0800b189 	.word	0x0800b189
 800b164:	0800b191 	.word	0x0800b191
 800b168:	0800b1a7 	.word	0x0800b1a7
 800b16c:	0800b197 	.word	0x0800b197
 800b170:	0800b1a7 	.word	0x0800b1a7
 800b174:	0800b1a7 	.word	0x0800b1a7
 800b178:	0800b1a7 	.word	0x0800b1a7
 800b17c:	0800b19f 	.word	0x0800b19f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b180:	f7fd fb0a 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800b184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b186:	e014      	b.n	800b1b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b188:	f7fd fb1c 	bl	80087c4 <HAL_RCC_GetPCLK2Freq>
 800b18c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b18e:	e010      	b.n	800b1b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b190:	4b5a      	ldr	r3, [pc, #360]	@ (800b2fc <UART_SetConfig+0x594>)
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b194:	e00d      	b.n	800b1b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b196:	f7fd fa91 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800b19a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b19c:	e009      	b.n	800b1b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b19e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1a4:	e005      	b.n	800b1b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b1b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8089 	beq.w	800b2cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1be:	4a4e      	ldr	r2, [pc, #312]	@ (800b2f8 <UART_SetConfig+0x590>)
 800b1c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1cc:	005a      	lsls	r2, r3, #1
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	085b      	lsrs	r3, r3, #1
 800b1d4:	441a      	add	r2, r3
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	2b0f      	cmp	r3, #15
 800b1e4:	d916      	bls.n	800b214 <UART_SetConfig+0x4ac>
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1ec:	d212      	bcs.n	800b214 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1ee:	6a3b      	ldr	r3, [r7, #32]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	f023 030f 	bic.w	r3, r3, #15
 800b1f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	085b      	lsrs	r3, r3, #1
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	f003 0307 	and.w	r3, r3, #7
 800b202:	b29a      	uxth	r2, r3
 800b204:	8bfb      	ldrh	r3, [r7, #30]
 800b206:	4313      	orrs	r3, r2
 800b208:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	8bfa      	ldrh	r2, [r7, #30]
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	e05b      	b.n	800b2cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b21a:	e057      	b.n	800b2cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b21c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b220:	2b08      	cmp	r3, #8
 800b222:	d828      	bhi.n	800b276 <UART_SetConfig+0x50e>
 800b224:	a201      	add	r2, pc, #4	@ (adr r2, 800b22c <UART_SetConfig+0x4c4>)
 800b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22a:	bf00      	nop
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b261 	.word	0x0800b261
 800b238:	0800b277 	.word	0x0800b277
 800b23c:	0800b267 	.word	0x0800b267
 800b240:	0800b277 	.word	0x0800b277
 800b244:	0800b277 	.word	0x0800b277
 800b248:	0800b277 	.word	0x0800b277
 800b24c:	0800b26f 	.word	0x0800b26f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b250:	f7fd faa2 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800b254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b256:	e014      	b.n	800b282 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b258:	f7fd fab4 	bl	80087c4 <HAL_RCC_GetPCLK2Freq>
 800b25c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b25e:	e010      	b.n	800b282 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b260:	4b26      	ldr	r3, [pc, #152]	@ (800b2fc <UART_SetConfig+0x594>)
 800b262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b264:	e00d      	b.n	800b282 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b266:	f7fd fa29 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800b26a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b26c:	e009      	b.n	800b282 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b26e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b274:	e005      	b.n	800b282 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b280:	bf00      	nop
    }

    if (pclk != 0U)
 800b282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b284:	2b00      	cmp	r3, #0
 800b286:	d021      	beq.n	800b2cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28c:	4a1a      	ldr	r2, [pc, #104]	@ (800b2f8 <UART_SetConfig+0x590>)
 800b28e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b292:	461a      	mov	r2, r3
 800b294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b296:	fbb3 f2f2 	udiv	r2, r3, r2
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	085b      	lsrs	r3, r3, #1
 800b2a0:	441a      	add	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	2b0f      	cmp	r3, #15
 800b2b0:	d909      	bls.n	800b2c6 <UART_SetConfig+0x55e>
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2b8:	d205      	bcs.n	800b2c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	60da      	str	r2, [r3, #12]
 800b2c4:	e002      	b.n	800b2cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3730      	adds	r7, #48	@ 0x30
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0801518c 	.word	0x0801518c
 800b2fc:	00f42400 	.word	0x00f42400

0800b300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00a      	beq.n	800b32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b394:	f003 0310 	and.w	r3, r3, #16
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01a      	beq.n	800b416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3fe:	d10a      	bne.n	800b416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]
  }
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b098      	sub	sp, #96	@ 0x60
 800b448:	af02      	add	r7, sp, #8
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b454:	f7f7 fdc4 	bl	8002fe0 <HAL_GetTick>
 800b458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b08      	cmp	r3, #8
 800b466:	d12f      	bne.n	800b4c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b470:	2200      	movs	r2, #0
 800b472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f88e 	bl	800b598 <UART_WaitOnFlagUntilTimeout>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d022      	beq.n	800b4c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b496:	653b      	str	r3, [r7, #80]	@ 0x50
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	461a      	mov	r2, r3
 800b49e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e6      	bne.n	800b482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e063      	b.n	800b590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0304 	and.w	r3, r3, #4
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d149      	bne.n	800b56a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f857 	bl	800b598 <UART_WaitOnFlagUntilTimeout>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d03c      	beq.n	800b56a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b50e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b510:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e6      	bne.n	800b4f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3308      	adds	r3, #8
 800b528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	60fb      	str	r3, [r7, #12]
   return(result);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f023 0301 	bic.w	r3, r3, #1
 800b538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3308      	adds	r3, #8
 800b540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b542:	61fa      	str	r2, [r7, #28]
 800b544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b546:	69b9      	ldr	r1, [r7, #24]
 800b548:	69fa      	ldr	r2, [r7, #28]
 800b54a:	e841 2300 	strex	r3, r2, [r1]
 800b54e:	617b      	str	r3, [r7, #20]
   return(result);
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1e5      	bne.n	800b522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2220      	movs	r2, #32
 800b55a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e012      	b.n	800b590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2220      	movs	r2, #32
 800b56e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3758      	adds	r7, #88	@ 0x58
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5a8:	e04f      	b.n	800b64a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b0:	d04b      	beq.n	800b64a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5b2:	f7f7 fd15 	bl	8002fe0 <HAL_GetTick>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d302      	bcc.n	800b5c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e04e      	b.n	800b66a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0304 	and.w	r3, r3, #4
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d037      	beq.n	800b64a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b80      	cmp	r3, #128	@ 0x80
 800b5de:	d034      	beq.n	800b64a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b40      	cmp	r3, #64	@ 0x40
 800b5e4:	d031      	beq.n	800b64a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	f003 0308 	and.w	r3, r3, #8
 800b5f0:	2b08      	cmp	r3, #8
 800b5f2:	d110      	bne.n	800b616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2208      	movs	r2, #8
 800b5fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 f920 	bl	800b842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2208      	movs	r2, #8
 800b606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e029      	b.n	800b66a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	69db      	ldr	r3, [r3, #28]
 800b61c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b624:	d111      	bne.n	800b64a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b62e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 f906 	bl	800b842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2220      	movs	r2, #32
 800b63a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	e00f      	b.n	800b66a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69da      	ldr	r2, [r3, #28]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4013      	ands	r3, r2
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	429a      	cmp	r2, r3
 800b658:	bf0c      	ite	eq
 800b65a:	2301      	moveq	r3, #1
 800b65c:	2300      	movne	r3, #0
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	461a      	mov	r2, r3
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	429a      	cmp	r2, r3
 800b666:	d0a0      	beq.n	800b5aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b096      	sub	sp, #88	@ 0x58
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	88fa      	ldrh	r2, [r7, #6]
 800b68c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2222      	movs	r2, #34	@ 0x22
 800b69c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d02d      	beq.n	800b706 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6b0:	4a40      	ldr	r2, [pc, #256]	@ (800b7b4 <UART_Start_Receive_DMA+0x140>)
 800b6b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ba:	4a3f      	ldr	r2, [pc, #252]	@ (800b7b8 <UART_Start_Receive_DMA+0x144>)
 800b6bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c4:	4a3d      	ldr	r2, [pc, #244]	@ (800b7bc <UART_Start_Receive_DMA+0x148>)
 800b6c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3324      	adds	r3, #36	@ 0x24
 800b6de:	4619      	mov	r1, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	f7fa f80a 	bl	8005700 <HAL_DMA_Start_IT>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d009      	beq.n	800b706 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2210      	movs	r2, #16
 800b6f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e051      	b.n	800b7aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d018      	beq.n	800b740 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b722:	657b      	str	r3, [r7, #84]	@ 0x54
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b72c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b72e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b73a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e6      	bne.n	800b70e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74a:	e853 3f00 	ldrex	r3, [r3]
 800b74e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	653b      	str	r3, [r7, #80]	@ 0x50
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3308      	adds	r3, #8
 800b75e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b760:	637a      	str	r2, [r7, #52]	@ 0x34
 800b762:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b764:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b768:	e841 2300 	strex	r3, r2, [r1]
 800b76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e5      	bne.n	800b740 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3308      	adds	r3, #8
 800b77a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	e853 3f00 	ldrex	r3, [r3]
 800b782:	613b      	str	r3, [r7, #16]
   return(result);
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b78a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3308      	adds	r3, #8
 800b792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b794:	623a      	str	r2, [r7, #32]
 800b796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b798:	69f9      	ldr	r1, [r7, #28]
 800b79a:	6a3a      	ldr	r2, [r7, #32]
 800b79c:	e841 2300 	strex	r3, r2, [r1]
 800b7a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1e5      	bne.n	800b774 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3758      	adds	r7, #88	@ 0x58
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	0800b9c5 	.word	0x0800b9c5
 800b7b8:	0800baf1 	.word	0x0800baf1
 800b7bc:	0800bb2f 	.word	0x0800bb2f

0800b7c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b08f      	sub	sp, #60	@ 0x3c
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	e853 3f00 	ldrex	r3, [r3]
 800b7d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b7dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7ee:	e841 2300 	strex	r3, r2, [r1]
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1e6      	bne.n	800b7c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3308      	adds	r3, #8
 800b800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	e853 3f00 	ldrex	r3, [r3]
 800b808:	60bb      	str	r3, [r7, #8]
   return(result);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b810:	633b      	str	r3, [r7, #48]	@ 0x30
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3308      	adds	r3, #8
 800b818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b81a:	61ba      	str	r2, [r7, #24]
 800b81c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	6979      	ldr	r1, [r7, #20]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	e841 2300 	strex	r3, r2, [r1]
 800b826:	613b      	str	r3, [r7, #16]
   return(result);
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1e5      	bne.n	800b7fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2220      	movs	r2, #32
 800b832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b836:	bf00      	nop
 800b838:	373c      	adds	r7, #60	@ 0x3c
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b842:	b480      	push	{r7}
 800b844:	b095      	sub	sp, #84	@ 0x54
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b85e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b868:	643b      	str	r3, [r7, #64]	@ 0x40
 800b86a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b86e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b870:	e841 2300 	strex	r3, r2, [r1]
 800b874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e6      	bne.n	800b84a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3308      	adds	r3, #8
 800b882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	e853 3f00 	ldrex	r3, [r3]
 800b88a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b892:	f023 0301 	bic.w	r3, r3, #1
 800b896:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8a8:	e841 2300 	strex	r3, r2, [r1]
 800b8ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1e3      	bne.n	800b87c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d118      	bne.n	800b8ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f023 0310 	bic.w	r3, r3, #16
 800b8d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8da:	61bb      	str	r3, [r7, #24]
 800b8dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	6979      	ldr	r1, [r7, #20]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e6      	bne.n	800b8bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b902:	bf00      	nop
 800b904:	3754      	adds	r7, #84	@ 0x54
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b090      	sub	sp, #64	@ 0x40
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0320 	and.w	r3, r3, #32
 800b926:	2b00      	cmp	r3, #0
 800b928:	d137      	bne.n	800b99a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92c:	2200      	movs	r2, #0
 800b92e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3308      	adds	r3, #8
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	e853 3f00 	ldrex	r3, [r3]
 800b940:	623b      	str	r3, [r7, #32]
   return(result);
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3308      	adds	r3, #8
 800b950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b952:	633a      	str	r2, [r7, #48]	@ 0x30
 800b954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e5      	bne.n	800b932 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	e853 3f00 	ldrex	r3, [r3]
 800b972:	60fb      	str	r3, [r7, #12]
   return(result);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b97a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	461a      	mov	r2, r3
 800b982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b988:	69b9      	ldr	r1, [r7, #24]
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	e841 2300 	strex	r3, r2, [r1]
 800b990:	617b      	str	r3, [r7, #20]
   return(result);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1e6      	bne.n	800b966 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b998:	e002      	b.n	800b9a0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b99a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b99c:	f7ff f9ba 	bl	800ad14 <HAL_UART_TxCpltCallback>
}
 800b9a0:	bf00      	nop
 800b9a2:	3740      	adds	r7, #64	@ 0x40
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff f9b6 	bl	800ad28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9bc:	bf00      	nop
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b09c      	sub	sp, #112	@ 0x70
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d171      	bne.n	800bac4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9f0:	e853 3f00 	ldrex	r3, [r3]
 800b9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ba0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ba14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1e6      	bne.n	800b9e8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3308      	adds	r3, #8
 800ba20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2c:	f023 0301 	bic.w	r3, r3, #1
 800ba30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba3a:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba42:	e841 2300 	strex	r3, r2, [r1]
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e5      	bne.n	800ba1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3308      	adds	r3, #8
 800ba54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba64:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e5      	bne.n	800ba4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	2220      	movs	r2, #32
 800ba86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d118      	bne.n	800bac4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 0310 	bic.w	r3, r3, #16
 800baa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800baa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bab0:	61fb      	str	r3, [r7, #28]
 800bab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab4:	69b9      	ldr	r1, [r7, #24]
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	e841 2300 	strex	r3, r2, [r1]
 800babc:	617b      	str	r3, [r7, #20]
   return(result);
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1e6      	bne.n	800ba92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bac6:	2200      	movs	r2, #0
 800bac8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bacc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d107      	bne.n	800bae2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bad8:	4619      	mov	r1, r3
 800bada:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800badc:	f7ff f938 	bl	800ad50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bae0:	e002      	b.n	800bae8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bae2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bae4:	f7f5 fb80 	bl	80011e8 <HAL_UART_RxCpltCallback>
}
 800bae8:	bf00      	nop
 800baea:	3770      	adds	r7, #112	@ 0x70
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2201      	movs	r2, #1
 800bb02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d109      	bne.n	800bb20 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb12:	085b      	lsrs	r3, r3, #1
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4619      	mov	r1, r3
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f7ff f919 	bl	800ad50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb1e:	e002      	b.n	800bb26 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7f5 fb4d 	bl	80011c0 <HAL_UART_RxHalfCpltCallback>
}
 800bb26:	bf00      	nop
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb56:	2b80      	cmp	r3, #128	@ 0x80
 800bb58:	d109      	bne.n	800bb6e <UART_DMAError+0x40>
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b21      	cmp	r3, #33	@ 0x21
 800bb5e:	d106      	bne.n	800bb6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f7ff fe29 	bl	800b7c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb78:	2b40      	cmp	r3, #64	@ 0x40
 800bb7a:	d109      	bne.n	800bb90 <UART_DMAError+0x62>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b22      	cmp	r3, #34	@ 0x22
 800bb80:	d106      	bne.n	800bb90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f7ff fe59 	bl	800b842 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb96:	f043 0210 	orr.w	r2, r3, #16
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bba0:	6978      	ldr	r0, [r7, #20]
 800bba2:	f7ff f8cb 	bl	800ad3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bba6:	bf00      	nop
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_UARTEx_DisableFifoMode+0x16>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e027      	b.n	800bc14 <HAL_UARTEx_DisableFifoMode+0x66>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2224      	movs	r2, #36	@ 0x24
 800bbd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f022 0201 	bic.w	r2, r2, #1
 800bbea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bbf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d101      	bne.n	800bc38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc34:	2302      	movs	r3, #2
 800bc36:	e02d      	b.n	800bc94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2224      	movs	r2, #36	@ 0x24
 800bc44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f022 0201 	bic.w	r2, r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f8a3 	bl	800bdc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2220      	movs	r2, #32
 800bc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d101      	bne.n	800bcb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e02d      	b.n	800bd10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2224      	movs	r2, #36	@ 0x24
 800bcc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f022 0201 	bic.w	r2, r2, #1
 800bcda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	430a      	orrs	r2, r1
 800bcee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f865 	bl	800bdc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	@ 0x30
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd2c:	2b20      	cmp	r3, #32
 800bd2e:	d142      	bne.n	800bdb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d002      	beq.n	800bd3c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bd36:	88fb      	ldrh	r3, [r7, #6]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e03b      	b.n	800bdb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bd4c:	88fb      	ldrh	r3, [r7, #6]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	68b9      	ldr	r1, [r7, #8]
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7ff fc8e 	bl	800b674 <UART_Start_Receive_DMA>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d124      	bne.n	800bdb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d11d      	bne.n	800bdaa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2210      	movs	r2, #16
 800bd74:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	617b      	str	r3, [r7, #20]
   return(result);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f043 0310 	orr.w	r3, r3, #16
 800bd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd96:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6a39      	ldr	r1, [r7, #32]
 800bd9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e6      	bne.n	800bd76 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bda8:	e002      	b.n	800bdb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bdb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdb4:	e000      	b.n	800bdb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bdb6:	2302      	movs	r3, #2
  }
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3730      	adds	r7, #48	@ 0x30
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d108      	bne.n	800bde2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bde0:	e031      	b.n	800be46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bde2:	2308      	movs	r3, #8
 800bde4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bde6:	2308      	movs	r3, #8
 800bde8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	0e5b      	lsrs	r3, r3, #25
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	f003 0307 	and.w	r3, r3, #7
 800bdf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	0f5b      	lsrs	r3, r3, #29
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 0307 	and.w	r3, r3, #7
 800be08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	7b3a      	ldrb	r2, [r7, #12]
 800be0e:	4911      	ldr	r1, [pc, #68]	@ (800be54 <UARTEx_SetNbDataToProcess+0x94>)
 800be10:	5c8a      	ldrb	r2, [r1, r2]
 800be12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be16:	7b3a      	ldrb	r2, [r7, #12]
 800be18:	490f      	ldr	r1, [pc, #60]	@ (800be58 <UARTEx_SetNbDataToProcess+0x98>)
 800be1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be20:	b29a      	uxth	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	7b7a      	ldrb	r2, [r7, #13]
 800be2c:	4909      	ldr	r1, [pc, #36]	@ (800be54 <UARTEx_SetNbDataToProcess+0x94>)
 800be2e:	5c8a      	ldrb	r2, [r1, r2]
 800be30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be34:	7b7a      	ldrb	r2, [r7, #13]
 800be36:	4908      	ldr	r1, [pc, #32]	@ (800be58 <UARTEx_SetNbDataToProcess+0x98>)
 800be38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800be3e:	b29a      	uxth	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be46:	bf00      	nop
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	080151a4 	.word	0x080151a4
 800be58:	080151ac 	.word	0x080151ac

0800be5c <__NVIC_SetPriority>:
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	6039      	str	r1, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	db0a      	blt.n	800be86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	b2da      	uxtb	r2, r3
 800be74:	490c      	ldr	r1, [pc, #48]	@ (800bea8 <__NVIC_SetPriority+0x4c>)
 800be76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be7a:	0112      	lsls	r2, r2, #4
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	440b      	add	r3, r1
 800be80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800be84:	e00a      	b.n	800be9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	4908      	ldr	r1, [pc, #32]	@ (800beac <__NVIC_SetPriority+0x50>)
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	f003 030f 	and.w	r3, r3, #15
 800be92:	3b04      	subs	r3, #4
 800be94:	0112      	lsls	r2, r2, #4
 800be96:	b2d2      	uxtb	r2, r2
 800be98:	440b      	add	r3, r1
 800be9a:	761a      	strb	r2, [r3, #24]
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	e000e100 	.word	0xe000e100
 800beac:	e000ed00 	.word	0xe000ed00

0800beb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800beb4:	4b05      	ldr	r3, [pc, #20]	@ (800becc <SysTick_Handler+0x1c>)
 800beb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800beb8:	f002 fce8 	bl	800e88c <xTaskGetSchedulerState>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d001      	beq.n	800bec6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bec2:	f000 fea9 	bl	800cc18 <xPortSysTickHandler>
  }
}
 800bec6:	bf00      	nop
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	e000e010 	.word	0xe000e010

0800bed0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bed4:	2100      	movs	r1, #0
 800bed6:	f06f 0004 	mvn.w	r0, #4
 800beda:	f7ff ffbf 	bl	800be5c <__NVIC_SetPriority>
#endif
}
 800bede:	bf00      	nop
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beea:	f3ef 8305 	mrs	r3, IPSR
 800beee:	603b      	str	r3, [r7, #0]
  return(result);
 800bef0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bef6:	f06f 0305 	mvn.w	r3, #5
 800befa:	607b      	str	r3, [r7, #4]
 800befc:	e00c      	b.n	800bf18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800befe:	4b0a      	ldr	r3, [pc, #40]	@ (800bf28 <osKernelInitialize+0x44>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d105      	bne.n	800bf12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf06:	4b08      	ldr	r3, [pc, #32]	@ (800bf28 <osKernelInitialize+0x44>)
 800bf08:	2201      	movs	r2, #1
 800bf0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	607b      	str	r3, [r7, #4]
 800bf10:	e002      	b.n	800bf18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf12:	f04f 33ff 	mov.w	r3, #4294967295
 800bf16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf18:	687b      	ldr	r3, [r7, #4]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	20001604 	.word	0x20001604

0800bf2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf32:	f3ef 8305 	mrs	r3, IPSR
 800bf36:	603b      	str	r3, [r7, #0]
  return(result);
 800bf38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf3e:	f06f 0305 	mvn.w	r3, #5
 800bf42:	607b      	str	r3, [r7, #4]
 800bf44:	e010      	b.n	800bf68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf46:	4b0b      	ldr	r3, [pc, #44]	@ (800bf74 <osKernelStart+0x48>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d109      	bne.n	800bf62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf4e:	f7ff ffbf 	bl	800bed0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf52:	4b08      	ldr	r3, [pc, #32]	@ (800bf74 <osKernelStart+0x48>)
 800bf54:	2202      	movs	r2, #2
 800bf56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf58:	f002 f824 	bl	800dfa4 <vTaskStartScheduler>
      stat = osOK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	607b      	str	r3, [r7, #4]
 800bf60:	e002      	b.n	800bf68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf62:	f04f 33ff 	mov.w	r3, #4294967295
 800bf66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf68:	687b      	ldr	r3, [r7, #4]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20001604 	.word	0x20001604

0800bf78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08e      	sub	sp, #56	@ 0x38
 800bf7c:	af04      	add	r7, sp, #16
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf88:	f3ef 8305 	mrs	r3, IPSR
 800bf8c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d17f      	bne.n	800c094 <osThreadNew+0x11c>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d07c      	beq.n	800c094 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800bf9a:	2380      	movs	r3, #128	@ 0x80
 800bf9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf9e:	2318      	movs	r3, #24
 800bfa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d046      	beq.n	800c040 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <osThreadNew+0x48>
        name = attr->name;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d008      	beq.n	800bfe6 <osThreadNew+0x6e>
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	2b38      	cmp	r3, #56	@ 0x38
 800bfd8:	d805      	bhi.n	800bfe6 <osThreadNew+0x6e>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <osThreadNew+0x72>
        return (NULL);
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	e055      	b.n	800c096 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	089b      	lsrs	r3, r3, #2
 800bff8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00f      	beq.n	800c022 <osThreadNew+0xaa>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800c00a:	d30a      	bcc.n	800c022 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c010:	2b00      	cmp	r3, #0
 800c012:	d006      	beq.n	800c022 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	695b      	ldr	r3, [r3, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <osThreadNew+0xaa>
        mem = 1;
 800c01c:	2301      	movs	r3, #1
 800c01e:	61bb      	str	r3, [r7, #24]
 800c020:	e010      	b.n	800c044 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10c      	bne.n	800c044 <osThreadNew+0xcc>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d108      	bne.n	800c044 <osThreadNew+0xcc>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d104      	bne.n	800c044 <osThreadNew+0xcc>
          mem = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	61bb      	str	r3, [r7, #24]
 800c03e:	e001      	b.n	800c044 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d110      	bne.n	800c06c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c052:	9202      	str	r2, [sp, #8]
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	6a3a      	ldr	r2, [r7, #32]
 800c05e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f001 fd81 	bl	800db68 <xTaskCreateStatic>
 800c066:	4603      	mov	r3, r0
 800c068:	613b      	str	r3, [r7, #16]
 800c06a:	e013      	b.n	800c094 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d110      	bne.n	800c094 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	b29a      	uxth	r2, r3
 800c076:	f107 0310 	add.w	r3, r7, #16
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f001 fdd1 	bl	800dc2c <xTaskCreate>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d001      	beq.n	800c094 <osThreadNew+0x11c>
            hTask = NULL;
 800c090:	2300      	movs	r3, #0
 800c092:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c094:	693b      	ldr	r3, [r7, #16]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3728      	adds	r7, #40	@ 0x28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0a6:	f3ef 8305 	mrs	r3, IPSR
 800c0aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <osDelay+0x1c>
    stat = osErrorISR;
 800c0b2:	f06f 0305 	mvn.w	r3, #5
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	e007      	b.n	800c0ca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <osDelay+0x2c>
      vTaskDelay(ticks);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f001 ff37 	bl	800df38 <vTaskDelay>
    }
  }

  return (stat);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e0:	f3ef 8305 	mrs	r3, IPSR
 800c0e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0e6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d174      	bne.n	800c1d6 <osMutexNew+0x102>
    if (attr != NULL) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <osMutexNew+0x26>
      type = attr->attr_bits;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	61bb      	str	r3, [r7, #24]
 800c0f8:	e001      	b.n	800c0fe <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <osMutexNew+0x3a>
      rmtx = 1U;
 800c108:	2301      	movs	r3, #1
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	e001      	b.n	800c112 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	f003 0308 	and.w	r3, r3, #8
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d15c      	bne.n	800c1d6 <osMutexNew+0x102>
      mem = -1;
 800c11c:	f04f 33ff 	mov.w	r3, #4294967295
 800c120:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d015      	beq.n	800c154 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <osMutexNew+0x6a>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	2b4f      	cmp	r3, #79	@ 0x4f
 800c136:	d902      	bls.n	800c13e <osMutexNew+0x6a>
          mem = 1;
 800c138:	2301      	movs	r3, #1
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	e00c      	b.n	800c158 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d108      	bne.n	800c158 <osMutexNew+0x84>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d104      	bne.n	800c158 <osMutexNew+0x84>
            mem = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
 800c152:	e001      	b.n	800c158 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d112      	bne.n	800c184 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d007      	beq.n	800c174 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	4619      	mov	r1, r3
 800c16a:	2004      	movs	r0, #4
 800c16c:	f000 ff5d 	bl	800d02a <xQueueCreateMutexStatic>
 800c170:	61f8      	str	r0, [r7, #28]
 800c172:	e016      	b.n	800c1a2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	4619      	mov	r1, r3
 800c17a:	2001      	movs	r0, #1
 800c17c:	f000 ff55 	bl	800d02a <xQueueCreateMutexStatic>
 800c180:	61f8      	str	r0, [r7, #28]
 800c182:	e00e      	b.n	800c1a2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10b      	bne.n	800c1a2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d004      	beq.n	800c19a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c190:	2004      	movs	r0, #4
 800c192:	f000 ff32 	bl	800cffa <xQueueCreateMutex>
 800c196:	61f8      	str	r0, [r7, #28]
 800c198:	e003      	b.n	800c1a2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c19a:	2001      	movs	r0, #1
 800c19c:	f000 ff2d 	bl	800cffa <xQueueCreateMutex>
 800c1a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00c      	beq.n	800c1c2 <osMutexNew+0xee>
        if (attr != NULL) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <osMutexNew+0xe2>
          name = attr->name;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	e001      	b.n	800c1ba <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	69f8      	ldr	r0, [r7, #28]
 800c1be:	f001 fc75 	bl	800daac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <osMutexNew+0x102>
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	f043 0301 	orr.w	r3, r3, #1
 800c1d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c1d6:	69fb      	ldr	r3, [r7, #28]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3720      	adds	r7, #32
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f023 0301 	bic.w	r3, r3, #1
 800c1f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1fe:	f3ef 8305 	mrs	r3, IPSR
 800c202:	60bb      	str	r3, [r7, #8]
  return(result);
 800c204:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c20a:	f06f 0305 	mvn.w	r3, #5
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	e02c      	b.n	800c26c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c218:	f06f 0303 	mvn.w	r3, #3
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	e025      	b.n	800c26c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d011      	beq.n	800c24a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6938      	ldr	r0, [r7, #16]
 800c22a:	f000 ff4e 	bl	800d0ca <xQueueTakeMutexRecursive>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b01      	cmp	r3, #1
 800c232:	d01b      	beq.n	800c26c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c23a:	f06f 0301 	mvn.w	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
 800c240:	e014      	b.n	800c26c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c242:	f06f 0302 	mvn.w	r3, #2
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e010      	b.n	800c26c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c24a:	6839      	ldr	r1, [r7, #0]
 800c24c:	6938      	ldr	r0, [r7, #16]
 800c24e:	f001 f9f5 	bl	800d63c <xQueueSemaphoreTake>
 800c252:	4603      	mov	r3, r0
 800c254:	2b01      	cmp	r3, #1
 800c256:	d009      	beq.n	800c26c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c25e:	f06f 0301 	mvn.w	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
 800c264:	e002      	b.n	800c26c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c266:	f06f 0302 	mvn.w	r3, #2
 800c26a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c26c:	697b      	ldr	r3, [r7, #20]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c276:	b580      	push	{r7, lr}
 800c278:	b086      	sub	sp, #24
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f023 0301 	bic.w	r3, r3, #1
 800c284:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c292:	f3ef 8305 	mrs	r3, IPSR
 800c296:	60bb      	str	r3, [r7, #8]
  return(result);
 800c298:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c29e:	f06f 0305 	mvn.w	r3, #5
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	e01f      	b.n	800c2e6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d103      	bne.n	800c2b4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c2ac:	f06f 0303 	mvn.w	r3, #3
 800c2b0:	617b      	str	r3, [r7, #20]
 800c2b2:	e018      	b.n	800c2e6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c2ba:	6938      	ldr	r0, [r7, #16]
 800c2bc:	f000 fed0 	bl	800d060 <xQueueGiveMutexRecursive>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d00f      	beq.n	800c2e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c2c6:	f06f 0302 	mvn.w	r3, #2
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	e00b      	b.n	800c2e6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6938      	ldr	r0, [r7, #16]
 800c2d6:	f000 ff2f 	bl	800d138 <xQueueGenericSend>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d002      	beq.n	800c2e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c2e0:	f06f 0302 	mvn.w	r3, #2
 800c2e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c2e6:	697b      	ldr	r3, [r7, #20]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4a07      	ldr	r2, [pc, #28]	@ (800c31c <vApplicationGetIdleTaskMemory+0x2c>)
 800c300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	4a06      	ldr	r2, [pc, #24]	@ (800c320 <vApplicationGetIdleTaskMemory+0x30>)
 800c306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2280      	movs	r2, #128	@ 0x80
 800c30c:	601a      	str	r2, [r3, #0]
}
 800c30e:	bf00      	nop
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	20001608 	.word	0x20001608
 800c320:	20001788 	.word	0x20001788

0800c324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4a07      	ldr	r2, [pc, #28]	@ (800c350 <vApplicationGetTimerTaskMemory+0x2c>)
 800c334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	4a06      	ldr	r2, [pc, #24]	@ (800c354 <vApplicationGetTimerTaskMemory+0x30>)
 800c33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20001988 	.word	0x20001988
 800c354:	20001b08 	.word	0x20001b08

0800c358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08a      	sub	sp, #40	@ 0x28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c360:	2300      	movs	r3, #0
 800c362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c364:	f001 fe8e 	bl	800e084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c368:	4b5c      	ldr	r3, [pc, #368]	@ (800c4dc <pvPortMalloc+0x184>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c370:	f000 f924 	bl	800c5bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c374:	4b5a      	ldr	r3, [pc, #360]	@ (800c4e0 <pvPortMalloc+0x188>)
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4013      	ands	r3, r2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f040 8095 	bne.w	800c4ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d01e      	beq.n	800c3c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c388:	2208      	movs	r2, #8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4413      	add	r3, r2
 800c38e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	2b00      	cmp	r3, #0
 800c398:	d015      	beq.n	800c3c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f023 0307 	bic.w	r3, r3, #7
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f003 0307 	and.w	r3, r3, #7
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	e7fd      	b.n	800c3c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d06f      	beq.n	800c4ac <pvPortMalloc+0x154>
 800c3cc:	4b45      	ldr	r3, [pc, #276]	@ (800c4e4 <pvPortMalloc+0x18c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d86a      	bhi.n	800c4ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3d6:	4b44      	ldr	r3, [pc, #272]	@ (800c4e8 <pvPortMalloc+0x190>)
 800c3d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3da:	4b43      	ldr	r3, [pc, #268]	@ (800c4e8 <pvPortMalloc+0x190>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3e0:	e004      	b.n	800c3ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d903      	bls.n	800c3fe <pvPortMalloc+0xa6>
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1f1      	bne.n	800c3e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3fe:	4b37      	ldr	r3, [pc, #220]	@ (800c4dc <pvPortMalloc+0x184>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c404:	429a      	cmp	r2, r3
 800c406:	d051      	beq.n	800c4ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2208      	movs	r2, #8
 800c40e:	4413      	add	r3, r2
 800c410:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	1ad2      	subs	r2, r2, r3
 800c422:	2308      	movs	r3, #8
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	429a      	cmp	r2, r3
 800c428:	d920      	bls.n	800c46c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c42a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4413      	add	r3, r2
 800c430:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	f003 0307 	and.w	r3, r3, #7
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <pvPortMalloc+0xfc>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	613b      	str	r3, [r7, #16]
}
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	e7fd      	b.n	800c450 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	1ad2      	subs	r2, r2, r3
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c466:	69b8      	ldr	r0, [r7, #24]
 800c468:	f000 f90a 	bl	800c680 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c46c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e4 <pvPortMalloc+0x18c>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e4 <pvPortMalloc+0x18c>)
 800c478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c47a:	4b1a      	ldr	r3, [pc, #104]	@ (800c4e4 <pvPortMalloc+0x18c>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	4b1b      	ldr	r3, [pc, #108]	@ (800c4ec <pvPortMalloc+0x194>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	429a      	cmp	r2, r3
 800c484:	d203      	bcs.n	800c48e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c486:	4b17      	ldr	r3, [pc, #92]	@ (800c4e4 <pvPortMalloc+0x18c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a18      	ldr	r2, [pc, #96]	@ (800c4ec <pvPortMalloc+0x194>)
 800c48c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	4b13      	ldr	r3, [pc, #76]	@ (800c4e0 <pvPortMalloc+0x188>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	431a      	orrs	r2, r3
 800c498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49e:	2200      	movs	r2, #0
 800c4a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4a2:	4b13      	ldr	r3, [pc, #76]	@ (800c4f0 <pvPortMalloc+0x198>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	4a11      	ldr	r2, [pc, #68]	@ (800c4f0 <pvPortMalloc+0x198>)
 800c4aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4ac:	f001 fdf8 	bl	800e0a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00b      	beq.n	800c4d2 <pvPortMalloc+0x17a>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	60fb      	str	r3, [r7, #12]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <pvPortMalloc+0x176>
	return pvReturn;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3728      	adds	r7, #40	@ 0x28
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	200030a4 	.word	0x200030a4
 800c4e0:	200030b8 	.word	0x200030b8
 800c4e4:	200030a8 	.word	0x200030a8
 800c4e8:	2000309c 	.word	0x2000309c
 800c4ec:	200030ac 	.word	0x200030ac
 800c4f0:	200030b0 	.word	0x200030b0

0800c4f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d04f      	beq.n	800c5a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c506:	2308      	movs	r3, #8
 800c508:	425b      	negs	r3, r3
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	4413      	add	r3, r2
 800c50e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	4b25      	ldr	r3, [pc, #148]	@ (800c5b0 <vPortFree+0xbc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4013      	ands	r3, r2
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10b      	bne.n	800c53a <vPortFree+0x46>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	60fb      	str	r3, [r7, #12]
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop
 800c538:	e7fd      	b.n	800c536 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00b      	beq.n	800c55a <vPortFree+0x66>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	60bb      	str	r3, [r7, #8]
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
 800c558:	e7fd      	b.n	800c556 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	4b14      	ldr	r3, [pc, #80]	@ (800c5b0 <vPortFree+0xbc>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4013      	ands	r3, r2
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01e      	beq.n	800c5a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d11a      	bne.n	800c5a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	4b0e      	ldr	r3, [pc, #56]	@ (800c5b0 <vPortFree+0xbc>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	43db      	mvns	r3, r3
 800c57a:	401a      	ands	r2, r3
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c580:	f001 fd80 	bl	800e084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	4b0a      	ldr	r3, [pc, #40]	@ (800c5b4 <vPortFree+0xc0>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4413      	add	r3, r2
 800c58e:	4a09      	ldr	r2, [pc, #36]	@ (800c5b4 <vPortFree+0xc0>)
 800c590:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c592:	6938      	ldr	r0, [r7, #16]
 800c594:	f000 f874 	bl	800c680 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c598:	4b07      	ldr	r3, [pc, #28]	@ (800c5b8 <vPortFree+0xc4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	4a06      	ldr	r2, [pc, #24]	@ (800c5b8 <vPortFree+0xc4>)
 800c5a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5a2:	f001 fd7d 	bl	800e0a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5a6:	bf00      	nop
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	200030b8 	.word	0x200030b8
 800c5b4:	200030a8 	.word	0x200030a8
 800c5b8:	200030b4 	.word	0x200030b4

0800c5bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5c2:	f241 1394 	movw	r3, #4500	@ 0x1194
 800c5c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5c8:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <prvHeapInit+0xac>)
 800c5ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f003 0307 	and.w	r3, r3, #7
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00c      	beq.n	800c5f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3307      	adds	r3, #7
 800c5da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 0307 	bic.w	r3, r3, #7
 800c5e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	4a1f      	ldr	r2, [pc, #124]	@ (800c668 <prvHeapInit+0xac>)
 800c5ec:	4413      	add	r3, r2
 800c5ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c66c <prvHeapInit+0xb0>)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c66c <prvHeapInit+0xb0>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	4413      	add	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c608:	2208      	movs	r2, #8
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f023 0307 	bic.w	r3, r3, #7
 800c616:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4a15      	ldr	r2, [pc, #84]	@ (800c670 <prvHeapInit+0xb4>)
 800c61c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c61e:	4b14      	ldr	r3, [pc, #80]	@ (800c670 <prvHeapInit+0xb4>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2200      	movs	r2, #0
 800c624:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c626:	4b12      	ldr	r3, [pc, #72]	@ (800c670 <prvHeapInit+0xb4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	1ad2      	subs	r2, r2, r3
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c63c:	4b0c      	ldr	r3, [pc, #48]	@ (800c670 <prvHeapInit+0xb4>)
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	4a0a      	ldr	r2, [pc, #40]	@ (800c674 <prvHeapInit+0xb8>)
 800c64a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	4a09      	ldr	r2, [pc, #36]	@ (800c678 <prvHeapInit+0xbc>)
 800c652:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c654:	4b09      	ldr	r3, [pc, #36]	@ (800c67c <prvHeapInit+0xc0>)
 800c656:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c65a:	601a      	str	r2, [r3, #0]
}
 800c65c:	bf00      	nop
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	20001f08 	.word	0x20001f08
 800c66c:	2000309c 	.word	0x2000309c
 800c670:	200030a4 	.word	0x200030a4
 800c674:	200030ac 	.word	0x200030ac
 800c678:	200030a8 	.word	0x200030a8
 800c67c:	200030b8 	.word	0x200030b8

0800c680 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c688:	4b28      	ldr	r3, [pc, #160]	@ (800c72c <prvInsertBlockIntoFreeList+0xac>)
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	e002      	b.n	800c694 <prvInsertBlockIntoFreeList+0x14>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d8f7      	bhi.n	800c68e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d108      	bne.n	800c6c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	441a      	add	r2, r3
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	441a      	add	r2, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d118      	bne.n	800c708 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	4b15      	ldr	r3, [pc, #84]	@ (800c730 <prvInsertBlockIntoFreeList+0xb0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d00d      	beq.n	800c6fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	441a      	add	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	e008      	b.n	800c710 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <prvInsertBlockIntoFreeList+0xb0>)
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	e003      	b.n	800c710 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	429a      	cmp	r2, r3
 800c716:	d002      	beq.n	800c71e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	2000309c 	.word	0x2000309c
 800c730:	200030a4 	.word	0x200030a4

0800c734 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f103 0208 	add.w	r2, r3, #8
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f04f 32ff 	mov.w	r2, #4294967295
 800c74c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f103 0208 	add.w	r2, r3, #8
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f103 0208 	add.w	r2, r3, #8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c782:	bf00      	nop
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c78e:	b480      	push	{r7}
 800c790:	b085      	sub	sp, #20
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	689a      	ldr	r2, [r3, #8]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	601a      	str	r2, [r3, #0]
}
 800c7ca:	bf00      	nop
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b085      	sub	sp, #20
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ec:	d103      	bne.n	800c7f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	e00c      	b.n	800c810 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	e002      	b.n	800c804 <vListInsert+0x2e>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d2f6      	bcs.n	800c7fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	601a      	str	r2, [r3, #0]
}
 800c83c:	bf00      	nop
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	6892      	ldr	r2, [r2, #8]
 800c85e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	6852      	ldr	r2, [r2, #4]
 800c868:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	429a      	cmp	r2, r3
 800c872:	d103      	bne.n	800c87c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	689a      	ldr	r2, [r3, #8]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	1e5a      	subs	r2, r3, #1
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3b04      	subs	r3, #4
 800c8ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3b04      	subs	r3, #4
 800c8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f023 0201 	bic.w	r2, r3, #1
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3b04      	subs	r3, #4
 800c8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c900 <pxPortInitialiseStack+0x64>)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	3b14      	subs	r3, #20
 800c8d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3b04      	subs	r3, #4
 800c8e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f06f 0202 	mvn.w	r2, #2
 800c8ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3b20      	subs	r3, #32
 800c8f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr
 800c900:	0800c905 	.word	0x0800c905

0800c904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c90e:	4b13      	ldr	r3, [pc, #76]	@ (800c95c <prvTaskExitError+0x58>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c916:	d00b      	beq.n	800c930 <prvTaskExitError+0x2c>
	__asm volatile
 800c918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91c:	f383 8811 	msr	BASEPRI, r3
 800c920:	f3bf 8f6f 	isb	sy
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	60fb      	str	r3, [r7, #12]
}
 800c92a:	bf00      	nop
 800c92c:	bf00      	nop
 800c92e:	e7fd      	b.n	800c92c <prvTaskExitError+0x28>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	60bb      	str	r3, [r7, #8]
}
 800c942:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c944:	bf00      	nop
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0fc      	beq.n	800c946 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c94c:	bf00      	nop
 800c94e:	bf00      	nop
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	20000014 	.word	0x20000014

0800c960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c960:	4b07      	ldr	r3, [pc, #28]	@ (800c980 <pxCurrentTCBConst2>)
 800c962:	6819      	ldr	r1, [r3, #0]
 800c964:	6808      	ldr	r0, [r1, #0]
 800c966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96a:	f380 8809 	msr	PSP, r0
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f04f 0000 	mov.w	r0, #0
 800c976:	f380 8811 	msr	BASEPRI, r0
 800c97a:	4770      	bx	lr
 800c97c:	f3af 8000 	nop.w

0800c980 <pxCurrentTCBConst2>:
 800c980:	20003104 	.word	0x20003104
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop

0800c988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c988:	4808      	ldr	r0, [pc, #32]	@ (800c9ac <prvPortStartFirstTask+0x24>)
 800c98a:	6800      	ldr	r0, [r0, #0]
 800c98c:	6800      	ldr	r0, [r0, #0]
 800c98e:	f380 8808 	msr	MSP, r0
 800c992:	f04f 0000 	mov.w	r0, #0
 800c996:	f380 8814 	msr	CONTROL, r0
 800c99a:	b662      	cpsie	i
 800c99c:	b661      	cpsie	f
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	df00      	svc	0
 800c9a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9aa:	bf00      	nop
 800c9ac:	e000ed08 	.word	0xe000ed08

0800c9b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9b6:	4b47      	ldr	r3, [pc, #284]	@ (800cad4 <xPortStartScheduler+0x124>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a47      	ldr	r2, [pc, #284]	@ (800cad8 <xPortStartScheduler+0x128>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d10b      	bne.n	800c9d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	613b      	str	r3, [r7, #16]
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	e7fd      	b.n	800c9d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9d8:	4b3e      	ldr	r3, [pc, #248]	@ (800cad4 <xPortStartScheduler+0x124>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a3f      	ldr	r2, [pc, #252]	@ (800cadc <xPortStartScheduler+0x12c>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d10b      	bne.n	800c9fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	60fb      	str	r3, [r7, #12]
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	e7fd      	b.n	800c9f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9fa:	4b39      	ldr	r3, [pc, #228]	@ (800cae0 <xPortStartScheduler+0x130>)
 800c9fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	22ff      	movs	r2, #255	@ 0xff
 800ca0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	4b31      	ldr	r3, [pc, #196]	@ (800cae4 <xPortStartScheduler+0x134>)
 800ca20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca22:	4b31      	ldr	r3, [pc, #196]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca24:	2207      	movs	r2, #7
 800ca26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca28:	e009      	b.n	800ca3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ca2a:	4b2f      	ldr	r3, [pc, #188]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	4a2d      	ldr	r2, [pc, #180]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca34:	78fb      	ldrb	r3, [r7, #3]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca3e:	78fb      	ldrb	r3, [r7, #3]
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca46:	2b80      	cmp	r3, #128	@ 0x80
 800ca48:	d0ef      	beq.n	800ca2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca4a:	4b27      	ldr	r3, [pc, #156]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f1c3 0307 	rsb	r3, r3, #7
 800ca52:	2b04      	cmp	r3, #4
 800ca54:	d00b      	beq.n	800ca6e <xPortStartScheduler+0xbe>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	60bb      	str	r3, [r7, #8]
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	e7fd      	b.n	800ca6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca6e:	4b1e      	ldr	r3, [pc, #120]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	021b      	lsls	r3, r3, #8
 800ca74:	4a1c      	ldr	r2, [pc, #112]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca78:	4b1b      	ldr	r3, [pc, #108]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca80:	4a19      	ldr	r2, [pc, #100]	@ (800cae8 <xPortStartScheduler+0x138>)
 800ca82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca8c:	4b17      	ldr	r3, [pc, #92]	@ (800caec <xPortStartScheduler+0x13c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a16      	ldr	r2, [pc, #88]	@ (800caec <xPortStartScheduler+0x13c>)
 800ca92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ca96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca98:	4b14      	ldr	r3, [pc, #80]	@ (800caec <xPortStartScheduler+0x13c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a13      	ldr	r2, [pc, #76]	@ (800caec <xPortStartScheduler+0x13c>)
 800ca9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800caa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800caa4:	f000 f8da 	bl	800cc5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800caa8:	4b11      	ldr	r3, [pc, #68]	@ (800caf0 <xPortStartScheduler+0x140>)
 800caaa:	2200      	movs	r2, #0
 800caac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800caae:	f000 f8f9 	bl	800cca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cab2:	4b10      	ldr	r3, [pc, #64]	@ (800caf4 <xPortStartScheduler+0x144>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a0f      	ldr	r2, [pc, #60]	@ (800caf4 <xPortStartScheduler+0x144>)
 800cab8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cabc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cabe:	f7ff ff63 	bl	800c988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cac2:	f001 fc55 	bl	800e370 <vTaskSwitchContext>
	prvTaskExitError();
 800cac6:	f7ff ff1d 	bl	800c904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	e000ed00 	.word	0xe000ed00
 800cad8:	410fc271 	.word	0x410fc271
 800cadc:	410fc270 	.word	0x410fc270
 800cae0:	e000e400 	.word	0xe000e400
 800cae4:	200030bc 	.word	0x200030bc
 800cae8:	200030c0 	.word	0x200030c0
 800caec:	e000ed20 	.word	0xe000ed20
 800caf0:	20000014 	.word	0x20000014
 800caf4:	e000ef34 	.word	0xe000ef34

0800caf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	607b      	str	r3, [r7, #4]
}
 800cb10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb12:	4b10      	ldr	r3, [pc, #64]	@ (800cb54 <vPortEnterCritical+0x5c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	4a0e      	ldr	r2, [pc, #56]	@ (800cb54 <vPortEnterCritical+0x5c>)
 800cb1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb54 <vPortEnterCritical+0x5c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d110      	bne.n	800cb46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb24:	4b0c      	ldr	r3, [pc, #48]	@ (800cb58 <vPortEnterCritical+0x60>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00b      	beq.n	800cb46 <vPortEnterCritical+0x4e>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	603b      	str	r3, [r7, #0]
}
 800cb40:	bf00      	nop
 800cb42:	bf00      	nop
 800cb44:	e7fd      	b.n	800cb42 <vPortEnterCritical+0x4a>
	}
}
 800cb46:	bf00      	nop
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	20000014 	.word	0x20000014
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb62:	4b12      	ldr	r3, [pc, #72]	@ (800cbac <vPortExitCritical+0x50>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <vPortExitCritical+0x26>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	607b      	str	r3, [r7, #4]
}
 800cb7c:	bf00      	nop
 800cb7e:	bf00      	nop
 800cb80:	e7fd      	b.n	800cb7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb82:	4b0a      	ldr	r3, [pc, #40]	@ (800cbac <vPortExitCritical+0x50>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	4a08      	ldr	r2, [pc, #32]	@ (800cbac <vPortExitCritical+0x50>)
 800cb8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb8c:	4b07      	ldr	r3, [pc, #28]	@ (800cbac <vPortExitCritical+0x50>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d105      	bne.n	800cba0 <vPortExitCritical+0x44>
 800cb94:	2300      	movs	r3, #0
 800cb96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cb9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	20000014 	.word	0x20000014

0800cbb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbb0:	f3ef 8009 	mrs	r0, PSP
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	4b15      	ldr	r3, [pc, #84]	@ (800cc10 <pxCurrentTCBConst>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	f01e 0f10 	tst.w	lr, #16
 800cbc0:	bf08      	it	eq
 800cbc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbca:	6010      	str	r0, [r2, #0]
 800cbcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cbd4:	f380 8811 	msr	BASEPRI, r0
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f001 fbc6 	bl	800e370 <vTaskSwitchContext>
 800cbe4:	f04f 0000 	mov.w	r0, #0
 800cbe8:	f380 8811 	msr	BASEPRI, r0
 800cbec:	bc09      	pop	{r0, r3}
 800cbee:	6819      	ldr	r1, [r3, #0]
 800cbf0:	6808      	ldr	r0, [r1, #0]
 800cbf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf6:	f01e 0f10 	tst.w	lr, #16
 800cbfa:	bf08      	it	eq
 800cbfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc00:	f380 8809 	msr	PSP, r0
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	f3af 8000 	nop.w

0800cc10 <pxCurrentTCBConst>:
 800cc10:	20003104 	.word	0x20003104
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop

0800cc18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	607b      	str	r3, [r7, #4]
}
 800cc30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc32:	f001 fae3 	bl	800e1fc <xTaskIncrementTick>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc3c:	4b06      	ldr	r3, [pc, #24]	@ (800cc58 <xPortSysTickHandler+0x40>)
 800cc3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc42:	601a      	str	r2, [r3, #0]
 800cc44:	2300      	movs	r3, #0
 800cc46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	f383 8811 	msr	BASEPRI, r3
}
 800cc4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	e000ed04 	.word	0xe000ed04

0800cc5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc60:	4b0b      	ldr	r3, [pc, #44]	@ (800cc90 <vPortSetupTimerInterrupt+0x34>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc66:	4b0b      	ldr	r3, [pc, #44]	@ (800cc94 <vPortSetupTimerInterrupt+0x38>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc98 <vPortSetupTimerInterrupt+0x3c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a0a      	ldr	r2, [pc, #40]	@ (800cc9c <vPortSetupTimerInterrupt+0x40>)
 800cc72:	fba2 2303 	umull	r2, r3, r2, r3
 800cc76:	099b      	lsrs	r3, r3, #6
 800cc78:	4a09      	ldr	r2, [pc, #36]	@ (800cca0 <vPortSetupTimerInterrupt+0x44>)
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc7e:	4b04      	ldr	r3, [pc, #16]	@ (800cc90 <vPortSetupTimerInterrupt+0x34>)
 800cc80:	2207      	movs	r2, #7
 800cc82:	601a      	str	r2, [r3, #0]
}
 800cc84:	bf00      	nop
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	e000e010 	.word	0xe000e010
 800cc94:	e000e018 	.word	0xe000e018
 800cc98:	20000008 	.word	0x20000008
 800cc9c:	10624dd3 	.word	0x10624dd3
 800cca0:	e000e014 	.word	0xe000e014

0800cca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cca4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ccb4 <vPortEnableVFP+0x10>
 800cca8:	6801      	ldr	r1, [r0, #0]
 800ccaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ccae:	6001      	str	r1, [r0, #0]
 800ccb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ccb2:	bf00      	nop
 800ccb4:	e000ed88 	.word	0xe000ed88

0800ccb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccbe:	f3ef 8305 	mrs	r3, IPSR
 800ccc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b0f      	cmp	r3, #15
 800ccc8:	d915      	bls.n	800ccf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccca:	4a18      	ldr	r2, [pc, #96]	@ (800cd2c <vPortValidateInterruptPriority+0x74>)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	4413      	add	r3, r2
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ccd4:	4b16      	ldr	r3, [pc, #88]	@ (800cd30 <vPortValidateInterruptPriority+0x78>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	7afa      	ldrb	r2, [r7, #11]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d20b      	bcs.n	800ccf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	607b      	str	r3, [r7, #4]
}
 800ccf0:	bf00      	nop
 800ccf2:	bf00      	nop
 800ccf4:	e7fd      	b.n	800ccf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd34 <vPortValidateInterruptPriority+0x7c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cd38 <vPortValidateInterruptPriority+0x80>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d90b      	bls.n	800cd1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	603b      	str	r3, [r7, #0]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <vPortValidateInterruptPriority+0x62>
	}
 800cd1e:	bf00      	nop
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	e000e3f0 	.word	0xe000e3f0
 800cd30:	200030bc 	.word	0x200030bc
 800cd34:	e000ed0c 	.word	0xe000ed0c
 800cd38:	200030c0 	.word	0x200030c0

0800cd3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10b      	bne.n	800cd68 <xQueueGenericReset+0x2c>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	60bb      	str	r3, [r7, #8]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd68:	f7ff fec6 	bl	800caf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd74:	68f9      	ldr	r1, [r7, #12]
 800cd76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cd78:	fb01 f303 	mul.w	r3, r1, r3
 800cd7c:	441a      	add	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2200      	movs	r2, #0
 800cd86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	68f9      	ldr	r1, [r7, #12]
 800cd9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cd9e:	fb01 f303 	mul.w	r3, r1, r3
 800cda2:	441a      	add	r2, r3
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	22ff      	movs	r2, #255	@ 0xff
 800cdac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	22ff      	movs	r2, #255	@ 0xff
 800cdb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d114      	bne.n	800cde8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	691b      	ldr	r3, [r3, #16]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d01a      	beq.n	800cdfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3310      	adds	r3, #16
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f001 fb88 	bl	800e4e0 <xTaskRemoveFromEventList>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d012      	beq.n	800cdfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce0c <xQueueGenericReset+0xd0>)
 800cdd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	e009      	b.n	800cdfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3310      	adds	r3, #16
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fca1 	bl	800c734 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3324      	adds	r3, #36	@ 0x24
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7ff fc9c 	bl	800c734 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cdfc:	f7ff feae 	bl	800cb5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce00:	2301      	movs	r3, #1
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	e000ed04 	.word	0xe000ed04

0800ce10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08e      	sub	sp, #56	@ 0x38
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10b      	bne.n	800ce3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ce24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce36:	bf00      	nop
 800ce38:	bf00      	nop
 800ce3a:	e7fd      	b.n	800ce38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10b      	bne.n	800ce5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop
 800ce58:	e7fd      	b.n	800ce56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <xQueueGenericCreateStatic+0x56>
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <xQueueGenericCreateStatic+0x5a>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e000      	b.n	800ce6c <xQueueGenericCreateStatic+0x5c>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10b      	bne.n	800ce88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	623b      	str	r3, [r7, #32]
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	e7fd      	b.n	800ce84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d102      	bne.n	800ce94 <xQueueGenericCreateStatic+0x84>
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <xQueueGenericCreateStatic+0x88>
 800ce94:	2301      	movs	r3, #1
 800ce96:	e000      	b.n	800ce9a <xQueueGenericCreateStatic+0x8a>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10b      	bne.n	800ceb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	61fb      	str	r3, [r7, #28]
}
 800ceb0:	bf00      	nop
 800ceb2:	bf00      	nop
 800ceb4:	e7fd      	b.n	800ceb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ceb6:	2350      	movs	r3, #80	@ 0x50
 800ceb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	2b50      	cmp	r3, #80	@ 0x50
 800cebe:	d00b      	beq.n	800ced8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	61bb      	str	r3, [r7, #24]
}
 800ced2:	bf00      	nop
 800ced4:	bf00      	nop
 800ced6:	e7fd      	b.n	800ced4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ced8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00d      	beq.n	800cf00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ceec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	4613      	mov	r3, r2
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	68b9      	ldr	r1, [r7, #8]
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f000 f840 	bl	800cf80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3730      	adds	r7, #48	@ 0x30
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b08a      	sub	sp, #40	@ 0x28
 800cf0e:	af02      	add	r7, sp, #8
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	4613      	mov	r3, r2
 800cf16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10b      	bne.n	800cf36 <xQueueGenericCreate+0x2c>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	613b      	str	r3, [r7, #16]
}
 800cf30:	bf00      	nop
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	fb02 f303 	mul.w	r3, r2, r3
 800cf3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	3350      	adds	r3, #80	@ 0x50
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fa07 	bl	800c358 <pvPortMalloc>
 800cf4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d011      	beq.n	800cf76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	3350      	adds	r3, #80	@ 0x50
 800cf5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf64:	79fa      	ldrb	r2, [r7, #7]
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f000 f805 	bl	800cf80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf76:	69bb      	ldr	r3, [r7, #24]
	}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d103      	bne.n	800cf9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	69ba      	ldr	r2, [r7, #24]
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	e002      	b.n	800cfa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cfae:	2101      	movs	r1, #1
 800cfb0:	69b8      	ldr	r0, [r7, #24]
 800cfb2:	f7ff fec3 	bl	800cd3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	78fa      	ldrb	r2, [r7, #3]
 800cfba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00e      	beq.n	800cff2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f8a3 	bl	800d138 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b086      	sub	sp, #24
 800cffe:	af00      	add	r7, sp, #0
 800d000:	4603      	mov	r3, r0
 800d002:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d004:	2301      	movs	r3, #1
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	2300      	movs	r3, #0
 800d00a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	461a      	mov	r2, r3
 800d010:	6939      	ldr	r1, [r7, #16]
 800d012:	6978      	ldr	r0, [r7, #20]
 800d014:	f7ff ff79 	bl	800cf0a <xQueueGenericCreate>
 800d018:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f7ff ffd3 	bl	800cfc6 <prvInitialiseMutex>

		return xNewQueue;
 800d020:	68fb      	ldr	r3, [r7, #12]
	}
 800d022:	4618      	mov	r0, r3
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b088      	sub	sp, #32
 800d02e:	af02      	add	r7, sp, #8
 800d030:	4603      	mov	r3, r0
 800d032:	6039      	str	r1, [r7, #0]
 800d034:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d036:	2301      	movs	r3, #1
 800d038:	617b      	str	r3, [r7, #20]
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2200      	movs	r2, #0
 800d046:	6939      	ldr	r1, [r7, #16]
 800d048:	6978      	ldr	r0, [r7, #20]
 800d04a:	f7ff fee1 	bl	800ce10 <xQueueGenericCreateStatic>
 800d04e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f7ff ffb8 	bl	800cfc6 <prvInitialiseMutex>

		return xNewQueue;
 800d056:	68fb      	ldr	r3, [r7, #12]
	}
 800d058:	4618      	mov	r0, r3
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d060:	b590      	push	{r4, r7, lr}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10b      	bne.n	800d08a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	60fb      	str	r3, [r7, #12]
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop
 800d088:	e7fd      	b.n	800d086 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	689c      	ldr	r4, [r3, #8]
 800d08e:	f001 fbed 	bl	800e86c <xTaskGetCurrentTaskHandle>
 800d092:	4603      	mov	r3, r0
 800d094:	429c      	cmp	r4, r3
 800d096:	d111      	bne.n	800d0bc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	1e5a      	subs	r2, r3, #1
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	6938      	ldr	r0, [r7, #16]
 800d0b2:	f000 f841 	bl	800d138 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]
 800d0ba:	e001      	b.n	800d0c0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d0c0:	697b      	ldr	r3, [r7, #20]
	}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	371c      	adds	r7, #28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd90      	pop	{r4, r7, pc}

0800d0ca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d0ca:	b590      	push	{r4, r7, lr}
 800d0cc:	b087      	sub	sp, #28
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10b      	bne.n	800d0f6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	60fb      	str	r3, [r7, #12]
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	e7fd      	b.n	800d0f2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	689c      	ldr	r4, [r3, #8]
 800d0fa:	f001 fbb7 	bl	800e86c <xTaskGetCurrentTaskHandle>
 800d0fe:	4603      	mov	r3, r0
 800d100:	429c      	cmp	r4, r3
 800d102:	d107      	bne.n	800d114 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d10e:	2301      	movs	r3, #1
 800d110:	617b      	str	r3, [r7, #20]
 800d112:	e00c      	b.n	800d12e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6938      	ldr	r0, [r7, #16]
 800d118:	f000 fa90 	bl	800d63c <xQueueSemaphoreTake>
 800d11c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d004      	beq.n	800d12e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d12e:	697b      	ldr	r3, [r7, #20]
	}
 800d130:	4618      	mov	r0, r3
 800d132:	371c      	adds	r7, #28
 800d134:	46bd      	mov	sp, r7
 800d136:	bd90      	pop	{r4, r7, pc}

0800d138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08e      	sub	sp, #56	@ 0x38
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d146:	2300      	movs	r3, #0
 800d148:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10b      	bne.n	800d16c <xQueueGenericSend+0x34>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	e7fd      	b.n	800d168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d103      	bne.n	800d17a <xQueueGenericSend+0x42>
 800d172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <xQueueGenericSend+0x46>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <xQueueGenericSend+0x48>
 800d17e:	2300      	movs	r3, #0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10b      	bne.n	800d19c <xQueueGenericSend+0x64>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	e7fd      	b.n	800d198 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d103      	bne.n	800d1aa <xQueueGenericSend+0x72>
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d101      	bne.n	800d1ae <xQueueGenericSend+0x76>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e000      	b.n	800d1b0 <xQueueGenericSend+0x78>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10b      	bne.n	800d1cc <xQueueGenericSend+0x94>
	__asm volatile
 800d1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	623b      	str	r3, [r7, #32]
}
 800d1c6:	bf00      	nop
 800d1c8:	bf00      	nop
 800d1ca:	e7fd      	b.n	800d1c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1cc:	f001 fb5e 	bl	800e88c <xTaskGetSchedulerState>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d102      	bne.n	800d1dc <xQueueGenericSend+0xa4>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <xQueueGenericSend+0xa8>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e000      	b.n	800d1e2 <xQueueGenericSend+0xaa>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <xQueueGenericSend+0xc6>
	__asm volatile
 800d1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ea:	f383 8811 	msr	BASEPRI, r3
 800d1ee:	f3bf 8f6f 	isb	sy
 800d1f2:	f3bf 8f4f 	dsb	sy
 800d1f6:	61fb      	str	r3, [r7, #28]
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	e7fd      	b.n	800d1fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1fe:	f7ff fc7b 	bl	800caf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d302      	bcc.n	800d214 <xQueueGenericSend+0xdc>
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b02      	cmp	r3, #2
 800d212:	d129      	bne.n	800d268 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	68b9      	ldr	r1, [r7, #8]
 800d218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d21a:	f000 fb37 	bl	800d88c <prvCopyDataToQueue>
 800d21e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d224:	2b00      	cmp	r3, #0
 800d226:	d010      	beq.n	800d24a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22a:	3324      	adds	r3, #36	@ 0x24
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 f957 	bl	800e4e0 <xTaskRemoveFromEventList>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d013      	beq.n	800d260 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d238:	4b3f      	ldr	r3, [pc, #252]	@ (800d338 <xQueueGenericSend+0x200>)
 800d23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	e00a      	b.n	800d260 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d250:	4b39      	ldr	r3, [pc, #228]	@ (800d338 <xQueueGenericSend+0x200>)
 800d252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d256:	601a      	str	r2, [r3, #0]
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d260:	f7ff fc7c 	bl	800cb5c <vPortExitCritical>
				return pdPASS;
 800d264:	2301      	movs	r3, #1
 800d266:	e063      	b.n	800d330 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d103      	bne.n	800d276 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d26e:	f7ff fc75 	bl	800cb5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d272:	2300      	movs	r3, #0
 800d274:	e05c      	b.n	800d330 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d27c:	f107 0314 	add.w	r3, r7, #20
 800d280:	4618      	mov	r0, r3
 800d282:	f001 f991 	bl	800e5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d286:	2301      	movs	r3, #1
 800d288:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d28a:	f7ff fc67 	bl	800cb5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d28e:	f000 fef9 	bl	800e084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d292:	f7ff fc31 	bl	800caf8 <vPortEnterCritical>
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d29c:	b25b      	sxtb	r3, r3
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d103      	bne.n	800d2ac <xQueueGenericSend+0x174>
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d2b2:	b25b      	sxtb	r3, r3
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d103      	bne.n	800d2c2 <xQueueGenericSend+0x18a>
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d2c2:	f7ff fc4b 	bl	800cb5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2c6:	1d3a      	adds	r2, r7, #4
 800d2c8:	f107 0314 	add.w	r3, r7, #20
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f001 f980 	bl	800e5d4 <xTaskCheckForTimeOut>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d124      	bne.n	800d324 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2dc:	f000 fbce 	bl	800da7c <prvIsQueueFull>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d018      	beq.n	800d318 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	3310      	adds	r3, #16
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f001 f8a4 	bl	800e43c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2f6:	f000 fb59 	bl	800d9ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2fa:	f000 fed1 	bl	800e0a0 <xTaskResumeAll>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	f47f af7c 	bne.w	800d1fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d306:	4b0c      	ldr	r3, [pc, #48]	@ (800d338 <xQueueGenericSend+0x200>)
 800d308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	e772      	b.n	800d1fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d31a:	f000 fb47 	bl	800d9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d31e:	f000 febf 	bl	800e0a0 <xTaskResumeAll>
 800d322:	e76c      	b.n	800d1fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d326:	f000 fb41 	bl	800d9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d32a:	f000 feb9 	bl	800e0a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d32e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d330:	4618      	mov	r0, r3
 800d332:	3738      	adds	r7, #56	@ 0x38
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	e000ed04 	.word	0xe000ed04

0800d33c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b090      	sub	sp, #64	@ 0x40
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10b      	bne.n	800d36c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d366:	bf00      	nop
 800d368:	bf00      	nop
 800d36a:	e7fd      	b.n	800d368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d103      	bne.n	800d37a <xQueueGenericSendFromISR+0x3e>
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <xQueueGenericSendFromISR+0x42>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e000      	b.n	800d380 <xQueueGenericSendFromISR+0x44>
 800d37e:	2300      	movs	r3, #0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10b      	bne.n	800d39c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d396:	bf00      	nop
 800d398:	bf00      	nop
 800d39a:	e7fd      	b.n	800d398 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d103      	bne.n	800d3aa <xQueueGenericSendFromISR+0x6e>
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d101      	bne.n	800d3ae <xQueueGenericSendFromISR+0x72>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e000      	b.n	800d3b0 <xQueueGenericSendFromISR+0x74>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10b      	bne.n	800d3cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	623b      	str	r3, [r7, #32]
}
 800d3c6:	bf00      	nop
 800d3c8:	bf00      	nop
 800d3ca:	e7fd      	b.n	800d3c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3cc:	f7ff fc74 	bl	800ccb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d3d0:	f3ef 8211 	mrs	r2, BASEPRI
 800d3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	61fa      	str	r2, [r7, #28]
 800d3e6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d302      	bcc.n	800d3fe <xQueueGenericSendFromISR+0xc2>
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	d12f      	bne.n	800d45e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d414:	f000 fa3a 	bl	800d88c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d418:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d420:	d112      	bne.n	800d448 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d426:	2b00      	cmp	r3, #0
 800d428:	d016      	beq.n	800d458 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42c:	3324      	adds	r3, #36	@ 0x24
 800d42e:	4618      	mov	r0, r3
 800d430:	f001 f856 	bl	800e4e0 <xTaskRemoveFromEventList>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00e      	beq.n	800d458 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	e007      	b.n	800d458 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d44c:	3301      	adds	r3, #1
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	b25a      	sxtb	r2, r3
 800d452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d458:	2301      	movs	r3, #1
 800d45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d45c:	e001      	b.n	800d462 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d464:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f383 8811 	msr	BASEPRI, r3
}
 800d46c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d470:	4618      	mov	r0, r3
 800d472:	3740      	adds	r7, #64	@ 0x40
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08c      	sub	sp, #48	@ 0x30
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d484:	2300      	movs	r3, #0
 800d486:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10b      	bne.n	800d4aa <xQueueReceive+0x32>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	623b      	str	r3, [r7, #32]
}
 800d4a4:	bf00      	nop
 800d4a6:	bf00      	nop
 800d4a8:	e7fd      	b.n	800d4a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d103      	bne.n	800d4b8 <xQueueReceive+0x40>
 800d4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d101      	bne.n	800d4bc <xQueueReceive+0x44>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e000      	b.n	800d4be <xQueueReceive+0x46>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10b      	bne.n	800d4da <xQueueReceive+0x62>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	61fb      	str	r3, [r7, #28]
}
 800d4d4:	bf00      	nop
 800d4d6:	bf00      	nop
 800d4d8:	e7fd      	b.n	800d4d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4da:	f001 f9d7 	bl	800e88c <xTaskGetSchedulerState>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <xQueueReceive+0x72>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <xQueueReceive+0x76>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e000      	b.n	800d4f0 <xQueueReceive+0x78>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10b      	bne.n	800d50c <xQueueReceive+0x94>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	61bb      	str	r3, [r7, #24]
}
 800d506:	bf00      	nop
 800d508:	bf00      	nop
 800d50a:	e7fd      	b.n	800d508 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d50c:	f7ff faf4 	bl	800caf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d514:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01f      	beq.n	800d55c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d51c:	68b9      	ldr	r1, [r7, #8]
 800d51e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d520:	f000 fa1e 	bl	800d960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d526:	1e5a      	subs	r2, r3, #1
 800d528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00f      	beq.n	800d554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d536:	3310      	adds	r3, #16
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 ffd1 	bl	800e4e0 <xTaskRemoveFromEventList>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d007      	beq.n	800d554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d544:	4b3c      	ldr	r3, [pc, #240]	@ (800d638 <xQueueReceive+0x1c0>)
 800d546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d554:	f7ff fb02 	bl	800cb5c <vPortExitCritical>
				return pdPASS;
 800d558:	2301      	movs	r3, #1
 800d55a:	e069      	b.n	800d630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d103      	bne.n	800d56a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d562:	f7ff fafb 	bl	800cb5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d566:	2300      	movs	r3, #0
 800d568:	e062      	b.n	800d630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d570:	f107 0310 	add.w	r3, r7, #16
 800d574:	4618      	mov	r0, r3
 800d576:	f001 f817 	bl	800e5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d57a:	2301      	movs	r3, #1
 800d57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d57e:	f7ff faed 	bl	800cb5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d582:	f000 fd7f 	bl	800e084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d586:	f7ff fab7 	bl	800caf8 <vPortEnterCritical>
 800d58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d590:	b25b      	sxtb	r3, r3
 800d592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d596:	d103      	bne.n	800d5a0 <xQueueReceive+0x128>
 800d598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5a6:	b25b      	sxtb	r3, r3
 800d5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ac:	d103      	bne.n	800d5b6 <xQueueReceive+0x13e>
 800d5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5b6:	f7ff fad1 	bl	800cb5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5ba:	1d3a      	adds	r2, r7, #4
 800d5bc:	f107 0310 	add.w	r3, r7, #16
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f001 f806 	bl	800e5d4 <xTaskCheckForTimeOut>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d123      	bne.n	800d616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5d0:	f000 fa3e 	bl	800da50 <prvIsQueueEmpty>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d017      	beq.n	800d60a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5dc:	3324      	adds	r3, #36	@ 0x24
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 ff2a 	bl	800e43c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5ea:	f000 f9df 	bl	800d9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5ee:	f000 fd57 	bl	800e0a0 <xTaskResumeAll>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d189      	bne.n	800d50c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d5f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d638 <xQueueReceive+0x1c0>)
 800d5fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	e780      	b.n	800d50c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d60c:	f000 f9ce 	bl	800d9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d610:	f000 fd46 	bl	800e0a0 <xTaskResumeAll>
 800d614:	e77a      	b.n	800d50c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d618:	f000 f9c8 	bl	800d9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d61c:	f000 fd40 	bl	800e0a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d622:	f000 fa15 	bl	800da50 <prvIsQueueEmpty>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f43f af6f 	beq.w	800d50c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d62e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d630:	4618      	mov	r0, r3
 800d632:	3730      	adds	r7, #48	@ 0x30
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08e      	sub	sp, #56	@ 0x38
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d646:	2300      	movs	r3, #0
 800d648:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d64e:	2300      	movs	r3, #0
 800d650:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10b      	bne.n	800d670 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	623b      	str	r3, [r7, #32]
}
 800d66a:	bf00      	nop
 800d66c:	bf00      	nop
 800d66e:	e7fd      	b.n	800d66c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00b      	beq.n	800d690 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	61fb      	str	r3, [r7, #28]
}
 800d68a:	bf00      	nop
 800d68c:	bf00      	nop
 800d68e:	e7fd      	b.n	800d68c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d690:	f001 f8fc 	bl	800e88c <xTaskGetSchedulerState>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <xQueueSemaphoreTake+0x64>
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <xQueueSemaphoreTake+0x68>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <xQueueSemaphoreTake+0x6a>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10b      	bne.n	800d6c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	61bb      	str	r3, [r7, #24]
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	e7fd      	b.n	800d6be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6c2:	f7ff fa19 	bl	800caf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d024      	beq.n	800d71c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d4:	1e5a      	subs	r2, r3, #1
 800d6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d104      	bne.n	800d6ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d6e2:	f001 fa4d 	bl	800eb80 <pvTaskIncrementMutexHeldCount>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00f      	beq.n	800d714 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f6:	3310      	adds	r3, #16
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 fef1 	bl	800e4e0 <xTaskRemoveFromEventList>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d007      	beq.n	800d714 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d704:	4b54      	ldr	r3, [pc, #336]	@ (800d858 <xQueueSemaphoreTake+0x21c>)
 800d706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d714:	f7ff fa22 	bl	800cb5c <vPortExitCritical>
				return pdPASS;
 800d718:	2301      	movs	r3, #1
 800d71a:	e098      	b.n	800d84e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d112      	bne.n	800d748 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00b      	beq.n	800d740 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	617b      	str	r3, [r7, #20]
}
 800d73a:	bf00      	nop
 800d73c:	bf00      	nop
 800d73e:	e7fd      	b.n	800d73c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d740:	f7ff fa0c 	bl	800cb5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d744:	2300      	movs	r3, #0
 800d746:	e082      	b.n	800d84e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d74e:	f107 030c 	add.w	r3, r7, #12
 800d752:	4618      	mov	r0, r3
 800d754:	f000 ff28 	bl	800e5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d75c:	f7ff f9fe 	bl	800cb5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d760:	f000 fc90 	bl	800e084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d764:	f7ff f9c8 	bl	800caf8 <vPortEnterCritical>
 800d768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d76e:	b25b      	sxtb	r3, r3
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d774:	d103      	bne.n	800d77e <xQueueSemaphoreTake+0x142>
 800d776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d784:	b25b      	sxtb	r3, r3
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d103      	bne.n	800d794 <xQueueSemaphoreTake+0x158>
 800d78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d794:	f7ff f9e2 	bl	800cb5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d798:	463a      	mov	r2, r7
 800d79a:	f107 030c 	add.w	r3, r7, #12
 800d79e:	4611      	mov	r1, r2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 ff17 	bl	800e5d4 <xTaskCheckForTimeOut>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d132      	bne.n	800d812 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7ae:	f000 f94f 	bl	800da50 <prvIsQueueEmpty>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d026      	beq.n	800d806 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d109      	bne.n	800d7d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d7c0:	f7ff f99a 	bl	800caf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f001 f87d 	bl	800e8c8 <xTaskPriorityInherit>
 800d7ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d7d0:	f7ff f9c4 	bl	800cb5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d6:	3324      	adds	r3, #36	@ 0x24
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 fe2d 	bl	800e43c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7e4:	f000 f8e2 	bl	800d9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7e8:	f000 fc5a 	bl	800e0a0 <xTaskResumeAll>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f47f af67 	bne.w	800d6c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d7f4:	4b18      	ldr	r3, [pc, #96]	@ (800d858 <xQueueSemaphoreTake+0x21c>)
 800d7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7fa:	601a      	str	r2, [r3, #0]
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	e75d      	b.n	800d6c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d808:	f000 f8d0 	bl	800d9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d80c:	f000 fc48 	bl	800e0a0 <xTaskResumeAll>
 800d810:	e757      	b.n	800d6c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d814:	f000 f8ca 	bl	800d9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d818:	f000 fc42 	bl	800e0a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d81c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d81e:	f000 f917 	bl	800da50 <prvIsQueueEmpty>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	f43f af4c 	beq.w	800d6c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00d      	beq.n	800d84c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d830:	f7ff f962 	bl	800caf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d836:	f000 f811 	bl	800d85c <prvGetDisinheritPriorityAfterTimeout>
 800d83a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d842:	4618      	mov	r0, r3
 800d844:	f001 f918 	bl	800ea78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d848:	f7ff f988 	bl	800cb5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d84c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3738      	adds	r7, #56	@ 0x38
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d006      	beq.n	800d87a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e001      	b.n	800d87e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d87e:	68fb      	ldr	r3, [r7, #12]
	}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d898:	2300      	movs	r3, #0
 800d89a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10d      	bne.n	800d8c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d14d      	bne.n	800d94e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f001 f86e 	bl	800e998 <xTaskPriorityDisinherit>
 800d8bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	609a      	str	r2, [r3, #8]
 800d8c4:	e043      	b.n	800d94e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d119      	bne.n	800d900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6858      	ldr	r0, [r3, #4]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	68b9      	ldr	r1, [r7, #8]
 800d8d8:	f002 fa54 	bl	800fd84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	685a      	ldr	r2, [r3, #4]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8e4:	441a      	add	r2, r3
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d32b      	bcc.n	800d94e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	605a      	str	r2, [r3, #4]
 800d8fe:	e026      	b.n	800d94e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	68d8      	ldr	r0, [r3, #12]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d908:	461a      	mov	r2, r3
 800d90a:	68b9      	ldr	r1, [r7, #8]
 800d90c:	f002 fa3a 	bl	800fd84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	68da      	ldr	r2, [r3, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d918:	425b      	negs	r3, r3
 800d91a:	441a      	add	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d207      	bcs.n	800d93c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d934:	425b      	negs	r3, r3
 800d936:	441a      	add	r2, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d105      	bne.n	800d94e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	1c5a      	adds	r2, r3, #1
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d956:	697b      	ldr	r3, [r7, #20]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d018      	beq.n	800d9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	68da      	ldr	r2, [r3, #12]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d97a:	441a      	add	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	68da      	ldr	r2, [r3, #12]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d303      	bcc.n	800d994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68d9      	ldr	r1, [r3, #12]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d99c:	461a      	mov	r2, r3
 800d99e:	6838      	ldr	r0, [r7, #0]
 800d9a0:	f002 f9f0 	bl	800fd84 <memcpy>
	}
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d9b4:	f7ff f8a0 	bl	800caf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9c0:	e011      	b.n	800d9e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d012      	beq.n	800d9f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	3324      	adds	r3, #36	@ 0x24
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 fd86 	bl	800e4e0 <xTaskRemoveFromEventList>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d9da:	f000 fe5f 	bl	800e69c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	dce9      	bgt.n	800d9c2 <prvUnlockQueue+0x16>
 800d9ee:	e000      	b.n	800d9f2 <prvUnlockQueue+0x46>
					break;
 800d9f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	22ff      	movs	r2, #255	@ 0xff
 800d9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d9fa:	f7ff f8af 	bl	800cb5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d9fe:	f7ff f87b 	bl	800caf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da0a:	e011      	b.n	800da30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d012      	beq.n	800da3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	3310      	adds	r3, #16
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fd61 	bl	800e4e0 <xTaskRemoveFromEventList>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da24:	f000 fe3a 	bl	800e69c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da28:	7bbb      	ldrb	r3, [r7, #14]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da34:	2b00      	cmp	r3, #0
 800da36:	dce9      	bgt.n	800da0c <prvUnlockQueue+0x60>
 800da38:	e000      	b.n	800da3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	22ff      	movs	r2, #255	@ 0xff
 800da40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800da44:	f7ff f88a 	bl	800cb5c <vPortExitCritical>
}
 800da48:	bf00      	nop
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da58:	f7ff f84e 	bl	800caf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da64:	2301      	movs	r3, #1
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	e001      	b.n	800da6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da6e:	f7ff f875 	bl	800cb5c <vPortExitCritical>

	return xReturn;
 800da72:	68fb      	ldr	r3, [r7, #12]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da84:	f7ff f838 	bl	800caf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da90:	429a      	cmp	r2, r3
 800da92:	d102      	bne.n	800da9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da94:	2301      	movs	r3, #1
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	e001      	b.n	800da9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da9e:	f7ff f85d 	bl	800cb5c <vPortExitCritical>

	return xReturn;
 800daa2:	68fb      	ldr	r3, [r7, #12]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dab6:	2300      	movs	r3, #0
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	e014      	b.n	800dae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dabc:	4a0f      	ldr	r2, [pc, #60]	@ (800dafc <vQueueAddToRegistry+0x50>)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10b      	bne.n	800dae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dac8:	490c      	ldr	r1, [pc, #48]	@ (800dafc <vQueueAddToRegistry+0x50>)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dad2:	4a0a      	ldr	r2, [pc, #40]	@ (800dafc <vQueueAddToRegistry+0x50>)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	4413      	add	r3, r2
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dade:	e006      	b.n	800daee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3301      	adds	r3, #1
 800dae4:	60fb      	str	r3, [r7, #12]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2b07      	cmp	r3, #7
 800daea:	d9e7      	bls.n	800dabc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800daec:	bf00      	nop
 800daee:	bf00      	nop
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	200030c4 	.word	0x200030c4

0800db00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800db10:	f7fe fff2 	bl	800caf8 <vPortEnterCritical>
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db1a:	b25b      	sxtb	r3, r3
 800db1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db20:	d103      	bne.n	800db2a <vQueueWaitForMessageRestricted+0x2a>
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2200      	movs	r2, #0
 800db26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db30:	b25b      	sxtb	r3, r3
 800db32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db36:	d103      	bne.n	800db40 <vQueueWaitForMessageRestricted+0x40>
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db40:	f7ff f80c 	bl	800cb5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d106      	bne.n	800db5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	3324      	adds	r3, #36	@ 0x24
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	4618      	mov	r0, r3
 800db56:	f000 fc97 	bl	800e488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db5a:	6978      	ldr	r0, [r7, #20]
 800db5c:	f7ff ff26 	bl	800d9ac <prvUnlockQueue>
	}
 800db60:	bf00      	nop
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08e      	sub	sp, #56	@ 0x38
 800db6c:	af04      	add	r7, sp, #16
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10b      	bne.n	800db94 <xTaskCreateStatic+0x2c>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	623b      	str	r3, [r7, #32]
}
 800db8e:	bf00      	nop
 800db90:	bf00      	nop
 800db92:	e7fd      	b.n	800db90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10b      	bne.n	800dbb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	61fb      	str	r3, [r7, #28]
}
 800dbac:	bf00      	nop
 800dbae:	bf00      	nop
 800dbb0:	e7fd      	b.n	800dbae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dbb2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800dbb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800dbbe:	d00b      	beq.n	800dbd8 <xTaskCreateStatic+0x70>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	61bb      	str	r3, [r7, #24]
}
 800dbd2:	bf00      	nop
 800dbd4:	bf00      	nop
 800dbd6:	e7fd      	b.n	800dbd4 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dbd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d01e      	beq.n	800dc1e <xTaskCreateStatic+0xb6>
 800dbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d01b      	beq.n	800dc1e <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	9303      	str	r3, [sp, #12]
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfe:	9302      	str	r3, [sp, #8]
 800dc00:	f107 0314 	add.w	r3, r7, #20
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f000 f851 	bl	800dcb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc18:	f000 f91e 	bl	800de58 <prvAddNewTaskToReadyList>
 800dc1c:	e001      	b.n	800dc22 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc22:	697b      	ldr	r3, [r7, #20]
	}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3728      	adds	r7, #40	@ 0x28
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08c      	sub	sp, #48	@ 0x30
 800dc30:	af04      	add	r7, sp, #16
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fb89 	bl	800c358 <pvPortMalloc>
 800dc46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00f      	beq.n	800dc6e <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc4e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800dc52:	f7fe fb81 	bl	800c358 <pvPortMalloc>
 800dc56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc64:	e005      	b.n	800dc72 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc66:	6978      	ldr	r0, [r7, #20]
 800dc68:	f7fe fc44 	bl	800c4f4 <vPortFree>
 800dc6c:	e001      	b.n	800dc72 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d017      	beq.n	800dca8 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc80:	88fa      	ldrh	r2, [r7, #6]
 800dc82:	2300      	movs	r3, #0
 800dc84:	9303      	str	r3, [sp, #12]
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	9302      	str	r3, [sp, #8]
 800dc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8c:	9301      	str	r3, [sp, #4]
 800dc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	68b9      	ldr	r1, [r7, #8]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 f80e 	bl	800dcb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc9c:	69f8      	ldr	r0, [r7, #28]
 800dc9e:	f000 f8db 	bl	800de58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dca2:	2301      	movs	r3, #1
 800dca4:	61bb      	str	r3, [r7, #24]
 800dca6:	e002      	b.n	800dcae <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dca8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dcae:	69bb      	ldr	r3, [r7, #24]
	}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	461a      	mov	r2, r3
 800dcd0:	21a5      	movs	r1, #165	@ 0xa5
 800dcd2:	f001 ff92 	bl	800fbfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dce0:	3b01      	subs	r3, #1
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	f023 0307 	bic.w	r3, r3, #7
 800dcee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	f003 0307 	and.w	r3, r3, #7
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00b      	beq.n	800dd12 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	617b      	str	r3, [r7, #20]
}
 800dd0c:	bf00      	nop
 800dd0e:	bf00      	nop
 800dd10:	e7fd      	b.n	800dd0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d01f      	beq.n	800dd58 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd18:	2300      	movs	r3, #0
 800dd1a:	61fb      	str	r3, [r7, #28]
 800dd1c:	e012      	b.n	800dd44 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	4413      	add	r3, r2
 800dd24:	7819      	ldrb	r1, [r3, #0]
 800dd26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	3334      	adds	r3, #52	@ 0x34
 800dd2e:	460a      	mov	r2, r1
 800dd30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd32:	68ba      	ldr	r2, [r7, #8]
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	4413      	add	r3, r2
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d006      	beq.n	800dd4c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	3301      	adds	r3, #1
 800dd42:	61fb      	str	r3, [r7, #28]
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	2b0f      	cmp	r3, #15
 800dd48:	d9e9      	bls.n	800dd1e <prvInitialiseNewTask+0x66>
 800dd4a:	e000      	b.n	800dd4e <prvInitialiseNewTask+0x96>
			{
				break;
 800dd4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd56:	e003      	b.n	800dd60 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd62:	2b37      	cmp	r3, #55	@ 0x37
 800dd64:	d901      	bls.n	800dd6a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd66:	2337      	movs	r3, #55	@ 0x37
 800dd68:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd74:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd78:	2200      	movs	r2, #0
 800dd7a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7e:	3304      	adds	r3, #4
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fcf7 	bl	800c774 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd88:	3318      	adds	r3, #24
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fe fcf2 	bl	800c774 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dda4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb8:	3358      	adds	r3, #88	@ 0x58
 800ddba:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f001 ff1a 	bl	800fbfa <memset>
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc8:	4a20      	ldr	r2, [pc, #128]	@ (800de4c <prvInitialiseNewTask+0x194>)
 800ddca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddce:	4a20      	ldr	r2, [pc, #128]	@ (800de50 <prvInitialiseNewTask+0x198>)
 800ddd0:	661a      	str	r2, [r3, #96]	@ 0x60
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd4:	4a1f      	ldr	r2, [pc, #124]	@ (800de54 <prvInitialiseNewTask+0x19c>)
 800ddd6:	665a      	str	r2, [r3, #100]	@ 0x64
 800ddd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddda:	f04f 0201 	mov.w	r2, #1
 800ddde:	f04f 0300 	mov.w	r3, #0
 800dde2:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 800dde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde8:	f243 320e 	movw	r2, #13070	@ 0x330e
 800ddec:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800ddf6:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfc:	f241 2234 	movw	r2, #4660	@ 0x1234
 800de00:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 800de04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de06:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 800de0a:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 800de0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de10:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 800de14:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800de18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de1a:	2205      	movs	r2, #5
 800de1c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 800de20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de22:	220b      	movs	r2, #11
 800de24:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de28:	683a      	ldr	r2, [r7, #0]
 800de2a:	68f9      	ldr	r1, [r7, #12]
 800de2c:	69b8      	ldr	r0, [r7, #24]
 800de2e:	f7fe fd35 	bl	800c89c <pxPortInitialiseStack>
 800de32:	4602      	mov	r2, r0
 800de34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d002      	beq.n	800de44 <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de44:	bf00      	nop
 800de46:	3720      	adds	r7, #32
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20003764 	.word	0x20003764
 800de50:	200037cc 	.word	0x200037cc
 800de54:	20003834 	.word	0x20003834

0800de58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de60:	f7fe fe4a 	bl	800caf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de64:	4b2d      	ldr	r3, [pc, #180]	@ (800df1c <prvAddNewTaskToReadyList+0xc4>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3301      	adds	r3, #1
 800de6a:	4a2c      	ldr	r2, [pc, #176]	@ (800df1c <prvAddNewTaskToReadyList+0xc4>)
 800de6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de6e:	4b2c      	ldr	r3, [pc, #176]	@ (800df20 <prvAddNewTaskToReadyList+0xc8>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d109      	bne.n	800de8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de76:	4a2a      	ldr	r2, [pc, #168]	@ (800df20 <prvAddNewTaskToReadyList+0xc8>)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de7c:	4b27      	ldr	r3, [pc, #156]	@ (800df1c <prvAddNewTaskToReadyList+0xc4>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d110      	bne.n	800dea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de84:	f000 fc2e 	bl	800e6e4 <prvInitialiseTaskLists>
 800de88:	e00d      	b.n	800dea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de8a:	4b26      	ldr	r3, [pc, #152]	@ (800df24 <prvAddNewTaskToReadyList+0xcc>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d109      	bne.n	800dea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de92:	4b23      	ldr	r3, [pc, #140]	@ (800df20 <prvAddNewTaskToReadyList+0xc8>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d802      	bhi.n	800dea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dea0:	4a1f      	ldr	r2, [pc, #124]	@ (800df20 <prvAddNewTaskToReadyList+0xc8>)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dea6:	4b20      	ldr	r3, [pc, #128]	@ (800df28 <prvAddNewTaskToReadyList+0xd0>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3301      	adds	r3, #1
 800deac:	4a1e      	ldr	r2, [pc, #120]	@ (800df28 <prvAddNewTaskToReadyList+0xd0>)
 800deae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800deb0:	4b1d      	ldr	r3, [pc, #116]	@ (800df28 <prvAddNewTaskToReadyList+0xd0>)
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800debc:	4b1b      	ldr	r3, [pc, #108]	@ (800df2c <prvAddNewTaskToReadyList+0xd4>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d903      	bls.n	800decc <prvAddNewTaskToReadyList+0x74>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec8:	4a18      	ldr	r2, [pc, #96]	@ (800df2c <prvAddNewTaskToReadyList+0xd4>)
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4a15      	ldr	r2, [pc, #84]	@ (800df30 <prvAddNewTaskToReadyList+0xd8>)
 800deda:	441a      	add	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3304      	adds	r3, #4
 800dee0:	4619      	mov	r1, r3
 800dee2:	4610      	mov	r0, r2
 800dee4:	f7fe fc53 	bl	800c78e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dee8:	f7fe fe38 	bl	800cb5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800deec:	4b0d      	ldr	r3, [pc, #52]	@ (800df24 <prvAddNewTaskToReadyList+0xcc>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00e      	beq.n	800df12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800def4:	4b0a      	ldr	r3, [pc, #40]	@ (800df20 <prvAddNewTaskToReadyList+0xc8>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defe:	429a      	cmp	r2, r3
 800df00:	d207      	bcs.n	800df12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df02:	4b0c      	ldr	r3, [pc, #48]	@ (800df34 <prvAddNewTaskToReadyList+0xdc>)
 800df04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df12:	bf00      	nop
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	200035d8 	.word	0x200035d8
 800df20:	20003104 	.word	0x20003104
 800df24:	200035e4 	.word	0x200035e4
 800df28:	200035f4 	.word	0x200035f4
 800df2c:	200035e0 	.word	0x200035e0
 800df30:	20003108 	.word	0x20003108
 800df34:	e000ed04 	.word	0xe000ed04

0800df38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df40:	2300      	movs	r3, #0
 800df42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d018      	beq.n	800df7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df4a:	4b14      	ldr	r3, [pc, #80]	@ (800df9c <vTaskDelay+0x64>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00b      	beq.n	800df6a <vTaskDelay+0x32>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	60bb      	str	r3, [r7, #8]
}
 800df64:	bf00      	nop
 800df66:	bf00      	nop
 800df68:	e7fd      	b.n	800df66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800df6a:	f000 f88b 	bl	800e084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df6e:	2100      	movs	r1, #0
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fe19 	bl	800eba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df76:	f000 f893 	bl	800e0a0 <xTaskResumeAll>
 800df7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d107      	bne.n	800df92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800df82:	4b07      	ldr	r3, [pc, #28]	@ (800dfa0 <vTaskDelay+0x68>)
 800df84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df92:	bf00      	nop
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20003600 	.word	0x20003600
 800dfa0:	e000ed04 	.word	0xe000ed04

0800dfa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08a      	sub	sp, #40	@ 0x28
 800dfa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dfb2:	463a      	mov	r2, r7
 800dfb4:	1d39      	adds	r1, r7, #4
 800dfb6:	f107 0308 	add.w	r3, r7, #8
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe f998 	bl	800c2f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dfc0:	6839      	ldr	r1, [r7, #0]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	9202      	str	r2, [sp, #8]
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	460a      	mov	r2, r1
 800dfd2:	4924      	ldr	r1, [pc, #144]	@ (800e064 <vTaskStartScheduler+0xc0>)
 800dfd4:	4824      	ldr	r0, [pc, #144]	@ (800e068 <vTaskStartScheduler+0xc4>)
 800dfd6:	f7ff fdc7 	bl	800db68 <xTaskCreateStatic>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	4a23      	ldr	r2, [pc, #140]	@ (800e06c <vTaskStartScheduler+0xc8>)
 800dfde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dfe0:	4b22      	ldr	r3, [pc, #136]	@ (800e06c <vTaskStartScheduler+0xc8>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]
 800dfec:	e001      	b.n	800dff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d102      	bne.n	800dffe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dff8:	f000 fe2a 	bl	800ec50 <xTimerCreateTimerTask>
 800dffc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d11b      	bne.n	800e03c <vTaskStartScheduler+0x98>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	613b      	str	r3, [r7, #16]
}
 800e016:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e018:	4b15      	ldr	r3, [pc, #84]	@ (800e070 <vTaskStartScheduler+0xcc>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3358      	adds	r3, #88	@ 0x58
 800e01e:	4a15      	ldr	r2, [pc, #84]	@ (800e074 <vTaskStartScheduler+0xd0>)
 800e020:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e022:	4b15      	ldr	r3, [pc, #84]	@ (800e078 <vTaskStartScheduler+0xd4>)
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e02a:	4b14      	ldr	r3, [pc, #80]	@ (800e07c <vTaskStartScheduler+0xd8>)
 800e02c:	2201      	movs	r2, #1
 800e02e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e030:	4b13      	ldr	r3, [pc, #76]	@ (800e080 <vTaskStartScheduler+0xdc>)
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e036:	f7fe fcbb 	bl	800c9b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e03a:	e00f      	b.n	800e05c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e042:	d10b      	bne.n	800e05c <vTaskStartScheduler+0xb8>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	60fb      	str	r3, [r7, #12]
}
 800e056:	bf00      	nop
 800e058:	bf00      	nop
 800e05a:	e7fd      	b.n	800e058 <vTaskStartScheduler+0xb4>
}
 800e05c:	bf00      	nop
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	080150bc 	.word	0x080150bc
 800e068:	0800e6b5 	.word	0x0800e6b5
 800e06c:	200035fc 	.word	0x200035fc
 800e070:	20003104 	.word	0x20003104
 800e074:	20000434 	.word	0x20000434
 800e078:	200035f8 	.word	0x200035f8
 800e07c:	200035e4 	.word	0x200035e4
 800e080:	200035dc 	.word	0x200035dc

0800e084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e084:	b480      	push	{r7}
 800e086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e088:	4b04      	ldr	r3, [pc, #16]	@ (800e09c <vTaskSuspendAll+0x18>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3301      	adds	r3, #1
 800e08e:	4a03      	ldr	r2, [pc, #12]	@ (800e09c <vTaskSuspendAll+0x18>)
 800e090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e092:	bf00      	nop
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	20003600 	.word	0x20003600

0800e0a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0ae:	4b42      	ldr	r3, [pc, #264]	@ (800e1b8 <xTaskResumeAll+0x118>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10b      	bne.n	800e0ce <xTaskResumeAll+0x2e>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	603b      	str	r3, [r7, #0]
}
 800e0c8:	bf00      	nop
 800e0ca:	bf00      	nop
 800e0cc:	e7fd      	b.n	800e0ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e0ce:	f7fe fd13 	bl	800caf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e0d2:	4b39      	ldr	r3, [pc, #228]	@ (800e1b8 <xTaskResumeAll+0x118>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	4a37      	ldr	r2, [pc, #220]	@ (800e1b8 <xTaskResumeAll+0x118>)
 800e0da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0dc:	4b36      	ldr	r3, [pc, #216]	@ (800e1b8 <xTaskResumeAll+0x118>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d162      	bne.n	800e1aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0e4:	4b35      	ldr	r3, [pc, #212]	@ (800e1bc <xTaskResumeAll+0x11c>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d05e      	beq.n	800e1aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0ec:	e02f      	b.n	800e14e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ee:	4b34      	ldr	r3, [pc, #208]	@ (800e1c0 <xTaskResumeAll+0x120>)
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	3318      	adds	r3, #24
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fe fba4 	bl	800c848 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3304      	adds	r3, #4
 800e104:	4618      	mov	r0, r3
 800e106:	f7fe fb9f 	bl	800c848 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e10e:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c4 <xTaskResumeAll+0x124>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d903      	bls.n	800e11e <xTaskResumeAll+0x7e>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11a:	4a2a      	ldr	r2, [pc, #168]	@ (800e1c4 <xTaskResumeAll+0x124>)
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4a27      	ldr	r2, [pc, #156]	@ (800e1c8 <xTaskResumeAll+0x128>)
 800e12c:	441a      	add	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	3304      	adds	r3, #4
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7fe fb2a 	bl	800c78e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13e:	4b23      	ldr	r3, [pc, #140]	@ (800e1cc <xTaskResumeAll+0x12c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e144:	429a      	cmp	r2, r3
 800e146:	d302      	bcc.n	800e14e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e148:	4b21      	ldr	r3, [pc, #132]	@ (800e1d0 <xTaskResumeAll+0x130>)
 800e14a:	2201      	movs	r2, #1
 800e14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e14e:	4b1c      	ldr	r3, [pc, #112]	@ (800e1c0 <xTaskResumeAll+0x120>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1cb      	bne.n	800e0ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e15c:	f000 fb66 	bl	800e82c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e160:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d4 <xTaskResumeAll+0x134>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d010      	beq.n	800e18e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e16c:	f000 f846 	bl	800e1fc <xTaskIncrementTick>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e176:	4b16      	ldr	r3, [pc, #88]	@ (800e1d0 <xTaskResumeAll+0x130>)
 800e178:	2201      	movs	r2, #1
 800e17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3b01      	subs	r3, #1
 800e180:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1f1      	bne.n	800e16c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e188:	4b12      	ldr	r3, [pc, #72]	@ (800e1d4 <xTaskResumeAll+0x134>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e18e:	4b10      	ldr	r3, [pc, #64]	@ (800e1d0 <xTaskResumeAll+0x130>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d009      	beq.n	800e1aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e196:	2301      	movs	r3, #1
 800e198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e19a:	4b0f      	ldr	r3, [pc, #60]	@ (800e1d8 <xTaskResumeAll+0x138>)
 800e19c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1aa:	f7fe fcd7 	bl	800cb5c <vPortExitCritical>

	return xAlreadyYielded;
 800e1ae:	68bb      	ldr	r3, [r7, #8]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20003600 	.word	0x20003600
 800e1bc:	200035d8 	.word	0x200035d8
 800e1c0:	20003598 	.word	0x20003598
 800e1c4:	200035e0 	.word	0x200035e0
 800e1c8:	20003108 	.word	0x20003108
 800e1cc:	20003104 	.word	0x20003104
 800e1d0:	200035ec 	.word	0x200035ec
 800e1d4:	200035e8 	.word	0x200035e8
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e1e2:	4b05      	ldr	r3, [pc, #20]	@ (800e1f8 <xTaskGetTickCount+0x1c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1e8:	687b      	ldr	r3, [r7, #4]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	200035dc 	.word	0x200035dc

0800e1fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e202:	2300      	movs	r3, #0
 800e204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e206:	4b4f      	ldr	r3, [pc, #316]	@ (800e344 <xTaskIncrementTick+0x148>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f040 8090 	bne.w	800e330 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e210:	4b4d      	ldr	r3, [pc, #308]	@ (800e348 <xTaskIncrementTick+0x14c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3301      	adds	r3, #1
 800e216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e218:	4a4b      	ldr	r2, [pc, #300]	@ (800e348 <xTaskIncrementTick+0x14c>)
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d121      	bne.n	800e268 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e224:	4b49      	ldr	r3, [pc, #292]	@ (800e34c <xTaskIncrementTick+0x150>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00b      	beq.n	800e246 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	603b      	str	r3, [r7, #0]
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	e7fd      	b.n	800e242 <xTaskIncrementTick+0x46>
 800e246:	4b41      	ldr	r3, [pc, #260]	@ (800e34c <xTaskIncrementTick+0x150>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	4b40      	ldr	r3, [pc, #256]	@ (800e350 <xTaskIncrementTick+0x154>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a3e      	ldr	r2, [pc, #248]	@ (800e34c <xTaskIncrementTick+0x150>)
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	4a3e      	ldr	r2, [pc, #248]	@ (800e350 <xTaskIncrementTick+0x154>)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	4b3e      	ldr	r3, [pc, #248]	@ (800e354 <xTaskIncrementTick+0x158>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3301      	adds	r3, #1
 800e260:	4a3c      	ldr	r2, [pc, #240]	@ (800e354 <xTaskIncrementTick+0x158>)
 800e262:	6013      	str	r3, [r2, #0]
 800e264:	f000 fae2 	bl	800e82c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e268:	4b3b      	ldr	r3, [pc, #236]	@ (800e358 <xTaskIncrementTick+0x15c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d349      	bcc.n	800e306 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e272:	4b36      	ldr	r3, [pc, #216]	@ (800e34c <xTaskIncrementTick+0x150>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d104      	bne.n	800e286 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e27c:	4b36      	ldr	r3, [pc, #216]	@ (800e358 <xTaskIncrementTick+0x15c>)
 800e27e:	f04f 32ff 	mov.w	r2, #4294967295
 800e282:	601a      	str	r2, [r3, #0]
					break;
 800e284:	e03f      	b.n	800e306 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e286:	4b31      	ldr	r3, [pc, #196]	@ (800e34c <xTaskIncrementTick+0x150>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d203      	bcs.n	800e2a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e29e:	4a2e      	ldr	r2, [pc, #184]	@ (800e358 <xTaskIncrementTick+0x15c>)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2a4:	e02f      	b.n	800e306 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe facc 	bl	800c848 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d004      	beq.n	800e2c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	3318      	adds	r3, #24
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fe fac3 	bl	800c848 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c6:	4b25      	ldr	r3, [pc, #148]	@ (800e35c <xTaskIncrementTick+0x160>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d903      	bls.n	800e2d6 <xTaskIncrementTick+0xda>
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d2:	4a22      	ldr	r2, [pc, #136]	@ (800e35c <xTaskIncrementTick+0x160>)
 800e2d4:	6013      	str	r3, [r2, #0]
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2da:	4613      	mov	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	4413      	add	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4a1f      	ldr	r2, [pc, #124]	@ (800e360 <xTaskIncrementTick+0x164>)
 800e2e4:	441a      	add	r2, r3
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	f7fe fa4e 	bl	800c78e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e364 <xTaskIncrementTick+0x168>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d3b8      	bcc.n	800e272 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e300:	2301      	movs	r3, #1
 800e302:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e304:	e7b5      	b.n	800e272 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e306:	4b17      	ldr	r3, [pc, #92]	@ (800e364 <xTaskIncrementTick+0x168>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30c:	4914      	ldr	r1, [pc, #80]	@ (800e360 <xTaskIncrementTick+0x164>)
 800e30e:	4613      	mov	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	4413      	add	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	440b      	add	r3, r1
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d901      	bls.n	800e322 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e31e:	2301      	movs	r3, #1
 800e320:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e322:	4b11      	ldr	r3, [pc, #68]	@ (800e368 <xTaskIncrementTick+0x16c>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d007      	beq.n	800e33a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e32a:	2301      	movs	r3, #1
 800e32c:	617b      	str	r3, [r7, #20]
 800e32e:	e004      	b.n	800e33a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e330:	4b0e      	ldr	r3, [pc, #56]	@ (800e36c <xTaskIncrementTick+0x170>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3301      	adds	r3, #1
 800e336:	4a0d      	ldr	r2, [pc, #52]	@ (800e36c <xTaskIncrementTick+0x170>)
 800e338:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e33a:	697b      	ldr	r3, [r7, #20]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	20003600 	.word	0x20003600
 800e348:	200035dc 	.word	0x200035dc
 800e34c:	20003590 	.word	0x20003590
 800e350:	20003594 	.word	0x20003594
 800e354:	200035f0 	.word	0x200035f0
 800e358:	200035f8 	.word	0x200035f8
 800e35c:	200035e0 	.word	0x200035e0
 800e360:	20003108 	.word	0x20003108
 800e364:	20003104 	.word	0x20003104
 800e368:	200035ec 	.word	0x200035ec
 800e36c:	200035e8 	.word	0x200035e8

0800e370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e376:	4b2b      	ldr	r3, [pc, #172]	@ (800e424 <vTaskSwitchContext+0xb4>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d003      	beq.n	800e386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e37e:	4b2a      	ldr	r3, [pc, #168]	@ (800e428 <vTaskSwitchContext+0xb8>)
 800e380:	2201      	movs	r2, #1
 800e382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e384:	e047      	b.n	800e416 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e386:	4b28      	ldr	r3, [pc, #160]	@ (800e428 <vTaskSwitchContext+0xb8>)
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e38c:	4b27      	ldr	r3, [pc, #156]	@ (800e42c <vTaskSwitchContext+0xbc>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	e011      	b.n	800e3b8 <vTaskSwitchContext+0x48>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10b      	bne.n	800e3b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39e:	f383 8811 	msr	BASEPRI, r3
 800e3a2:	f3bf 8f6f 	isb	sy
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	607b      	str	r3, [r7, #4]
}
 800e3ac:	bf00      	nop
 800e3ae:	bf00      	nop
 800e3b0:	e7fd      	b.n	800e3ae <vTaskSwitchContext+0x3e>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	60fb      	str	r3, [r7, #12]
 800e3b8:	491d      	ldr	r1, [pc, #116]	@ (800e430 <vTaskSwitchContext+0xc0>)
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	440b      	add	r3, r1
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d0e3      	beq.n	800e394 <vTaskSwitchContext+0x24>
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4a16      	ldr	r2, [pc, #88]	@ (800e430 <vTaskSwitchContext+0xc0>)
 800e3d8:	4413      	add	r3, r2
 800e3da:	60bb      	str	r3, [r7, #8]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	605a      	str	r2, [r3, #4]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d104      	bne.n	800e3fc <vTaskSwitchContext+0x8c>
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	685a      	ldr	r2, [r3, #4]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	605a      	str	r2, [r3, #4]
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	4a0c      	ldr	r2, [pc, #48]	@ (800e434 <vTaskSwitchContext+0xc4>)
 800e404:	6013      	str	r3, [r2, #0]
 800e406:	4a09      	ldr	r2, [pc, #36]	@ (800e42c <vTaskSwitchContext+0xbc>)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e40c:	4b09      	ldr	r3, [pc, #36]	@ (800e434 <vTaskSwitchContext+0xc4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3358      	adds	r3, #88	@ 0x58
 800e412:	4a09      	ldr	r2, [pc, #36]	@ (800e438 <vTaskSwitchContext+0xc8>)
 800e414:	6013      	str	r3, [r2, #0]
}
 800e416:	bf00      	nop
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	20003600 	.word	0x20003600
 800e428:	200035ec 	.word	0x200035ec
 800e42c:	200035e0 	.word	0x200035e0
 800e430:	20003108 	.word	0x20003108
 800e434:	20003104 	.word	0x20003104
 800e438:	20000434 	.word	0x20000434

0800e43c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10b      	bne.n	800e464 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	60fb      	str	r3, [r7, #12]
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	e7fd      	b.n	800e460 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e464:	4b07      	ldr	r3, [pc, #28]	@ (800e484 <vTaskPlaceOnEventList+0x48>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3318      	adds	r3, #24
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7fe f9b2 	bl	800c7d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e472:	2101      	movs	r1, #1
 800e474:	6838      	ldr	r0, [r7, #0]
 800e476:	f000 fb97 	bl	800eba8 <prvAddCurrentTaskToDelayedList>
}
 800e47a:	bf00      	nop
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20003104 	.word	0x20003104

0800e488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10b      	bne.n	800e4b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	617b      	str	r3, [r7, #20]
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	e7fd      	b.n	800e4ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4dc <vTaskPlaceOnEventListRestricted+0x54>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3318      	adds	r3, #24
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7fe f967 	bl	800c78e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	68b8      	ldr	r0, [r7, #8]
 800e4d0:	f000 fb6a 	bl	800eba8 <prvAddCurrentTaskToDelayedList>
	}
 800e4d4:	bf00      	nop
 800e4d6:	3718      	adds	r7, #24
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	20003104 	.word	0x20003104

0800e4e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	60fb      	str	r3, [r7, #12]
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	e7fd      	b.n	800e50a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	3318      	adds	r3, #24
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe f998 	bl	800c848 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e518:	4b1d      	ldr	r3, [pc, #116]	@ (800e590 <xTaskRemoveFromEventList+0xb0>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d11d      	bne.n	800e55c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	3304      	adds	r3, #4
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe f98f 	bl	800c848 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52e:	4b19      	ldr	r3, [pc, #100]	@ (800e594 <xTaskRemoveFromEventList+0xb4>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	429a      	cmp	r2, r3
 800e534:	d903      	bls.n	800e53e <xTaskRemoveFromEventList+0x5e>
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e53a:	4a16      	ldr	r2, [pc, #88]	@ (800e594 <xTaskRemoveFromEventList+0xb4>)
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e542:	4613      	mov	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4a13      	ldr	r2, [pc, #76]	@ (800e598 <xTaskRemoveFromEventList+0xb8>)
 800e54c:	441a      	add	r2, r3
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	3304      	adds	r3, #4
 800e552:	4619      	mov	r1, r3
 800e554:	4610      	mov	r0, r2
 800e556:	f7fe f91a 	bl	800c78e <vListInsertEnd>
 800e55a:	e005      	b.n	800e568 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	3318      	adds	r3, #24
 800e560:	4619      	mov	r1, r3
 800e562:	480e      	ldr	r0, [pc, #56]	@ (800e59c <xTaskRemoveFromEventList+0xbc>)
 800e564:	f7fe f913 	bl	800c78e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e56c:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a0 <xTaskRemoveFromEventList+0xc0>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e572:	429a      	cmp	r2, r3
 800e574:	d905      	bls.n	800e582 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e576:	2301      	movs	r3, #1
 800e578:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e57a:	4b0a      	ldr	r3, [pc, #40]	@ (800e5a4 <xTaskRemoveFromEventList+0xc4>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	e001      	b.n	800e586 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e582:	2300      	movs	r3, #0
 800e584:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e586:	697b      	ldr	r3, [r7, #20]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	20003600 	.word	0x20003600
 800e594:	200035e0 	.word	0x200035e0
 800e598:	20003108 	.word	0x20003108
 800e59c:	20003598 	.word	0x20003598
 800e5a0:	20003104 	.word	0x20003104
 800e5a4:	200035ec 	.word	0x200035ec

0800e5a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5b0:	4b06      	ldr	r3, [pc, #24]	@ (800e5cc <vTaskInternalSetTimeOutState+0x24>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5b8:	4b05      	ldr	r3, [pc, #20]	@ (800e5d0 <vTaskInternalSetTimeOutState+0x28>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	605a      	str	r2, [r3, #4]
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	200035f0 	.word	0x200035f0
 800e5d0:	200035dc 	.word	0x200035dc

0800e5d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b088      	sub	sp, #32
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10b      	bne.n	800e5fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	613b      	str	r3, [r7, #16]
}
 800e5f6:	bf00      	nop
 800e5f8:	bf00      	nop
 800e5fa:	e7fd      	b.n	800e5f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10b      	bne.n	800e61a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	60fb      	str	r3, [r7, #12]
}
 800e614:	bf00      	nop
 800e616:	bf00      	nop
 800e618:	e7fd      	b.n	800e616 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e61a:	f7fe fa6d 	bl	800caf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e61e:	4b1d      	ldr	r3, [pc, #116]	@ (800e694 <xTaskCheckForTimeOut+0xc0>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e636:	d102      	bne.n	800e63e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e638:	2300      	movs	r3, #0
 800e63a:	61fb      	str	r3, [r7, #28]
 800e63c:	e023      	b.n	800e686 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	4b15      	ldr	r3, [pc, #84]	@ (800e698 <xTaskCheckForTimeOut+0xc4>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d007      	beq.n	800e65a <xTaskCheckForTimeOut+0x86>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	69ba      	ldr	r2, [r7, #24]
 800e650:	429a      	cmp	r2, r3
 800e652:	d302      	bcc.n	800e65a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e654:	2301      	movs	r3, #1
 800e656:	61fb      	str	r3, [r7, #28]
 800e658:	e015      	b.n	800e686 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	697a      	ldr	r2, [r7, #20]
 800e660:	429a      	cmp	r2, r3
 800e662:	d20b      	bcs.n	800e67c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	1ad2      	subs	r2, r2, r3
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff ff99 	bl	800e5a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e676:	2300      	movs	r3, #0
 800e678:	61fb      	str	r3, [r7, #28]
 800e67a:	e004      	b.n	800e686 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	2200      	movs	r2, #0
 800e680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e682:	2301      	movs	r3, #1
 800e684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e686:	f7fe fa69 	bl	800cb5c <vPortExitCritical>

	return xReturn;
 800e68a:	69fb      	ldr	r3, [r7, #28]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3720      	adds	r7, #32
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	200035dc 	.word	0x200035dc
 800e698:	200035f0 	.word	0x200035f0

0800e69c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e69c:	b480      	push	{r7}
 800e69e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6a0:	4b03      	ldr	r3, [pc, #12]	@ (800e6b0 <vTaskMissedYield+0x14>)
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]
}
 800e6a6:	bf00      	nop
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	200035ec 	.word	0x200035ec

0800e6b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6bc:	f000 f852 	bl	800e764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6c0:	4b06      	ldr	r3, [pc, #24]	@ (800e6dc <prvIdleTask+0x28>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d9f9      	bls.n	800e6bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6c8:	4b05      	ldr	r3, [pc, #20]	@ (800e6e0 <prvIdleTask+0x2c>)
 800e6ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6ce:	601a      	str	r2, [r3, #0]
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6d8:	e7f0      	b.n	800e6bc <prvIdleTask+0x8>
 800e6da:	bf00      	nop
 800e6dc:	20003108 	.word	0x20003108
 800e6e0:	e000ed04 	.word	0xe000ed04

0800e6e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	607b      	str	r3, [r7, #4]
 800e6ee:	e00c      	b.n	800e70a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4a12      	ldr	r2, [pc, #72]	@ (800e744 <prvInitialiseTaskLists+0x60>)
 800e6fc:	4413      	add	r3, r2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fe f818 	bl	800c734 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	3301      	adds	r3, #1
 800e708:	607b      	str	r3, [r7, #4]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b37      	cmp	r3, #55	@ 0x37
 800e70e:	d9ef      	bls.n	800e6f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e710:	480d      	ldr	r0, [pc, #52]	@ (800e748 <prvInitialiseTaskLists+0x64>)
 800e712:	f7fe f80f 	bl	800c734 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e716:	480d      	ldr	r0, [pc, #52]	@ (800e74c <prvInitialiseTaskLists+0x68>)
 800e718:	f7fe f80c 	bl	800c734 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e71c:	480c      	ldr	r0, [pc, #48]	@ (800e750 <prvInitialiseTaskLists+0x6c>)
 800e71e:	f7fe f809 	bl	800c734 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e722:	480c      	ldr	r0, [pc, #48]	@ (800e754 <prvInitialiseTaskLists+0x70>)
 800e724:	f7fe f806 	bl	800c734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e728:	480b      	ldr	r0, [pc, #44]	@ (800e758 <prvInitialiseTaskLists+0x74>)
 800e72a:	f7fe f803 	bl	800c734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e72e:	4b0b      	ldr	r3, [pc, #44]	@ (800e75c <prvInitialiseTaskLists+0x78>)
 800e730:	4a05      	ldr	r2, [pc, #20]	@ (800e748 <prvInitialiseTaskLists+0x64>)
 800e732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e734:	4b0a      	ldr	r3, [pc, #40]	@ (800e760 <prvInitialiseTaskLists+0x7c>)
 800e736:	4a05      	ldr	r2, [pc, #20]	@ (800e74c <prvInitialiseTaskLists+0x68>)
 800e738:	601a      	str	r2, [r3, #0]
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	20003108 	.word	0x20003108
 800e748:	20003568 	.word	0x20003568
 800e74c:	2000357c 	.word	0x2000357c
 800e750:	20003598 	.word	0x20003598
 800e754:	200035ac 	.word	0x200035ac
 800e758:	200035c4 	.word	0x200035c4
 800e75c:	20003590 	.word	0x20003590
 800e760:	20003594 	.word	0x20003594

0800e764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e76a:	e019      	b.n	800e7a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e76c:	f7fe f9c4 	bl	800caf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e770:	4b10      	ldr	r3, [pc, #64]	@ (800e7b4 <prvCheckTasksWaitingTermination+0x50>)
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	3304      	adds	r3, #4
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fe f863 	bl	800c848 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e782:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <prvCheckTasksWaitingTermination+0x54>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3b01      	subs	r3, #1
 800e788:	4a0b      	ldr	r2, [pc, #44]	@ (800e7b8 <prvCheckTasksWaitingTermination+0x54>)
 800e78a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e78c:	4b0b      	ldr	r3, [pc, #44]	@ (800e7bc <prvCheckTasksWaitingTermination+0x58>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3b01      	subs	r3, #1
 800e792:	4a0a      	ldr	r2, [pc, #40]	@ (800e7bc <prvCheckTasksWaitingTermination+0x58>)
 800e794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e796:	f7fe f9e1 	bl	800cb5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f810 	bl	800e7c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7a0:	4b06      	ldr	r3, [pc, #24]	@ (800e7bc <prvCheckTasksWaitingTermination+0x58>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1e1      	bne.n	800e76c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	200035ac 	.word	0x200035ac
 800e7b8:	200035d8 	.word	0x200035d8
 800e7bc:	200035c0 	.word	0x200035c0

0800e7c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	3358      	adds	r3, #88	@ 0x58
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f001 fa2d 	bl	800fc2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d108      	bne.n	800e7ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fd fe87 	bl	800c4f4 <vPortFree>
				vPortFree( pxTCB );
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f7fd fe84 	bl	800c4f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7ec:	e019      	b.n	800e822 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d103      	bne.n	800e800 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7fd fe7b 	bl	800c4f4 <vPortFree>
	}
 800e7fe:	e010      	b.n	800e822 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800e806:	2b02      	cmp	r3, #2
 800e808:	d00b      	beq.n	800e822 <prvDeleteTCB+0x62>
	__asm volatile
 800e80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	60fb      	str	r3, [r7, #12]
}
 800e81c:	bf00      	nop
 800e81e:	bf00      	nop
 800e820:	e7fd      	b.n	800e81e <prvDeleteTCB+0x5e>
	}
 800e822:	bf00      	nop
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
	...

0800e82c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e832:	4b0c      	ldr	r3, [pc, #48]	@ (800e864 <prvResetNextTaskUnblockTime+0x38>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d104      	bne.n	800e846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e83c:	4b0a      	ldr	r3, [pc, #40]	@ (800e868 <prvResetNextTaskUnblockTime+0x3c>)
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295
 800e842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e844:	e008      	b.n	800e858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e846:	4b07      	ldr	r3, [pc, #28]	@ (800e864 <prvResetNextTaskUnblockTime+0x38>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	4a04      	ldr	r2, [pc, #16]	@ (800e868 <prvResetNextTaskUnblockTime+0x3c>)
 800e856:	6013      	str	r3, [r2, #0]
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	20003590 	.word	0x20003590
 800e868:	200035f8 	.word	0x200035f8

0800e86c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e872:	4b05      	ldr	r3, [pc, #20]	@ (800e888 <xTaskGetCurrentTaskHandle+0x1c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e878:	687b      	ldr	r3, [r7, #4]
	}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20003104 	.word	0x20003104

0800e88c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e892:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c0 <xTaskGetSchedulerState+0x34>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d102      	bne.n	800e8a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e89a:	2301      	movs	r3, #1
 800e89c:	607b      	str	r3, [r7, #4]
 800e89e:	e008      	b.n	800e8b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8a0:	4b08      	ldr	r3, [pc, #32]	@ (800e8c4 <xTaskGetSchedulerState+0x38>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d102      	bne.n	800e8ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	607b      	str	r3, [r7, #4]
 800e8ac:	e001      	b.n	800e8b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8b2:	687b      	ldr	r3, [r7, #4]
	}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr
 800e8c0:	200035e4 	.word	0x200035e4
 800e8c4:	20003600 	.word	0x20003600

0800e8c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d051      	beq.n	800e982 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e2:	4b2a      	ldr	r3, [pc, #168]	@ (800e98c <xTaskPriorityInherit+0xc4>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d241      	bcs.n	800e970 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	699b      	ldr	r3, [r3, #24]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	db06      	blt.n	800e902 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8f4:	4b25      	ldr	r3, [pc, #148]	@ (800e98c <xTaskPriorityInherit+0xc4>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	6959      	ldr	r1, [r3, #20]
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e90a:	4613      	mov	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4a1f      	ldr	r2, [pc, #124]	@ (800e990 <xTaskPriorityInherit+0xc8>)
 800e914:	4413      	add	r3, r2
 800e916:	4299      	cmp	r1, r3
 800e918:	d122      	bne.n	800e960 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	3304      	adds	r3, #4
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fd ff92 	bl	800c848 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e924:	4b19      	ldr	r3, [pc, #100]	@ (800e98c <xTaskPriorityInherit+0xc4>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e932:	4b18      	ldr	r3, [pc, #96]	@ (800e994 <xTaskPriorityInherit+0xcc>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	d903      	bls.n	800e942 <xTaskPriorityInherit+0x7a>
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e93e:	4a15      	ldr	r2, [pc, #84]	@ (800e994 <xTaskPriorityInherit+0xcc>)
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4a10      	ldr	r2, [pc, #64]	@ (800e990 <xTaskPriorityInherit+0xc8>)
 800e950:	441a      	add	r2, r3
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	3304      	adds	r3, #4
 800e956:	4619      	mov	r1, r3
 800e958:	4610      	mov	r0, r2
 800e95a:	f7fd ff18 	bl	800c78e <vListInsertEnd>
 800e95e:	e004      	b.n	800e96a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e960:	4b0a      	ldr	r3, [pc, #40]	@ (800e98c <xTaskPriorityInherit+0xc4>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e96a:	2301      	movs	r3, #1
 800e96c:	60fb      	str	r3, [r7, #12]
 800e96e:	e008      	b.n	800e982 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e974:	4b05      	ldr	r3, [pc, #20]	@ (800e98c <xTaskPriorityInherit+0xc4>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d201      	bcs.n	800e982 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e97e:	2301      	movs	r3, #1
 800e980:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e982:	68fb      	ldr	r3, [r7, #12]
	}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20003104 	.word	0x20003104
 800e990:	20003108 	.word	0x20003108
 800e994:	200035e0 	.word	0x200035e0

0800e998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d058      	beq.n	800ea60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9ae:	4b2f      	ldr	r3, [pc, #188]	@ (800ea6c <xTaskPriorityDisinherit+0xd4>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	693a      	ldr	r2, [r7, #16]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d00b      	beq.n	800e9d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	60fb      	str	r3, [r7, #12]
}
 800e9ca:	bf00      	nop
 800e9cc:	bf00      	nop
 800e9ce:	e7fd      	b.n	800e9cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10b      	bne.n	800e9f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	60bb      	str	r3, [r7, #8]
}
 800e9ea:	bf00      	nop
 800e9ec:	bf00      	nop
 800e9ee:	e7fd      	b.n	800e9ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9f4:	1e5a      	subs	r2, r3, #1
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d02c      	beq.n	800ea60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d128      	bne.n	800ea60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	3304      	adds	r3, #4
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fd ff18 	bl	800c848 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea30:	4b0f      	ldr	r3, [pc, #60]	@ (800ea70 <xTaskPriorityDisinherit+0xd8>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d903      	bls.n	800ea40 <xTaskPriorityDisinherit+0xa8>
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3c:	4a0c      	ldr	r2, [pc, #48]	@ (800ea70 <xTaskPriorityDisinherit+0xd8>)
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea44:	4613      	mov	r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4a09      	ldr	r2, [pc, #36]	@ (800ea74 <xTaskPriorityDisinherit+0xdc>)
 800ea4e:	441a      	add	r2, r3
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	3304      	adds	r3, #4
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f7fd fe99 	bl	800c78e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea60:	697b      	ldr	r3, [r7, #20]
	}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20003104 	.word	0x20003104
 800ea70:	200035e0 	.word	0x200035e0
 800ea74:	20003108 	.word	0x20003108

0800ea78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ea86:	2301      	movs	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d06c      	beq.n	800eb6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10b      	bne.n	800eab0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ea98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9c:	f383 8811 	msr	BASEPRI, r3
 800eaa0:	f3bf 8f6f 	isb	sy
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	60fb      	str	r3, [r7, #12]
}
 800eaaa:	bf00      	nop
 800eaac:	bf00      	nop
 800eaae:	e7fd      	b.n	800eaac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eab4:	683a      	ldr	r2, [r7, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d902      	bls.n	800eac0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	61fb      	str	r3, [r7, #28]
 800eabe:	e002      	b.n	800eac6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eac4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d04c      	beq.n	800eb6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ead4:	697a      	ldr	r2, [r7, #20]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d147      	bne.n	800eb6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eada:	4b26      	ldr	r3, [pc, #152]	@ (800eb74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	69ba      	ldr	r2, [r7, #24]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d10b      	bne.n	800eafc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	60bb      	str	r3, [r7, #8]
}
 800eaf6:	bf00      	nop
 800eaf8:	bf00      	nop
 800eafa:	e7fd      	b.n	800eaf8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	69fa      	ldr	r2, [r7, #28]
 800eb06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	db04      	blt.n	800eb1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	6959      	ldr	r1, [r3, #20]
 800eb1e:	693a      	ldr	r2, [r7, #16]
 800eb20:	4613      	mov	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4a13      	ldr	r2, [pc, #76]	@ (800eb78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eb2a:	4413      	add	r3, r2
 800eb2c:	4299      	cmp	r1, r3
 800eb2e:	d11c      	bne.n	800eb6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	3304      	adds	r3, #4
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fd fe87 	bl	800c848 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800eb7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d903      	bls.n	800eb4e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb4a:	4a0c      	ldr	r2, [pc, #48]	@ (800eb7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eb4c:	6013      	str	r3, [r2, #0]
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb52:	4613      	mov	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4413      	add	r3, r2
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4a07      	ldr	r2, [pc, #28]	@ (800eb78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eb5c:	441a      	add	r2, r3
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	3304      	adds	r3, #4
 800eb62:	4619      	mov	r1, r3
 800eb64:	4610      	mov	r0, r2
 800eb66:	f7fd fe12 	bl	800c78e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb6a:	bf00      	nop
 800eb6c:	3720      	adds	r7, #32
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20003104 	.word	0x20003104
 800eb78:	20003108 	.word	0x20003108
 800eb7c:	200035e0 	.word	0x200035e0

0800eb80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb84:	4b07      	ldr	r3, [pc, #28]	@ (800eba4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d004      	beq.n	800eb96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb8c:	4b05      	ldr	r3, [pc, #20]	@ (800eba4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb92:	3201      	adds	r2, #1
 800eb94:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800eb96:	4b03      	ldr	r3, [pc, #12]	@ (800eba4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb98:	681b      	ldr	r3, [r3, #0]
	}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr
 800eba4:	20003104 	.word	0x20003104

0800eba8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ebb2:	4b21      	ldr	r3, [pc, #132]	@ (800ec38 <prvAddCurrentTaskToDelayedList+0x90>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebb8:	4b20      	ldr	r3, [pc, #128]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fd fe42 	bl	800c848 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebca:	d10a      	bne.n	800ebe2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d007      	beq.n	800ebe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebd2:	4b1a      	ldr	r3, [pc, #104]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	4619      	mov	r1, r3
 800ebda:	4819      	ldr	r0, [pc, #100]	@ (800ec40 <prvAddCurrentTaskToDelayedList+0x98>)
 800ebdc:	f7fd fdd7 	bl	800c78e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ebe0:	e026      	b.n	800ec30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ebea:	4b14      	ldr	r3, [pc, #80]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d209      	bcs.n	800ec0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebfa:	4b12      	ldr	r3, [pc, #72]	@ (800ec44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	4b0f      	ldr	r3, [pc, #60]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3304      	adds	r3, #4
 800ec04:	4619      	mov	r1, r3
 800ec06:	4610      	mov	r0, r2
 800ec08:	f7fd fde5 	bl	800c7d6 <vListInsert>
}
 800ec0c:	e010      	b.n	800ec30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	4b0a      	ldr	r3, [pc, #40]	@ (800ec3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	3304      	adds	r3, #4
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	f7fd fddb 	bl	800c7d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec20:	4b0a      	ldr	r3, [pc, #40]	@ (800ec4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d202      	bcs.n	800ec30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec2a:	4a08      	ldr	r2, [pc, #32]	@ (800ec4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	6013      	str	r3, [r2, #0]
}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	200035dc 	.word	0x200035dc
 800ec3c:	20003104 	.word	0x20003104
 800ec40:	200035c4 	.word	0x200035c4
 800ec44:	20003594 	.word	0x20003594
 800ec48:	20003590 	.word	0x20003590
 800ec4c:	200035f8 	.word	0x200035f8

0800ec50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08a      	sub	sp, #40	@ 0x28
 800ec54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ec5a:	f000 fb13 	bl	800f284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ec5e:	4b1d      	ldr	r3, [pc, #116]	@ (800ecd4 <xTimerCreateTimerTask+0x84>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d021      	beq.n	800ecaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ec6e:	1d3a      	adds	r2, r7, #4
 800ec70:	f107 0108 	add.w	r1, r7, #8
 800ec74:	f107 030c 	add.w	r3, r7, #12
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fd fb53 	bl	800c324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	9202      	str	r2, [sp, #8]
 800ec86:	9301      	str	r3, [sp, #4]
 800ec88:	2302      	movs	r3, #2
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	460a      	mov	r2, r1
 800ec90:	4911      	ldr	r1, [pc, #68]	@ (800ecd8 <xTimerCreateTimerTask+0x88>)
 800ec92:	4812      	ldr	r0, [pc, #72]	@ (800ecdc <xTimerCreateTimerTask+0x8c>)
 800ec94:	f7fe ff68 	bl	800db68 <xTaskCreateStatic>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	4a11      	ldr	r2, [pc, #68]	@ (800ece0 <xTimerCreateTimerTask+0x90>)
 800ec9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ec9e:	4b10      	ldr	r3, [pc, #64]	@ (800ece0 <xTimerCreateTimerTask+0x90>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eca6:	2301      	movs	r3, #1
 800eca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10b      	bne.n	800ecc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ecb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	613b      	str	r3, [r7, #16]
}
 800ecc2:	bf00      	nop
 800ecc4:	bf00      	nop
 800ecc6:	e7fd      	b.n	800ecc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ecc8:	697b      	ldr	r3, [r7, #20]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3718      	adds	r7, #24
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20003634 	.word	0x20003634
 800ecd8:	080150c4 	.word	0x080150c4
 800ecdc:	0800ee1d 	.word	0x0800ee1d
 800ece0:	20003638 	.word	0x20003638

0800ece4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08a      	sub	sp, #40	@ 0x28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10b      	bne.n	800ed14 <xTimerGenericCommand+0x30>
	__asm volatile
 800ecfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed00:	f383 8811 	msr	BASEPRI, r3
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	f3bf 8f4f 	dsb	sy
 800ed0c:	623b      	str	r3, [r7, #32]
}
 800ed0e:	bf00      	nop
 800ed10:	bf00      	nop
 800ed12:	e7fd      	b.n	800ed10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed14:	4b19      	ldr	r3, [pc, #100]	@ (800ed7c <xTimerGenericCommand+0x98>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d02a      	beq.n	800ed72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b05      	cmp	r3, #5
 800ed2c:	dc18      	bgt.n	800ed60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed2e:	f7ff fdad 	bl	800e88c <xTaskGetSchedulerState>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d109      	bne.n	800ed4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed38:	4b10      	ldr	r3, [pc, #64]	@ (800ed7c <xTimerGenericCommand+0x98>)
 800ed3a:	6818      	ldr	r0, [r3, #0]
 800ed3c:	f107 0110 	add.w	r1, r7, #16
 800ed40:	2300      	movs	r3, #0
 800ed42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed44:	f7fe f9f8 	bl	800d138 <xQueueGenericSend>
 800ed48:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed4a:	e012      	b.n	800ed72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ed7c <xTimerGenericCommand+0x98>)
 800ed4e:	6818      	ldr	r0, [r3, #0]
 800ed50:	f107 0110 	add.w	r1, r7, #16
 800ed54:	2300      	movs	r3, #0
 800ed56:	2200      	movs	r2, #0
 800ed58:	f7fe f9ee 	bl	800d138 <xQueueGenericSend>
 800ed5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed5e:	e008      	b.n	800ed72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed60:	4b06      	ldr	r3, [pc, #24]	@ (800ed7c <xTimerGenericCommand+0x98>)
 800ed62:	6818      	ldr	r0, [r3, #0]
 800ed64:	f107 0110 	add.w	r1, r7, #16
 800ed68:	2300      	movs	r3, #0
 800ed6a:	683a      	ldr	r2, [r7, #0]
 800ed6c:	f7fe fae6 	bl	800d33c <xQueueGenericSendFromISR>
 800ed70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3728      	adds	r7, #40	@ 0x28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	20003634 	.word	0x20003634

0800ed80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b088      	sub	sp, #32
 800ed84:	af02      	add	r7, sp, #8
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed8a:	4b23      	ldr	r3, [pc, #140]	@ (800ee18 <prvProcessExpiredTimer+0x98>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	3304      	adds	r3, #4
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fd fd55 	bl	800c848 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eda4:	f003 0304 	and.w	r3, r3, #4
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d023      	beq.n	800edf4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	699a      	ldr	r2, [r3, #24]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	18d1      	adds	r1, r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	6978      	ldr	r0, [r7, #20]
 800edba:	f000 f8d5 	bl	800ef68 <prvInsertTimerInActiveList>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d020      	beq.n	800ee06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edc4:	2300      	movs	r3, #0
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	2300      	movs	r3, #0
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	2100      	movs	r1, #0
 800edce:	6978      	ldr	r0, [r7, #20]
 800edd0:	f7ff ff88 	bl	800ece4 <xTimerGenericCommand>
 800edd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d114      	bne.n	800ee06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	60fb      	str	r3, [r7, #12]
}
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	e7fd      	b.n	800edf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edfa:	f023 0301 	bic.w	r3, r3, #1
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	6a1b      	ldr	r3, [r3, #32]
 800ee0a:	6978      	ldr	r0, [r7, #20]
 800ee0c:	4798      	blx	r3
}
 800ee0e:	bf00      	nop
 800ee10:	3718      	adds	r7, #24
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	2000362c 	.word	0x2000362c

0800ee1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee24:	f107 0308 	add.w	r3, r7, #8
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f000 f859 	bl	800eee0 <prvGetNextExpireTime>
 800ee2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	4619      	mov	r1, r3
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f000 f805 	bl	800ee44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee3a:	f000 f8d7 	bl	800efec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee3e:	bf00      	nop
 800ee40:	e7f0      	b.n	800ee24 <prvTimerTask+0x8>
	...

0800ee44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee4e:	f7ff f919 	bl	800e084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee52:	f107 0308 	add.w	r3, r7, #8
 800ee56:	4618      	mov	r0, r3
 800ee58:	f000 f866 	bl	800ef28 <prvSampleTimeNow>
 800ee5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d130      	bne.n	800eec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <prvProcessTimerOrBlockTask+0x3c>
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d806      	bhi.n	800ee80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee72:	f7ff f915 	bl	800e0a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee76:	68f9      	ldr	r1, [r7, #12]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff ff81 	bl	800ed80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ee7e:	e024      	b.n	800eeca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d008      	beq.n	800ee98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee86:	4b13      	ldr	r3, [pc, #76]	@ (800eed4 <prvProcessTimerOrBlockTask+0x90>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d101      	bne.n	800ee94 <prvProcessTimerOrBlockTask+0x50>
 800ee90:	2301      	movs	r3, #1
 800ee92:	e000      	b.n	800ee96 <prvProcessTimerOrBlockTask+0x52>
 800ee94:	2300      	movs	r3, #0
 800ee96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee98:	4b0f      	ldr	r3, [pc, #60]	@ (800eed8 <prvProcessTimerOrBlockTask+0x94>)
 800ee9a:	6818      	ldr	r0, [r3, #0]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	683a      	ldr	r2, [r7, #0]
 800eea4:	4619      	mov	r1, r3
 800eea6:	f7fe fe2b 	bl	800db00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eeaa:	f7ff f8f9 	bl	800e0a0 <xTaskResumeAll>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eeb4:	4b09      	ldr	r3, [pc, #36]	@ (800eedc <prvProcessTimerOrBlockTask+0x98>)
 800eeb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eeba:	601a      	str	r2, [r3, #0]
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	f3bf 8f6f 	isb	sy
}
 800eec4:	e001      	b.n	800eeca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eec6:	f7ff f8eb 	bl	800e0a0 <xTaskResumeAll>
}
 800eeca:	bf00      	nop
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20003630 	.word	0x20003630
 800eed8:	20003634 	.word	0x20003634
 800eedc:	e000ed04 	.word	0xe000ed04

0800eee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eee8:	4b0e      	ldr	r3, [pc, #56]	@ (800ef24 <prvGetNextExpireTime+0x44>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <prvGetNextExpireTime+0x16>
 800eef2:	2201      	movs	r2, #1
 800eef4:	e000      	b.n	800eef8 <prvGetNextExpireTime+0x18>
 800eef6:	2200      	movs	r2, #0
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d105      	bne.n	800ef10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef04:	4b07      	ldr	r3, [pc, #28]	@ (800ef24 <prvGetNextExpireTime+0x44>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	60fb      	str	r3, [r7, #12]
 800ef0e:	e001      	b.n	800ef14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef10:	2300      	movs	r3, #0
 800ef12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef14:	68fb      	ldr	r3, [r7, #12]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	2000362c 	.word	0x2000362c

0800ef28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef30:	f7ff f954 	bl	800e1dc <xTaskGetTickCount>
 800ef34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef36:	4b0b      	ldr	r3, [pc, #44]	@ (800ef64 <prvSampleTimeNow+0x3c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d205      	bcs.n	800ef4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef40:	f000 f93a 	bl	800f1b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	601a      	str	r2, [r3, #0]
 800ef4a:	e002      	b.n	800ef52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef52:	4a04      	ldr	r2, [pc, #16]	@ (800ef64 <prvSampleTimeNow+0x3c>)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef58:	68fb      	ldr	r3, [r7, #12]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	2000363c 	.word	0x2000363c

0800ef68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
 800ef74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef86:	68ba      	ldr	r2, [r7, #8]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d812      	bhi.n	800efb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	1ad2      	subs	r2, r2, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	699b      	ldr	r3, [r3, #24]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d302      	bcc.n	800efa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	617b      	str	r3, [r7, #20]
 800efa0:	e01b      	b.n	800efda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efa2:	4b10      	ldr	r3, [pc, #64]	@ (800efe4 <prvInsertTimerInActiveList+0x7c>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3304      	adds	r3, #4
 800efaa:	4619      	mov	r1, r3
 800efac:	4610      	mov	r0, r2
 800efae:	f7fd fc12 	bl	800c7d6 <vListInsert>
 800efb2:	e012      	b.n	800efda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d206      	bcs.n	800efca <prvInsertTimerInActiveList+0x62>
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d302      	bcc.n	800efca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efc4:	2301      	movs	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	e007      	b.n	800efda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efca:	4b07      	ldr	r3, [pc, #28]	@ (800efe8 <prvInsertTimerInActiveList+0x80>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3304      	adds	r3, #4
 800efd2:	4619      	mov	r1, r3
 800efd4:	4610      	mov	r0, r2
 800efd6:	f7fd fbfe 	bl	800c7d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800efda:	697b      	ldr	r3, [r7, #20]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3718      	adds	r7, #24
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	20003630 	.word	0x20003630
 800efe8:	2000362c 	.word	0x2000362c

0800efec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b08e      	sub	sp, #56	@ 0x38
 800eff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eff2:	e0ce      	b.n	800f192 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	da19      	bge.n	800f02e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800effa:	1d3b      	adds	r3, r7, #4
 800effc:	3304      	adds	r3, #4
 800effe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f002:	2b00      	cmp	r3, #0
 800f004:	d10b      	bne.n	800f01e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	61fb      	str	r3, [r7, #28]
}
 800f018:	bf00      	nop
 800f01a:	bf00      	nop
 800f01c:	e7fd      	b.n	800f01a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f024:	6850      	ldr	r0, [r2, #4]
 800f026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f028:	6892      	ldr	r2, [r2, #8]
 800f02a:	4611      	mov	r1, r2
 800f02c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	f2c0 80ae 	blt.w	800f192 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d004      	beq.n	800f04c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f044:	3304      	adds	r3, #4
 800f046:	4618      	mov	r0, r3
 800f048:	f7fd fbfe 	bl	800c848 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f04c:	463b      	mov	r3, r7
 800f04e:	4618      	mov	r0, r3
 800f050:	f7ff ff6a 	bl	800ef28 <prvSampleTimeNow>
 800f054:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b09      	cmp	r3, #9
 800f05a:	f200 8097 	bhi.w	800f18c <prvProcessReceivedCommands+0x1a0>
 800f05e:	a201      	add	r2, pc, #4	@ (adr r2, 800f064 <prvProcessReceivedCommands+0x78>)
 800f060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f064:	0800f08d 	.word	0x0800f08d
 800f068:	0800f08d 	.word	0x0800f08d
 800f06c:	0800f08d 	.word	0x0800f08d
 800f070:	0800f103 	.word	0x0800f103
 800f074:	0800f117 	.word	0x0800f117
 800f078:	0800f163 	.word	0x0800f163
 800f07c:	0800f08d 	.word	0x0800f08d
 800f080:	0800f08d 	.word	0x0800f08d
 800f084:	0800f103 	.word	0x0800f103
 800f088:	0800f117 	.word	0x0800f117
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f092:	f043 0301 	orr.w	r3, r3, #1
 800f096:	b2da      	uxtb	r2, r3
 800f098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	18d1      	adds	r1, r2, r3
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0ac:	f7ff ff5c 	bl	800ef68 <prvInsertTimerInActiveList>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d06c      	beq.n	800f190 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b8:	6a1b      	ldr	r3, [r3, #32]
 800f0ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0c4:	f003 0304 	and.w	r3, r3, #4
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d061      	beq.n	800f190 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d0:	699b      	ldr	r3, [r3, #24]
 800f0d2:	441a      	add	r2, r3
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	2300      	movs	r3, #0
 800f0da:	2100      	movs	r1, #0
 800f0dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0de:	f7ff fe01 	bl	800ece4 <xTimerGenericCommand>
 800f0e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f0e4:	6a3b      	ldr	r3, [r7, #32]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d152      	bne.n	800f190 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	61bb      	str	r3, [r7, #24]
}
 800f0fc:	bf00      	nop
 800f0fe:	bf00      	nop
 800f100:	e7fd      	b.n	800f0fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f108:	f023 0301 	bic.w	r3, r3, #1
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f110:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f114:	e03d      	b.n	800f192 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f11c:	f043 0301 	orr.w	r3, r3, #1
 800f120:	b2da      	uxtb	r2, r3
 800f122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f124:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10b      	bne.n	800f14e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13a:	f383 8811 	msr	BASEPRI, r3
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f3bf 8f4f 	dsb	sy
 800f146:	617b      	str	r3, [r7, #20]
}
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	e7fd      	b.n	800f14a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f150:	699a      	ldr	r2, [r3, #24]
 800f152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f154:	18d1      	adds	r1, r2, r3
 800f156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f15a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f15c:	f7ff ff04 	bl	800ef68 <prvInsertTimerInActiveList>
					break;
 800f160:	e017      	b.n	800f192 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f168:	f003 0302 	and.w	r3, r3, #2
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d103      	bne.n	800f178 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f172:	f7fd f9bf 	bl	800c4f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f176:	e00c      	b.n	800f192 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f17a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f17e:	f023 0301 	bic.w	r3, r3, #1
 800f182:	b2da      	uxtb	r2, r3
 800f184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f18a:	e002      	b.n	800f192 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f18c:	bf00      	nop
 800f18e:	e000      	b.n	800f192 <prvProcessReceivedCommands+0x1a6>
					break;
 800f190:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f192:	4b08      	ldr	r3, [pc, #32]	@ (800f1b4 <prvProcessReceivedCommands+0x1c8>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	1d39      	adds	r1, r7, #4
 800f198:	2200      	movs	r2, #0
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fe f96c 	bl	800d478 <xQueueReceive>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f47f af26 	bne.w	800eff4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	3730      	adds	r7, #48	@ 0x30
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20003634 	.word	0x20003634

0800f1b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b088      	sub	sp, #32
 800f1bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1be:	e049      	b.n	800f254 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1c0:	4b2e      	ldr	r3, [pc, #184]	@ (800f27c <prvSwitchTimerLists+0xc4>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ca:	4b2c      	ldr	r3, [pc, #176]	@ (800f27c <prvSwitchTimerLists+0xc4>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	3304      	adds	r3, #4
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fd fb35 	bl	800c848 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6a1b      	ldr	r3, [r3, #32]
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1ec:	f003 0304 	and.w	r3, r3, #4
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d02f      	beq.n	800f254 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	693a      	ldr	r2, [r7, #16]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	429a      	cmp	r2, r3
 800f204:	d90e      	bls.n	800f224 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f212:	4b1a      	ldr	r3, [pc, #104]	@ (800f27c <prvSwitchTimerLists+0xc4>)
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	3304      	adds	r3, #4
 800f21a:	4619      	mov	r1, r3
 800f21c:	4610      	mov	r0, r2
 800f21e:	f7fd fada 	bl	800c7d6 <vListInsert>
 800f222:	e017      	b.n	800f254 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f224:	2300      	movs	r3, #0
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	2300      	movs	r3, #0
 800f22a:	693a      	ldr	r2, [r7, #16]
 800f22c:	2100      	movs	r1, #0
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f7ff fd58 	bl	800ece4 <xTimerGenericCommand>
 800f234:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d10b      	bne.n	800f254 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f240:	f383 8811 	msr	BASEPRI, r3
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	603b      	str	r3, [r7, #0]
}
 800f24e:	bf00      	nop
 800f250:	bf00      	nop
 800f252:	e7fd      	b.n	800f250 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f254:	4b09      	ldr	r3, [pc, #36]	@ (800f27c <prvSwitchTimerLists+0xc4>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1b0      	bne.n	800f1c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f25e:	4b07      	ldr	r3, [pc, #28]	@ (800f27c <prvSwitchTimerLists+0xc4>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f264:	4b06      	ldr	r3, [pc, #24]	@ (800f280 <prvSwitchTimerLists+0xc8>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4a04      	ldr	r2, [pc, #16]	@ (800f27c <prvSwitchTimerLists+0xc4>)
 800f26a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f26c:	4a04      	ldr	r2, [pc, #16]	@ (800f280 <prvSwitchTimerLists+0xc8>)
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	6013      	str	r3, [r2, #0]
}
 800f272:	bf00      	nop
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	2000362c 	.word	0x2000362c
 800f280:	20003630 	.word	0x20003630

0800f284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f28a:	f7fd fc35 	bl	800caf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f28e:	4b15      	ldr	r3, [pc, #84]	@ (800f2e4 <prvCheckForValidListAndQueue+0x60>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d120      	bne.n	800f2d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f296:	4814      	ldr	r0, [pc, #80]	@ (800f2e8 <prvCheckForValidListAndQueue+0x64>)
 800f298:	f7fd fa4c 	bl	800c734 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f29c:	4813      	ldr	r0, [pc, #76]	@ (800f2ec <prvCheckForValidListAndQueue+0x68>)
 800f29e:	f7fd fa49 	bl	800c734 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2a2:	4b13      	ldr	r3, [pc, #76]	@ (800f2f0 <prvCheckForValidListAndQueue+0x6c>)
 800f2a4:	4a10      	ldr	r2, [pc, #64]	@ (800f2e8 <prvCheckForValidListAndQueue+0x64>)
 800f2a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2a8:	4b12      	ldr	r3, [pc, #72]	@ (800f2f4 <prvCheckForValidListAndQueue+0x70>)
 800f2aa:	4a10      	ldr	r2, [pc, #64]	@ (800f2ec <prvCheckForValidListAndQueue+0x68>)
 800f2ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	4b11      	ldr	r3, [pc, #68]	@ (800f2f8 <prvCheckForValidListAndQueue+0x74>)
 800f2b4:	4a11      	ldr	r2, [pc, #68]	@ (800f2fc <prvCheckForValidListAndQueue+0x78>)
 800f2b6:	2110      	movs	r1, #16
 800f2b8:	200a      	movs	r0, #10
 800f2ba:	f7fd fda9 	bl	800ce10 <xQueueGenericCreateStatic>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	4a08      	ldr	r2, [pc, #32]	@ (800f2e4 <prvCheckForValidListAndQueue+0x60>)
 800f2c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2c4:	4b07      	ldr	r3, [pc, #28]	@ (800f2e4 <prvCheckForValidListAndQueue+0x60>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d005      	beq.n	800f2d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2cc:	4b05      	ldr	r3, [pc, #20]	@ (800f2e4 <prvCheckForValidListAndQueue+0x60>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	490b      	ldr	r1, [pc, #44]	@ (800f300 <prvCheckForValidListAndQueue+0x7c>)
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fbea 	bl	800daac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2d8:	f7fd fc40 	bl	800cb5c <vPortExitCritical>
}
 800f2dc:	bf00      	nop
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	20003634 	.word	0x20003634
 800f2e8:	20003604 	.word	0x20003604
 800f2ec:	20003618 	.word	0x20003618
 800f2f0:	2000362c 	.word	0x2000362c
 800f2f4:	20003630 	.word	0x20003630
 800f2f8:	200036e0 	.word	0x200036e0
 800f2fc:	20003640 	.word	0x20003640
 800f300:	080150cc 	.word	0x080150cc

0800f304 <malloc>:
 800f304:	4b02      	ldr	r3, [pc, #8]	@ (800f310 <malloc+0xc>)
 800f306:	4601      	mov	r1, r0
 800f308:	6818      	ldr	r0, [r3, #0]
 800f30a:	f000 b803 	b.w	800f314 <_malloc_r>
 800f30e:	bf00      	nop
 800f310:	20000434 	.word	0x20000434

0800f314 <_malloc_r>:
 800f314:	f101 030b 	add.w	r3, r1, #11
 800f318:	2b16      	cmp	r3, #22
 800f31a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31e:	4605      	mov	r5, r0
 800f320:	d906      	bls.n	800f330 <_malloc_r+0x1c>
 800f322:	f033 0707 	bics.w	r7, r3, #7
 800f326:	d504      	bpl.n	800f332 <_malloc_r+0x1e>
 800f328:	230c      	movs	r3, #12
 800f32a:	602b      	str	r3, [r5, #0]
 800f32c:	2400      	movs	r4, #0
 800f32e:	e1a3      	b.n	800f678 <_malloc_r+0x364>
 800f330:	2710      	movs	r7, #16
 800f332:	42b9      	cmp	r1, r7
 800f334:	d8f8      	bhi.n	800f328 <_malloc_r+0x14>
 800f336:	4628      	mov	r0, r5
 800f338:	f000 fa26 	bl	800f788 <__malloc_lock>
 800f33c:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800f340:	4eaf      	ldr	r6, [pc, #700]	@ (800f600 <_malloc_r+0x2ec>)
 800f342:	d237      	bcs.n	800f3b4 <_malloc_r+0xa0>
 800f344:	f107 0208 	add.w	r2, r7, #8
 800f348:	4432      	add	r2, r6
 800f34a:	f1a2 0108 	sub.w	r1, r2, #8
 800f34e:	6854      	ldr	r4, [r2, #4]
 800f350:	428c      	cmp	r4, r1
 800f352:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800f356:	d102      	bne.n	800f35e <_malloc_r+0x4a>
 800f358:	68d4      	ldr	r4, [r2, #12]
 800f35a:	42a2      	cmp	r2, r4
 800f35c:	d010      	beq.n	800f380 <_malloc_r+0x6c>
 800f35e:	6863      	ldr	r3, [r4, #4]
 800f360:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800f364:	f023 0303 	bic.w	r3, r3, #3
 800f368:	60ca      	str	r2, [r1, #12]
 800f36a:	4423      	add	r3, r4
 800f36c:	6091      	str	r1, [r2, #8]
 800f36e:	685a      	ldr	r2, [r3, #4]
 800f370:	f042 0201 	orr.w	r2, r2, #1
 800f374:	605a      	str	r2, [r3, #4]
 800f376:	4628      	mov	r0, r5
 800f378:	f000 fa0c 	bl	800f794 <__malloc_unlock>
 800f37c:	3408      	adds	r4, #8
 800f37e:	e17b      	b.n	800f678 <_malloc_r+0x364>
 800f380:	3302      	adds	r3, #2
 800f382:	6934      	ldr	r4, [r6, #16]
 800f384:	499f      	ldr	r1, [pc, #636]	@ (800f604 <_malloc_r+0x2f0>)
 800f386:	428c      	cmp	r4, r1
 800f388:	d077      	beq.n	800f47a <_malloc_r+0x166>
 800f38a:	6862      	ldr	r2, [r4, #4]
 800f38c:	f022 0c03 	bic.w	ip, r2, #3
 800f390:	ebac 0007 	sub.w	r0, ip, r7
 800f394:	280f      	cmp	r0, #15
 800f396:	dd48      	ble.n	800f42a <_malloc_r+0x116>
 800f398:	19e2      	adds	r2, r4, r7
 800f39a:	f040 0301 	orr.w	r3, r0, #1
 800f39e:	f047 0701 	orr.w	r7, r7, #1
 800f3a2:	6067      	str	r7, [r4, #4]
 800f3a4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800f3a8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800f3ac:	6053      	str	r3, [r2, #4]
 800f3ae:	f844 000c 	str.w	r0, [r4, ip]
 800f3b2:	e7e0      	b.n	800f376 <_malloc_r+0x62>
 800f3b4:	0a7b      	lsrs	r3, r7, #9
 800f3b6:	d02a      	beq.n	800f40e <_malloc_r+0xfa>
 800f3b8:	2b04      	cmp	r3, #4
 800f3ba:	d812      	bhi.n	800f3e2 <_malloc_r+0xce>
 800f3bc:	09bb      	lsrs	r3, r7, #6
 800f3be:	3338      	adds	r3, #56	@ 0x38
 800f3c0:	1c5a      	adds	r2, r3, #1
 800f3c2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800f3c6:	f1a2 0c08 	sub.w	ip, r2, #8
 800f3ca:	6854      	ldr	r4, [r2, #4]
 800f3cc:	4564      	cmp	r4, ip
 800f3ce:	d006      	beq.n	800f3de <_malloc_r+0xca>
 800f3d0:	6862      	ldr	r2, [r4, #4]
 800f3d2:	f022 0203 	bic.w	r2, r2, #3
 800f3d6:	1bd0      	subs	r0, r2, r7
 800f3d8:	280f      	cmp	r0, #15
 800f3da:	dd1c      	ble.n	800f416 <_malloc_r+0x102>
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	3301      	adds	r3, #1
 800f3e0:	e7cf      	b.n	800f382 <_malloc_r+0x6e>
 800f3e2:	2b14      	cmp	r3, #20
 800f3e4:	d801      	bhi.n	800f3ea <_malloc_r+0xd6>
 800f3e6:	335b      	adds	r3, #91	@ 0x5b
 800f3e8:	e7ea      	b.n	800f3c0 <_malloc_r+0xac>
 800f3ea:	2b54      	cmp	r3, #84	@ 0x54
 800f3ec:	d802      	bhi.n	800f3f4 <_malloc_r+0xe0>
 800f3ee:	0b3b      	lsrs	r3, r7, #12
 800f3f0:	336e      	adds	r3, #110	@ 0x6e
 800f3f2:	e7e5      	b.n	800f3c0 <_malloc_r+0xac>
 800f3f4:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800f3f8:	d802      	bhi.n	800f400 <_malloc_r+0xec>
 800f3fa:	0bfb      	lsrs	r3, r7, #15
 800f3fc:	3377      	adds	r3, #119	@ 0x77
 800f3fe:	e7df      	b.n	800f3c0 <_malloc_r+0xac>
 800f400:	f240 5254 	movw	r2, #1364	@ 0x554
 800f404:	4293      	cmp	r3, r2
 800f406:	d804      	bhi.n	800f412 <_malloc_r+0xfe>
 800f408:	0cbb      	lsrs	r3, r7, #18
 800f40a:	337c      	adds	r3, #124	@ 0x7c
 800f40c:	e7d8      	b.n	800f3c0 <_malloc_r+0xac>
 800f40e:	233f      	movs	r3, #63	@ 0x3f
 800f410:	e7d6      	b.n	800f3c0 <_malloc_r+0xac>
 800f412:	237e      	movs	r3, #126	@ 0x7e
 800f414:	e7d4      	b.n	800f3c0 <_malloc_r+0xac>
 800f416:	2800      	cmp	r0, #0
 800f418:	68e1      	ldr	r1, [r4, #12]
 800f41a:	db04      	blt.n	800f426 <_malloc_r+0x112>
 800f41c:	68a3      	ldr	r3, [r4, #8]
 800f41e:	60d9      	str	r1, [r3, #12]
 800f420:	608b      	str	r3, [r1, #8]
 800f422:	18a3      	adds	r3, r4, r2
 800f424:	e7a3      	b.n	800f36e <_malloc_r+0x5a>
 800f426:	460c      	mov	r4, r1
 800f428:	e7d0      	b.n	800f3cc <_malloc_r+0xb8>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800f430:	db07      	blt.n	800f442 <_malloc_r+0x12e>
 800f432:	44a4      	add	ip, r4
 800f434:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f438:	f043 0301 	orr.w	r3, r3, #1
 800f43c:	f8cc 3004 	str.w	r3, [ip, #4]
 800f440:	e799      	b.n	800f376 <_malloc_r+0x62>
 800f442:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800f446:	6870      	ldr	r0, [r6, #4]
 800f448:	f080 8095 	bcs.w	800f576 <_malloc_r+0x262>
 800f44c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800f450:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800f454:	f04f 0c01 	mov.w	ip, #1
 800f458:	3201      	adds	r2, #1
 800f45a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f45e:	ea4c 0000 	orr.w	r0, ip, r0
 800f462:	6070      	str	r0, [r6, #4]
 800f464:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800f468:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800f46c:	3808      	subs	r0, #8
 800f46e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800f472:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800f476:	f8cc 400c 	str.w	r4, [ip, #12]
 800f47a:	1098      	asrs	r0, r3, #2
 800f47c:	2201      	movs	r2, #1
 800f47e:	4082      	lsls	r2, r0
 800f480:	6870      	ldr	r0, [r6, #4]
 800f482:	4290      	cmp	r0, r2
 800f484:	d326      	bcc.n	800f4d4 <_malloc_r+0x1c0>
 800f486:	4210      	tst	r0, r2
 800f488:	d106      	bne.n	800f498 <_malloc_r+0x184>
 800f48a:	f023 0303 	bic.w	r3, r3, #3
 800f48e:	0052      	lsls	r2, r2, #1
 800f490:	4210      	tst	r0, r2
 800f492:	f103 0304 	add.w	r3, r3, #4
 800f496:	d0fa      	beq.n	800f48e <_malloc_r+0x17a>
 800f498:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800f49c:	46c1      	mov	r9, r8
 800f49e:	469e      	mov	lr, r3
 800f4a0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800f4a4:	454c      	cmp	r4, r9
 800f4a6:	f040 80b9 	bne.w	800f61c <_malloc_r+0x308>
 800f4aa:	f10e 0e01 	add.w	lr, lr, #1
 800f4ae:	f01e 0f03 	tst.w	lr, #3
 800f4b2:	f109 0908 	add.w	r9, r9, #8
 800f4b6:	d1f3      	bne.n	800f4a0 <_malloc_r+0x18c>
 800f4b8:	0798      	lsls	r0, r3, #30
 800f4ba:	f040 80e3 	bne.w	800f684 <_malloc_r+0x370>
 800f4be:	6873      	ldr	r3, [r6, #4]
 800f4c0:	ea23 0302 	bic.w	r3, r3, r2
 800f4c4:	6073      	str	r3, [r6, #4]
 800f4c6:	6870      	ldr	r0, [r6, #4]
 800f4c8:	0052      	lsls	r2, r2, #1
 800f4ca:	4290      	cmp	r0, r2
 800f4cc:	d302      	bcc.n	800f4d4 <_malloc_r+0x1c0>
 800f4ce:	2a00      	cmp	r2, #0
 800f4d0:	f040 80e5 	bne.w	800f69e <_malloc_r+0x38a>
 800f4d4:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800f4d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f4dc:	f023 0903 	bic.w	r9, r3, #3
 800f4e0:	45b9      	cmp	r9, r7
 800f4e2:	d304      	bcc.n	800f4ee <_malloc_r+0x1da>
 800f4e4:	eba9 0207 	sub.w	r2, r9, r7
 800f4e8:	2a0f      	cmp	r2, #15
 800f4ea:	f300 8141 	bgt.w	800f770 <_malloc_r+0x45c>
 800f4ee:	4b46      	ldr	r3, [pc, #280]	@ (800f608 <_malloc_r+0x2f4>)
 800f4f0:	6819      	ldr	r1, [r3, #0]
 800f4f2:	3110      	adds	r1, #16
 800f4f4:	4439      	add	r1, r7
 800f4f6:	2008      	movs	r0, #8
 800f4f8:	9101      	str	r1, [sp, #4]
 800f4fa:	f000 fc37 	bl	800fd6c <sysconf>
 800f4fe:	4a43      	ldr	r2, [pc, #268]	@ (800f60c <_malloc_r+0x2f8>)
 800f500:	9901      	ldr	r1, [sp, #4]
 800f502:	6813      	ldr	r3, [r2, #0]
 800f504:	3301      	adds	r3, #1
 800f506:	bf1f      	itttt	ne
 800f508:	f101 31ff 	addne.w	r1, r1, #4294967295
 800f50c:	1809      	addne	r1, r1, r0
 800f50e:	4243      	negne	r3, r0
 800f510:	4019      	andne	r1, r3
 800f512:	4680      	mov	r8, r0
 800f514:	4628      	mov	r0, r5
 800f516:	9101      	str	r1, [sp, #4]
 800f518:	f000 fbd8 	bl	800fccc <_sbrk_r>
 800f51c:	1c42      	adds	r2, r0, #1
 800f51e:	eb0a 0b09 	add.w	fp, sl, r9
 800f522:	4604      	mov	r4, r0
 800f524:	f000 80f7 	beq.w	800f716 <_malloc_r+0x402>
 800f528:	4583      	cmp	fp, r0
 800f52a:	9901      	ldr	r1, [sp, #4]
 800f52c:	4a37      	ldr	r2, [pc, #220]	@ (800f60c <_malloc_r+0x2f8>)
 800f52e:	d902      	bls.n	800f536 <_malloc_r+0x222>
 800f530:	45b2      	cmp	sl, r6
 800f532:	f040 80f0 	bne.w	800f716 <_malloc_r+0x402>
 800f536:	4b36      	ldr	r3, [pc, #216]	@ (800f610 <_malloc_r+0x2fc>)
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	45a3      	cmp	fp, r4
 800f53c:	eb00 0e01 	add.w	lr, r0, r1
 800f540:	f8c3 e000 	str.w	lr, [r3]
 800f544:	f108 3cff 	add.w	ip, r8, #4294967295
 800f548:	f040 80ab 	bne.w	800f6a2 <_malloc_r+0x38e>
 800f54c:	ea1b 0f0c 	tst.w	fp, ip
 800f550:	f040 80a7 	bne.w	800f6a2 <_malloc_r+0x38e>
 800f554:	68b2      	ldr	r2, [r6, #8]
 800f556:	4449      	add	r1, r9
 800f558:	f041 0101 	orr.w	r1, r1, #1
 800f55c:	6051      	str	r1, [r2, #4]
 800f55e:	4a2d      	ldr	r2, [pc, #180]	@ (800f614 <_malloc_r+0x300>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6811      	ldr	r1, [r2, #0]
 800f564:	428b      	cmp	r3, r1
 800f566:	bf88      	it	hi
 800f568:	6013      	strhi	r3, [r2, #0]
 800f56a:	4a2b      	ldr	r2, [pc, #172]	@ (800f618 <_malloc_r+0x304>)
 800f56c:	6811      	ldr	r1, [r2, #0]
 800f56e:	428b      	cmp	r3, r1
 800f570:	bf88      	it	hi
 800f572:	6013      	strhi	r3, [r2, #0]
 800f574:	e0cf      	b.n	800f716 <_malloc_r+0x402>
 800f576:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800f57a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800f57e:	d218      	bcs.n	800f5b2 <_malloc_r+0x29e>
 800f580:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800f584:	3238      	adds	r2, #56	@ 0x38
 800f586:	f102 0e01 	add.w	lr, r2, #1
 800f58a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800f58e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800f592:	45f0      	cmp	r8, lr
 800f594:	d12b      	bne.n	800f5ee <_malloc_r+0x2da>
 800f596:	1092      	asrs	r2, r2, #2
 800f598:	f04f 0c01 	mov.w	ip, #1
 800f59c:	fa0c f202 	lsl.w	r2, ip, r2
 800f5a0:	4302      	orrs	r2, r0
 800f5a2:	6072      	str	r2, [r6, #4]
 800f5a4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800f5a8:	f8c8 4008 	str.w	r4, [r8, #8]
 800f5ac:	f8ce 400c 	str.w	r4, [lr, #12]
 800f5b0:	e763      	b.n	800f47a <_malloc_r+0x166>
 800f5b2:	2a14      	cmp	r2, #20
 800f5b4:	d801      	bhi.n	800f5ba <_malloc_r+0x2a6>
 800f5b6:	325b      	adds	r2, #91	@ 0x5b
 800f5b8:	e7e5      	b.n	800f586 <_malloc_r+0x272>
 800f5ba:	2a54      	cmp	r2, #84	@ 0x54
 800f5bc:	d803      	bhi.n	800f5c6 <_malloc_r+0x2b2>
 800f5be:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800f5c2:	326e      	adds	r2, #110	@ 0x6e
 800f5c4:	e7df      	b.n	800f586 <_malloc_r+0x272>
 800f5c6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800f5ca:	d803      	bhi.n	800f5d4 <_malloc_r+0x2c0>
 800f5cc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800f5d0:	3277      	adds	r2, #119	@ 0x77
 800f5d2:	e7d8      	b.n	800f586 <_malloc_r+0x272>
 800f5d4:	f240 5e54 	movw	lr, #1364	@ 0x554
 800f5d8:	4572      	cmp	r2, lr
 800f5da:	bf9a      	itte	ls
 800f5dc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800f5e0:	327c      	addls	r2, #124	@ 0x7c
 800f5e2:	227e      	movhi	r2, #126	@ 0x7e
 800f5e4:	e7cf      	b.n	800f586 <_malloc_r+0x272>
 800f5e6:	f8de e008 	ldr.w	lr, [lr, #8]
 800f5ea:	45f0      	cmp	r8, lr
 800f5ec:	d005      	beq.n	800f5fa <_malloc_r+0x2e6>
 800f5ee:	f8de 2004 	ldr.w	r2, [lr, #4]
 800f5f2:	f022 0203 	bic.w	r2, r2, #3
 800f5f6:	4562      	cmp	r2, ip
 800f5f8:	d8f5      	bhi.n	800f5e6 <_malloc_r+0x2d2>
 800f5fa:	f8de 800c 	ldr.w	r8, [lr, #12]
 800f5fe:	e7d1      	b.n	800f5a4 <_malloc_r+0x290>
 800f600:	20000020 	.word	0x20000020
 800f604:	20000028 	.word	0x20000028
 800f608:	20003760 	.word	0x20003760
 800f60c:	20000018 	.word	0x20000018
 800f610:	20003730 	.word	0x20003730
 800f614:	2000375c 	.word	0x2000375c
 800f618:	20003758 	.word	0x20003758
 800f61c:	6860      	ldr	r0, [r4, #4]
 800f61e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800f622:	f020 0003 	bic.w	r0, r0, #3
 800f626:	eba0 0a07 	sub.w	sl, r0, r7
 800f62a:	f1ba 0f0f 	cmp.w	sl, #15
 800f62e:	dd12      	ble.n	800f656 <_malloc_r+0x342>
 800f630:	68a3      	ldr	r3, [r4, #8]
 800f632:	19e2      	adds	r2, r4, r7
 800f634:	f047 0701 	orr.w	r7, r7, #1
 800f638:	6067      	str	r7, [r4, #4]
 800f63a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800f63e:	f8cc 3008 	str.w	r3, [ip, #8]
 800f642:	f04a 0301 	orr.w	r3, sl, #1
 800f646:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800f64a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800f64e:	6053      	str	r3, [r2, #4]
 800f650:	f844 a000 	str.w	sl, [r4, r0]
 800f654:	e68f      	b.n	800f376 <_malloc_r+0x62>
 800f656:	f1ba 0f00 	cmp.w	sl, #0
 800f65a:	db11      	blt.n	800f680 <_malloc_r+0x36c>
 800f65c:	4420      	add	r0, r4
 800f65e:	6843      	ldr	r3, [r0, #4]
 800f660:	f043 0301 	orr.w	r3, r3, #1
 800f664:	6043      	str	r3, [r0, #4]
 800f666:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800f66a:	4628      	mov	r0, r5
 800f66c:	f8c3 c00c 	str.w	ip, [r3, #12]
 800f670:	f8cc 3008 	str.w	r3, [ip, #8]
 800f674:	f000 f88e 	bl	800f794 <__malloc_unlock>
 800f678:	4620      	mov	r0, r4
 800f67a:	b003      	add	sp, #12
 800f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	4664      	mov	r4, ip
 800f682:	e70f      	b.n	800f4a4 <_malloc_r+0x190>
 800f684:	f858 0908 	ldr.w	r0, [r8], #-8
 800f688:	4540      	cmp	r0, r8
 800f68a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f68e:	f43f af13 	beq.w	800f4b8 <_malloc_r+0x1a4>
 800f692:	e718      	b.n	800f4c6 <_malloc_r+0x1b2>
 800f694:	3304      	adds	r3, #4
 800f696:	0052      	lsls	r2, r2, #1
 800f698:	4210      	tst	r0, r2
 800f69a:	d0fb      	beq.n	800f694 <_malloc_r+0x380>
 800f69c:	e6fc      	b.n	800f498 <_malloc_r+0x184>
 800f69e:	4673      	mov	r3, lr
 800f6a0:	e7fa      	b.n	800f698 <_malloc_r+0x384>
 800f6a2:	6810      	ldr	r0, [r2, #0]
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	bf1b      	ittet	ne
 800f6a8:	eba4 0b0b 	subne.w	fp, r4, fp
 800f6ac:	eb0b 020e 	addne.w	r2, fp, lr
 800f6b0:	6014      	streq	r4, [r2, #0]
 800f6b2:	601a      	strne	r2, [r3, #0]
 800f6b4:	f014 0b07 	ands.w	fp, r4, #7
 800f6b8:	bf1a      	itte	ne
 800f6ba:	f1cb 0008 	rsbne	r0, fp, #8
 800f6be:	1824      	addne	r4, r4, r0
 800f6c0:	4658      	moveq	r0, fp
 800f6c2:	1862      	adds	r2, r4, r1
 800f6c4:	ea02 010c 	and.w	r1, r2, ip
 800f6c8:	4480      	add	r8, r0
 800f6ca:	eba8 0801 	sub.w	r8, r8, r1
 800f6ce:	ea08 080c 	and.w	r8, r8, ip
 800f6d2:	4641      	mov	r1, r8
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	9201      	str	r2, [sp, #4]
 800f6d8:	f000 faf8 	bl	800fccc <_sbrk_r>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	9a01      	ldr	r2, [sp, #4]
 800f6e0:	4b28      	ldr	r3, [pc, #160]	@ (800f784 <_malloc_r+0x470>)
 800f6e2:	d107      	bne.n	800f6f4 <_malloc_r+0x3e0>
 800f6e4:	f1bb 0f00 	cmp.w	fp, #0
 800f6e8:	d023      	beq.n	800f732 <_malloc_r+0x41e>
 800f6ea:	f1ab 0008 	sub.w	r0, fp, #8
 800f6ee:	4410      	add	r0, r2
 800f6f0:	f04f 0800 	mov.w	r8, #0
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	60b4      	str	r4, [r6, #8]
 800f6f8:	1b00      	subs	r0, r0, r4
 800f6fa:	4440      	add	r0, r8
 800f6fc:	4442      	add	r2, r8
 800f6fe:	f040 0001 	orr.w	r0, r0, #1
 800f702:	45b2      	cmp	sl, r6
 800f704:	601a      	str	r2, [r3, #0]
 800f706:	6060      	str	r0, [r4, #4]
 800f708:	f43f af29 	beq.w	800f55e <_malloc_r+0x24a>
 800f70c:	f1b9 0f0f 	cmp.w	r9, #15
 800f710:	d812      	bhi.n	800f738 <_malloc_r+0x424>
 800f712:	2301      	movs	r3, #1
 800f714:	6063      	str	r3, [r4, #4]
 800f716:	68b3      	ldr	r3, [r6, #8]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	f023 0303 	bic.w	r3, r3, #3
 800f71e:	42bb      	cmp	r3, r7
 800f720:	eba3 0207 	sub.w	r2, r3, r7
 800f724:	d301      	bcc.n	800f72a <_malloc_r+0x416>
 800f726:	2a0f      	cmp	r2, #15
 800f728:	dc22      	bgt.n	800f770 <_malloc_r+0x45c>
 800f72a:	4628      	mov	r0, r5
 800f72c:	f000 f832 	bl	800f794 <__malloc_unlock>
 800f730:	e5fc      	b.n	800f32c <_malloc_r+0x18>
 800f732:	4610      	mov	r0, r2
 800f734:	46d8      	mov	r8, fp
 800f736:	e7dd      	b.n	800f6f4 <_malloc_r+0x3e0>
 800f738:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f73c:	f1a9 090c 	sub.w	r9, r9, #12
 800f740:	f029 0907 	bic.w	r9, r9, #7
 800f744:	f002 0201 	and.w	r2, r2, #1
 800f748:	ea42 0209 	orr.w	r2, r2, r9
 800f74c:	f8ca 2004 	str.w	r2, [sl, #4]
 800f750:	2105      	movs	r1, #5
 800f752:	eb0a 0209 	add.w	r2, sl, r9
 800f756:	f1b9 0f0f 	cmp.w	r9, #15
 800f75a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800f75e:	f67f aefe 	bls.w	800f55e <_malloc_r+0x24a>
 800f762:	f10a 0108 	add.w	r1, sl, #8
 800f766:	4628      	mov	r0, r5
 800f768:	f000 fb80 	bl	800fe6c <_free_r>
 800f76c:	4b05      	ldr	r3, [pc, #20]	@ (800f784 <_malloc_r+0x470>)
 800f76e:	e6f6      	b.n	800f55e <_malloc_r+0x24a>
 800f770:	68b4      	ldr	r4, [r6, #8]
 800f772:	f047 0301 	orr.w	r3, r7, #1
 800f776:	4427      	add	r7, r4
 800f778:	f042 0201 	orr.w	r2, r2, #1
 800f77c:	6063      	str	r3, [r4, #4]
 800f77e:	60b7      	str	r7, [r6, #8]
 800f780:	607a      	str	r2, [r7, #4]
 800f782:	e5f8      	b.n	800f376 <_malloc_r+0x62>
 800f784:	20003730 	.word	0x20003730

0800f788 <__malloc_lock>:
 800f788:	4801      	ldr	r0, [pc, #4]	@ (800f790 <__malloc_lock+0x8>)
 800f78a:	f000 baed 	b.w	800fd68 <__retarget_lock_acquire_recursive>
 800f78e:	bf00      	nop
 800f790:	200038a4 	.word	0x200038a4

0800f794 <__malloc_unlock>:
 800f794:	4801      	ldr	r0, [pc, #4]	@ (800f79c <__malloc_unlock+0x8>)
 800f796:	f000 bae8 	b.w	800fd6a <__retarget_lock_release_recursive>
 800f79a:	bf00      	nop
 800f79c:	200038a4 	.word	0x200038a4

0800f7a0 <std>:
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	b510      	push	{r4, lr}
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	e9c0 3300 	strd	r3, r3, [r0]
 800f7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7ae:	6083      	str	r3, [r0, #8]
 800f7b0:	8181      	strh	r1, [r0, #12]
 800f7b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f7b4:	81c2      	strh	r2, [r0, #14]
 800f7b6:	6183      	str	r3, [r0, #24]
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	2208      	movs	r2, #8
 800f7bc:	305c      	adds	r0, #92	@ 0x5c
 800f7be:	f000 fa1c 	bl	800fbfa <memset>
 800f7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f7f8 <std+0x58>)
 800f7c4:	6223      	str	r3, [r4, #32]
 800f7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f7fc <std+0x5c>)
 800f7c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f800 <std+0x60>)
 800f7cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f804 <std+0x64>)
 800f7d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f808 <std+0x68>)
 800f7d4:	61e4      	str	r4, [r4, #28]
 800f7d6:	429c      	cmp	r4, r3
 800f7d8:	d006      	beq.n	800f7e8 <std+0x48>
 800f7da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f7de:	4294      	cmp	r4, r2
 800f7e0:	d002      	beq.n	800f7e8 <std+0x48>
 800f7e2:	33d0      	adds	r3, #208	@ 0xd0
 800f7e4:	429c      	cmp	r4, r3
 800f7e6:	d105      	bne.n	800f7f4 <std+0x54>
 800f7e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f0:	f000 bab8 	b.w	800fd64 <__retarget_lock_init_recursive>
 800f7f4:	bd10      	pop	{r4, pc}
 800f7f6:	bf00      	nop
 800f7f8:	0800fb75 	.word	0x0800fb75
 800f7fc:	0800fb97 	.word	0x0800fb97
 800f800:	0800fbcf 	.word	0x0800fbcf
 800f804:	0800fbf3 	.word	0x0800fbf3
 800f808:	20003764 	.word	0x20003764

0800f80c <stdio_exit_handler>:
 800f80c:	4a02      	ldr	r2, [pc, #8]	@ (800f818 <stdio_exit_handler+0xc>)
 800f80e:	4903      	ldr	r1, [pc, #12]	@ (800f81c <stdio_exit_handler+0x10>)
 800f810:	4803      	ldr	r0, [pc, #12]	@ (800f820 <stdio_exit_handler+0x14>)
 800f812:	f000 b869 	b.w	800f8e8 <_fwalk_sglue>
 800f816:	bf00      	nop
 800f818:	20000428 	.word	0x20000428
 800f81c:	080113ad 	.word	0x080113ad
 800f820:	20000438 	.word	0x20000438

0800f824 <cleanup_stdio>:
 800f824:	6841      	ldr	r1, [r0, #4]
 800f826:	4b0c      	ldr	r3, [pc, #48]	@ (800f858 <cleanup_stdio+0x34>)
 800f828:	4299      	cmp	r1, r3
 800f82a:	b510      	push	{r4, lr}
 800f82c:	4604      	mov	r4, r0
 800f82e:	d001      	beq.n	800f834 <cleanup_stdio+0x10>
 800f830:	f001 fdbc 	bl	80113ac <_fclose_r>
 800f834:	68a1      	ldr	r1, [r4, #8]
 800f836:	4b09      	ldr	r3, [pc, #36]	@ (800f85c <cleanup_stdio+0x38>)
 800f838:	4299      	cmp	r1, r3
 800f83a:	d002      	beq.n	800f842 <cleanup_stdio+0x1e>
 800f83c:	4620      	mov	r0, r4
 800f83e:	f001 fdb5 	bl	80113ac <_fclose_r>
 800f842:	68e1      	ldr	r1, [r4, #12]
 800f844:	4b06      	ldr	r3, [pc, #24]	@ (800f860 <cleanup_stdio+0x3c>)
 800f846:	4299      	cmp	r1, r3
 800f848:	d004      	beq.n	800f854 <cleanup_stdio+0x30>
 800f84a:	4620      	mov	r0, r4
 800f84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f850:	f001 bdac 	b.w	80113ac <_fclose_r>
 800f854:	bd10      	pop	{r4, pc}
 800f856:	bf00      	nop
 800f858:	20003764 	.word	0x20003764
 800f85c:	200037cc 	.word	0x200037cc
 800f860:	20003834 	.word	0x20003834

0800f864 <global_stdio_init.part.0>:
 800f864:	b510      	push	{r4, lr}
 800f866:	4b0b      	ldr	r3, [pc, #44]	@ (800f894 <global_stdio_init.part.0+0x30>)
 800f868:	4c0b      	ldr	r4, [pc, #44]	@ (800f898 <global_stdio_init.part.0+0x34>)
 800f86a:	4a0c      	ldr	r2, [pc, #48]	@ (800f89c <global_stdio_init.part.0+0x38>)
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	4620      	mov	r0, r4
 800f870:	2200      	movs	r2, #0
 800f872:	2104      	movs	r1, #4
 800f874:	f7ff ff94 	bl	800f7a0 <std>
 800f878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f87c:	2201      	movs	r2, #1
 800f87e:	2109      	movs	r1, #9
 800f880:	f7ff ff8e 	bl	800f7a0 <std>
 800f884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f888:	2202      	movs	r2, #2
 800f88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f88e:	2112      	movs	r1, #18
 800f890:	f7ff bf86 	b.w	800f7a0 <std>
 800f894:	2000389c 	.word	0x2000389c
 800f898:	20003764 	.word	0x20003764
 800f89c:	0800f80d 	.word	0x0800f80d

0800f8a0 <__sfp_lock_acquire>:
 800f8a0:	4801      	ldr	r0, [pc, #4]	@ (800f8a8 <__sfp_lock_acquire+0x8>)
 800f8a2:	f000 ba61 	b.w	800fd68 <__retarget_lock_acquire_recursive>
 800f8a6:	bf00      	nop
 800f8a8:	200038a6 	.word	0x200038a6

0800f8ac <__sfp_lock_release>:
 800f8ac:	4801      	ldr	r0, [pc, #4]	@ (800f8b4 <__sfp_lock_release+0x8>)
 800f8ae:	f000 ba5c 	b.w	800fd6a <__retarget_lock_release_recursive>
 800f8b2:	bf00      	nop
 800f8b4:	200038a6 	.word	0x200038a6

0800f8b8 <__sinit>:
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	f7ff fff0 	bl	800f8a0 <__sfp_lock_acquire>
 800f8c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f8c2:	b11b      	cbz	r3, 800f8cc <__sinit+0x14>
 800f8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8c8:	f7ff bff0 	b.w	800f8ac <__sfp_lock_release>
 800f8cc:	4b04      	ldr	r3, [pc, #16]	@ (800f8e0 <__sinit+0x28>)
 800f8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8d0:	4b04      	ldr	r3, [pc, #16]	@ (800f8e4 <__sinit+0x2c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d1f5      	bne.n	800f8c4 <__sinit+0xc>
 800f8d8:	f7ff ffc4 	bl	800f864 <global_stdio_init.part.0>
 800f8dc:	e7f2      	b.n	800f8c4 <__sinit+0xc>
 800f8de:	bf00      	nop
 800f8e0:	0800f825 	.word	0x0800f825
 800f8e4:	2000389c 	.word	0x2000389c

0800f8e8 <_fwalk_sglue>:
 800f8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	4607      	mov	r7, r0
 800f8ee:	4688      	mov	r8, r1
 800f8f0:	4614      	mov	r4, r2
 800f8f2:	2600      	movs	r6, #0
 800f8f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8f8:	f1b9 0901 	subs.w	r9, r9, #1
 800f8fc:	d505      	bpl.n	800f90a <_fwalk_sglue+0x22>
 800f8fe:	6824      	ldr	r4, [r4, #0]
 800f900:	2c00      	cmp	r4, #0
 800f902:	d1f7      	bne.n	800f8f4 <_fwalk_sglue+0xc>
 800f904:	4630      	mov	r0, r6
 800f906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f90a:	89ab      	ldrh	r3, [r5, #12]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d907      	bls.n	800f920 <_fwalk_sglue+0x38>
 800f910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f914:	3301      	adds	r3, #1
 800f916:	d003      	beq.n	800f920 <_fwalk_sglue+0x38>
 800f918:	4629      	mov	r1, r5
 800f91a:	4638      	mov	r0, r7
 800f91c:	47c0      	blx	r8
 800f91e:	4306      	orrs	r6, r0
 800f920:	3568      	adds	r5, #104	@ 0x68
 800f922:	e7e9      	b.n	800f8f8 <_fwalk_sglue+0x10>

0800f924 <_puts_r>:
 800f924:	b530      	push	{r4, r5, lr}
 800f926:	4605      	mov	r5, r0
 800f928:	b089      	sub	sp, #36	@ 0x24
 800f92a:	4608      	mov	r0, r1
 800f92c:	460c      	mov	r4, r1
 800f92e:	f7f0 fc77 	bl	8000220 <strlen>
 800f932:	4b1e      	ldr	r3, [pc, #120]	@ (800f9ac <_puts_r+0x88>)
 800f934:	9306      	str	r3, [sp, #24]
 800f936:	2301      	movs	r3, #1
 800f938:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800f93c:	9307      	str	r3, [sp, #28]
 800f93e:	4418      	add	r0, r3
 800f940:	ab04      	add	r3, sp, #16
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	2302      	movs	r3, #2
 800f946:	9302      	str	r3, [sp, #8]
 800f948:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f94a:	68ac      	ldr	r4, [r5, #8]
 800f94c:	9003      	str	r0, [sp, #12]
 800f94e:	b913      	cbnz	r3, 800f956 <_puts_r+0x32>
 800f950:	4628      	mov	r0, r5
 800f952:	f7ff ffb1 	bl	800f8b8 <__sinit>
 800f956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f958:	07db      	lsls	r3, r3, #31
 800f95a:	d405      	bmi.n	800f968 <_puts_r+0x44>
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	0598      	lsls	r0, r3, #22
 800f960:	d402      	bmi.n	800f968 <_puts_r+0x44>
 800f962:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f964:	f000 fa00 	bl	800fd68 <__retarget_lock_acquire_recursive>
 800f968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96c:	0499      	lsls	r1, r3, #18
 800f96e:	d406      	bmi.n	800f97e <_puts_r+0x5a>
 800f970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f974:	81a3      	strh	r3, [r4, #12]
 800f976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f97c:	6663      	str	r3, [r4, #100]	@ 0x64
 800f97e:	4628      	mov	r0, r5
 800f980:	aa01      	add	r2, sp, #4
 800f982:	4621      	mov	r1, r4
 800f984:	f001 fe16 	bl	80115b4 <__sfvwrite_r>
 800f988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f98a:	2800      	cmp	r0, #0
 800f98c:	bf0c      	ite	eq
 800f98e:	250a      	moveq	r5, #10
 800f990:	f04f 35ff 	movne.w	r5, #4294967295
 800f994:	07da      	lsls	r2, r3, #31
 800f996:	d405      	bmi.n	800f9a4 <_puts_r+0x80>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	059b      	lsls	r3, r3, #22
 800f99c:	d402      	bmi.n	800f9a4 <_puts_r+0x80>
 800f99e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9a0:	f000 f9e3 	bl	800fd6a <__retarget_lock_release_recursive>
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	b009      	add	sp, #36	@ 0x24
 800f9a8:	bd30      	pop	{r4, r5, pc}
 800f9aa:	bf00      	nop
 800f9ac:	0801551b 	.word	0x0801551b

0800f9b0 <puts>:
 800f9b0:	4b02      	ldr	r3, [pc, #8]	@ (800f9bc <puts+0xc>)
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	f7ff bfb5 	b.w	800f924 <_puts_r>
 800f9ba:	bf00      	nop
 800f9bc:	20000434 	.word	0x20000434

0800f9c0 <setvbuf>:
 800f9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9c4:	461d      	mov	r5, r3
 800f9c6:	4b5a      	ldr	r3, [pc, #360]	@ (800fb30 <setvbuf+0x170>)
 800f9c8:	681f      	ldr	r7, [r3, #0]
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	460e      	mov	r6, r1
 800f9ce:	4690      	mov	r8, r2
 800f9d0:	b127      	cbz	r7, 800f9dc <setvbuf+0x1c>
 800f9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9d4:	b913      	cbnz	r3, 800f9dc <setvbuf+0x1c>
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f7ff ff6e 	bl	800f8b8 <__sinit>
 800f9dc:	f1b8 0f02 	cmp.w	r8, #2
 800f9e0:	d006      	beq.n	800f9f0 <setvbuf+0x30>
 800f9e2:	f1b8 0f01 	cmp.w	r8, #1
 800f9e6:	f200 80a0 	bhi.w	800fb2a <setvbuf+0x16a>
 800f9ea:	2d00      	cmp	r5, #0
 800f9ec:	f2c0 809d 	blt.w	800fb2a <setvbuf+0x16a>
 800f9f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9f2:	07d9      	lsls	r1, r3, #31
 800f9f4:	d405      	bmi.n	800fa02 <setvbuf+0x42>
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	059a      	lsls	r2, r3, #22
 800f9fa:	d402      	bmi.n	800fa02 <setvbuf+0x42>
 800f9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9fe:	f000 f9b3 	bl	800fd68 <__retarget_lock_acquire_recursive>
 800fa02:	4621      	mov	r1, r4
 800fa04:	4638      	mov	r0, r7
 800fa06:	f001 fdaf 	bl	8011568 <_fflush_r>
 800fa0a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fa0c:	b141      	cbz	r1, 800fa20 <setvbuf+0x60>
 800fa0e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800fa12:	4299      	cmp	r1, r3
 800fa14:	d002      	beq.n	800fa1c <setvbuf+0x5c>
 800fa16:	4638      	mov	r0, r7
 800fa18:	f000 fa28 	bl	800fe6c <_free_r>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa20:	2300      	movs	r3, #0
 800fa22:	61a3      	str	r3, [r4, #24]
 800fa24:	6063      	str	r3, [r4, #4]
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	061b      	lsls	r3, r3, #24
 800fa2a:	d503      	bpl.n	800fa34 <setvbuf+0x74>
 800fa2c:	6921      	ldr	r1, [r4, #16]
 800fa2e:	4638      	mov	r0, r7
 800fa30:	f000 fa1c 	bl	800fe6c <_free_r>
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800fa3a:	f023 0303 	bic.w	r3, r3, #3
 800fa3e:	f1b8 0f02 	cmp.w	r8, #2
 800fa42:	81a3      	strh	r3, [r4, #12]
 800fa44:	d067      	beq.n	800fb16 <setvbuf+0x156>
 800fa46:	ab01      	add	r3, sp, #4
 800fa48:	466a      	mov	r2, sp
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	f001 fefd 	bl	801184c <__swhatbuf_r>
 800fa52:	89a3      	ldrh	r3, [r4, #12]
 800fa54:	4318      	orrs	r0, r3
 800fa56:	81a0      	strh	r0, [r4, #12]
 800fa58:	bb2d      	cbnz	r5, 800faa6 <setvbuf+0xe6>
 800fa5a:	9d00      	ldr	r5, [sp, #0]
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	f7ff fc51 	bl	800f304 <malloc>
 800fa62:	4606      	mov	r6, r0
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d158      	bne.n	800fb1a <setvbuf+0x15a>
 800fa68:	f8dd 9000 	ldr.w	r9, [sp]
 800fa6c:	45a9      	cmp	r9, r5
 800fa6e:	d146      	bne.n	800fafe <setvbuf+0x13e>
 800fa70:	f04f 35ff 	mov.w	r5, #4294967295
 800fa74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa78:	f043 0202 	orr.w	r2, r3, #2
 800fa7c:	81a2      	strh	r2, [r4, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	60a2      	str	r2, [r4, #8]
 800fa82:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa86:	6022      	str	r2, [r4, #0]
 800fa88:	6122      	str	r2, [r4, #16]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	6162      	str	r2, [r4, #20]
 800fa8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa90:	07d6      	lsls	r6, r2, #31
 800fa92:	d404      	bmi.n	800fa9e <setvbuf+0xde>
 800fa94:	0598      	lsls	r0, r3, #22
 800fa96:	d402      	bmi.n	800fa9e <setvbuf+0xde>
 800fa98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa9a:	f000 f966 	bl	800fd6a <__retarget_lock_release_recursive>
 800fa9e:	4628      	mov	r0, r5
 800faa0:	b003      	add	sp, #12
 800faa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faa6:	2e00      	cmp	r6, #0
 800faa8:	d0d8      	beq.n	800fa5c <setvbuf+0x9c>
 800faaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faac:	b913      	cbnz	r3, 800fab4 <setvbuf+0xf4>
 800faae:	4638      	mov	r0, r7
 800fab0:	f7ff ff02 	bl	800f8b8 <__sinit>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	6026      	str	r6, [r4, #0]
 800fab8:	42ab      	cmp	r3, r5
 800faba:	bf1e      	ittt	ne
 800fabc:	89a3      	ldrhne	r3, [r4, #12]
 800fabe:	f443 6300 	orrne.w	r3, r3, #2048	@ 0x800
 800fac2:	81a3      	strhne	r3, [r4, #12]
 800fac4:	f1b8 0f01 	cmp.w	r8, #1
 800fac8:	bf02      	ittt	eq
 800faca:	89a3      	ldrheq	r3, [r4, #12]
 800facc:	f043 0301 	orreq.w	r3, r3, #1
 800fad0:	81a3      	strheq	r3, [r4, #12]
 800fad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fad6:	f013 0208 	ands.w	r2, r3, #8
 800fada:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800fade:	d01e      	beq.n	800fb1e <setvbuf+0x15e>
 800fae0:	07d9      	lsls	r1, r3, #31
 800fae2:	bf41      	itttt	mi
 800fae4:	2200      	movmi	r2, #0
 800fae6:	426d      	negmi	r5, r5
 800fae8:	60a2      	strmi	r2, [r4, #8]
 800faea:	61a5      	strmi	r5, [r4, #24]
 800faec:	bf58      	it	pl
 800faee:	60a5      	strpl	r5, [r4, #8]
 800faf0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800faf2:	07d2      	lsls	r2, r2, #31
 800faf4:	d401      	bmi.n	800fafa <setvbuf+0x13a>
 800faf6:	059b      	lsls	r3, r3, #22
 800faf8:	d513      	bpl.n	800fb22 <setvbuf+0x162>
 800fafa:	2500      	movs	r5, #0
 800fafc:	e7cf      	b.n	800fa9e <setvbuf+0xde>
 800fafe:	4648      	mov	r0, r9
 800fb00:	f7ff fc00 	bl	800f304 <malloc>
 800fb04:	4606      	mov	r6, r0
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d0b2      	beq.n	800fa70 <setvbuf+0xb0>
 800fb0a:	89a3      	ldrh	r3, [r4, #12]
 800fb0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb10:	81a3      	strh	r3, [r4, #12]
 800fb12:	464d      	mov	r5, r9
 800fb14:	e7c9      	b.n	800faaa <setvbuf+0xea>
 800fb16:	2500      	movs	r5, #0
 800fb18:	e7ac      	b.n	800fa74 <setvbuf+0xb4>
 800fb1a:	46a9      	mov	r9, r5
 800fb1c:	e7f5      	b.n	800fb0a <setvbuf+0x14a>
 800fb1e:	60a2      	str	r2, [r4, #8]
 800fb20:	e7e6      	b.n	800faf0 <setvbuf+0x130>
 800fb22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb24:	f000 f921 	bl	800fd6a <__retarget_lock_release_recursive>
 800fb28:	e7e7      	b.n	800fafa <setvbuf+0x13a>
 800fb2a:	f04f 35ff 	mov.w	r5, #4294967295
 800fb2e:	e7b6      	b.n	800fa9e <setvbuf+0xde>
 800fb30:	20000434 	.word	0x20000434

0800fb34 <sprintf>:
 800fb34:	b40e      	push	{r1, r2, r3}
 800fb36:	b500      	push	{lr}
 800fb38:	b09c      	sub	sp, #112	@ 0x70
 800fb3a:	ab1d      	add	r3, sp, #116	@ 0x74
 800fb3c:	9002      	str	r0, [sp, #8]
 800fb3e:	9006      	str	r0, [sp, #24]
 800fb40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fb44:	4809      	ldr	r0, [pc, #36]	@ (800fb6c <sprintf+0x38>)
 800fb46:	9107      	str	r1, [sp, #28]
 800fb48:	9104      	str	r1, [sp, #16]
 800fb4a:	4909      	ldr	r1, [pc, #36]	@ (800fb70 <sprintf+0x3c>)
 800fb4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb50:	9105      	str	r1, [sp, #20]
 800fb52:	6800      	ldr	r0, [r0, #0]
 800fb54:	9301      	str	r3, [sp, #4]
 800fb56:	a902      	add	r1, sp, #8
 800fb58:	f000 fa4a 	bl	800fff0 <_svfprintf_r>
 800fb5c:	9b02      	ldr	r3, [sp, #8]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	b01c      	add	sp, #112	@ 0x70
 800fb64:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb68:	b003      	add	sp, #12
 800fb6a:	4770      	bx	lr
 800fb6c:	20000434 	.word	0x20000434
 800fb70:	ffff0208 	.word	0xffff0208

0800fb74 <__sread>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	460c      	mov	r4, r1
 800fb78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb7c:	f000 f894 	bl	800fca8 <_read_r>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	bfab      	itete	ge
 800fb84:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800fb86:	89a3      	ldrhlt	r3, [r4, #12]
 800fb88:	181b      	addge	r3, r3, r0
 800fb8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fb8e:	bfac      	ite	ge
 800fb90:	6523      	strge	r3, [r4, #80]	@ 0x50
 800fb92:	81a3      	strhlt	r3, [r4, #12]
 800fb94:	bd10      	pop	{r4, pc}

0800fb96 <__swrite>:
 800fb96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb9a:	461f      	mov	r7, r3
 800fb9c:	898b      	ldrh	r3, [r1, #12]
 800fb9e:	05db      	lsls	r3, r3, #23
 800fba0:	4605      	mov	r5, r0
 800fba2:	460c      	mov	r4, r1
 800fba4:	4616      	mov	r6, r2
 800fba6:	d505      	bpl.n	800fbb4 <__swrite+0x1e>
 800fba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbac:	2302      	movs	r3, #2
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f000 f868 	bl	800fc84 <_lseek_r>
 800fbb4:	89a3      	ldrh	r3, [r4, #12]
 800fbb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fbbe:	81a3      	strh	r3, [r4, #12]
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	463b      	mov	r3, r7
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbca:	f000 b88f 	b.w	800fcec <_write_r>

0800fbce <__sseek>:
 800fbce:	b510      	push	{r4, lr}
 800fbd0:	460c      	mov	r4, r1
 800fbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd6:	f000 f855 	bl	800fc84 <_lseek_r>
 800fbda:	1c43      	adds	r3, r0, #1
 800fbdc:	89a3      	ldrh	r3, [r4, #12]
 800fbde:	bf15      	itete	ne
 800fbe0:	6520      	strne	r0, [r4, #80]	@ 0x50
 800fbe2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fbe6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fbea:	81a3      	strheq	r3, [r4, #12]
 800fbec:	bf18      	it	ne
 800fbee:	81a3      	strhne	r3, [r4, #12]
 800fbf0:	bd10      	pop	{r4, pc}

0800fbf2 <__sclose>:
 800fbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf6:	f000 b809 	b.w	800fc0c <_close_r>

0800fbfa <memset>:
 800fbfa:	4402      	add	r2, r0
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d100      	bne.n	800fc04 <memset+0xa>
 800fc02:	4770      	bx	lr
 800fc04:	f803 1b01 	strb.w	r1, [r3], #1
 800fc08:	e7f9      	b.n	800fbfe <memset+0x4>
	...

0800fc0c <_close_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4d06      	ldr	r5, [pc, #24]	@ (800fc28 <_close_r+0x1c>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	602b      	str	r3, [r5, #0]
 800fc18:	f7f3 f912 	bl	8002e40 <_close>
 800fc1c:	1c43      	adds	r3, r0, #1
 800fc1e:	d102      	bne.n	800fc26 <_close_r+0x1a>
 800fc20:	682b      	ldr	r3, [r5, #0]
 800fc22:	b103      	cbz	r3, 800fc26 <_close_r+0x1a>
 800fc24:	6023      	str	r3, [r4, #0]
 800fc26:	bd38      	pop	{r3, r4, r5, pc}
 800fc28:	200038a0 	.word	0x200038a0

0800fc2c <_reclaim_reent>:
 800fc2c:	4b14      	ldr	r3, [pc, #80]	@ (800fc80 <_reclaim_reent+0x54>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4283      	cmp	r3, r0
 800fc32:	b570      	push	{r4, r5, r6, lr}
 800fc34:	4604      	mov	r4, r0
 800fc36:	d022      	beq.n	800fc7e <_reclaim_reent+0x52>
 800fc38:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800fc3a:	b153      	cbz	r3, 800fc52 <_reclaim_reent+0x26>
 800fc3c:	2500      	movs	r5, #0
 800fc3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fc40:	5959      	ldr	r1, [r3, r5]
 800fc42:	b9b1      	cbnz	r1, 800fc72 <_reclaim_reent+0x46>
 800fc44:	3504      	adds	r5, #4
 800fc46:	2d80      	cmp	r5, #128	@ 0x80
 800fc48:	d1f9      	bne.n	800fc3e <_reclaim_reent+0x12>
 800fc4a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 f90d 	bl	800fe6c <_free_r>
 800fc52:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fc54:	b111      	cbz	r1, 800fc5c <_reclaim_reent+0x30>
 800fc56:	4620      	mov	r0, r4
 800fc58:	f000 f908 	bl	800fe6c <_free_r>
 800fc5c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800fc5e:	b111      	cbz	r1, 800fc66 <_reclaim_reent+0x3a>
 800fc60:	4620      	mov	r0, r4
 800fc62:	f000 f903 	bl	800fe6c <_free_r>
 800fc66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc68:	b14b      	cbz	r3, 800fc7e <_reclaim_reent+0x52>
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc70:	4718      	bx	r3
 800fc72:	680e      	ldr	r6, [r1, #0]
 800fc74:	4620      	mov	r0, r4
 800fc76:	f000 f8f9 	bl	800fe6c <_free_r>
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	e7e1      	b.n	800fc42 <_reclaim_reent+0x16>
 800fc7e:	bd70      	pop	{r4, r5, r6, pc}
 800fc80:	20000434 	.word	0x20000434

0800fc84 <_lseek_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4d07      	ldr	r5, [pc, #28]	@ (800fca4 <_lseek_r+0x20>)
 800fc88:	4604      	mov	r4, r0
 800fc8a:	4608      	mov	r0, r1
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	2200      	movs	r2, #0
 800fc90:	602a      	str	r2, [r5, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	f7f3 f8fb 	bl	8002e8e <_lseek>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d102      	bne.n	800fca2 <_lseek_r+0x1e>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	b103      	cbz	r3, 800fca2 <_lseek_r+0x1e>
 800fca0:	6023      	str	r3, [r4, #0]
 800fca2:	bd38      	pop	{r3, r4, r5, pc}
 800fca4:	200038a0 	.word	0x200038a0

0800fca8 <_read_r>:
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	4d07      	ldr	r5, [pc, #28]	@ (800fcc8 <_read_r+0x20>)
 800fcac:	4604      	mov	r4, r0
 800fcae:	4608      	mov	r0, r1
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	602a      	str	r2, [r5, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f7f3 f889 	bl	8002dce <_read>
 800fcbc:	1c43      	adds	r3, r0, #1
 800fcbe:	d102      	bne.n	800fcc6 <_read_r+0x1e>
 800fcc0:	682b      	ldr	r3, [r5, #0]
 800fcc2:	b103      	cbz	r3, 800fcc6 <_read_r+0x1e>
 800fcc4:	6023      	str	r3, [r4, #0]
 800fcc6:	bd38      	pop	{r3, r4, r5, pc}
 800fcc8:	200038a0 	.word	0x200038a0

0800fccc <_sbrk_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d06      	ldr	r5, [pc, #24]	@ (800fce8 <_sbrk_r+0x1c>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	f7f3 f8e6 	bl	8002ea8 <_sbrk>
 800fcdc:	1c43      	adds	r3, r0, #1
 800fcde:	d102      	bne.n	800fce6 <_sbrk_r+0x1a>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	b103      	cbz	r3, 800fce6 <_sbrk_r+0x1a>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	200038a0 	.word	0x200038a0

0800fcec <_write_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d07      	ldr	r5, [pc, #28]	@ (800fd0c <_write_r+0x20>)
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f3 f884 	bl	8002e08 <_write>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_write_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_write_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	200038a0 	.word	0x200038a0

0800fd10 <__errno>:
 800fd10:	4b01      	ldr	r3, [pc, #4]	@ (800fd18 <__errno+0x8>)
 800fd12:	6818      	ldr	r0, [r3, #0]
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20000434 	.word	0x20000434

0800fd1c <__libc_init_array>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800fd54 <__libc_init_array+0x38>)
 800fd20:	4c0d      	ldr	r4, [pc, #52]	@ (800fd58 <__libc_init_array+0x3c>)
 800fd22:	1b64      	subs	r4, r4, r5
 800fd24:	10a4      	asrs	r4, r4, #2
 800fd26:	2600      	movs	r6, #0
 800fd28:	42a6      	cmp	r6, r4
 800fd2a:	d109      	bne.n	800fd40 <__libc_init_array+0x24>
 800fd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800fd5c <__libc_init_array+0x40>)
 800fd2e:	4c0c      	ldr	r4, [pc, #48]	@ (800fd60 <__libc_init_array+0x44>)
 800fd30:	f005 f97e 	bl	8015030 <_init>
 800fd34:	1b64      	subs	r4, r4, r5
 800fd36:	10a4      	asrs	r4, r4, #2
 800fd38:	2600      	movs	r6, #0
 800fd3a:	42a6      	cmp	r6, r4
 800fd3c:	d105      	bne.n	800fd4a <__libc_init_array+0x2e>
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd44:	4798      	blx	r3
 800fd46:	3601      	adds	r6, #1
 800fd48:	e7ee      	b.n	800fd28 <__libc_init_array+0xc>
 800fd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd4e:	4798      	blx	r3
 800fd50:	3601      	adds	r6, #1
 800fd52:	e7f2      	b.n	800fd3a <__libc_init_array+0x1e>
 800fd54:	08015720 	.word	0x08015720
 800fd58:	08015720 	.word	0x08015720
 800fd5c:	08015720 	.word	0x08015720
 800fd60:	08015728 	.word	0x08015728

0800fd64 <__retarget_lock_init_recursive>:
 800fd64:	4770      	bx	lr

0800fd66 <__retarget_lock_close_recursive>:
 800fd66:	4770      	bx	lr

0800fd68 <__retarget_lock_acquire_recursive>:
 800fd68:	4770      	bx	lr

0800fd6a <__retarget_lock_release_recursive>:
 800fd6a:	4770      	bx	lr

0800fd6c <sysconf>:
 800fd6c:	2808      	cmp	r0, #8
 800fd6e:	b508      	push	{r3, lr}
 800fd70:	d006      	beq.n	800fd80 <sysconf+0x14>
 800fd72:	f7ff ffcd 	bl	800fd10 <__errno>
 800fd76:	2316      	movs	r3, #22
 800fd78:	6003      	str	r3, [r0, #0]
 800fd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7e:	bd08      	pop	{r3, pc}
 800fd80:	2080      	movs	r0, #128	@ 0x80
 800fd82:	e7fc      	b.n	800fd7e <sysconf+0x12>

0800fd84 <memcpy>:
 800fd84:	440a      	add	r2, r1
 800fd86:	4291      	cmp	r1, r2
 800fd88:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd8c:	d100      	bne.n	800fd90 <memcpy+0xc>
 800fd8e:	4770      	bx	lr
 800fd90:	b510      	push	{r4, lr}
 800fd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd9a:	4291      	cmp	r1, r2
 800fd9c:	d1f9      	bne.n	800fd92 <memcpy+0xe>
 800fd9e:	bd10      	pop	{r4, pc}

0800fda0 <register_fini>:
 800fda0:	4b02      	ldr	r3, [pc, #8]	@ (800fdac <register_fini+0xc>)
 800fda2:	b113      	cbz	r3, 800fdaa <register_fini+0xa>
 800fda4:	4802      	ldr	r0, [pc, #8]	@ (800fdb0 <register_fini+0x10>)
 800fda6:	f000 b805 	b.w	800fdb4 <atexit>
 800fdaa:	4770      	bx	lr
 800fdac:	00000000 	.word	0x00000000
 800fdb0:	08011a75 	.word	0x08011a75

0800fdb4 <atexit>:
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4601      	mov	r1, r0
 800fdb8:	461a      	mov	r2, r3
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f001 bea4 	b.w	8011b08 <__register_exitproc>

0800fdc0 <_malloc_trim_r>:
 800fdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	2008      	movs	r0, #8
 800fdc8:	4689      	mov	r9, r1
 800fdca:	f7ff ffcf 	bl	800fd6c <sysconf>
 800fdce:	4f24      	ldr	r7, [pc, #144]	@ (800fe60 <_malloc_trim_r+0xa0>)
 800fdd0:	4680      	mov	r8, r0
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7ff fcd8 	bl	800f788 <__malloc_lock>
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	685d      	ldr	r5, [r3, #4]
 800fddc:	f025 0503 	bic.w	r5, r5, #3
 800fde0:	f1a5 0411 	sub.w	r4, r5, #17
 800fde4:	eba4 0409 	sub.w	r4, r4, r9
 800fde8:	4444      	add	r4, r8
 800fdea:	fbb4 f4f8 	udiv	r4, r4, r8
 800fdee:	3c01      	subs	r4, #1
 800fdf0:	fb08 f404 	mul.w	r4, r8, r4
 800fdf4:	45a0      	cmp	r8, r4
 800fdf6:	dd05      	ble.n	800fe04 <_malloc_trim_r+0x44>
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff fccb 	bl	800f794 <__malloc_unlock>
 800fdfe:	2000      	movs	r0, #0
 800fe00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe04:	2100      	movs	r1, #0
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ff60 	bl	800fccc <_sbrk_r>
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	442b      	add	r3, r5
 800fe10:	4298      	cmp	r0, r3
 800fe12:	d1f1      	bne.n	800fdf8 <_malloc_trim_r+0x38>
 800fe14:	4261      	negs	r1, r4
 800fe16:	4630      	mov	r0, r6
 800fe18:	f7ff ff58 	bl	800fccc <_sbrk_r>
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	d110      	bne.n	800fe42 <_malloc_trim_r+0x82>
 800fe20:	2100      	movs	r1, #0
 800fe22:	4630      	mov	r0, r6
 800fe24:	f7ff ff52 	bl	800fccc <_sbrk_r>
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	1a83      	subs	r3, r0, r2
 800fe2c:	2b0f      	cmp	r3, #15
 800fe2e:	dde3      	ble.n	800fdf8 <_malloc_trim_r+0x38>
 800fe30:	490c      	ldr	r1, [pc, #48]	@ (800fe64 <_malloc_trim_r+0xa4>)
 800fe32:	6809      	ldr	r1, [r1, #0]
 800fe34:	1a40      	subs	r0, r0, r1
 800fe36:	490c      	ldr	r1, [pc, #48]	@ (800fe68 <_malloc_trim_r+0xa8>)
 800fe38:	f043 0301 	orr.w	r3, r3, #1
 800fe3c:	6008      	str	r0, [r1, #0]
 800fe3e:	6053      	str	r3, [r2, #4]
 800fe40:	e7da      	b.n	800fdf8 <_malloc_trim_r+0x38>
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	4a08      	ldr	r2, [pc, #32]	@ (800fe68 <_malloc_trim_r+0xa8>)
 800fe46:	1b2d      	subs	r5, r5, r4
 800fe48:	f045 0501 	orr.w	r5, r5, #1
 800fe4c:	605d      	str	r5, [r3, #4]
 800fe4e:	6813      	ldr	r3, [r2, #0]
 800fe50:	4630      	mov	r0, r6
 800fe52:	1b1b      	subs	r3, r3, r4
 800fe54:	6013      	str	r3, [r2, #0]
 800fe56:	f7ff fc9d 	bl	800f794 <__malloc_unlock>
 800fe5a:	2001      	movs	r0, #1
 800fe5c:	e7d0      	b.n	800fe00 <_malloc_trim_r+0x40>
 800fe5e:	bf00      	nop
 800fe60:	20000020 	.word	0x20000020
 800fe64:	20000018 	.word	0x20000018
 800fe68:	20003730 	.word	0x20003730

0800fe6c <_free_r>:
 800fe6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6e:	4604      	mov	r4, r0
 800fe70:	460f      	mov	r7, r1
 800fe72:	2900      	cmp	r1, #0
 800fe74:	f000 80b1 	beq.w	800ffda <_free_r+0x16e>
 800fe78:	f7ff fc86 	bl	800f788 <__malloc_lock>
 800fe7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fe80:	4d56      	ldr	r5, [pc, #344]	@ (800ffdc <_free_r+0x170>)
 800fe82:	f022 0001 	bic.w	r0, r2, #1
 800fe86:	f1a7 0308 	sub.w	r3, r7, #8
 800fe8a:	eb03 0c00 	add.w	ip, r3, r0
 800fe8e:	68a9      	ldr	r1, [r5, #8]
 800fe90:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800fe94:	4561      	cmp	r1, ip
 800fe96:	f026 0603 	bic.w	r6, r6, #3
 800fe9a:	f002 0201 	and.w	r2, r2, #1
 800fe9e:	d11b      	bne.n	800fed8 <_free_r+0x6c>
 800fea0:	4406      	add	r6, r0
 800fea2:	b93a      	cbnz	r2, 800feb4 <_free_r+0x48>
 800fea4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800fea8:	1a9b      	subs	r3, r3, r2
 800feaa:	4416      	add	r6, r2
 800feac:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800feb0:	60ca      	str	r2, [r1, #12]
 800feb2:	6091      	str	r1, [r2, #8]
 800feb4:	f046 0201 	orr.w	r2, r6, #1
 800feb8:	605a      	str	r2, [r3, #4]
 800feba:	60ab      	str	r3, [r5, #8]
 800febc:	4b48      	ldr	r3, [pc, #288]	@ (800ffe0 <_free_r+0x174>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	42b3      	cmp	r3, r6
 800fec2:	d804      	bhi.n	800fece <_free_r+0x62>
 800fec4:	4b47      	ldr	r3, [pc, #284]	@ (800ffe4 <_free_r+0x178>)
 800fec6:	4620      	mov	r0, r4
 800fec8:	6819      	ldr	r1, [r3, #0]
 800feca:	f7ff ff79 	bl	800fdc0 <_malloc_trim_r>
 800fece:	4620      	mov	r0, r4
 800fed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fed4:	f7ff bc5e 	b.w	800f794 <__malloc_unlock>
 800fed8:	f8cc 6004 	str.w	r6, [ip, #4]
 800fedc:	2a00      	cmp	r2, #0
 800fede:	d138      	bne.n	800ff52 <_free_r+0xe6>
 800fee0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800fee4:	1a5b      	subs	r3, r3, r1
 800fee6:	4408      	add	r0, r1
 800fee8:	6899      	ldr	r1, [r3, #8]
 800feea:	f105 0708 	add.w	r7, r5, #8
 800feee:	42b9      	cmp	r1, r7
 800fef0:	d031      	beq.n	800ff56 <_free_r+0xea>
 800fef2:	68df      	ldr	r7, [r3, #12]
 800fef4:	60cf      	str	r7, [r1, #12]
 800fef6:	60b9      	str	r1, [r7, #8]
 800fef8:	eb0c 0106 	add.w	r1, ip, r6
 800fefc:	6849      	ldr	r1, [r1, #4]
 800fefe:	07c9      	lsls	r1, r1, #31
 800ff00:	d40b      	bmi.n	800ff1a <_free_r+0xae>
 800ff02:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800ff06:	4430      	add	r0, r6
 800ff08:	bb3a      	cbnz	r2, 800ff5a <_free_r+0xee>
 800ff0a:	4e37      	ldr	r6, [pc, #220]	@ (800ffe8 <_free_r+0x17c>)
 800ff0c:	42b1      	cmp	r1, r6
 800ff0e:	d124      	bne.n	800ff5a <_free_r+0xee>
 800ff10:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800ff14:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ff18:	2201      	movs	r2, #1
 800ff1a:	f040 0101 	orr.w	r1, r0, #1
 800ff1e:	6059      	str	r1, [r3, #4]
 800ff20:	5018      	str	r0, [r3, r0]
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	d1d3      	bne.n	800fece <_free_r+0x62>
 800ff26:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800ff2a:	d21b      	bcs.n	800ff64 <_free_r+0xf8>
 800ff2c:	08c2      	lsrs	r2, r0, #3
 800ff2e:	2101      	movs	r1, #1
 800ff30:	0940      	lsrs	r0, r0, #5
 800ff32:	4081      	lsls	r1, r0
 800ff34:	6868      	ldr	r0, [r5, #4]
 800ff36:	3201      	adds	r2, #1
 800ff38:	4301      	orrs	r1, r0
 800ff3a:	6069      	str	r1, [r5, #4]
 800ff3c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800ff40:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800ff44:	3908      	subs	r1, #8
 800ff46:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ff4a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800ff4e:	60c3      	str	r3, [r0, #12]
 800ff50:	e7bd      	b.n	800fece <_free_r+0x62>
 800ff52:	2200      	movs	r2, #0
 800ff54:	e7d0      	b.n	800fef8 <_free_r+0x8c>
 800ff56:	2201      	movs	r2, #1
 800ff58:	e7ce      	b.n	800fef8 <_free_r+0x8c>
 800ff5a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800ff5e:	60ce      	str	r6, [r1, #12]
 800ff60:	60b1      	str	r1, [r6, #8]
 800ff62:	e7da      	b.n	800ff1a <_free_r+0xae>
 800ff64:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800ff68:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800ff6c:	d214      	bcs.n	800ff98 <_free_r+0x12c>
 800ff6e:	0982      	lsrs	r2, r0, #6
 800ff70:	3238      	adds	r2, #56	@ 0x38
 800ff72:	1c51      	adds	r1, r2, #1
 800ff74:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800ff78:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800ff7c:	428e      	cmp	r6, r1
 800ff7e:	d125      	bne.n	800ffcc <_free_r+0x160>
 800ff80:	2001      	movs	r0, #1
 800ff82:	1092      	asrs	r2, r2, #2
 800ff84:	fa00 f202 	lsl.w	r2, r0, r2
 800ff88:	6868      	ldr	r0, [r5, #4]
 800ff8a:	4302      	orrs	r2, r0
 800ff8c:	606a      	str	r2, [r5, #4]
 800ff8e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800ff92:	60b3      	str	r3, [r6, #8]
 800ff94:	60cb      	str	r3, [r1, #12]
 800ff96:	e79a      	b.n	800fece <_free_r+0x62>
 800ff98:	2a14      	cmp	r2, #20
 800ff9a:	d801      	bhi.n	800ffa0 <_free_r+0x134>
 800ff9c:	325b      	adds	r2, #91	@ 0x5b
 800ff9e:	e7e8      	b.n	800ff72 <_free_r+0x106>
 800ffa0:	2a54      	cmp	r2, #84	@ 0x54
 800ffa2:	d802      	bhi.n	800ffaa <_free_r+0x13e>
 800ffa4:	0b02      	lsrs	r2, r0, #12
 800ffa6:	326e      	adds	r2, #110	@ 0x6e
 800ffa8:	e7e3      	b.n	800ff72 <_free_r+0x106>
 800ffaa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800ffae:	d802      	bhi.n	800ffb6 <_free_r+0x14a>
 800ffb0:	0bc2      	lsrs	r2, r0, #15
 800ffb2:	3277      	adds	r2, #119	@ 0x77
 800ffb4:	e7dd      	b.n	800ff72 <_free_r+0x106>
 800ffb6:	f240 5154 	movw	r1, #1364	@ 0x554
 800ffba:	428a      	cmp	r2, r1
 800ffbc:	bf9a      	itte	ls
 800ffbe:	0c82      	lsrls	r2, r0, #18
 800ffc0:	327c      	addls	r2, #124	@ 0x7c
 800ffc2:	227e      	movhi	r2, #126	@ 0x7e
 800ffc4:	e7d5      	b.n	800ff72 <_free_r+0x106>
 800ffc6:	6889      	ldr	r1, [r1, #8]
 800ffc8:	428e      	cmp	r6, r1
 800ffca:	d004      	beq.n	800ffd6 <_free_r+0x16a>
 800ffcc:	684a      	ldr	r2, [r1, #4]
 800ffce:	f022 0203 	bic.w	r2, r2, #3
 800ffd2:	4282      	cmp	r2, r0
 800ffd4:	d8f7      	bhi.n	800ffc6 <_free_r+0x15a>
 800ffd6:	68ce      	ldr	r6, [r1, #12]
 800ffd8:	e7d9      	b.n	800ff8e <_free_r+0x122>
 800ffda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffdc:	20000020 	.word	0x20000020
 800ffe0:	2000001c 	.word	0x2000001c
 800ffe4:	20003760 	.word	0x20003760
 800ffe8:	20000028 	.word	0x20000028
 800ffec:	00000000 	.word	0x00000000

0800fff0 <_svfprintf_r>:
 800fff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff4:	b0d3      	sub	sp, #332	@ 0x14c
 800fff6:	468b      	mov	fp, r1
 800fff8:	4691      	mov	r9, r2
 800fffa:	461e      	mov	r6, r3
 800fffc:	9003      	str	r0, [sp, #12]
 800fffe:	f001 fd13 	bl	8011a28 <_localeconv_r>
 8010002:	6803      	ldr	r3, [r0, #0]
 8010004:	9316      	str	r3, [sp, #88]	@ 0x58
 8010006:	4618      	mov	r0, r3
 8010008:	f7f0 f90a 	bl	8000220 <strlen>
 801000c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010010:	900d      	str	r0, [sp, #52]	@ 0x34
 8010012:	061b      	lsls	r3, r3, #24
 8010014:	d515      	bpl.n	8010042 <_svfprintf_r+0x52>
 8010016:	f8db 3010 	ldr.w	r3, [fp, #16]
 801001a:	b993      	cbnz	r3, 8010042 <_svfprintf_r+0x52>
 801001c:	9803      	ldr	r0, [sp, #12]
 801001e:	2140      	movs	r1, #64	@ 0x40
 8010020:	f7ff f978 	bl	800f314 <_malloc_r>
 8010024:	f8cb 0000 	str.w	r0, [fp]
 8010028:	f8cb 0010 	str.w	r0, [fp, #16]
 801002c:	b930      	cbnz	r0, 801003c <_svfprintf_r+0x4c>
 801002e:	9a03      	ldr	r2, [sp, #12]
 8010030:	230c      	movs	r3, #12
 8010032:	6013      	str	r3, [r2, #0]
 8010034:	f04f 33ff 	mov.w	r3, #4294967295
 8010038:	930f      	str	r3, [sp, #60]	@ 0x3c
 801003a:	e1f7      	b.n	801042c <_svfprintf_r+0x43c>
 801003c:	2340      	movs	r3, #64	@ 0x40
 801003e:	f8cb 3014 	str.w	r3, [fp, #20]
 8010042:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8010290 <_svfprintf_r+0x2a0>
 8010046:	2300      	movs	r3, #0
 8010048:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801004c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010050:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8010054:	ac29      	add	r4, sp, #164	@ 0xa4
 8010056:	9426      	str	r4, [sp, #152]	@ 0x98
 8010058:	9304      	str	r3, [sp, #16]
 801005a:	9309      	str	r3, [sp, #36]	@ 0x24
 801005c:	9312      	str	r3, [sp, #72]	@ 0x48
 801005e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010060:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010062:	464b      	mov	r3, r9
 8010064:	461d      	mov	r5, r3
 8010066:	f813 2b01 	ldrb.w	r2, [r3], #1
 801006a:	b10a      	cbz	r2, 8010070 <_svfprintf_r+0x80>
 801006c:	2a25      	cmp	r2, #37	@ 0x25
 801006e:	d1f9      	bne.n	8010064 <_svfprintf_r+0x74>
 8010070:	ebb5 0709 	subs.w	r7, r5, r9
 8010074:	d00d      	beq.n	8010092 <_svfprintf_r+0xa2>
 8010076:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010078:	443b      	add	r3, r7
 801007a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801007c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801007e:	3301      	adds	r3, #1
 8010080:	2b07      	cmp	r3, #7
 8010082:	e9c4 9700 	strd	r9, r7, [r4]
 8010086:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010088:	dc75      	bgt.n	8010176 <_svfprintf_r+0x186>
 801008a:	3408      	adds	r4, #8
 801008c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801008e:	443b      	add	r3, r7
 8010090:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010092:	782b      	ldrb	r3, [r5, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	f001 8148 	beq.w	801132a <_svfprintf_r+0x133a>
 801009a:	2200      	movs	r2, #0
 801009c:	1c6b      	adds	r3, r5, #1
 801009e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80100a2:	f04f 38ff 	mov.w	r8, #4294967295
 80100a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80100a8:	4615      	mov	r5, r2
 80100aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100ae:	9206      	str	r2, [sp, #24]
 80100b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80100b2:	9b06      	ldr	r3, [sp, #24]
 80100b4:	3b20      	subs	r3, #32
 80100b6:	2b5a      	cmp	r3, #90	@ 0x5a
 80100b8:	f200 85a4 	bhi.w	8010c04 <_svfprintf_r+0xc14>
 80100bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80100c0:	05a2009d 	.word	0x05a2009d
 80100c4:	00a505a2 	.word	0x00a505a2
 80100c8:	05a205a2 	.word	0x05a205a2
 80100cc:	008505a2 	.word	0x008505a2
 80100d0:	05a205a2 	.word	0x05a205a2
 80100d4:	00b200a8 	.word	0x00b200a8
 80100d8:	00af05a2 	.word	0x00af05a2
 80100dc:	05a200b4 	.word	0x05a200b4
 80100e0:	00d100ce 	.word	0x00d100ce
 80100e4:	00d100d1 	.word	0x00d100d1
 80100e8:	00d100d1 	.word	0x00d100d1
 80100ec:	00d100d1 	.word	0x00d100d1
 80100f0:	00d100d1 	.word	0x00d100d1
 80100f4:	05a205a2 	.word	0x05a205a2
 80100f8:	05a205a2 	.word	0x05a205a2
 80100fc:	05a205a2 	.word	0x05a205a2
 8010100:	014705a2 	.word	0x014705a2
 8010104:	010805a2 	.word	0x010805a2
 8010108:	0147011b 	.word	0x0147011b
 801010c:	01470147 	.word	0x01470147
 8010110:	05a205a2 	.word	0x05a205a2
 8010114:	05a205a2 	.word	0x05a205a2
 8010118:	05a200e2 	.word	0x05a200e2
 801011c:	049d05a2 	.word	0x049d05a2
 8010120:	05a205a2 	.word	0x05a205a2
 8010124:	04e705a2 	.word	0x04e705a2
 8010128:	050805a2 	.word	0x050805a2
 801012c:	05a205a2 	.word	0x05a205a2
 8010130:	05a2052a 	.word	0x05a2052a
 8010134:	05a205a2 	.word	0x05a205a2
 8010138:	05a205a2 	.word	0x05a205a2
 801013c:	05a205a2 	.word	0x05a205a2
 8010140:	014705a2 	.word	0x014705a2
 8010144:	010805a2 	.word	0x010805a2
 8010148:	0147011d 	.word	0x0147011d
 801014c:	01470147 	.word	0x01470147
 8010150:	011d00ee 	.word	0x011d00ee
 8010154:	05a20102 	.word	0x05a20102
 8010158:	05a200fb 	.word	0x05a200fb
 801015c:	049f047e 	.word	0x049f047e
 8010160:	010204d6 	.word	0x010204d6
 8010164:	04e705a2 	.word	0x04e705a2
 8010168:	050a009b 	.word	0x050a009b
 801016c:	05a205a2 	.word	0x05a205a2
 8010170:	05a20065 	.word	0x05a20065
 8010174:	009b      	.short	0x009b
 8010176:	9803      	ldr	r0, [sp, #12]
 8010178:	aa26      	add	r2, sp, #152	@ 0x98
 801017a:	4659      	mov	r1, fp
 801017c:	f003 f833 	bl	80131e6 <__ssprint_r>
 8010180:	2800      	cmp	r0, #0
 8010182:	f040 814e 	bne.w	8010422 <_svfprintf_r+0x432>
 8010186:	ac29      	add	r4, sp, #164	@ 0xa4
 8010188:	e780      	b.n	801008c <_svfprintf_r+0x9c>
 801018a:	4b43      	ldr	r3, [pc, #268]	@ (8010298 <_svfprintf_r+0x2a8>)
 801018c:	9319      	str	r3, [sp, #100]	@ 0x64
 801018e:	f015 0320 	ands.w	r3, r5, #32
 8010192:	f000 84c2 	beq.w	8010b1a <_svfprintf_r+0xb2a>
 8010196:	3607      	adds	r6, #7
 8010198:	f026 0307 	bic.w	r3, r6, #7
 801019c:	461a      	mov	r2, r3
 801019e:	685f      	ldr	r7, [r3, #4]
 80101a0:	f852 6b08 	ldr.w	r6, [r2], #8
 80101a4:	9207      	str	r2, [sp, #28]
 80101a6:	07eb      	lsls	r3, r5, #31
 80101a8:	d50a      	bpl.n	80101c0 <_svfprintf_r+0x1d0>
 80101aa:	ea56 0307 	orrs.w	r3, r6, r7
 80101ae:	d007      	beq.n	80101c0 <_svfprintf_r+0x1d0>
 80101b0:	2330      	movs	r3, #48	@ 0x30
 80101b2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80101b6:	9b06      	ldr	r3, [sp, #24]
 80101b8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80101bc:	f045 0502 	orr.w	r5, r5, #2
 80101c0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80101c4:	2302      	movs	r3, #2
 80101c6:	f000 bc28 	b.w	8010a1a <_svfprintf_r+0xa2a>
 80101ca:	9803      	ldr	r0, [sp, #12]
 80101cc:	f001 fc2c 	bl	8011a28 <_localeconv_r>
 80101d0:	6843      	ldr	r3, [r0, #4]
 80101d2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f0 f823 	bl	8000220 <strlen>
 80101da:	9012      	str	r0, [sp, #72]	@ 0x48
 80101dc:	9803      	ldr	r0, [sp, #12]
 80101de:	f001 fc23 	bl	8011a28 <_localeconv_r>
 80101e2:	6883      	ldr	r3, [r0, #8]
 80101e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80101e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80101e8:	b12b      	cbz	r3, 80101f6 <_svfprintf_r+0x206>
 80101ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ec:	b11b      	cbz	r3, 80101f6 <_svfprintf_r+0x206>
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	b10b      	cbz	r3, 80101f6 <_svfprintf_r+0x206>
 80101f2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80101f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101f8:	e757      	b.n	80100aa <_svfprintf_r+0xba>
 80101fa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1f9      	bne.n	80101f6 <_svfprintf_r+0x206>
 8010202:	2320      	movs	r3, #32
 8010204:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010208:	e7f5      	b.n	80101f6 <_svfprintf_r+0x206>
 801020a:	f045 0501 	orr.w	r5, r5, #1
 801020e:	e7f2      	b.n	80101f6 <_svfprintf_r+0x206>
 8010210:	f856 3b04 	ldr.w	r3, [r6], #4
 8010214:	930e      	str	r3, [sp, #56]	@ 0x38
 8010216:	2b00      	cmp	r3, #0
 8010218:	daed      	bge.n	80101f6 <_svfprintf_r+0x206>
 801021a:	425b      	negs	r3, r3
 801021c:	930e      	str	r3, [sp, #56]	@ 0x38
 801021e:	f045 0504 	orr.w	r5, r5, #4
 8010222:	e7e8      	b.n	80101f6 <_svfprintf_r+0x206>
 8010224:	232b      	movs	r3, #43	@ 0x2b
 8010226:	e7ed      	b.n	8010204 <_svfprintf_r+0x214>
 8010228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801022e:	9206      	str	r2, [sp, #24]
 8010230:	2a2a      	cmp	r2, #42	@ 0x2a
 8010232:	d10f      	bne.n	8010254 <_svfprintf_r+0x264>
 8010234:	f856 2b04 	ldr.w	r2, [r6], #4
 8010238:	930c      	str	r3, [sp, #48]	@ 0x30
 801023a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 801023e:	e7da      	b.n	80101f6 <_svfprintf_r+0x206>
 8010240:	fb01 2808 	mla	r8, r1, r8, r2
 8010244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010248:	9206      	str	r2, [sp, #24]
 801024a:	9a06      	ldr	r2, [sp, #24]
 801024c:	3a30      	subs	r2, #48	@ 0x30
 801024e:	2a09      	cmp	r2, #9
 8010250:	d9f6      	bls.n	8010240 <_svfprintf_r+0x250>
 8010252:	e72d      	b.n	80100b0 <_svfprintf_r+0xc0>
 8010254:	f04f 0800 	mov.w	r8, #0
 8010258:	210a      	movs	r1, #10
 801025a:	e7f6      	b.n	801024a <_svfprintf_r+0x25a>
 801025c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8010260:	e7c9      	b.n	80101f6 <_svfprintf_r+0x206>
 8010262:	2200      	movs	r2, #0
 8010264:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010266:	920e      	str	r2, [sp, #56]	@ 0x38
 8010268:	210a      	movs	r1, #10
 801026a:	9a06      	ldr	r2, [sp, #24]
 801026c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801026e:	3a30      	subs	r2, #48	@ 0x30
 8010270:	fb01 2200 	mla	r2, r1, r0, r2
 8010274:	920e      	str	r2, [sp, #56]	@ 0x38
 8010276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801027a:	9206      	str	r2, [sp, #24]
 801027c:	3a30      	subs	r2, #48	@ 0x30
 801027e:	2a09      	cmp	r2, #9
 8010280:	d9f3      	bls.n	801026a <_svfprintf_r+0x27a>
 8010282:	e715      	b.n	80100b0 <_svfprintf_r+0xc0>
 8010284:	f045 0508 	orr.w	r5, r5, #8
 8010288:	e7b5      	b.n	80101f6 <_svfprintf_r+0x206>
 801028a:	bf00      	nop
 801028c:	f3af 8000 	nop.w
	...
 8010298:	080151c4 	.word	0x080151c4
 801029c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	2b68      	cmp	r3, #104	@ 0x68
 80102a2:	bf01      	itttt	eq
 80102a4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80102a6:	3301      	addeq	r3, #1
 80102a8:	930c      	streq	r3, [sp, #48]	@ 0x30
 80102aa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80102ae:	bf18      	it	ne
 80102b0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80102b4:	e79f      	b.n	80101f6 <_svfprintf_r+0x206>
 80102b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	2b6c      	cmp	r3, #108	@ 0x6c
 80102bc:	d105      	bne.n	80102ca <_svfprintf_r+0x2da>
 80102be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102c0:	3301      	adds	r3, #1
 80102c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80102c4:	f045 0520 	orr.w	r5, r5, #32
 80102c8:	e795      	b.n	80101f6 <_svfprintf_r+0x206>
 80102ca:	f045 0510 	orr.w	r5, r5, #16
 80102ce:	e792      	b.n	80101f6 <_svfprintf_r+0x206>
 80102d0:	4632      	mov	r2, r6
 80102d2:	f852 3b04 	ldr.w	r3, [r2], #4
 80102d6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80102da:	2300      	movs	r3, #0
 80102dc:	9207      	str	r2, [sp, #28]
 80102de:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80102e2:	469a      	mov	sl, r3
 80102e4:	f04f 0801 	mov.w	r8, #1
 80102e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80102ea:	461f      	mov	r7, r3
 80102ec:	9308      	str	r3, [sp, #32]
 80102ee:	461e      	mov	r6, r3
 80102f0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80102f4:	e1d2      	b.n	801069c <_svfprintf_r+0x6ac>
 80102f6:	f045 0510 	orr.w	r5, r5, #16
 80102fa:	06af      	lsls	r7, r5, #26
 80102fc:	d512      	bpl.n	8010324 <_svfprintf_r+0x334>
 80102fe:	3607      	adds	r6, #7
 8010300:	f026 0307 	bic.w	r3, r6, #7
 8010304:	461a      	mov	r2, r3
 8010306:	685f      	ldr	r7, [r3, #4]
 8010308:	f852 6b08 	ldr.w	r6, [r2], #8
 801030c:	9207      	str	r2, [sp, #28]
 801030e:	2f00      	cmp	r7, #0
 8010310:	da06      	bge.n	8010320 <_svfprintf_r+0x330>
 8010312:	4276      	negs	r6, r6
 8010314:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8010318:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801031c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010320:	2301      	movs	r3, #1
 8010322:	e37d      	b.n	8010a20 <_svfprintf_r+0xa30>
 8010324:	4633      	mov	r3, r6
 8010326:	06ee      	lsls	r6, r5, #27
 8010328:	f853 7b04 	ldr.w	r7, [r3], #4
 801032c:	9307      	str	r3, [sp, #28]
 801032e:	d502      	bpl.n	8010336 <_svfprintf_r+0x346>
 8010330:	463e      	mov	r6, r7
 8010332:	17ff      	asrs	r7, r7, #31
 8010334:	e7eb      	b.n	801030e <_svfprintf_r+0x31e>
 8010336:	0668      	lsls	r0, r5, #25
 8010338:	d503      	bpl.n	8010342 <_svfprintf_r+0x352>
 801033a:	b23e      	sxth	r6, r7
 801033c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8010340:	e7e5      	b.n	801030e <_svfprintf_r+0x31e>
 8010342:	05a9      	lsls	r1, r5, #22
 8010344:	d5f4      	bpl.n	8010330 <_svfprintf_r+0x340>
 8010346:	b27e      	sxtb	r6, r7
 8010348:	f347 17c0 	sbfx	r7, r7, #7, #1
 801034c:	e7df      	b.n	801030e <_svfprintf_r+0x31e>
 801034e:	3607      	adds	r6, #7
 8010350:	f026 0307 	bic.w	r3, r6, #7
 8010354:	ecb3 7b02 	vldmia	r3!, {d7}
 8010358:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801035c:	9307      	str	r3, [sp, #28]
 801035e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010360:	931a      	str	r3, [sp, #104]	@ 0x68
 8010362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010364:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010368:	931b      	str	r3, [sp, #108]	@ 0x6c
 801036a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801036e:	4b81      	ldr	r3, [pc, #516]	@ (8010574 <_svfprintf_r+0x584>)
 8010370:	f04f 32ff 	mov.w	r2, #4294967295
 8010374:	f7f0 fc02 	bl	8000b7c <__aeabi_dcmpun>
 8010378:	bb10      	cbnz	r0, 80103c0 <_svfprintf_r+0x3d0>
 801037a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801037e:	4b7d      	ldr	r3, [pc, #500]	@ (8010574 <_svfprintf_r+0x584>)
 8010380:	f04f 32ff 	mov.w	r2, #4294967295
 8010384:	f7f0 fbdc 	bl	8000b40 <__aeabi_dcmple>
 8010388:	b9d0      	cbnz	r0, 80103c0 <_svfprintf_r+0x3d0>
 801038a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801038e:	2200      	movs	r2, #0
 8010390:	2300      	movs	r3, #0
 8010392:	f7f0 fbcb 	bl	8000b2c <__aeabi_dcmplt>
 8010396:	b110      	cbz	r0, 801039e <_svfprintf_r+0x3ae>
 8010398:	232d      	movs	r3, #45	@ 0x2d
 801039a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801039e:	4a76      	ldr	r2, [pc, #472]	@ (8010578 <_svfprintf_r+0x588>)
 80103a0:	4b76      	ldr	r3, [pc, #472]	@ (801057c <_svfprintf_r+0x58c>)
 80103a2:	9906      	ldr	r1, [sp, #24]
 80103a4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80103a8:	2947      	cmp	r1, #71	@ 0x47
 80103aa:	bfd4      	ite	le
 80103ac:	4691      	movle	r9, r2
 80103ae:	4699      	movgt	r9, r3
 80103b0:	f04f 0a00 	mov.w	sl, #0
 80103b4:	f04f 0803 	mov.w	r8, #3
 80103b8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80103bc:	f000 bfec 	b.w	8011398 <_svfprintf_r+0x13a8>
 80103c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80103c4:	4610      	mov	r0, r2
 80103c6:	4619      	mov	r1, r3
 80103c8:	f7f0 fbd8 	bl	8000b7c <__aeabi_dcmpun>
 80103cc:	4682      	mov	sl, r0
 80103ce:	b140      	cbz	r0, 80103e2 <_svfprintf_r+0x3f2>
 80103d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103d2:	4a6b      	ldr	r2, [pc, #428]	@ (8010580 <_svfprintf_r+0x590>)
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	bfbc      	itt	lt
 80103d8:	232d      	movlt	r3, #45	@ 0x2d
 80103da:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80103de:	4b69      	ldr	r3, [pc, #420]	@ (8010584 <_svfprintf_r+0x594>)
 80103e0:	e7df      	b.n	80103a2 <_svfprintf_r+0x3b2>
 80103e2:	9b06      	ldr	r3, [sp, #24]
 80103e4:	2b61      	cmp	r3, #97	@ 0x61
 80103e6:	d025      	beq.n	8010434 <_svfprintf_r+0x444>
 80103e8:	2b41      	cmp	r3, #65	@ 0x41
 80103ea:	d125      	bne.n	8010438 <_svfprintf_r+0x448>
 80103ec:	2358      	movs	r3, #88	@ 0x58
 80103ee:	2230      	movs	r2, #48	@ 0x30
 80103f0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80103f4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80103f8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80103fc:	f045 0502 	orr.w	r5, r5, #2
 8010400:	f340 80a5 	ble.w	801054e <_svfprintf_r+0x55e>
 8010404:	9803      	ldr	r0, [sp, #12]
 8010406:	f108 0101 	add.w	r1, r8, #1
 801040a:	f7fe ff83 	bl	800f314 <_malloc_r>
 801040e:	4681      	mov	r9, r0
 8010410:	2800      	cmp	r0, #0
 8010412:	f040 80a1 	bne.w	8010558 <_svfprintf_r+0x568>
 8010416:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801041a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801041e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8010422:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010426:	065b      	lsls	r3, r3, #25
 8010428:	f53f ae04 	bmi.w	8010034 <_svfprintf_r+0x44>
 801042c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801042e:	b053      	add	sp, #332	@ 0x14c
 8010430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010434:	2378      	movs	r3, #120	@ 0x78
 8010436:	e7da      	b.n	80103ee <_svfprintf_r+0x3fe>
 8010438:	f1b8 3fff 	cmp.w	r8, #4294967295
 801043c:	f000 808e 	beq.w	801055c <_svfprintf_r+0x56c>
 8010440:	9b06      	ldr	r3, [sp, #24]
 8010442:	f023 0320 	bic.w	r3, r3, #32
 8010446:	2b47      	cmp	r3, #71	@ 0x47
 8010448:	d105      	bne.n	8010456 <_svfprintf_r+0x466>
 801044a:	f1b8 0f00 	cmp.w	r8, #0
 801044e:	d102      	bne.n	8010456 <_svfprintf_r+0x466>
 8010450:	46c2      	mov	sl, r8
 8010452:	f04f 0801 	mov.w	r8, #1
 8010456:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801045a:	9311      	str	r3, [sp, #68]	@ 0x44
 801045c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801045e:	2b00      	cmp	r3, #0
 8010460:	da7f      	bge.n	8010562 <_svfprintf_r+0x572>
 8010462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010464:	9314      	str	r3, [sp, #80]	@ 0x50
 8010466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010468:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801046c:	9315      	str	r3, [sp, #84]	@ 0x54
 801046e:	232d      	movs	r3, #45	@ 0x2d
 8010470:	931c      	str	r3, [sp, #112]	@ 0x70
 8010472:	9b06      	ldr	r3, [sp, #24]
 8010474:	f023 0320 	bic.w	r3, r3, #32
 8010478:	2b41      	cmp	r3, #65	@ 0x41
 801047a:	9308      	str	r3, [sp, #32]
 801047c:	f040 81e6 	bne.w	801084c <_svfprintf_r+0x85c>
 8010480:	a820      	add	r0, sp, #128	@ 0x80
 8010482:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8010486:	f001 fb09 	bl	8011a9c <frexp>
 801048a:	2200      	movs	r2, #0
 801048c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010490:	ec51 0b10 	vmov	r0, r1, d0
 8010494:	f7f0 f8d8 	bl	8000648 <__aeabi_dmul>
 8010498:	4602      	mov	r2, r0
 801049a:	460b      	mov	r3, r1
 801049c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104a0:	2200      	movs	r2, #0
 80104a2:	2300      	movs	r3, #0
 80104a4:	f7f0 fb38 	bl	8000b18 <__aeabi_dcmpeq>
 80104a8:	b108      	cbz	r0, 80104ae <_svfprintf_r+0x4be>
 80104aa:	2301      	movs	r3, #1
 80104ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80104ae:	4a36      	ldr	r2, [pc, #216]	@ (8010588 <_svfprintf_r+0x598>)
 80104b0:	4b36      	ldr	r3, [pc, #216]	@ (801058c <_svfprintf_r+0x59c>)
 80104b2:	9906      	ldr	r1, [sp, #24]
 80104b4:	2961      	cmp	r1, #97	@ 0x61
 80104b6:	bf18      	it	ne
 80104b8:	461a      	movne	r2, r3
 80104ba:	9210      	str	r2, [sp, #64]	@ 0x40
 80104bc:	f108 37ff 	add.w	r7, r8, #4294967295
 80104c0:	464e      	mov	r6, r9
 80104c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104c6:	4b32      	ldr	r3, [pc, #200]	@ (8010590 <_svfprintf_r+0x5a0>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	f7f0 f8bd 	bl	8000648 <__aeabi_dmul>
 80104ce:	4602      	mov	r2, r0
 80104d0:	460b      	mov	r3, r1
 80104d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104d6:	f7f0 fb67 	bl	8000ba8 <__aeabi_d2iz>
 80104da:	9013      	str	r0, [sp, #76]	@ 0x4c
 80104dc:	f7f0 f84a 	bl	8000574 <__aeabi_i2d>
 80104e0:	4602      	mov	r2, r0
 80104e2:	460b      	mov	r3, r1
 80104e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104e8:	f7ef fef6 	bl	80002d8 <__aeabi_dsub>
 80104ec:	4602      	mov	r2, r0
 80104ee:	460b      	mov	r3, r1
 80104f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80104f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80104f8:	5c9b      	ldrb	r3, [r3, r2]
 80104fa:	f806 3b01 	strb.w	r3, [r6], #1
 80104fe:	1c7a      	adds	r2, r7, #1
 8010500:	d006      	beq.n	8010510 <_svfprintf_r+0x520>
 8010502:	1e7b      	subs	r3, r7, #1
 8010504:	931d      	str	r3, [sp, #116]	@ 0x74
 8010506:	2200      	movs	r2, #0
 8010508:	2300      	movs	r3, #0
 801050a:	f7f0 fb05 	bl	8000b18 <__aeabi_dcmpeq>
 801050e:	b370      	cbz	r0, 801056e <_svfprintf_r+0x57e>
 8010510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010514:	4b1f      	ldr	r3, [pc, #124]	@ (8010594 <_svfprintf_r+0x5a4>)
 8010516:	2200      	movs	r2, #0
 8010518:	f7f0 fb26 	bl	8000b68 <__aeabi_dcmpgt>
 801051c:	2800      	cmp	r0, #0
 801051e:	d13b      	bne.n	8010598 <_svfprintf_r+0x5a8>
 8010520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010524:	4b1b      	ldr	r3, [pc, #108]	@ (8010594 <_svfprintf_r+0x5a4>)
 8010526:	2200      	movs	r2, #0
 8010528:	f7f0 faf6 	bl	8000b18 <__aeabi_dcmpeq>
 801052c:	b110      	cbz	r0, 8010534 <_svfprintf_r+0x544>
 801052e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010530:	07db      	lsls	r3, r3, #31
 8010532:	d431      	bmi.n	8010598 <_svfprintf_r+0x5a8>
 8010534:	4633      	mov	r3, r6
 8010536:	19f1      	adds	r1, r6, r7
 8010538:	2030      	movs	r0, #48	@ 0x30
 801053a:	1aca      	subs	r2, r1, r3
 801053c:	2a00      	cmp	r2, #0
 801053e:	f280 8182 	bge.w	8010846 <_svfprintf_r+0x856>
 8010542:	1c7b      	adds	r3, r7, #1
 8010544:	3701      	adds	r7, #1
 8010546:	bfb8      	it	lt
 8010548:	2300      	movlt	r3, #0
 801054a:	441e      	add	r6, r3
 801054c:	e038      	b.n	80105c0 <_svfprintf_r+0x5d0>
 801054e:	f04f 0a00 	mov.w	sl, #0
 8010552:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8010556:	e77e      	b.n	8010456 <_svfprintf_r+0x466>
 8010558:	4682      	mov	sl, r0
 801055a:	e77c      	b.n	8010456 <_svfprintf_r+0x466>
 801055c:	f04f 0806 	mov.w	r8, #6
 8010560:	e779      	b.n	8010456 <_svfprintf_r+0x466>
 8010562:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8010566:	2300      	movs	r3, #0
 8010568:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801056c:	e780      	b.n	8010470 <_svfprintf_r+0x480>
 801056e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8010570:	e7a7      	b.n	80104c2 <_svfprintf_r+0x4d2>
 8010572:	bf00      	nop
 8010574:	7fefffff 	.word	0x7fefffff
 8010578:	080151b4 	.word	0x080151b4
 801057c:	080151b8 	.word	0x080151b8
 8010580:	080151bc 	.word	0x080151bc
 8010584:	080151c0 	.word	0x080151c0
 8010588:	080151c4 	.word	0x080151c4
 801058c:	080151d5 	.word	0x080151d5
 8010590:	40300000 	.word	0x40300000
 8010594:	3fe00000 	.word	0x3fe00000
 8010598:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801059a:	9624      	str	r6, [sp, #144]	@ 0x90
 801059c:	7bd9      	ldrb	r1, [r3, #15]
 801059e:	2030      	movs	r0, #48	@ 0x30
 80105a0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80105a2:	1e53      	subs	r3, r2, #1
 80105a4:	9324      	str	r3, [sp, #144]	@ 0x90
 80105a6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80105aa:	428b      	cmp	r3, r1
 80105ac:	f000 8148 	beq.w	8010840 <_svfprintf_r+0x850>
 80105b0:	2b39      	cmp	r3, #57	@ 0x39
 80105b2:	bf0b      	itete	eq
 80105b4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80105b6:	3301      	addne	r3, #1
 80105b8:	7a9b      	ldrbeq	r3, [r3, #10]
 80105ba:	b2db      	uxtbne	r3, r3
 80105bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80105c0:	eba6 0309 	sub.w	r3, r6, r9
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	9b08      	ldr	r3, [sp, #32]
 80105c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80105ca:	2b47      	cmp	r3, #71	@ 0x47
 80105cc:	f040 8187 	bne.w	80108de <_svfprintf_r+0x8ee>
 80105d0:	1cf1      	adds	r1, r6, #3
 80105d2:	db02      	blt.n	80105da <_svfprintf_r+0x5ea>
 80105d4:	4546      	cmp	r6, r8
 80105d6:	f340 81a5 	ble.w	8010924 <_svfprintf_r+0x934>
 80105da:	9b06      	ldr	r3, [sp, #24]
 80105dc:	3b02      	subs	r3, #2
 80105de:	9306      	str	r3, [sp, #24]
 80105e0:	9906      	ldr	r1, [sp, #24]
 80105e2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80105e6:	f021 0120 	bic.w	r1, r1, #32
 80105ea:	2941      	cmp	r1, #65	@ 0x41
 80105ec:	bf08      	it	eq
 80105ee:	320f      	addeq	r2, #15
 80105f0:	f106 33ff 	add.w	r3, r6, #4294967295
 80105f4:	bf06      	itte	eq
 80105f6:	b2d2      	uxtbeq	r2, r2
 80105f8:	2101      	moveq	r1, #1
 80105fa:	2100      	movne	r1, #0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	9320      	str	r3, [sp, #128]	@ 0x80
 8010600:	bfb8      	it	lt
 8010602:	f1c6 0301 	rsblt	r3, r6, #1
 8010606:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801060a:	bfb4      	ite	lt
 801060c:	222d      	movlt	r2, #45	@ 0x2d
 801060e:	222b      	movge	r2, #43	@ 0x2b
 8010610:	2b09      	cmp	r3, #9
 8010612:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8010616:	f340 8178 	ble.w	801090a <_svfprintf_r+0x91a>
 801061a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801061e:	270a      	movs	r7, #10
 8010620:	4602      	mov	r2, r0
 8010622:	fbb3 f6f7 	udiv	r6, r3, r7
 8010626:	fb07 3116 	mls	r1, r7, r6, r3
 801062a:	3130      	adds	r1, #48	@ 0x30
 801062c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010630:	4619      	mov	r1, r3
 8010632:	2963      	cmp	r1, #99	@ 0x63
 8010634:	f100 30ff 	add.w	r0, r0, #4294967295
 8010638:	4633      	mov	r3, r6
 801063a:	dcf1      	bgt.n	8010620 <_svfprintf_r+0x630>
 801063c:	3330      	adds	r3, #48	@ 0x30
 801063e:	1e91      	subs	r1, r2, #2
 8010640:	f800 3c01 	strb.w	r3, [r0, #-1]
 8010644:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8010648:	460b      	mov	r3, r1
 801064a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801064e:	4283      	cmp	r3, r0
 8010650:	f0c0 8156 	bcc.w	8010900 <_svfprintf_r+0x910>
 8010654:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8010658:	1a9b      	subs	r3, r3, r2
 801065a:	4281      	cmp	r1, r0
 801065c:	bf88      	it	hi
 801065e:	2300      	movhi	r3, #0
 8010660:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010664:	441a      	add	r2, r3
 8010666:	ab22      	add	r3, sp, #136	@ 0x88
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	9a04      	ldr	r2, [sp, #16]
 801066c:	9318      	str	r3, [sp, #96]	@ 0x60
 801066e:	2a01      	cmp	r2, #1
 8010670:	eb03 0802 	add.w	r8, r3, r2
 8010674:	dc01      	bgt.n	801067a <_svfprintf_r+0x68a>
 8010676:	07ea      	lsls	r2, r5, #31
 8010678:	d501      	bpl.n	801067e <_svfprintf_r+0x68e>
 801067a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801067c:	4498      	add	r8, r3
 801067e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010682:	2700      	movs	r7, #0
 8010684:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8010688:	9311      	str	r3, [sp, #68]	@ 0x44
 801068a:	9708      	str	r7, [sp, #32]
 801068c:	463e      	mov	r6, r7
 801068e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010690:	2b00      	cmp	r3, #0
 8010692:	f040 818f 	bne.w	80109b4 <_svfprintf_r+0x9c4>
 8010696:	2300      	movs	r3, #0
 8010698:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801069a:	9310      	str	r3, [sp, #64]	@ 0x40
 801069c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801069e:	4543      	cmp	r3, r8
 80106a0:	bfb8      	it	lt
 80106a2:	4643      	movlt	r3, r8
 80106a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80106a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80106aa:	b113      	cbz	r3, 80106b2 <_svfprintf_r+0x6c2>
 80106ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106ae:	3301      	adds	r3, #1
 80106b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80106b2:	f015 0302 	ands.w	r3, r5, #2
 80106b6:	931c      	str	r3, [sp, #112]	@ 0x70
 80106b8:	bf1e      	ittt	ne
 80106ba:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80106bc:	3302      	addne	r3, #2
 80106be:	9311      	strne	r3, [sp, #68]	@ 0x44
 80106c0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80106c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80106c6:	d122      	bne.n	801070e <_svfprintf_r+0x71e>
 80106c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106cc:	1a9b      	subs	r3, r3, r2
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80106d2:	dd1c      	ble.n	801070e <_svfprintf_r+0x71e>
 80106d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80106d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80106da:	2810      	cmp	r0, #16
 80106dc:	489e      	ldr	r0, [pc, #632]	@ (8010958 <_svfprintf_r+0x968>)
 80106de:	6020      	str	r0, [r4, #0]
 80106e0:	f102 0201 	add.w	r2, r2, #1
 80106e4:	f104 0108 	add.w	r1, r4, #8
 80106e8:	f300 8298 	bgt.w	8010c1c <_svfprintf_r+0xc2c>
 80106ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80106ee:	6060      	str	r0, [r4, #4]
 80106f0:	4403      	add	r3, r0
 80106f2:	2a07      	cmp	r2, #7
 80106f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80106f8:	f340 82a5 	ble.w	8010c46 <_svfprintf_r+0xc56>
 80106fc:	9803      	ldr	r0, [sp, #12]
 80106fe:	aa26      	add	r2, sp, #152	@ 0x98
 8010700:	4659      	mov	r1, fp
 8010702:	f002 fd70 	bl	80131e6 <__ssprint_r>
 8010706:	2800      	cmp	r0, #0
 8010708:	f040 85ed 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 801070c:	ac29      	add	r4, sp, #164	@ 0xa4
 801070e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8010712:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010714:	b16a      	cbz	r2, 8010732 <_svfprintf_r+0x742>
 8010716:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801071a:	6022      	str	r2, [r4, #0]
 801071c:	2201      	movs	r2, #1
 801071e:	4413      	add	r3, r2
 8010720:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010722:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010724:	6062      	str	r2, [r4, #4]
 8010726:	4413      	add	r3, r2
 8010728:	2b07      	cmp	r3, #7
 801072a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801072c:	f300 828d 	bgt.w	8010c4a <_svfprintf_r+0xc5a>
 8010730:	3408      	adds	r4, #8
 8010732:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010734:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010736:	b162      	cbz	r2, 8010752 <_svfprintf_r+0x762>
 8010738:	aa1f      	add	r2, sp, #124	@ 0x7c
 801073a:	6022      	str	r2, [r4, #0]
 801073c:	2202      	movs	r2, #2
 801073e:	4413      	add	r3, r2
 8010740:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010742:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010744:	6062      	str	r2, [r4, #4]
 8010746:	3301      	adds	r3, #1
 8010748:	2b07      	cmp	r3, #7
 801074a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801074c:	f300 8287 	bgt.w	8010c5e <_svfprintf_r+0xc6e>
 8010750:	3408      	adds	r4, #8
 8010752:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010754:	2b80      	cmp	r3, #128	@ 0x80
 8010756:	d122      	bne.n	801079e <_svfprintf_r+0x7ae>
 8010758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801075a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801075c:	1a9b      	subs	r3, r3, r2
 801075e:	2b00      	cmp	r3, #0
 8010760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010762:	dd1c      	ble.n	801079e <_svfprintf_r+0x7ae>
 8010764:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010766:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801076a:	2810      	cmp	r0, #16
 801076c:	487b      	ldr	r0, [pc, #492]	@ (801095c <_svfprintf_r+0x96c>)
 801076e:	6020      	str	r0, [r4, #0]
 8010770:	f102 0201 	add.w	r2, r2, #1
 8010774:	f104 0108 	add.w	r1, r4, #8
 8010778:	f300 827b 	bgt.w	8010c72 <_svfprintf_r+0xc82>
 801077c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801077e:	6060      	str	r0, [r4, #4]
 8010780:	4403      	add	r3, r0
 8010782:	2a07      	cmp	r2, #7
 8010784:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010788:	f340 8288 	ble.w	8010c9c <_svfprintf_r+0xcac>
 801078c:	9803      	ldr	r0, [sp, #12]
 801078e:	aa26      	add	r2, sp, #152	@ 0x98
 8010790:	4659      	mov	r1, fp
 8010792:	f002 fd28 	bl	80131e6 <__ssprint_r>
 8010796:	2800      	cmp	r0, #0
 8010798:	f040 85a5 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 801079c:	ac29      	add	r4, sp, #164	@ 0xa4
 801079e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107a0:	eba3 0308 	sub.w	r3, r3, r8
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80107a8:	dd1c      	ble.n	80107e4 <_svfprintf_r+0x7f4>
 80107aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80107ac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80107b0:	2810      	cmp	r0, #16
 80107b2:	486a      	ldr	r0, [pc, #424]	@ (801095c <_svfprintf_r+0x96c>)
 80107b4:	6020      	str	r0, [r4, #0]
 80107b6:	f102 0201 	add.w	r2, r2, #1
 80107ba:	f104 0108 	add.w	r1, r4, #8
 80107be:	f300 826f 	bgt.w	8010ca0 <_svfprintf_r+0xcb0>
 80107c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80107c4:	6060      	str	r0, [r4, #4]
 80107c6:	4403      	add	r3, r0
 80107c8:	2a07      	cmp	r2, #7
 80107ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80107ce:	f340 827c 	ble.w	8010cca <_svfprintf_r+0xcda>
 80107d2:	9803      	ldr	r0, [sp, #12]
 80107d4:	aa26      	add	r2, sp, #152	@ 0x98
 80107d6:	4659      	mov	r1, fp
 80107d8:	f002 fd05 	bl	80131e6 <__ssprint_r>
 80107dc:	2800      	cmp	r0, #0
 80107de:	f040 8582 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 80107e2:	ac29      	add	r4, sp, #164	@ 0xa4
 80107e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80107e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80107e8:	05ea      	lsls	r2, r5, #23
 80107ea:	f100 8275 	bmi.w	8010cd8 <_svfprintf_r+0xce8>
 80107ee:	4443      	add	r3, r8
 80107f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80107f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80107f4:	3301      	adds	r3, #1
 80107f6:	2b07      	cmp	r3, #7
 80107f8:	e9c4 9800 	strd	r9, r8, [r4]
 80107fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80107fe:	f300 82b1 	bgt.w	8010d64 <_svfprintf_r+0xd74>
 8010802:	3408      	adds	r4, #8
 8010804:	076a      	lsls	r2, r5, #29
 8010806:	f100 8550 	bmi.w	80112aa <_svfprintf_r+0x12ba>
 801080a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801080e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010810:	428a      	cmp	r2, r1
 8010812:	bfac      	ite	ge
 8010814:	189b      	addge	r3, r3, r2
 8010816:	185b      	addlt	r3, r3, r1
 8010818:	930f      	str	r3, [sp, #60]	@ 0x3c
 801081a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801081c:	b13b      	cbz	r3, 801082e <_svfprintf_r+0x83e>
 801081e:	9803      	ldr	r0, [sp, #12]
 8010820:	aa26      	add	r2, sp, #152	@ 0x98
 8010822:	4659      	mov	r1, fp
 8010824:	f002 fcdf 	bl	80131e6 <__ssprint_r>
 8010828:	2800      	cmp	r0, #0
 801082a:	f040 855c 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 801082e:	2300      	movs	r3, #0
 8010830:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010832:	f1ba 0f00 	cmp.w	sl, #0
 8010836:	f040 8572 	bne.w	801131e <_svfprintf_r+0x132e>
 801083a:	9e07      	ldr	r6, [sp, #28]
 801083c:	ac29      	add	r4, sp, #164	@ 0xa4
 801083e:	e0c6      	b.n	80109ce <_svfprintf_r+0x9de>
 8010840:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010844:	e6ac      	b.n	80105a0 <_svfprintf_r+0x5b0>
 8010846:	f803 0b01 	strb.w	r0, [r3], #1
 801084a:	e676      	b.n	801053a <_svfprintf_r+0x54a>
 801084c:	9b08      	ldr	r3, [sp, #32]
 801084e:	2b46      	cmp	r3, #70	@ 0x46
 8010850:	d005      	beq.n	801085e <_svfprintf_r+0x86e>
 8010852:	2b45      	cmp	r3, #69	@ 0x45
 8010854:	d11a      	bne.n	801088c <_svfprintf_r+0x89c>
 8010856:	f108 0601 	add.w	r6, r8, #1
 801085a:	2102      	movs	r1, #2
 801085c:	e001      	b.n	8010862 <_svfprintf_r+0x872>
 801085e:	4646      	mov	r6, r8
 8010860:	2103      	movs	r1, #3
 8010862:	ab24      	add	r3, sp, #144	@ 0x90
 8010864:	9301      	str	r3, [sp, #4]
 8010866:	ab21      	add	r3, sp, #132	@ 0x84
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801086e:	ab20      	add	r3, sp, #128	@ 0x80
 8010870:	9803      	ldr	r0, [sp, #12]
 8010872:	4632      	mov	r2, r6
 8010874:	f001 fa10 	bl	8011c98 <_dtoa_r>
 8010878:	9b08      	ldr	r3, [sp, #32]
 801087a:	2b47      	cmp	r3, #71	@ 0x47
 801087c:	4681      	mov	r9, r0
 801087e:	d119      	bne.n	80108b4 <_svfprintf_r+0x8c4>
 8010880:	07e8      	lsls	r0, r5, #31
 8010882:	d405      	bmi.n	8010890 <_svfprintf_r+0x8a0>
 8010884:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010886:	eba3 0309 	sub.w	r3, r3, r9
 801088a:	e69b      	b.n	80105c4 <_svfprintf_r+0x5d4>
 801088c:	4646      	mov	r6, r8
 801088e:	e7e4      	b.n	801085a <_svfprintf_r+0x86a>
 8010890:	eb09 0706 	add.w	r7, r9, r6
 8010894:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010898:	2200      	movs	r2, #0
 801089a:	2300      	movs	r3, #0
 801089c:	f7f0 f93c 	bl	8000b18 <__aeabi_dcmpeq>
 80108a0:	b100      	cbz	r0, 80108a4 <_svfprintf_r+0x8b4>
 80108a2:	9724      	str	r7, [sp, #144]	@ 0x90
 80108a4:	2230      	movs	r2, #48	@ 0x30
 80108a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80108a8:	429f      	cmp	r7, r3
 80108aa:	d9eb      	bls.n	8010884 <_svfprintf_r+0x894>
 80108ac:	1c59      	adds	r1, r3, #1
 80108ae:	9124      	str	r1, [sp, #144]	@ 0x90
 80108b0:	701a      	strb	r2, [r3, #0]
 80108b2:	e7f8      	b.n	80108a6 <_svfprintf_r+0x8b6>
 80108b4:	9b08      	ldr	r3, [sp, #32]
 80108b6:	2b46      	cmp	r3, #70	@ 0x46
 80108b8:	eb00 0706 	add.w	r7, r0, r6
 80108bc:	d1ea      	bne.n	8010894 <_svfprintf_r+0x8a4>
 80108be:	7803      	ldrb	r3, [r0, #0]
 80108c0:	2b30      	cmp	r3, #48	@ 0x30
 80108c2:	d109      	bne.n	80108d8 <_svfprintf_r+0x8e8>
 80108c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80108c8:	2200      	movs	r2, #0
 80108ca:	2300      	movs	r3, #0
 80108cc:	f7f0 f924 	bl	8000b18 <__aeabi_dcmpeq>
 80108d0:	b910      	cbnz	r0, 80108d8 <_svfprintf_r+0x8e8>
 80108d2:	f1c6 0601 	rsb	r6, r6, #1
 80108d6:	9620      	str	r6, [sp, #128]	@ 0x80
 80108d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80108da:	441f      	add	r7, r3
 80108dc:	e7da      	b.n	8010894 <_svfprintf_r+0x8a4>
 80108de:	9b08      	ldr	r3, [sp, #32]
 80108e0:	2b46      	cmp	r3, #70	@ 0x46
 80108e2:	f47f ae7d 	bne.w	80105e0 <_svfprintf_r+0x5f0>
 80108e6:	f005 0301 	and.w	r3, r5, #1
 80108ea:	2e00      	cmp	r6, #0
 80108ec:	ea43 0308 	orr.w	r3, r3, r8
 80108f0:	dd25      	ble.n	801093e <_svfprintf_r+0x94e>
 80108f2:	b37b      	cbz	r3, 8010954 <_svfprintf_r+0x964>
 80108f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108f6:	18f3      	adds	r3, r6, r3
 80108f8:	4498      	add	r8, r3
 80108fa:	2366      	movs	r3, #102	@ 0x66
 80108fc:	9306      	str	r3, [sp, #24]
 80108fe:	e033      	b.n	8010968 <_svfprintf_r+0x978>
 8010900:	f813 7b01 	ldrb.w	r7, [r3], #1
 8010904:	f806 7f01 	strb.w	r7, [r6, #1]!
 8010908:	e6a1      	b.n	801064e <_svfprintf_r+0x65e>
 801090a:	b941      	cbnz	r1, 801091e <_svfprintf_r+0x92e>
 801090c:	2230      	movs	r2, #48	@ 0x30
 801090e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8010912:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8010916:	3330      	adds	r3, #48	@ 0x30
 8010918:	f802 3b01 	strb.w	r3, [r2], #1
 801091c:	e6a3      	b.n	8010666 <_svfprintf_r+0x676>
 801091e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010922:	e7f8      	b.n	8010916 <_svfprintf_r+0x926>
 8010924:	9b04      	ldr	r3, [sp, #16]
 8010926:	429e      	cmp	r6, r3
 8010928:	da0d      	bge.n	8010946 <_svfprintf_r+0x956>
 801092a:	9b04      	ldr	r3, [sp, #16]
 801092c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801092e:	2e00      	cmp	r6, #0
 8010930:	eb03 0802 	add.w	r8, r3, r2
 8010934:	dc0c      	bgt.n	8010950 <_svfprintf_r+0x960>
 8010936:	f1c6 0301 	rsb	r3, r6, #1
 801093a:	4498      	add	r8, r3
 801093c:	e008      	b.n	8010950 <_svfprintf_r+0x960>
 801093e:	b17b      	cbz	r3, 8010960 <_svfprintf_r+0x970>
 8010940:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010942:	3301      	adds	r3, #1
 8010944:	e7d8      	b.n	80108f8 <_svfprintf_r+0x908>
 8010946:	07eb      	lsls	r3, r5, #31
 8010948:	d521      	bpl.n	801098e <_svfprintf_r+0x99e>
 801094a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801094c:	eb06 0803 	add.w	r8, r6, r3
 8010950:	2367      	movs	r3, #103	@ 0x67
 8010952:	e7d3      	b.n	80108fc <_svfprintf_r+0x90c>
 8010954:	46b0      	mov	r8, r6
 8010956:	e7d0      	b.n	80108fa <_svfprintf_r+0x90a>
 8010958:	080151f8 	.word	0x080151f8
 801095c:	080151e8 	.word	0x080151e8
 8010960:	2366      	movs	r3, #102	@ 0x66
 8010962:	9306      	str	r3, [sp, #24]
 8010964:	f04f 0801 	mov.w	r8, #1
 8010968:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801096c:	9308      	str	r3, [sp, #32]
 801096e:	d01f      	beq.n	80109b0 <_svfprintf_r+0x9c0>
 8010970:	2700      	movs	r7, #0
 8010972:	2e00      	cmp	r6, #0
 8010974:	9708      	str	r7, [sp, #32]
 8010976:	f77f ae8a 	ble.w	801068e <_svfprintf_r+0x69e>
 801097a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	2bff      	cmp	r3, #255	@ 0xff
 8010980:	d107      	bne.n	8010992 <_svfprintf_r+0x9a2>
 8010982:	9b08      	ldr	r3, [sp, #32]
 8010984:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010986:	443b      	add	r3, r7
 8010988:	fb02 8803 	mla	r8, r2, r3, r8
 801098c:	e67f      	b.n	801068e <_svfprintf_r+0x69e>
 801098e:	46b0      	mov	r8, r6
 8010990:	e7de      	b.n	8010950 <_svfprintf_r+0x960>
 8010992:	42b3      	cmp	r3, r6
 8010994:	daf5      	bge.n	8010982 <_svfprintf_r+0x992>
 8010996:	1af6      	subs	r6, r6, r3
 8010998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801099a:	785b      	ldrb	r3, [r3, #1]
 801099c:	b133      	cbz	r3, 80109ac <_svfprintf_r+0x9bc>
 801099e:	9b08      	ldr	r3, [sp, #32]
 80109a0:	3301      	adds	r3, #1
 80109a2:	9308      	str	r3, [sp, #32]
 80109a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109a6:	3301      	adds	r3, #1
 80109a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80109aa:	e7e6      	b.n	801097a <_svfprintf_r+0x98a>
 80109ac:	3701      	adds	r7, #1
 80109ae:	e7e4      	b.n	801097a <_svfprintf_r+0x98a>
 80109b0:	9f08      	ldr	r7, [sp, #32]
 80109b2:	e66c      	b.n	801068e <_svfprintf_r+0x69e>
 80109b4:	232d      	movs	r3, #45	@ 0x2d
 80109b6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80109ba:	e66c      	b.n	8010696 <_svfprintf_r+0x6a6>
 80109bc:	06af      	lsls	r7, r5, #26
 80109be:	d50a      	bpl.n	80109d6 <_svfprintf_r+0x9e6>
 80109c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109c2:	6833      	ldr	r3, [r6, #0]
 80109c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80109c6:	17d2      	asrs	r2, r2, #31
 80109c8:	e9c3 1200 	strd	r1, r2, [r3]
 80109cc:	3604      	adds	r6, #4
 80109ce:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80109d2:	f7ff bb46 	b.w	8010062 <_svfprintf_r+0x72>
 80109d6:	06e8      	lsls	r0, r5, #27
 80109d8:	d503      	bpl.n	80109e2 <_svfprintf_r+0x9f2>
 80109da:	6833      	ldr	r3, [r6, #0]
 80109dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109de:	601a      	str	r2, [r3, #0]
 80109e0:	e7f4      	b.n	80109cc <_svfprintf_r+0x9dc>
 80109e2:	0669      	lsls	r1, r5, #25
 80109e4:	d503      	bpl.n	80109ee <_svfprintf_r+0x9fe>
 80109e6:	6833      	ldr	r3, [r6, #0]
 80109e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109ea:	801a      	strh	r2, [r3, #0]
 80109ec:	e7ee      	b.n	80109cc <_svfprintf_r+0x9dc>
 80109ee:	05aa      	lsls	r2, r5, #22
 80109f0:	d5f3      	bpl.n	80109da <_svfprintf_r+0x9ea>
 80109f2:	6833      	ldr	r3, [r6, #0]
 80109f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109f6:	701a      	strb	r2, [r3, #0]
 80109f8:	e7e8      	b.n	80109cc <_svfprintf_r+0x9dc>
 80109fa:	f045 0510 	orr.w	r5, r5, #16
 80109fe:	f015 0320 	ands.w	r3, r5, #32
 8010a02:	d020      	beq.n	8010a46 <_svfprintf_r+0xa56>
 8010a04:	3607      	adds	r6, #7
 8010a06:	f026 0307 	bic.w	r3, r6, #7
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	685f      	ldr	r7, [r3, #4]
 8010a0e:	f852 6b08 	ldr.w	r6, [r2], #8
 8010a12:	9207      	str	r2, [sp, #28]
 8010a14:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010a18:	2300      	movs	r3, #0
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8010a20:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010a24:	f000 848c 	beq.w	8011340 <_svfprintf_r+0x1350>
 8010a28:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8010a2c:	9208      	str	r2, [sp, #32]
 8010a2e:	ea56 0207 	orrs.w	r2, r6, r7
 8010a32:	f040 848a 	bne.w	801134a <_svfprintf_r+0x135a>
 8010a36:	f1b8 0f00 	cmp.w	r8, #0
 8010a3a:	f000 80db 	beq.w	8010bf4 <_svfprintf_r+0xc04>
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	f040 8486 	bne.w	8011350 <_svfprintf_r+0x1360>
 8010a44:	e083      	b.n	8010b4e <_svfprintf_r+0xb5e>
 8010a46:	4632      	mov	r2, r6
 8010a48:	f015 0710 	ands.w	r7, r5, #16
 8010a4c:	f852 6b04 	ldr.w	r6, [r2], #4
 8010a50:	9207      	str	r2, [sp, #28]
 8010a52:	d001      	beq.n	8010a58 <_svfprintf_r+0xa68>
 8010a54:	461f      	mov	r7, r3
 8010a56:	e7dd      	b.n	8010a14 <_svfprintf_r+0xa24>
 8010a58:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010a5c:	d001      	beq.n	8010a62 <_svfprintf_r+0xa72>
 8010a5e:	b2b6      	uxth	r6, r6
 8010a60:	e7d8      	b.n	8010a14 <_svfprintf_r+0xa24>
 8010a62:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010a66:	d0d5      	beq.n	8010a14 <_svfprintf_r+0xa24>
 8010a68:	b2f6      	uxtb	r6, r6
 8010a6a:	e7f3      	b.n	8010a54 <_svfprintf_r+0xa64>
 8010a6c:	4633      	mov	r3, r6
 8010a6e:	2278      	movs	r2, #120	@ 0x78
 8010a70:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a74:	9307      	str	r3, [sp, #28]
 8010a76:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010a7a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8010a7e:	4b94      	ldr	r3, [pc, #592]	@ (8010cd0 <_svfprintf_r+0xce0>)
 8010a80:	9319      	str	r3, [sp, #100]	@ 0x64
 8010a82:	2700      	movs	r7, #0
 8010a84:	f045 0502 	orr.w	r5, r5, #2
 8010a88:	2302      	movs	r3, #2
 8010a8a:	9206      	str	r2, [sp, #24]
 8010a8c:	e7c5      	b.n	8010a1a <_svfprintf_r+0xa2a>
 8010a8e:	4633      	mov	r3, r6
 8010a90:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010a94:	f853 9b04 	ldr.w	r9, [r3], #4
 8010a98:	9307      	str	r3, [sp, #28]
 8010a9a:	f04f 0600 	mov.w	r6, #0
 8010a9e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8010aa2:	d00f      	beq.n	8010ac4 <_svfprintf_r+0xad4>
 8010aa4:	4642      	mov	r2, r8
 8010aa6:	4631      	mov	r1, r6
 8010aa8:	4648      	mov	r0, r9
 8010aaa:	f7ef fbc1 	bl	8000230 <memchr>
 8010aae:	4682      	mov	sl, r0
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	f43f ac81 	beq.w	80103b8 <_svfprintf_r+0x3c8>
 8010ab6:	eba0 0809 	sub.w	r8, r0, r9
 8010aba:	46b2      	mov	sl, r6
 8010abc:	9610      	str	r6, [sp, #64]	@ 0x40
 8010abe:	4637      	mov	r7, r6
 8010ac0:	9608      	str	r6, [sp, #32]
 8010ac2:	e5eb      	b.n	801069c <_svfprintf_r+0x6ac>
 8010ac4:	4648      	mov	r0, r9
 8010ac6:	f7ef fbab 	bl	8000220 <strlen>
 8010aca:	46b2      	mov	sl, r6
 8010acc:	4680      	mov	r8, r0
 8010ace:	e473      	b.n	80103b8 <_svfprintf_r+0x3c8>
 8010ad0:	f045 0510 	orr.w	r5, r5, #16
 8010ad4:	f015 0320 	ands.w	r3, r5, #32
 8010ad8:	d009      	beq.n	8010aee <_svfprintf_r+0xafe>
 8010ada:	3607      	adds	r6, #7
 8010adc:	f026 0307 	bic.w	r3, r6, #7
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	685f      	ldr	r7, [r3, #4]
 8010ae4:	f852 6b08 	ldr.w	r6, [r2], #8
 8010ae8:	9207      	str	r2, [sp, #28]
 8010aea:	2301      	movs	r3, #1
 8010aec:	e795      	b.n	8010a1a <_svfprintf_r+0xa2a>
 8010aee:	4632      	mov	r2, r6
 8010af0:	f015 0710 	ands.w	r7, r5, #16
 8010af4:	f852 6b04 	ldr.w	r6, [r2], #4
 8010af8:	9207      	str	r2, [sp, #28]
 8010afa:	d001      	beq.n	8010b00 <_svfprintf_r+0xb10>
 8010afc:	461f      	mov	r7, r3
 8010afe:	e7f4      	b.n	8010aea <_svfprintf_r+0xafa>
 8010b00:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010b04:	d001      	beq.n	8010b0a <_svfprintf_r+0xb1a>
 8010b06:	b2b6      	uxth	r6, r6
 8010b08:	e7ef      	b.n	8010aea <_svfprintf_r+0xafa>
 8010b0a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010b0e:	d0ec      	beq.n	8010aea <_svfprintf_r+0xafa>
 8010b10:	b2f6      	uxtb	r6, r6
 8010b12:	e7f3      	b.n	8010afc <_svfprintf_r+0xb0c>
 8010b14:	4b6f      	ldr	r3, [pc, #444]	@ (8010cd4 <_svfprintf_r+0xce4>)
 8010b16:	f7ff bb39 	b.w	801018c <_svfprintf_r+0x19c>
 8010b1a:	4632      	mov	r2, r6
 8010b1c:	f015 0710 	ands.w	r7, r5, #16
 8010b20:	f852 6b04 	ldr.w	r6, [r2], #4
 8010b24:	9207      	str	r2, [sp, #28]
 8010b26:	d002      	beq.n	8010b2e <_svfprintf_r+0xb3e>
 8010b28:	461f      	mov	r7, r3
 8010b2a:	f7ff bb3c 	b.w	80101a6 <_svfprintf_r+0x1b6>
 8010b2e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010b32:	d002      	beq.n	8010b3a <_svfprintf_r+0xb4a>
 8010b34:	b2b6      	uxth	r6, r6
 8010b36:	f7ff bb36 	b.w	80101a6 <_svfprintf_r+0x1b6>
 8010b3a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010b3e:	f43f ab32 	beq.w	80101a6 <_svfprintf_r+0x1b6>
 8010b42:	b2f6      	uxtb	r6, r6
 8010b44:	e7f0      	b.n	8010b28 <_svfprintf_r+0xb38>
 8010b46:	2e0a      	cmp	r6, #10
 8010b48:	f177 0300 	sbcs.w	r3, r7, #0
 8010b4c:	d207      	bcs.n	8010b5e <_svfprintf_r+0xb6e>
 8010b4e:	3630      	adds	r6, #48	@ 0x30
 8010b50:	b2f6      	uxtb	r6, r6
 8010b52:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8010b56:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8010b5a:	f000 bc15 	b.w	8011388 <_svfprintf_r+0x1398>
 8010b5e:	2300      	movs	r3, #0
 8010b60:	9304      	str	r3, [sp, #16]
 8010b62:	9b08      	ldr	r3, [sp, #32]
 8010b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010b68:	ad52      	add	r5, sp, #328	@ 0x148
 8010b6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b6c:	220a      	movs	r2, #10
 8010b6e:	2300      	movs	r3, #0
 8010b70:	4630      	mov	r0, r6
 8010b72:	4639      	mov	r1, r7
 8010b74:	f7f0 f8b0 	bl	8000cd8 <__aeabi_uldivmod>
 8010b78:	9b04      	ldr	r3, [sp, #16]
 8010b7a:	9011      	str	r0, [sp, #68]	@ 0x44
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b82:	3230      	adds	r2, #48	@ 0x30
 8010b84:	468a      	mov	sl, r1
 8010b86:	f105 39ff 	add.w	r9, r5, #4294967295
 8010b8a:	f805 2c01 	strb.w	r2, [r5, #-1]
 8010b8e:	b1d3      	cbz	r3, 8010bc6 <_svfprintf_r+0xbd6>
 8010b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b92:	9a04      	ldr	r2, [sp, #16]
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d115      	bne.n	8010bc6 <_svfprintf_r+0xbd6>
 8010b9a:	2aff      	cmp	r2, #255	@ 0xff
 8010b9c:	d013      	beq.n	8010bc6 <_svfprintf_r+0xbd6>
 8010b9e:	2e0a      	cmp	r6, #10
 8010ba0:	f177 0300 	sbcs.w	r3, r7, #0
 8010ba4:	d30f      	bcc.n	8010bc6 <_svfprintf_r+0xbd6>
 8010ba6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ba8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010baa:	eba9 0903 	sub.w	r9, r9, r3
 8010bae:	461a      	mov	r2, r3
 8010bb0:	4648      	mov	r0, r9
 8010bb2:	f000 ff1f 	bl	80119f4 <strncpy>
 8010bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb8:	785b      	ldrb	r3, [r3, #1]
 8010bba:	b11b      	cbz	r3, 8010bc4 <_svfprintf_r+0xbd4>
 8010bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	9304      	str	r3, [sp, #16]
 8010bc6:	2e0a      	cmp	r6, #10
 8010bc8:	f177 0700 	sbcs.w	r7, r7, #0
 8010bcc:	f0c0 83dc 	bcc.w	8011388 <_svfprintf_r+0x1398>
 8010bd0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010bd2:	4657      	mov	r7, sl
 8010bd4:	464d      	mov	r5, r9
 8010bd6:	e7c9      	b.n	8010b6c <_svfprintf_r+0xb7c>
 8010bd8:	f006 030f 	and.w	r3, r6, #15
 8010bdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010bde:	0936      	lsrs	r6, r6, #4
 8010be0:	5cd3      	ldrb	r3, [r2, r3]
 8010be2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8010be6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8010bea:	093f      	lsrs	r7, r7, #4
 8010bec:	ea56 0307 	orrs.w	r3, r6, r7
 8010bf0:	d1f2      	bne.n	8010bd8 <_svfprintf_r+0xbe8>
 8010bf2:	e3c9      	b.n	8011388 <_svfprintf_r+0x1398>
 8010bf4:	b91b      	cbnz	r3, 8010bfe <_svfprintf_r+0xc0e>
 8010bf6:	07e9      	lsls	r1, r5, #31
 8010bf8:	d501      	bpl.n	8010bfe <_svfprintf_r+0xc0e>
 8010bfa:	2630      	movs	r6, #48	@ 0x30
 8010bfc:	e7a9      	b.n	8010b52 <_svfprintf_r+0xb62>
 8010bfe:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8010c02:	e3c1      	b.n	8011388 <_svfprintf_r+0x1398>
 8010c04:	9b06      	ldr	r3, [sp, #24]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	f000 838f 	beq.w	801132a <_svfprintf_r+0x133a>
 8010c0c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8010c10:	2300      	movs	r3, #0
 8010c12:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010c16:	9607      	str	r6, [sp, #28]
 8010c18:	f7ff bb63 	b.w	80102e2 <_svfprintf_r+0x2f2>
 8010c1c:	2010      	movs	r0, #16
 8010c1e:	4403      	add	r3, r0
 8010c20:	2a07      	cmp	r2, #7
 8010c22:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010c26:	6060      	str	r0, [r4, #4]
 8010c28:	dd08      	ble.n	8010c3c <_svfprintf_r+0xc4c>
 8010c2a:	9803      	ldr	r0, [sp, #12]
 8010c2c:	aa26      	add	r2, sp, #152	@ 0x98
 8010c2e:	4659      	mov	r1, fp
 8010c30:	f002 fad9 	bl	80131e6 <__ssprint_r>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	f040 8356 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010c3a:	a929      	add	r1, sp, #164	@ 0xa4
 8010c3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c3e:	3b10      	subs	r3, #16
 8010c40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c42:	460c      	mov	r4, r1
 8010c44:	e546      	b.n	80106d4 <_svfprintf_r+0x6e4>
 8010c46:	460c      	mov	r4, r1
 8010c48:	e561      	b.n	801070e <_svfprintf_r+0x71e>
 8010c4a:	9803      	ldr	r0, [sp, #12]
 8010c4c:	aa26      	add	r2, sp, #152	@ 0x98
 8010c4e:	4659      	mov	r1, fp
 8010c50:	f002 fac9 	bl	80131e6 <__ssprint_r>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	f040 8346 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010c5a:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c5c:	e569      	b.n	8010732 <_svfprintf_r+0x742>
 8010c5e:	9803      	ldr	r0, [sp, #12]
 8010c60:	aa26      	add	r2, sp, #152	@ 0x98
 8010c62:	4659      	mov	r1, fp
 8010c64:	f002 fabf 	bl	80131e6 <__ssprint_r>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	f040 833c 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010c6e:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c70:	e56f      	b.n	8010752 <_svfprintf_r+0x762>
 8010c72:	2010      	movs	r0, #16
 8010c74:	4403      	add	r3, r0
 8010c76:	2a07      	cmp	r2, #7
 8010c78:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010c7c:	6060      	str	r0, [r4, #4]
 8010c7e:	dd08      	ble.n	8010c92 <_svfprintf_r+0xca2>
 8010c80:	9803      	ldr	r0, [sp, #12]
 8010c82:	aa26      	add	r2, sp, #152	@ 0x98
 8010c84:	4659      	mov	r1, fp
 8010c86:	f002 faae 	bl	80131e6 <__ssprint_r>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	f040 832b 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010c90:	a929      	add	r1, sp, #164	@ 0xa4
 8010c92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c94:	3b10      	subs	r3, #16
 8010c96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c98:	460c      	mov	r4, r1
 8010c9a:	e563      	b.n	8010764 <_svfprintf_r+0x774>
 8010c9c:	460c      	mov	r4, r1
 8010c9e:	e57e      	b.n	801079e <_svfprintf_r+0x7ae>
 8010ca0:	2010      	movs	r0, #16
 8010ca2:	4403      	add	r3, r0
 8010ca4:	2a07      	cmp	r2, #7
 8010ca6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010caa:	6060      	str	r0, [r4, #4]
 8010cac:	dd08      	ble.n	8010cc0 <_svfprintf_r+0xcd0>
 8010cae:	9803      	ldr	r0, [sp, #12]
 8010cb0:	aa26      	add	r2, sp, #152	@ 0x98
 8010cb2:	4659      	mov	r1, fp
 8010cb4:	f002 fa97 	bl	80131e6 <__ssprint_r>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	f040 8314 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010cbe:	a929      	add	r1, sp, #164	@ 0xa4
 8010cc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cc2:	3b10      	subs	r3, #16
 8010cc4:	9310      	str	r3, [sp, #64]	@ 0x40
 8010cc6:	460c      	mov	r4, r1
 8010cc8:	e56f      	b.n	80107aa <_svfprintf_r+0x7ba>
 8010cca:	460c      	mov	r4, r1
 8010ccc:	e58a      	b.n	80107e4 <_svfprintf_r+0x7f4>
 8010cce:	bf00      	nop
 8010cd0:	080151c4 	.word	0x080151c4
 8010cd4:	080151d5 	.word	0x080151d5
 8010cd8:	9b06      	ldr	r3, [sp, #24]
 8010cda:	2b65      	cmp	r3, #101	@ 0x65
 8010cdc:	f340 8246 	ble.w	801116c <_svfprintf_r+0x117c>
 8010ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	f7ef ff16 	bl	8000b18 <__aeabi_dcmpeq>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d06a      	beq.n	8010dc6 <_svfprintf_r+0xdd6>
 8010cf0:	4b73      	ldr	r3, [pc, #460]	@ (8010ec0 <_svfprintf_r+0xed0>)
 8010cf2:	6023      	str	r3, [r4, #0]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	6063      	str	r3, [r4, #4]
 8010cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010cfe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010d00:	3301      	adds	r3, #1
 8010d02:	2b07      	cmp	r3, #7
 8010d04:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010d06:	dc37      	bgt.n	8010d78 <_svfprintf_r+0xd88>
 8010d08:	3408      	adds	r4, #8
 8010d0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010d0c:	9a04      	ldr	r2, [sp, #16]
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	db02      	blt.n	8010d18 <_svfprintf_r+0xd28>
 8010d12:	07ef      	lsls	r7, r5, #31
 8010d14:	f57f ad76 	bpl.w	8010804 <_svfprintf_r+0x814>
 8010d18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010d1a:	6023      	str	r3, [r4, #0]
 8010d1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d20:	6063      	str	r3, [r4, #4]
 8010d22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010d24:	4413      	add	r3, r2
 8010d26:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010d28:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	2b07      	cmp	r3, #7
 8010d2e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010d30:	dc2c      	bgt.n	8010d8c <_svfprintf_r+0xd9c>
 8010d32:	3408      	adds	r4, #8
 8010d34:	9b04      	ldr	r3, [sp, #16]
 8010d36:	1e5e      	subs	r6, r3, #1
 8010d38:	2e00      	cmp	r6, #0
 8010d3a:	f77f ad63 	ble.w	8010804 <_svfprintf_r+0x814>
 8010d3e:	4f61      	ldr	r7, [pc, #388]	@ (8010ec4 <_svfprintf_r+0xed4>)
 8010d40:	f04f 0810 	mov.w	r8, #16
 8010d44:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010d48:	2e10      	cmp	r6, #16
 8010d4a:	f103 0301 	add.w	r3, r3, #1
 8010d4e:	f104 0108 	add.w	r1, r4, #8
 8010d52:	6027      	str	r7, [r4, #0]
 8010d54:	dc24      	bgt.n	8010da0 <_svfprintf_r+0xdb0>
 8010d56:	6066      	str	r6, [r4, #4]
 8010d58:	2b07      	cmp	r3, #7
 8010d5a:	4416      	add	r6, r2
 8010d5c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8010d60:	f340 82a0 	ble.w	80112a4 <_svfprintf_r+0x12b4>
 8010d64:	9803      	ldr	r0, [sp, #12]
 8010d66:	aa26      	add	r2, sp, #152	@ 0x98
 8010d68:	4659      	mov	r1, fp
 8010d6a:	f002 fa3c 	bl	80131e6 <__ssprint_r>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	f040 82b9 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010d74:	ac29      	add	r4, sp, #164	@ 0xa4
 8010d76:	e545      	b.n	8010804 <_svfprintf_r+0x814>
 8010d78:	9803      	ldr	r0, [sp, #12]
 8010d7a:	aa26      	add	r2, sp, #152	@ 0x98
 8010d7c:	4659      	mov	r1, fp
 8010d7e:	f002 fa32 	bl	80131e6 <__ssprint_r>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	f040 82af 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010d88:	ac29      	add	r4, sp, #164	@ 0xa4
 8010d8a:	e7be      	b.n	8010d0a <_svfprintf_r+0xd1a>
 8010d8c:	9803      	ldr	r0, [sp, #12]
 8010d8e:	aa26      	add	r2, sp, #152	@ 0x98
 8010d90:	4659      	mov	r1, fp
 8010d92:	f002 fa28 	bl	80131e6 <__ssprint_r>
 8010d96:	2800      	cmp	r0, #0
 8010d98:	f040 82a5 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010d9c:	ac29      	add	r4, sp, #164	@ 0xa4
 8010d9e:	e7c9      	b.n	8010d34 <_svfprintf_r+0xd44>
 8010da0:	3210      	adds	r2, #16
 8010da2:	2b07      	cmp	r3, #7
 8010da4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010da8:	f8c4 8004 	str.w	r8, [r4, #4]
 8010dac:	dd08      	ble.n	8010dc0 <_svfprintf_r+0xdd0>
 8010dae:	9803      	ldr	r0, [sp, #12]
 8010db0:	aa26      	add	r2, sp, #152	@ 0x98
 8010db2:	4659      	mov	r1, fp
 8010db4:	f002 fa17 	bl	80131e6 <__ssprint_r>
 8010db8:	2800      	cmp	r0, #0
 8010dba:	f040 8294 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010dbe:	a929      	add	r1, sp, #164	@ 0xa4
 8010dc0:	3e10      	subs	r6, #16
 8010dc2:	460c      	mov	r4, r1
 8010dc4:	e7be      	b.n	8010d44 <_svfprintf_r+0xd54>
 8010dc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	dc7d      	bgt.n	8010ec8 <_svfprintf_r+0xed8>
 8010dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8010ec0 <_svfprintf_r+0xed0>)
 8010dce:	6023      	str	r3, [r4, #0]
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	6063      	str	r3, [r4, #4]
 8010dd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010dda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010ddc:	3301      	adds	r3, #1
 8010dde:	2b07      	cmp	r3, #7
 8010de0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010de2:	dc46      	bgt.n	8010e72 <_svfprintf_r+0xe82>
 8010de4:	3408      	adds	r4, #8
 8010de6:	9904      	ldr	r1, [sp, #16]
 8010de8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010dea:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010dec:	430b      	orrs	r3, r1
 8010dee:	f005 0101 	and.w	r1, r5, #1
 8010df2:	430b      	orrs	r3, r1
 8010df4:	f43f ad06 	beq.w	8010804 <_svfprintf_r+0x814>
 8010df8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010dfa:	6023      	str	r3, [r4, #0]
 8010dfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010dfe:	6063      	str	r3, [r4, #4]
 8010e00:	441a      	add	r2, r3
 8010e02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010e04:	9228      	str	r2, [sp, #160]	@ 0xa0
 8010e06:	3301      	adds	r3, #1
 8010e08:	2b07      	cmp	r3, #7
 8010e0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010e0c:	dc3b      	bgt.n	8010e86 <_svfprintf_r+0xe96>
 8010e0e:	f104 0308 	add.w	r3, r4, #8
 8010e12:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010e14:	2e00      	cmp	r6, #0
 8010e16:	da1b      	bge.n	8010e50 <_svfprintf_r+0xe60>
 8010e18:	4f2a      	ldr	r7, [pc, #168]	@ (8010ec4 <_svfprintf_r+0xed4>)
 8010e1a:	4276      	negs	r6, r6
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	2410      	movs	r4, #16
 8010e20:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8010e24:	2e10      	cmp	r6, #16
 8010e26:	f101 0101 	add.w	r1, r1, #1
 8010e2a:	f103 0308 	add.w	r3, r3, #8
 8010e2e:	6017      	str	r7, [r2, #0]
 8010e30:	dc33      	bgt.n	8010e9a <_svfprintf_r+0xeaa>
 8010e32:	6056      	str	r6, [r2, #4]
 8010e34:	2907      	cmp	r1, #7
 8010e36:	4406      	add	r6, r0
 8010e38:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8010e3c:	dd08      	ble.n	8010e50 <_svfprintf_r+0xe60>
 8010e3e:	9803      	ldr	r0, [sp, #12]
 8010e40:	aa26      	add	r2, sp, #152	@ 0x98
 8010e42:	4659      	mov	r1, fp
 8010e44:	f002 f9cf 	bl	80131e6 <__ssprint_r>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	f040 824c 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010e4e:	ab29      	add	r3, sp, #164	@ 0xa4
 8010e50:	9a04      	ldr	r2, [sp, #16]
 8010e52:	9904      	ldr	r1, [sp, #16]
 8010e54:	605a      	str	r2, [r3, #4]
 8010e56:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010e58:	f8c3 9000 	str.w	r9, [r3]
 8010e5c:	440a      	add	r2, r1
 8010e5e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8010e60:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010e62:	3201      	adds	r2, #1
 8010e64:	2a07      	cmp	r2, #7
 8010e66:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010e68:	f73f af7c 	bgt.w	8010d64 <_svfprintf_r+0xd74>
 8010e6c:	f103 0408 	add.w	r4, r3, #8
 8010e70:	e4c8      	b.n	8010804 <_svfprintf_r+0x814>
 8010e72:	9803      	ldr	r0, [sp, #12]
 8010e74:	aa26      	add	r2, sp, #152	@ 0x98
 8010e76:	4659      	mov	r1, fp
 8010e78:	f002 f9b5 	bl	80131e6 <__ssprint_r>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	f040 8232 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010e82:	ac29      	add	r4, sp, #164	@ 0xa4
 8010e84:	e7af      	b.n	8010de6 <_svfprintf_r+0xdf6>
 8010e86:	9803      	ldr	r0, [sp, #12]
 8010e88:	aa26      	add	r2, sp, #152	@ 0x98
 8010e8a:	4659      	mov	r1, fp
 8010e8c:	f002 f9ab 	bl	80131e6 <__ssprint_r>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	f040 8228 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010e96:	ab29      	add	r3, sp, #164	@ 0xa4
 8010e98:	e7bb      	b.n	8010e12 <_svfprintf_r+0xe22>
 8010e9a:	3010      	adds	r0, #16
 8010e9c:	2907      	cmp	r1, #7
 8010e9e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8010ea2:	6054      	str	r4, [r2, #4]
 8010ea4:	dd08      	ble.n	8010eb8 <_svfprintf_r+0xec8>
 8010ea6:	9803      	ldr	r0, [sp, #12]
 8010ea8:	aa26      	add	r2, sp, #152	@ 0x98
 8010eaa:	4659      	mov	r1, fp
 8010eac:	f002 f99b 	bl	80131e6 <__ssprint_r>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	f040 8218 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010eb6:	ab29      	add	r3, sp, #164	@ 0xa4
 8010eb8:	3e10      	subs	r6, #16
 8010eba:	461a      	mov	r2, r3
 8010ebc:	e7b0      	b.n	8010e20 <_svfprintf_r+0xe30>
 8010ebe:	bf00      	nop
 8010ec0:	080151e6 	.word	0x080151e6
 8010ec4:	080151e8 	.word	0x080151e8
 8010ec8:	9b04      	ldr	r3, [sp, #16]
 8010eca:	444b      	add	r3, r9
 8010ecc:	9306      	str	r3, [sp, #24]
 8010ece:	9b04      	ldr	r3, [sp, #16]
 8010ed0:	42b3      	cmp	r3, r6
 8010ed2:	bfa8      	it	ge
 8010ed4:	4633      	movge	r3, r6
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	4698      	mov	r8, r3
 8010eda:	dd0b      	ble.n	8010ef4 <_svfprintf_r+0xf04>
 8010edc:	e9c4 9300 	strd	r9, r3, [r4]
 8010ee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ee2:	4443      	add	r3, r8
 8010ee4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010ee6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010ee8:	3301      	adds	r3, #1
 8010eea:	2b07      	cmp	r3, #7
 8010eec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010eee:	f300 8089 	bgt.w	8011004 <_svfprintf_r+0x1014>
 8010ef2:	3408      	adds	r4, #8
 8010ef4:	4643      	mov	r3, r8
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	bfac      	ite	ge
 8010efa:	eba6 0808 	subge.w	r8, r6, r8
 8010efe:	46b0      	movlt	r8, r6
 8010f00:	f1b8 0f00 	cmp.w	r8, #0
 8010f04:	dd1b      	ble.n	8010f3e <_svfprintf_r+0xf4e>
 8010f06:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010f0a:	4897      	ldr	r0, [pc, #604]	@ (8011168 <_svfprintf_r+0x1178>)
 8010f0c:	6020      	str	r0, [r4, #0]
 8010f0e:	f1b8 0f10 	cmp.w	r8, #16
 8010f12:	f102 0201 	add.w	r2, r2, #1
 8010f16:	f104 0108 	add.w	r1, r4, #8
 8010f1a:	dc7d      	bgt.n	8011018 <_svfprintf_r+0x1028>
 8010f1c:	4443      	add	r3, r8
 8010f1e:	2a07      	cmp	r2, #7
 8010f20:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010f24:	f8c4 8004 	str.w	r8, [r4, #4]
 8010f28:	f340 808a 	ble.w	8011040 <_svfprintf_r+0x1050>
 8010f2c:	9803      	ldr	r0, [sp, #12]
 8010f2e:	aa26      	add	r2, sp, #152	@ 0x98
 8010f30:	4659      	mov	r1, fp
 8010f32:	f002 f958 	bl	80131e6 <__ssprint_r>
 8010f36:	2800      	cmp	r0, #0
 8010f38:	f040 81d5 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010f3c:	ac29      	add	r4, sp, #164	@ 0xa4
 8010f3e:	eb09 0806 	add.w	r8, r9, r6
 8010f42:	056e      	lsls	r6, r5, #21
 8010f44:	d508      	bpl.n	8010f58 <_svfprintf_r+0xf68>
 8010f46:	9b08      	ldr	r3, [sp, #32]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d17b      	bne.n	8011044 <_svfprintf_r+0x1054>
 8010f4c:	2f00      	cmp	r7, #0
 8010f4e:	d17b      	bne.n	8011048 <_svfprintf_r+0x1058>
 8010f50:	9b06      	ldr	r3, [sp, #24]
 8010f52:	4598      	cmp	r8, r3
 8010f54:	bf28      	it	cs
 8010f56:	4698      	movcs	r8, r3
 8010f58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f5a:	9a04      	ldr	r2, [sp, #16]
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	db01      	blt.n	8010f64 <_svfprintf_r+0xf74>
 8010f60:	07e8      	lsls	r0, r5, #31
 8010f62:	d50e      	bpl.n	8010f82 <_svfprintf_r+0xf92>
 8010f64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f66:	6023      	str	r3, [r4, #0]
 8010f68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010f6c:	6063      	str	r3, [r4, #4]
 8010f6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010f70:	4413      	add	r3, r2
 8010f72:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010f74:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010f76:	3301      	adds	r3, #1
 8010f78:	2b07      	cmp	r3, #7
 8010f7a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010f7c:	f300 80df 	bgt.w	801113e <_svfprintf_r+0x114e>
 8010f80:	3408      	adds	r4, #8
 8010f82:	9b04      	ldr	r3, [sp, #16]
 8010f84:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8010f86:	1bdf      	subs	r7, r3, r7
 8010f88:	9b06      	ldr	r3, [sp, #24]
 8010f8a:	eba3 0308 	sub.w	r3, r3, r8
 8010f8e:	429f      	cmp	r7, r3
 8010f90:	bfa8      	it	ge
 8010f92:	461f      	movge	r7, r3
 8010f94:	2f00      	cmp	r7, #0
 8010f96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010f98:	dd0a      	ble.n	8010fb0 <_svfprintf_r+0xfc0>
 8010f9a:	443b      	add	r3, r7
 8010f9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010f9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	2b07      	cmp	r3, #7
 8010fa4:	e9c4 8700 	strd	r8, r7, [r4]
 8010fa8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010faa:	f300 80d2 	bgt.w	8011152 <_svfprintf_r+0x1162>
 8010fae:	3408      	adds	r4, #8
 8010fb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010fb2:	9b04      	ldr	r3, [sp, #16]
 8010fb4:	2f00      	cmp	r7, #0
 8010fb6:	eba3 0606 	sub.w	r6, r3, r6
 8010fba:	bfa8      	it	ge
 8010fbc:	1bf6      	subge	r6, r6, r7
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	f77f ac20 	ble.w	8010804 <_svfprintf_r+0x814>
 8010fc4:	4f68      	ldr	r7, [pc, #416]	@ (8011168 <_svfprintf_r+0x1178>)
 8010fc6:	f04f 0810 	mov.w	r8, #16
 8010fca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8010fce:	2e10      	cmp	r6, #16
 8010fd0:	f103 0301 	add.w	r3, r3, #1
 8010fd4:	f104 0108 	add.w	r1, r4, #8
 8010fd8:	6027      	str	r7, [r4, #0]
 8010fda:	f77f aebc 	ble.w	8010d56 <_svfprintf_r+0xd66>
 8010fde:	3210      	adds	r2, #16
 8010fe0:	2b07      	cmp	r3, #7
 8010fe2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8010fe6:	f8c4 8004 	str.w	r8, [r4, #4]
 8010fea:	dd08      	ble.n	8010ffe <_svfprintf_r+0x100e>
 8010fec:	9803      	ldr	r0, [sp, #12]
 8010fee:	aa26      	add	r2, sp, #152	@ 0x98
 8010ff0:	4659      	mov	r1, fp
 8010ff2:	f002 f8f8 	bl	80131e6 <__ssprint_r>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	f040 8175 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8010ffc:	a929      	add	r1, sp, #164	@ 0xa4
 8010ffe:	3e10      	subs	r6, #16
 8011000:	460c      	mov	r4, r1
 8011002:	e7e2      	b.n	8010fca <_svfprintf_r+0xfda>
 8011004:	9803      	ldr	r0, [sp, #12]
 8011006:	aa26      	add	r2, sp, #152	@ 0x98
 8011008:	4659      	mov	r1, fp
 801100a:	f002 f8ec 	bl	80131e6 <__ssprint_r>
 801100e:	2800      	cmp	r0, #0
 8011010:	f040 8169 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8011014:	ac29      	add	r4, sp, #164	@ 0xa4
 8011016:	e76d      	b.n	8010ef4 <_svfprintf_r+0xf04>
 8011018:	2010      	movs	r0, #16
 801101a:	4403      	add	r3, r0
 801101c:	2a07      	cmp	r2, #7
 801101e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011022:	6060      	str	r0, [r4, #4]
 8011024:	dd08      	ble.n	8011038 <_svfprintf_r+0x1048>
 8011026:	9803      	ldr	r0, [sp, #12]
 8011028:	aa26      	add	r2, sp, #152	@ 0x98
 801102a:	4659      	mov	r1, fp
 801102c:	f002 f8db 	bl	80131e6 <__ssprint_r>
 8011030:	2800      	cmp	r0, #0
 8011032:	f040 8158 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8011036:	a929      	add	r1, sp, #164	@ 0xa4
 8011038:	f1a8 0810 	sub.w	r8, r8, #16
 801103c:	460c      	mov	r4, r1
 801103e:	e762      	b.n	8010f06 <_svfprintf_r+0xf16>
 8011040:	460c      	mov	r4, r1
 8011042:	e77c      	b.n	8010f3e <_svfprintf_r+0xf4e>
 8011044:	2f00      	cmp	r7, #0
 8011046:	d04a      	beq.n	80110de <_svfprintf_r+0x10ee>
 8011048:	3f01      	subs	r7, #1
 801104a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801104c:	6023      	str	r3, [r4, #0]
 801104e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011050:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011052:	6063      	str	r3, [r4, #4]
 8011054:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011056:	4413      	add	r3, r2
 8011058:	9328      	str	r3, [sp, #160]	@ 0xa0
 801105a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801105c:	3301      	adds	r3, #1
 801105e:	2b07      	cmp	r3, #7
 8011060:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011062:	dc43      	bgt.n	80110ec <_svfprintf_r+0x10fc>
 8011064:	3408      	adds	r4, #8
 8011066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011068:	781a      	ldrb	r2, [r3, #0]
 801106a:	9b06      	ldr	r3, [sp, #24]
 801106c:	eba3 0308 	sub.w	r3, r3, r8
 8011070:	429a      	cmp	r2, r3
 8011072:	bfa8      	it	ge
 8011074:	461a      	movge	r2, r3
 8011076:	2a00      	cmp	r2, #0
 8011078:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801107a:	4691      	mov	r9, r2
 801107c:	dd09      	ble.n	8011092 <_svfprintf_r+0x10a2>
 801107e:	4413      	add	r3, r2
 8011080:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011082:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011084:	3301      	adds	r3, #1
 8011086:	2b07      	cmp	r3, #7
 8011088:	e9c4 8200 	strd	r8, r2, [r4]
 801108c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801108e:	dc37      	bgt.n	8011100 <_svfprintf_r+0x1110>
 8011090:	3408      	adds	r4, #8
 8011092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011094:	781e      	ldrb	r6, [r3, #0]
 8011096:	f1b9 0f00 	cmp.w	r9, #0
 801109a:	bfa8      	it	ge
 801109c:	eba6 0609 	subge.w	r6, r6, r9
 80110a0:	2e00      	cmp	r6, #0
 80110a2:	dd18      	ble.n	80110d6 <_svfprintf_r+0x10e6>
 80110a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80110a8:	482f      	ldr	r0, [pc, #188]	@ (8011168 <_svfprintf_r+0x1178>)
 80110aa:	6020      	str	r0, [r4, #0]
 80110ac:	2e10      	cmp	r6, #16
 80110ae:	f103 0301 	add.w	r3, r3, #1
 80110b2:	f104 0108 	add.w	r1, r4, #8
 80110b6:	dc2d      	bgt.n	8011114 <_svfprintf_r+0x1124>
 80110b8:	6066      	str	r6, [r4, #4]
 80110ba:	2b07      	cmp	r3, #7
 80110bc:	4416      	add	r6, r2
 80110be:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80110c2:	dd3a      	ble.n	801113a <_svfprintf_r+0x114a>
 80110c4:	9803      	ldr	r0, [sp, #12]
 80110c6:	aa26      	add	r2, sp, #152	@ 0x98
 80110c8:	4659      	mov	r1, fp
 80110ca:	f002 f88c 	bl	80131e6 <__ssprint_r>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	f040 8109 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 80110d4:	ac29      	add	r4, sp, #164	@ 0xa4
 80110d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	4498      	add	r8, r3
 80110dc:	e733      	b.n	8010f46 <_svfprintf_r+0xf56>
 80110de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110e0:	3b01      	subs	r3, #1
 80110e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80110e4:	9b08      	ldr	r3, [sp, #32]
 80110e6:	3b01      	subs	r3, #1
 80110e8:	9308      	str	r3, [sp, #32]
 80110ea:	e7ae      	b.n	801104a <_svfprintf_r+0x105a>
 80110ec:	9803      	ldr	r0, [sp, #12]
 80110ee:	aa26      	add	r2, sp, #152	@ 0x98
 80110f0:	4659      	mov	r1, fp
 80110f2:	f002 f878 	bl	80131e6 <__ssprint_r>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	f040 80f5 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 80110fc:	ac29      	add	r4, sp, #164	@ 0xa4
 80110fe:	e7b2      	b.n	8011066 <_svfprintf_r+0x1076>
 8011100:	9803      	ldr	r0, [sp, #12]
 8011102:	aa26      	add	r2, sp, #152	@ 0x98
 8011104:	4659      	mov	r1, fp
 8011106:	f002 f86e 	bl	80131e6 <__ssprint_r>
 801110a:	2800      	cmp	r0, #0
 801110c:	f040 80eb 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8011110:	ac29      	add	r4, sp, #164	@ 0xa4
 8011112:	e7be      	b.n	8011092 <_svfprintf_r+0x10a2>
 8011114:	2010      	movs	r0, #16
 8011116:	4402      	add	r2, r0
 8011118:	2b07      	cmp	r3, #7
 801111a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801111e:	6060      	str	r0, [r4, #4]
 8011120:	dd08      	ble.n	8011134 <_svfprintf_r+0x1144>
 8011122:	9803      	ldr	r0, [sp, #12]
 8011124:	aa26      	add	r2, sp, #152	@ 0x98
 8011126:	4659      	mov	r1, fp
 8011128:	f002 f85d 	bl	80131e6 <__ssprint_r>
 801112c:	2800      	cmp	r0, #0
 801112e:	f040 80da 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8011132:	a929      	add	r1, sp, #164	@ 0xa4
 8011134:	3e10      	subs	r6, #16
 8011136:	460c      	mov	r4, r1
 8011138:	e7b4      	b.n	80110a4 <_svfprintf_r+0x10b4>
 801113a:	460c      	mov	r4, r1
 801113c:	e7cb      	b.n	80110d6 <_svfprintf_r+0x10e6>
 801113e:	9803      	ldr	r0, [sp, #12]
 8011140:	aa26      	add	r2, sp, #152	@ 0x98
 8011142:	4659      	mov	r1, fp
 8011144:	f002 f84f 	bl	80131e6 <__ssprint_r>
 8011148:	2800      	cmp	r0, #0
 801114a:	f040 80cc 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 801114e:	ac29      	add	r4, sp, #164	@ 0xa4
 8011150:	e717      	b.n	8010f82 <_svfprintf_r+0xf92>
 8011152:	9803      	ldr	r0, [sp, #12]
 8011154:	aa26      	add	r2, sp, #152	@ 0x98
 8011156:	4659      	mov	r1, fp
 8011158:	f002 f845 	bl	80131e6 <__ssprint_r>
 801115c:	2800      	cmp	r0, #0
 801115e:	f040 80c2 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 8011162:	ac29      	add	r4, sp, #164	@ 0xa4
 8011164:	e724      	b.n	8010fb0 <_svfprintf_r+0xfc0>
 8011166:	bf00      	nop
 8011168:	080151e8 	.word	0x080151e8
 801116c:	9904      	ldr	r1, [sp, #16]
 801116e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011170:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8011172:	2901      	cmp	r1, #1
 8011174:	f103 0301 	add.w	r3, r3, #1
 8011178:	f102 0201 	add.w	r2, r2, #1
 801117c:	f104 0608 	add.w	r6, r4, #8
 8011180:	dc02      	bgt.n	8011188 <_svfprintf_r+0x1198>
 8011182:	07e9      	lsls	r1, r5, #31
 8011184:	f140 8083 	bpl.w	801128e <_svfprintf_r+0x129e>
 8011188:	2101      	movs	r1, #1
 801118a:	2a07      	cmp	r2, #7
 801118c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011190:	f8c4 9000 	str.w	r9, [r4]
 8011194:	6061      	str	r1, [r4, #4]
 8011196:	dd08      	ble.n	80111aa <_svfprintf_r+0x11ba>
 8011198:	9803      	ldr	r0, [sp, #12]
 801119a:	aa26      	add	r2, sp, #152	@ 0x98
 801119c:	4659      	mov	r1, fp
 801119e:	f002 f822 	bl	80131e6 <__ssprint_r>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	f040 809f 	bne.w	80112e6 <_svfprintf_r+0x12f6>
 80111a8:	ae29      	add	r6, sp, #164	@ 0xa4
 80111aa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80111ac:	6033      	str	r3, [r6, #0]
 80111ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80111b2:	6073      	str	r3, [r6, #4]
 80111b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80111b6:	4413      	add	r3, r2
 80111b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80111ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80111bc:	3301      	adds	r3, #1
 80111be:	2b07      	cmp	r3, #7
 80111c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80111c2:	dc33      	bgt.n	801122c <_svfprintf_r+0x123c>
 80111c4:	3608      	adds	r6, #8
 80111c6:	9b04      	ldr	r3, [sp, #16]
 80111c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80111cc:	1e5c      	subs	r4, r3, #1
 80111ce:	2200      	movs	r2, #0
 80111d0:	2300      	movs	r3, #0
 80111d2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 80111d6:	f7ef fc9f 	bl	8000b18 <__aeabi_dcmpeq>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d12f      	bne.n	801123e <_svfprintf_r+0x124e>
 80111de:	f109 0201 	add.w	r2, r9, #1
 80111e2:	e9c6 2400 	strd	r2, r4, [r6]
 80111e6:	9a04      	ldr	r2, [sp, #16]
 80111e8:	f108 0301 	add.w	r3, r8, #1
 80111ec:	3f01      	subs	r7, #1
 80111ee:	4417      	add	r7, r2
 80111f0:	2b07      	cmp	r3, #7
 80111f2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80111f6:	dd53      	ble.n	80112a0 <_svfprintf_r+0x12b0>
 80111f8:	9803      	ldr	r0, [sp, #12]
 80111fa:	aa26      	add	r2, sp, #152	@ 0x98
 80111fc:	4659      	mov	r1, fp
 80111fe:	f001 fff2 	bl	80131e6 <__ssprint_r>
 8011202:	2800      	cmp	r0, #0
 8011204:	d16f      	bne.n	80112e6 <_svfprintf_r+0x12f6>
 8011206:	ae29      	add	r6, sp, #164	@ 0xa4
 8011208:	ab22      	add	r3, sp, #136	@ 0x88
 801120a:	6033      	str	r3, [r6, #0]
 801120c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801120e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011210:	6073      	str	r3, [r6, #4]
 8011212:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011214:	4413      	add	r3, r2
 8011216:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011218:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801121a:	3301      	adds	r3, #1
 801121c:	2b07      	cmp	r3, #7
 801121e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011220:	f73f ada0 	bgt.w	8010d64 <_svfprintf_r+0xd74>
 8011224:	f106 0408 	add.w	r4, r6, #8
 8011228:	f7ff baec 	b.w	8010804 <_svfprintf_r+0x814>
 801122c:	9803      	ldr	r0, [sp, #12]
 801122e:	aa26      	add	r2, sp, #152	@ 0x98
 8011230:	4659      	mov	r1, fp
 8011232:	f001 ffd8 	bl	80131e6 <__ssprint_r>
 8011236:	2800      	cmp	r0, #0
 8011238:	d155      	bne.n	80112e6 <_svfprintf_r+0x12f6>
 801123a:	ae29      	add	r6, sp, #164	@ 0xa4
 801123c:	e7c3      	b.n	80111c6 <_svfprintf_r+0x11d6>
 801123e:	9b04      	ldr	r3, [sp, #16]
 8011240:	2b01      	cmp	r3, #1
 8011242:	dde1      	ble.n	8011208 <_svfprintf_r+0x1218>
 8011244:	4f57      	ldr	r7, [pc, #348]	@ (80113a4 <_svfprintf_r+0x13b4>)
 8011246:	f04f 0810 	mov.w	r8, #16
 801124a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801124e:	2c10      	cmp	r4, #16
 8011250:	f103 0301 	add.w	r3, r3, #1
 8011254:	f106 0108 	add.w	r1, r6, #8
 8011258:	6037      	str	r7, [r6, #0]
 801125a:	dc07      	bgt.n	801126c <_svfprintf_r+0x127c>
 801125c:	6074      	str	r4, [r6, #4]
 801125e:	2b07      	cmp	r3, #7
 8011260:	4414      	add	r4, r2
 8011262:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8011266:	dcc7      	bgt.n	80111f8 <_svfprintf_r+0x1208>
 8011268:	460e      	mov	r6, r1
 801126a:	e7cd      	b.n	8011208 <_svfprintf_r+0x1218>
 801126c:	3210      	adds	r2, #16
 801126e:	2b07      	cmp	r3, #7
 8011270:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011274:	f8c6 8004 	str.w	r8, [r6, #4]
 8011278:	dd06      	ble.n	8011288 <_svfprintf_r+0x1298>
 801127a:	9803      	ldr	r0, [sp, #12]
 801127c:	aa26      	add	r2, sp, #152	@ 0x98
 801127e:	4659      	mov	r1, fp
 8011280:	f001 ffb1 	bl	80131e6 <__ssprint_r>
 8011284:	bb78      	cbnz	r0, 80112e6 <_svfprintf_r+0x12f6>
 8011286:	a929      	add	r1, sp, #164	@ 0xa4
 8011288:	3c10      	subs	r4, #16
 801128a:	460e      	mov	r6, r1
 801128c:	e7dd      	b.n	801124a <_svfprintf_r+0x125a>
 801128e:	2101      	movs	r1, #1
 8011290:	2a07      	cmp	r2, #7
 8011292:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011296:	f8c4 9000 	str.w	r9, [r4]
 801129a:	6061      	str	r1, [r4, #4]
 801129c:	ddb4      	ble.n	8011208 <_svfprintf_r+0x1218>
 801129e:	e7ab      	b.n	80111f8 <_svfprintf_r+0x1208>
 80112a0:	3608      	adds	r6, #8
 80112a2:	e7b1      	b.n	8011208 <_svfprintf_r+0x1218>
 80112a4:	460c      	mov	r4, r1
 80112a6:	f7ff baad 	b.w	8010804 <_svfprintf_r+0x814>
 80112aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80112ae:	1a9d      	subs	r5, r3, r2
 80112b0:	2d00      	cmp	r5, #0
 80112b2:	f77f aaaa 	ble.w	801080a <_svfprintf_r+0x81a>
 80112b6:	4e3c      	ldr	r6, [pc, #240]	@ (80113a8 <_svfprintf_r+0x13b8>)
 80112b8:	2710      	movs	r7, #16
 80112ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80112be:	2d10      	cmp	r5, #16
 80112c0:	f103 0301 	add.w	r3, r3, #1
 80112c4:	6026      	str	r6, [r4, #0]
 80112c6:	dc18      	bgt.n	80112fa <_svfprintf_r+0x130a>
 80112c8:	442a      	add	r2, r5
 80112ca:	2b07      	cmp	r3, #7
 80112cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80112d0:	6065      	str	r5, [r4, #4]
 80112d2:	f77f aa9a 	ble.w	801080a <_svfprintf_r+0x81a>
 80112d6:	9803      	ldr	r0, [sp, #12]
 80112d8:	aa26      	add	r2, sp, #152	@ 0x98
 80112da:	4659      	mov	r1, fp
 80112dc:	f001 ff83 	bl	80131e6 <__ssprint_r>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	f43f aa92 	beq.w	801080a <_svfprintf_r+0x81a>
 80112e6:	f1ba 0f00 	cmp.w	sl, #0
 80112ea:	f43f a89a 	beq.w	8010422 <_svfprintf_r+0x432>
 80112ee:	9803      	ldr	r0, [sp, #12]
 80112f0:	4651      	mov	r1, sl
 80112f2:	f7fe fdbb 	bl	800fe6c <_free_r>
 80112f6:	f7ff b894 	b.w	8010422 <_svfprintf_r+0x432>
 80112fa:	3210      	adds	r2, #16
 80112fc:	2b07      	cmp	r3, #7
 80112fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011302:	6067      	str	r7, [r4, #4]
 8011304:	dc02      	bgt.n	801130c <_svfprintf_r+0x131c>
 8011306:	3408      	adds	r4, #8
 8011308:	3d10      	subs	r5, #16
 801130a:	e7d6      	b.n	80112ba <_svfprintf_r+0x12ca>
 801130c:	9803      	ldr	r0, [sp, #12]
 801130e:	aa26      	add	r2, sp, #152	@ 0x98
 8011310:	4659      	mov	r1, fp
 8011312:	f001 ff68 	bl	80131e6 <__ssprint_r>
 8011316:	2800      	cmp	r0, #0
 8011318:	d1e5      	bne.n	80112e6 <_svfprintf_r+0x12f6>
 801131a:	ac29      	add	r4, sp, #164	@ 0xa4
 801131c:	e7f4      	b.n	8011308 <_svfprintf_r+0x1318>
 801131e:	9803      	ldr	r0, [sp, #12]
 8011320:	4651      	mov	r1, sl
 8011322:	f7fe fda3 	bl	800fe6c <_free_r>
 8011326:	f7ff ba88 	b.w	801083a <_svfprintf_r+0x84a>
 801132a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801132c:	2b00      	cmp	r3, #0
 801132e:	f43f a878 	beq.w	8010422 <_svfprintf_r+0x432>
 8011332:	9803      	ldr	r0, [sp, #12]
 8011334:	aa26      	add	r2, sp, #152	@ 0x98
 8011336:	4659      	mov	r1, fp
 8011338:	f001 ff55 	bl	80131e6 <__ssprint_r>
 801133c:	f7ff b871 	b.w	8010422 <_svfprintf_r+0x432>
 8011340:	ea56 0207 	orrs.w	r2, r6, r7
 8011344:	9508      	str	r5, [sp, #32]
 8011346:	f43f ab7a 	beq.w	8010a3e <_svfprintf_r+0xa4e>
 801134a:	2b01      	cmp	r3, #1
 801134c:	f43f abfb 	beq.w	8010b46 <_svfprintf_r+0xb56>
 8011350:	2b02      	cmp	r3, #2
 8011352:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8011356:	f43f ac3f 	beq.w	8010bd8 <_svfprintf_r+0xbe8>
 801135a:	f006 0307 	and.w	r3, r6, #7
 801135e:	08f6      	lsrs	r6, r6, #3
 8011360:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8011364:	08ff      	lsrs	r7, r7, #3
 8011366:	3330      	adds	r3, #48	@ 0x30
 8011368:	ea56 0107 	orrs.w	r1, r6, r7
 801136c:	464a      	mov	r2, r9
 801136e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011372:	d1f2      	bne.n	801135a <_svfprintf_r+0x136a>
 8011374:	9908      	ldr	r1, [sp, #32]
 8011376:	07c8      	lsls	r0, r1, #31
 8011378:	d506      	bpl.n	8011388 <_svfprintf_r+0x1398>
 801137a:	2b30      	cmp	r3, #48	@ 0x30
 801137c:	d004      	beq.n	8011388 <_svfprintf_r+0x1398>
 801137e:	2330      	movs	r3, #48	@ 0x30
 8011380:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011384:	f1a2 0902 	sub.w	r9, r2, #2
 8011388:	ab52      	add	r3, sp, #328	@ 0x148
 801138a:	9d08      	ldr	r5, [sp, #32]
 801138c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8011390:	f04f 0a00 	mov.w	sl, #0
 8011394:	eba3 0809 	sub.w	r8, r3, r9
 8011398:	4657      	mov	r7, sl
 801139a:	f8cd a020 	str.w	sl, [sp, #32]
 801139e:	4656      	mov	r6, sl
 80113a0:	f7ff b97c 	b.w	801069c <_svfprintf_r+0x6ac>
 80113a4:	080151e8 	.word	0x080151e8
 80113a8:	080151f8 	.word	0x080151f8

080113ac <_fclose_r>:
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	4605      	mov	r5, r0
 80113b0:	460c      	mov	r4, r1
 80113b2:	b1b1      	cbz	r1, 80113e2 <_fclose_r+0x36>
 80113b4:	b118      	cbz	r0, 80113be <_fclose_r+0x12>
 80113b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80113b8:	b90b      	cbnz	r3, 80113be <_fclose_r+0x12>
 80113ba:	f7fe fa7d 	bl	800f8b8 <__sinit>
 80113be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113c0:	07de      	lsls	r6, r3, #31
 80113c2:	d405      	bmi.n	80113d0 <_fclose_r+0x24>
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	0598      	lsls	r0, r3, #22
 80113c8:	d402      	bmi.n	80113d0 <_fclose_r+0x24>
 80113ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113cc:	f7fe fccc 	bl	800fd68 <__retarget_lock_acquire_recursive>
 80113d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113d4:	b943      	cbnz	r3, 80113e8 <_fclose_r+0x3c>
 80113d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113d8:	07d9      	lsls	r1, r3, #31
 80113da:	d402      	bmi.n	80113e2 <_fclose_r+0x36>
 80113dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113de:	f7fe fcc4 	bl	800fd6a <__retarget_lock_release_recursive>
 80113e2:	2600      	movs	r6, #0
 80113e4:	4630      	mov	r0, r6
 80113e6:	bd70      	pop	{r4, r5, r6, pc}
 80113e8:	4621      	mov	r1, r4
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 f834 	bl	8011458 <__sflush_r>
 80113f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80113f2:	4606      	mov	r6, r0
 80113f4:	b133      	cbz	r3, 8011404 <_fclose_r+0x58>
 80113f6:	69e1      	ldr	r1, [r4, #28]
 80113f8:	4628      	mov	r0, r5
 80113fa:	4798      	blx	r3
 80113fc:	2800      	cmp	r0, #0
 80113fe:	bfb8      	it	lt
 8011400:	f04f 36ff 	movlt.w	r6, #4294967295
 8011404:	89a3      	ldrh	r3, [r4, #12]
 8011406:	061a      	lsls	r2, r3, #24
 8011408:	d503      	bpl.n	8011412 <_fclose_r+0x66>
 801140a:	6921      	ldr	r1, [r4, #16]
 801140c:	4628      	mov	r0, r5
 801140e:	f7fe fd2d 	bl	800fe6c <_free_r>
 8011412:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011414:	b141      	cbz	r1, 8011428 <_fclose_r+0x7c>
 8011416:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801141a:	4299      	cmp	r1, r3
 801141c:	d002      	beq.n	8011424 <_fclose_r+0x78>
 801141e:	4628      	mov	r0, r5
 8011420:	f7fe fd24 	bl	800fe6c <_free_r>
 8011424:	2300      	movs	r3, #0
 8011426:	6323      	str	r3, [r4, #48]	@ 0x30
 8011428:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801142a:	b121      	cbz	r1, 8011436 <_fclose_r+0x8a>
 801142c:	4628      	mov	r0, r5
 801142e:	f7fe fd1d 	bl	800fe6c <_free_r>
 8011432:	2300      	movs	r3, #0
 8011434:	6463      	str	r3, [r4, #68]	@ 0x44
 8011436:	f7fe fa33 	bl	800f8a0 <__sfp_lock_acquire>
 801143a:	2300      	movs	r3, #0
 801143c:	81a3      	strh	r3, [r4, #12]
 801143e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011440:	07db      	lsls	r3, r3, #31
 8011442:	d402      	bmi.n	801144a <_fclose_r+0x9e>
 8011444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011446:	f7fe fc90 	bl	800fd6a <__retarget_lock_release_recursive>
 801144a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801144c:	f7fe fc8b 	bl	800fd66 <__retarget_lock_close_recursive>
 8011450:	f7fe fa2c 	bl	800f8ac <__sfp_lock_release>
 8011454:	e7c6      	b.n	80113e4 <_fclose_r+0x38>
	...

08011458 <__sflush_r>:
 8011458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801145c:	4605      	mov	r5, r0
 801145e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8011462:	0706      	lsls	r6, r0, #28
 8011464:	460c      	mov	r4, r1
 8011466:	d457      	bmi.n	8011518 <__sflush_r+0xc0>
 8011468:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801146c:	818b      	strh	r3, [r1, #12]
 801146e:	684b      	ldr	r3, [r1, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	dc02      	bgt.n	801147a <__sflush_r+0x22>
 8011474:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8011476:	2b00      	cmp	r3, #0
 8011478:	dd4c      	ble.n	8011514 <__sflush_r+0xbc>
 801147a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801147c:	2e00      	cmp	r6, #0
 801147e:	d049      	beq.n	8011514 <__sflush_r+0xbc>
 8011480:	2300      	movs	r3, #0
 8011482:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8011486:	682f      	ldr	r7, [r5, #0]
 8011488:	69e1      	ldr	r1, [r4, #28]
 801148a:	602b      	str	r3, [r5, #0]
 801148c:	d034      	beq.n	80114f8 <__sflush_r+0xa0>
 801148e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	0759      	lsls	r1, r3, #29
 8011494:	d505      	bpl.n	80114a2 <__sflush_r+0x4a>
 8011496:	6863      	ldr	r3, [r4, #4]
 8011498:	1ad2      	subs	r2, r2, r3
 801149a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801149c:	b10b      	cbz	r3, 80114a2 <__sflush_r+0x4a>
 801149e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80114a0:	1ad2      	subs	r2, r2, r3
 80114a2:	2300      	movs	r3, #0
 80114a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80114a6:	69e1      	ldr	r1, [r4, #28]
 80114a8:	4628      	mov	r0, r5
 80114aa:	47b0      	blx	r6
 80114ac:	1c43      	adds	r3, r0, #1
 80114ae:	d106      	bne.n	80114be <__sflush_r+0x66>
 80114b0:	682a      	ldr	r2, [r5, #0]
 80114b2:	2a1d      	cmp	r2, #29
 80114b4:	d848      	bhi.n	8011548 <__sflush_r+0xf0>
 80114b6:	4b2b      	ldr	r3, [pc, #172]	@ (8011564 <__sflush_r+0x10c>)
 80114b8:	4113      	asrs	r3, r2
 80114ba:	07de      	lsls	r6, r3, #31
 80114bc:	d444      	bmi.n	8011548 <__sflush_r+0xf0>
 80114be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80114c6:	81a2      	strh	r2, [r4, #12]
 80114c8:	2200      	movs	r2, #0
 80114ca:	6062      	str	r2, [r4, #4]
 80114cc:	04d9      	lsls	r1, r3, #19
 80114ce:	6922      	ldr	r2, [r4, #16]
 80114d0:	6022      	str	r2, [r4, #0]
 80114d2:	d504      	bpl.n	80114de <__sflush_r+0x86>
 80114d4:	1c42      	adds	r2, r0, #1
 80114d6:	d101      	bne.n	80114dc <__sflush_r+0x84>
 80114d8:	682b      	ldr	r3, [r5, #0]
 80114da:	b903      	cbnz	r3, 80114de <__sflush_r+0x86>
 80114dc:	6520      	str	r0, [r4, #80]	@ 0x50
 80114de:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80114e0:	602f      	str	r7, [r5, #0]
 80114e2:	b1b9      	cbz	r1, 8011514 <__sflush_r+0xbc>
 80114e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80114e8:	4299      	cmp	r1, r3
 80114ea:	d002      	beq.n	80114f2 <__sflush_r+0x9a>
 80114ec:	4628      	mov	r0, r5
 80114ee:	f7fe fcbd 	bl	800fe6c <_free_r>
 80114f2:	2300      	movs	r3, #0
 80114f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80114f6:	e00d      	b.n	8011514 <__sflush_r+0xbc>
 80114f8:	2301      	movs	r3, #1
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b0      	blx	r6
 80114fe:	4602      	mov	r2, r0
 8011500:	1c50      	adds	r0, r2, #1
 8011502:	d1c5      	bne.n	8011490 <__sflush_r+0x38>
 8011504:	682b      	ldr	r3, [r5, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d0c2      	beq.n	8011490 <__sflush_r+0x38>
 801150a:	2b1d      	cmp	r3, #29
 801150c:	d001      	beq.n	8011512 <__sflush_r+0xba>
 801150e:	2b16      	cmp	r3, #22
 8011510:	d11a      	bne.n	8011548 <__sflush_r+0xf0>
 8011512:	602f      	str	r7, [r5, #0]
 8011514:	2000      	movs	r0, #0
 8011516:	e01e      	b.n	8011556 <__sflush_r+0xfe>
 8011518:	690f      	ldr	r7, [r1, #16]
 801151a:	2f00      	cmp	r7, #0
 801151c:	d0fa      	beq.n	8011514 <__sflush_r+0xbc>
 801151e:	0783      	lsls	r3, r0, #30
 8011520:	680e      	ldr	r6, [r1, #0]
 8011522:	bf08      	it	eq
 8011524:	694b      	ldreq	r3, [r1, #20]
 8011526:	600f      	str	r7, [r1, #0]
 8011528:	bf18      	it	ne
 801152a:	2300      	movne	r3, #0
 801152c:	eba6 0807 	sub.w	r8, r6, r7
 8011530:	608b      	str	r3, [r1, #8]
 8011532:	f1b8 0f00 	cmp.w	r8, #0
 8011536:	dded      	ble.n	8011514 <__sflush_r+0xbc>
 8011538:	69e1      	ldr	r1, [r4, #28]
 801153a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801153c:	4643      	mov	r3, r8
 801153e:	463a      	mov	r2, r7
 8011540:	4628      	mov	r0, r5
 8011542:	47b0      	blx	r6
 8011544:	2800      	cmp	r0, #0
 8011546:	dc08      	bgt.n	801155a <__sflush_r+0x102>
 8011548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801154c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	f04f 30ff 	mov.w	r0, #4294967295
 8011556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155a:	4407      	add	r7, r0
 801155c:	eba8 0800 	sub.w	r8, r8, r0
 8011560:	e7e7      	b.n	8011532 <__sflush_r+0xda>
 8011562:	bf00      	nop
 8011564:	dfbffffe 	.word	0xdfbffffe

08011568 <_fflush_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	460c      	mov	r4, r1
 801156c:	4605      	mov	r5, r0
 801156e:	b118      	cbz	r0, 8011578 <_fflush_r+0x10>
 8011570:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011572:	b90b      	cbnz	r3, 8011578 <_fflush_r+0x10>
 8011574:	f7fe f9a0 	bl	800f8b8 <__sinit>
 8011578:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801157c:	b1b8      	cbz	r0, 80115ae <_fflush_r+0x46>
 801157e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011580:	07db      	lsls	r3, r3, #31
 8011582:	d404      	bmi.n	801158e <_fflush_r+0x26>
 8011584:	0581      	lsls	r1, r0, #22
 8011586:	d402      	bmi.n	801158e <_fflush_r+0x26>
 8011588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801158a:	f7fe fbed 	bl	800fd68 <__retarget_lock_acquire_recursive>
 801158e:	4628      	mov	r0, r5
 8011590:	4621      	mov	r1, r4
 8011592:	f7ff ff61 	bl	8011458 <__sflush_r>
 8011596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011598:	07da      	lsls	r2, r3, #31
 801159a:	4605      	mov	r5, r0
 801159c:	d405      	bmi.n	80115aa <_fflush_r+0x42>
 801159e:	89a3      	ldrh	r3, [r4, #12]
 80115a0:	059b      	lsls	r3, r3, #22
 80115a2:	d402      	bmi.n	80115aa <_fflush_r+0x42>
 80115a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115a6:	f7fe fbe0 	bl	800fd6a <__retarget_lock_release_recursive>
 80115aa:	4628      	mov	r0, r5
 80115ac:	bd38      	pop	{r3, r4, r5, pc}
 80115ae:	4605      	mov	r5, r0
 80115b0:	e7fb      	b.n	80115aa <_fflush_r+0x42>
	...

080115b4 <__sfvwrite_r>:
 80115b4:	6893      	ldr	r3, [r2, #8]
 80115b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	4606      	mov	r6, r0
 80115bc:	460c      	mov	r4, r1
 80115be:	4691      	mov	r9, r2
 80115c0:	b91b      	cbnz	r3, 80115ca <__sfvwrite_r+0x16>
 80115c2:	2000      	movs	r0, #0
 80115c4:	b003      	add	sp, #12
 80115c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ca:	898b      	ldrh	r3, [r1, #12]
 80115cc:	0718      	lsls	r0, r3, #28
 80115ce:	d550      	bpl.n	8011672 <__sfvwrite_r+0xbe>
 80115d0:	690b      	ldr	r3, [r1, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d04d      	beq.n	8011672 <__sfvwrite_r+0xbe>
 80115d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115da:	f8d9 8000 	ldr.w	r8, [r9]
 80115de:	f013 0702 	ands.w	r7, r3, #2
 80115e2:	d16b      	bne.n	80116bc <__sfvwrite_r+0x108>
 80115e4:	f013 0301 	ands.w	r3, r3, #1
 80115e8:	f000 809c 	beq.w	8011724 <__sfvwrite_r+0x170>
 80115ec:	4638      	mov	r0, r7
 80115ee:	46ba      	mov	sl, r7
 80115f0:	46bb      	mov	fp, r7
 80115f2:	f1bb 0f00 	cmp.w	fp, #0
 80115f6:	f000 8103 	beq.w	8011800 <__sfvwrite_r+0x24c>
 80115fa:	b950      	cbnz	r0, 8011612 <__sfvwrite_r+0x5e>
 80115fc:	465a      	mov	r2, fp
 80115fe:	210a      	movs	r1, #10
 8011600:	4650      	mov	r0, sl
 8011602:	f7ee fe15 	bl	8000230 <memchr>
 8011606:	2800      	cmp	r0, #0
 8011608:	f000 8100 	beq.w	801180c <__sfvwrite_r+0x258>
 801160c:	3001      	adds	r0, #1
 801160e:	eba0 070a 	sub.w	r7, r0, sl
 8011612:	6820      	ldr	r0, [r4, #0]
 8011614:	6921      	ldr	r1, [r4, #16]
 8011616:	68a5      	ldr	r5, [r4, #8]
 8011618:	6963      	ldr	r3, [r4, #20]
 801161a:	455f      	cmp	r7, fp
 801161c:	463a      	mov	r2, r7
 801161e:	bf28      	it	cs
 8011620:	465a      	movcs	r2, fp
 8011622:	4288      	cmp	r0, r1
 8011624:	f240 80f5 	bls.w	8011812 <__sfvwrite_r+0x25e>
 8011628:	441d      	add	r5, r3
 801162a:	42aa      	cmp	r2, r5
 801162c:	f340 80f1 	ble.w	8011812 <__sfvwrite_r+0x25e>
 8011630:	4651      	mov	r1, sl
 8011632:	462a      	mov	r2, r5
 8011634:	f000 f9c4 	bl	80119c0 <memmove>
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	442b      	add	r3, r5
 801163c:	6023      	str	r3, [r4, #0]
 801163e:	4621      	mov	r1, r4
 8011640:	4630      	mov	r0, r6
 8011642:	f7ff ff91 	bl	8011568 <_fflush_r>
 8011646:	2800      	cmp	r0, #0
 8011648:	d167      	bne.n	801171a <__sfvwrite_r+0x166>
 801164a:	1b7f      	subs	r7, r7, r5
 801164c:	f040 80f9 	bne.w	8011842 <__sfvwrite_r+0x28e>
 8011650:	4621      	mov	r1, r4
 8011652:	4630      	mov	r0, r6
 8011654:	f7ff ff88 	bl	8011568 <_fflush_r>
 8011658:	2800      	cmp	r0, #0
 801165a:	d15e      	bne.n	801171a <__sfvwrite_r+0x166>
 801165c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011660:	1b5b      	subs	r3, r3, r5
 8011662:	44aa      	add	sl, r5
 8011664:	ebab 0b05 	sub.w	fp, fp, r5
 8011668:	f8c9 3008 	str.w	r3, [r9, #8]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1c0      	bne.n	80115f2 <__sfvwrite_r+0x3e>
 8011670:	e7a7      	b.n	80115c2 <__sfvwrite_r+0xe>
 8011672:	4621      	mov	r1, r4
 8011674:	4630      	mov	r0, r6
 8011676:	f000 f94d 	bl	8011914 <__swsetup_r>
 801167a:	2800      	cmp	r0, #0
 801167c:	d0ab      	beq.n	80115d6 <__sfvwrite_r+0x22>
 801167e:	f04f 30ff 	mov.w	r0, #4294967295
 8011682:	e79f      	b.n	80115c4 <__sfvwrite_r+0x10>
 8011684:	e9d8 a500 	ldrd	sl, r5, [r8]
 8011688:	f108 0808 	add.w	r8, r8, #8
 801168c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011690:	69e1      	ldr	r1, [r4, #28]
 8011692:	2d00      	cmp	r5, #0
 8011694:	d0f6      	beq.n	8011684 <__sfvwrite_r+0xd0>
 8011696:	42bd      	cmp	r5, r7
 8011698:	462b      	mov	r3, r5
 801169a:	4652      	mov	r2, sl
 801169c:	bf28      	it	cs
 801169e:	463b      	movcs	r3, r7
 80116a0:	4630      	mov	r0, r6
 80116a2:	47d8      	blx	fp
 80116a4:	2800      	cmp	r0, #0
 80116a6:	dd38      	ble.n	801171a <__sfvwrite_r+0x166>
 80116a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80116ac:	1a1b      	subs	r3, r3, r0
 80116ae:	4482      	add	sl, r0
 80116b0:	1a2d      	subs	r5, r5, r0
 80116b2:	f8c9 3008 	str.w	r3, [r9, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1e8      	bne.n	801168c <__sfvwrite_r+0xd8>
 80116ba:	e782      	b.n	80115c2 <__sfvwrite_r+0xe>
 80116bc:	f04f 0a00 	mov.w	sl, #0
 80116c0:	4f61      	ldr	r7, [pc, #388]	@ (8011848 <__sfvwrite_r+0x294>)
 80116c2:	4655      	mov	r5, sl
 80116c4:	e7e2      	b.n	801168c <__sfvwrite_r+0xd8>
 80116c6:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80116ca:	f108 0808 	add.w	r8, r8, #8
 80116ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116d2:	6820      	ldr	r0, [r4, #0]
 80116d4:	68a2      	ldr	r2, [r4, #8]
 80116d6:	f1ba 0f00 	cmp.w	sl, #0
 80116da:	d0f4      	beq.n	80116c6 <__sfvwrite_r+0x112>
 80116dc:	0599      	lsls	r1, r3, #22
 80116de:	d563      	bpl.n	80117a8 <__sfvwrite_r+0x1f4>
 80116e0:	4552      	cmp	r2, sl
 80116e2:	d836      	bhi.n	8011752 <__sfvwrite_r+0x19e>
 80116e4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80116e8:	d033      	beq.n	8011752 <__sfvwrite_r+0x19e>
 80116ea:	6921      	ldr	r1, [r4, #16]
 80116ec:	6965      	ldr	r5, [r4, #20]
 80116ee:	eba0 0b01 	sub.w	fp, r0, r1
 80116f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116fa:	f10b 0201 	add.w	r2, fp, #1
 80116fe:	106d      	asrs	r5, r5, #1
 8011700:	4452      	add	r2, sl
 8011702:	4295      	cmp	r5, r2
 8011704:	bf38      	it	cc
 8011706:	4615      	movcc	r5, r2
 8011708:	055b      	lsls	r3, r3, #21
 801170a:	d53d      	bpl.n	8011788 <__sfvwrite_r+0x1d4>
 801170c:	4629      	mov	r1, r5
 801170e:	4630      	mov	r0, r6
 8011710:	f7fd fe00 	bl	800f314 <_malloc_r>
 8011714:	b948      	cbnz	r0, 801172a <__sfvwrite_r+0x176>
 8011716:	230c      	movs	r3, #12
 8011718:	6033      	str	r3, [r6, #0]
 801171a:	89a3      	ldrh	r3, [r4, #12]
 801171c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011720:	81a3      	strh	r3, [r4, #12]
 8011722:	e7ac      	b.n	801167e <__sfvwrite_r+0xca>
 8011724:	461f      	mov	r7, r3
 8011726:	469a      	mov	sl, r3
 8011728:	e7d1      	b.n	80116ce <__sfvwrite_r+0x11a>
 801172a:	465a      	mov	r2, fp
 801172c:	6921      	ldr	r1, [r4, #16]
 801172e:	9001      	str	r0, [sp, #4]
 8011730:	f7fe fb28 	bl	800fd84 <memcpy>
 8011734:	89a2      	ldrh	r2, [r4, #12]
 8011736:	9b01      	ldr	r3, [sp, #4]
 8011738:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801173c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011740:	81a2      	strh	r2, [r4, #12]
 8011742:	6123      	str	r3, [r4, #16]
 8011744:	6165      	str	r5, [r4, #20]
 8011746:	445b      	add	r3, fp
 8011748:	eba5 050b 	sub.w	r5, r5, fp
 801174c:	6023      	str	r3, [r4, #0]
 801174e:	4652      	mov	r2, sl
 8011750:	60a5      	str	r5, [r4, #8]
 8011752:	4552      	cmp	r2, sl
 8011754:	bf28      	it	cs
 8011756:	4652      	movcs	r2, sl
 8011758:	6820      	ldr	r0, [r4, #0]
 801175a:	9201      	str	r2, [sp, #4]
 801175c:	4639      	mov	r1, r7
 801175e:	f000 f92f 	bl	80119c0 <memmove>
 8011762:	68a3      	ldr	r3, [r4, #8]
 8011764:	9a01      	ldr	r2, [sp, #4]
 8011766:	1a9b      	subs	r3, r3, r2
 8011768:	60a3      	str	r3, [r4, #8]
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	4413      	add	r3, r2
 801176e:	4655      	mov	r5, sl
 8011770:	6023      	str	r3, [r4, #0]
 8011772:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011776:	1b5b      	subs	r3, r3, r5
 8011778:	442f      	add	r7, r5
 801177a:	ebaa 0a05 	sub.w	sl, sl, r5
 801177e:	f8c9 3008 	str.w	r3, [r9, #8]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1a3      	bne.n	80116ce <__sfvwrite_r+0x11a>
 8011786:	e71c      	b.n	80115c2 <__sfvwrite_r+0xe>
 8011788:	462a      	mov	r2, r5
 801178a:	4630      	mov	r0, r6
 801178c:	f001 fb76 	bl	8012e7c <_realloc_r>
 8011790:	4603      	mov	r3, r0
 8011792:	2800      	cmp	r0, #0
 8011794:	d1d5      	bne.n	8011742 <__sfvwrite_r+0x18e>
 8011796:	6921      	ldr	r1, [r4, #16]
 8011798:	4630      	mov	r0, r6
 801179a:	f7fe fb67 	bl	800fe6c <_free_r>
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80117a4:	81a3      	strh	r3, [r4, #12]
 80117a6:	e7b6      	b.n	8011716 <__sfvwrite_r+0x162>
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	4283      	cmp	r3, r0
 80117ac:	d302      	bcc.n	80117b4 <__sfvwrite_r+0x200>
 80117ae:	6961      	ldr	r1, [r4, #20]
 80117b0:	4551      	cmp	r1, sl
 80117b2:	d915      	bls.n	80117e0 <__sfvwrite_r+0x22c>
 80117b4:	4552      	cmp	r2, sl
 80117b6:	bf28      	it	cs
 80117b8:	4652      	movcs	r2, sl
 80117ba:	4639      	mov	r1, r7
 80117bc:	4615      	mov	r5, r2
 80117be:	f000 f8ff 	bl	80119c0 <memmove>
 80117c2:	68a3      	ldr	r3, [r4, #8]
 80117c4:	6822      	ldr	r2, [r4, #0]
 80117c6:	1b5b      	subs	r3, r3, r5
 80117c8:	442a      	add	r2, r5
 80117ca:	60a3      	str	r3, [r4, #8]
 80117cc:	6022      	str	r2, [r4, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1cf      	bne.n	8011772 <__sfvwrite_r+0x1be>
 80117d2:	4621      	mov	r1, r4
 80117d4:	4630      	mov	r0, r6
 80117d6:	f7ff fec7 	bl	8011568 <_fflush_r>
 80117da:	2800      	cmp	r0, #0
 80117dc:	d0c9      	beq.n	8011772 <__sfvwrite_r+0x1be>
 80117de:	e79c      	b.n	801171a <__sfvwrite_r+0x166>
 80117e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80117e4:	4553      	cmp	r3, sl
 80117e6:	bf28      	it	cs
 80117e8:	4653      	movcs	r3, sl
 80117ea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80117ec:	fb93 f3f1 	sdiv	r3, r3, r1
 80117f0:	463a      	mov	r2, r7
 80117f2:	434b      	muls	r3, r1
 80117f4:	4630      	mov	r0, r6
 80117f6:	69e1      	ldr	r1, [r4, #28]
 80117f8:	47a8      	blx	r5
 80117fa:	1e05      	subs	r5, r0, #0
 80117fc:	dcb9      	bgt.n	8011772 <__sfvwrite_r+0x1be>
 80117fe:	e78c      	b.n	801171a <__sfvwrite_r+0x166>
 8011800:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8011804:	2000      	movs	r0, #0
 8011806:	f108 0808 	add.w	r8, r8, #8
 801180a:	e6f2      	b.n	80115f2 <__sfvwrite_r+0x3e>
 801180c:	f10b 0701 	add.w	r7, fp, #1
 8011810:	e6ff      	b.n	8011612 <__sfvwrite_r+0x5e>
 8011812:	4293      	cmp	r3, r2
 8011814:	dc08      	bgt.n	8011828 <__sfvwrite_r+0x274>
 8011816:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011818:	69e1      	ldr	r1, [r4, #28]
 801181a:	4652      	mov	r2, sl
 801181c:	4630      	mov	r0, r6
 801181e:	47a8      	blx	r5
 8011820:	1e05      	subs	r5, r0, #0
 8011822:	f73f af12 	bgt.w	801164a <__sfvwrite_r+0x96>
 8011826:	e778      	b.n	801171a <__sfvwrite_r+0x166>
 8011828:	4651      	mov	r1, sl
 801182a:	9201      	str	r2, [sp, #4]
 801182c:	f000 f8c8 	bl	80119c0 <memmove>
 8011830:	9a01      	ldr	r2, [sp, #4]
 8011832:	68a3      	ldr	r3, [r4, #8]
 8011834:	1a9b      	subs	r3, r3, r2
 8011836:	60a3      	str	r3, [r4, #8]
 8011838:	6823      	ldr	r3, [r4, #0]
 801183a:	4413      	add	r3, r2
 801183c:	6023      	str	r3, [r4, #0]
 801183e:	4615      	mov	r5, r2
 8011840:	e703      	b.n	801164a <__sfvwrite_r+0x96>
 8011842:	2001      	movs	r0, #1
 8011844:	e70a      	b.n	801165c <__sfvwrite_r+0xa8>
 8011846:	bf00      	nop
 8011848:	7ffffc00 	.word	0x7ffffc00

0801184c <__swhatbuf_r>:
 801184c:	b570      	push	{r4, r5, r6, lr}
 801184e:	460c      	mov	r4, r1
 8011850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011854:	2900      	cmp	r1, #0
 8011856:	b096      	sub	sp, #88	@ 0x58
 8011858:	4615      	mov	r5, r2
 801185a:	461e      	mov	r6, r3
 801185c:	da07      	bge.n	801186e <__swhatbuf_r+0x22>
 801185e:	89a1      	ldrh	r1, [r4, #12]
 8011860:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8011864:	d117      	bne.n	8011896 <__swhatbuf_r+0x4a>
 8011866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801186a:	4608      	mov	r0, r1
 801186c:	e00f      	b.n	801188e <__swhatbuf_r+0x42>
 801186e:	466a      	mov	r2, sp
 8011870:	f000 f8de 	bl	8011a30 <_fstat_r>
 8011874:	2800      	cmp	r0, #0
 8011876:	dbf2      	blt.n	801185e <__swhatbuf_r+0x12>
 8011878:	9901      	ldr	r1, [sp, #4]
 801187a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801187e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011882:	4259      	negs	r1, r3
 8011884:	4159      	adcs	r1, r3
 8011886:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801188a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801188e:	6031      	str	r1, [r6, #0]
 8011890:	602b      	str	r3, [r5, #0]
 8011892:	b016      	add	sp, #88	@ 0x58
 8011894:	bd70      	pop	{r4, r5, r6, pc}
 8011896:	2100      	movs	r1, #0
 8011898:	2340      	movs	r3, #64	@ 0x40
 801189a:	e7e6      	b.n	801186a <__swhatbuf_r+0x1e>

0801189c <__smakebuf_r>:
 801189c:	898b      	ldrh	r3, [r1, #12]
 801189e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118a0:	079d      	lsls	r5, r3, #30
 80118a2:	4606      	mov	r6, r0
 80118a4:	460c      	mov	r4, r1
 80118a6:	d507      	bpl.n	80118b8 <__smakebuf_r+0x1c>
 80118a8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80118ac:	6023      	str	r3, [r4, #0]
 80118ae:	6123      	str	r3, [r4, #16]
 80118b0:	2301      	movs	r3, #1
 80118b2:	6163      	str	r3, [r4, #20]
 80118b4:	b003      	add	sp, #12
 80118b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b8:	ab01      	add	r3, sp, #4
 80118ba:	466a      	mov	r2, sp
 80118bc:	f7ff ffc6 	bl	801184c <__swhatbuf_r>
 80118c0:	9f00      	ldr	r7, [sp, #0]
 80118c2:	4605      	mov	r5, r0
 80118c4:	4639      	mov	r1, r7
 80118c6:	4630      	mov	r0, r6
 80118c8:	f7fd fd24 	bl	800f314 <_malloc_r>
 80118cc:	b948      	cbnz	r0, 80118e2 <__smakebuf_r+0x46>
 80118ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118d2:	059a      	lsls	r2, r3, #22
 80118d4:	d4ee      	bmi.n	80118b4 <__smakebuf_r+0x18>
 80118d6:	f023 0303 	bic.w	r3, r3, #3
 80118da:	f043 0302 	orr.w	r3, r3, #2
 80118de:	81a3      	strh	r3, [r4, #12]
 80118e0:	e7e2      	b.n	80118a8 <__smakebuf_r+0xc>
 80118e2:	89a3      	ldrh	r3, [r4, #12]
 80118e4:	6020      	str	r0, [r4, #0]
 80118e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118ea:	81a3      	strh	r3, [r4, #12]
 80118ec:	9b01      	ldr	r3, [sp, #4]
 80118ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80118f2:	b15b      	cbz	r3, 801190c <__smakebuf_r+0x70>
 80118f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118f8:	4630      	mov	r0, r6
 80118fa:	f000 f8ab 	bl	8011a54 <_isatty_r>
 80118fe:	b128      	cbz	r0, 801190c <__smakebuf_r+0x70>
 8011900:	89a3      	ldrh	r3, [r4, #12]
 8011902:	f023 0303 	bic.w	r3, r3, #3
 8011906:	f043 0301 	orr.w	r3, r3, #1
 801190a:	81a3      	strh	r3, [r4, #12]
 801190c:	89a3      	ldrh	r3, [r4, #12]
 801190e:	431d      	orrs	r5, r3
 8011910:	81a5      	strh	r5, [r4, #12]
 8011912:	e7cf      	b.n	80118b4 <__smakebuf_r+0x18>

08011914 <__swsetup_r>:
 8011914:	b538      	push	{r3, r4, r5, lr}
 8011916:	4b29      	ldr	r3, [pc, #164]	@ (80119bc <__swsetup_r+0xa8>)
 8011918:	4605      	mov	r5, r0
 801191a:	6818      	ldr	r0, [r3, #0]
 801191c:	460c      	mov	r4, r1
 801191e:	b118      	cbz	r0, 8011928 <__swsetup_r+0x14>
 8011920:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011922:	b90b      	cbnz	r3, 8011928 <__swsetup_r+0x14>
 8011924:	f7fd ffc8 	bl	800f8b8 <__sinit>
 8011928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801192c:	0719      	lsls	r1, r3, #28
 801192e:	d422      	bmi.n	8011976 <__swsetup_r+0x62>
 8011930:	06da      	lsls	r2, r3, #27
 8011932:	d407      	bmi.n	8011944 <__swsetup_r+0x30>
 8011934:	2209      	movs	r2, #9
 8011936:	602a      	str	r2, [r5, #0]
 8011938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193c:	81a3      	strh	r3, [r4, #12]
 801193e:	f04f 30ff 	mov.w	r0, #4294967295
 8011942:	e033      	b.n	80119ac <__swsetup_r+0x98>
 8011944:	0758      	lsls	r0, r3, #29
 8011946:	d512      	bpl.n	801196e <__swsetup_r+0x5a>
 8011948:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801194a:	b141      	cbz	r1, 801195e <__swsetup_r+0x4a>
 801194c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011950:	4299      	cmp	r1, r3
 8011952:	d002      	beq.n	801195a <__swsetup_r+0x46>
 8011954:	4628      	mov	r0, r5
 8011956:	f7fe fa89 	bl	800fe6c <_free_r>
 801195a:	2300      	movs	r3, #0
 801195c:	6323      	str	r3, [r4, #48]	@ 0x30
 801195e:	89a3      	ldrh	r3, [r4, #12]
 8011960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011964:	81a3      	strh	r3, [r4, #12]
 8011966:	2300      	movs	r3, #0
 8011968:	6063      	str	r3, [r4, #4]
 801196a:	6923      	ldr	r3, [r4, #16]
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	f043 0308 	orr.w	r3, r3, #8
 8011974:	81a3      	strh	r3, [r4, #12]
 8011976:	6923      	ldr	r3, [r4, #16]
 8011978:	b94b      	cbnz	r3, 801198e <__swsetup_r+0x7a>
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011984:	d003      	beq.n	801198e <__swsetup_r+0x7a>
 8011986:	4621      	mov	r1, r4
 8011988:	4628      	mov	r0, r5
 801198a:	f7ff ff87 	bl	801189c <__smakebuf_r>
 801198e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011992:	f013 0201 	ands.w	r2, r3, #1
 8011996:	d00a      	beq.n	80119ae <__swsetup_r+0x9a>
 8011998:	2200      	movs	r2, #0
 801199a:	60a2      	str	r2, [r4, #8]
 801199c:	6962      	ldr	r2, [r4, #20]
 801199e:	4252      	negs	r2, r2
 80119a0:	61a2      	str	r2, [r4, #24]
 80119a2:	6922      	ldr	r2, [r4, #16]
 80119a4:	b942      	cbnz	r2, 80119b8 <__swsetup_r+0xa4>
 80119a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80119aa:	d1c5      	bne.n	8011938 <__swsetup_r+0x24>
 80119ac:	bd38      	pop	{r3, r4, r5, pc}
 80119ae:	0799      	lsls	r1, r3, #30
 80119b0:	bf58      	it	pl
 80119b2:	6962      	ldrpl	r2, [r4, #20]
 80119b4:	60a2      	str	r2, [r4, #8]
 80119b6:	e7f4      	b.n	80119a2 <__swsetup_r+0x8e>
 80119b8:	2000      	movs	r0, #0
 80119ba:	e7f7      	b.n	80119ac <__swsetup_r+0x98>
 80119bc:	20000434 	.word	0x20000434

080119c0 <memmove>:
 80119c0:	4288      	cmp	r0, r1
 80119c2:	b510      	push	{r4, lr}
 80119c4:	eb01 0402 	add.w	r4, r1, r2
 80119c8:	d902      	bls.n	80119d0 <memmove+0x10>
 80119ca:	4284      	cmp	r4, r0
 80119cc:	4623      	mov	r3, r4
 80119ce:	d807      	bhi.n	80119e0 <memmove+0x20>
 80119d0:	1e43      	subs	r3, r0, #1
 80119d2:	42a1      	cmp	r1, r4
 80119d4:	d008      	beq.n	80119e8 <memmove+0x28>
 80119d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119de:	e7f8      	b.n	80119d2 <memmove+0x12>
 80119e0:	4402      	add	r2, r0
 80119e2:	4601      	mov	r1, r0
 80119e4:	428a      	cmp	r2, r1
 80119e6:	d100      	bne.n	80119ea <memmove+0x2a>
 80119e8:	bd10      	pop	{r4, pc}
 80119ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119f2:	e7f7      	b.n	80119e4 <memmove+0x24>

080119f4 <strncpy>:
 80119f4:	b510      	push	{r4, lr}
 80119f6:	3901      	subs	r1, #1
 80119f8:	4603      	mov	r3, r0
 80119fa:	b132      	cbz	r2, 8011a0a <strncpy+0x16>
 80119fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a00:	f803 4b01 	strb.w	r4, [r3], #1
 8011a04:	3a01      	subs	r2, #1
 8011a06:	2c00      	cmp	r4, #0
 8011a08:	d1f7      	bne.n	80119fa <strncpy+0x6>
 8011a0a:	441a      	add	r2, r3
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d100      	bne.n	8011a14 <strncpy+0x20>
 8011a12:	bd10      	pop	{r4, pc}
 8011a14:	f803 1b01 	strb.w	r1, [r3], #1
 8011a18:	e7f9      	b.n	8011a0e <strncpy+0x1a>
	...

08011a1c <__locale_mb_cur_max>:
 8011a1c:	4b01      	ldr	r3, [pc, #4]	@ (8011a24 <__locale_mb_cur_max+0x8>)
 8011a1e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8011a22:	4770      	bx	lr
 8011a24:	2000055c 	.word	0x2000055c

08011a28 <_localeconv_r>:
 8011a28:	4800      	ldr	r0, [pc, #0]	@ (8011a2c <_localeconv_r+0x4>)
 8011a2a:	4770      	bx	lr
 8011a2c:	2000064c 	.word	0x2000064c

08011a30 <_fstat_r>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	4d07      	ldr	r5, [pc, #28]	@ (8011a50 <_fstat_r+0x20>)
 8011a34:	2300      	movs	r3, #0
 8011a36:	4604      	mov	r4, r0
 8011a38:	4608      	mov	r0, r1
 8011a3a:	4611      	mov	r1, r2
 8011a3c:	602b      	str	r3, [r5, #0]
 8011a3e:	f7f1 fa0b 	bl	8002e58 <_fstat>
 8011a42:	1c43      	adds	r3, r0, #1
 8011a44:	d102      	bne.n	8011a4c <_fstat_r+0x1c>
 8011a46:	682b      	ldr	r3, [r5, #0]
 8011a48:	b103      	cbz	r3, 8011a4c <_fstat_r+0x1c>
 8011a4a:	6023      	str	r3, [r4, #0]
 8011a4c:	bd38      	pop	{r3, r4, r5, pc}
 8011a4e:	bf00      	nop
 8011a50:	200038a0 	.word	0x200038a0

08011a54 <_isatty_r>:
 8011a54:	b538      	push	{r3, r4, r5, lr}
 8011a56:	4d06      	ldr	r5, [pc, #24]	@ (8011a70 <_isatty_r+0x1c>)
 8011a58:	2300      	movs	r3, #0
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	4608      	mov	r0, r1
 8011a5e:	602b      	str	r3, [r5, #0]
 8011a60:	f7f1 fa0a 	bl	8002e78 <_isatty>
 8011a64:	1c43      	adds	r3, r0, #1
 8011a66:	d102      	bne.n	8011a6e <_isatty_r+0x1a>
 8011a68:	682b      	ldr	r3, [r5, #0]
 8011a6a:	b103      	cbz	r3, 8011a6e <_isatty_r+0x1a>
 8011a6c:	6023      	str	r3, [r4, #0]
 8011a6e:	bd38      	pop	{r3, r4, r5, pc}
 8011a70:	200038a0 	.word	0x200038a0

08011a74 <__libc_fini_array>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	4d07      	ldr	r5, [pc, #28]	@ (8011a94 <__libc_fini_array+0x20>)
 8011a78:	4c07      	ldr	r4, [pc, #28]	@ (8011a98 <__libc_fini_array+0x24>)
 8011a7a:	1b64      	subs	r4, r4, r5
 8011a7c:	10a4      	asrs	r4, r4, #2
 8011a7e:	b91c      	cbnz	r4, 8011a88 <__libc_fini_array+0x14>
 8011a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a84:	f003 bada 	b.w	801503c <_fini>
 8011a88:	3c01      	subs	r4, #1
 8011a8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011a8e:	4798      	blx	r3
 8011a90:	e7f5      	b.n	8011a7e <__libc_fini_array+0xa>
 8011a92:	bf00      	nop
 8011a94:	08015728 	.word	0x08015728
 8011a98:	0801572c 	.word	0x0801572c

08011a9c <frexp>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	ec55 4b10 	vmov	r4, r5, d0
 8011aa4:	6001      	str	r1, [r0, #0]
 8011aa6:	4915      	ldr	r1, [pc, #84]	@ (8011afc <frexp+0x60>)
 8011aa8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011aac:	428a      	cmp	r2, r1
 8011aae:	4606      	mov	r6, r0
 8011ab0:	462b      	mov	r3, r5
 8011ab2:	d820      	bhi.n	8011af6 <frexp+0x5a>
 8011ab4:	4621      	mov	r1, r4
 8011ab6:	4311      	orrs	r1, r2
 8011ab8:	d01d      	beq.n	8011af6 <frexp+0x5a>
 8011aba:	4911      	ldr	r1, [pc, #68]	@ (8011b00 <frexp+0x64>)
 8011abc:	4029      	ands	r1, r5
 8011abe:	b961      	cbnz	r1, 8011ada <frexp+0x3e>
 8011ac0:	4b10      	ldr	r3, [pc, #64]	@ (8011b04 <frexp+0x68>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	f7ee fdbe 	bl	8000648 <__aeabi_dmul>
 8011acc:	460b      	mov	r3, r1
 8011ace:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8011ad2:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	6031      	str	r1, [r6, #0]
 8011ada:	6831      	ldr	r1, [r6, #0]
 8011adc:	1512      	asrs	r2, r2, #20
 8011ade:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ae2:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8011ae6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011aea:	4411      	add	r1, r2
 8011aec:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8011af0:	6031      	str	r1, [r6, #0]
 8011af2:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8011af6:	ec45 4b10 	vmov	d0, r4, r5
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	7fefffff 	.word	0x7fefffff
 8011b00:	7ff00000 	.word	0x7ff00000
 8011b04:	43500000 	.word	0x43500000

08011b08 <__register_exitproc>:
 8011b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b0c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8011b84 <__register_exitproc+0x7c>
 8011b10:	4606      	mov	r6, r0
 8011b12:	f8da 0000 	ldr.w	r0, [sl]
 8011b16:	4698      	mov	r8, r3
 8011b18:	460f      	mov	r7, r1
 8011b1a:	4691      	mov	r9, r2
 8011b1c:	f7fe f924 	bl	800fd68 <__retarget_lock_acquire_recursive>
 8011b20:	4b16      	ldr	r3, [pc, #88]	@ (8011b7c <__register_exitproc+0x74>)
 8011b22:	681c      	ldr	r4, [r3, #0]
 8011b24:	b90c      	cbnz	r4, 8011b2a <__register_exitproc+0x22>
 8011b26:	4c16      	ldr	r4, [pc, #88]	@ (8011b80 <__register_exitproc+0x78>)
 8011b28:	601c      	str	r4, [r3, #0]
 8011b2a:	6865      	ldr	r5, [r4, #4]
 8011b2c:	f8da 0000 	ldr.w	r0, [sl]
 8011b30:	2d1f      	cmp	r5, #31
 8011b32:	dd05      	ble.n	8011b40 <__register_exitproc+0x38>
 8011b34:	f7fe f919 	bl	800fd6a <__retarget_lock_release_recursive>
 8011b38:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b40:	b19e      	cbz	r6, 8011b6a <__register_exitproc+0x62>
 8011b42:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8011b46:	2201      	movs	r2, #1
 8011b48:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8011b4c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8011b50:	40aa      	lsls	r2, r5
 8011b52:	4313      	orrs	r3, r2
 8011b54:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8011b58:	2e02      	cmp	r6, #2
 8011b5a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8011b5e:	bf02      	ittt	eq
 8011b60:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8011b64:	4313      	orreq	r3, r2
 8011b66:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8011b6a:	1c6b      	adds	r3, r5, #1
 8011b6c:	3502      	adds	r5, #2
 8011b6e:	6063      	str	r3, [r4, #4]
 8011b70:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8011b74:	f7fe f8f9 	bl	800fd6a <__retarget_lock_release_recursive>
 8011b78:	2000      	movs	r0, #0
 8011b7a:	e7df      	b.n	8011b3c <__register_exitproc+0x34>
 8011b7c:	200038a8 	.word	0x200038a8
 8011b80:	200038ac 	.word	0x200038ac
 8011b84:	20000558 	.word	0x20000558

08011b88 <quorem>:
 8011b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b8c:	6903      	ldr	r3, [r0, #16]
 8011b8e:	690c      	ldr	r4, [r1, #16]
 8011b90:	42a3      	cmp	r3, r4
 8011b92:	4607      	mov	r7, r0
 8011b94:	db7e      	blt.n	8011c94 <quorem+0x10c>
 8011b96:	3c01      	subs	r4, #1
 8011b98:	f101 0814 	add.w	r8, r1, #20
 8011b9c:	00a3      	lsls	r3, r4, #2
 8011b9e:	f100 0514 	add.w	r5, r0, #20
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ba8:	9301      	str	r3, [sp, #4]
 8011baa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011bba:	fbb2 f6f3 	udiv	r6, r2, r3
 8011bbe:	d32e      	bcc.n	8011c1e <quorem+0x96>
 8011bc0:	f04f 0a00 	mov.w	sl, #0
 8011bc4:	46c4      	mov	ip, r8
 8011bc6:	46ae      	mov	lr, r5
 8011bc8:	46d3      	mov	fp, sl
 8011bca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011bce:	b298      	uxth	r0, r3
 8011bd0:	fb06 a000 	mla	r0, r6, r0, sl
 8011bd4:	0c02      	lsrs	r2, r0, #16
 8011bd6:	0c1b      	lsrs	r3, r3, #16
 8011bd8:	fb06 2303 	mla	r3, r6, r3, r2
 8011bdc:	f8de 2000 	ldr.w	r2, [lr]
 8011be0:	b280      	uxth	r0, r0
 8011be2:	b292      	uxth	r2, r2
 8011be4:	1a12      	subs	r2, r2, r0
 8011be6:	445a      	add	r2, fp
 8011be8:	f8de 0000 	ldr.w	r0, [lr]
 8011bec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011bf6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011bfa:	b292      	uxth	r2, r2
 8011bfc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011c00:	45e1      	cmp	r9, ip
 8011c02:	f84e 2b04 	str.w	r2, [lr], #4
 8011c06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011c0a:	d2de      	bcs.n	8011bca <quorem+0x42>
 8011c0c:	9b00      	ldr	r3, [sp, #0]
 8011c0e:	58eb      	ldr	r3, [r5, r3]
 8011c10:	b92b      	cbnz	r3, 8011c1e <quorem+0x96>
 8011c12:	9b01      	ldr	r3, [sp, #4]
 8011c14:	3b04      	subs	r3, #4
 8011c16:	429d      	cmp	r5, r3
 8011c18:	461a      	mov	r2, r3
 8011c1a:	d32f      	bcc.n	8011c7c <quorem+0xf4>
 8011c1c:	613c      	str	r4, [r7, #16]
 8011c1e:	4638      	mov	r0, r7
 8011c20:	f001 f824 	bl	8012c6c <__mcmp>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	db25      	blt.n	8011c74 <quorem+0xec>
 8011c28:	4629      	mov	r1, r5
 8011c2a:	2000      	movs	r0, #0
 8011c2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011c30:	f8d1 c000 	ldr.w	ip, [r1]
 8011c34:	fa1f fe82 	uxth.w	lr, r2
 8011c38:	fa1f f38c 	uxth.w	r3, ip
 8011c3c:	eba3 030e 	sub.w	r3, r3, lr
 8011c40:	4403      	add	r3, r0
 8011c42:	0c12      	lsrs	r2, r2, #16
 8011c44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011c48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c52:	45c1      	cmp	r9, r8
 8011c54:	f841 3b04 	str.w	r3, [r1], #4
 8011c58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011c5c:	d2e6      	bcs.n	8011c2c <quorem+0xa4>
 8011c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c66:	b922      	cbnz	r2, 8011c72 <quorem+0xea>
 8011c68:	3b04      	subs	r3, #4
 8011c6a:	429d      	cmp	r5, r3
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	d30b      	bcc.n	8011c88 <quorem+0x100>
 8011c70:	613c      	str	r4, [r7, #16]
 8011c72:	3601      	adds	r6, #1
 8011c74:	4630      	mov	r0, r6
 8011c76:	b003      	add	sp, #12
 8011c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c7c:	6812      	ldr	r2, [r2, #0]
 8011c7e:	3b04      	subs	r3, #4
 8011c80:	2a00      	cmp	r2, #0
 8011c82:	d1cb      	bne.n	8011c1c <quorem+0x94>
 8011c84:	3c01      	subs	r4, #1
 8011c86:	e7c6      	b.n	8011c16 <quorem+0x8e>
 8011c88:	6812      	ldr	r2, [r2, #0]
 8011c8a:	3b04      	subs	r3, #4
 8011c8c:	2a00      	cmp	r2, #0
 8011c8e:	d1ef      	bne.n	8011c70 <quorem+0xe8>
 8011c90:	3c01      	subs	r4, #1
 8011c92:	e7ea      	b.n	8011c6a <quorem+0xe2>
 8011c94:	2000      	movs	r0, #0
 8011c96:	e7ee      	b.n	8011c76 <quorem+0xee>

08011c98 <_dtoa_r>:
 8011c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9c:	b099      	sub	sp, #100	@ 0x64
 8011c9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011ca2:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ca4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8011ca6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011ca8:	920e      	str	r2, [sp, #56]	@ 0x38
 8011caa:	ec55 4b10 	vmov	r4, r5, d0
 8011cae:	4683      	mov	fp, r0
 8011cb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011cb2:	b149      	cbz	r1, 8011cc8 <_dtoa_r+0x30>
 8011cb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011cb6:	604a      	str	r2, [r1, #4]
 8011cb8:	2301      	movs	r3, #1
 8011cba:	4093      	lsls	r3, r2
 8011cbc:	608b      	str	r3, [r1, #8]
 8011cbe:	f000 fdce 	bl	801285e <_Bfree>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8011cc8:	1e2b      	subs	r3, r5, #0
 8011cca:	bfb9      	ittee	lt
 8011ccc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011cd0:	9303      	strlt	r3, [sp, #12]
 8011cd2:	2300      	movge	r3, #0
 8011cd4:	6033      	strge	r3, [r6, #0]
 8011cd6:	9f03      	ldr	r7, [sp, #12]
 8011cd8:	4b97      	ldr	r3, [pc, #604]	@ (8011f38 <_dtoa_r+0x2a0>)
 8011cda:	bfbc      	itt	lt
 8011cdc:	2201      	movlt	r2, #1
 8011cde:	6032      	strlt	r2, [r6, #0]
 8011ce0:	43bb      	bics	r3, r7
 8011ce2:	d114      	bne.n	8011d0e <_dtoa_r+0x76>
 8011ce4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011ce6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011cea:	6013      	str	r3, [r2, #0]
 8011cec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011cf0:	4323      	orrs	r3, r4
 8011cf2:	f000 854c 	beq.w	801278e <_dtoa_r+0xaf6>
 8011cf6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011cf8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011f50 <_dtoa_r+0x2b8>
 8011cfc:	b11b      	cbz	r3, 8011d06 <_dtoa_r+0x6e>
 8011cfe:	f10a 0303 	add.w	r3, sl, #3
 8011d02:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	4650      	mov	r0, sl
 8011d08:	b019      	add	sp, #100	@ 0x64
 8011d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d12:	2200      	movs	r2, #0
 8011d14:	ec51 0b17 	vmov	r0, r1, d7
 8011d18:	2300      	movs	r3, #0
 8011d1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011d1e:	f7ee fefb 	bl	8000b18 <__aeabi_dcmpeq>
 8011d22:	4680      	mov	r8, r0
 8011d24:	b150      	cbz	r0, 8011d3c <_dtoa_r+0xa4>
 8011d26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011d28:	2301      	movs	r3, #1
 8011d2a:	6013      	str	r3, [r2, #0]
 8011d2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d2e:	b113      	cbz	r3, 8011d36 <_dtoa_r+0x9e>
 8011d30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011d32:	4b82      	ldr	r3, [pc, #520]	@ (8011f3c <_dtoa_r+0x2a4>)
 8011d34:	6013      	str	r3, [r2, #0]
 8011d36:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8011f54 <_dtoa_r+0x2bc>
 8011d3a:	e7e4      	b.n	8011d06 <_dtoa_r+0x6e>
 8011d3c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011d40:	aa16      	add	r2, sp, #88	@ 0x58
 8011d42:	a917      	add	r1, sp, #92	@ 0x5c
 8011d44:	4658      	mov	r0, fp
 8011d46:	f001 f841 	bl	8012dcc <__d2b>
 8011d4a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011d4e:	4681      	mov	r9, r0
 8011d50:	2e00      	cmp	r6, #0
 8011d52:	d077      	beq.n	8011e44 <_dtoa_r+0x1ac>
 8011d54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d56:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d62:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011d66:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011d6a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011d6e:	4619      	mov	r1, r3
 8011d70:	2200      	movs	r2, #0
 8011d72:	4b73      	ldr	r3, [pc, #460]	@ (8011f40 <_dtoa_r+0x2a8>)
 8011d74:	f7ee fab0 	bl	80002d8 <__aeabi_dsub>
 8011d78:	a369      	add	r3, pc, #420	@ (adr r3, 8011f20 <_dtoa_r+0x288>)
 8011d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7e:	f7ee fc63 	bl	8000648 <__aeabi_dmul>
 8011d82:	a369      	add	r3, pc, #420	@ (adr r3, 8011f28 <_dtoa_r+0x290>)
 8011d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d88:	f7ee faa8 	bl	80002dc <__adddf3>
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	4630      	mov	r0, r6
 8011d90:	460d      	mov	r5, r1
 8011d92:	f7ee fbef 	bl	8000574 <__aeabi_i2d>
 8011d96:	a366      	add	r3, pc, #408	@ (adr r3, 8011f30 <_dtoa_r+0x298>)
 8011d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9c:	f7ee fc54 	bl	8000648 <__aeabi_dmul>
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4620      	mov	r0, r4
 8011da6:	4629      	mov	r1, r5
 8011da8:	f7ee fa98 	bl	80002dc <__adddf3>
 8011dac:	4604      	mov	r4, r0
 8011dae:	460d      	mov	r5, r1
 8011db0:	f7ee fefa 	bl	8000ba8 <__aeabi_d2iz>
 8011db4:	2200      	movs	r2, #0
 8011db6:	4607      	mov	r7, r0
 8011db8:	2300      	movs	r3, #0
 8011dba:	4620      	mov	r0, r4
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	f7ee feb5 	bl	8000b2c <__aeabi_dcmplt>
 8011dc2:	b140      	cbz	r0, 8011dd6 <_dtoa_r+0x13e>
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	f7ee fbd5 	bl	8000574 <__aeabi_i2d>
 8011dca:	4622      	mov	r2, r4
 8011dcc:	462b      	mov	r3, r5
 8011dce:	f7ee fea3 	bl	8000b18 <__aeabi_dcmpeq>
 8011dd2:	b900      	cbnz	r0, 8011dd6 <_dtoa_r+0x13e>
 8011dd4:	3f01      	subs	r7, #1
 8011dd6:	2f16      	cmp	r7, #22
 8011dd8:	d851      	bhi.n	8011e7e <_dtoa_r+0x1e6>
 8011dda:	4b5a      	ldr	r3, [pc, #360]	@ (8011f44 <_dtoa_r+0x2ac>)
 8011ddc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011de8:	f7ee fea0 	bl	8000b2c <__aeabi_dcmplt>
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d048      	beq.n	8011e82 <_dtoa_r+0x1ea>
 8011df0:	3f01      	subs	r7, #1
 8011df2:	2300      	movs	r3, #0
 8011df4:	9312      	str	r3, [sp, #72]	@ 0x48
 8011df6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011df8:	1b9b      	subs	r3, r3, r6
 8011dfa:	1e5a      	subs	r2, r3, #1
 8011dfc:	bf44      	itt	mi
 8011dfe:	f1c3 0801 	rsbmi	r8, r3, #1
 8011e02:	2300      	movmi	r3, #0
 8011e04:	9208      	str	r2, [sp, #32]
 8011e06:	bf54      	ite	pl
 8011e08:	f04f 0800 	movpl.w	r8, #0
 8011e0c:	9308      	strmi	r3, [sp, #32]
 8011e0e:	2f00      	cmp	r7, #0
 8011e10:	db39      	blt.n	8011e86 <_dtoa_r+0x1ee>
 8011e12:	9b08      	ldr	r3, [sp, #32]
 8011e14:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011e16:	443b      	add	r3, r7
 8011e18:	9308      	str	r3, [sp, #32]
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e20:	2b09      	cmp	r3, #9
 8011e22:	d865      	bhi.n	8011ef0 <_dtoa_r+0x258>
 8011e24:	2b05      	cmp	r3, #5
 8011e26:	bfc4      	itt	gt
 8011e28:	3b04      	subgt	r3, #4
 8011e2a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e2e:	f1a3 0302 	sub.w	r3, r3, #2
 8011e32:	bfcc      	ite	gt
 8011e34:	2400      	movgt	r4, #0
 8011e36:	2401      	movle	r4, #1
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	d864      	bhi.n	8011f06 <_dtoa_r+0x26e>
 8011e3c:	e8df f003 	tbb	[pc, r3]
 8011e40:	5635372a 	.word	0x5635372a
 8011e44:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011e48:	441e      	add	r6, r3
 8011e4a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011e4e:	2b20      	cmp	r3, #32
 8011e50:	bfc1      	itttt	gt
 8011e52:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011e56:	409f      	lslgt	r7, r3
 8011e58:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011e5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011e60:	bfd6      	itet	le
 8011e62:	f1c3 0320 	rsble	r3, r3, #32
 8011e66:	ea47 0003 	orrgt.w	r0, r7, r3
 8011e6a:	fa04 f003 	lslle.w	r0, r4, r3
 8011e6e:	f7ee fb71 	bl	8000554 <__aeabi_ui2d>
 8011e72:	2201      	movs	r2, #1
 8011e74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011e78:	3e01      	subs	r6, #1
 8011e7a:	9214      	str	r2, [sp, #80]	@ 0x50
 8011e7c:	e777      	b.n	8011d6e <_dtoa_r+0xd6>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e7b8      	b.n	8011df4 <_dtoa_r+0x15c>
 8011e82:	9012      	str	r0, [sp, #72]	@ 0x48
 8011e84:	e7b7      	b.n	8011df6 <_dtoa_r+0x15e>
 8011e86:	427b      	negs	r3, r7
 8011e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	eba8 0807 	sub.w	r8, r8, r7
 8011e90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e92:	e7c4      	b.n	8011e1e <_dtoa_r+0x186>
 8011e94:	2300      	movs	r3, #0
 8011e96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	dc36      	bgt.n	8011f0c <_dtoa_r+0x274>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	9300      	str	r3, [sp, #0]
 8011ea2:	9307      	str	r3, [sp, #28]
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	920e      	str	r2, [sp, #56]	@ 0x38
 8011ea8:	e00b      	b.n	8011ec2 <_dtoa_r+0x22a>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e7f3      	b.n	8011e96 <_dtoa_r+0x1fe>
 8011eae:	2300      	movs	r3, #0
 8011eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011eb4:	18fb      	adds	r3, r7, r3
 8011eb6:	9300      	str	r3, [sp, #0]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	9307      	str	r3, [sp, #28]
 8011ebe:	bfb8      	it	lt
 8011ec0:	2301      	movlt	r3, #1
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	2204      	movs	r2, #4
 8011ec6:	f102 0014 	add.w	r0, r2, #20
 8011eca:	4298      	cmp	r0, r3
 8011ecc:	d922      	bls.n	8011f14 <_dtoa_r+0x27c>
 8011ece:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8011ed2:	4658      	mov	r0, fp
 8011ed4:	f000 fc9e 	bl	8012814 <_Balloc>
 8011ed8:	4682      	mov	sl, r0
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d13c      	bne.n	8011f58 <_dtoa_r+0x2c0>
 8011ede:	4b1a      	ldr	r3, [pc, #104]	@ (8011f48 <_dtoa_r+0x2b0>)
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	f240 11af 	movw	r1, #431	@ 0x1af
 8011ee6:	4819      	ldr	r0, [pc, #100]	@ (8011f4c <_dtoa_r+0x2b4>)
 8011ee8:	f001 f9fa 	bl	80132e0 <__assert_func>
 8011eec:	2301      	movs	r3, #1
 8011eee:	e7df      	b.n	8011eb0 <_dtoa_r+0x218>
 8011ef0:	2401      	movs	r4, #1
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ef6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8011efc:	9300      	str	r3, [sp, #0]
 8011efe:	9307      	str	r3, [sp, #28]
 8011f00:	2200      	movs	r2, #0
 8011f02:	2312      	movs	r3, #18
 8011f04:	e7cf      	b.n	8011ea6 <_dtoa_r+0x20e>
 8011f06:	2301      	movs	r3, #1
 8011f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f0a:	e7f5      	b.n	8011ef8 <_dtoa_r+0x260>
 8011f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	9307      	str	r3, [sp, #28]
 8011f12:	e7d6      	b.n	8011ec2 <_dtoa_r+0x22a>
 8011f14:	3101      	adds	r1, #1
 8011f16:	0052      	lsls	r2, r2, #1
 8011f18:	e7d5      	b.n	8011ec6 <_dtoa_r+0x22e>
 8011f1a:	bf00      	nop
 8011f1c:	f3af 8000 	nop.w
 8011f20:	636f4361 	.word	0x636f4361
 8011f24:	3fd287a7 	.word	0x3fd287a7
 8011f28:	8b60c8b3 	.word	0x8b60c8b3
 8011f2c:	3fc68a28 	.word	0x3fc68a28
 8011f30:	509f79fb 	.word	0x509f79fb
 8011f34:	3fd34413 	.word	0x3fd34413
 8011f38:	7ff00000 	.word	0x7ff00000
 8011f3c:	080151e7 	.word	0x080151e7
 8011f40:	3ff80000 	.word	0x3ff80000
 8011f44:	08015318 	.word	0x08015318
 8011f48:	0801521f 	.word	0x0801521f
 8011f4c:	08015230 	.word	0x08015230
 8011f50:	0801521b 	.word	0x0801521b
 8011f54:	080151e6 	.word	0x080151e6
 8011f58:	9b07      	ldr	r3, [sp, #28]
 8011f5a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8011f5e:	2b0e      	cmp	r3, #14
 8011f60:	f200 80a4 	bhi.w	80120ac <_dtoa_r+0x414>
 8011f64:	2c00      	cmp	r4, #0
 8011f66:	f000 80a1 	beq.w	80120ac <_dtoa_r+0x414>
 8011f6a:	2f00      	cmp	r7, #0
 8011f6c:	dd33      	ble.n	8011fd6 <_dtoa_r+0x33e>
 8011f6e:	4bae      	ldr	r3, [pc, #696]	@ (8012228 <_dtoa_r+0x590>)
 8011f70:	f007 020f 	and.w	r2, r7, #15
 8011f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f78:	ed93 7b00 	vldr	d7, [r3]
 8011f7c:	05f8      	lsls	r0, r7, #23
 8011f7e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f82:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011f86:	d516      	bpl.n	8011fb6 <_dtoa_r+0x31e>
 8011f88:	4ba8      	ldr	r3, [pc, #672]	@ (801222c <_dtoa_r+0x594>)
 8011f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011f8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011f92:	f7ee fc83 	bl	800089c <__aeabi_ddiv>
 8011f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f9a:	f004 040f 	and.w	r4, r4, #15
 8011f9e:	2603      	movs	r6, #3
 8011fa0:	4da2      	ldr	r5, [pc, #648]	@ (801222c <_dtoa_r+0x594>)
 8011fa2:	b954      	cbnz	r4, 8011fba <_dtoa_r+0x322>
 8011fa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fac:	f7ee fc76 	bl	800089c <__aeabi_ddiv>
 8011fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fb4:	e028      	b.n	8012008 <_dtoa_r+0x370>
 8011fb6:	2602      	movs	r6, #2
 8011fb8:	e7f2      	b.n	8011fa0 <_dtoa_r+0x308>
 8011fba:	07e1      	lsls	r1, r4, #31
 8011fbc:	d508      	bpl.n	8011fd0 <_dtoa_r+0x338>
 8011fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011fc6:	f7ee fb3f 	bl	8000648 <__aeabi_dmul>
 8011fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011fce:	3601      	adds	r6, #1
 8011fd0:	1064      	asrs	r4, r4, #1
 8011fd2:	3508      	adds	r5, #8
 8011fd4:	e7e5      	b.n	8011fa2 <_dtoa_r+0x30a>
 8011fd6:	f000 80d2 	beq.w	801217e <_dtoa_r+0x4e6>
 8011fda:	427c      	negs	r4, r7
 8011fdc:	4b92      	ldr	r3, [pc, #584]	@ (8012228 <_dtoa_r+0x590>)
 8011fde:	4d93      	ldr	r5, [pc, #588]	@ (801222c <_dtoa_r+0x594>)
 8011fe0:	f004 020f 	and.w	r2, r4, #15
 8011fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ff0:	f7ee fb2a 	bl	8000648 <__aeabi_dmul>
 8011ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ff8:	1124      	asrs	r4, r4, #4
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	2602      	movs	r6, #2
 8011ffe:	2c00      	cmp	r4, #0
 8012000:	f040 80b2 	bne.w	8012168 <_dtoa_r+0x4d0>
 8012004:	2b00      	cmp	r3, #0
 8012006:	d1d3      	bne.n	8011fb0 <_dtoa_r+0x318>
 8012008:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801200a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801200e:	2b00      	cmp	r3, #0
 8012010:	f000 80b7 	beq.w	8012182 <_dtoa_r+0x4ea>
 8012014:	4b86      	ldr	r3, [pc, #536]	@ (8012230 <_dtoa_r+0x598>)
 8012016:	2200      	movs	r2, #0
 8012018:	4620      	mov	r0, r4
 801201a:	4629      	mov	r1, r5
 801201c:	f7ee fd86 	bl	8000b2c <__aeabi_dcmplt>
 8012020:	2800      	cmp	r0, #0
 8012022:	f000 80ae 	beq.w	8012182 <_dtoa_r+0x4ea>
 8012026:	9b07      	ldr	r3, [sp, #28]
 8012028:	2b00      	cmp	r3, #0
 801202a:	f000 80aa 	beq.w	8012182 <_dtoa_r+0x4ea>
 801202e:	9b00      	ldr	r3, [sp, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	dd37      	ble.n	80120a4 <_dtoa_r+0x40c>
 8012034:	1e7b      	subs	r3, r7, #1
 8012036:	9304      	str	r3, [sp, #16]
 8012038:	4620      	mov	r0, r4
 801203a:	4b7e      	ldr	r3, [pc, #504]	@ (8012234 <_dtoa_r+0x59c>)
 801203c:	2200      	movs	r2, #0
 801203e:	4629      	mov	r1, r5
 8012040:	f7ee fb02 	bl	8000648 <__aeabi_dmul>
 8012044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012048:	9c00      	ldr	r4, [sp, #0]
 801204a:	3601      	adds	r6, #1
 801204c:	4630      	mov	r0, r6
 801204e:	f7ee fa91 	bl	8000574 <__aeabi_i2d>
 8012052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012056:	f7ee faf7 	bl	8000648 <__aeabi_dmul>
 801205a:	4b77      	ldr	r3, [pc, #476]	@ (8012238 <_dtoa_r+0x5a0>)
 801205c:	2200      	movs	r2, #0
 801205e:	f7ee f93d 	bl	80002dc <__adddf3>
 8012062:	4605      	mov	r5, r0
 8012064:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012068:	2c00      	cmp	r4, #0
 801206a:	f040 808d 	bne.w	8012188 <_dtoa_r+0x4f0>
 801206e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012072:	4b72      	ldr	r3, [pc, #456]	@ (801223c <_dtoa_r+0x5a4>)
 8012074:	2200      	movs	r2, #0
 8012076:	f7ee f92f 	bl	80002d8 <__aeabi_dsub>
 801207a:	4602      	mov	r2, r0
 801207c:	460b      	mov	r3, r1
 801207e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012082:	462a      	mov	r2, r5
 8012084:	4633      	mov	r3, r6
 8012086:	f7ee fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 801208a:	2800      	cmp	r0, #0
 801208c:	f040 828c 	bne.w	80125a8 <_dtoa_r+0x910>
 8012090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012094:	462a      	mov	r2, r5
 8012096:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801209a:	f7ee fd47 	bl	8000b2c <__aeabi_dcmplt>
 801209e:	2800      	cmp	r0, #0
 80120a0:	f040 8129 	bne.w	80122f6 <_dtoa_r+0x65e>
 80120a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80120a8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80120ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f2c0 815b 	blt.w	801236a <_dtoa_r+0x6d2>
 80120b4:	2f0e      	cmp	r7, #14
 80120b6:	f300 8158 	bgt.w	801236a <_dtoa_r+0x6d2>
 80120ba:	4b5b      	ldr	r3, [pc, #364]	@ (8012228 <_dtoa_r+0x590>)
 80120bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80120c0:	ed93 7b00 	vldr	d7, [r3]
 80120c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	ed8d 7b00 	vstr	d7, [sp]
 80120cc:	da03      	bge.n	80120d6 <_dtoa_r+0x43e>
 80120ce:	9b07      	ldr	r3, [sp, #28]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f340 8102 	ble.w	80122da <_dtoa_r+0x642>
 80120d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80120da:	4656      	mov	r6, sl
 80120dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120e0:	4620      	mov	r0, r4
 80120e2:	4629      	mov	r1, r5
 80120e4:	f7ee fbda 	bl	800089c <__aeabi_ddiv>
 80120e8:	f7ee fd5e 	bl	8000ba8 <__aeabi_d2iz>
 80120ec:	4680      	mov	r8, r0
 80120ee:	f7ee fa41 	bl	8000574 <__aeabi_i2d>
 80120f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120f6:	f7ee faa7 	bl	8000648 <__aeabi_dmul>
 80120fa:	4602      	mov	r2, r0
 80120fc:	460b      	mov	r3, r1
 80120fe:	4620      	mov	r0, r4
 8012100:	4629      	mov	r1, r5
 8012102:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012106:	f7ee f8e7 	bl	80002d8 <__aeabi_dsub>
 801210a:	f806 4b01 	strb.w	r4, [r6], #1
 801210e:	9d07      	ldr	r5, [sp, #28]
 8012110:	eba6 040a 	sub.w	r4, r6, sl
 8012114:	42a5      	cmp	r5, r4
 8012116:	4602      	mov	r2, r0
 8012118:	460b      	mov	r3, r1
 801211a:	f040 8118 	bne.w	801234e <_dtoa_r+0x6b6>
 801211e:	f7ee f8dd 	bl	80002dc <__adddf3>
 8012122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012126:	4604      	mov	r4, r0
 8012128:	460d      	mov	r5, r1
 801212a:	f7ee fd1d 	bl	8000b68 <__aeabi_dcmpgt>
 801212e:	2800      	cmp	r0, #0
 8012130:	f040 80fa 	bne.w	8012328 <_dtoa_r+0x690>
 8012134:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012138:	4620      	mov	r0, r4
 801213a:	4629      	mov	r1, r5
 801213c:	f7ee fcec 	bl	8000b18 <__aeabi_dcmpeq>
 8012140:	b118      	cbz	r0, 801214a <_dtoa_r+0x4b2>
 8012142:	f018 0f01 	tst.w	r8, #1
 8012146:	f040 80ef 	bne.w	8012328 <_dtoa_r+0x690>
 801214a:	4649      	mov	r1, r9
 801214c:	4658      	mov	r0, fp
 801214e:	f000 fb86 	bl	801285e <_Bfree>
 8012152:	2300      	movs	r3, #0
 8012154:	7033      	strb	r3, [r6, #0]
 8012156:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012158:	3701      	adds	r7, #1
 801215a:	601f      	str	r7, [r3, #0]
 801215c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801215e:	2b00      	cmp	r3, #0
 8012160:	f43f add1 	beq.w	8011d06 <_dtoa_r+0x6e>
 8012164:	601e      	str	r6, [r3, #0]
 8012166:	e5ce      	b.n	8011d06 <_dtoa_r+0x6e>
 8012168:	07e2      	lsls	r2, r4, #31
 801216a:	d505      	bpl.n	8012178 <_dtoa_r+0x4e0>
 801216c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012170:	f7ee fa6a 	bl	8000648 <__aeabi_dmul>
 8012174:	3601      	adds	r6, #1
 8012176:	2301      	movs	r3, #1
 8012178:	1064      	asrs	r4, r4, #1
 801217a:	3508      	adds	r5, #8
 801217c:	e73f      	b.n	8011ffe <_dtoa_r+0x366>
 801217e:	2602      	movs	r6, #2
 8012180:	e742      	b.n	8012008 <_dtoa_r+0x370>
 8012182:	9c07      	ldr	r4, [sp, #28]
 8012184:	9704      	str	r7, [sp, #16]
 8012186:	e761      	b.n	801204c <_dtoa_r+0x3b4>
 8012188:	4b27      	ldr	r3, [pc, #156]	@ (8012228 <_dtoa_r+0x590>)
 801218a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801218c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012194:	4454      	add	r4, sl
 8012196:	2900      	cmp	r1, #0
 8012198:	d054      	beq.n	8012244 <_dtoa_r+0x5ac>
 801219a:	4929      	ldr	r1, [pc, #164]	@ (8012240 <_dtoa_r+0x5a8>)
 801219c:	2000      	movs	r0, #0
 801219e:	f7ee fb7d 	bl	800089c <__aeabi_ddiv>
 80121a2:	4633      	mov	r3, r6
 80121a4:	462a      	mov	r2, r5
 80121a6:	f7ee f897 	bl	80002d8 <__aeabi_dsub>
 80121aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80121ae:	4656      	mov	r6, sl
 80121b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121b4:	f7ee fcf8 	bl	8000ba8 <__aeabi_d2iz>
 80121b8:	4605      	mov	r5, r0
 80121ba:	f7ee f9db 	bl	8000574 <__aeabi_i2d>
 80121be:	4602      	mov	r2, r0
 80121c0:	460b      	mov	r3, r1
 80121c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121c6:	f7ee f887 	bl	80002d8 <__aeabi_dsub>
 80121ca:	3530      	adds	r5, #48	@ 0x30
 80121cc:	4602      	mov	r2, r0
 80121ce:	460b      	mov	r3, r1
 80121d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80121d4:	f806 5b01 	strb.w	r5, [r6], #1
 80121d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80121dc:	f7ee fca6 	bl	8000b2c <__aeabi_dcmplt>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d172      	bne.n	80122ca <_dtoa_r+0x632>
 80121e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121e8:	4911      	ldr	r1, [pc, #68]	@ (8012230 <_dtoa_r+0x598>)
 80121ea:	2000      	movs	r0, #0
 80121ec:	f7ee f874 	bl	80002d8 <__aeabi_dsub>
 80121f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80121f4:	f7ee fc9a 	bl	8000b2c <__aeabi_dcmplt>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	f040 8096 	bne.w	801232a <_dtoa_r+0x692>
 80121fe:	42a6      	cmp	r6, r4
 8012200:	f43f af50 	beq.w	80120a4 <_dtoa_r+0x40c>
 8012204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012208:	4b0a      	ldr	r3, [pc, #40]	@ (8012234 <_dtoa_r+0x59c>)
 801220a:	2200      	movs	r2, #0
 801220c:	f7ee fa1c 	bl	8000648 <__aeabi_dmul>
 8012210:	4b08      	ldr	r3, [pc, #32]	@ (8012234 <_dtoa_r+0x59c>)
 8012212:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012216:	2200      	movs	r2, #0
 8012218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801221c:	f7ee fa14 	bl	8000648 <__aeabi_dmul>
 8012220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012224:	e7c4      	b.n	80121b0 <_dtoa_r+0x518>
 8012226:	bf00      	nop
 8012228:	08015318 	.word	0x08015318
 801222c:	080152f0 	.word	0x080152f0
 8012230:	3ff00000 	.word	0x3ff00000
 8012234:	40240000 	.word	0x40240000
 8012238:	401c0000 	.word	0x401c0000
 801223c:	40140000 	.word	0x40140000
 8012240:	3fe00000 	.word	0x3fe00000
 8012244:	4631      	mov	r1, r6
 8012246:	4628      	mov	r0, r5
 8012248:	f7ee f9fe 	bl	8000648 <__aeabi_dmul>
 801224c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012250:	9415      	str	r4, [sp, #84]	@ 0x54
 8012252:	4656      	mov	r6, sl
 8012254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012258:	f7ee fca6 	bl	8000ba8 <__aeabi_d2iz>
 801225c:	4605      	mov	r5, r0
 801225e:	f7ee f989 	bl	8000574 <__aeabi_i2d>
 8012262:	4602      	mov	r2, r0
 8012264:	460b      	mov	r3, r1
 8012266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801226a:	f7ee f835 	bl	80002d8 <__aeabi_dsub>
 801226e:	3530      	adds	r5, #48	@ 0x30
 8012270:	f806 5b01 	strb.w	r5, [r6], #1
 8012274:	4602      	mov	r2, r0
 8012276:	460b      	mov	r3, r1
 8012278:	42a6      	cmp	r6, r4
 801227a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801227e:	f04f 0200 	mov.w	r2, #0
 8012282:	d124      	bne.n	80122ce <_dtoa_r+0x636>
 8012284:	4bac      	ldr	r3, [pc, #688]	@ (8012538 <_dtoa_r+0x8a0>)
 8012286:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801228a:	f7ee f827 	bl	80002dc <__adddf3>
 801228e:	4602      	mov	r2, r0
 8012290:	460b      	mov	r3, r1
 8012292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012296:	f7ee fc67 	bl	8000b68 <__aeabi_dcmpgt>
 801229a:	2800      	cmp	r0, #0
 801229c:	d145      	bne.n	801232a <_dtoa_r+0x692>
 801229e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80122a2:	49a5      	ldr	r1, [pc, #660]	@ (8012538 <_dtoa_r+0x8a0>)
 80122a4:	2000      	movs	r0, #0
 80122a6:	f7ee f817 	bl	80002d8 <__aeabi_dsub>
 80122aa:	4602      	mov	r2, r0
 80122ac:	460b      	mov	r3, r1
 80122ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122b2:	f7ee fc3b 	bl	8000b2c <__aeabi_dcmplt>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	f43f aef4 	beq.w	80120a4 <_dtoa_r+0x40c>
 80122bc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80122be:	1e73      	subs	r3, r6, #1
 80122c0:	9315      	str	r3, [sp, #84]	@ 0x54
 80122c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80122c6:	2b30      	cmp	r3, #48	@ 0x30
 80122c8:	d0f8      	beq.n	80122bc <_dtoa_r+0x624>
 80122ca:	9f04      	ldr	r7, [sp, #16]
 80122cc:	e73d      	b.n	801214a <_dtoa_r+0x4b2>
 80122ce:	4b9b      	ldr	r3, [pc, #620]	@ (801253c <_dtoa_r+0x8a4>)
 80122d0:	f7ee f9ba 	bl	8000648 <__aeabi_dmul>
 80122d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d8:	e7bc      	b.n	8012254 <_dtoa_r+0x5bc>
 80122da:	d10c      	bne.n	80122f6 <_dtoa_r+0x65e>
 80122dc:	4b98      	ldr	r3, [pc, #608]	@ (8012540 <_dtoa_r+0x8a8>)
 80122de:	2200      	movs	r2, #0
 80122e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122e4:	f7ee f9b0 	bl	8000648 <__aeabi_dmul>
 80122e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122ec:	f7ee fc32 	bl	8000b54 <__aeabi_dcmpge>
 80122f0:	2800      	cmp	r0, #0
 80122f2:	f000 8157 	beq.w	80125a4 <_dtoa_r+0x90c>
 80122f6:	2400      	movs	r4, #0
 80122f8:	4625      	mov	r5, r4
 80122fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122fc:	43db      	mvns	r3, r3
 80122fe:	9304      	str	r3, [sp, #16]
 8012300:	4656      	mov	r6, sl
 8012302:	2700      	movs	r7, #0
 8012304:	4621      	mov	r1, r4
 8012306:	4658      	mov	r0, fp
 8012308:	f000 faa9 	bl	801285e <_Bfree>
 801230c:	2d00      	cmp	r5, #0
 801230e:	d0dc      	beq.n	80122ca <_dtoa_r+0x632>
 8012310:	b12f      	cbz	r7, 801231e <_dtoa_r+0x686>
 8012312:	42af      	cmp	r7, r5
 8012314:	d003      	beq.n	801231e <_dtoa_r+0x686>
 8012316:	4639      	mov	r1, r7
 8012318:	4658      	mov	r0, fp
 801231a:	f000 faa0 	bl	801285e <_Bfree>
 801231e:	4629      	mov	r1, r5
 8012320:	4658      	mov	r0, fp
 8012322:	f000 fa9c 	bl	801285e <_Bfree>
 8012326:	e7d0      	b.n	80122ca <_dtoa_r+0x632>
 8012328:	9704      	str	r7, [sp, #16]
 801232a:	4633      	mov	r3, r6
 801232c:	461e      	mov	r6, r3
 801232e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012332:	2a39      	cmp	r2, #57	@ 0x39
 8012334:	d107      	bne.n	8012346 <_dtoa_r+0x6ae>
 8012336:	459a      	cmp	sl, r3
 8012338:	d1f8      	bne.n	801232c <_dtoa_r+0x694>
 801233a:	9a04      	ldr	r2, [sp, #16]
 801233c:	3201      	adds	r2, #1
 801233e:	9204      	str	r2, [sp, #16]
 8012340:	2230      	movs	r2, #48	@ 0x30
 8012342:	f88a 2000 	strb.w	r2, [sl]
 8012346:	781a      	ldrb	r2, [r3, #0]
 8012348:	3201      	adds	r2, #1
 801234a:	701a      	strb	r2, [r3, #0]
 801234c:	e7bd      	b.n	80122ca <_dtoa_r+0x632>
 801234e:	4b7b      	ldr	r3, [pc, #492]	@ (801253c <_dtoa_r+0x8a4>)
 8012350:	2200      	movs	r2, #0
 8012352:	f7ee f979 	bl	8000648 <__aeabi_dmul>
 8012356:	2200      	movs	r2, #0
 8012358:	2300      	movs	r3, #0
 801235a:	4604      	mov	r4, r0
 801235c:	460d      	mov	r5, r1
 801235e:	f7ee fbdb 	bl	8000b18 <__aeabi_dcmpeq>
 8012362:	2800      	cmp	r0, #0
 8012364:	f43f aeba 	beq.w	80120dc <_dtoa_r+0x444>
 8012368:	e6ef      	b.n	801214a <_dtoa_r+0x4b2>
 801236a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801236c:	2a00      	cmp	r2, #0
 801236e:	f000 80db 	beq.w	8012528 <_dtoa_r+0x890>
 8012372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012374:	2a01      	cmp	r2, #1
 8012376:	f300 80bf 	bgt.w	80124f8 <_dtoa_r+0x860>
 801237a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801237c:	2a00      	cmp	r2, #0
 801237e:	f000 80b7 	beq.w	80124f0 <_dtoa_r+0x858>
 8012382:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012386:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012388:	4646      	mov	r6, r8
 801238a:	9a08      	ldr	r2, [sp, #32]
 801238c:	2101      	movs	r1, #1
 801238e:	441a      	add	r2, r3
 8012390:	4658      	mov	r0, fp
 8012392:	4498      	add	r8, r3
 8012394:	9208      	str	r2, [sp, #32]
 8012396:	f000 fafd 	bl	8012994 <__i2b>
 801239a:	4605      	mov	r5, r0
 801239c:	b15e      	cbz	r6, 80123b6 <_dtoa_r+0x71e>
 801239e:	9b08      	ldr	r3, [sp, #32]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	dd08      	ble.n	80123b6 <_dtoa_r+0x71e>
 80123a4:	42b3      	cmp	r3, r6
 80123a6:	9a08      	ldr	r2, [sp, #32]
 80123a8:	bfa8      	it	ge
 80123aa:	4633      	movge	r3, r6
 80123ac:	eba8 0803 	sub.w	r8, r8, r3
 80123b0:	1af6      	subs	r6, r6, r3
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	9308      	str	r3, [sp, #32]
 80123b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123b8:	b1f3      	cbz	r3, 80123f8 <_dtoa_r+0x760>
 80123ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 80b7 	beq.w	8012530 <_dtoa_r+0x898>
 80123c2:	b18c      	cbz	r4, 80123e8 <_dtoa_r+0x750>
 80123c4:	4629      	mov	r1, r5
 80123c6:	4622      	mov	r2, r4
 80123c8:	4658      	mov	r0, fp
 80123ca:	f000 fba3 	bl	8012b14 <__pow5mult>
 80123ce:	464a      	mov	r2, r9
 80123d0:	4601      	mov	r1, r0
 80123d2:	4605      	mov	r5, r0
 80123d4:	4658      	mov	r0, fp
 80123d6:	f000 faf3 	bl	80129c0 <__multiply>
 80123da:	4649      	mov	r1, r9
 80123dc:	9004      	str	r0, [sp, #16]
 80123de:	4658      	mov	r0, fp
 80123e0:	f000 fa3d 	bl	801285e <_Bfree>
 80123e4:	9b04      	ldr	r3, [sp, #16]
 80123e6:	4699      	mov	r9, r3
 80123e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123ea:	1b1a      	subs	r2, r3, r4
 80123ec:	d004      	beq.n	80123f8 <_dtoa_r+0x760>
 80123ee:	4649      	mov	r1, r9
 80123f0:	4658      	mov	r0, fp
 80123f2:	f000 fb8f 	bl	8012b14 <__pow5mult>
 80123f6:	4681      	mov	r9, r0
 80123f8:	2101      	movs	r1, #1
 80123fa:	4658      	mov	r0, fp
 80123fc:	f000 faca 	bl	8012994 <__i2b>
 8012400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012402:	4604      	mov	r4, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	f000 81cc 	beq.w	80127a2 <_dtoa_r+0xb0a>
 801240a:	461a      	mov	r2, r3
 801240c:	4601      	mov	r1, r0
 801240e:	4658      	mov	r0, fp
 8012410:	f000 fb80 	bl	8012b14 <__pow5mult>
 8012414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012416:	2b01      	cmp	r3, #1
 8012418:	4604      	mov	r4, r0
 801241a:	f300 8095 	bgt.w	8012548 <_dtoa_r+0x8b0>
 801241e:	9b02      	ldr	r3, [sp, #8]
 8012420:	2b00      	cmp	r3, #0
 8012422:	f040 8087 	bne.w	8012534 <_dtoa_r+0x89c>
 8012426:	9b03      	ldr	r3, [sp, #12]
 8012428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801242c:	2b00      	cmp	r3, #0
 801242e:	f040 8089 	bne.w	8012544 <_dtoa_r+0x8ac>
 8012432:	9b03      	ldr	r3, [sp, #12]
 8012434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012438:	0d1b      	lsrs	r3, r3, #20
 801243a:	051b      	lsls	r3, r3, #20
 801243c:	b12b      	cbz	r3, 801244a <_dtoa_r+0x7b2>
 801243e:	9b08      	ldr	r3, [sp, #32]
 8012440:	3301      	adds	r3, #1
 8012442:	9308      	str	r3, [sp, #32]
 8012444:	f108 0801 	add.w	r8, r8, #1
 8012448:	2301      	movs	r3, #1
 801244a:	930a      	str	r3, [sp, #40]	@ 0x28
 801244c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801244e:	2b00      	cmp	r3, #0
 8012450:	f000 81ad 	beq.w	80127ae <_dtoa_r+0xb16>
 8012454:	6923      	ldr	r3, [r4, #16]
 8012456:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801245a:	6918      	ldr	r0, [r3, #16]
 801245c:	f000 fa4e 	bl	80128fc <__hi0bits>
 8012460:	f1c0 0020 	rsb	r0, r0, #32
 8012464:	9b08      	ldr	r3, [sp, #32]
 8012466:	4418      	add	r0, r3
 8012468:	f010 001f 	ands.w	r0, r0, #31
 801246c:	d077      	beq.n	801255e <_dtoa_r+0x8c6>
 801246e:	f1c0 0320 	rsb	r3, r0, #32
 8012472:	2b04      	cmp	r3, #4
 8012474:	dd6b      	ble.n	801254e <_dtoa_r+0x8b6>
 8012476:	9b08      	ldr	r3, [sp, #32]
 8012478:	f1c0 001c 	rsb	r0, r0, #28
 801247c:	4403      	add	r3, r0
 801247e:	4480      	add	r8, r0
 8012480:	4406      	add	r6, r0
 8012482:	9308      	str	r3, [sp, #32]
 8012484:	f1b8 0f00 	cmp.w	r8, #0
 8012488:	dd05      	ble.n	8012496 <_dtoa_r+0x7fe>
 801248a:	4649      	mov	r1, r9
 801248c:	4642      	mov	r2, r8
 801248e:	4658      	mov	r0, fp
 8012490:	f000 fb80 	bl	8012b94 <__lshift>
 8012494:	4681      	mov	r9, r0
 8012496:	9b08      	ldr	r3, [sp, #32]
 8012498:	2b00      	cmp	r3, #0
 801249a:	dd05      	ble.n	80124a8 <_dtoa_r+0x810>
 801249c:	4621      	mov	r1, r4
 801249e:	461a      	mov	r2, r3
 80124a0:	4658      	mov	r0, fp
 80124a2:	f000 fb77 	bl	8012b94 <__lshift>
 80124a6:	4604      	mov	r4, r0
 80124a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d059      	beq.n	8012562 <_dtoa_r+0x8ca>
 80124ae:	4621      	mov	r1, r4
 80124b0:	4648      	mov	r0, r9
 80124b2:	f000 fbdb 	bl	8012c6c <__mcmp>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	da53      	bge.n	8012562 <_dtoa_r+0x8ca>
 80124ba:	1e7b      	subs	r3, r7, #1
 80124bc:	9304      	str	r3, [sp, #16]
 80124be:	4649      	mov	r1, r9
 80124c0:	2300      	movs	r3, #0
 80124c2:	220a      	movs	r2, #10
 80124c4:	4658      	mov	r0, fp
 80124c6:	f000 f9d3 	bl	8012870 <__multadd>
 80124ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124cc:	4681      	mov	r9, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	f000 816f 	beq.w	80127b2 <_dtoa_r+0xb1a>
 80124d4:	2300      	movs	r3, #0
 80124d6:	4629      	mov	r1, r5
 80124d8:	220a      	movs	r2, #10
 80124da:	4658      	mov	r0, fp
 80124dc:	f000 f9c8 	bl	8012870 <__multadd>
 80124e0:	9b00      	ldr	r3, [sp, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	4605      	mov	r5, r0
 80124e6:	dc67      	bgt.n	80125b8 <_dtoa_r+0x920>
 80124e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	dc41      	bgt.n	8012572 <_dtoa_r+0x8da>
 80124ee:	e063      	b.n	80125b8 <_dtoa_r+0x920>
 80124f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80124f2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80124f6:	e746      	b.n	8012386 <_dtoa_r+0x6ee>
 80124f8:	9b07      	ldr	r3, [sp, #28]
 80124fa:	1e5c      	subs	r4, r3, #1
 80124fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124fe:	42a3      	cmp	r3, r4
 8012500:	bfbf      	itttt	lt
 8012502:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012504:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012506:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012508:	1ae3      	sublt	r3, r4, r3
 801250a:	bfb4      	ite	lt
 801250c:	18d2      	addlt	r2, r2, r3
 801250e:	1b1c      	subge	r4, r3, r4
 8012510:	9b07      	ldr	r3, [sp, #28]
 8012512:	bfbc      	itt	lt
 8012514:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012516:	2400      	movlt	r4, #0
 8012518:	2b00      	cmp	r3, #0
 801251a:	bfb5      	itete	lt
 801251c:	eba8 0603 	sublt.w	r6, r8, r3
 8012520:	9b07      	ldrge	r3, [sp, #28]
 8012522:	2300      	movlt	r3, #0
 8012524:	4646      	movge	r6, r8
 8012526:	e730      	b.n	801238a <_dtoa_r+0x6f2>
 8012528:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801252a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801252c:	4646      	mov	r6, r8
 801252e:	e735      	b.n	801239c <_dtoa_r+0x704>
 8012530:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012532:	e75c      	b.n	80123ee <_dtoa_r+0x756>
 8012534:	2300      	movs	r3, #0
 8012536:	e788      	b.n	801244a <_dtoa_r+0x7b2>
 8012538:	3fe00000 	.word	0x3fe00000
 801253c:	40240000 	.word	0x40240000
 8012540:	40140000 	.word	0x40140000
 8012544:	9b02      	ldr	r3, [sp, #8]
 8012546:	e780      	b.n	801244a <_dtoa_r+0x7b2>
 8012548:	2300      	movs	r3, #0
 801254a:	930a      	str	r3, [sp, #40]	@ 0x28
 801254c:	e782      	b.n	8012454 <_dtoa_r+0x7bc>
 801254e:	d099      	beq.n	8012484 <_dtoa_r+0x7ec>
 8012550:	9a08      	ldr	r2, [sp, #32]
 8012552:	331c      	adds	r3, #28
 8012554:	441a      	add	r2, r3
 8012556:	4498      	add	r8, r3
 8012558:	441e      	add	r6, r3
 801255a:	9208      	str	r2, [sp, #32]
 801255c:	e792      	b.n	8012484 <_dtoa_r+0x7ec>
 801255e:	4603      	mov	r3, r0
 8012560:	e7f6      	b.n	8012550 <_dtoa_r+0x8b8>
 8012562:	9b07      	ldr	r3, [sp, #28]
 8012564:	9704      	str	r7, [sp, #16]
 8012566:	2b00      	cmp	r3, #0
 8012568:	dc20      	bgt.n	80125ac <_dtoa_r+0x914>
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801256e:	2b02      	cmp	r3, #2
 8012570:	dd1e      	ble.n	80125b0 <_dtoa_r+0x918>
 8012572:	9b00      	ldr	r3, [sp, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	f47f aec0 	bne.w	80122fa <_dtoa_r+0x662>
 801257a:	4621      	mov	r1, r4
 801257c:	2205      	movs	r2, #5
 801257e:	4658      	mov	r0, fp
 8012580:	f000 f976 	bl	8012870 <__multadd>
 8012584:	4601      	mov	r1, r0
 8012586:	4604      	mov	r4, r0
 8012588:	4648      	mov	r0, r9
 801258a:	f000 fb6f 	bl	8012c6c <__mcmp>
 801258e:	2800      	cmp	r0, #0
 8012590:	f77f aeb3 	ble.w	80122fa <_dtoa_r+0x662>
 8012594:	4656      	mov	r6, sl
 8012596:	2331      	movs	r3, #49	@ 0x31
 8012598:	f806 3b01 	strb.w	r3, [r6], #1
 801259c:	9b04      	ldr	r3, [sp, #16]
 801259e:	3301      	adds	r3, #1
 80125a0:	9304      	str	r3, [sp, #16]
 80125a2:	e6ae      	b.n	8012302 <_dtoa_r+0x66a>
 80125a4:	9c07      	ldr	r4, [sp, #28]
 80125a6:	9704      	str	r7, [sp, #16]
 80125a8:	4625      	mov	r5, r4
 80125aa:	e7f3      	b.n	8012594 <_dtoa_r+0x8fc>
 80125ac:	9b07      	ldr	r3, [sp, #28]
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	f000 8101 	beq.w	80127ba <_dtoa_r+0xb22>
 80125b8:	2e00      	cmp	r6, #0
 80125ba:	dd05      	ble.n	80125c8 <_dtoa_r+0x930>
 80125bc:	4629      	mov	r1, r5
 80125be:	4632      	mov	r2, r6
 80125c0:	4658      	mov	r0, fp
 80125c2:	f000 fae7 	bl	8012b94 <__lshift>
 80125c6:	4605      	mov	r5, r0
 80125c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d059      	beq.n	8012682 <_dtoa_r+0x9ea>
 80125ce:	6869      	ldr	r1, [r5, #4]
 80125d0:	4658      	mov	r0, fp
 80125d2:	f000 f91f 	bl	8012814 <_Balloc>
 80125d6:	4606      	mov	r6, r0
 80125d8:	b920      	cbnz	r0, 80125e4 <_dtoa_r+0x94c>
 80125da:	4b83      	ldr	r3, [pc, #524]	@ (80127e8 <_dtoa_r+0xb50>)
 80125dc:	4602      	mov	r2, r0
 80125de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80125e2:	e480      	b.n	8011ee6 <_dtoa_r+0x24e>
 80125e4:	692a      	ldr	r2, [r5, #16]
 80125e6:	3202      	adds	r2, #2
 80125e8:	0092      	lsls	r2, r2, #2
 80125ea:	f105 010c 	add.w	r1, r5, #12
 80125ee:	300c      	adds	r0, #12
 80125f0:	f7fd fbc8 	bl	800fd84 <memcpy>
 80125f4:	2201      	movs	r2, #1
 80125f6:	4631      	mov	r1, r6
 80125f8:	4658      	mov	r0, fp
 80125fa:	f000 facb 	bl	8012b94 <__lshift>
 80125fe:	f10a 0301 	add.w	r3, sl, #1
 8012602:	9307      	str	r3, [sp, #28]
 8012604:	9b00      	ldr	r3, [sp, #0]
 8012606:	4453      	add	r3, sl
 8012608:	930b      	str	r3, [sp, #44]	@ 0x2c
 801260a:	9b02      	ldr	r3, [sp, #8]
 801260c:	f003 0301 	and.w	r3, r3, #1
 8012610:	462f      	mov	r7, r5
 8012612:	930a      	str	r3, [sp, #40]	@ 0x28
 8012614:	4605      	mov	r5, r0
 8012616:	9b07      	ldr	r3, [sp, #28]
 8012618:	4621      	mov	r1, r4
 801261a:	3b01      	subs	r3, #1
 801261c:	4648      	mov	r0, r9
 801261e:	9300      	str	r3, [sp, #0]
 8012620:	f7ff fab2 	bl	8011b88 <quorem>
 8012624:	4639      	mov	r1, r7
 8012626:	9002      	str	r0, [sp, #8]
 8012628:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801262c:	4648      	mov	r0, r9
 801262e:	f000 fb1d 	bl	8012c6c <__mcmp>
 8012632:	462a      	mov	r2, r5
 8012634:	9008      	str	r0, [sp, #32]
 8012636:	4621      	mov	r1, r4
 8012638:	4658      	mov	r0, fp
 801263a:	f000 fb33 	bl	8012ca4 <__mdiff>
 801263e:	68c2      	ldr	r2, [r0, #12]
 8012640:	4606      	mov	r6, r0
 8012642:	bb02      	cbnz	r2, 8012686 <_dtoa_r+0x9ee>
 8012644:	4601      	mov	r1, r0
 8012646:	4648      	mov	r0, r9
 8012648:	f000 fb10 	bl	8012c6c <__mcmp>
 801264c:	4602      	mov	r2, r0
 801264e:	4631      	mov	r1, r6
 8012650:	4658      	mov	r0, fp
 8012652:	920e      	str	r2, [sp, #56]	@ 0x38
 8012654:	f000 f903 	bl	801285e <_Bfree>
 8012658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801265a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801265c:	9e07      	ldr	r6, [sp, #28]
 801265e:	ea43 0102 	orr.w	r1, r3, r2
 8012662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012664:	4319      	orrs	r1, r3
 8012666:	d110      	bne.n	801268a <_dtoa_r+0x9f2>
 8012668:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801266c:	d029      	beq.n	80126c2 <_dtoa_r+0xa2a>
 801266e:	9b08      	ldr	r3, [sp, #32]
 8012670:	2b00      	cmp	r3, #0
 8012672:	dd02      	ble.n	801267a <_dtoa_r+0x9e2>
 8012674:	9b02      	ldr	r3, [sp, #8]
 8012676:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801267a:	9b00      	ldr	r3, [sp, #0]
 801267c:	f883 8000 	strb.w	r8, [r3]
 8012680:	e640      	b.n	8012304 <_dtoa_r+0x66c>
 8012682:	4628      	mov	r0, r5
 8012684:	e7bb      	b.n	80125fe <_dtoa_r+0x966>
 8012686:	2201      	movs	r2, #1
 8012688:	e7e1      	b.n	801264e <_dtoa_r+0x9b6>
 801268a:	9b08      	ldr	r3, [sp, #32]
 801268c:	2b00      	cmp	r3, #0
 801268e:	db04      	blt.n	801269a <_dtoa_r+0xa02>
 8012690:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012692:	430b      	orrs	r3, r1
 8012694:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012696:	430b      	orrs	r3, r1
 8012698:	d120      	bne.n	80126dc <_dtoa_r+0xa44>
 801269a:	2a00      	cmp	r2, #0
 801269c:	dded      	ble.n	801267a <_dtoa_r+0x9e2>
 801269e:	4649      	mov	r1, r9
 80126a0:	2201      	movs	r2, #1
 80126a2:	4658      	mov	r0, fp
 80126a4:	f000 fa76 	bl	8012b94 <__lshift>
 80126a8:	4621      	mov	r1, r4
 80126aa:	4681      	mov	r9, r0
 80126ac:	f000 fade 	bl	8012c6c <__mcmp>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	dc03      	bgt.n	80126bc <_dtoa_r+0xa24>
 80126b4:	d1e1      	bne.n	801267a <_dtoa_r+0x9e2>
 80126b6:	f018 0f01 	tst.w	r8, #1
 80126ba:	d0de      	beq.n	801267a <_dtoa_r+0x9e2>
 80126bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80126c0:	d1d8      	bne.n	8012674 <_dtoa_r+0x9dc>
 80126c2:	9a00      	ldr	r2, [sp, #0]
 80126c4:	2339      	movs	r3, #57	@ 0x39
 80126c6:	7013      	strb	r3, [r2, #0]
 80126c8:	4633      	mov	r3, r6
 80126ca:	461e      	mov	r6, r3
 80126cc:	3b01      	subs	r3, #1
 80126ce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80126d2:	2a39      	cmp	r2, #57	@ 0x39
 80126d4:	d052      	beq.n	801277c <_dtoa_r+0xae4>
 80126d6:	3201      	adds	r2, #1
 80126d8:	701a      	strb	r2, [r3, #0]
 80126da:	e613      	b.n	8012304 <_dtoa_r+0x66c>
 80126dc:	2a00      	cmp	r2, #0
 80126de:	dd07      	ble.n	80126f0 <_dtoa_r+0xa58>
 80126e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80126e4:	d0ed      	beq.n	80126c2 <_dtoa_r+0xa2a>
 80126e6:	9a00      	ldr	r2, [sp, #0]
 80126e8:	f108 0301 	add.w	r3, r8, #1
 80126ec:	7013      	strb	r3, [r2, #0]
 80126ee:	e609      	b.n	8012304 <_dtoa_r+0x66c>
 80126f0:	9b07      	ldr	r3, [sp, #28]
 80126f2:	9a07      	ldr	r2, [sp, #28]
 80126f4:	f803 8c01 	strb.w	r8, [r3, #-1]
 80126f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126fa:	4293      	cmp	r3, r2
 80126fc:	d028      	beq.n	8012750 <_dtoa_r+0xab8>
 80126fe:	4649      	mov	r1, r9
 8012700:	2300      	movs	r3, #0
 8012702:	220a      	movs	r2, #10
 8012704:	4658      	mov	r0, fp
 8012706:	f000 f8b3 	bl	8012870 <__multadd>
 801270a:	42af      	cmp	r7, r5
 801270c:	4681      	mov	r9, r0
 801270e:	f04f 0300 	mov.w	r3, #0
 8012712:	f04f 020a 	mov.w	r2, #10
 8012716:	4639      	mov	r1, r7
 8012718:	4658      	mov	r0, fp
 801271a:	d107      	bne.n	801272c <_dtoa_r+0xa94>
 801271c:	f000 f8a8 	bl	8012870 <__multadd>
 8012720:	4607      	mov	r7, r0
 8012722:	4605      	mov	r5, r0
 8012724:	9b07      	ldr	r3, [sp, #28]
 8012726:	3301      	adds	r3, #1
 8012728:	9307      	str	r3, [sp, #28]
 801272a:	e774      	b.n	8012616 <_dtoa_r+0x97e>
 801272c:	f000 f8a0 	bl	8012870 <__multadd>
 8012730:	4629      	mov	r1, r5
 8012732:	4607      	mov	r7, r0
 8012734:	2300      	movs	r3, #0
 8012736:	220a      	movs	r2, #10
 8012738:	4658      	mov	r0, fp
 801273a:	f000 f899 	bl	8012870 <__multadd>
 801273e:	4605      	mov	r5, r0
 8012740:	e7f0      	b.n	8012724 <_dtoa_r+0xa8c>
 8012742:	9b00      	ldr	r3, [sp, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	bfcc      	ite	gt
 8012748:	461e      	movgt	r6, r3
 801274a:	2601      	movle	r6, #1
 801274c:	4456      	add	r6, sl
 801274e:	2700      	movs	r7, #0
 8012750:	4649      	mov	r1, r9
 8012752:	2201      	movs	r2, #1
 8012754:	4658      	mov	r0, fp
 8012756:	f000 fa1d 	bl	8012b94 <__lshift>
 801275a:	4621      	mov	r1, r4
 801275c:	4681      	mov	r9, r0
 801275e:	f000 fa85 	bl	8012c6c <__mcmp>
 8012762:	2800      	cmp	r0, #0
 8012764:	dcb0      	bgt.n	80126c8 <_dtoa_r+0xa30>
 8012766:	d102      	bne.n	801276e <_dtoa_r+0xad6>
 8012768:	f018 0f01 	tst.w	r8, #1
 801276c:	d1ac      	bne.n	80126c8 <_dtoa_r+0xa30>
 801276e:	4633      	mov	r3, r6
 8012770:	461e      	mov	r6, r3
 8012772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012776:	2a30      	cmp	r2, #48	@ 0x30
 8012778:	d0fa      	beq.n	8012770 <_dtoa_r+0xad8>
 801277a:	e5c3      	b.n	8012304 <_dtoa_r+0x66c>
 801277c:	459a      	cmp	sl, r3
 801277e:	d1a4      	bne.n	80126ca <_dtoa_r+0xa32>
 8012780:	9b04      	ldr	r3, [sp, #16]
 8012782:	3301      	adds	r3, #1
 8012784:	9304      	str	r3, [sp, #16]
 8012786:	2331      	movs	r3, #49	@ 0x31
 8012788:	f88a 3000 	strb.w	r3, [sl]
 801278c:	e5ba      	b.n	8012304 <_dtoa_r+0x66c>
 801278e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012790:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80127ec <_dtoa_r+0xb54>
 8012794:	2b00      	cmp	r3, #0
 8012796:	f43f aab6 	beq.w	8011d06 <_dtoa_r+0x6e>
 801279a:	f10a 0308 	add.w	r3, sl, #8
 801279e:	f7ff bab0 	b.w	8011d02 <_dtoa_r+0x6a>
 80127a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	f77f ae3a 	ble.w	801241e <_dtoa_r+0x786>
 80127aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80127ae:	2001      	movs	r0, #1
 80127b0:	e658      	b.n	8012464 <_dtoa_r+0x7cc>
 80127b2:	9b00      	ldr	r3, [sp, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f77f aed9 	ble.w	801256c <_dtoa_r+0x8d4>
 80127ba:	4656      	mov	r6, sl
 80127bc:	4621      	mov	r1, r4
 80127be:	4648      	mov	r0, r9
 80127c0:	f7ff f9e2 	bl	8011b88 <quorem>
 80127c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80127c8:	f806 8b01 	strb.w	r8, [r6], #1
 80127cc:	9b00      	ldr	r3, [sp, #0]
 80127ce:	eba6 020a 	sub.w	r2, r6, sl
 80127d2:	4293      	cmp	r3, r2
 80127d4:	ddb5      	ble.n	8012742 <_dtoa_r+0xaaa>
 80127d6:	4649      	mov	r1, r9
 80127d8:	2300      	movs	r3, #0
 80127da:	220a      	movs	r2, #10
 80127dc:	4658      	mov	r0, fp
 80127de:	f000 f847 	bl	8012870 <__multadd>
 80127e2:	4681      	mov	r9, r0
 80127e4:	e7ea      	b.n	80127bc <_dtoa_r+0xb24>
 80127e6:	bf00      	nop
 80127e8:	0801521f 	.word	0x0801521f
 80127ec:	08015212 	.word	0x08015212

080127f0 <__ascii_mbtowc>:
 80127f0:	b082      	sub	sp, #8
 80127f2:	b901      	cbnz	r1, 80127f6 <__ascii_mbtowc+0x6>
 80127f4:	a901      	add	r1, sp, #4
 80127f6:	b142      	cbz	r2, 801280a <__ascii_mbtowc+0x1a>
 80127f8:	b14b      	cbz	r3, 801280e <__ascii_mbtowc+0x1e>
 80127fa:	7813      	ldrb	r3, [r2, #0]
 80127fc:	600b      	str	r3, [r1, #0]
 80127fe:	7812      	ldrb	r2, [r2, #0]
 8012800:	1e10      	subs	r0, r2, #0
 8012802:	bf18      	it	ne
 8012804:	2001      	movne	r0, #1
 8012806:	b002      	add	sp, #8
 8012808:	4770      	bx	lr
 801280a:	4610      	mov	r0, r2
 801280c:	e7fb      	b.n	8012806 <__ascii_mbtowc+0x16>
 801280e:	f06f 0001 	mvn.w	r0, #1
 8012812:	e7f8      	b.n	8012806 <__ascii_mbtowc+0x16>

08012814 <_Balloc>:
 8012814:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012816:	b570      	push	{r4, r5, r6, lr}
 8012818:	4605      	mov	r5, r0
 801281a:	460c      	mov	r4, r1
 801281c:	b17b      	cbz	r3, 801283e <_Balloc+0x2a>
 801281e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8012820:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012824:	b9a0      	cbnz	r0, 8012850 <_Balloc+0x3c>
 8012826:	2101      	movs	r1, #1
 8012828:	fa01 f604 	lsl.w	r6, r1, r4
 801282c:	1d72      	adds	r2, r6, #5
 801282e:	0092      	lsls	r2, r2, #2
 8012830:	4628      	mov	r0, r5
 8012832:	f000 fd73 	bl	801331c <_calloc_r>
 8012836:	b148      	cbz	r0, 801284c <_Balloc+0x38>
 8012838:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801283c:	e00b      	b.n	8012856 <_Balloc+0x42>
 801283e:	2221      	movs	r2, #33	@ 0x21
 8012840:	2104      	movs	r1, #4
 8012842:	f000 fd6b 	bl	801331c <_calloc_r>
 8012846:	6468      	str	r0, [r5, #68]	@ 0x44
 8012848:	2800      	cmp	r0, #0
 801284a:	d1e8      	bne.n	801281e <_Balloc+0xa>
 801284c:	2000      	movs	r0, #0
 801284e:	bd70      	pop	{r4, r5, r6, pc}
 8012850:	6802      	ldr	r2, [r0, #0]
 8012852:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012856:	2300      	movs	r3, #0
 8012858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801285c:	e7f7      	b.n	801284e <_Balloc+0x3a>

0801285e <_Bfree>:
 801285e:	b131      	cbz	r1, 801286e <_Bfree+0x10>
 8012860:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012862:	684a      	ldr	r2, [r1, #4]
 8012864:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012868:	6008      	str	r0, [r1, #0]
 801286a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801286e:	4770      	bx	lr

08012870 <__multadd>:
 8012870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012874:	690d      	ldr	r5, [r1, #16]
 8012876:	4607      	mov	r7, r0
 8012878:	460c      	mov	r4, r1
 801287a:	461e      	mov	r6, r3
 801287c:	f101 0c14 	add.w	ip, r1, #20
 8012880:	2000      	movs	r0, #0
 8012882:	f8dc 3000 	ldr.w	r3, [ip]
 8012886:	b299      	uxth	r1, r3
 8012888:	fb02 6101 	mla	r1, r2, r1, r6
 801288c:	0c1e      	lsrs	r6, r3, #16
 801288e:	0c0b      	lsrs	r3, r1, #16
 8012890:	fb02 3306 	mla	r3, r2, r6, r3
 8012894:	b289      	uxth	r1, r1
 8012896:	3001      	adds	r0, #1
 8012898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801289c:	4285      	cmp	r5, r0
 801289e:	f84c 1b04 	str.w	r1, [ip], #4
 80128a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128a6:	dcec      	bgt.n	8012882 <__multadd+0x12>
 80128a8:	b30e      	cbz	r6, 80128ee <__multadd+0x7e>
 80128aa:	68a3      	ldr	r3, [r4, #8]
 80128ac:	42ab      	cmp	r3, r5
 80128ae:	dc19      	bgt.n	80128e4 <__multadd+0x74>
 80128b0:	6861      	ldr	r1, [r4, #4]
 80128b2:	4638      	mov	r0, r7
 80128b4:	3101      	adds	r1, #1
 80128b6:	f7ff ffad 	bl	8012814 <_Balloc>
 80128ba:	4680      	mov	r8, r0
 80128bc:	b928      	cbnz	r0, 80128ca <__multadd+0x5a>
 80128be:	4602      	mov	r2, r0
 80128c0:	4b0c      	ldr	r3, [pc, #48]	@ (80128f4 <__multadd+0x84>)
 80128c2:	480d      	ldr	r0, [pc, #52]	@ (80128f8 <__multadd+0x88>)
 80128c4:	21ba      	movs	r1, #186	@ 0xba
 80128c6:	f000 fd0b 	bl	80132e0 <__assert_func>
 80128ca:	6922      	ldr	r2, [r4, #16]
 80128cc:	3202      	adds	r2, #2
 80128ce:	f104 010c 	add.w	r1, r4, #12
 80128d2:	0092      	lsls	r2, r2, #2
 80128d4:	300c      	adds	r0, #12
 80128d6:	f7fd fa55 	bl	800fd84 <memcpy>
 80128da:	4621      	mov	r1, r4
 80128dc:	4638      	mov	r0, r7
 80128de:	f7ff ffbe 	bl	801285e <_Bfree>
 80128e2:	4644      	mov	r4, r8
 80128e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80128e8:	3501      	adds	r5, #1
 80128ea:	615e      	str	r6, [r3, #20]
 80128ec:	6125      	str	r5, [r4, #16]
 80128ee:	4620      	mov	r0, r4
 80128f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f4:	0801521f 	.word	0x0801521f
 80128f8:	08015288 	.word	0x08015288

080128fc <__hi0bits>:
 80128fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012900:	4603      	mov	r3, r0
 8012902:	bf36      	itet	cc
 8012904:	0403      	lslcc	r3, r0, #16
 8012906:	2000      	movcs	r0, #0
 8012908:	2010      	movcc	r0, #16
 801290a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801290e:	bf3c      	itt	cc
 8012910:	021b      	lslcc	r3, r3, #8
 8012912:	3008      	addcc	r0, #8
 8012914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012918:	bf3c      	itt	cc
 801291a:	011b      	lslcc	r3, r3, #4
 801291c:	3004      	addcc	r0, #4
 801291e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012922:	bf3c      	itt	cc
 8012924:	009b      	lslcc	r3, r3, #2
 8012926:	3002      	addcc	r0, #2
 8012928:	2b00      	cmp	r3, #0
 801292a:	db05      	blt.n	8012938 <__hi0bits+0x3c>
 801292c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012930:	f100 0001 	add.w	r0, r0, #1
 8012934:	bf08      	it	eq
 8012936:	2020      	moveq	r0, #32
 8012938:	4770      	bx	lr

0801293a <__lo0bits>:
 801293a:	6803      	ldr	r3, [r0, #0]
 801293c:	4602      	mov	r2, r0
 801293e:	f013 0007 	ands.w	r0, r3, #7
 8012942:	d00b      	beq.n	801295c <__lo0bits+0x22>
 8012944:	07d9      	lsls	r1, r3, #31
 8012946:	d421      	bmi.n	801298c <__lo0bits+0x52>
 8012948:	0798      	lsls	r0, r3, #30
 801294a:	bf49      	itett	mi
 801294c:	085b      	lsrmi	r3, r3, #1
 801294e:	089b      	lsrpl	r3, r3, #2
 8012950:	2001      	movmi	r0, #1
 8012952:	6013      	strmi	r3, [r2, #0]
 8012954:	bf5c      	itt	pl
 8012956:	6013      	strpl	r3, [r2, #0]
 8012958:	2002      	movpl	r0, #2
 801295a:	4770      	bx	lr
 801295c:	b299      	uxth	r1, r3
 801295e:	b909      	cbnz	r1, 8012964 <__lo0bits+0x2a>
 8012960:	0c1b      	lsrs	r3, r3, #16
 8012962:	2010      	movs	r0, #16
 8012964:	b2d9      	uxtb	r1, r3
 8012966:	b909      	cbnz	r1, 801296c <__lo0bits+0x32>
 8012968:	3008      	adds	r0, #8
 801296a:	0a1b      	lsrs	r3, r3, #8
 801296c:	0719      	lsls	r1, r3, #28
 801296e:	bf04      	itt	eq
 8012970:	091b      	lsreq	r3, r3, #4
 8012972:	3004      	addeq	r0, #4
 8012974:	0799      	lsls	r1, r3, #30
 8012976:	bf04      	itt	eq
 8012978:	089b      	lsreq	r3, r3, #2
 801297a:	3002      	addeq	r0, #2
 801297c:	07d9      	lsls	r1, r3, #31
 801297e:	d403      	bmi.n	8012988 <__lo0bits+0x4e>
 8012980:	085b      	lsrs	r3, r3, #1
 8012982:	f100 0001 	add.w	r0, r0, #1
 8012986:	d003      	beq.n	8012990 <__lo0bits+0x56>
 8012988:	6013      	str	r3, [r2, #0]
 801298a:	4770      	bx	lr
 801298c:	2000      	movs	r0, #0
 801298e:	4770      	bx	lr
 8012990:	2020      	movs	r0, #32
 8012992:	4770      	bx	lr

08012994 <__i2b>:
 8012994:	b510      	push	{r4, lr}
 8012996:	460c      	mov	r4, r1
 8012998:	2101      	movs	r1, #1
 801299a:	f7ff ff3b 	bl	8012814 <_Balloc>
 801299e:	4602      	mov	r2, r0
 80129a0:	b928      	cbnz	r0, 80129ae <__i2b+0x1a>
 80129a2:	4b05      	ldr	r3, [pc, #20]	@ (80129b8 <__i2b+0x24>)
 80129a4:	4805      	ldr	r0, [pc, #20]	@ (80129bc <__i2b+0x28>)
 80129a6:	f240 1145 	movw	r1, #325	@ 0x145
 80129aa:	f000 fc99 	bl	80132e0 <__assert_func>
 80129ae:	2301      	movs	r3, #1
 80129b0:	6144      	str	r4, [r0, #20]
 80129b2:	6103      	str	r3, [r0, #16]
 80129b4:	bd10      	pop	{r4, pc}
 80129b6:	bf00      	nop
 80129b8:	0801521f 	.word	0x0801521f
 80129bc:	08015288 	.word	0x08015288

080129c0 <__multiply>:
 80129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c4:	4614      	mov	r4, r2
 80129c6:	690a      	ldr	r2, [r1, #16]
 80129c8:	6923      	ldr	r3, [r4, #16]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	bfa8      	it	ge
 80129ce:	4623      	movge	r3, r4
 80129d0:	460f      	mov	r7, r1
 80129d2:	bfa4      	itt	ge
 80129d4:	460c      	movge	r4, r1
 80129d6:	461f      	movge	r7, r3
 80129d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80129dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80129e0:	68a3      	ldr	r3, [r4, #8]
 80129e2:	6861      	ldr	r1, [r4, #4]
 80129e4:	eb0a 0609 	add.w	r6, sl, r9
 80129e8:	42b3      	cmp	r3, r6
 80129ea:	b085      	sub	sp, #20
 80129ec:	bfb8      	it	lt
 80129ee:	3101      	addlt	r1, #1
 80129f0:	f7ff ff10 	bl	8012814 <_Balloc>
 80129f4:	b930      	cbnz	r0, 8012a04 <__multiply+0x44>
 80129f6:	4602      	mov	r2, r0
 80129f8:	4b44      	ldr	r3, [pc, #272]	@ (8012b0c <__multiply+0x14c>)
 80129fa:	4845      	ldr	r0, [pc, #276]	@ (8012b10 <__multiply+0x150>)
 80129fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a00:	f000 fc6e 	bl	80132e0 <__assert_func>
 8012a04:	f100 0514 	add.w	r5, r0, #20
 8012a08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	2200      	movs	r2, #0
 8012a10:	4543      	cmp	r3, r8
 8012a12:	d321      	bcc.n	8012a58 <__multiply+0x98>
 8012a14:	f107 0114 	add.w	r1, r7, #20
 8012a18:	f104 0214 	add.w	r2, r4, #20
 8012a1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012a20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012a24:	9302      	str	r3, [sp, #8]
 8012a26:	1b13      	subs	r3, r2, r4
 8012a28:	3b15      	subs	r3, #21
 8012a2a:	f023 0303 	bic.w	r3, r3, #3
 8012a2e:	3304      	adds	r3, #4
 8012a30:	f104 0715 	add.w	r7, r4, #21
 8012a34:	42ba      	cmp	r2, r7
 8012a36:	bf38      	it	cc
 8012a38:	2304      	movcc	r3, #4
 8012a3a:	9301      	str	r3, [sp, #4]
 8012a3c:	9b02      	ldr	r3, [sp, #8]
 8012a3e:	9103      	str	r1, [sp, #12]
 8012a40:	428b      	cmp	r3, r1
 8012a42:	d80c      	bhi.n	8012a5e <__multiply+0x9e>
 8012a44:	2e00      	cmp	r6, #0
 8012a46:	dd03      	ble.n	8012a50 <__multiply+0x90>
 8012a48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d05b      	beq.n	8012b08 <__multiply+0x148>
 8012a50:	6106      	str	r6, [r0, #16]
 8012a52:	b005      	add	sp, #20
 8012a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a58:	f843 2b04 	str.w	r2, [r3], #4
 8012a5c:	e7d8      	b.n	8012a10 <__multiply+0x50>
 8012a5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012a62:	f1ba 0f00 	cmp.w	sl, #0
 8012a66:	d024      	beq.n	8012ab2 <__multiply+0xf2>
 8012a68:	f104 0e14 	add.w	lr, r4, #20
 8012a6c:	46a9      	mov	r9, r5
 8012a6e:	f04f 0c00 	mov.w	ip, #0
 8012a72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a76:	f8d9 3000 	ldr.w	r3, [r9]
 8012a7a:	fa1f fb87 	uxth.w	fp, r7
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	fb0a 330b 	mla	r3, sl, fp, r3
 8012a84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012a88:	f8d9 7000 	ldr.w	r7, [r9]
 8012a8c:	4463      	add	r3, ip
 8012a8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012a92:	fb0a c70b 	mla	r7, sl, fp, ip
 8012a96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012aa0:	4572      	cmp	r2, lr
 8012aa2:	f849 3b04 	str.w	r3, [r9], #4
 8012aa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012aaa:	d8e2      	bhi.n	8012a72 <__multiply+0xb2>
 8012aac:	9b01      	ldr	r3, [sp, #4]
 8012aae:	f845 c003 	str.w	ip, [r5, r3]
 8012ab2:	9b03      	ldr	r3, [sp, #12]
 8012ab4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ab8:	3104      	adds	r1, #4
 8012aba:	f1b9 0f00 	cmp.w	r9, #0
 8012abe:	d021      	beq.n	8012b04 <__multiply+0x144>
 8012ac0:	682b      	ldr	r3, [r5, #0]
 8012ac2:	f104 0c14 	add.w	ip, r4, #20
 8012ac6:	46ae      	mov	lr, r5
 8012ac8:	f04f 0a00 	mov.w	sl, #0
 8012acc:	f8bc b000 	ldrh.w	fp, [ip]
 8012ad0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012ad4:	fb09 770b 	mla	r7, r9, fp, r7
 8012ad8:	4457      	add	r7, sl
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ae0:	f84e 3b04 	str.w	r3, [lr], #4
 8012ae4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012ae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012aec:	f8be 3000 	ldrh.w	r3, [lr]
 8012af0:	fb09 330a 	mla	r3, r9, sl, r3
 8012af4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012af8:	4562      	cmp	r2, ip
 8012afa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012afe:	d8e5      	bhi.n	8012acc <__multiply+0x10c>
 8012b00:	9f01      	ldr	r7, [sp, #4]
 8012b02:	51eb      	str	r3, [r5, r7]
 8012b04:	3504      	adds	r5, #4
 8012b06:	e799      	b.n	8012a3c <__multiply+0x7c>
 8012b08:	3e01      	subs	r6, #1
 8012b0a:	e79b      	b.n	8012a44 <__multiply+0x84>
 8012b0c:	0801521f 	.word	0x0801521f
 8012b10:	08015288 	.word	0x08015288

08012b14 <__pow5mult>:
 8012b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b18:	4615      	mov	r5, r2
 8012b1a:	f012 0203 	ands.w	r2, r2, #3
 8012b1e:	4607      	mov	r7, r0
 8012b20:	460e      	mov	r6, r1
 8012b22:	d007      	beq.n	8012b34 <__pow5mult+0x20>
 8012b24:	4c1a      	ldr	r4, [pc, #104]	@ (8012b90 <__pow5mult+0x7c>)
 8012b26:	3a01      	subs	r2, #1
 8012b28:	2300      	movs	r3, #0
 8012b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b2e:	f7ff fe9f 	bl	8012870 <__multadd>
 8012b32:	4606      	mov	r6, r0
 8012b34:	10ad      	asrs	r5, r5, #2
 8012b36:	d027      	beq.n	8012b88 <__pow5mult+0x74>
 8012b38:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8012b3a:	b944      	cbnz	r4, 8012b4e <__pow5mult+0x3a>
 8012b3c:	f240 2171 	movw	r1, #625	@ 0x271
 8012b40:	4638      	mov	r0, r7
 8012b42:	f7ff ff27 	bl	8012994 <__i2b>
 8012b46:	2300      	movs	r3, #0
 8012b48:	6438      	str	r0, [r7, #64]	@ 0x40
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	6003      	str	r3, [r0, #0]
 8012b4e:	f04f 0900 	mov.w	r9, #0
 8012b52:	07eb      	lsls	r3, r5, #31
 8012b54:	d50a      	bpl.n	8012b6c <__pow5mult+0x58>
 8012b56:	4631      	mov	r1, r6
 8012b58:	4622      	mov	r2, r4
 8012b5a:	4638      	mov	r0, r7
 8012b5c:	f7ff ff30 	bl	80129c0 <__multiply>
 8012b60:	4631      	mov	r1, r6
 8012b62:	4680      	mov	r8, r0
 8012b64:	4638      	mov	r0, r7
 8012b66:	f7ff fe7a 	bl	801285e <_Bfree>
 8012b6a:	4646      	mov	r6, r8
 8012b6c:	106d      	asrs	r5, r5, #1
 8012b6e:	d00b      	beq.n	8012b88 <__pow5mult+0x74>
 8012b70:	6820      	ldr	r0, [r4, #0]
 8012b72:	b938      	cbnz	r0, 8012b84 <__pow5mult+0x70>
 8012b74:	4622      	mov	r2, r4
 8012b76:	4621      	mov	r1, r4
 8012b78:	4638      	mov	r0, r7
 8012b7a:	f7ff ff21 	bl	80129c0 <__multiply>
 8012b7e:	6020      	str	r0, [r4, #0]
 8012b80:	f8c0 9000 	str.w	r9, [r0]
 8012b84:	4604      	mov	r4, r0
 8012b86:	e7e4      	b.n	8012b52 <__pow5mult+0x3e>
 8012b88:	4630      	mov	r0, r6
 8012b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b8e:	bf00      	nop
 8012b90:	080152e4 	.word	0x080152e4

08012b94 <__lshift>:
 8012b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b98:	460c      	mov	r4, r1
 8012b9a:	6849      	ldr	r1, [r1, #4]
 8012b9c:	6923      	ldr	r3, [r4, #16]
 8012b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012ba2:	68a3      	ldr	r3, [r4, #8]
 8012ba4:	4607      	mov	r7, r0
 8012ba6:	4691      	mov	r9, r2
 8012ba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bac:	f108 0601 	add.w	r6, r8, #1
 8012bb0:	42b3      	cmp	r3, r6
 8012bb2:	db0b      	blt.n	8012bcc <__lshift+0x38>
 8012bb4:	4638      	mov	r0, r7
 8012bb6:	f7ff fe2d 	bl	8012814 <_Balloc>
 8012bba:	4605      	mov	r5, r0
 8012bbc:	b948      	cbnz	r0, 8012bd2 <__lshift+0x3e>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	4b28      	ldr	r3, [pc, #160]	@ (8012c64 <__lshift+0xd0>)
 8012bc2:	4829      	ldr	r0, [pc, #164]	@ (8012c68 <__lshift+0xd4>)
 8012bc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012bc8:	f000 fb8a 	bl	80132e0 <__assert_func>
 8012bcc:	3101      	adds	r1, #1
 8012bce:	005b      	lsls	r3, r3, #1
 8012bd0:	e7ee      	b.n	8012bb0 <__lshift+0x1c>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	f100 0114 	add.w	r1, r0, #20
 8012bd8:	f100 0210 	add.w	r2, r0, #16
 8012bdc:	4618      	mov	r0, r3
 8012bde:	4553      	cmp	r3, sl
 8012be0:	db33      	blt.n	8012c4a <__lshift+0xb6>
 8012be2:	6920      	ldr	r0, [r4, #16]
 8012be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012be8:	f104 0314 	add.w	r3, r4, #20
 8012bec:	f019 091f 	ands.w	r9, r9, #31
 8012bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012bf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012bf8:	d02b      	beq.n	8012c52 <__lshift+0xbe>
 8012bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8012bfe:	468a      	mov	sl, r1
 8012c00:	2200      	movs	r2, #0
 8012c02:	6818      	ldr	r0, [r3, #0]
 8012c04:	fa00 f009 	lsl.w	r0, r0, r9
 8012c08:	4310      	orrs	r0, r2
 8012c0a:	f84a 0b04 	str.w	r0, [sl], #4
 8012c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c12:	459c      	cmp	ip, r3
 8012c14:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c18:	d8f3      	bhi.n	8012c02 <__lshift+0x6e>
 8012c1a:	ebac 0304 	sub.w	r3, ip, r4
 8012c1e:	3b15      	subs	r3, #21
 8012c20:	f023 0303 	bic.w	r3, r3, #3
 8012c24:	3304      	adds	r3, #4
 8012c26:	f104 0015 	add.w	r0, r4, #21
 8012c2a:	4584      	cmp	ip, r0
 8012c2c:	bf38      	it	cc
 8012c2e:	2304      	movcc	r3, #4
 8012c30:	50ca      	str	r2, [r1, r3]
 8012c32:	b10a      	cbz	r2, 8012c38 <__lshift+0xa4>
 8012c34:	f108 0602 	add.w	r6, r8, #2
 8012c38:	3e01      	subs	r6, #1
 8012c3a:	4638      	mov	r0, r7
 8012c3c:	612e      	str	r6, [r5, #16]
 8012c3e:	4621      	mov	r1, r4
 8012c40:	f7ff fe0d 	bl	801285e <_Bfree>
 8012c44:	4628      	mov	r0, r5
 8012c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c4e:	3301      	adds	r3, #1
 8012c50:	e7c5      	b.n	8012bde <__lshift+0x4a>
 8012c52:	3904      	subs	r1, #4
 8012c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c58:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c5c:	459c      	cmp	ip, r3
 8012c5e:	d8f9      	bhi.n	8012c54 <__lshift+0xc0>
 8012c60:	e7ea      	b.n	8012c38 <__lshift+0xa4>
 8012c62:	bf00      	nop
 8012c64:	0801521f 	.word	0x0801521f
 8012c68:	08015288 	.word	0x08015288

08012c6c <__mcmp>:
 8012c6c:	690a      	ldr	r2, [r1, #16]
 8012c6e:	4603      	mov	r3, r0
 8012c70:	6900      	ldr	r0, [r0, #16]
 8012c72:	1a80      	subs	r0, r0, r2
 8012c74:	b530      	push	{r4, r5, lr}
 8012c76:	d10e      	bne.n	8012c96 <__mcmp+0x2a>
 8012c78:	3314      	adds	r3, #20
 8012c7a:	3114      	adds	r1, #20
 8012c7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012c80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c8c:	4295      	cmp	r5, r2
 8012c8e:	d003      	beq.n	8012c98 <__mcmp+0x2c>
 8012c90:	d205      	bcs.n	8012c9e <__mcmp+0x32>
 8012c92:	f04f 30ff 	mov.w	r0, #4294967295
 8012c96:	bd30      	pop	{r4, r5, pc}
 8012c98:	42a3      	cmp	r3, r4
 8012c9a:	d3f3      	bcc.n	8012c84 <__mcmp+0x18>
 8012c9c:	e7fb      	b.n	8012c96 <__mcmp+0x2a>
 8012c9e:	2001      	movs	r0, #1
 8012ca0:	e7f9      	b.n	8012c96 <__mcmp+0x2a>
	...

08012ca4 <__mdiff>:
 8012ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca8:	4689      	mov	r9, r1
 8012caa:	4606      	mov	r6, r0
 8012cac:	4611      	mov	r1, r2
 8012cae:	4648      	mov	r0, r9
 8012cb0:	4614      	mov	r4, r2
 8012cb2:	f7ff ffdb 	bl	8012c6c <__mcmp>
 8012cb6:	1e05      	subs	r5, r0, #0
 8012cb8:	d112      	bne.n	8012ce0 <__mdiff+0x3c>
 8012cba:	4629      	mov	r1, r5
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f7ff fda9 	bl	8012814 <_Balloc>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	b928      	cbnz	r0, 8012cd2 <__mdiff+0x2e>
 8012cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8012dc4 <__mdiff+0x120>)
 8012cc8:	f240 2137 	movw	r1, #567	@ 0x237
 8012ccc:	483e      	ldr	r0, [pc, #248]	@ (8012dc8 <__mdiff+0x124>)
 8012cce:	f000 fb07 	bl	80132e0 <__assert_func>
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012cd8:	4610      	mov	r0, r2
 8012cda:	b003      	add	sp, #12
 8012cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce0:	bfbc      	itt	lt
 8012ce2:	464b      	movlt	r3, r9
 8012ce4:	46a1      	movlt	r9, r4
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012cec:	bfba      	itte	lt
 8012cee:	461c      	movlt	r4, r3
 8012cf0:	2501      	movlt	r5, #1
 8012cf2:	2500      	movge	r5, #0
 8012cf4:	f7ff fd8e 	bl	8012814 <_Balloc>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	b918      	cbnz	r0, 8012d04 <__mdiff+0x60>
 8012cfc:	4b31      	ldr	r3, [pc, #196]	@ (8012dc4 <__mdiff+0x120>)
 8012cfe:	f240 2145 	movw	r1, #581	@ 0x245
 8012d02:	e7e3      	b.n	8012ccc <__mdiff+0x28>
 8012d04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012d08:	6926      	ldr	r6, [r4, #16]
 8012d0a:	60c5      	str	r5, [r0, #12]
 8012d0c:	f109 0310 	add.w	r3, r9, #16
 8012d10:	f109 0514 	add.w	r5, r9, #20
 8012d14:	f104 0e14 	add.w	lr, r4, #20
 8012d18:	f100 0b14 	add.w	fp, r0, #20
 8012d1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012d20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012d24:	9301      	str	r3, [sp, #4]
 8012d26:	46d9      	mov	r9, fp
 8012d28:	f04f 0c00 	mov.w	ip, #0
 8012d2c:	9b01      	ldr	r3, [sp, #4]
 8012d2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012d32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012d36:	9301      	str	r3, [sp, #4]
 8012d38:	fa1f f38a 	uxth.w	r3, sl
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	b283      	uxth	r3, r0
 8012d40:	1acb      	subs	r3, r1, r3
 8012d42:	0c00      	lsrs	r0, r0, #16
 8012d44:	4463      	add	r3, ip
 8012d46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012d4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012d54:	4576      	cmp	r6, lr
 8012d56:	f849 3b04 	str.w	r3, [r9], #4
 8012d5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d5e:	d8e5      	bhi.n	8012d2c <__mdiff+0x88>
 8012d60:	1b33      	subs	r3, r6, r4
 8012d62:	3b15      	subs	r3, #21
 8012d64:	f023 0303 	bic.w	r3, r3, #3
 8012d68:	3415      	adds	r4, #21
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	42a6      	cmp	r6, r4
 8012d6e:	bf38      	it	cc
 8012d70:	2304      	movcc	r3, #4
 8012d72:	441d      	add	r5, r3
 8012d74:	445b      	add	r3, fp
 8012d76:	461e      	mov	r6, r3
 8012d78:	462c      	mov	r4, r5
 8012d7a:	4544      	cmp	r4, r8
 8012d7c:	d30e      	bcc.n	8012d9c <__mdiff+0xf8>
 8012d7e:	f108 0103 	add.w	r1, r8, #3
 8012d82:	1b49      	subs	r1, r1, r5
 8012d84:	f021 0103 	bic.w	r1, r1, #3
 8012d88:	3d03      	subs	r5, #3
 8012d8a:	45a8      	cmp	r8, r5
 8012d8c:	bf38      	it	cc
 8012d8e:	2100      	movcc	r1, #0
 8012d90:	440b      	add	r3, r1
 8012d92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d96:	b191      	cbz	r1, 8012dbe <__mdiff+0x11a>
 8012d98:	6117      	str	r7, [r2, #16]
 8012d9a:	e79d      	b.n	8012cd8 <__mdiff+0x34>
 8012d9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012da0:	46e6      	mov	lr, ip
 8012da2:	0c08      	lsrs	r0, r1, #16
 8012da4:	fa1c fc81 	uxtah	ip, ip, r1
 8012da8:	4471      	add	r1, lr
 8012daa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012dae:	b289      	uxth	r1, r1
 8012db0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012db4:	f846 1b04 	str.w	r1, [r6], #4
 8012db8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012dbc:	e7dd      	b.n	8012d7a <__mdiff+0xd6>
 8012dbe:	3f01      	subs	r7, #1
 8012dc0:	e7e7      	b.n	8012d92 <__mdiff+0xee>
 8012dc2:	bf00      	nop
 8012dc4:	0801521f 	.word	0x0801521f
 8012dc8:	08015288 	.word	0x08015288

08012dcc <__d2b>:
 8012dcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012dd0:	460f      	mov	r7, r1
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	ec59 8b10 	vmov	r8, r9, d0
 8012dd8:	4616      	mov	r6, r2
 8012dda:	f7ff fd1b 	bl	8012814 <_Balloc>
 8012dde:	4604      	mov	r4, r0
 8012de0:	b930      	cbnz	r0, 8012df0 <__d2b+0x24>
 8012de2:	4602      	mov	r2, r0
 8012de4:	4b23      	ldr	r3, [pc, #140]	@ (8012e74 <__d2b+0xa8>)
 8012de6:	4824      	ldr	r0, [pc, #144]	@ (8012e78 <__d2b+0xac>)
 8012de8:	f240 310f 	movw	r1, #783	@ 0x30f
 8012dec:	f000 fa78 	bl	80132e0 <__assert_func>
 8012df0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012df4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012df8:	b10d      	cbz	r5, 8012dfe <__d2b+0x32>
 8012dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	f1b8 0300 	subs.w	r3, r8, #0
 8012e04:	d023      	beq.n	8012e4e <__d2b+0x82>
 8012e06:	4668      	mov	r0, sp
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	f7ff fd96 	bl	801293a <__lo0bits>
 8012e0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e12:	b1d0      	cbz	r0, 8012e4a <__d2b+0x7e>
 8012e14:	f1c0 0320 	rsb	r3, r0, #32
 8012e18:	fa02 f303 	lsl.w	r3, r2, r3
 8012e1c:	430b      	orrs	r3, r1
 8012e1e:	40c2      	lsrs	r2, r0
 8012e20:	6163      	str	r3, [r4, #20]
 8012e22:	9201      	str	r2, [sp, #4]
 8012e24:	9b01      	ldr	r3, [sp, #4]
 8012e26:	61a3      	str	r3, [r4, #24]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	bf0c      	ite	eq
 8012e2c:	2201      	moveq	r2, #1
 8012e2e:	2202      	movne	r2, #2
 8012e30:	6122      	str	r2, [r4, #16]
 8012e32:	b1a5      	cbz	r5, 8012e5e <__d2b+0x92>
 8012e34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012e38:	4405      	add	r5, r0
 8012e3a:	603d      	str	r5, [r7, #0]
 8012e3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012e40:	6030      	str	r0, [r6, #0]
 8012e42:	4620      	mov	r0, r4
 8012e44:	b003      	add	sp, #12
 8012e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e4a:	6161      	str	r1, [r4, #20]
 8012e4c:	e7ea      	b.n	8012e24 <__d2b+0x58>
 8012e4e:	a801      	add	r0, sp, #4
 8012e50:	f7ff fd73 	bl	801293a <__lo0bits>
 8012e54:	9b01      	ldr	r3, [sp, #4]
 8012e56:	6163      	str	r3, [r4, #20]
 8012e58:	3020      	adds	r0, #32
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	e7e8      	b.n	8012e30 <__d2b+0x64>
 8012e5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012e66:	6038      	str	r0, [r7, #0]
 8012e68:	6918      	ldr	r0, [r3, #16]
 8012e6a:	f7ff fd47 	bl	80128fc <__hi0bits>
 8012e6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e72:	e7e5      	b.n	8012e40 <__d2b+0x74>
 8012e74:	0801521f 	.word	0x0801521f
 8012e78:	08015288 	.word	0x08015288

08012e7c <_realloc_r>:
 8012e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e80:	4682      	mov	sl, r0
 8012e82:	4693      	mov	fp, r2
 8012e84:	460c      	mov	r4, r1
 8012e86:	b929      	cbnz	r1, 8012e94 <_realloc_r+0x18>
 8012e88:	4611      	mov	r1, r2
 8012e8a:	b003      	add	sp, #12
 8012e8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e90:	f7fc ba40 	b.w	800f314 <_malloc_r>
 8012e94:	f7fc fc78 	bl	800f788 <__malloc_lock>
 8012e98:	f10b 080b 	add.w	r8, fp, #11
 8012e9c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012ea0:	f1b8 0f16 	cmp.w	r8, #22
 8012ea4:	f1a4 0908 	sub.w	r9, r4, #8
 8012ea8:	f025 0603 	bic.w	r6, r5, #3
 8012eac:	d908      	bls.n	8012ec0 <_realloc_r+0x44>
 8012eae:	f038 0807 	bics.w	r8, r8, #7
 8012eb2:	d507      	bpl.n	8012ec4 <_realloc_r+0x48>
 8012eb4:	230c      	movs	r3, #12
 8012eb6:	f8ca 3000 	str.w	r3, [sl]
 8012eba:	f04f 0b00 	mov.w	fp, #0
 8012ebe:	e032      	b.n	8012f26 <_realloc_r+0xaa>
 8012ec0:	f04f 0810 	mov.w	r8, #16
 8012ec4:	45c3      	cmp	fp, r8
 8012ec6:	d8f5      	bhi.n	8012eb4 <_realloc_r+0x38>
 8012ec8:	4546      	cmp	r6, r8
 8012eca:	f280 8174 	bge.w	80131b6 <_realloc_r+0x33a>
 8012ece:	4b9e      	ldr	r3, [pc, #632]	@ (8013148 <_realloc_r+0x2cc>)
 8012ed0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8012ed4:	eb09 0106 	add.w	r1, r9, r6
 8012ed8:	458c      	cmp	ip, r1
 8012eda:	6848      	ldr	r0, [r1, #4]
 8012edc:	d005      	beq.n	8012eea <_realloc_r+0x6e>
 8012ede:	f020 0201 	bic.w	r2, r0, #1
 8012ee2:	440a      	add	r2, r1
 8012ee4:	6852      	ldr	r2, [r2, #4]
 8012ee6:	07d7      	lsls	r7, r2, #31
 8012ee8:	d449      	bmi.n	8012f7e <_realloc_r+0x102>
 8012eea:	f020 0003 	bic.w	r0, r0, #3
 8012eee:	458c      	cmp	ip, r1
 8012ef0:	eb06 0700 	add.w	r7, r6, r0
 8012ef4:	d11b      	bne.n	8012f2e <_realloc_r+0xb2>
 8012ef6:	f108 0210 	add.w	r2, r8, #16
 8012efa:	42ba      	cmp	r2, r7
 8012efc:	dc41      	bgt.n	8012f82 <_realloc_r+0x106>
 8012efe:	eb09 0208 	add.w	r2, r9, r8
 8012f02:	eba7 0708 	sub.w	r7, r7, r8
 8012f06:	f047 0701 	orr.w	r7, r7, #1
 8012f0a:	609a      	str	r2, [r3, #8]
 8012f0c:	6057      	str	r7, [r2, #4]
 8012f0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012f12:	f003 0301 	and.w	r3, r3, #1
 8012f16:	ea43 0308 	orr.w	r3, r3, r8
 8012f1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f1e:	4650      	mov	r0, sl
 8012f20:	f7fc fc38 	bl	800f794 <__malloc_unlock>
 8012f24:	46a3      	mov	fp, r4
 8012f26:	4658      	mov	r0, fp
 8012f28:	b003      	add	sp, #12
 8012f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2e:	45b8      	cmp	r8, r7
 8012f30:	dc27      	bgt.n	8012f82 <_realloc_r+0x106>
 8012f32:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012f36:	60d3      	str	r3, [r2, #12]
 8012f38:	609a      	str	r2, [r3, #8]
 8012f3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012f3e:	eba7 0008 	sub.w	r0, r7, r8
 8012f42:	280f      	cmp	r0, #15
 8012f44:	f003 0301 	and.w	r3, r3, #1
 8012f48:	eb09 0207 	add.w	r2, r9, r7
 8012f4c:	f240 8135 	bls.w	80131ba <_realloc_r+0x33e>
 8012f50:	eb09 0108 	add.w	r1, r9, r8
 8012f54:	ea48 0303 	orr.w	r3, r8, r3
 8012f58:	f040 0001 	orr.w	r0, r0, #1
 8012f5c:	f8c9 3004 	str.w	r3, [r9, #4]
 8012f60:	6048      	str	r0, [r1, #4]
 8012f62:	6853      	ldr	r3, [r2, #4]
 8012f64:	f043 0301 	orr.w	r3, r3, #1
 8012f68:	6053      	str	r3, [r2, #4]
 8012f6a:	3108      	adds	r1, #8
 8012f6c:	4650      	mov	r0, sl
 8012f6e:	f7fc ff7d 	bl	800fe6c <_free_r>
 8012f72:	4650      	mov	r0, sl
 8012f74:	f7fc fc0e 	bl	800f794 <__malloc_unlock>
 8012f78:	f109 0b08 	add.w	fp, r9, #8
 8012f7c:	e7d3      	b.n	8012f26 <_realloc_r+0xaa>
 8012f7e:	2000      	movs	r0, #0
 8012f80:	4601      	mov	r1, r0
 8012f82:	07ea      	lsls	r2, r5, #31
 8012f84:	f100 80c7 	bmi.w	8013116 <_realloc_r+0x29a>
 8012f88:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8012f8c:	eba9 0505 	sub.w	r5, r9, r5
 8012f90:	686a      	ldr	r2, [r5, #4]
 8012f92:	f022 0203 	bic.w	r2, r2, #3
 8012f96:	4432      	add	r2, r6
 8012f98:	9201      	str	r2, [sp, #4]
 8012f9a:	2900      	cmp	r1, #0
 8012f9c:	f000 8086 	beq.w	80130ac <_realloc_r+0x230>
 8012fa0:	458c      	cmp	ip, r1
 8012fa2:	eb00 0702 	add.w	r7, r0, r2
 8012fa6:	d149      	bne.n	801303c <_realloc_r+0x1c0>
 8012fa8:	f108 0210 	add.w	r2, r8, #16
 8012fac:	42ba      	cmp	r2, r7
 8012fae:	dc7d      	bgt.n	80130ac <_realloc_r+0x230>
 8012fb0:	46ab      	mov	fp, r5
 8012fb2:	68ea      	ldr	r2, [r5, #12]
 8012fb4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8012fb8:	60ca      	str	r2, [r1, #12]
 8012fba:	6091      	str	r1, [r2, #8]
 8012fbc:	1f32      	subs	r2, r6, #4
 8012fbe:	2a24      	cmp	r2, #36	@ 0x24
 8012fc0:	d836      	bhi.n	8013030 <_realloc_r+0x1b4>
 8012fc2:	2a13      	cmp	r2, #19
 8012fc4:	d932      	bls.n	801302c <_realloc_r+0x1b0>
 8012fc6:	6821      	ldr	r1, [r4, #0]
 8012fc8:	60a9      	str	r1, [r5, #8]
 8012fca:	6861      	ldr	r1, [r4, #4]
 8012fcc:	60e9      	str	r1, [r5, #12]
 8012fce:	2a1b      	cmp	r2, #27
 8012fd0:	d81a      	bhi.n	8013008 <_realloc_r+0x18c>
 8012fd2:	3408      	adds	r4, #8
 8012fd4:	f105 0210 	add.w	r2, r5, #16
 8012fd8:	6821      	ldr	r1, [r4, #0]
 8012fda:	6011      	str	r1, [r2, #0]
 8012fdc:	6861      	ldr	r1, [r4, #4]
 8012fde:	6051      	str	r1, [r2, #4]
 8012fe0:	68a1      	ldr	r1, [r4, #8]
 8012fe2:	6091      	str	r1, [r2, #8]
 8012fe4:	eb05 0208 	add.w	r2, r5, r8
 8012fe8:	eba7 0708 	sub.w	r7, r7, r8
 8012fec:	f047 0701 	orr.w	r7, r7, #1
 8012ff0:	609a      	str	r2, [r3, #8]
 8012ff2:	6057      	str	r7, [r2, #4]
 8012ff4:	686b      	ldr	r3, [r5, #4]
 8012ff6:	f003 0301 	and.w	r3, r3, #1
 8012ffa:	ea43 0308 	orr.w	r3, r3, r8
 8012ffe:	606b      	str	r3, [r5, #4]
 8013000:	4650      	mov	r0, sl
 8013002:	f7fc fbc7 	bl	800f794 <__malloc_unlock>
 8013006:	e78e      	b.n	8012f26 <_realloc_r+0xaa>
 8013008:	68a1      	ldr	r1, [r4, #8]
 801300a:	6129      	str	r1, [r5, #16]
 801300c:	68e1      	ldr	r1, [r4, #12]
 801300e:	6169      	str	r1, [r5, #20]
 8013010:	2a24      	cmp	r2, #36	@ 0x24
 8013012:	bf01      	itttt	eq
 8013014:	6922      	ldreq	r2, [r4, #16]
 8013016:	61aa      	streq	r2, [r5, #24]
 8013018:	6961      	ldreq	r1, [r4, #20]
 801301a:	61e9      	streq	r1, [r5, #28]
 801301c:	bf19      	ittee	ne
 801301e:	3410      	addne	r4, #16
 8013020:	f105 0218 	addne.w	r2, r5, #24
 8013024:	f105 0220 	addeq.w	r2, r5, #32
 8013028:	3418      	addeq	r4, #24
 801302a:	e7d5      	b.n	8012fd8 <_realloc_r+0x15c>
 801302c:	465a      	mov	r2, fp
 801302e:	e7d3      	b.n	8012fd8 <_realloc_r+0x15c>
 8013030:	4621      	mov	r1, r4
 8013032:	4658      	mov	r0, fp
 8013034:	f7fe fcc4 	bl	80119c0 <memmove>
 8013038:	4b43      	ldr	r3, [pc, #268]	@ (8013148 <_realloc_r+0x2cc>)
 801303a:	e7d3      	b.n	8012fe4 <_realloc_r+0x168>
 801303c:	45b8      	cmp	r8, r7
 801303e:	dc35      	bgt.n	80130ac <_realloc_r+0x230>
 8013040:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8013044:	4628      	mov	r0, r5
 8013046:	60d3      	str	r3, [r2, #12]
 8013048:	609a      	str	r2, [r3, #8]
 801304a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801304e:	68eb      	ldr	r3, [r5, #12]
 8013050:	60d3      	str	r3, [r2, #12]
 8013052:	609a      	str	r2, [r3, #8]
 8013054:	1f32      	subs	r2, r6, #4
 8013056:	2a24      	cmp	r2, #36	@ 0x24
 8013058:	d824      	bhi.n	80130a4 <_realloc_r+0x228>
 801305a:	2a13      	cmp	r2, #19
 801305c:	d908      	bls.n	8013070 <_realloc_r+0x1f4>
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	60ab      	str	r3, [r5, #8]
 8013062:	6863      	ldr	r3, [r4, #4]
 8013064:	60eb      	str	r3, [r5, #12]
 8013066:	2a1b      	cmp	r2, #27
 8013068:	d80a      	bhi.n	8013080 <_realloc_r+0x204>
 801306a:	3408      	adds	r4, #8
 801306c:	f105 0010 	add.w	r0, r5, #16
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	6003      	str	r3, [r0, #0]
 8013074:	6863      	ldr	r3, [r4, #4]
 8013076:	6043      	str	r3, [r0, #4]
 8013078:	68a3      	ldr	r3, [r4, #8]
 801307a:	6083      	str	r3, [r0, #8]
 801307c:	46a9      	mov	r9, r5
 801307e:	e75c      	b.n	8012f3a <_realloc_r+0xbe>
 8013080:	68a3      	ldr	r3, [r4, #8]
 8013082:	612b      	str	r3, [r5, #16]
 8013084:	68e3      	ldr	r3, [r4, #12]
 8013086:	616b      	str	r3, [r5, #20]
 8013088:	2a24      	cmp	r2, #36	@ 0x24
 801308a:	bf01      	itttt	eq
 801308c:	6923      	ldreq	r3, [r4, #16]
 801308e:	61ab      	streq	r3, [r5, #24]
 8013090:	6963      	ldreq	r3, [r4, #20]
 8013092:	61eb      	streq	r3, [r5, #28]
 8013094:	bf19      	ittee	ne
 8013096:	3410      	addne	r4, #16
 8013098:	f105 0018 	addne.w	r0, r5, #24
 801309c:	f105 0020 	addeq.w	r0, r5, #32
 80130a0:	3418      	addeq	r4, #24
 80130a2:	e7e5      	b.n	8013070 <_realloc_r+0x1f4>
 80130a4:	4621      	mov	r1, r4
 80130a6:	f7fe fc8b 	bl	80119c0 <memmove>
 80130aa:	e7e7      	b.n	801307c <_realloc_r+0x200>
 80130ac:	9b01      	ldr	r3, [sp, #4]
 80130ae:	4598      	cmp	r8, r3
 80130b0:	dc31      	bgt.n	8013116 <_realloc_r+0x29a>
 80130b2:	4628      	mov	r0, r5
 80130b4:	68eb      	ldr	r3, [r5, #12]
 80130b6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80130ba:	60d3      	str	r3, [r2, #12]
 80130bc:	609a      	str	r2, [r3, #8]
 80130be:	1f32      	subs	r2, r6, #4
 80130c0:	2a24      	cmp	r2, #36	@ 0x24
 80130c2:	d824      	bhi.n	801310e <_realloc_r+0x292>
 80130c4:	2a13      	cmp	r2, #19
 80130c6:	d908      	bls.n	80130da <_realloc_r+0x25e>
 80130c8:	6823      	ldr	r3, [r4, #0]
 80130ca:	60ab      	str	r3, [r5, #8]
 80130cc:	6863      	ldr	r3, [r4, #4]
 80130ce:	60eb      	str	r3, [r5, #12]
 80130d0:	2a1b      	cmp	r2, #27
 80130d2:	d80a      	bhi.n	80130ea <_realloc_r+0x26e>
 80130d4:	3408      	adds	r4, #8
 80130d6:	f105 0010 	add.w	r0, r5, #16
 80130da:	6823      	ldr	r3, [r4, #0]
 80130dc:	6003      	str	r3, [r0, #0]
 80130de:	6863      	ldr	r3, [r4, #4]
 80130e0:	6043      	str	r3, [r0, #4]
 80130e2:	68a3      	ldr	r3, [r4, #8]
 80130e4:	6083      	str	r3, [r0, #8]
 80130e6:	9f01      	ldr	r7, [sp, #4]
 80130e8:	e7c8      	b.n	801307c <_realloc_r+0x200>
 80130ea:	68a3      	ldr	r3, [r4, #8]
 80130ec:	612b      	str	r3, [r5, #16]
 80130ee:	68e3      	ldr	r3, [r4, #12]
 80130f0:	616b      	str	r3, [r5, #20]
 80130f2:	2a24      	cmp	r2, #36	@ 0x24
 80130f4:	bf01      	itttt	eq
 80130f6:	6923      	ldreq	r3, [r4, #16]
 80130f8:	61ab      	streq	r3, [r5, #24]
 80130fa:	6963      	ldreq	r3, [r4, #20]
 80130fc:	61eb      	streq	r3, [r5, #28]
 80130fe:	bf19      	ittee	ne
 8013100:	3410      	addne	r4, #16
 8013102:	f105 0018 	addne.w	r0, r5, #24
 8013106:	f105 0020 	addeq.w	r0, r5, #32
 801310a:	3418      	addeq	r4, #24
 801310c:	e7e5      	b.n	80130da <_realloc_r+0x25e>
 801310e:	4621      	mov	r1, r4
 8013110:	f7fe fc56 	bl	80119c0 <memmove>
 8013114:	e7e7      	b.n	80130e6 <_realloc_r+0x26a>
 8013116:	4659      	mov	r1, fp
 8013118:	4650      	mov	r0, sl
 801311a:	f7fc f8fb 	bl	800f314 <_malloc_r>
 801311e:	4683      	mov	fp, r0
 8013120:	b918      	cbnz	r0, 801312a <_realloc_r+0x2ae>
 8013122:	4650      	mov	r0, sl
 8013124:	f7fc fb36 	bl	800f794 <__malloc_unlock>
 8013128:	e6c7      	b.n	8012eba <_realloc_r+0x3e>
 801312a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801312e:	f023 0301 	bic.w	r3, r3, #1
 8013132:	444b      	add	r3, r9
 8013134:	f1a0 0208 	sub.w	r2, r0, #8
 8013138:	4293      	cmp	r3, r2
 801313a:	d107      	bne.n	801314c <_realloc_r+0x2d0>
 801313c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8013140:	f027 0703 	bic.w	r7, r7, #3
 8013144:	4437      	add	r7, r6
 8013146:	e6f8      	b.n	8012f3a <_realloc_r+0xbe>
 8013148:	20000020 	.word	0x20000020
 801314c:	1f32      	subs	r2, r6, #4
 801314e:	2a24      	cmp	r2, #36	@ 0x24
 8013150:	d82d      	bhi.n	80131ae <_realloc_r+0x332>
 8013152:	2a13      	cmp	r2, #19
 8013154:	d928      	bls.n	80131a8 <_realloc_r+0x32c>
 8013156:	6823      	ldr	r3, [r4, #0]
 8013158:	6003      	str	r3, [r0, #0]
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	6043      	str	r3, [r0, #4]
 801315e:	2a1b      	cmp	r2, #27
 8013160:	d80e      	bhi.n	8013180 <_realloc_r+0x304>
 8013162:	f104 0208 	add.w	r2, r4, #8
 8013166:	f100 0308 	add.w	r3, r0, #8
 801316a:	6811      	ldr	r1, [r2, #0]
 801316c:	6019      	str	r1, [r3, #0]
 801316e:	6851      	ldr	r1, [r2, #4]
 8013170:	6059      	str	r1, [r3, #4]
 8013172:	6892      	ldr	r2, [r2, #8]
 8013174:	609a      	str	r2, [r3, #8]
 8013176:	4621      	mov	r1, r4
 8013178:	4650      	mov	r0, sl
 801317a:	f7fc fe77 	bl	800fe6c <_free_r>
 801317e:	e73f      	b.n	8013000 <_realloc_r+0x184>
 8013180:	68a3      	ldr	r3, [r4, #8]
 8013182:	6083      	str	r3, [r0, #8]
 8013184:	68e3      	ldr	r3, [r4, #12]
 8013186:	60c3      	str	r3, [r0, #12]
 8013188:	2a24      	cmp	r2, #36	@ 0x24
 801318a:	bf01      	itttt	eq
 801318c:	6923      	ldreq	r3, [r4, #16]
 801318e:	6103      	streq	r3, [r0, #16]
 8013190:	6961      	ldreq	r1, [r4, #20]
 8013192:	6141      	streq	r1, [r0, #20]
 8013194:	bf19      	ittee	ne
 8013196:	f104 0210 	addne.w	r2, r4, #16
 801319a:	f100 0310 	addne.w	r3, r0, #16
 801319e:	f104 0218 	addeq.w	r2, r4, #24
 80131a2:	f100 0318 	addeq.w	r3, r0, #24
 80131a6:	e7e0      	b.n	801316a <_realloc_r+0x2ee>
 80131a8:	4603      	mov	r3, r0
 80131aa:	4622      	mov	r2, r4
 80131ac:	e7dd      	b.n	801316a <_realloc_r+0x2ee>
 80131ae:	4621      	mov	r1, r4
 80131b0:	f7fe fc06 	bl	80119c0 <memmove>
 80131b4:	e7df      	b.n	8013176 <_realloc_r+0x2fa>
 80131b6:	4637      	mov	r7, r6
 80131b8:	e6bf      	b.n	8012f3a <_realloc_r+0xbe>
 80131ba:	431f      	orrs	r7, r3
 80131bc:	f8c9 7004 	str.w	r7, [r9, #4]
 80131c0:	6853      	ldr	r3, [r2, #4]
 80131c2:	f043 0301 	orr.w	r3, r3, #1
 80131c6:	6053      	str	r3, [r2, #4]
 80131c8:	e6d3      	b.n	8012f72 <_realloc_r+0xf6>
 80131ca:	bf00      	nop

080131cc <__ascii_wctomb>:
 80131cc:	4603      	mov	r3, r0
 80131ce:	4608      	mov	r0, r1
 80131d0:	b141      	cbz	r1, 80131e4 <__ascii_wctomb+0x18>
 80131d2:	2aff      	cmp	r2, #255	@ 0xff
 80131d4:	d904      	bls.n	80131e0 <__ascii_wctomb+0x14>
 80131d6:	228a      	movs	r2, #138	@ 0x8a
 80131d8:	601a      	str	r2, [r3, #0]
 80131da:	f04f 30ff 	mov.w	r0, #4294967295
 80131de:	4770      	bx	lr
 80131e0:	700a      	strb	r2, [r1, #0]
 80131e2:	2001      	movs	r0, #1
 80131e4:	4770      	bx	lr

080131e6 <__ssprint_r>:
 80131e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ea:	6893      	ldr	r3, [r2, #8]
 80131ec:	f8d2 b000 	ldr.w	fp, [r2]
 80131f0:	9001      	str	r0, [sp, #4]
 80131f2:	460c      	mov	r4, r1
 80131f4:	4617      	mov	r7, r2
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d157      	bne.n	80132aa <__ssprint_r+0xc4>
 80131fa:	2000      	movs	r0, #0
 80131fc:	2300      	movs	r3, #0
 80131fe:	607b      	str	r3, [r7, #4]
 8013200:	b003      	add	sp, #12
 8013202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013206:	e9db a800 	ldrd	sl, r8, [fp]
 801320a:	f10b 0b08 	add.w	fp, fp, #8
 801320e:	68a6      	ldr	r6, [r4, #8]
 8013210:	6820      	ldr	r0, [r4, #0]
 8013212:	f1b8 0f00 	cmp.w	r8, #0
 8013216:	d0f6      	beq.n	8013206 <__ssprint_r+0x20>
 8013218:	45b0      	cmp	r8, r6
 801321a:	d32e      	bcc.n	801327a <__ssprint_r+0x94>
 801321c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013224:	d029      	beq.n	801327a <__ssprint_r+0x94>
 8013226:	6921      	ldr	r1, [r4, #16]
 8013228:	6965      	ldr	r5, [r4, #20]
 801322a:	eba0 0901 	sub.w	r9, r0, r1
 801322e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013236:	f109 0001 	add.w	r0, r9, #1
 801323a:	106d      	asrs	r5, r5, #1
 801323c:	4440      	add	r0, r8
 801323e:	4285      	cmp	r5, r0
 8013240:	bf38      	it	cc
 8013242:	4605      	movcc	r5, r0
 8013244:	0553      	lsls	r3, r2, #21
 8013246:	d534      	bpl.n	80132b2 <__ssprint_r+0xcc>
 8013248:	9801      	ldr	r0, [sp, #4]
 801324a:	4629      	mov	r1, r5
 801324c:	f7fc f862 	bl	800f314 <_malloc_r>
 8013250:	4606      	mov	r6, r0
 8013252:	2800      	cmp	r0, #0
 8013254:	d038      	beq.n	80132c8 <__ssprint_r+0xe2>
 8013256:	464a      	mov	r2, r9
 8013258:	6921      	ldr	r1, [r4, #16]
 801325a:	f7fc fd93 	bl	800fd84 <memcpy>
 801325e:	89a2      	ldrh	r2, [r4, #12]
 8013260:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8013264:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8013268:	81a2      	strh	r2, [r4, #12]
 801326a:	6126      	str	r6, [r4, #16]
 801326c:	6165      	str	r5, [r4, #20]
 801326e:	444e      	add	r6, r9
 8013270:	eba5 0509 	sub.w	r5, r5, r9
 8013274:	6026      	str	r6, [r4, #0]
 8013276:	60a5      	str	r5, [r4, #8]
 8013278:	4646      	mov	r6, r8
 801327a:	4546      	cmp	r6, r8
 801327c:	bf28      	it	cs
 801327e:	4646      	movcs	r6, r8
 8013280:	4632      	mov	r2, r6
 8013282:	4651      	mov	r1, sl
 8013284:	6820      	ldr	r0, [r4, #0]
 8013286:	f7fe fb9b 	bl	80119c0 <memmove>
 801328a:	68a2      	ldr	r2, [r4, #8]
 801328c:	1b92      	subs	r2, r2, r6
 801328e:	60a2      	str	r2, [r4, #8]
 8013290:	6822      	ldr	r2, [r4, #0]
 8013292:	4432      	add	r2, r6
 8013294:	6022      	str	r2, [r4, #0]
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	eba2 0308 	sub.w	r3, r2, r8
 801329c:	44c2      	add	sl, r8
 801329e:	60bb      	str	r3, [r7, #8]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d0aa      	beq.n	80131fa <__ssprint_r+0x14>
 80132a4:	f04f 0800 	mov.w	r8, #0
 80132a8:	e7b1      	b.n	801320e <__ssprint_r+0x28>
 80132aa:	f04f 0a00 	mov.w	sl, #0
 80132ae:	46d0      	mov	r8, sl
 80132b0:	e7ad      	b.n	801320e <__ssprint_r+0x28>
 80132b2:	9801      	ldr	r0, [sp, #4]
 80132b4:	462a      	mov	r2, r5
 80132b6:	f7ff fde1 	bl	8012e7c <_realloc_r>
 80132ba:	4606      	mov	r6, r0
 80132bc:	2800      	cmp	r0, #0
 80132be:	d1d4      	bne.n	801326a <__ssprint_r+0x84>
 80132c0:	6921      	ldr	r1, [r4, #16]
 80132c2:	9801      	ldr	r0, [sp, #4]
 80132c4:	f7fc fdd2 	bl	800fe6c <_free_r>
 80132c8:	9a01      	ldr	r2, [sp, #4]
 80132ca:	230c      	movs	r3, #12
 80132cc:	6013      	str	r3, [r2, #0]
 80132ce:	89a3      	ldrh	r3, [r4, #12]
 80132d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132d4:	81a3      	strh	r3, [r4, #12]
 80132d6:	2300      	movs	r3, #0
 80132d8:	60bb      	str	r3, [r7, #8]
 80132da:	f04f 30ff 	mov.w	r0, #4294967295
 80132de:	e78d      	b.n	80131fc <__ssprint_r+0x16>

080132e0 <__assert_func>:
 80132e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132e2:	4614      	mov	r4, r2
 80132e4:	461a      	mov	r2, r3
 80132e6:	4b09      	ldr	r3, [pc, #36]	@ (801330c <__assert_func+0x2c>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4605      	mov	r5, r0
 80132ec:	68d8      	ldr	r0, [r3, #12]
 80132ee:	b954      	cbnz	r4, 8013306 <__assert_func+0x26>
 80132f0:	4b07      	ldr	r3, [pc, #28]	@ (8013310 <__assert_func+0x30>)
 80132f2:	461c      	mov	r4, r3
 80132f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132f8:	9100      	str	r1, [sp, #0]
 80132fa:	462b      	mov	r3, r5
 80132fc:	4905      	ldr	r1, [pc, #20]	@ (8013314 <__assert_func+0x34>)
 80132fe:	f000 f843 	bl	8013388 <fiprintf>
 8013302:	f000 fdb7 	bl	8013e74 <abort>
 8013306:	4b04      	ldr	r3, [pc, #16]	@ (8013318 <__assert_func+0x38>)
 8013308:	e7f4      	b.n	80132f4 <__assert_func+0x14>
 801330a:	bf00      	nop
 801330c:	20000434 	.word	0x20000434
 8013310:	0801551c 	.word	0x0801551c
 8013314:	080154ee 	.word	0x080154ee
 8013318:	080154e1 	.word	0x080154e1

0801331c <_calloc_r>:
 801331c:	b538      	push	{r3, r4, r5, lr}
 801331e:	fba1 1502 	umull	r1, r5, r1, r2
 8013322:	b935      	cbnz	r5, 8013332 <_calloc_r+0x16>
 8013324:	f7fb fff6 	bl	800f314 <_malloc_r>
 8013328:	4604      	mov	r4, r0
 801332a:	b938      	cbnz	r0, 801333c <_calloc_r+0x20>
 801332c:	2400      	movs	r4, #0
 801332e:	4620      	mov	r0, r4
 8013330:	bd38      	pop	{r3, r4, r5, pc}
 8013332:	f7fc fced 	bl	800fd10 <__errno>
 8013336:	230c      	movs	r3, #12
 8013338:	6003      	str	r3, [r0, #0]
 801333a:	e7f7      	b.n	801332c <_calloc_r+0x10>
 801333c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013340:	f022 0203 	bic.w	r2, r2, #3
 8013344:	3a04      	subs	r2, #4
 8013346:	2a24      	cmp	r2, #36	@ 0x24
 8013348:	d819      	bhi.n	801337e <_calloc_r+0x62>
 801334a:	2a13      	cmp	r2, #19
 801334c:	d915      	bls.n	801337a <_calloc_r+0x5e>
 801334e:	2a1b      	cmp	r2, #27
 8013350:	e9c0 5500 	strd	r5, r5, [r0]
 8013354:	d806      	bhi.n	8013364 <_calloc_r+0x48>
 8013356:	f100 0308 	add.w	r3, r0, #8
 801335a:	2200      	movs	r2, #0
 801335c:	e9c3 2200 	strd	r2, r2, [r3]
 8013360:	609a      	str	r2, [r3, #8]
 8013362:	e7e4      	b.n	801332e <_calloc_r+0x12>
 8013364:	2a24      	cmp	r2, #36	@ 0x24
 8013366:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801336a:	bf11      	iteee	ne
 801336c:	f100 0310 	addne.w	r3, r0, #16
 8013370:	6105      	streq	r5, [r0, #16]
 8013372:	f100 0318 	addeq.w	r3, r0, #24
 8013376:	6145      	streq	r5, [r0, #20]
 8013378:	e7ef      	b.n	801335a <_calloc_r+0x3e>
 801337a:	4603      	mov	r3, r0
 801337c:	e7ed      	b.n	801335a <_calloc_r+0x3e>
 801337e:	4629      	mov	r1, r5
 8013380:	f7fc fc3b 	bl	800fbfa <memset>
 8013384:	e7d3      	b.n	801332e <_calloc_r+0x12>
	...

08013388 <fiprintf>:
 8013388:	b40e      	push	{r1, r2, r3}
 801338a:	b503      	push	{r0, r1, lr}
 801338c:	4601      	mov	r1, r0
 801338e:	ab03      	add	r3, sp, #12
 8013390:	4805      	ldr	r0, [pc, #20]	@ (80133a8 <fiprintf+0x20>)
 8013392:	f853 2b04 	ldr.w	r2, [r3], #4
 8013396:	6800      	ldr	r0, [r0, #0]
 8013398:	9301      	str	r3, [sp, #4]
 801339a:	f000 f839 	bl	8013410 <_vfiprintf_r>
 801339e:	b002      	add	sp, #8
 80133a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80133a4:	b003      	add	sp, #12
 80133a6:	4770      	bx	lr
 80133a8:	20000434 	.word	0x20000434

080133ac <__sprint_r>:
 80133ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b0:	6893      	ldr	r3, [r2, #8]
 80133b2:	4680      	mov	r8, r0
 80133b4:	460e      	mov	r6, r1
 80133b6:	4614      	mov	r4, r2
 80133b8:	b343      	cbz	r3, 801340c <__sprint_r+0x60>
 80133ba:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80133bc:	049d      	lsls	r5, r3, #18
 80133be:	d522      	bpl.n	8013406 <__sprint_r+0x5a>
 80133c0:	6815      	ldr	r5, [r2, #0]
 80133c2:	68a0      	ldr	r0, [r4, #8]
 80133c4:	3508      	adds	r5, #8
 80133c6:	b928      	cbnz	r0, 80133d4 <__sprint_r+0x28>
 80133c8:	2300      	movs	r3, #0
 80133ca:	60a3      	str	r3, [r4, #8]
 80133cc:	2300      	movs	r3, #0
 80133ce:	6063      	str	r3, [r4, #4]
 80133d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d4:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80133d8:	f04f 0900 	mov.w	r9, #0
 80133dc:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80133e0:	45ca      	cmp	sl, r9
 80133e2:	dc05      	bgt.n	80133f0 <__sprint_r+0x44>
 80133e4:	68a3      	ldr	r3, [r4, #8]
 80133e6:	f027 0703 	bic.w	r7, r7, #3
 80133ea:	1bdb      	subs	r3, r3, r7
 80133ec:	60a3      	str	r3, [r4, #8]
 80133ee:	e7e8      	b.n	80133c2 <__sprint_r+0x16>
 80133f0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80133f4:	4632      	mov	r2, r6
 80133f6:	4640      	mov	r0, r8
 80133f8:	f000 fd13 	bl	8013e22 <_fputwc_r>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d0e3      	beq.n	80133c8 <__sprint_r+0x1c>
 8013400:	f109 0901 	add.w	r9, r9, #1
 8013404:	e7ec      	b.n	80133e0 <__sprint_r+0x34>
 8013406:	f7fe f8d5 	bl	80115b4 <__sfvwrite_r>
 801340a:	e7dd      	b.n	80133c8 <__sprint_r+0x1c>
 801340c:	4618      	mov	r0, r3
 801340e:	e7dd      	b.n	80133cc <__sprint_r+0x20>

08013410 <_vfiprintf_r>:
 8013410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013414:	b0bb      	sub	sp, #236	@ 0xec
 8013416:	460f      	mov	r7, r1
 8013418:	4693      	mov	fp, r2
 801341a:	461c      	mov	r4, r3
 801341c:	461d      	mov	r5, r3
 801341e:	9000      	str	r0, [sp, #0]
 8013420:	b118      	cbz	r0, 801342a <_vfiprintf_r+0x1a>
 8013422:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013424:	b90b      	cbnz	r3, 801342a <_vfiprintf_r+0x1a>
 8013426:	f7fc fa47 	bl	800f8b8 <__sinit>
 801342a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801342c:	07db      	lsls	r3, r3, #31
 801342e:	d405      	bmi.n	801343c <_vfiprintf_r+0x2c>
 8013430:	89bb      	ldrh	r3, [r7, #12]
 8013432:	059e      	lsls	r6, r3, #22
 8013434:	d402      	bmi.n	801343c <_vfiprintf_r+0x2c>
 8013436:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013438:	f7fc fc96 	bl	800fd68 <__retarget_lock_acquire_recursive>
 801343c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013440:	0498      	lsls	r0, r3, #18
 8013442:	d406      	bmi.n	8013452 <_vfiprintf_r+0x42>
 8013444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013448:	81bb      	strh	r3, [r7, #12]
 801344a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801344c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013450:	667b      	str	r3, [r7, #100]	@ 0x64
 8013452:	89bb      	ldrh	r3, [r7, #12]
 8013454:	0719      	lsls	r1, r3, #28
 8013456:	d501      	bpl.n	801345c <_vfiprintf_r+0x4c>
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	b9ab      	cbnz	r3, 8013488 <_vfiprintf_r+0x78>
 801345c:	9800      	ldr	r0, [sp, #0]
 801345e:	4639      	mov	r1, r7
 8013460:	f7fe fa58 	bl	8011914 <__swsetup_r>
 8013464:	b180      	cbz	r0, 8013488 <_vfiprintf_r+0x78>
 8013466:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013468:	07da      	lsls	r2, r3, #31
 801346a:	d506      	bpl.n	801347a <_vfiprintf_r+0x6a>
 801346c:	f04f 33ff 	mov.w	r3, #4294967295
 8013470:	9303      	str	r3, [sp, #12]
 8013472:	9803      	ldr	r0, [sp, #12]
 8013474:	b03b      	add	sp, #236	@ 0xec
 8013476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347a:	89bb      	ldrh	r3, [r7, #12]
 801347c:	059b      	lsls	r3, r3, #22
 801347e:	d4f5      	bmi.n	801346c <_vfiprintf_r+0x5c>
 8013480:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013482:	f7fc fc72 	bl	800fd6a <__retarget_lock_release_recursive>
 8013486:	e7f1      	b.n	801346c <_vfiprintf_r+0x5c>
 8013488:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801348c:	f003 021a 	and.w	r2, r3, #26
 8013490:	2a0a      	cmp	r2, #10
 8013492:	d114      	bne.n	80134be <_vfiprintf_r+0xae>
 8013494:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013498:	2a00      	cmp	r2, #0
 801349a:	db10      	blt.n	80134be <_vfiprintf_r+0xae>
 801349c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801349e:	07d6      	lsls	r6, r2, #31
 80134a0:	d404      	bmi.n	80134ac <_vfiprintf_r+0x9c>
 80134a2:	059d      	lsls	r5, r3, #22
 80134a4:	d402      	bmi.n	80134ac <_vfiprintf_r+0x9c>
 80134a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80134a8:	f7fc fc5f 	bl	800fd6a <__retarget_lock_release_recursive>
 80134ac:	9800      	ldr	r0, [sp, #0]
 80134ae:	4623      	mov	r3, r4
 80134b0:	465a      	mov	r2, fp
 80134b2:	4639      	mov	r1, r7
 80134b4:	b03b      	add	sp, #236	@ 0xec
 80134b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ba:	f000 bc31 	b.w	8013d20 <__sbprintf>
 80134be:	2300      	movs	r3, #0
 80134c0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80134c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80134c8:	ae11      	add	r6, sp, #68	@ 0x44
 80134ca:	960e      	str	r6, [sp, #56]	@ 0x38
 80134cc:	9307      	str	r3, [sp, #28]
 80134ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80134d0:	9303      	str	r3, [sp, #12]
 80134d2:	465b      	mov	r3, fp
 80134d4:	461c      	mov	r4, r3
 80134d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134da:	b10a      	cbz	r2, 80134e0 <_vfiprintf_r+0xd0>
 80134dc:	2a25      	cmp	r2, #37	@ 0x25
 80134de:	d1f9      	bne.n	80134d4 <_vfiprintf_r+0xc4>
 80134e0:	ebb4 080b 	subs.w	r8, r4, fp
 80134e4:	d00d      	beq.n	8013502 <_vfiprintf_r+0xf2>
 80134e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80134e8:	4443      	add	r3, r8
 80134ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80134ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ee:	3301      	adds	r3, #1
 80134f0:	2b07      	cmp	r3, #7
 80134f2:	e9c6 b800 	strd	fp, r8, [r6]
 80134f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80134f8:	dc75      	bgt.n	80135e6 <_vfiprintf_r+0x1d6>
 80134fa:	3608      	adds	r6, #8
 80134fc:	9b03      	ldr	r3, [sp, #12]
 80134fe:	4443      	add	r3, r8
 8013500:	9303      	str	r3, [sp, #12]
 8013502:	7823      	ldrb	r3, [r4, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	f000 83cd 	beq.w	8013ca4 <_vfiprintf_r+0x894>
 801350a:	2300      	movs	r3, #0
 801350c:	f04f 32ff 	mov.w	r2, #4294967295
 8013510:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8013514:	3401      	adds	r4, #1
 8013516:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801351a:	469a      	mov	sl, r3
 801351c:	46a3      	mov	fp, r4
 801351e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8013522:	f1a3 0220 	sub.w	r2, r3, #32
 8013526:	2a5a      	cmp	r2, #90	@ 0x5a
 8013528:	f200 8316 	bhi.w	8013b58 <_vfiprintf_r+0x748>
 801352c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013530:	0314009a 	.word	0x0314009a
 8013534:	00a20314 	.word	0x00a20314
 8013538:	03140314 	.word	0x03140314
 801353c:	00820314 	.word	0x00820314
 8013540:	03140314 	.word	0x03140314
 8013544:	00af00a5 	.word	0x00af00a5
 8013548:	00ac0314 	.word	0x00ac0314
 801354c:	031400b1 	.word	0x031400b1
 8013550:	00d000cd 	.word	0x00d000cd
 8013554:	00d000d0 	.word	0x00d000d0
 8013558:	00d000d0 	.word	0x00d000d0
 801355c:	00d000d0 	.word	0x00d000d0
 8013560:	00d000d0 	.word	0x00d000d0
 8013564:	03140314 	.word	0x03140314
 8013568:	03140314 	.word	0x03140314
 801356c:	03140314 	.word	0x03140314
 8013570:	03140314 	.word	0x03140314
 8013574:	00f70314 	.word	0x00f70314
 8013578:	03140104 	.word	0x03140104
 801357c:	03140314 	.word	0x03140314
 8013580:	03140314 	.word	0x03140314
 8013584:	03140314 	.word	0x03140314
 8013588:	03140314 	.word	0x03140314
 801358c:	01520314 	.word	0x01520314
 8013590:	03140314 	.word	0x03140314
 8013594:	019a0314 	.word	0x019a0314
 8013598:	027a0314 	.word	0x027a0314
 801359c:	03140314 	.word	0x03140314
 80135a0:	0314029a 	.word	0x0314029a
 80135a4:	03140314 	.word	0x03140314
 80135a8:	03140314 	.word	0x03140314
 80135ac:	03140314 	.word	0x03140314
 80135b0:	03140314 	.word	0x03140314
 80135b4:	00f70314 	.word	0x00f70314
 80135b8:	03140106 	.word	0x03140106
 80135bc:	03140314 	.word	0x03140314
 80135c0:	010600e0 	.word	0x010600e0
 80135c4:	031400f1 	.word	0x031400f1
 80135c8:	031400eb 	.word	0x031400eb
 80135cc:	01540132 	.word	0x01540132
 80135d0:	00f10189 	.word	0x00f10189
 80135d4:	019a0314 	.word	0x019a0314
 80135d8:	027c0098 	.word	0x027c0098
 80135dc:	03140314 	.word	0x03140314
 80135e0:	03140065 	.word	0x03140065
 80135e4:	0098      	.short	0x0098
 80135e6:	9800      	ldr	r0, [sp, #0]
 80135e8:	aa0e      	add	r2, sp, #56	@ 0x38
 80135ea:	4639      	mov	r1, r7
 80135ec:	f7ff fede 	bl	80133ac <__sprint_r>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	f040 8336 	bne.w	8013c62 <_vfiprintf_r+0x852>
 80135f6:	ae11      	add	r6, sp, #68	@ 0x44
 80135f8:	e780      	b.n	80134fc <_vfiprintf_r+0xec>
 80135fa:	4a99      	ldr	r2, [pc, #612]	@ (8013860 <_vfiprintf_r+0x450>)
 80135fc:	9205      	str	r2, [sp, #20]
 80135fe:	f01a 0220 	ands.w	r2, sl, #32
 8013602:	f000 8231 	beq.w	8013a68 <_vfiprintf_r+0x658>
 8013606:	3507      	adds	r5, #7
 8013608:	f025 0507 	bic.w	r5, r5, #7
 801360c:	46a8      	mov	r8, r5
 801360e:	686d      	ldr	r5, [r5, #4]
 8013610:	f858 4b08 	ldr.w	r4, [r8], #8
 8013614:	f01a 0f01 	tst.w	sl, #1
 8013618:	d009      	beq.n	801362e <_vfiprintf_r+0x21e>
 801361a:	ea54 0205 	orrs.w	r2, r4, r5
 801361e:	bf1f      	itttt	ne
 8013620:	2230      	movne	r2, #48	@ 0x30
 8013622:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8013626:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801362a:	f04a 0a02 	orrne.w	sl, sl, #2
 801362e:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8013632:	e112      	b.n	801385a <_vfiprintf_r+0x44a>
 8013634:	9800      	ldr	r0, [sp, #0]
 8013636:	f7fe f9f7 	bl	8011a28 <_localeconv_r>
 801363a:	6843      	ldr	r3, [r0, #4]
 801363c:	9309      	str	r3, [sp, #36]	@ 0x24
 801363e:	4618      	mov	r0, r3
 8013640:	f7ec fdee 	bl	8000220 <strlen>
 8013644:	9007      	str	r0, [sp, #28]
 8013646:	9800      	ldr	r0, [sp, #0]
 8013648:	f7fe f9ee 	bl	8011a28 <_localeconv_r>
 801364c:	6883      	ldr	r3, [r0, #8]
 801364e:	9306      	str	r3, [sp, #24]
 8013650:	9b07      	ldr	r3, [sp, #28]
 8013652:	b12b      	cbz	r3, 8013660 <_vfiprintf_r+0x250>
 8013654:	9b06      	ldr	r3, [sp, #24]
 8013656:	b11b      	cbz	r3, 8013660 <_vfiprintf_r+0x250>
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	b10b      	cbz	r3, 8013660 <_vfiprintf_r+0x250>
 801365c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8013660:	465c      	mov	r4, fp
 8013662:	e75b      	b.n	801351c <_vfiprintf_r+0x10c>
 8013664:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8013668:	2b00      	cmp	r3, #0
 801366a:	d1f9      	bne.n	8013660 <_vfiprintf_r+0x250>
 801366c:	2320      	movs	r3, #32
 801366e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013672:	e7f5      	b.n	8013660 <_vfiprintf_r+0x250>
 8013674:	f04a 0a01 	orr.w	sl, sl, #1
 8013678:	e7f2      	b.n	8013660 <_vfiprintf_r+0x250>
 801367a:	f855 3b04 	ldr.w	r3, [r5], #4
 801367e:	9302      	str	r3, [sp, #8]
 8013680:	2b00      	cmp	r3, #0
 8013682:	daed      	bge.n	8013660 <_vfiprintf_r+0x250>
 8013684:	425b      	negs	r3, r3
 8013686:	9302      	str	r3, [sp, #8]
 8013688:	f04a 0a04 	orr.w	sl, sl, #4
 801368c:	e7e8      	b.n	8013660 <_vfiprintf_r+0x250>
 801368e:	232b      	movs	r3, #43	@ 0x2b
 8013690:	e7ed      	b.n	801366e <_vfiprintf_r+0x25e>
 8013692:	465a      	mov	r2, fp
 8013694:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013698:	2b2a      	cmp	r3, #42	@ 0x2a
 801369a:	d112      	bne.n	80136c2 <_vfiprintf_r+0x2b2>
 801369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80136a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80136a4:	9301      	str	r3, [sp, #4]
 80136a6:	4693      	mov	fp, r2
 80136a8:	e7da      	b.n	8013660 <_vfiprintf_r+0x250>
 80136aa:	9b01      	ldr	r3, [sp, #4]
 80136ac:	fb00 1303 	mla	r3, r0, r3, r1
 80136b0:	9301      	str	r3, [sp, #4]
 80136b2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80136b6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80136ba:	2909      	cmp	r1, #9
 80136bc:	d9f5      	bls.n	80136aa <_vfiprintf_r+0x29a>
 80136be:	4693      	mov	fp, r2
 80136c0:	e72f      	b.n	8013522 <_vfiprintf_r+0x112>
 80136c2:	2100      	movs	r1, #0
 80136c4:	9101      	str	r1, [sp, #4]
 80136c6:	200a      	movs	r0, #10
 80136c8:	e7f5      	b.n	80136b6 <_vfiprintf_r+0x2a6>
 80136ca:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80136ce:	e7c7      	b.n	8013660 <_vfiprintf_r+0x250>
 80136d0:	2100      	movs	r1, #0
 80136d2:	465a      	mov	r2, fp
 80136d4:	9102      	str	r1, [sp, #8]
 80136d6:	200a      	movs	r0, #10
 80136d8:	9902      	ldr	r1, [sp, #8]
 80136da:	3b30      	subs	r3, #48	@ 0x30
 80136dc:	fb00 3301 	mla	r3, r0, r1, r3
 80136e0:	9302      	str	r3, [sp, #8]
 80136e2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80136e6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80136ea:	2909      	cmp	r1, #9
 80136ec:	d9f4      	bls.n	80136d8 <_vfiprintf_r+0x2c8>
 80136ee:	e7e6      	b.n	80136be <_vfiprintf_r+0x2ae>
 80136f0:	f89b 3000 	ldrb.w	r3, [fp]
 80136f4:	2b68      	cmp	r3, #104	@ 0x68
 80136f6:	bf06      	itte	eq
 80136f8:	f10b 0b01 	addeq.w	fp, fp, #1
 80136fc:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8013700:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8013704:	e7ac      	b.n	8013660 <_vfiprintf_r+0x250>
 8013706:	f89b 3000 	ldrb.w	r3, [fp]
 801370a:	2b6c      	cmp	r3, #108	@ 0x6c
 801370c:	d104      	bne.n	8013718 <_vfiprintf_r+0x308>
 801370e:	f10b 0b01 	add.w	fp, fp, #1
 8013712:	f04a 0a20 	orr.w	sl, sl, #32
 8013716:	e7a3      	b.n	8013660 <_vfiprintf_r+0x250>
 8013718:	f04a 0a10 	orr.w	sl, sl, #16
 801371c:	e7a0      	b.n	8013660 <_vfiprintf_r+0x250>
 801371e:	46a8      	mov	r8, r5
 8013720:	2400      	movs	r4, #0
 8013722:	f858 3b04 	ldr.w	r3, [r8], #4
 8013726:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801372a:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801372e:	2301      	movs	r3, #1
 8013730:	9301      	str	r3, [sp, #4]
 8013732:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8013736:	e0ab      	b.n	8013890 <_vfiprintf_r+0x480>
 8013738:	f04a 0a10 	orr.w	sl, sl, #16
 801373c:	f01a 0f20 	tst.w	sl, #32
 8013740:	d011      	beq.n	8013766 <_vfiprintf_r+0x356>
 8013742:	3507      	adds	r5, #7
 8013744:	f025 0507 	bic.w	r5, r5, #7
 8013748:	46a8      	mov	r8, r5
 801374a:	686d      	ldr	r5, [r5, #4]
 801374c:	f858 4b08 	ldr.w	r4, [r8], #8
 8013750:	2d00      	cmp	r5, #0
 8013752:	da06      	bge.n	8013762 <_vfiprintf_r+0x352>
 8013754:	4264      	negs	r4, r4
 8013756:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801375a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801375e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013762:	2301      	movs	r3, #1
 8013764:	e048      	b.n	80137f8 <_vfiprintf_r+0x3e8>
 8013766:	46a8      	mov	r8, r5
 8013768:	f01a 0f10 	tst.w	sl, #16
 801376c:	f858 5b04 	ldr.w	r5, [r8], #4
 8013770:	d002      	beq.n	8013778 <_vfiprintf_r+0x368>
 8013772:	462c      	mov	r4, r5
 8013774:	17ed      	asrs	r5, r5, #31
 8013776:	e7eb      	b.n	8013750 <_vfiprintf_r+0x340>
 8013778:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801377c:	d003      	beq.n	8013786 <_vfiprintf_r+0x376>
 801377e:	b22c      	sxth	r4, r5
 8013780:	f345 35c0 	sbfx	r5, r5, #15, #1
 8013784:	e7e4      	b.n	8013750 <_vfiprintf_r+0x340>
 8013786:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801378a:	d0f2      	beq.n	8013772 <_vfiprintf_r+0x362>
 801378c:	b26c      	sxtb	r4, r5
 801378e:	f345 15c0 	sbfx	r5, r5, #7, #1
 8013792:	e7dd      	b.n	8013750 <_vfiprintf_r+0x340>
 8013794:	f01a 0f20 	tst.w	sl, #32
 8013798:	d007      	beq.n	80137aa <_vfiprintf_r+0x39a>
 801379a:	9a03      	ldr	r2, [sp, #12]
 801379c:	682b      	ldr	r3, [r5, #0]
 801379e:	9903      	ldr	r1, [sp, #12]
 80137a0:	17d2      	asrs	r2, r2, #31
 80137a2:	e9c3 1200 	strd	r1, r2, [r3]
 80137a6:	3504      	adds	r5, #4
 80137a8:	e693      	b.n	80134d2 <_vfiprintf_r+0xc2>
 80137aa:	f01a 0f10 	tst.w	sl, #16
 80137ae:	d003      	beq.n	80137b8 <_vfiprintf_r+0x3a8>
 80137b0:	682b      	ldr	r3, [r5, #0]
 80137b2:	9a03      	ldr	r2, [sp, #12]
 80137b4:	601a      	str	r2, [r3, #0]
 80137b6:	e7f6      	b.n	80137a6 <_vfiprintf_r+0x396>
 80137b8:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80137bc:	d003      	beq.n	80137c6 <_vfiprintf_r+0x3b6>
 80137be:	682b      	ldr	r3, [r5, #0]
 80137c0:	9a03      	ldr	r2, [sp, #12]
 80137c2:	801a      	strh	r2, [r3, #0]
 80137c4:	e7ef      	b.n	80137a6 <_vfiprintf_r+0x396>
 80137c6:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80137ca:	d0f1      	beq.n	80137b0 <_vfiprintf_r+0x3a0>
 80137cc:	682b      	ldr	r3, [r5, #0]
 80137ce:	9a03      	ldr	r2, [sp, #12]
 80137d0:	701a      	strb	r2, [r3, #0]
 80137d2:	e7e8      	b.n	80137a6 <_vfiprintf_r+0x396>
 80137d4:	f04a 0a10 	orr.w	sl, sl, #16
 80137d8:	f01a 0320 	ands.w	r3, sl, #32
 80137dc:	d01f      	beq.n	801381e <_vfiprintf_r+0x40e>
 80137de:	3507      	adds	r5, #7
 80137e0:	f025 0507 	bic.w	r5, r5, #7
 80137e4:	46a8      	mov	r8, r5
 80137e6:	686d      	ldr	r5, [r5, #4]
 80137e8:	f858 4b08 	ldr.w	r4, [r8], #8
 80137ec:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80137f0:	2300      	movs	r3, #0
 80137f2:	2200      	movs	r2, #0
 80137f4:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80137f8:	9a01      	ldr	r2, [sp, #4]
 80137fa:	3201      	adds	r2, #1
 80137fc:	f000 825f 	beq.w	8013cbe <_vfiprintf_r+0x8ae>
 8013800:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8013804:	9204      	str	r2, [sp, #16]
 8013806:	ea54 0205 	orrs.w	r2, r4, r5
 801380a:	f040 825e 	bne.w	8013cca <_vfiprintf_r+0x8ba>
 801380e:	9a01      	ldr	r2, [sp, #4]
 8013810:	2a00      	cmp	r2, #0
 8013812:	f000 8198 	beq.w	8013b46 <_vfiprintf_r+0x736>
 8013816:	2b01      	cmp	r3, #1
 8013818:	f040 825a 	bne.w	8013cd0 <_vfiprintf_r+0x8c0>
 801381c:	e13b      	b.n	8013a96 <_vfiprintf_r+0x686>
 801381e:	46a8      	mov	r8, r5
 8013820:	f01a 0510 	ands.w	r5, sl, #16
 8013824:	f858 4b04 	ldr.w	r4, [r8], #4
 8013828:	d001      	beq.n	801382e <_vfiprintf_r+0x41e>
 801382a:	461d      	mov	r5, r3
 801382c:	e7de      	b.n	80137ec <_vfiprintf_r+0x3dc>
 801382e:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013832:	d001      	beq.n	8013838 <_vfiprintf_r+0x428>
 8013834:	b2a4      	uxth	r4, r4
 8013836:	e7d9      	b.n	80137ec <_vfiprintf_r+0x3dc>
 8013838:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801383c:	d0d6      	beq.n	80137ec <_vfiprintf_r+0x3dc>
 801383e:	b2e4      	uxtb	r4, r4
 8013840:	e7f3      	b.n	801382a <_vfiprintf_r+0x41a>
 8013842:	46a8      	mov	r8, r5
 8013844:	f647 0330 	movw	r3, #30768	@ 0x7830
 8013848:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801384c:	f858 4b04 	ldr.w	r4, [r8], #4
 8013850:	4b03      	ldr	r3, [pc, #12]	@ (8013860 <_vfiprintf_r+0x450>)
 8013852:	9305      	str	r3, [sp, #20]
 8013854:	2500      	movs	r5, #0
 8013856:	f04a 0a02 	orr.w	sl, sl, #2
 801385a:	2302      	movs	r3, #2
 801385c:	e7c9      	b.n	80137f2 <_vfiprintf_r+0x3e2>
 801385e:	bf00      	nop
 8013860:	080151c4 	.word	0x080151c4
 8013864:	9b01      	ldr	r3, [sp, #4]
 8013866:	46a8      	mov	r8, r5
 8013868:	1c5c      	adds	r4, r3, #1
 801386a:	f04f 0500 	mov.w	r5, #0
 801386e:	f858 9b04 	ldr.w	r9, [r8], #4
 8013872:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8013876:	f000 80d0 	beq.w	8013a1a <_vfiprintf_r+0x60a>
 801387a:	461a      	mov	r2, r3
 801387c:	4629      	mov	r1, r5
 801387e:	4648      	mov	r0, r9
 8013880:	f7ec fcd6 	bl	8000230 <memchr>
 8013884:	4604      	mov	r4, r0
 8013886:	b118      	cbz	r0, 8013890 <_vfiprintf_r+0x480>
 8013888:	eba0 0309 	sub.w	r3, r0, r9
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	462c      	mov	r4, r5
 8013890:	9b01      	ldr	r3, [sp, #4]
 8013892:	42a3      	cmp	r3, r4
 8013894:	bfb8      	it	lt
 8013896:	4623      	movlt	r3, r4
 8013898:	9304      	str	r3, [sp, #16]
 801389a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801389e:	b113      	cbz	r3, 80138a6 <_vfiprintf_r+0x496>
 80138a0:	9b04      	ldr	r3, [sp, #16]
 80138a2:	3301      	adds	r3, #1
 80138a4:	9304      	str	r3, [sp, #16]
 80138a6:	f01a 0302 	ands.w	r3, sl, #2
 80138aa:	9308      	str	r3, [sp, #32]
 80138ac:	bf1e      	ittt	ne
 80138ae:	9b04      	ldrne	r3, [sp, #16]
 80138b0:	3302      	addne	r3, #2
 80138b2:	9304      	strne	r3, [sp, #16]
 80138b4:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80138b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80138ba:	d11f      	bne.n	80138fc <_vfiprintf_r+0x4ec>
 80138bc:	9b02      	ldr	r3, [sp, #8]
 80138be:	9a04      	ldr	r2, [sp, #16]
 80138c0:	1a9d      	subs	r5, r3, r2
 80138c2:	2d00      	cmp	r5, #0
 80138c4:	dd1a      	ble.n	80138fc <_vfiprintf_r+0x4ec>
 80138c6:	4ba9      	ldr	r3, [pc, #676]	@ (8013b6c <_vfiprintf_r+0x75c>)
 80138c8:	6033      	str	r3, [r6, #0]
 80138ca:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80138ce:	2d10      	cmp	r5, #16
 80138d0:	f102 0201 	add.w	r2, r2, #1
 80138d4:	f106 0008 	add.w	r0, r6, #8
 80138d8:	f300 814e 	bgt.w	8013b78 <_vfiprintf_r+0x768>
 80138dc:	6075      	str	r5, [r6, #4]
 80138de:	2a07      	cmp	r2, #7
 80138e0:	4465      	add	r5, ip
 80138e2:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80138e6:	f340 815a 	ble.w	8013b9e <_vfiprintf_r+0x78e>
 80138ea:	9800      	ldr	r0, [sp, #0]
 80138ec:	aa0e      	add	r2, sp, #56	@ 0x38
 80138ee:	4639      	mov	r1, r7
 80138f0:	f7ff fd5c 	bl	80133ac <__sprint_r>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	f040 81b4 	bne.w	8013c62 <_vfiprintf_r+0x852>
 80138fa:	ae11      	add	r6, sp, #68	@ 0x44
 80138fc:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8013900:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013904:	b161      	cbz	r1, 8013920 <_vfiprintf_r+0x510>
 8013906:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801390a:	3301      	adds	r3, #1
 801390c:	6031      	str	r1, [r6, #0]
 801390e:	2101      	movs	r1, #1
 8013910:	440a      	add	r2, r1
 8013912:	2b07      	cmp	r3, #7
 8013914:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013918:	6071      	str	r1, [r6, #4]
 801391a:	f300 8142 	bgt.w	8013ba2 <_vfiprintf_r+0x792>
 801391e:	3608      	adds	r6, #8
 8013920:	9908      	ldr	r1, [sp, #32]
 8013922:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013926:	b159      	cbz	r1, 8013940 <_vfiprintf_r+0x530>
 8013928:	a90d      	add	r1, sp, #52	@ 0x34
 801392a:	3301      	adds	r3, #1
 801392c:	6031      	str	r1, [r6, #0]
 801392e:	2102      	movs	r1, #2
 8013930:	440a      	add	r2, r1
 8013932:	2b07      	cmp	r3, #7
 8013934:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013938:	6071      	str	r1, [r6, #4]
 801393a:	f300 813b 	bgt.w	8013bb4 <_vfiprintf_r+0x7a4>
 801393e:	3608      	adds	r6, #8
 8013940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013942:	2b80      	cmp	r3, #128	@ 0x80
 8013944:	d11f      	bne.n	8013986 <_vfiprintf_r+0x576>
 8013946:	9b02      	ldr	r3, [sp, #8]
 8013948:	9a04      	ldr	r2, [sp, #16]
 801394a:	1a9d      	subs	r5, r3, r2
 801394c:	2d00      	cmp	r5, #0
 801394e:	dd1a      	ble.n	8013986 <_vfiprintf_r+0x576>
 8013950:	4b87      	ldr	r3, [pc, #540]	@ (8013b70 <_vfiprintf_r+0x760>)
 8013952:	6033      	str	r3, [r6, #0]
 8013954:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8013958:	2d10      	cmp	r5, #16
 801395a:	f102 0201 	add.w	r2, r2, #1
 801395e:	f106 0008 	add.w	r0, r6, #8
 8013962:	f300 8130 	bgt.w	8013bc6 <_vfiprintf_r+0x7b6>
 8013966:	6075      	str	r5, [r6, #4]
 8013968:	2a07      	cmp	r2, #7
 801396a:	4465      	add	r5, ip
 801396c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8013970:	f340 813c 	ble.w	8013bec <_vfiprintf_r+0x7dc>
 8013974:	9800      	ldr	r0, [sp, #0]
 8013976:	aa0e      	add	r2, sp, #56	@ 0x38
 8013978:	4639      	mov	r1, r7
 801397a:	f7ff fd17 	bl	80133ac <__sprint_r>
 801397e:	2800      	cmp	r0, #0
 8013980:	f040 816f 	bne.w	8013c62 <_vfiprintf_r+0x852>
 8013984:	ae11      	add	r6, sp, #68	@ 0x44
 8013986:	9b01      	ldr	r3, [sp, #4]
 8013988:	1ae4      	subs	r4, r4, r3
 801398a:	2c00      	cmp	r4, #0
 801398c:	dd1a      	ble.n	80139c4 <_vfiprintf_r+0x5b4>
 801398e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013992:	4877      	ldr	r0, [pc, #476]	@ (8013b70 <_vfiprintf_r+0x760>)
 8013994:	6030      	str	r0, [r6, #0]
 8013996:	2c10      	cmp	r4, #16
 8013998:	f103 0301 	add.w	r3, r3, #1
 801399c:	f106 0108 	add.w	r1, r6, #8
 80139a0:	f300 8126 	bgt.w	8013bf0 <_vfiprintf_r+0x7e0>
 80139a4:	6074      	str	r4, [r6, #4]
 80139a6:	2b07      	cmp	r3, #7
 80139a8:	4414      	add	r4, r2
 80139aa:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80139ae:	f340 8130 	ble.w	8013c12 <_vfiprintf_r+0x802>
 80139b2:	9800      	ldr	r0, [sp, #0]
 80139b4:	aa0e      	add	r2, sp, #56	@ 0x38
 80139b6:	4639      	mov	r1, r7
 80139b8:	f7ff fcf8 	bl	80133ac <__sprint_r>
 80139bc:	2800      	cmp	r0, #0
 80139be:	f040 8150 	bne.w	8013c62 <_vfiprintf_r+0x852>
 80139c2:	ae11      	add	r6, sp, #68	@ 0x44
 80139c4:	9b01      	ldr	r3, [sp, #4]
 80139c6:	9a01      	ldr	r2, [sp, #4]
 80139c8:	6073      	str	r3, [r6, #4]
 80139ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139cc:	f8c6 9000 	str.w	r9, [r6]
 80139d0:	4413      	add	r3, r2
 80139d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80139d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139d6:	3301      	adds	r3, #1
 80139d8:	2b07      	cmp	r3, #7
 80139da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80139dc:	f300 811b 	bgt.w	8013c16 <_vfiprintf_r+0x806>
 80139e0:	f106 0308 	add.w	r3, r6, #8
 80139e4:	f01a 0f04 	tst.w	sl, #4
 80139e8:	f040 811d 	bne.w	8013c26 <_vfiprintf_r+0x816>
 80139ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139f0:	9904      	ldr	r1, [sp, #16]
 80139f2:	428a      	cmp	r2, r1
 80139f4:	bfac      	ite	ge
 80139f6:	189b      	addge	r3, r3, r2
 80139f8:	185b      	addlt	r3, r3, r1
 80139fa:	9303      	str	r3, [sp, #12]
 80139fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139fe:	b13b      	cbz	r3, 8013a10 <_vfiprintf_r+0x600>
 8013a00:	9800      	ldr	r0, [sp, #0]
 8013a02:	aa0e      	add	r2, sp, #56	@ 0x38
 8013a04:	4639      	mov	r1, r7
 8013a06:	f7ff fcd1 	bl	80133ac <__sprint_r>
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	f040 8129 	bne.w	8013c62 <_vfiprintf_r+0x852>
 8013a10:	2300      	movs	r3, #0
 8013a12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a14:	4645      	mov	r5, r8
 8013a16:	ae11      	add	r6, sp, #68	@ 0x44
 8013a18:	e55b      	b.n	80134d2 <_vfiprintf_r+0xc2>
 8013a1a:	4648      	mov	r0, r9
 8013a1c:	f7ec fc00 	bl	8000220 <strlen>
 8013a20:	9001      	str	r0, [sp, #4]
 8013a22:	e734      	b.n	801388e <_vfiprintf_r+0x47e>
 8013a24:	f04a 0a10 	orr.w	sl, sl, #16
 8013a28:	f01a 0320 	ands.w	r3, sl, #32
 8013a2c:	d008      	beq.n	8013a40 <_vfiprintf_r+0x630>
 8013a2e:	3507      	adds	r5, #7
 8013a30:	f025 0507 	bic.w	r5, r5, #7
 8013a34:	46a8      	mov	r8, r5
 8013a36:	686d      	ldr	r5, [r5, #4]
 8013a38:	f858 4b08 	ldr.w	r4, [r8], #8
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	e6d8      	b.n	80137f2 <_vfiprintf_r+0x3e2>
 8013a40:	46a8      	mov	r8, r5
 8013a42:	f01a 0510 	ands.w	r5, sl, #16
 8013a46:	f858 4b04 	ldr.w	r4, [r8], #4
 8013a4a:	d001      	beq.n	8013a50 <_vfiprintf_r+0x640>
 8013a4c:	461d      	mov	r5, r3
 8013a4e:	e7f5      	b.n	8013a3c <_vfiprintf_r+0x62c>
 8013a50:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013a54:	d001      	beq.n	8013a5a <_vfiprintf_r+0x64a>
 8013a56:	b2a4      	uxth	r4, r4
 8013a58:	e7f0      	b.n	8013a3c <_vfiprintf_r+0x62c>
 8013a5a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013a5e:	d0ed      	beq.n	8013a3c <_vfiprintf_r+0x62c>
 8013a60:	b2e4      	uxtb	r4, r4
 8013a62:	e7f3      	b.n	8013a4c <_vfiprintf_r+0x63c>
 8013a64:	4a43      	ldr	r2, [pc, #268]	@ (8013b74 <_vfiprintf_r+0x764>)
 8013a66:	e5c9      	b.n	80135fc <_vfiprintf_r+0x1ec>
 8013a68:	46a8      	mov	r8, r5
 8013a6a:	f01a 0510 	ands.w	r5, sl, #16
 8013a6e:	f858 4b04 	ldr.w	r4, [r8], #4
 8013a72:	d001      	beq.n	8013a78 <_vfiprintf_r+0x668>
 8013a74:	4615      	mov	r5, r2
 8013a76:	e5cd      	b.n	8013614 <_vfiprintf_r+0x204>
 8013a78:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8013a7c:	d001      	beq.n	8013a82 <_vfiprintf_r+0x672>
 8013a7e:	b2a4      	uxth	r4, r4
 8013a80:	e5c8      	b.n	8013614 <_vfiprintf_r+0x204>
 8013a82:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013a86:	f43f adc5 	beq.w	8013614 <_vfiprintf_r+0x204>
 8013a8a:	b2e4      	uxtb	r4, r4
 8013a8c:	e7f2      	b.n	8013a74 <_vfiprintf_r+0x664>
 8013a8e:	2c0a      	cmp	r4, #10
 8013a90:	f175 0300 	sbcs.w	r3, r5, #0
 8013a94:	d206      	bcs.n	8013aa4 <_vfiprintf_r+0x694>
 8013a96:	3430      	adds	r4, #48	@ 0x30
 8013a98:	b2e4      	uxtb	r4, r4
 8013a9a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8013a9e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8013aa2:	e131      	b.n	8013d08 <_vfiprintf_r+0x8f8>
 8013aa4:	ab3a      	add	r3, sp, #232	@ 0xe8
 8013aa6:	9308      	str	r3, [sp, #32]
 8013aa8:	9b04      	ldr	r3, [sp, #16]
 8013aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013aae:	f04f 0a00 	mov.w	sl, #0
 8013ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ab4:	220a      	movs	r2, #10
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	4620      	mov	r0, r4
 8013aba:	4629      	mov	r1, r5
 8013abc:	f7ed f90c 	bl	8000cd8 <__aeabi_uldivmod>
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	9908      	ldr	r1, [sp, #32]
 8013ac4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013ac6:	3230      	adds	r2, #48	@ 0x30
 8013ac8:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013acc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ace:	f101 39ff 	add.w	r9, r1, #4294967295
 8013ad2:	f10a 0a01 	add.w	sl, sl, #1
 8013ad6:	b1e2      	cbz	r2, 8013b12 <_vfiprintf_r+0x702>
 8013ad8:	9a06      	ldr	r2, [sp, #24]
 8013ada:	7812      	ldrb	r2, [r2, #0]
 8013adc:	4552      	cmp	r2, sl
 8013ade:	d118      	bne.n	8013b12 <_vfiprintf_r+0x702>
 8013ae0:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8013ae4:	d015      	beq.n	8013b12 <_vfiprintf_r+0x702>
 8013ae6:	2c0a      	cmp	r4, #10
 8013ae8:	f175 0200 	sbcs.w	r2, r5, #0
 8013aec:	d311      	bcc.n	8013b12 <_vfiprintf_r+0x702>
 8013aee:	9308      	str	r3, [sp, #32]
 8013af0:	9b07      	ldr	r3, [sp, #28]
 8013af2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013af4:	eba9 0903 	sub.w	r9, r9, r3
 8013af8:	461a      	mov	r2, r3
 8013afa:	4648      	mov	r0, r9
 8013afc:	f7fd ff7a 	bl	80119f4 <strncpy>
 8013b00:	9b06      	ldr	r3, [sp, #24]
 8013b02:	785a      	ldrb	r2, [r3, #1]
 8013b04:	9b08      	ldr	r3, [sp, #32]
 8013b06:	b172      	cbz	r2, 8013b26 <_vfiprintf_r+0x716>
 8013b08:	9a06      	ldr	r2, [sp, #24]
 8013b0a:	3201      	adds	r2, #1
 8013b0c:	9206      	str	r2, [sp, #24]
 8013b0e:	f04f 0a00 	mov.w	sl, #0
 8013b12:	2c0a      	cmp	r4, #10
 8013b14:	f175 0500 	sbcs.w	r5, r5, #0
 8013b18:	f0c0 80f6 	bcc.w	8013d08 <_vfiprintf_r+0x8f8>
 8013b1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013b1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8013b22:	461d      	mov	r5, r3
 8013b24:	e7c6      	b.n	8013ab4 <_vfiprintf_r+0x6a4>
 8013b26:	4692      	mov	sl, r2
 8013b28:	e7f3      	b.n	8013b12 <_vfiprintf_r+0x702>
 8013b2a:	f004 030f 	and.w	r3, r4, #15
 8013b2e:	9a05      	ldr	r2, [sp, #20]
 8013b30:	0924      	lsrs	r4, r4, #4
 8013b32:	5cd3      	ldrb	r3, [r2, r3]
 8013b34:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013b38:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8013b3c:	092d      	lsrs	r5, r5, #4
 8013b3e:	ea54 0305 	orrs.w	r3, r4, r5
 8013b42:	d1f2      	bne.n	8013b2a <_vfiprintf_r+0x71a>
 8013b44:	e0e0      	b.n	8013d08 <_vfiprintf_r+0x8f8>
 8013b46:	b923      	cbnz	r3, 8013b52 <_vfiprintf_r+0x742>
 8013b48:	f01a 0f01 	tst.w	sl, #1
 8013b4c:	d001      	beq.n	8013b52 <_vfiprintf_r+0x742>
 8013b4e:	2430      	movs	r4, #48	@ 0x30
 8013b50:	e7a3      	b.n	8013a9a <_vfiprintf_r+0x68a>
 8013b52:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8013b56:	e0d7      	b.n	8013d08 <_vfiprintf_r+0x8f8>
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 80a3 	beq.w	8013ca4 <_vfiprintf_r+0x894>
 8013b5e:	2400      	movs	r4, #0
 8013b60:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8013b64:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8013b68:	46a8      	mov	r8, r5
 8013b6a:	e5e0      	b.n	801372e <_vfiprintf_r+0x31e>
 8013b6c:	0801552d 	.word	0x0801552d
 8013b70:	0801551d 	.word	0x0801551d
 8013b74:	080151d5 	.word	0x080151d5
 8013b78:	2110      	movs	r1, #16
 8013b7a:	6071      	str	r1, [r6, #4]
 8013b7c:	2a07      	cmp	r2, #7
 8013b7e:	4461      	add	r1, ip
 8013b80:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013b84:	dd08      	ble.n	8013b98 <_vfiprintf_r+0x788>
 8013b86:	9800      	ldr	r0, [sp, #0]
 8013b88:	aa0e      	add	r2, sp, #56	@ 0x38
 8013b8a:	4639      	mov	r1, r7
 8013b8c:	f7ff fc0e 	bl	80133ac <__sprint_r>
 8013b90:	2800      	cmp	r0, #0
 8013b92:	d166      	bne.n	8013c62 <_vfiprintf_r+0x852>
 8013b94:	4b60      	ldr	r3, [pc, #384]	@ (8013d18 <_vfiprintf_r+0x908>)
 8013b96:	a811      	add	r0, sp, #68	@ 0x44
 8013b98:	3d10      	subs	r5, #16
 8013b9a:	4606      	mov	r6, r0
 8013b9c:	e694      	b.n	80138c8 <_vfiprintf_r+0x4b8>
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	e6ac      	b.n	80138fc <_vfiprintf_r+0x4ec>
 8013ba2:	9800      	ldr	r0, [sp, #0]
 8013ba4:	aa0e      	add	r2, sp, #56	@ 0x38
 8013ba6:	4639      	mov	r1, r7
 8013ba8:	f7ff fc00 	bl	80133ac <__sprint_r>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d158      	bne.n	8013c62 <_vfiprintf_r+0x852>
 8013bb0:	ae11      	add	r6, sp, #68	@ 0x44
 8013bb2:	e6b5      	b.n	8013920 <_vfiprintf_r+0x510>
 8013bb4:	9800      	ldr	r0, [sp, #0]
 8013bb6:	aa0e      	add	r2, sp, #56	@ 0x38
 8013bb8:	4639      	mov	r1, r7
 8013bba:	f7ff fbf7 	bl	80133ac <__sprint_r>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d14f      	bne.n	8013c62 <_vfiprintf_r+0x852>
 8013bc2:	ae11      	add	r6, sp, #68	@ 0x44
 8013bc4:	e6bc      	b.n	8013940 <_vfiprintf_r+0x530>
 8013bc6:	2110      	movs	r1, #16
 8013bc8:	6071      	str	r1, [r6, #4]
 8013bca:	2a07      	cmp	r2, #7
 8013bcc:	4461      	add	r1, ip
 8013bce:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013bd2:	dd08      	ble.n	8013be6 <_vfiprintf_r+0x7d6>
 8013bd4:	9800      	ldr	r0, [sp, #0]
 8013bd6:	aa0e      	add	r2, sp, #56	@ 0x38
 8013bd8:	4639      	mov	r1, r7
 8013bda:	f7ff fbe7 	bl	80133ac <__sprint_r>
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d13f      	bne.n	8013c62 <_vfiprintf_r+0x852>
 8013be2:	4b4e      	ldr	r3, [pc, #312]	@ (8013d1c <_vfiprintf_r+0x90c>)
 8013be4:	a811      	add	r0, sp, #68	@ 0x44
 8013be6:	3d10      	subs	r5, #16
 8013be8:	4606      	mov	r6, r0
 8013bea:	e6b2      	b.n	8013952 <_vfiprintf_r+0x542>
 8013bec:	4606      	mov	r6, r0
 8013bee:	e6ca      	b.n	8013986 <_vfiprintf_r+0x576>
 8013bf0:	2010      	movs	r0, #16
 8013bf2:	4402      	add	r2, r0
 8013bf4:	2b07      	cmp	r3, #7
 8013bf6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013bfa:	6070      	str	r0, [r6, #4]
 8013bfc:	dd06      	ble.n	8013c0c <_vfiprintf_r+0x7fc>
 8013bfe:	9800      	ldr	r0, [sp, #0]
 8013c00:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c02:	4639      	mov	r1, r7
 8013c04:	f7ff fbd2 	bl	80133ac <__sprint_r>
 8013c08:	bb58      	cbnz	r0, 8013c62 <_vfiprintf_r+0x852>
 8013c0a:	a911      	add	r1, sp, #68	@ 0x44
 8013c0c:	3c10      	subs	r4, #16
 8013c0e:	460e      	mov	r6, r1
 8013c10:	e6bd      	b.n	801398e <_vfiprintf_r+0x57e>
 8013c12:	460e      	mov	r6, r1
 8013c14:	e6d6      	b.n	80139c4 <_vfiprintf_r+0x5b4>
 8013c16:	9800      	ldr	r0, [sp, #0]
 8013c18:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	f7ff fbc6 	bl	80133ac <__sprint_r>
 8013c20:	b9f8      	cbnz	r0, 8013c62 <_vfiprintf_r+0x852>
 8013c22:	ab11      	add	r3, sp, #68	@ 0x44
 8013c24:	e6de      	b.n	80139e4 <_vfiprintf_r+0x5d4>
 8013c26:	9a02      	ldr	r2, [sp, #8]
 8013c28:	9904      	ldr	r1, [sp, #16]
 8013c2a:	1a54      	subs	r4, r2, r1
 8013c2c:	2c00      	cmp	r4, #0
 8013c2e:	f77f aedd 	ble.w	80139ec <_vfiprintf_r+0x5dc>
 8013c32:	4d39      	ldr	r5, [pc, #228]	@ (8013d18 <_vfiprintf_r+0x908>)
 8013c34:	2610      	movs	r6, #16
 8013c36:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8013c3a:	2c10      	cmp	r4, #16
 8013c3c:	f102 0201 	add.w	r2, r2, #1
 8013c40:	601d      	str	r5, [r3, #0]
 8013c42:	dc1d      	bgt.n	8013c80 <_vfiprintf_r+0x870>
 8013c44:	605c      	str	r4, [r3, #4]
 8013c46:	2a07      	cmp	r2, #7
 8013c48:	440c      	add	r4, r1
 8013c4a:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8013c4e:	f77f aecd 	ble.w	80139ec <_vfiprintf_r+0x5dc>
 8013c52:	9800      	ldr	r0, [sp, #0]
 8013c54:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c56:	4639      	mov	r1, r7
 8013c58:	f7ff fba8 	bl	80133ac <__sprint_r>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	f43f aec5 	beq.w	80139ec <_vfiprintf_r+0x5dc>
 8013c62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c64:	07d9      	lsls	r1, r3, #31
 8013c66:	d405      	bmi.n	8013c74 <_vfiprintf_r+0x864>
 8013c68:	89bb      	ldrh	r3, [r7, #12]
 8013c6a:	059a      	lsls	r2, r3, #22
 8013c6c:	d402      	bmi.n	8013c74 <_vfiprintf_r+0x864>
 8013c6e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013c70:	f7fc f87b 	bl	800fd6a <__retarget_lock_release_recursive>
 8013c74:	89bb      	ldrh	r3, [r7, #12]
 8013c76:	065b      	lsls	r3, r3, #25
 8013c78:	f57f abfb 	bpl.w	8013472 <_vfiprintf_r+0x62>
 8013c7c:	f7ff bbf6 	b.w	801346c <_vfiprintf_r+0x5c>
 8013c80:	3110      	adds	r1, #16
 8013c82:	2a07      	cmp	r2, #7
 8013c84:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013c88:	605e      	str	r6, [r3, #4]
 8013c8a:	dc02      	bgt.n	8013c92 <_vfiprintf_r+0x882>
 8013c8c:	3308      	adds	r3, #8
 8013c8e:	3c10      	subs	r4, #16
 8013c90:	e7d1      	b.n	8013c36 <_vfiprintf_r+0x826>
 8013c92:	9800      	ldr	r0, [sp, #0]
 8013c94:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c96:	4639      	mov	r1, r7
 8013c98:	f7ff fb88 	bl	80133ac <__sprint_r>
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d1e0      	bne.n	8013c62 <_vfiprintf_r+0x852>
 8013ca0:	ab11      	add	r3, sp, #68	@ 0x44
 8013ca2:	e7f4      	b.n	8013c8e <_vfiprintf_r+0x87e>
 8013ca4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ca6:	b913      	cbnz	r3, 8013cae <_vfiprintf_r+0x89e>
 8013ca8:	2300      	movs	r3, #0
 8013caa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013cac:	e7d9      	b.n	8013c62 <_vfiprintf_r+0x852>
 8013cae:	9800      	ldr	r0, [sp, #0]
 8013cb0:	aa0e      	add	r2, sp, #56	@ 0x38
 8013cb2:	4639      	mov	r1, r7
 8013cb4:	f7ff fb7a 	bl	80133ac <__sprint_r>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d0f5      	beq.n	8013ca8 <_vfiprintf_r+0x898>
 8013cbc:	e7d1      	b.n	8013c62 <_vfiprintf_r+0x852>
 8013cbe:	ea54 0205 	orrs.w	r2, r4, r5
 8013cc2:	f8cd a010 	str.w	sl, [sp, #16]
 8013cc6:	f43f ada6 	beq.w	8013816 <_vfiprintf_r+0x406>
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	f43f aedf 	beq.w	8013a8e <_vfiprintf_r+0x67e>
 8013cd0:	2b02      	cmp	r3, #2
 8013cd2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8013cd6:	f43f af28 	beq.w	8013b2a <_vfiprintf_r+0x71a>
 8013cda:	f004 0307 	and.w	r3, r4, #7
 8013cde:	08e4      	lsrs	r4, r4, #3
 8013ce0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8013ce4:	08ed      	lsrs	r5, r5, #3
 8013ce6:	3330      	adds	r3, #48	@ 0x30
 8013ce8:	ea54 0105 	orrs.w	r1, r4, r5
 8013cec:	464a      	mov	r2, r9
 8013cee:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013cf2:	d1f2      	bne.n	8013cda <_vfiprintf_r+0x8ca>
 8013cf4:	9904      	ldr	r1, [sp, #16]
 8013cf6:	07c8      	lsls	r0, r1, #31
 8013cf8:	d506      	bpl.n	8013d08 <_vfiprintf_r+0x8f8>
 8013cfa:	2b30      	cmp	r3, #48	@ 0x30
 8013cfc:	d004      	beq.n	8013d08 <_vfiprintf_r+0x8f8>
 8013cfe:	2330      	movs	r3, #48	@ 0x30
 8013d00:	f809 3c01 	strb.w	r3, [r9, #-1]
 8013d04:	f1a2 0902 	sub.w	r9, r2, #2
 8013d08:	ab3a      	add	r3, sp, #232	@ 0xe8
 8013d0a:	eba3 0309 	sub.w	r3, r3, r9
 8013d0e:	9c01      	ldr	r4, [sp, #4]
 8013d10:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013d14:	9301      	str	r3, [sp, #4]
 8013d16:	e5bb      	b.n	8013890 <_vfiprintf_r+0x480>
 8013d18:	0801552d 	.word	0x0801552d
 8013d1c:	0801551d 	.word	0x0801551d

08013d20 <__sbprintf>:
 8013d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d22:	461f      	mov	r7, r3
 8013d24:	898b      	ldrh	r3, [r1, #12]
 8013d26:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8013d2a:	f023 0302 	bic.w	r3, r3, #2
 8013d2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013d32:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8013d34:	9319      	str	r3, [sp, #100]	@ 0x64
 8013d36:	89cb      	ldrh	r3, [r1, #14]
 8013d38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013d3c:	69cb      	ldr	r3, [r1, #28]
 8013d3e:	9307      	str	r3, [sp, #28]
 8013d40:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8013d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d44:	ab1a      	add	r3, sp, #104	@ 0x68
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	9304      	str	r3, [sp, #16]
 8013d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d4e:	4615      	mov	r5, r2
 8013d50:	4606      	mov	r6, r0
 8013d52:	9302      	str	r3, [sp, #8]
 8013d54:	9305      	str	r3, [sp, #20]
 8013d56:	a816      	add	r0, sp, #88	@ 0x58
 8013d58:	2300      	movs	r3, #0
 8013d5a:	460c      	mov	r4, r1
 8013d5c:	9306      	str	r3, [sp, #24]
 8013d5e:	f7fc f801 	bl	800fd64 <__retarget_lock_init_recursive>
 8013d62:	462a      	mov	r2, r5
 8013d64:	463b      	mov	r3, r7
 8013d66:	4669      	mov	r1, sp
 8013d68:	4630      	mov	r0, r6
 8013d6a:	f7ff fb51 	bl	8013410 <_vfiprintf_r>
 8013d6e:	1e05      	subs	r5, r0, #0
 8013d70:	db07      	blt.n	8013d82 <__sbprintf+0x62>
 8013d72:	4669      	mov	r1, sp
 8013d74:	4630      	mov	r0, r6
 8013d76:	f7fd fbf7 	bl	8011568 <_fflush_r>
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	bf18      	it	ne
 8013d7e:	f04f 35ff 	movne.w	r5, #4294967295
 8013d82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013d86:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013d88:	065b      	lsls	r3, r3, #25
 8013d8a:	bf42      	ittt	mi
 8013d8c:	89a3      	ldrhmi	r3, [r4, #12]
 8013d8e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8013d92:	81a3      	strhmi	r3, [r4, #12]
 8013d94:	f7fb ffe7 	bl	800fd66 <__retarget_lock_close_recursive>
 8013d98:	4628      	mov	r0, r5
 8013d9a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8013d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013da0 <__fputwc>:
 8013da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013da4:	4680      	mov	r8, r0
 8013da6:	460f      	mov	r7, r1
 8013da8:	4614      	mov	r4, r2
 8013daa:	f7fd fe37 	bl	8011a1c <__locale_mb_cur_max>
 8013dae:	2801      	cmp	r0, #1
 8013db0:	4605      	mov	r5, r0
 8013db2:	d11b      	bne.n	8013dec <__fputwc+0x4c>
 8013db4:	1e7b      	subs	r3, r7, #1
 8013db6:	2bfe      	cmp	r3, #254	@ 0xfe
 8013db8:	d818      	bhi.n	8013dec <__fputwc+0x4c>
 8013dba:	f88d 7004 	strb.w	r7, [sp, #4]
 8013dbe:	2600      	movs	r6, #0
 8013dc0:	f10d 0904 	add.w	r9, sp, #4
 8013dc4:	42ae      	cmp	r6, r5
 8013dc6:	d021      	beq.n	8013e0c <__fputwc+0x6c>
 8013dc8:	68a3      	ldr	r3, [r4, #8]
 8013dca:	f816 1009 	ldrb.w	r1, [r6, r9]
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	60a3      	str	r3, [r4, #8]
 8013dd4:	da04      	bge.n	8013de0 <__fputwc+0x40>
 8013dd6:	69a2      	ldr	r2, [r4, #24]
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	db1b      	blt.n	8013e14 <__fputwc+0x74>
 8013ddc:	290a      	cmp	r1, #10
 8013dde:	d019      	beq.n	8013e14 <__fputwc+0x74>
 8013de0:	6823      	ldr	r3, [r4, #0]
 8013de2:	1c5a      	adds	r2, r3, #1
 8013de4:	6022      	str	r2, [r4, #0]
 8013de6:	7019      	strb	r1, [r3, #0]
 8013de8:	3601      	adds	r6, #1
 8013dea:	e7eb      	b.n	8013dc4 <__fputwc+0x24>
 8013dec:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8013df0:	463a      	mov	r2, r7
 8013df2:	a901      	add	r1, sp, #4
 8013df4:	4640      	mov	r0, r8
 8013df6:	f000 f845 	bl	8013e84 <_wcrtomb_r>
 8013dfa:	1c43      	adds	r3, r0, #1
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	d1de      	bne.n	8013dbe <__fputwc+0x1e>
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e06:	81a3      	strh	r3, [r4, #12]
 8013e08:	f04f 37ff 	mov.w	r7, #4294967295
 8013e0c:	4638      	mov	r0, r7
 8013e0e:	b003      	add	sp, #12
 8013e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e14:	4622      	mov	r2, r4
 8013e16:	4640      	mov	r0, r8
 8013e18:	f000 f84a 	bl	8013eb0 <__swbuf_r>
 8013e1c:	3001      	adds	r0, #1
 8013e1e:	d1e3      	bne.n	8013de8 <__fputwc+0x48>
 8013e20:	e7f2      	b.n	8013e08 <__fputwc+0x68>

08013e22 <_fputwc_r>:
 8013e22:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8013e24:	07db      	lsls	r3, r3, #31
 8013e26:	b570      	push	{r4, r5, r6, lr}
 8013e28:	4605      	mov	r5, r0
 8013e2a:	460e      	mov	r6, r1
 8013e2c:	4614      	mov	r4, r2
 8013e2e:	d405      	bmi.n	8013e3c <_fputwc_r+0x1a>
 8013e30:	8993      	ldrh	r3, [r2, #12]
 8013e32:	0598      	lsls	r0, r3, #22
 8013e34:	d402      	bmi.n	8013e3c <_fputwc_r+0x1a>
 8013e36:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8013e38:	f7fb ff96 	bl	800fd68 <__retarget_lock_acquire_recursive>
 8013e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e40:	0499      	lsls	r1, r3, #18
 8013e42:	d406      	bmi.n	8013e52 <_fputwc_r+0x30>
 8013e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013e48:	81a3      	strh	r3, [r4, #12]
 8013e4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013e50:	6663      	str	r3, [r4, #100]	@ 0x64
 8013e52:	4622      	mov	r2, r4
 8013e54:	4628      	mov	r0, r5
 8013e56:	4631      	mov	r1, r6
 8013e58:	f7ff ffa2 	bl	8013da0 <__fputwc>
 8013e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e5e:	07da      	lsls	r2, r3, #31
 8013e60:	4605      	mov	r5, r0
 8013e62:	d405      	bmi.n	8013e70 <_fputwc_r+0x4e>
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	059b      	lsls	r3, r3, #22
 8013e68:	d402      	bmi.n	8013e70 <_fputwc_r+0x4e>
 8013e6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e6c:	f7fb ff7d 	bl	800fd6a <__retarget_lock_release_recursive>
 8013e70:	4628      	mov	r0, r5
 8013e72:	bd70      	pop	{r4, r5, r6, pc}

08013e74 <abort>:
 8013e74:	b508      	push	{r3, lr}
 8013e76:	2006      	movs	r0, #6
 8013e78:	f000 f88c 	bl	8013f94 <raise>
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	f7ee ff9b 	bl	8002db8 <_exit>
	...

08013e84 <_wcrtomb_r>:
 8013e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e86:	4c09      	ldr	r4, [pc, #36]	@ (8013eac <_wcrtomb_r+0x28>)
 8013e88:	b085      	sub	sp, #20
 8013e8a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8013e8e:	4605      	mov	r5, r0
 8013e90:	461e      	mov	r6, r3
 8013e92:	b909      	cbnz	r1, 8013e98 <_wcrtomb_r+0x14>
 8013e94:	460a      	mov	r2, r1
 8013e96:	a901      	add	r1, sp, #4
 8013e98:	47b8      	blx	r7
 8013e9a:	1c43      	adds	r3, r0, #1
 8013e9c:	bf01      	itttt	eq
 8013e9e:	2300      	moveq	r3, #0
 8013ea0:	6033      	streq	r3, [r6, #0]
 8013ea2:	238a      	moveq	r3, #138	@ 0x8a
 8013ea4:	602b      	streq	r3, [r5, #0]
 8013ea6:	b005      	add	sp, #20
 8013ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	2000055c 	.word	0x2000055c

08013eb0 <__swbuf_r>:
 8013eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eb2:	460e      	mov	r6, r1
 8013eb4:	4614      	mov	r4, r2
 8013eb6:	4605      	mov	r5, r0
 8013eb8:	b118      	cbz	r0, 8013ec2 <__swbuf_r+0x12>
 8013eba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013ebc:	b90b      	cbnz	r3, 8013ec2 <__swbuf_r+0x12>
 8013ebe:	f7fb fcfb 	bl	800f8b8 <__sinit>
 8013ec2:	69a3      	ldr	r3, [r4, #24]
 8013ec4:	60a3      	str	r3, [r4, #8]
 8013ec6:	89a3      	ldrh	r3, [r4, #12]
 8013ec8:	0719      	lsls	r1, r3, #28
 8013eca:	d501      	bpl.n	8013ed0 <__swbuf_r+0x20>
 8013ecc:	6923      	ldr	r3, [r4, #16]
 8013ece:	b943      	cbnz	r3, 8013ee2 <__swbuf_r+0x32>
 8013ed0:	4621      	mov	r1, r4
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f7fd fd1e 	bl	8011914 <__swsetup_r>
 8013ed8:	b118      	cbz	r0, 8013ee2 <__swbuf_r+0x32>
 8013eda:	f04f 37ff 	mov.w	r7, #4294967295
 8013ede:	4638      	mov	r0, r7
 8013ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ee6:	b2f6      	uxtb	r6, r6
 8013ee8:	049a      	lsls	r2, r3, #18
 8013eea:	4637      	mov	r7, r6
 8013eec:	d406      	bmi.n	8013efc <__swbuf_r+0x4c>
 8013eee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013ef2:	81a3      	strh	r3, [r4, #12]
 8013ef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ef6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013efa:	6663      	str	r3, [r4, #100]	@ 0x64
 8013efc:	6823      	ldr	r3, [r4, #0]
 8013efe:	6922      	ldr	r2, [r4, #16]
 8013f00:	1a98      	subs	r0, r3, r2
 8013f02:	6963      	ldr	r3, [r4, #20]
 8013f04:	4283      	cmp	r3, r0
 8013f06:	dc05      	bgt.n	8013f14 <__swbuf_r+0x64>
 8013f08:	4621      	mov	r1, r4
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f7fd fb2c 	bl	8011568 <_fflush_r>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d1e2      	bne.n	8013eda <__swbuf_r+0x2a>
 8013f14:	68a3      	ldr	r3, [r4, #8]
 8013f16:	3b01      	subs	r3, #1
 8013f18:	60a3      	str	r3, [r4, #8]
 8013f1a:	6823      	ldr	r3, [r4, #0]
 8013f1c:	1c5a      	adds	r2, r3, #1
 8013f1e:	6022      	str	r2, [r4, #0]
 8013f20:	701e      	strb	r6, [r3, #0]
 8013f22:	6962      	ldr	r2, [r4, #20]
 8013f24:	1c43      	adds	r3, r0, #1
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d004      	beq.n	8013f34 <__swbuf_r+0x84>
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	07db      	lsls	r3, r3, #31
 8013f2e:	d5d6      	bpl.n	8013ede <__swbuf_r+0x2e>
 8013f30:	2e0a      	cmp	r6, #10
 8013f32:	d1d4      	bne.n	8013ede <__swbuf_r+0x2e>
 8013f34:	4621      	mov	r1, r4
 8013f36:	4628      	mov	r0, r5
 8013f38:	f7fd fb16 	bl	8011568 <_fflush_r>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d0ce      	beq.n	8013ede <__swbuf_r+0x2e>
 8013f40:	e7cb      	b.n	8013eda <__swbuf_r+0x2a>

08013f42 <_raise_r>:
 8013f42:	291f      	cmp	r1, #31
 8013f44:	b538      	push	{r3, r4, r5, lr}
 8013f46:	4605      	mov	r5, r0
 8013f48:	460c      	mov	r4, r1
 8013f4a:	d904      	bls.n	8013f56 <_raise_r+0x14>
 8013f4c:	2316      	movs	r3, #22
 8013f4e:	6003      	str	r3, [r0, #0]
 8013f50:	f04f 30ff 	mov.w	r0, #4294967295
 8013f54:	bd38      	pop	{r3, r4, r5, pc}
 8013f56:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8013f5a:	b112      	cbz	r2, 8013f62 <_raise_r+0x20>
 8013f5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f60:	b94b      	cbnz	r3, 8013f76 <_raise_r+0x34>
 8013f62:	4628      	mov	r0, r5
 8013f64:	f000 f830 	bl	8013fc8 <_getpid_r>
 8013f68:	4622      	mov	r2, r4
 8013f6a:	4601      	mov	r1, r0
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f72:	f000 b817 	b.w	8013fa4 <_kill_r>
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d00a      	beq.n	8013f90 <_raise_r+0x4e>
 8013f7a:	1c59      	adds	r1, r3, #1
 8013f7c:	d103      	bne.n	8013f86 <_raise_r+0x44>
 8013f7e:	2316      	movs	r3, #22
 8013f80:	6003      	str	r3, [r0, #0]
 8013f82:	2001      	movs	r0, #1
 8013f84:	e7e6      	b.n	8013f54 <_raise_r+0x12>
 8013f86:	2100      	movs	r1, #0
 8013f88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	4798      	blx	r3
 8013f90:	2000      	movs	r0, #0
 8013f92:	e7df      	b.n	8013f54 <_raise_r+0x12>

08013f94 <raise>:
 8013f94:	4b02      	ldr	r3, [pc, #8]	@ (8013fa0 <raise+0xc>)
 8013f96:	4601      	mov	r1, r0
 8013f98:	6818      	ldr	r0, [r3, #0]
 8013f9a:	f7ff bfd2 	b.w	8013f42 <_raise_r>
 8013f9e:	bf00      	nop
 8013fa0:	20000434 	.word	0x20000434

08013fa4 <_kill_r>:
 8013fa4:	b538      	push	{r3, r4, r5, lr}
 8013fa6:	4d07      	ldr	r5, [pc, #28]	@ (8013fc4 <_kill_r+0x20>)
 8013fa8:	2300      	movs	r3, #0
 8013faa:	4604      	mov	r4, r0
 8013fac:	4608      	mov	r0, r1
 8013fae:	4611      	mov	r1, r2
 8013fb0:	602b      	str	r3, [r5, #0]
 8013fb2:	f7ee fef1 	bl	8002d98 <_kill>
 8013fb6:	1c43      	adds	r3, r0, #1
 8013fb8:	d102      	bne.n	8013fc0 <_kill_r+0x1c>
 8013fba:	682b      	ldr	r3, [r5, #0]
 8013fbc:	b103      	cbz	r3, 8013fc0 <_kill_r+0x1c>
 8013fbe:	6023      	str	r3, [r4, #0]
 8013fc0:	bd38      	pop	{r3, r4, r5, pc}
 8013fc2:	bf00      	nop
 8013fc4:	200038a0 	.word	0x200038a0

08013fc8 <_getpid_r>:
 8013fc8:	f7ee bede 	b.w	8002d88 <_getpid>
 8013fcc:	0000      	movs	r0, r0
	...

08013fd0 <sin>:
 8013fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013fd2:	ec53 2b10 	vmov	r2, r3, d0
 8013fd6:	4826      	ldr	r0, [pc, #152]	@ (8014070 <sin+0xa0>)
 8013fd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013fdc:	4281      	cmp	r1, r0
 8013fde:	d807      	bhi.n	8013ff0 <sin+0x20>
 8013fe0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8014068 <sin+0x98>
 8013fe4:	2000      	movs	r0, #0
 8013fe6:	b005      	add	sp, #20
 8013fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fec:	f000 b90c 	b.w	8014208 <__kernel_sin>
 8013ff0:	4820      	ldr	r0, [pc, #128]	@ (8014074 <sin+0xa4>)
 8013ff2:	4281      	cmp	r1, r0
 8013ff4:	d908      	bls.n	8014008 <sin+0x38>
 8013ff6:	4610      	mov	r0, r2
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	f7ec f96d 	bl	80002d8 <__aeabi_dsub>
 8013ffe:	ec41 0b10 	vmov	d0, r0, r1
 8014002:	b005      	add	sp, #20
 8014004:	f85d fb04 	ldr.w	pc, [sp], #4
 8014008:	4668      	mov	r0, sp
 801400a:	f000 f9b9 	bl	8014380 <__ieee754_rem_pio2>
 801400e:	f000 0003 	and.w	r0, r0, #3
 8014012:	2801      	cmp	r0, #1
 8014014:	d00c      	beq.n	8014030 <sin+0x60>
 8014016:	2802      	cmp	r0, #2
 8014018:	d011      	beq.n	801403e <sin+0x6e>
 801401a:	b9e8      	cbnz	r0, 8014058 <sin+0x88>
 801401c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014020:	ed9d 0b00 	vldr	d0, [sp]
 8014024:	2001      	movs	r0, #1
 8014026:	f000 f8ef 	bl	8014208 <__kernel_sin>
 801402a:	ec51 0b10 	vmov	r0, r1, d0
 801402e:	e7e6      	b.n	8013ffe <sin+0x2e>
 8014030:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014034:	ed9d 0b00 	vldr	d0, [sp]
 8014038:	f000 f81e 	bl	8014078 <__kernel_cos>
 801403c:	e7f5      	b.n	801402a <sin+0x5a>
 801403e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014042:	ed9d 0b00 	vldr	d0, [sp]
 8014046:	2001      	movs	r0, #1
 8014048:	f000 f8de 	bl	8014208 <__kernel_sin>
 801404c:	ec53 2b10 	vmov	r2, r3, d0
 8014050:	4610      	mov	r0, r2
 8014052:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014056:	e7d2      	b.n	8013ffe <sin+0x2e>
 8014058:	ed9d 1b02 	vldr	d1, [sp, #8]
 801405c:	ed9d 0b00 	vldr	d0, [sp]
 8014060:	f000 f80a 	bl	8014078 <__kernel_cos>
 8014064:	e7f2      	b.n	801404c <sin+0x7c>
 8014066:	bf00      	nop
	...
 8014070:	3fe921fb 	.word	0x3fe921fb
 8014074:	7fefffff 	.word	0x7fefffff

08014078 <__kernel_cos>:
 8014078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407c:	ec57 6b10 	vmov	r6, r7, d0
 8014080:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014084:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8014088:	ed8d 1b00 	vstr	d1, [sp]
 801408c:	d206      	bcs.n	801409c <__kernel_cos+0x24>
 801408e:	4630      	mov	r0, r6
 8014090:	4639      	mov	r1, r7
 8014092:	f7ec fd89 	bl	8000ba8 <__aeabi_d2iz>
 8014096:	2800      	cmp	r0, #0
 8014098:	f000 8088 	beq.w	80141ac <__kernel_cos+0x134>
 801409c:	4632      	mov	r2, r6
 801409e:	463b      	mov	r3, r7
 80140a0:	4630      	mov	r0, r6
 80140a2:	4639      	mov	r1, r7
 80140a4:	f7ec fad0 	bl	8000648 <__aeabi_dmul>
 80140a8:	4b51      	ldr	r3, [pc, #324]	@ (80141f0 <__kernel_cos+0x178>)
 80140aa:	2200      	movs	r2, #0
 80140ac:	4604      	mov	r4, r0
 80140ae:	460d      	mov	r5, r1
 80140b0:	f7ec faca 	bl	8000648 <__aeabi_dmul>
 80140b4:	a340      	add	r3, pc, #256	@ (adr r3, 80141b8 <__kernel_cos+0x140>)
 80140b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ba:	4682      	mov	sl, r0
 80140bc:	468b      	mov	fp, r1
 80140be:	4620      	mov	r0, r4
 80140c0:	4629      	mov	r1, r5
 80140c2:	f7ec fac1 	bl	8000648 <__aeabi_dmul>
 80140c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80141c0 <__kernel_cos+0x148>)
 80140c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140cc:	f7ec f906 	bl	80002dc <__adddf3>
 80140d0:	4622      	mov	r2, r4
 80140d2:	462b      	mov	r3, r5
 80140d4:	f7ec fab8 	bl	8000648 <__aeabi_dmul>
 80140d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80141c8 <__kernel_cos+0x150>)
 80140da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140de:	f7ec f8fb 	bl	80002d8 <__aeabi_dsub>
 80140e2:	4622      	mov	r2, r4
 80140e4:	462b      	mov	r3, r5
 80140e6:	f7ec faaf 	bl	8000648 <__aeabi_dmul>
 80140ea:	a339      	add	r3, pc, #228	@ (adr r3, 80141d0 <__kernel_cos+0x158>)
 80140ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f0:	f7ec f8f4 	bl	80002dc <__adddf3>
 80140f4:	4622      	mov	r2, r4
 80140f6:	462b      	mov	r3, r5
 80140f8:	f7ec faa6 	bl	8000648 <__aeabi_dmul>
 80140fc:	a336      	add	r3, pc, #216	@ (adr r3, 80141d8 <__kernel_cos+0x160>)
 80140fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014102:	f7ec f8e9 	bl	80002d8 <__aeabi_dsub>
 8014106:	4622      	mov	r2, r4
 8014108:	462b      	mov	r3, r5
 801410a:	f7ec fa9d 	bl	8000648 <__aeabi_dmul>
 801410e:	a334      	add	r3, pc, #208	@ (adr r3, 80141e0 <__kernel_cos+0x168>)
 8014110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014114:	f7ec f8e2 	bl	80002dc <__adddf3>
 8014118:	4622      	mov	r2, r4
 801411a:	462b      	mov	r3, r5
 801411c:	f7ec fa94 	bl	8000648 <__aeabi_dmul>
 8014120:	4622      	mov	r2, r4
 8014122:	462b      	mov	r3, r5
 8014124:	f7ec fa90 	bl	8000648 <__aeabi_dmul>
 8014128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801412c:	4604      	mov	r4, r0
 801412e:	460d      	mov	r5, r1
 8014130:	4630      	mov	r0, r6
 8014132:	4639      	mov	r1, r7
 8014134:	f7ec fa88 	bl	8000648 <__aeabi_dmul>
 8014138:	460b      	mov	r3, r1
 801413a:	4602      	mov	r2, r0
 801413c:	4629      	mov	r1, r5
 801413e:	4620      	mov	r0, r4
 8014140:	f7ec f8ca 	bl	80002d8 <__aeabi_dsub>
 8014144:	4b2b      	ldr	r3, [pc, #172]	@ (80141f4 <__kernel_cos+0x17c>)
 8014146:	4598      	cmp	r8, r3
 8014148:	4606      	mov	r6, r0
 801414a:	460f      	mov	r7, r1
 801414c:	d810      	bhi.n	8014170 <__kernel_cos+0xf8>
 801414e:	4602      	mov	r2, r0
 8014150:	460b      	mov	r3, r1
 8014152:	4650      	mov	r0, sl
 8014154:	4659      	mov	r1, fp
 8014156:	f7ec f8bf 	bl	80002d8 <__aeabi_dsub>
 801415a:	460b      	mov	r3, r1
 801415c:	4926      	ldr	r1, [pc, #152]	@ (80141f8 <__kernel_cos+0x180>)
 801415e:	4602      	mov	r2, r0
 8014160:	2000      	movs	r0, #0
 8014162:	f7ec f8b9 	bl	80002d8 <__aeabi_dsub>
 8014166:	ec41 0b10 	vmov	d0, r0, r1
 801416a:	b003      	add	sp, #12
 801416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014170:	4b22      	ldr	r3, [pc, #136]	@ (80141fc <__kernel_cos+0x184>)
 8014172:	4921      	ldr	r1, [pc, #132]	@ (80141f8 <__kernel_cos+0x180>)
 8014174:	4598      	cmp	r8, r3
 8014176:	bf8c      	ite	hi
 8014178:	4d21      	ldrhi	r5, [pc, #132]	@ (8014200 <__kernel_cos+0x188>)
 801417a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801417e:	2400      	movs	r4, #0
 8014180:	4622      	mov	r2, r4
 8014182:	462b      	mov	r3, r5
 8014184:	2000      	movs	r0, #0
 8014186:	f7ec f8a7 	bl	80002d8 <__aeabi_dsub>
 801418a:	4622      	mov	r2, r4
 801418c:	4680      	mov	r8, r0
 801418e:	4689      	mov	r9, r1
 8014190:	462b      	mov	r3, r5
 8014192:	4650      	mov	r0, sl
 8014194:	4659      	mov	r1, fp
 8014196:	f7ec f89f 	bl	80002d8 <__aeabi_dsub>
 801419a:	4632      	mov	r2, r6
 801419c:	463b      	mov	r3, r7
 801419e:	f7ec f89b 	bl	80002d8 <__aeabi_dsub>
 80141a2:	4602      	mov	r2, r0
 80141a4:	460b      	mov	r3, r1
 80141a6:	4640      	mov	r0, r8
 80141a8:	4649      	mov	r1, r9
 80141aa:	e7da      	b.n	8014162 <__kernel_cos+0xea>
 80141ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80141e8 <__kernel_cos+0x170>
 80141b0:	e7db      	b.n	801416a <__kernel_cos+0xf2>
 80141b2:	bf00      	nop
 80141b4:	f3af 8000 	nop.w
 80141b8:	be8838d4 	.word	0xbe8838d4
 80141bc:	bda8fae9 	.word	0xbda8fae9
 80141c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80141c4:	3e21ee9e 	.word	0x3e21ee9e
 80141c8:	809c52ad 	.word	0x809c52ad
 80141cc:	3e927e4f 	.word	0x3e927e4f
 80141d0:	19cb1590 	.word	0x19cb1590
 80141d4:	3efa01a0 	.word	0x3efa01a0
 80141d8:	16c15177 	.word	0x16c15177
 80141dc:	3f56c16c 	.word	0x3f56c16c
 80141e0:	5555554c 	.word	0x5555554c
 80141e4:	3fa55555 	.word	0x3fa55555
 80141e8:	00000000 	.word	0x00000000
 80141ec:	3ff00000 	.word	0x3ff00000
 80141f0:	3fe00000 	.word	0x3fe00000
 80141f4:	3fd33332 	.word	0x3fd33332
 80141f8:	3ff00000 	.word	0x3ff00000
 80141fc:	3fe90000 	.word	0x3fe90000
 8014200:	3fd20000 	.word	0x3fd20000
 8014204:	00000000 	.word	0x00000000

08014208 <__kernel_sin>:
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	ec55 4b10 	vmov	r4, r5, d0
 8014210:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014214:	b085      	sub	sp, #20
 8014216:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801421a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801421e:	4680      	mov	r8, r0
 8014220:	d205      	bcs.n	801422e <__kernel_sin+0x26>
 8014222:	4620      	mov	r0, r4
 8014224:	4629      	mov	r1, r5
 8014226:	f7ec fcbf 	bl	8000ba8 <__aeabi_d2iz>
 801422a:	2800      	cmp	r0, #0
 801422c:	d052      	beq.n	80142d4 <__kernel_sin+0xcc>
 801422e:	4622      	mov	r2, r4
 8014230:	462b      	mov	r3, r5
 8014232:	4620      	mov	r0, r4
 8014234:	4629      	mov	r1, r5
 8014236:	f7ec fa07 	bl	8000648 <__aeabi_dmul>
 801423a:	4682      	mov	sl, r0
 801423c:	468b      	mov	fp, r1
 801423e:	4602      	mov	r2, r0
 8014240:	460b      	mov	r3, r1
 8014242:	4620      	mov	r0, r4
 8014244:	4629      	mov	r1, r5
 8014246:	f7ec f9ff 	bl	8000648 <__aeabi_dmul>
 801424a:	a342      	add	r3, pc, #264	@ (adr r3, 8014354 <__kernel_sin+0x14c>)
 801424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014250:	e9cd 0100 	strd	r0, r1, [sp]
 8014254:	4650      	mov	r0, sl
 8014256:	4659      	mov	r1, fp
 8014258:	f7ec f9f6 	bl	8000648 <__aeabi_dmul>
 801425c:	a33f      	add	r3, pc, #252	@ (adr r3, 801435c <__kernel_sin+0x154>)
 801425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014262:	f7ec f839 	bl	80002d8 <__aeabi_dsub>
 8014266:	4652      	mov	r2, sl
 8014268:	465b      	mov	r3, fp
 801426a:	f7ec f9ed 	bl	8000648 <__aeabi_dmul>
 801426e:	a33d      	add	r3, pc, #244	@ (adr r3, 8014364 <__kernel_sin+0x15c>)
 8014270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014274:	f7ec f832 	bl	80002dc <__adddf3>
 8014278:	4652      	mov	r2, sl
 801427a:	465b      	mov	r3, fp
 801427c:	f7ec f9e4 	bl	8000648 <__aeabi_dmul>
 8014280:	a33a      	add	r3, pc, #232	@ (adr r3, 801436c <__kernel_sin+0x164>)
 8014282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014286:	f7ec f827 	bl	80002d8 <__aeabi_dsub>
 801428a:	4652      	mov	r2, sl
 801428c:	465b      	mov	r3, fp
 801428e:	f7ec f9db 	bl	8000648 <__aeabi_dmul>
 8014292:	a338      	add	r3, pc, #224	@ (adr r3, 8014374 <__kernel_sin+0x16c>)
 8014294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014298:	f7ec f820 	bl	80002dc <__adddf3>
 801429c:	4606      	mov	r6, r0
 801429e:	460f      	mov	r7, r1
 80142a0:	f1b8 0f00 	cmp.w	r8, #0
 80142a4:	d11b      	bne.n	80142de <__kernel_sin+0xd6>
 80142a6:	4602      	mov	r2, r0
 80142a8:	460b      	mov	r3, r1
 80142aa:	4650      	mov	r0, sl
 80142ac:	4659      	mov	r1, fp
 80142ae:	f7ec f9cb 	bl	8000648 <__aeabi_dmul>
 80142b2:	a325      	add	r3, pc, #148	@ (adr r3, 8014348 <__kernel_sin+0x140>)
 80142b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b8:	f7ec f80e 	bl	80002d8 <__aeabi_dsub>
 80142bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142c0:	f7ec f9c2 	bl	8000648 <__aeabi_dmul>
 80142c4:	4602      	mov	r2, r0
 80142c6:	460b      	mov	r3, r1
 80142c8:	4620      	mov	r0, r4
 80142ca:	4629      	mov	r1, r5
 80142cc:	f7ec f806 	bl	80002dc <__adddf3>
 80142d0:	4604      	mov	r4, r0
 80142d2:	460d      	mov	r5, r1
 80142d4:	ec45 4b10 	vmov	d0, r4, r5
 80142d8:	b005      	add	sp, #20
 80142da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142e2:	4b1b      	ldr	r3, [pc, #108]	@ (8014350 <__kernel_sin+0x148>)
 80142e4:	2200      	movs	r2, #0
 80142e6:	f7ec f9af 	bl	8000648 <__aeabi_dmul>
 80142ea:	4632      	mov	r2, r6
 80142ec:	4680      	mov	r8, r0
 80142ee:	4689      	mov	r9, r1
 80142f0:	463b      	mov	r3, r7
 80142f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142f6:	f7ec f9a7 	bl	8000648 <__aeabi_dmul>
 80142fa:	4602      	mov	r2, r0
 80142fc:	460b      	mov	r3, r1
 80142fe:	4640      	mov	r0, r8
 8014300:	4649      	mov	r1, r9
 8014302:	f7eb ffe9 	bl	80002d8 <__aeabi_dsub>
 8014306:	4652      	mov	r2, sl
 8014308:	465b      	mov	r3, fp
 801430a:	f7ec f99d 	bl	8000648 <__aeabi_dmul>
 801430e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014312:	f7eb ffe1 	bl	80002d8 <__aeabi_dsub>
 8014316:	a30c      	add	r3, pc, #48	@ (adr r3, 8014348 <__kernel_sin+0x140>)
 8014318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431c:	4606      	mov	r6, r0
 801431e:	460f      	mov	r7, r1
 8014320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014324:	f7ec f990 	bl	8000648 <__aeabi_dmul>
 8014328:	4602      	mov	r2, r0
 801432a:	460b      	mov	r3, r1
 801432c:	4630      	mov	r0, r6
 801432e:	4639      	mov	r1, r7
 8014330:	f7eb ffd4 	bl	80002dc <__adddf3>
 8014334:	4602      	mov	r2, r0
 8014336:	460b      	mov	r3, r1
 8014338:	4620      	mov	r0, r4
 801433a:	4629      	mov	r1, r5
 801433c:	f7eb ffcc 	bl	80002d8 <__aeabi_dsub>
 8014340:	e7c6      	b.n	80142d0 <__kernel_sin+0xc8>
 8014342:	bf00      	nop
 8014344:	f3af 8000 	nop.w
 8014348:	55555549 	.word	0x55555549
 801434c:	3fc55555 	.word	0x3fc55555
 8014350:	3fe00000 	.word	0x3fe00000
 8014354:	5acfd57c 	.word	0x5acfd57c
 8014358:	3de5d93a 	.word	0x3de5d93a
 801435c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014360:	3e5ae5e6 	.word	0x3e5ae5e6
 8014364:	57b1fe7d 	.word	0x57b1fe7d
 8014368:	3ec71de3 	.word	0x3ec71de3
 801436c:	19c161d5 	.word	0x19c161d5
 8014370:	3f2a01a0 	.word	0x3f2a01a0
 8014374:	1110f8a6 	.word	0x1110f8a6
 8014378:	3f811111 	.word	0x3f811111
 801437c:	00000000 	.word	0x00000000

08014380 <__ieee754_rem_pio2>:
 8014380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014384:	ec57 6b10 	vmov	r6, r7, d0
 8014388:	4bc5      	ldr	r3, [pc, #788]	@ (80146a0 <__ieee754_rem_pio2+0x320>)
 801438a:	b08d      	sub	sp, #52	@ 0x34
 801438c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014390:	4598      	cmp	r8, r3
 8014392:	4604      	mov	r4, r0
 8014394:	9704      	str	r7, [sp, #16]
 8014396:	d807      	bhi.n	80143a8 <__ieee754_rem_pio2+0x28>
 8014398:	2200      	movs	r2, #0
 801439a:	2300      	movs	r3, #0
 801439c:	ed80 0b00 	vstr	d0, [r0]
 80143a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80143a4:	2500      	movs	r5, #0
 80143a6:	e028      	b.n	80143fa <__ieee754_rem_pio2+0x7a>
 80143a8:	4bbe      	ldr	r3, [pc, #760]	@ (80146a4 <__ieee754_rem_pio2+0x324>)
 80143aa:	4598      	cmp	r8, r3
 80143ac:	d878      	bhi.n	80144a0 <__ieee754_rem_pio2+0x120>
 80143ae:	9b04      	ldr	r3, [sp, #16]
 80143b0:	4dbd      	ldr	r5, [pc, #756]	@ (80146a8 <__ieee754_rem_pio2+0x328>)
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	4630      	mov	r0, r6
 80143b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014668 <__ieee754_rem_pio2+0x2e8>)
 80143b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143bc:	4639      	mov	r1, r7
 80143be:	dd38      	ble.n	8014432 <__ieee754_rem_pio2+0xb2>
 80143c0:	f7eb ff8a 	bl	80002d8 <__aeabi_dsub>
 80143c4:	45a8      	cmp	r8, r5
 80143c6:	4606      	mov	r6, r0
 80143c8:	460f      	mov	r7, r1
 80143ca:	d01a      	beq.n	8014402 <__ieee754_rem_pio2+0x82>
 80143cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014670 <__ieee754_rem_pio2+0x2f0>)
 80143ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d2:	f7eb ff81 	bl	80002d8 <__aeabi_dsub>
 80143d6:	4602      	mov	r2, r0
 80143d8:	460b      	mov	r3, r1
 80143da:	4680      	mov	r8, r0
 80143dc:	4689      	mov	r9, r1
 80143de:	4630      	mov	r0, r6
 80143e0:	4639      	mov	r1, r7
 80143e2:	f7eb ff79 	bl	80002d8 <__aeabi_dsub>
 80143e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014670 <__ieee754_rem_pio2+0x2f0>)
 80143e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ec:	f7eb ff74 	bl	80002d8 <__aeabi_dsub>
 80143f0:	e9c4 8900 	strd	r8, r9, [r4]
 80143f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80143f8:	2501      	movs	r5, #1
 80143fa:	4628      	mov	r0, r5
 80143fc:	b00d      	add	sp, #52	@ 0x34
 80143fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014402:	a39d      	add	r3, pc, #628	@ (adr r3, 8014678 <__ieee754_rem_pio2+0x2f8>)
 8014404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014408:	f7eb ff66 	bl	80002d8 <__aeabi_dsub>
 801440c:	a39c      	add	r3, pc, #624	@ (adr r3, 8014680 <__ieee754_rem_pio2+0x300>)
 801440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014412:	4606      	mov	r6, r0
 8014414:	460f      	mov	r7, r1
 8014416:	f7eb ff5f 	bl	80002d8 <__aeabi_dsub>
 801441a:	4602      	mov	r2, r0
 801441c:	460b      	mov	r3, r1
 801441e:	4680      	mov	r8, r0
 8014420:	4689      	mov	r9, r1
 8014422:	4630      	mov	r0, r6
 8014424:	4639      	mov	r1, r7
 8014426:	f7eb ff57 	bl	80002d8 <__aeabi_dsub>
 801442a:	a395      	add	r3, pc, #596	@ (adr r3, 8014680 <__ieee754_rem_pio2+0x300>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	e7dc      	b.n	80143ec <__ieee754_rem_pio2+0x6c>
 8014432:	f7eb ff53 	bl	80002dc <__adddf3>
 8014436:	45a8      	cmp	r8, r5
 8014438:	4606      	mov	r6, r0
 801443a:	460f      	mov	r7, r1
 801443c:	d018      	beq.n	8014470 <__ieee754_rem_pio2+0xf0>
 801443e:	a38c      	add	r3, pc, #560	@ (adr r3, 8014670 <__ieee754_rem_pio2+0x2f0>)
 8014440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014444:	f7eb ff4a 	bl	80002dc <__adddf3>
 8014448:	4602      	mov	r2, r0
 801444a:	460b      	mov	r3, r1
 801444c:	4680      	mov	r8, r0
 801444e:	4689      	mov	r9, r1
 8014450:	4630      	mov	r0, r6
 8014452:	4639      	mov	r1, r7
 8014454:	f7eb ff40 	bl	80002d8 <__aeabi_dsub>
 8014458:	a385      	add	r3, pc, #532	@ (adr r3, 8014670 <__ieee754_rem_pio2+0x2f0>)
 801445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801445e:	f7eb ff3d 	bl	80002dc <__adddf3>
 8014462:	f04f 35ff 	mov.w	r5, #4294967295
 8014466:	e9c4 8900 	strd	r8, r9, [r4]
 801446a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801446e:	e7c4      	b.n	80143fa <__ieee754_rem_pio2+0x7a>
 8014470:	a381      	add	r3, pc, #516	@ (adr r3, 8014678 <__ieee754_rem_pio2+0x2f8>)
 8014472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014476:	f7eb ff31 	bl	80002dc <__adddf3>
 801447a:	a381      	add	r3, pc, #516	@ (adr r3, 8014680 <__ieee754_rem_pio2+0x300>)
 801447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014480:	4606      	mov	r6, r0
 8014482:	460f      	mov	r7, r1
 8014484:	f7eb ff2a 	bl	80002dc <__adddf3>
 8014488:	4602      	mov	r2, r0
 801448a:	460b      	mov	r3, r1
 801448c:	4680      	mov	r8, r0
 801448e:	4689      	mov	r9, r1
 8014490:	4630      	mov	r0, r6
 8014492:	4639      	mov	r1, r7
 8014494:	f7eb ff20 	bl	80002d8 <__aeabi_dsub>
 8014498:	a379      	add	r3, pc, #484	@ (adr r3, 8014680 <__ieee754_rem_pio2+0x300>)
 801449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449e:	e7de      	b.n	801445e <__ieee754_rem_pio2+0xde>
 80144a0:	4b82      	ldr	r3, [pc, #520]	@ (80146ac <__ieee754_rem_pio2+0x32c>)
 80144a2:	4598      	cmp	r8, r3
 80144a4:	f200 80d1 	bhi.w	801464a <__ieee754_rem_pio2+0x2ca>
 80144a8:	f000 f966 	bl	8014778 <fabs>
 80144ac:	ec57 6b10 	vmov	r6, r7, d0
 80144b0:	a375      	add	r3, pc, #468	@ (adr r3, 8014688 <__ieee754_rem_pio2+0x308>)
 80144b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b6:	4630      	mov	r0, r6
 80144b8:	4639      	mov	r1, r7
 80144ba:	f7ec f8c5 	bl	8000648 <__aeabi_dmul>
 80144be:	4b7c      	ldr	r3, [pc, #496]	@ (80146b0 <__ieee754_rem_pio2+0x330>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	f7eb ff0b 	bl	80002dc <__adddf3>
 80144c6:	f7ec fb6f 	bl	8000ba8 <__aeabi_d2iz>
 80144ca:	4605      	mov	r5, r0
 80144cc:	f7ec f852 	bl	8000574 <__aeabi_i2d>
 80144d0:	4602      	mov	r2, r0
 80144d2:	460b      	mov	r3, r1
 80144d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80144d8:	a363      	add	r3, pc, #396	@ (adr r3, 8014668 <__ieee754_rem_pio2+0x2e8>)
 80144da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144de:	f7ec f8b3 	bl	8000648 <__aeabi_dmul>
 80144e2:	4602      	mov	r2, r0
 80144e4:	460b      	mov	r3, r1
 80144e6:	4630      	mov	r0, r6
 80144e8:	4639      	mov	r1, r7
 80144ea:	f7eb fef5 	bl	80002d8 <__aeabi_dsub>
 80144ee:	a360      	add	r3, pc, #384	@ (adr r3, 8014670 <__ieee754_rem_pio2+0x2f0>)
 80144f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f4:	4682      	mov	sl, r0
 80144f6:	468b      	mov	fp, r1
 80144f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144fc:	f7ec f8a4 	bl	8000648 <__aeabi_dmul>
 8014500:	2d1f      	cmp	r5, #31
 8014502:	4606      	mov	r6, r0
 8014504:	460f      	mov	r7, r1
 8014506:	dc0c      	bgt.n	8014522 <__ieee754_rem_pio2+0x1a2>
 8014508:	4b6a      	ldr	r3, [pc, #424]	@ (80146b4 <__ieee754_rem_pio2+0x334>)
 801450a:	1e6a      	subs	r2, r5, #1
 801450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014510:	4543      	cmp	r3, r8
 8014512:	d006      	beq.n	8014522 <__ieee754_rem_pio2+0x1a2>
 8014514:	4632      	mov	r2, r6
 8014516:	463b      	mov	r3, r7
 8014518:	4650      	mov	r0, sl
 801451a:	4659      	mov	r1, fp
 801451c:	f7eb fedc 	bl	80002d8 <__aeabi_dsub>
 8014520:	e00e      	b.n	8014540 <__ieee754_rem_pio2+0x1c0>
 8014522:	463b      	mov	r3, r7
 8014524:	4632      	mov	r2, r6
 8014526:	4650      	mov	r0, sl
 8014528:	4659      	mov	r1, fp
 801452a:	f7eb fed5 	bl	80002d8 <__aeabi_dsub>
 801452e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014532:	9305      	str	r3, [sp, #20]
 8014534:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014538:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801453c:	2b10      	cmp	r3, #16
 801453e:	dc02      	bgt.n	8014546 <__ieee754_rem_pio2+0x1c6>
 8014540:	e9c4 0100 	strd	r0, r1, [r4]
 8014544:	e039      	b.n	80145ba <__ieee754_rem_pio2+0x23a>
 8014546:	a34c      	add	r3, pc, #304	@ (adr r3, 8014678 <__ieee754_rem_pio2+0x2f8>)
 8014548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014550:	f7ec f87a 	bl	8000648 <__aeabi_dmul>
 8014554:	4606      	mov	r6, r0
 8014556:	460f      	mov	r7, r1
 8014558:	4602      	mov	r2, r0
 801455a:	460b      	mov	r3, r1
 801455c:	4650      	mov	r0, sl
 801455e:	4659      	mov	r1, fp
 8014560:	f7eb feba 	bl	80002d8 <__aeabi_dsub>
 8014564:	4602      	mov	r2, r0
 8014566:	460b      	mov	r3, r1
 8014568:	4680      	mov	r8, r0
 801456a:	4689      	mov	r9, r1
 801456c:	4650      	mov	r0, sl
 801456e:	4659      	mov	r1, fp
 8014570:	f7eb feb2 	bl	80002d8 <__aeabi_dsub>
 8014574:	4632      	mov	r2, r6
 8014576:	463b      	mov	r3, r7
 8014578:	f7eb feae 	bl	80002d8 <__aeabi_dsub>
 801457c:	a340      	add	r3, pc, #256	@ (adr r3, 8014680 <__ieee754_rem_pio2+0x300>)
 801457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014582:	4606      	mov	r6, r0
 8014584:	460f      	mov	r7, r1
 8014586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801458a:	f7ec f85d 	bl	8000648 <__aeabi_dmul>
 801458e:	4632      	mov	r2, r6
 8014590:	463b      	mov	r3, r7
 8014592:	f7eb fea1 	bl	80002d8 <__aeabi_dsub>
 8014596:	4602      	mov	r2, r0
 8014598:	460b      	mov	r3, r1
 801459a:	4606      	mov	r6, r0
 801459c:	460f      	mov	r7, r1
 801459e:	4640      	mov	r0, r8
 80145a0:	4649      	mov	r1, r9
 80145a2:	f7eb fe99 	bl	80002d8 <__aeabi_dsub>
 80145a6:	9a05      	ldr	r2, [sp, #20]
 80145a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	2b31      	cmp	r3, #49	@ 0x31
 80145b0:	dc20      	bgt.n	80145f4 <__ieee754_rem_pio2+0x274>
 80145b2:	e9c4 0100 	strd	r0, r1, [r4]
 80145b6:	46c2      	mov	sl, r8
 80145b8:	46cb      	mov	fp, r9
 80145ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80145be:	4650      	mov	r0, sl
 80145c0:	4642      	mov	r2, r8
 80145c2:	464b      	mov	r3, r9
 80145c4:	4659      	mov	r1, fp
 80145c6:	f7eb fe87 	bl	80002d8 <__aeabi_dsub>
 80145ca:	463b      	mov	r3, r7
 80145cc:	4632      	mov	r2, r6
 80145ce:	f7eb fe83 	bl	80002d8 <__aeabi_dsub>
 80145d2:	9b04      	ldr	r3, [sp, #16]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145da:	f6bf af0e 	bge.w	80143fa <__ieee754_rem_pio2+0x7a>
 80145de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80145e2:	6063      	str	r3, [r4, #4]
 80145e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80145e8:	f8c4 8000 	str.w	r8, [r4]
 80145ec:	60a0      	str	r0, [r4, #8]
 80145ee:	60e3      	str	r3, [r4, #12]
 80145f0:	426d      	negs	r5, r5
 80145f2:	e702      	b.n	80143fa <__ieee754_rem_pio2+0x7a>
 80145f4:	a326      	add	r3, pc, #152	@ (adr r3, 8014690 <__ieee754_rem_pio2+0x310>)
 80145f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145fe:	f7ec f823 	bl	8000648 <__aeabi_dmul>
 8014602:	4606      	mov	r6, r0
 8014604:	460f      	mov	r7, r1
 8014606:	4602      	mov	r2, r0
 8014608:	460b      	mov	r3, r1
 801460a:	4640      	mov	r0, r8
 801460c:	4649      	mov	r1, r9
 801460e:	f7eb fe63 	bl	80002d8 <__aeabi_dsub>
 8014612:	4602      	mov	r2, r0
 8014614:	460b      	mov	r3, r1
 8014616:	4682      	mov	sl, r0
 8014618:	468b      	mov	fp, r1
 801461a:	4640      	mov	r0, r8
 801461c:	4649      	mov	r1, r9
 801461e:	f7eb fe5b 	bl	80002d8 <__aeabi_dsub>
 8014622:	4632      	mov	r2, r6
 8014624:	463b      	mov	r3, r7
 8014626:	f7eb fe57 	bl	80002d8 <__aeabi_dsub>
 801462a:	a31b      	add	r3, pc, #108	@ (adr r3, 8014698 <__ieee754_rem_pio2+0x318>)
 801462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014630:	4606      	mov	r6, r0
 8014632:	460f      	mov	r7, r1
 8014634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014638:	f7ec f806 	bl	8000648 <__aeabi_dmul>
 801463c:	4632      	mov	r2, r6
 801463e:	463b      	mov	r3, r7
 8014640:	f7eb fe4a 	bl	80002d8 <__aeabi_dsub>
 8014644:	4606      	mov	r6, r0
 8014646:	460f      	mov	r7, r1
 8014648:	e764      	b.n	8014514 <__ieee754_rem_pio2+0x194>
 801464a:	4b1b      	ldr	r3, [pc, #108]	@ (80146b8 <__ieee754_rem_pio2+0x338>)
 801464c:	4598      	cmp	r8, r3
 801464e:	d935      	bls.n	80146bc <__ieee754_rem_pio2+0x33c>
 8014650:	4632      	mov	r2, r6
 8014652:	463b      	mov	r3, r7
 8014654:	4630      	mov	r0, r6
 8014656:	4639      	mov	r1, r7
 8014658:	f7eb fe3e 	bl	80002d8 <__aeabi_dsub>
 801465c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014660:	e9c4 0100 	strd	r0, r1, [r4]
 8014664:	e69e      	b.n	80143a4 <__ieee754_rem_pio2+0x24>
 8014666:	bf00      	nop
 8014668:	54400000 	.word	0x54400000
 801466c:	3ff921fb 	.word	0x3ff921fb
 8014670:	1a626331 	.word	0x1a626331
 8014674:	3dd0b461 	.word	0x3dd0b461
 8014678:	1a600000 	.word	0x1a600000
 801467c:	3dd0b461 	.word	0x3dd0b461
 8014680:	2e037073 	.word	0x2e037073
 8014684:	3ba3198a 	.word	0x3ba3198a
 8014688:	6dc9c883 	.word	0x6dc9c883
 801468c:	3fe45f30 	.word	0x3fe45f30
 8014690:	2e000000 	.word	0x2e000000
 8014694:	3ba3198a 	.word	0x3ba3198a
 8014698:	252049c1 	.word	0x252049c1
 801469c:	397b839a 	.word	0x397b839a
 80146a0:	3fe921fb 	.word	0x3fe921fb
 80146a4:	4002d97b 	.word	0x4002d97b
 80146a8:	3ff921fb 	.word	0x3ff921fb
 80146ac:	413921fb 	.word	0x413921fb
 80146b0:	3fe00000 	.word	0x3fe00000
 80146b4:	08015540 	.word	0x08015540
 80146b8:	7fefffff 	.word	0x7fefffff
 80146bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80146c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80146c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80146c8:	4630      	mov	r0, r6
 80146ca:	460f      	mov	r7, r1
 80146cc:	f7ec fa6c 	bl	8000ba8 <__aeabi_d2iz>
 80146d0:	f7eb ff50 	bl	8000574 <__aeabi_i2d>
 80146d4:	4602      	mov	r2, r0
 80146d6:	460b      	mov	r3, r1
 80146d8:	4630      	mov	r0, r6
 80146da:	4639      	mov	r1, r7
 80146dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80146e0:	f7eb fdfa 	bl	80002d8 <__aeabi_dsub>
 80146e4:	4b22      	ldr	r3, [pc, #136]	@ (8014770 <__ieee754_rem_pio2+0x3f0>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	f7eb ffae 	bl	8000648 <__aeabi_dmul>
 80146ec:	460f      	mov	r7, r1
 80146ee:	4606      	mov	r6, r0
 80146f0:	f7ec fa5a 	bl	8000ba8 <__aeabi_d2iz>
 80146f4:	f7eb ff3e 	bl	8000574 <__aeabi_i2d>
 80146f8:	4602      	mov	r2, r0
 80146fa:	460b      	mov	r3, r1
 80146fc:	4630      	mov	r0, r6
 80146fe:	4639      	mov	r1, r7
 8014700:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014704:	f7eb fde8 	bl	80002d8 <__aeabi_dsub>
 8014708:	4b19      	ldr	r3, [pc, #100]	@ (8014770 <__ieee754_rem_pio2+0x3f0>)
 801470a:	2200      	movs	r2, #0
 801470c:	f7eb ff9c 	bl	8000648 <__aeabi_dmul>
 8014710:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014714:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014718:	f04f 0803 	mov.w	r8, #3
 801471c:	2600      	movs	r6, #0
 801471e:	2700      	movs	r7, #0
 8014720:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014724:	4632      	mov	r2, r6
 8014726:	463b      	mov	r3, r7
 8014728:	46c2      	mov	sl, r8
 801472a:	f108 38ff 	add.w	r8, r8, #4294967295
 801472e:	f7ec f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 8014732:	2800      	cmp	r0, #0
 8014734:	d1f4      	bne.n	8014720 <__ieee754_rem_pio2+0x3a0>
 8014736:	4b0f      	ldr	r3, [pc, #60]	@ (8014774 <__ieee754_rem_pio2+0x3f4>)
 8014738:	9301      	str	r3, [sp, #4]
 801473a:	2302      	movs	r3, #2
 801473c:	9300      	str	r3, [sp, #0]
 801473e:	462a      	mov	r2, r5
 8014740:	4653      	mov	r3, sl
 8014742:	4621      	mov	r1, r4
 8014744:	a806      	add	r0, sp, #24
 8014746:	f000 f81f 	bl	8014788 <__kernel_rem_pio2>
 801474a:	9b04      	ldr	r3, [sp, #16]
 801474c:	2b00      	cmp	r3, #0
 801474e:	4605      	mov	r5, r0
 8014750:	f6bf ae53 	bge.w	80143fa <__ieee754_rem_pio2+0x7a>
 8014754:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014758:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801475c:	e9c4 2300 	strd	r2, r3, [r4]
 8014760:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014764:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014768:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801476c:	e740      	b.n	80145f0 <__ieee754_rem_pio2+0x270>
 801476e:	bf00      	nop
 8014770:	41700000 	.word	0x41700000
 8014774:	080155c0 	.word	0x080155c0

08014778 <fabs>:
 8014778:	ec51 0b10 	vmov	r0, r1, d0
 801477c:	4602      	mov	r2, r0
 801477e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014782:	ec43 2b10 	vmov	d0, r2, r3
 8014786:	4770      	bx	lr

08014788 <__kernel_rem_pio2>:
 8014788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801478c:	ed2d 8b02 	vpush	{d8}
 8014790:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014794:	f112 0f14 	cmn.w	r2, #20
 8014798:	9306      	str	r3, [sp, #24]
 801479a:	9104      	str	r1, [sp, #16]
 801479c:	4bbe      	ldr	r3, [pc, #760]	@ (8014a98 <__kernel_rem_pio2+0x310>)
 801479e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80147a0:	9008      	str	r0, [sp, #32]
 80147a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80147a6:	9300      	str	r3, [sp, #0]
 80147a8:	9b06      	ldr	r3, [sp, #24]
 80147aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80147ae:	bfa8      	it	ge
 80147b0:	1ed4      	subge	r4, r2, #3
 80147b2:	9305      	str	r3, [sp, #20]
 80147b4:	bfb2      	itee	lt
 80147b6:	2400      	movlt	r4, #0
 80147b8:	2318      	movge	r3, #24
 80147ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80147be:	f06f 0317 	mvn.w	r3, #23
 80147c2:	fb04 3303 	mla	r3, r4, r3, r3
 80147c6:	eb03 0b02 	add.w	fp, r3, r2
 80147ca:	9b00      	ldr	r3, [sp, #0]
 80147cc:	9a05      	ldr	r2, [sp, #20]
 80147ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8014a88 <__kernel_rem_pio2+0x300>
 80147d2:	eb03 0802 	add.w	r8, r3, r2
 80147d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80147d8:	1aa7      	subs	r7, r4, r2
 80147da:	ae20      	add	r6, sp, #128	@ 0x80
 80147dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80147e0:	2500      	movs	r5, #0
 80147e2:	4545      	cmp	r5, r8
 80147e4:	dd13      	ble.n	801480e <__kernel_rem_pio2+0x86>
 80147e6:	9b06      	ldr	r3, [sp, #24]
 80147e8:	aa20      	add	r2, sp, #128	@ 0x80
 80147ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80147ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80147f2:	f04f 0800 	mov.w	r8, #0
 80147f6:	9b00      	ldr	r3, [sp, #0]
 80147f8:	4598      	cmp	r8, r3
 80147fa:	dc31      	bgt.n	8014860 <__kernel_rem_pio2+0xd8>
 80147fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8014a88 <__kernel_rem_pio2+0x300>
 8014800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014808:	462f      	mov	r7, r5
 801480a:	2600      	movs	r6, #0
 801480c:	e01b      	b.n	8014846 <__kernel_rem_pio2+0xbe>
 801480e:	42ef      	cmn	r7, r5
 8014810:	d407      	bmi.n	8014822 <__kernel_rem_pio2+0x9a>
 8014812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014816:	f7eb fead 	bl	8000574 <__aeabi_i2d>
 801481a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801481e:	3501      	adds	r5, #1
 8014820:	e7df      	b.n	80147e2 <__kernel_rem_pio2+0x5a>
 8014822:	ec51 0b18 	vmov	r0, r1, d8
 8014826:	e7f8      	b.n	801481a <__kernel_rem_pio2+0x92>
 8014828:	e9d7 2300 	ldrd	r2, r3, [r7]
 801482c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014830:	f7eb ff0a 	bl	8000648 <__aeabi_dmul>
 8014834:	4602      	mov	r2, r0
 8014836:	460b      	mov	r3, r1
 8014838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801483c:	f7eb fd4e 	bl	80002dc <__adddf3>
 8014840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014844:	3601      	adds	r6, #1
 8014846:	9b05      	ldr	r3, [sp, #20]
 8014848:	429e      	cmp	r6, r3
 801484a:	f1a7 0708 	sub.w	r7, r7, #8
 801484e:	ddeb      	ble.n	8014828 <__kernel_rem_pio2+0xa0>
 8014850:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014854:	f108 0801 	add.w	r8, r8, #1
 8014858:	ecaa 7b02 	vstmia	sl!, {d7}
 801485c:	3508      	adds	r5, #8
 801485e:	e7ca      	b.n	80147f6 <__kernel_rem_pio2+0x6e>
 8014860:	9b00      	ldr	r3, [sp, #0]
 8014862:	f8dd 8000 	ldr.w	r8, [sp]
 8014866:	aa0c      	add	r2, sp, #48	@ 0x30
 8014868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801486c:	930a      	str	r3, [sp, #40]	@ 0x28
 801486e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014870:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014874:	9309      	str	r3, [sp, #36]	@ 0x24
 8014876:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801487a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801487c:	ab98      	add	r3, sp, #608	@ 0x260
 801487e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014882:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014886:	ed8d 7b02 	vstr	d7, [sp, #8]
 801488a:	ac0c      	add	r4, sp, #48	@ 0x30
 801488c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801488e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014892:	46a1      	mov	r9, r4
 8014894:	46c2      	mov	sl, r8
 8014896:	f1ba 0f00 	cmp.w	sl, #0
 801489a:	f1a5 0508 	sub.w	r5, r5, #8
 801489e:	dc77      	bgt.n	8014990 <__kernel_rem_pio2+0x208>
 80148a0:	4658      	mov	r0, fp
 80148a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80148a6:	f000 fac7 	bl	8014e38 <scalbn>
 80148aa:	ec57 6b10 	vmov	r6, r7, d0
 80148ae:	2200      	movs	r2, #0
 80148b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80148b4:	4630      	mov	r0, r6
 80148b6:	4639      	mov	r1, r7
 80148b8:	f7eb fec6 	bl	8000648 <__aeabi_dmul>
 80148bc:	ec41 0b10 	vmov	d0, r0, r1
 80148c0:	f000 fb3a 	bl	8014f38 <floor>
 80148c4:	4b75      	ldr	r3, [pc, #468]	@ (8014a9c <__kernel_rem_pio2+0x314>)
 80148c6:	ec51 0b10 	vmov	r0, r1, d0
 80148ca:	2200      	movs	r2, #0
 80148cc:	f7eb febc 	bl	8000648 <__aeabi_dmul>
 80148d0:	4602      	mov	r2, r0
 80148d2:	460b      	mov	r3, r1
 80148d4:	4630      	mov	r0, r6
 80148d6:	4639      	mov	r1, r7
 80148d8:	f7eb fcfe 	bl	80002d8 <__aeabi_dsub>
 80148dc:	460f      	mov	r7, r1
 80148de:	4606      	mov	r6, r0
 80148e0:	f7ec f962 	bl	8000ba8 <__aeabi_d2iz>
 80148e4:	9002      	str	r0, [sp, #8]
 80148e6:	f7eb fe45 	bl	8000574 <__aeabi_i2d>
 80148ea:	4602      	mov	r2, r0
 80148ec:	460b      	mov	r3, r1
 80148ee:	4630      	mov	r0, r6
 80148f0:	4639      	mov	r1, r7
 80148f2:	f7eb fcf1 	bl	80002d8 <__aeabi_dsub>
 80148f6:	f1bb 0f00 	cmp.w	fp, #0
 80148fa:	4606      	mov	r6, r0
 80148fc:	460f      	mov	r7, r1
 80148fe:	dd6c      	ble.n	80149da <__kernel_rem_pio2+0x252>
 8014900:	f108 31ff 	add.w	r1, r8, #4294967295
 8014904:	ab0c      	add	r3, sp, #48	@ 0x30
 8014906:	9d02      	ldr	r5, [sp, #8]
 8014908:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801490c:	f1cb 0018 	rsb	r0, fp, #24
 8014910:	fa43 f200 	asr.w	r2, r3, r0
 8014914:	4415      	add	r5, r2
 8014916:	4082      	lsls	r2, r0
 8014918:	1a9b      	subs	r3, r3, r2
 801491a:	aa0c      	add	r2, sp, #48	@ 0x30
 801491c:	9502      	str	r5, [sp, #8]
 801491e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014922:	f1cb 0217 	rsb	r2, fp, #23
 8014926:	fa43 f902 	asr.w	r9, r3, r2
 801492a:	f1b9 0f00 	cmp.w	r9, #0
 801492e:	dd64      	ble.n	80149fa <__kernel_rem_pio2+0x272>
 8014930:	9b02      	ldr	r3, [sp, #8]
 8014932:	2200      	movs	r2, #0
 8014934:	3301      	adds	r3, #1
 8014936:	9302      	str	r3, [sp, #8]
 8014938:	4615      	mov	r5, r2
 801493a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801493e:	4590      	cmp	r8, r2
 8014940:	f300 80b8 	bgt.w	8014ab4 <__kernel_rem_pio2+0x32c>
 8014944:	f1bb 0f00 	cmp.w	fp, #0
 8014948:	dd07      	ble.n	801495a <__kernel_rem_pio2+0x1d2>
 801494a:	f1bb 0f01 	cmp.w	fp, #1
 801494e:	f000 80bf 	beq.w	8014ad0 <__kernel_rem_pio2+0x348>
 8014952:	f1bb 0f02 	cmp.w	fp, #2
 8014956:	f000 80c6 	beq.w	8014ae6 <__kernel_rem_pio2+0x35e>
 801495a:	f1b9 0f02 	cmp.w	r9, #2
 801495e:	d14c      	bne.n	80149fa <__kernel_rem_pio2+0x272>
 8014960:	4632      	mov	r2, r6
 8014962:	463b      	mov	r3, r7
 8014964:	494e      	ldr	r1, [pc, #312]	@ (8014aa0 <__kernel_rem_pio2+0x318>)
 8014966:	2000      	movs	r0, #0
 8014968:	f7eb fcb6 	bl	80002d8 <__aeabi_dsub>
 801496c:	4606      	mov	r6, r0
 801496e:	460f      	mov	r7, r1
 8014970:	2d00      	cmp	r5, #0
 8014972:	d042      	beq.n	80149fa <__kernel_rem_pio2+0x272>
 8014974:	4658      	mov	r0, fp
 8014976:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8014a90 <__kernel_rem_pio2+0x308>
 801497a:	f000 fa5d 	bl	8014e38 <scalbn>
 801497e:	4630      	mov	r0, r6
 8014980:	4639      	mov	r1, r7
 8014982:	ec53 2b10 	vmov	r2, r3, d0
 8014986:	f7eb fca7 	bl	80002d8 <__aeabi_dsub>
 801498a:	4606      	mov	r6, r0
 801498c:	460f      	mov	r7, r1
 801498e:	e034      	b.n	80149fa <__kernel_rem_pio2+0x272>
 8014990:	4b44      	ldr	r3, [pc, #272]	@ (8014aa4 <__kernel_rem_pio2+0x31c>)
 8014992:	2200      	movs	r2, #0
 8014994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014998:	f7eb fe56 	bl	8000648 <__aeabi_dmul>
 801499c:	f7ec f904 	bl	8000ba8 <__aeabi_d2iz>
 80149a0:	f7eb fde8 	bl	8000574 <__aeabi_i2d>
 80149a4:	4b40      	ldr	r3, [pc, #256]	@ (8014aa8 <__kernel_rem_pio2+0x320>)
 80149a6:	2200      	movs	r2, #0
 80149a8:	4606      	mov	r6, r0
 80149aa:	460f      	mov	r7, r1
 80149ac:	f7eb fe4c 	bl	8000648 <__aeabi_dmul>
 80149b0:	4602      	mov	r2, r0
 80149b2:	460b      	mov	r3, r1
 80149b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149b8:	f7eb fc8e 	bl	80002d8 <__aeabi_dsub>
 80149bc:	f7ec f8f4 	bl	8000ba8 <__aeabi_d2iz>
 80149c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80149c4:	f849 0b04 	str.w	r0, [r9], #4
 80149c8:	4639      	mov	r1, r7
 80149ca:	4630      	mov	r0, r6
 80149cc:	f7eb fc86 	bl	80002dc <__adddf3>
 80149d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80149d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149d8:	e75d      	b.n	8014896 <__kernel_rem_pio2+0x10e>
 80149da:	d107      	bne.n	80149ec <__kernel_rem_pio2+0x264>
 80149dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80149e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80149e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80149ea:	e79e      	b.n	801492a <__kernel_rem_pio2+0x1a2>
 80149ec:	4b2f      	ldr	r3, [pc, #188]	@ (8014aac <__kernel_rem_pio2+0x324>)
 80149ee:	2200      	movs	r2, #0
 80149f0:	f7ec f8b0 	bl	8000b54 <__aeabi_dcmpge>
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d143      	bne.n	8014a80 <__kernel_rem_pio2+0x2f8>
 80149f8:	4681      	mov	r9, r0
 80149fa:	2200      	movs	r2, #0
 80149fc:	2300      	movs	r3, #0
 80149fe:	4630      	mov	r0, r6
 8014a00:	4639      	mov	r1, r7
 8014a02:	f7ec f889 	bl	8000b18 <__aeabi_dcmpeq>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	f000 80bf 	beq.w	8014b8a <__kernel_rem_pio2+0x402>
 8014a0c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014a10:	2200      	movs	r2, #0
 8014a12:	9900      	ldr	r1, [sp, #0]
 8014a14:	428b      	cmp	r3, r1
 8014a16:	da6e      	bge.n	8014af6 <__kernel_rem_pio2+0x36e>
 8014a18:	2a00      	cmp	r2, #0
 8014a1a:	f000 8089 	beq.w	8014b30 <__kernel_rem_pio2+0x3a8>
 8014a1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014a22:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a24:	f1ab 0b18 	sub.w	fp, fp, #24
 8014a28:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d0f6      	beq.n	8014a1e <__kernel_rem_pio2+0x296>
 8014a30:	4658      	mov	r0, fp
 8014a32:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8014a90 <__kernel_rem_pio2+0x308>
 8014a36:	f000 f9ff 	bl	8014e38 <scalbn>
 8014a3a:	f108 0301 	add.w	r3, r8, #1
 8014a3e:	00da      	lsls	r2, r3, #3
 8014a40:	9205      	str	r2, [sp, #20]
 8014a42:	ec55 4b10 	vmov	r4, r5, d0
 8014a46:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014a48:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8014aa4 <__kernel_rem_pio2+0x31c>
 8014a4c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014a50:	4646      	mov	r6, r8
 8014a52:	f04f 0a00 	mov.w	sl, #0
 8014a56:	2e00      	cmp	r6, #0
 8014a58:	f280 80cf 	bge.w	8014bfa <__kernel_rem_pio2+0x472>
 8014a5c:	4644      	mov	r4, r8
 8014a5e:	2c00      	cmp	r4, #0
 8014a60:	f2c0 80fd 	blt.w	8014c5e <__kernel_rem_pio2+0x4d6>
 8014a64:	4b12      	ldr	r3, [pc, #72]	@ (8014ab0 <__kernel_rem_pio2+0x328>)
 8014a66:	461f      	mov	r7, r3
 8014a68:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014a6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014a6e:	9306      	str	r3, [sp, #24]
 8014a70:	f04f 0a00 	mov.w	sl, #0
 8014a74:	f04f 0b00 	mov.w	fp, #0
 8014a78:	2600      	movs	r6, #0
 8014a7a:	eba8 0504 	sub.w	r5, r8, r4
 8014a7e:	e0e2      	b.n	8014c46 <__kernel_rem_pio2+0x4be>
 8014a80:	f04f 0902 	mov.w	r9, #2
 8014a84:	e754      	b.n	8014930 <__kernel_rem_pio2+0x1a8>
 8014a86:	bf00      	nop
	...
 8014a94:	3ff00000 	.word	0x3ff00000
 8014a98:	08015708 	.word	0x08015708
 8014a9c:	40200000 	.word	0x40200000
 8014aa0:	3ff00000 	.word	0x3ff00000
 8014aa4:	3e700000 	.word	0x3e700000
 8014aa8:	41700000 	.word	0x41700000
 8014aac:	3fe00000 	.word	0x3fe00000
 8014ab0:	080156c8 	.word	0x080156c8
 8014ab4:	f854 3b04 	ldr.w	r3, [r4], #4
 8014ab8:	b945      	cbnz	r5, 8014acc <__kernel_rem_pio2+0x344>
 8014aba:	b123      	cbz	r3, 8014ac6 <__kernel_rem_pio2+0x33e>
 8014abc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014ac0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	3201      	adds	r2, #1
 8014ac8:	461d      	mov	r5, r3
 8014aca:	e738      	b.n	801493e <__kernel_rem_pio2+0x1b6>
 8014acc:	1acb      	subs	r3, r1, r3
 8014ace:	e7f7      	b.n	8014ac0 <__kernel_rem_pio2+0x338>
 8014ad0:	f108 32ff 	add.w	r2, r8, #4294967295
 8014ad4:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ada:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014ade:	a90c      	add	r1, sp, #48	@ 0x30
 8014ae0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014ae4:	e739      	b.n	801495a <__kernel_rem_pio2+0x1d2>
 8014ae6:	f108 32ff 	add.w	r2, r8, #4294967295
 8014aea:	ab0c      	add	r3, sp, #48	@ 0x30
 8014aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014af0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014af4:	e7f3      	b.n	8014ade <__kernel_rem_pio2+0x356>
 8014af6:	a90c      	add	r1, sp, #48	@ 0x30
 8014af8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014afc:	3b01      	subs	r3, #1
 8014afe:	430a      	orrs	r2, r1
 8014b00:	e787      	b.n	8014a12 <__kernel_rem_pio2+0x28a>
 8014b02:	3401      	adds	r4, #1
 8014b04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014b08:	2a00      	cmp	r2, #0
 8014b0a:	d0fa      	beq.n	8014b02 <__kernel_rem_pio2+0x37a>
 8014b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014b12:	eb0d 0503 	add.w	r5, sp, r3
 8014b16:	9b06      	ldr	r3, [sp, #24]
 8014b18:	aa20      	add	r2, sp, #128	@ 0x80
 8014b1a:	4443      	add	r3, r8
 8014b1c:	f108 0701 	add.w	r7, r8, #1
 8014b20:	3d98      	subs	r5, #152	@ 0x98
 8014b22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014b26:	4444      	add	r4, r8
 8014b28:	42bc      	cmp	r4, r7
 8014b2a:	da04      	bge.n	8014b36 <__kernel_rem_pio2+0x3ae>
 8014b2c:	46a0      	mov	r8, r4
 8014b2e:	e6a2      	b.n	8014876 <__kernel_rem_pio2+0xee>
 8014b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b32:	2401      	movs	r4, #1
 8014b34:	e7e6      	b.n	8014b04 <__kernel_rem_pio2+0x37c>
 8014b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014b3c:	f7eb fd1a 	bl	8000574 <__aeabi_i2d>
 8014b40:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8014e08 <__kernel_rem_pio2+0x680>
 8014b44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b50:	46b2      	mov	sl, r6
 8014b52:	f04f 0800 	mov.w	r8, #0
 8014b56:	9b05      	ldr	r3, [sp, #20]
 8014b58:	4598      	cmp	r8, r3
 8014b5a:	dd05      	ble.n	8014b68 <__kernel_rem_pio2+0x3e0>
 8014b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b60:	3701      	adds	r7, #1
 8014b62:	eca5 7b02 	vstmia	r5!, {d7}
 8014b66:	e7df      	b.n	8014b28 <__kernel_rem_pio2+0x3a0>
 8014b68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014b6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014b70:	f7eb fd6a 	bl	8000648 <__aeabi_dmul>
 8014b74:	4602      	mov	r2, r0
 8014b76:	460b      	mov	r3, r1
 8014b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b7c:	f7eb fbae 	bl	80002dc <__adddf3>
 8014b80:	f108 0801 	add.w	r8, r8, #1
 8014b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b88:	e7e5      	b.n	8014b56 <__kernel_rem_pio2+0x3ce>
 8014b8a:	f1cb 0000 	rsb	r0, fp, #0
 8014b8e:	ec47 6b10 	vmov	d0, r6, r7
 8014b92:	f000 f951 	bl	8014e38 <scalbn>
 8014b96:	ec55 4b10 	vmov	r4, r5, d0
 8014b9a:	4b9d      	ldr	r3, [pc, #628]	@ (8014e10 <__kernel_rem_pio2+0x688>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	4629      	mov	r1, r5
 8014ba2:	f7eb ffd7 	bl	8000b54 <__aeabi_dcmpge>
 8014ba6:	b300      	cbz	r0, 8014bea <__kernel_rem_pio2+0x462>
 8014ba8:	4b9a      	ldr	r3, [pc, #616]	@ (8014e14 <__kernel_rem_pio2+0x68c>)
 8014baa:	2200      	movs	r2, #0
 8014bac:	4620      	mov	r0, r4
 8014bae:	4629      	mov	r1, r5
 8014bb0:	f7eb fd4a 	bl	8000648 <__aeabi_dmul>
 8014bb4:	f7eb fff8 	bl	8000ba8 <__aeabi_d2iz>
 8014bb8:	4606      	mov	r6, r0
 8014bba:	f7eb fcdb 	bl	8000574 <__aeabi_i2d>
 8014bbe:	4b94      	ldr	r3, [pc, #592]	@ (8014e10 <__kernel_rem_pio2+0x688>)
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	f7eb fd41 	bl	8000648 <__aeabi_dmul>
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4602      	mov	r2, r0
 8014bca:	4629      	mov	r1, r5
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f7eb fb83 	bl	80002d8 <__aeabi_dsub>
 8014bd2:	f7eb ffe9 	bl	8000ba8 <__aeabi_d2iz>
 8014bd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8014bd8:	f10b 0b18 	add.w	fp, fp, #24
 8014bdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014be0:	f108 0801 	add.w	r8, r8, #1
 8014be4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014be8:	e722      	b.n	8014a30 <__kernel_rem_pio2+0x2a8>
 8014bea:	4620      	mov	r0, r4
 8014bec:	4629      	mov	r1, r5
 8014bee:	f7eb ffdb 	bl	8000ba8 <__aeabi_d2iz>
 8014bf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8014bf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014bf8:	e71a      	b.n	8014a30 <__kernel_rem_pio2+0x2a8>
 8014bfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8014bfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014c00:	f7eb fcb8 	bl	8000574 <__aeabi_i2d>
 8014c04:	4622      	mov	r2, r4
 8014c06:	462b      	mov	r3, r5
 8014c08:	f7eb fd1e 	bl	8000648 <__aeabi_dmul>
 8014c0c:	4652      	mov	r2, sl
 8014c0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8014c12:	465b      	mov	r3, fp
 8014c14:	4620      	mov	r0, r4
 8014c16:	4629      	mov	r1, r5
 8014c18:	f7eb fd16 	bl	8000648 <__aeabi_dmul>
 8014c1c:	3e01      	subs	r6, #1
 8014c1e:	4604      	mov	r4, r0
 8014c20:	460d      	mov	r5, r1
 8014c22:	e718      	b.n	8014a56 <__kernel_rem_pio2+0x2ce>
 8014c24:	9906      	ldr	r1, [sp, #24]
 8014c26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014c2a:	9106      	str	r1, [sp, #24]
 8014c2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014c30:	f7eb fd0a 	bl	8000648 <__aeabi_dmul>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	4650      	mov	r0, sl
 8014c3a:	4659      	mov	r1, fp
 8014c3c:	f7eb fb4e 	bl	80002dc <__adddf3>
 8014c40:	3601      	adds	r6, #1
 8014c42:	4682      	mov	sl, r0
 8014c44:	468b      	mov	fp, r1
 8014c46:	9b00      	ldr	r3, [sp, #0]
 8014c48:	429e      	cmp	r6, r3
 8014c4a:	dc01      	bgt.n	8014c50 <__kernel_rem_pio2+0x4c8>
 8014c4c:	42b5      	cmp	r5, r6
 8014c4e:	dae9      	bge.n	8014c24 <__kernel_rem_pio2+0x49c>
 8014c50:	ab48      	add	r3, sp, #288	@ 0x120
 8014c52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014c56:	e9c5 ab00 	strd	sl, fp, [r5]
 8014c5a:	3c01      	subs	r4, #1
 8014c5c:	e6ff      	b.n	8014a5e <__kernel_rem_pio2+0x2d6>
 8014c5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	dc0b      	bgt.n	8014c7c <__kernel_rem_pio2+0x4f4>
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	dc39      	bgt.n	8014cdc <__kernel_rem_pio2+0x554>
 8014c68:	d05d      	beq.n	8014d26 <__kernel_rem_pio2+0x59e>
 8014c6a:	9b02      	ldr	r3, [sp, #8]
 8014c6c:	f003 0007 	and.w	r0, r3, #7
 8014c70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014c74:	ecbd 8b02 	vpop	{d8}
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d1f3      	bne.n	8014c6a <__kernel_rem_pio2+0x4e2>
 8014c82:	9b05      	ldr	r3, [sp, #20]
 8014c84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014c88:	eb0d 0403 	add.w	r4, sp, r3
 8014c8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014c90:	4625      	mov	r5, r4
 8014c92:	46c2      	mov	sl, r8
 8014c94:	f1ba 0f00 	cmp.w	sl, #0
 8014c98:	f1a5 0508 	sub.w	r5, r5, #8
 8014c9c:	dc6b      	bgt.n	8014d76 <__kernel_rem_pio2+0x5ee>
 8014c9e:	4645      	mov	r5, r8
 8014ca0:	2d01      	cmp	r5, #1
 8014ca2:	f1a4 0408 	sub.w	r4, r4, #8
 8014ca6:	f300 8087 	bgt.w	8014db8 <__kernel_rem_pio2+0x630>
 8014caa:	9c05      	ldr	r4, [sp, #20]
 8014cac:	ab48      	add	r3, sp, #288	@ 0x120
 8014cae:	441c      	add	r4, r3
 8014cb0:	2000      	movs	r0, #0
 8014cb2:	2100      	movs	r1, #0
 8014cb4:	f1b8 0f01 	cmp.w	r8, #1
 8014cb8:	f300 809c 	bgt.w	8014df4 <__kernel_rem_pio2+0x66c>
 8014cbc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8014cc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8014cc4:	f1b9 0f00 	cmp.w	r9, #0
 8014cc8:	f040 80a6 	bne.w	8014e18 <__kernel_rem_pio2+0x690>
 8014ccc:	9b04      	ldr	r3, [sp, #16]
 8014cce:	e9c3 7800 	strd	r7, r8, [r3]
 8014cd2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014cd6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014cda:	e7c6      	b.n	8014c6a <__kernel_rem_pio2+0x4e2>
 8014cdc:	9d05      	ldr	r5, [sp, #20]
 8014cde:	ab48      	add	r3, sp, #288	@ 0x120
 8014ce0:	441d      	add	r5, r3
 8014ce2:	4644      	mov	r4, r8
 8014ce4:	2000      	movs	r0, #0
 8014ce6:	2100      	movs	r1, #0
 8014ce8:	2c00      	cmp	r4, #0
 8014cea:	da35      	bge.n	8014d58 <__kernel_rem_pio2+0x5d0>
 8014cec:	f1b9 0f00 	cmp.w	r9, #0
 8014cf0:	d038      	beq.n	8014d64 <__kernel_rem_pio2+0x5dc>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014cf8:	9c04      	ldr	r4, [sp, #16]
 8014cfa:	e9c4 2300 	strd	r2, r3, [r4]
 8014cfe:	4602      	mov	r2, r0
 8014d00:	460b      	mov	r3, r1
 8014d02:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8014d06:	f7eb fae7 	bl	80002d8 <__aeabi_dsub>
 8014d0a:	ad4a      	add	r5, sp, #296	@ 0x128
 8014d0c:	2401      	movs	r4, #1
 8014d0e:	45a0      	cmp	r8, r4
 8014d10:	da2b      	bge.n	8014d6a <__kernel_rem_pio2+0x5e2>
 8014d12:	f1b9 0f00 	cmp.w	r9, #0
 8014d16:	d002      	beq.n	8014d1e <__kernel_rem_pio2+0x596>
 8014d18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	9b04      	ldr	r3, [sp, #16]
 8014d20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014d24:	e7a1      	b.n	8014c6a <__kernel_rem_pio2+0x4e2>
 8014d26:	9c05      	ldr	r4, [sp, #20]
 8014d28:	ab48      	add	r3, sp, #288	@ 0x120
 8014d2a:	441c      	add	r4, r3
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	2100      	movs	r1, #0
 8014d30:	f1b8 0f00 	cmp.w	r8, #0
 8014d34:	da09      	bge.n	8014d4a <__kernel_rem_pio2+0x5c2>
 8014d36:	f1b9 0f00 	cmp.w	r9, #0
 8014d3a:	d002      	beq.n	8014d42 <__kernel_rem_pio2+0x5ba>
 8014d3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014d40:	4619      	mov	r1, r3
 8014d42:	9b04      	ldr	r3, [sp, #16]
 8014d44:	e9c3 0100 	strd	r0, r1, [r3]
 8014d48:	e78f      	b.n	8014c6a <__kernel_rem_pio2+0x4e2>
 8014d4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014d4e:	f7eb fac5 	bl	80002dc <__adddf3>
 8014d52:	f108 38ff 	add.w	r8, r8, #4294967295
 8014d56:	e7eb      	b.n	8014d30 <__kernel_rem_pio2+0x5a8>
 8014d58:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014d5c:	f7eb fabe 	bl	80002dc <__adddf3>
 8014d60:	3c01      	subs	r4, #1
 8014d62:	e7c1      	b.n	8014ce8 <__kernel_rem_pio2+0x560>
 8014d64:	4602      	mov	r2, r0
 8014d66:	460b      	mov	r3, r1
 8014d68:	e7c6      	b.n	8014cf8 <__kernel_rem_pio2+0x570>
 8014d6a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014d6e:	f7eb fab5 	bl	80002dc <__adddf3>
 8014d72:	3401      	adds	r4, #1
 8014d74:	e7cb      	b.n	8014d0e <__kernel_rem_pio2+0x586>
 8014d76:	ed95 7b00 	vldr	d7, [r5]
 8014d7a:	ed8d 7b00 	vstr	d7, [sp]
 8014d7e:	ed95 7b02 	vldr	d7, [r5, #8]
 8014d82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d86:	ec53 2b17 	vmov	r2, r3, d7
 8014d8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014d8e:	f7eb faa5 	bl	80002dc <__adddf3>
 8014d92:	4602      	mov	r2, r0
 8014d94:	460b      	mov	r3, r1
 8014d96:	4606      	mov	r6, r0
 8014d98:	460f      	mov	r7, r1
 8014d9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d9e:	f7eb fa9b 	bl	80002d8 <__aeabi_dsub>
 8014da2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014da6:	f7eb fa99 	bl	80002dc <__adddf3>
 8014daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8014db2:	e9c5 6700 	strd	r6, r7, [r5]
 8014db6:	e76d      	b.n	8014c94 <__kernel_rem_pio2+0x50c>
 8014db8:	ed94 7b00 	vldr	d7, [r4]
 8014dbc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014dc0:	ec51 0b17 	vmov	r0, r1, d7
 8014dc4:	4652      	mov	r2, sl
 8014dc6:	465b      	mov	r3, fp
 8014dc8:	ed8d 7b00 	vstr	d7, [sp]
 8014dcc:	f7eb fa86 	bl	80002dc <__adddf3>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	460b      	mov	r3, r1
 8014dd4:	4606      	mov	r6, r0
 8014dd6:	460f      	mov	r7, r1
 8014dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ddc:	f7eb fa7c 	bl	80002d8 <__aeabi_dsub>
 8014de0:	4652      	mov	r2, sl
 8014de2:	465b      	mov	r3, fp
 8014de4:	f7eb fa7a 	bl	80002dc <__adddf3>
 8014de8:	3d01      	subs	r5, #1
 8014dea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014dee:	e9c4 6700 	strd	r6, r7, [r4]
 8014df2:	e755      	b.n	8014ca0 <__kernel_rem_pio2+0x518>
 8014df4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014df8:	f7eb fa70 	bl	80002dc <__adddf3>
 8014dfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e00:	e758      	b.n	8014cb4 <__kernel_rem_pio2+0x52c>
 8014e02:	bf00      	nop
 8014e04:	f3af 8000 	nop.w
	...
 8014e10:	41700000 	.word	0x41700000
 8014e14:	3e700000 	.word	0x3e700000
 8014e18:	9b04      	ldr	r3, [sp, #16]
 8014e1a:	9a04      	ldr	r2, [sp, #16]
 8014e1c:	601f      	str	r7, [r3, #0]
 8014e1e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8014e22:	605c      	str	r4, [r3, #4]
 8014e24:	609d      	str	r5, [r3, #8]
 8014e26:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014e2a:	60d3      	str	r3, [r2, #12]
 8014e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014e30:	6110      	str	r0, [r2, #16]
 8014e32:	6153      	str	r3, [r2, #20]
 8014e34:	e719      	b.n	8014c6a <__kernel_rem_pio2+0x4e2>
 8014e36:	bf00      	nop

08014e38 <scalbn>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	ec55 4b10 	vmov	r4, r5, d0
 8014e3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014e42:	4606      	mov	r6, r0
 8014e44:	462b      	mov	r3, r5
 8014e46:	b991      	cbnz	r1, 8014e6e <scalbn+0x36>
 8014e48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014e4c:	4323      	orrs	r3, r4
 8014e4e:	d03d      	beq.n	8014ecc <scalbn+0x94>
 8014e50:	4b35      	ldr	r3, [pc, #212]	@ (8014f28 <scalbn+0xf0>)
 8014e52:	4620      	mov	r0, r4
 8014e54:	4629      	mov	r1, r5
 8014e56:	2200      	movs	r2, #0
 8014e58:	f7eb fbf6 	bl	8000648 <__aeabi_dmul>
 8014e5c:	4b33      	ldr	r3, [pc, #204]	@ (8014f2c <scalbn+0xf4>)
 8014e5e:	429e      	cmp	r6, r3
 8014e60:	4604      	mov	r4, r0
 8014e62:	460d      	mov	r5, r1
 8014e64:	da0f      	bge.n	8014e86 <scalbn+0x4e>
 8014e66:	a328      	add	r3, pc, #160	@ (adr r3, 8014f08 <scalbn+0xd0>)
 8014e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6c:	e01e      	b.n	8014eac <scalbn+0x74>
 8014e6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014e72:	4291      	cmp	r1, r2
 8014e74:	d10b      	bne.n	8014e8e <scalbn+0x56>
 8014e76:	4622      	mov	r2, r4
 8014e78:	4620      	mov	r0, r4
 8014e7a:	4629      	mov	r1, r5
 8014e7c:	f7eb fa2e 	bl	80002dc <__adddf3>
 8014e80:	4604      	mov	r4, r0
 8014e82:	460d      	mov	r5, r1
 8014e84:	e022      	b.n	8014ecc <scalbn+0x94>
 8014e86:	460b      	mov	r3, r1
 8014e88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014e8c:	3936      	subs	r1, #54	@ 0x36
 8014e8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014e92:	4296      	cmp	r6, r2
 8014e94:	dd0d      	ble.n	8014eb2 <scalbn+0x7a>
 8014e96:	2d00      	cmp	r5, #0
 8014e98:	a11d      	add	r1, pc, #116	@ (adr r1, 8014f10 <scalbn+0xd8>)
 8014e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e9e:	da02      	bge.n	8014ea6 <scalbn+0x6e>
 8014ea0:	a11d      	add	r1, pc, #116	@ (adr r1, 8014f18 <scalbn+0xe0>)
 8014ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ea6:	a31a      	add	r3, pc, #104	@ (adr r3, 8014f10 <scalbn+0xd8>)
 8014ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eac:	f7eb fbcc 	bl	8000648 <__aeabi_dmul>
 8014eb0:	e7e6      	b.n	8014e80 <scalbn+0x48>
 8014eb2:	1872      	adds	r2, r6, r1
 8014eb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014eb8:	428a      	cmp	r2, r1
 8014eba:	dcec      	bgt.n	8014e96 <scalbn+0x5e>
 8014ebc:	2a00      	cmp	r2, #0
 8014ebe:	dd08      	ble.n	8014ed2 <scalbn+0x9a>
 8014ec0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014ec4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014ec8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ecc:	ec45 4b10 	vmov	d0, r4, r5
 8014ed0:	bd70      	pop	{r4, r5, r6, pc}
 8014ed2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014ed6:	da08      	bge.n	8014eea <scalbn+0xb2>
 8014ed8:	2d00      	cmp	r5, #0
 8014eda:	a10b      	add	r1, pc, #44	@ (adr r1, 8014f08 <scalbn+0xd0>)
 8014edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ee0:	dac1      	bge.n	8014e66 <scalbn+0x2e>
 8014ee2:	a10f      	add	r1, pc, #60	@ (adr r1, 8014f20 <scalbn+0xe8>)
 8014ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ee8:	e7bd      	b.n	8014e66 <scalbn+0x2e>
 8014eea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014eee:	3236      	adds	r2, #54	@ 0x36
 8014ef0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014ef4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ef8:	4620      	mov	r0, r4
 8014efa:	4b0d      	ldr	r3, [pc, #52]	@ (8014f30 <scalbn+0xf8>)
 8014efc:	4629      	mov	r1, r5
 8014efe:	2200      	movs	r2, #0
 8014f00:	e7d4      	b.n	8014eac <scalbn+0x74>
 8014f02:	bf00      	nop
 8014f04:	f3af 8000 	nop.w
 8014f08:	c2f8f359 	.word	0xc2f8f359
 8014f0c:	01a56e1f 	.word	0x01a56e1f
 8014f10:	8800759c 	.word	0x8800759c
 8014f14:	7e37e43c 	.word	0x7e37e43c
 8014f18:	8800759c 	.word	0x8800759c
 8014f1c:	fe37e43c 	.word	0xfe37e43c
 8014f20:	c2f8f359 	.word	0xc2f8f359
 8014f24:	81a56e1f 	.word	0x81a56e1f
 8014f28:	43500000 	.word	0x43500000
 8014f2c:	ffff3cb0 	.word	0xffff3cb0
 8014f30:	3c900000 	.word	0x3c900000
 8014f34:	00000000 	.word	0x00000000

08014f38 <floor>:
 8014f38:	ec51 0b10 	vmov	r0, r1, d0
 8014f3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014f48:	2e13      	cmp	r6, #19
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	4605      	mov	r5, r0
 8014f4e:	4680      	mov	r8, r0
 8014f50:	dc34      	bgt.n	8014fbc <floor+0x84>
 8014f52:	2e00      	cmp	r6, #0
 8014f54:	da17      	bge.n	8014f86 <floor+0x4e>
 8014f56:	a332      	add	r3, pc, #200	@ (adr r3, 8015020 <floor+0xe8>)
 8014f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5c:	f7eb f9be 	bl	80002dc <__adddf3>
 8014f60:	2200      	movs	r2, #0
 8014f62:	2300      	movs	r3, #0
 8014f64:	f7eb fe00 	bl	8000b68 <__aeabi_dcmpgt>
 8014f68:	b150      	cbz	r0, 8014f80 <floor+0x48>
 8014f6a:	2c00      	cmp	r4, #0
 8014f6c:	da55      	bge.n	801501a <floor+0xe2>
 8014f6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014f72:	432c      	orrs	r4, r5
 8014f74:	2500      	movs	r5, #0
 8014f76:	42ac      	cmp	r4, r5
 8014f78:	4c2b      	ldr	r4, [pc, #172]	@ (8015028 <floor+0xf0>)
 8014f7a:	bf08      	it	eq
 8014f7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014f80:	4621      	mov	r1, r4
 8014f82:	4628      	mov	r0, r5
 8014f84:	e023      	b.n	8014fce <floor+0x96>
 8014f86:	4f29      	ldr	r7, [pc, #164]	@ (801502c <floor+0xf4>)
 8014f88:	4137      	asrs	r7, r6
 8014f8a:	ea01 0307 	and.w	r3, r1, r7
 8014f8e:	4303      	orrs	r3, r0
 8014f90:	d01d      	beq.n	8014fce <floor+0x96>
 8014f92:	a323      	add	r3, pc, #140	@ (adr r3, 8015020 <floor+0xe8>)
 8014f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f98:	f7eb f9a0 	bl	80002dc <__adddf3>
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	f7eb fde2 	bl	8000b68 <__aeabi_dcmpgt>
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	d0eb      	beq.n	8014f80 <floor+0x48>
 8014fa8:	2c00      	cmp	r4, #0
 8014faa:	bfbe      	ittt	lt
 8014fac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014fb0:	4133      	asrlt	r3, r6
 8014fb2:	18e4      	addlt	r4, r4, r3
 8014fb4:	ea24 0407 	bic.w	r4, r4, r7
 8014fb8:	2500      	movs	r5, #0
 8014fba:	e7e1      	b.n	8014f80 <floor+0x48>
 8014fbc:	2e33      	cmp	r6, #51	@ 0x33
 8014fbe:	dd0a      	ble.n	8014fd6 <floor+0x9e>
 8014fc0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014fc4:	d103      	bne.n	8014fce <floor+0x96>
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	460b      	mov	r3, r1
 8014fca:	f7eb f987 	bl	80002dc <__adddf3>
 8014fce:	ec41 0b10 	vmov	d0, r0, r1
 8014fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014fda:	f04f 37ff 	mov.w	r7, #4294967295
 8014fde:	40df      	lsrs	r7, r3
 8014fe0:	4207      	tst	r7, r0
 8014fe2:	d0f4      	beq.n	8014fce <floor+0x96>
 8014fe4:	a30e      	add	r3, pc, #56	@ (adr r3, 8015020 <floor+0xe8>)
 8014fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fea:	f7eb f977 	bl	80002dc <__adddf3>
 8014fee:	2200      	movs	r2, #0
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	f7eb fdb9 	bl	8000b68 <__aeabi_dcmpgt>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d0c2      	beq.n	8014f80 <floor+0x48>
 8014ffa:	2c00      	cmp	r4, #0
 8014ffc:	da0a      	bge.n	8015014 <floor+0xdc>
 8014ffe:	2e14      	cmp	r6, #20
 8015000:	d101      	bne.n	8015006 <floor+0xce>
 8015002:	3401      	adds	r4, #1
 8015004:	e006      	b.n	8015014 <floor+0xdc>
 8015006:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801500a:	2301      	movs	r3, #1
 801500c:	40b3      	lsls	r3, r6
 801500e:	441d      	add	r5, r3
 8015010:	4545      	cmp	r5, r8
 8015012:	d3f6      	bcc.n	8015002 <floor+0xca>
 8015014:	ea25 0507 	bic.w	r5, r5, r7
 8015018:	e7b2      	b.n	8014f80 <floor+0x48>
 801501a:	2500      	movs	r5, #0
 801501c:	462c      	mov	r4, r5
 801501e:	e7af      	b.n	8014f80 <floor+0x48>
 8015020:	8800759c 	.word	0x8800759c
 8015024:	7e37e43c 	.word	0x7e37e43c
 8015028:	bff00000 	.word	0xbff00000
 801502c:	000fffff 	.word	0x000fffff

08015030 <_init>:
 8015030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015032:	bf00      	nop
 8015034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015036:	bc08      	pop	{r3}
 8015038:	469e      	mov	lr, r3
 801503a:	4770      	bx	lr

0801503c <_fini>:
 801503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801503e:	bf00      	nop
 8015040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015042:	bc08      	pop	{r3}
 8015044:	469e      	mov	lr, r3
 8015046:	4770      	bx	lr
