
uAnemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  080118a0  080118a0  000128a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e88  08011e88  000136c8  2**0
                  CONTENTS
  4 .ARM          00000008  08011e88  08011e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e90  08011e90  000136c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011e90  08011e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011e98  08011e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c8  20000000  08011e9c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e4  200006c8  08012564  000136c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018ac  08012564  000138ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000136c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec0f  00000000  00000000  000136f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003976  00000000  00000000  00032307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00035c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f0  00000000  00000000  00037750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b87  00000000  00000000  00038c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002092c  00000000  00000000  0005b7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e39a4  00000000  00000000  0007c0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fa97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089bc  00000000  00000000  0015fadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00168498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006c8 	.word	0x200006c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011888 	.word	0x08011888

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006cc 	.word	0x200006cc
 800021c:	08011888 	.word	0x08011888

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100); //for polling just use this line
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 8001008:	e007      	b.n	800101a <lcd_send_cmd+0x52>
	{
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge its address)
		Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800100a:	480f      	ldr	r0, [pc, #60]	@ (8001048 <lcd_send_cmd+0x80>)
 800100c:	f005 f979 	bl	8006302 <HAL_I2C_GetError>
 8001010:	4603      	mov	r3, r0
 8001012:	2b04      	cmp	r3, #4
 8001014:	d001      	beq.n	800101a <lcd_send_cmd+0x52>
		{
			Error_Handler();
 8001016:	f001 f961 	bl	80022dc <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800101a:	f107 0208 	add.w	r2, r7, #8
 800101e:	2304      	movs	r3, #4
 8001020:	214e      	movs	r1, #78	@ 0x4e
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <lcd_send_cmd+0x80>)
 8001024:	f004 ff78 	bl	8005f18 <HAL_I2C_Master_Transmit_DMA>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ed      	bne.n	800100a <lcd_send_cmd+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800102e:	bf00      	nop
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <lcd_send_cmd+0x80>)
 8001032:	f005 f958 	bl	80062e6 <HAL_I2C_GetState>
 8001036:	4603      	mov	r3, r0
 8001038:	2b20      	cmp	r3, #32
 800103a:	d1f9      	bne.n	8001030 <lcd_send_cmd+0x68>
		//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
	 	 "aTxBuffer" buffer */
	}
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000824 	.word	0x20000824

0800104c <lcd_send_data>:

void lcd_send_data (char data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f043 030d 	orr.w	r3, r3, #13
 800106a:	b2db      	uxtb	r3, r3
 800106c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f043 0309 	orr.w	r3, r3, #9
 8001074:	b2db      	uxtb	r3, r3
 8001076:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	f043 030d 	orr.w	r3, r3, #13
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f043 0309 	orr.w	r3, r3, #9
 8001088:	b2db      	uxtb	r3, r3
 800108a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);  //for polling just use this line
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800108c:	e007      	b.n	800109e <lcd_send_data+0x52>
	{
		/* Error_Handler() function is called when Timeout error occurs.
	 	 When Acknowledge failure occurs (Slave don't acknowledge its address)
		Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <lcd_send_data+0x80>)
 8001090:	f005 f937 	bl	8006302 <HAL_I2C_GetError>
 8001094:	4603      	mov	r3, r0
 8001096:	2b04      	cmp	r3, #4
 8001098:	d001      	beq.n	800109e <lcd_send_data+0x52>
		{
			Error_Handler();
 800109a:	f001 f91f 	bl	80022dc <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800109e:	f107 0208 	add.w	r2, r7, #8
 80010a2:	2304      	movs	r3, #4
 80010a4:	214e      	movs	r1, #78	@ 0x4e
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <lcd_send_data+0x80>)
 80010a8:	f004 ff36 	bl	8005f18 <HAL_I2C_Master_Transmit_DMA>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ed      	bne.n	800108e <lcd_send_data+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80010b2:	bf00      	nop
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <lcd_send_data+0x80>)
 80010b6:	f005 f916 	bl	80062e6 <HAL_I2C_GetState>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b20      	cmp	r3, #32
 80010be:	d1f9      	bne.n	80010b4 <lcd_send_data+0x68>
		//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		"aTxBuffer" buffer */
	}
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000824 	.word	0x20000824

080010d0 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    switch (row)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <lcd_put_cur+0x18>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <lcd_put_cur+0x22>
 80010e6:	e009      	b.n	80010fc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ee:	603b      	str	r3, [r7, #0]
            break;
 80010f0:	e004      	b.n	80010fc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010f8:	603b      	str	r3, [r7, #0]
            break;
 80010fa:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff61 	bl	8000fc8 <lcd_send_cmd>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <lcd_init>:


void lcd_init (void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001112:	2032      	movs	r0, #50	@ 0x32
 8001114:	f001 fe7e 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001118:	2030      	movs	r0, #48	@ 0x30
 800111a:	f7ff ff55 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800111e:	2005      	movs	r0, #5
 8001120:	f001 fe78 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001124:	2030      	movs	r0, #48	@ 0x30
 8001126:	f7ff ff4f 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800112a:	2001      	movs	r0, #1
 800112c:	f001 fe72 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001130:	2030      	movs	r0, #48	@ 0x30
 8001132:	f7ff ff49 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 fe6c 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800113c:	2020      	movs	r0, #32
 800113e:	f7ff ff43 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f001 fe66 	bl	8002e14 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001148:	2028      	movs	r0, #40	@ 0x28
 800114a:	f7ff ff3d 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f001 fe60 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001154:	2008      	movs	r0, #8
 8001156:	f7ff ff37 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fe5a 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff ff31 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f001 fe54 	bl	8002e14 <HAL_Delay>
	HAL_Delay(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f001 fe51 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001172:	2006      	movs	r0, #6
 8001174:	f7ff ff28 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f001 fe4b 	bl	8002e14 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800117e:	200c      	movs	r0, #12
 8001180:	f7ff ff22 	bl	8000fc8 <lcd_send_cmd>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001190:	e006      	b.n	80011a0 <lcd_send_string+0x18>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff56 	bl	800104c <lcd_send_data>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f4      	bne.n	8001192 <lcd_send_string+0xa>
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
    return;
 80011ba:	bf00      	nop
}
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_UART_RxHalfCpltCallback>:
int HTC = 0, FTC = 0;

char inp;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	HTC=1;  // half transfer complete callback was called
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_UART_RxHalfCpltCallback+0x20>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
	FTC=0;
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_UART_RxHalfCpltCallback+0x24>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	200013f8 	.word	0x200013f8
 80011ec:	200013fc 	.word	0x200013fc

080011f0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	  HTC=0;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_UART_RxCpltCallback+0x20>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
	  FTC=1;
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_UART_RxCpltCallback+0x24>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	200013f8 	.word	0x200013f8
 8001214:	200013fc 	.word	0x200013fc

08001218 <uart_dma>:

void uart_dma(void);
void uart_dma(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	4907      	ldr	r1, [pc, #28]	@ (800123c <uart_dma+0x24>)
 8001220:	4807      	ldr	r0, [pc, #28]	@ (8001240 <uart_dma+0x28>)
 8001222:	f00a fc25 	bl	800ba70 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit_DMA(&huart2, RxData, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	4904      	ldr	r1, [pc, #16]	@ (800123c <uart_dma+0x24>)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <uart_dma+0x28>)
 800122c:	f009 fb9e 	bl	800a96c <HAL_UART_Transmit_DMA>
	  		  FTC = 0;
	  		  HAL_UART_DMAStop(&huart2);
	  		  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
	  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
	  	  }*/
	    inp = RxData[0];
 8001230:	4b02      	ldr	r3, [pc, #8]	@ (800123c <uart_dma+0x24>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <uart_dma+0x2c>)
 8001236:	701a      	strb	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200013f4 	.word	0x200013f4
 8001240:	20000a7c 	.word	0x20000a7c
 8001244:	20001400 	.word	0x20001400

08001248 <HAL_TIM_IC_CaptureCallback>:

float windspeed_arr[vw_arr_size], windspeed_avg;

//Tim1 input capture callback function for calculating the pulseW
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	//if the interrupt is triggered by 1st Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7f1b      	ldrb	r3, [r3, #28]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d102      	bne.n	800125e <HAL_TIM_IC_CaptureCallback+0x16>
	{
		riseCaptured = 1;
 8001258:	4b8d      	ldr	r3, [pc, #564]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x248>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
	}
	//if the interrupt is triggered by 2nd Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7f1b      	ldrb	r3, [r3, #28]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d102      	bne.n	800126c <HAL_TIM_IC_CaptureCallback+0x24>
	{
		fallCaptured = 1;
 8001266:	4b8b      	ldr	r3, [pc, #556]	@ (8001494 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
	}
	if ((riseCaptured) && (fallCaptured))
 800126c:	4b88      	ldr	r3, [pc, #544]	@ (8001490 <HAL_TIM_IC_CaptureCallback+0x248>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 8205 	beq.w	8001680 <HAL_TIM_IC_CaptureCallback+0x438>
 8001276:	4b87      	ldr	r3, [pc, #540]	@ (8001494 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8200 	beq.w	8001680 <HAL_TIM_IC_CaptureCallback+0x438>
	{
		// calculate the reference clock
		//float refClock = TIMCLOCK/(PSCALAR+1);
		int indxr = 0, indxf = 0, countr = 0, countrf = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
		float riseavg = 0,  rfavg = 0;
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
		 //In case of high Frequencies, the DMA sometimes captures 0's in the beginning.
		// increment the index until some useful data shows up

		while (riseData[indxr] == 0) indxr++;
 800129c:	e002      	b.n	80012a4 <HAL_TIM_IC_CaptureCallback+0x5c>
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	3301      	adds	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a4:	4a7c      	ldr	r2, [pc, #496]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f6      	beq.n	800129e <HAL_TIM_IC_CaptureCallback+0x56>

		 //Again at very high frequencies, sometimes the values don't change
		//So we will wait for the update among the values

		while ( (MIN( (riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]) ) ) == 0) indxr++;
 80012b0:	e002      	b.n	80012b8 <HAL_TIM_IC_CaptureCallback+0x70>
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	3302      	adds	r3, #2
 80012bc:	4a76      	ldr	r2, [pc, #472]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	3301      	adds	r3, #1
 80012c6:	4974      	ldr	r1, [pc, #464]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	3301      	adds	r3, #1
 80012d2:	4971      	ldr	r1, [pc, #452]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80012d8:	486f      	ldr	r0, [pc, #444]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012e0:	1acb      	subs	r3, r1, r3
 80012e2:	4293      	cmp	r3, r2
 80012e4:	bf28      	it	cs
 80012e6:	4613      	movcs	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0e2      	beq.n	80012b2 <HAL_TIM_IC_CaptureCallback+0x6a>
		 //riseavg is the difference in the 2 consecutive rise Time

		 //Assign a start value to riseavg
		riseavg += MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]));
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a69      	ldr	r2, [pc, #420]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012f6:	4968      	ldr	r1, [pc, #416]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	3302      	adds	r3, #2
 8001304:	4964      	ldr	r1, [pc, #400]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001306:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	3301      	adds	r3, #1
 800130e:	4862      	ldr	r0, [pc, #392]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001310:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001314:	1acb      	subs	r3, r1, r3
 8001316:	429a      	cmp	r2, r3
 8001318:	d20e      	bcs.n	8001338 <HAL_TIM_IC_CaptureCallback+0xf0>
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	4a5e      	ldr	r2, [pc, #376]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001324:	495c      	ldr	r1, [pc, #368]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	e00e      	b.n	8001356 <HAL_TIM_IC_CaptureCallback+0x10e>
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	3302      	adds	r3, #2
 800133c:	4a56      	ldr	r2, [pc, #344]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 800133e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	4954      	ldr	r1, [pc, #336]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001348:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	ed97 7a05 	vldr	s14, [r7, #20]
 800135a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135e:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr++;
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	3301      	adds	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
		countr++;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3301      	adds	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
		// start adding the values to the riseavg
		while (indxr < (numval))
 800136e:	e03f      	b.n	80013f0 <HAL_TIM_IC_CaptureCallback+0x1a8>
		{
			riseavg += MIN((riseData[indxr+1]-riseData[indxr]), riseavg/countr);
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	3301      	adds	r3, #1
 8001374:	4a48      	ldr	r2, [pc, #288]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001376:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137a:	4947      	ldr	r1, [pc, #284]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001396:	ed97 6a05 	vldr	s12, [r7, #20]
 800139a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800139e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	d50e      	bpl.n	80013c6 <HAL_TIM_IC_CaptureCallback+0x17e>
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b2:	4939      	ldr	r1, [pc, #228]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c4:	e008      	b.n	80013d8 <HAL_TIM_IC_CaptureCallback+0x190>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80013d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	edc7 7a05 	vstr	s15, [r7, #20]
			countr++;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
			indxr++;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	3301      	adds	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
		while (indxr < (numval))
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	2bff      	cmp	r3, #255	@ 0xff
 80013f4:	ddbc      	ble.n	8001370 <HAL_TIM_IC_CaptureCallback+0x128>
		}
		// Find the average riseavg, the average time between 2 RISE
		riseavg = riseavg/countr;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001400:	edd7 6a05 	vldr	s13, [r7, #20]
 8001404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
		 //The calculation for the Falling pulse on second channel
		 //If the fall time is lower than rise time,
		// Then there must be some error and we will increment
		 // both, until the error is gone

		if (fallData[indxf] < riseData[indxr])
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001418:	491f      	ldr	r1, [pc, #124]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001420:	429a      	cmp	r2, r3
 8001422:	d214      	bcs.n	800144e <HAL_TIM_IC_CaptureCallback+0x206>
		{
			indxf+=2;
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	3302      	adds	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
			indxr+=2;
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	3302      	adds	r3, #2
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] < riseData[indxr]) indxf++;
 8001430:	e002      	b.n	8001438 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	3301      	adds	r3, #1
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	4a18      	ldr	r2, [pc, #96]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x254>)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001440:	4915      	ldr	r1, [pc, #84]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3f2      	bcc.n	8001432 <HAL_TIM_IC_CaptureCallback+0x1ea>
 800144c:	e0a7      	b.n	800159e <HAL_TIM_IC_CaptureCallback+0x356>
		}

		else if (fallData[indxf] > riseData[indxr])
 800144e:	4a13      	ldr	r2, [pc, #76]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001456:	4910      	ldr	r1, [pc, #64]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800145e:	429a      	cmp	r2, r3
 8001460:	f240 809d 	bls.w	800159e <HAL_TIM_IC_CaptureCallback+0x356>
		{
			indxf+=2;
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	3302      	adds	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
			indxr+=2;
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	3302      	adds	r3, #2
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] > riseData[indxr+1]) indxr++;
 8001470:	e002      	b.n	8001478 <HAL_TIM_IC_CaptureCallback+0x230>
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
 8001478:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x254>)
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	3301      	adds	r3, #1
 8001484:	4904      	ldr	r1, [pc, #16]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001486:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800148a:	429a      	cmp	r2, r3
 800148c:	d8f1      	bhi.n	8001472 <HAL_TIM_IC_CaptureCallback+0x22a>
		// The method used for the calculation below is as follows:
		//If Fall time < Rise Time, increment Fall counter
		//If Fall time - Rise Time is in between 0 and (difference between 2 Rise times), then its a success
		//If fall time > Rise time, but is also > (difference between 2 Rise times), then increment Rise Counter

		while ((indxf < (numval)) && (indxr < (numval)))
 800148e:	e086      	b.n	800159e <HAL_TIM_IC_CaptureCallback+0x356>
 8001490:	20000bd0 	.word	0x20000bd0
 8001494:	20000bd4 	.word	0x20000bd4
 8001498:	20000bd8 	.word	0x20000bd8
 800149c:	20000fd8 	.word	0x20000fd8
		{
			//If the Fall time is lower than rise time, increment the fall indx
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
			{
				indxf++;
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	3301      	adds	r3, #1
 80014a4:	623b      	str	r3, [r7, #32]
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
 80014a6:	4a7e      	ldr	r2, [pc, #504]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	497c      	ldr	r1, [pc, #496]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b21b      	sxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dbed      	blt.n	80014a0 <HAL_TIM_IC_CaptureCallback+0x258>
			}
			// If the Difference in fall time and rise time is >0 and less than rise average,
			// Then we will register it as a success and increment the countrf (the number of successes)

			if (((int16_t)(fallData[indxf]-riseData[indxr]) >= 0) && (((int16_t)(fallData[indxf]-riseData[indxr]) <= riseavg)))
 80014c4:	4a76      	ldr	r2, [pc, #472]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4975      	ldr	r1, [pc, #468]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b21b      	sxth	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db5a      	blt.n	8001598 <HAL_TIM_IC_CaptureCallback+0x350>
 80014e2:	4a6f      	ldr	r2, [pc, #444]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	496d      	ldr	r1, [pc, #436]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	ed97 7a05 	vldr	s14, [r7, #20]
 8001508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	db42      	blt.n	8001598 <HAL_TIM_IC_CaptureCallback+0x350>
			{
				rfavg += MIN((fallData[indxf]-riseData[indxr]), (fallData[indxf+1]-riseData[indxr+1]));
 8001512:	4a63      	ldr	r2, [pc, #396]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800151a:	4962      	ldr	r1, [pc, #392]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	3301      	adds	r3, #1
 8001528:	495d      	ldr	r1, [pc, #372]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 800152a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	3301      	adds	r3, #1
 8001532:	485c      	ldr	r0, [pc, #368]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001534:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001538:	1acb      	subs	r3, r1, r3
 800153a:	429a      	cmp	r2, r3
 800153c:	d20d      	bcs.n	800155a <HAL_TIM_IC_CaptureCallback+0x312>
 800153e:	4a58      	ldr	r2, [pc, #352]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001546:	4957      	ldr	r1, [pc, #348]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001558:	e00e      	b.n	8001578 <HAL_TIM_IC_CaptureCallback+0x330>
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	3301      	adds	r3, #1
 800155e:	4a50      	ldr	r2, [pc, #320]	@ (80016a0 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001560:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	494e      	ldr	r1, [pc, #312]	@ (80016a4 <HAL_TIM_IC_CaptureCallback+0x45c>)
 800156a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	ed97 7a04 	vldr	s14, [r7, #16]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc7 7a04 	vstr	s15, [r7, #16]
				indxf++;
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	3301      	adds	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
				indxr++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
				countrf++;
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	3301      	adds	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	e002      	b.n	800159e <HAL_TIM_IC_CaptureCallback+0x356>
			}
			else
			{
				indxr++;
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	3301      	adds	r3, #1
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
		while ((indxf < (numval)) && (indxr < (numval)))
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	2bff      	cmp	r3, #255	@ 0xff
 80015a2:	dc03      	bgt.n	80015ac <HAL_TIM_IC_CaptureCallback+0x364>
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	2bff      	cmp	r3, #255	@ 0xff
 80015a8:	f77f af7d 	ble.w	80014a6 <HAL_TIM_IC_CaptureCallback+0x25e>
			}
		}
		//Calculate the Average time between 2 Rise
		rfavg = rfavg/countrf;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b6:	edd7 6a04 	vldr	s13, [r7, #16]
 80015ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015be:	edc7 7a04 	vstr	s15, [r7, #16]
		//v_sound = 331+0.61*temp;
		//pulseW = *deltaT * timeFactor/1000000000;
		pulseW = rfavg*timeFactor/1000000000;  //converting ns to s
 80015c2:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <HAL_TIM_IC_CaptureCallback+0x460>)
 80015c4:	ed93 7a00 	vldr	s14, [r3]
 80015c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80016ac <HAL_TIM_IC_CaptureCallback+0x464>
 80015d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d8:	4b35      	ldr	r3, [pc, #212]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x468>)
 80015da:	edc3 7a00 	vstr	s15, [r3]

		float sum = 0;
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
		// if the magnitude of the pulse width outside of the range 1us to 40us, then do not do this
		if (pulseW > 0.000001 && pulseW <= 0.000040)
 80015e4:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x468>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffd5 	bl	8000598 <__aeabi_f2d>
 80015ee:	a326      	add	r3, pc, #152	@ (adr r3, 8001688 <HAL_TIM_IC_CaptureCallback+0x440>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff fab8 	bl	8000b68 <__aeabi_dcmpgt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d037      	beq.n	800166e <HAL_TIM_IC_CaptureCallback+0x426>
 80015fe:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x468>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffc8 	bl	8000598 <__aeabi_f2d>
 8001608:	a321      	add	r3, pc, #132	@ (adr r3, 8001690 <HAL_TIM_IC_CaptureCallback+0x448>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff fa97 	bl	8000b40 <__aeabi_dcmple>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d02a      	beq.n	800166e <HAL_TIM_IC_CaptureCallback+0x426>
		{
			windspeed = DIST/(pulseW*cal_val) - v_sound;
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x468>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	a118      	add	r1, pc, #96	@ (adr r1, 8001698 <HAL_TIM_IC_CaptureCallback+0x450>)
 8001636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800163a:	f7ff f92f 	bl	800089c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4614      	mov	r4, r2
 8001644:	461d      	mov	r5, r3
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <HAL_TIM_IC_CaptureCallback+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ffa4 	bl	8000598 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe fe3e 	bl	80002d8 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fae8 	bl	8000c38 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <HAL_TIM_IC_CaptureCallback+0x474>)
 800166c:	6013      	str	r3, [r2, #0]

//		deltaT_real = *delta_T_alg(pulseW);
		//windspeed = dist/((pulseW)*cali_val);  //d/(t*path diff)
//		windspeed = dist/(deltaT_real*cal_val) - v_sound; //might need to make this an array and take the average

		riseCaptured = 0;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <HAL_TIM_IC_CaptureCallback+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
		fallCaptured = 0;
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
		isMeasured = 1;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_TIM_IC_CaptureCallback+0x480>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
		}
	}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	@ 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	a0b5ed8d 	.word	0xa0b5ed8d
 800168c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001690:	88e368f1 	.word	0x88e368f1
 8001694:	3f04f8b5 	.word	0x3f04f8b5
 8001698:	47ae147b 	.word	0x47ae147b
 800169c:	3f847ae1 	.word	0x3f847ae1
 80016a0:	20000fd8 	.word	0x20000fd8
 80016a4:	20000bd8 	.word	0x20000bd8
 80016a8:	20000000 	.word	0x20000000
 80016ac:	4e6e6b28 	.word	0x4e6e6b28
 80016b0:	200013dc 	.word	0x200013dc
 80016b4:	200013e0 	.word	0x200013e0
 80016b8:	20000004 	.word	0x20000004
 80016bc:	200013f0 	.word	0x200013f0
 80016c0:	20000bd0 	.word	0x20000bd0
 80016c4:	20000bd4 	.word	0x20000bd4
 80016c8:	200013d8 	.word	0x200013d8

080016cc <adc_dma>:

//adc in dma mode -get adc value for temperature

uint32_t adc_val[1];
void adc_dma(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	// calibrate ADC for better accuracy and start it w/ interrupt
	 if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80016d0:	217f      	movs	r1, #127	@ 0x7f
 80016d2:	4815      	ldr	r0, [pc, #84]	@ (8001728 <adc_dma+0x5c>)
 80016d4:	f003 f852 	bl	800477c <HAL_ADCEx_Calibration_Start>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <adc_dma+0x16>
	 {
		 Error_Handler();
 80016de:	f000 fdfd 	bl	80022dc <Error_Handler>
	 /*if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
	 {
	 	 Error_Handler();
	}*/
	 // start pwm generation
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4811      	ldr	r0, [pc, #68]	@ (800172c <adc_dma+0x60>)
 80016e6:	f007 fb13 	bl	8008d10 <HAL_TIM_PWM_Start>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <adc_dma+0x28>
	{
		Error_Handler();
 80016f0:	f000 fdf4 	bl	80022dc <Error_Handler>
	 }
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1) != HAL_OK)
 80016f4:	2201      	movs	r2, #1
 80016f6:	490e      	ldr	r1, [pc, #56]	@ (8001730 <adc_dma+0x64>)
 80016f8:	480b      	ldr	r0, [pc, #44]	@ (8001728 <adc_dma+0x5c>)
 80016fa:	f001 ff97 	bl	800362c <HAL_ADC_Start_DMA>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <adc_dma+0x3c>
	 {
		Error_Handler();
 8001704:	f000 fdea 	bl	80022dc <Error_Handler>
	}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001708:	217f      	movs	r1, #127	@ 0x7f
 800170a:	4807      	ldr	r0, [pc, #28]	@ (8001728 <adc_dma+0x5c>)
 800170c:	f003 f836 	bl	800477c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	4907      	ldr	r1, [pc, #28]	@ (8001730 <adc_dma+0x64>)
 8001714:	4804      	ldr	r0, [pc, #16]	@ (8001728 <adc_dma+0x5c>)
 8001716:	f001 ff89 	bl	800362c <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800171a:	2100      	movs	r1, #0
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <adc_dma+0x60>)
 800171e:	f007 faf7 	bl	8008d10 <HAL_TIM_PWM_Start>
	return;
 8001722:	bf00      	nop
}
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200006e4 	.word	0x200006e4
 800172c:	20000970 	.word	0x20000970
 8001730:	20001404 	.word	0x20001404

08001734 <getTemp>:
#define V_REF 3300 // mV
#define OFFSET 0.5
float adc_val_f;

float *getTemp(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
	float reading_mV = 0;
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//adc_val_f = adc_val[0];
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//temp = (adc_val_f/4095) *(125 - -40);
	reading_mV = adc_val[0] *  V_REF  / 4095 ;
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <getTemp+0x5c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001748:	fb03 f202 	mul.w	r2, r3, r2
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <getTemp+0x60>)
 800174e:	fba3 1302 	umull	r1, r3, r3, r2
 8001752:	1ad2      	subs	r2, r2, r3
 8001754:	0852      	lsrs	r2, r2, #1
 8001756:	4413      	add	r3, r2
 8001758:	0adb      	lsrs	r3, r3, #11
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001762:	edc7 7a01 	vstr	s15, [r7, #4]
	temp =(reading_mV - 500) / 10; // 10mV/degree_C
 8001766:	edd7 7a01 	vldr	s15, [r7, #4]
 800176a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001798 <getTemp+0x64>
 800176e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001772:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <getTemp+0x68>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
	return &temp;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <getTemp+0x68>)
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20001404 	.word	0x20001404
 8001794:	00100101 	.word	0x00100101
 8001798:	43fa0000 	.word	0x43fa0000
 800179c:	200013e8 	.word	0x200013e8

080017a0 <startSineW>:
#define PI 3.1415926
float dac_val = 1.2;
uint32_t var;

void startSineW(bool start)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	if (!start)
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f083 0301 	eor.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <startSineW+0x20>
	{
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80017b6:	2100      	movs	r1, #0
 80017b8:	482b      	ldr	r0, [pc, #172]	@ (8001868 <startSineW+0xc8>)
 80017ba:	f003 fb1d 	bl	8004df8 <HAL_DAC_Stop_DMA>
		 for (int i = 0; i < 100; i++)
		 {
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
		 }
	}
}
 80017be:	e048      	b.n	8001852 <startSineW+0xb2>
		 HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2364      	movs	r3, #100	@ 0x64
 80017c6:	4a29      	ldr	r2, [pc, #164]	@ (800186c <startSineW+0xcc>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4827      	ldr	r0, [pc, #156]	@ (8001868 <startSineW+0xc8>)
 80017cc:	f003 fa40 	bl	8004c50 <HAL_DAC_Start_DMA>
		 for (int i = 0; i < 100; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e03a      	b.n	800184c <startSineW+0xac>
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe feca 	bl	8000574 <__aeabi_i2d>
 80017e0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001860 <startSineW+0xc0>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe ff2f 	bl	8000648 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <startSineW+0xd0>)
 80017f8:	f7ff f850 	bl	800089c <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	ec43 2b17 	vmov	d7, r2, r3
 8001804:	eeb0 0a47 	vmov.f32	s0, s14
 8001808:	eef0 0a67 	vmov.f32	s1, s15
 800180c:	f00f f80c 	bl	8010828 <sin>
 8001810:	ec51 0b10 	vmov	r0, r1, d0
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <startSineW+0xd4>)
 800181a:	f7fe fd5f 	bl	80002dc <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <startSineW+0xd8>)
 800182c:	f7fe ff0c 	bl	8000648 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f9de 	bl	8000bf8 <__aeabi_d2uiz>
 800183c:	4602      	mov	r2, r0
 800183e:	490b      	ldr	r1, [pc, #44]	@ (800186c <startSineW+0xcc>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 for (int i = 0; i < 100; i++)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b63      	cmp	r3, #99	@ 0x63
 8001850:	ddc1      	ble.n	80017d6 <startSineW+0x36>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	4d12d84a 	.word	0x4d12d84a
 8001864:	400921fb 	.word	0x400921fb
 8001868:	200007b0 	.word	0x200007b0
 800186c:	20001408 	.word	0x20001408
 8001870:	40590000 	.word	0x40590000
 8001874:	3ff00000 	.word	0x3ff00000
 8001878:	40a00000 	.word	0x40a00000

0800187c <lcd_disp>:
/******************************************************************/

// lcd display*****************************************************/  something is wrong with this lcd code, need to fix th buffering from flooding while not affecting the pulse width measurement
void lcd_disp(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	char * fltChar = malloc (sizeof (char) * 7);
 8001882:	2007      	movs	r0, #7
 8001884:	f00a f996 	bl	800bbb4 <malloc>
 8001888:	4603      	mov	r3, r0
 800188a:	607b      	str	r3, [r7, #4]
	//char *fltChar2 = malloc (sizeof(char) * 7);
	//lcd_send_cmd (0x80);
	//char fltChar [7];
	sprintf(fltChar, "%.4f", windspeed);
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <lcd_disp+0x44>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe81 	bl	8000598 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	490a      	ldr	r1, [pc, #40]	@ (80018c4 <lcd_disp+0x48>)
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f00a fda1 	bl	800c3e4 <sprintf>
	lcd_put_cur(0,11);
 80018a2:	210b      	movs	r1, #11
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff fc13 	bl	80010d0 <lcd_put_cur>

	//lcd_send_string("Windspeed=");
	//lcd_send_data((windspeed/10) +48);
	lcd_send_string(fltChar);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fc6c 	bl	8001188 <lcd_send_string>
	lcd_send_string(" ");
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <lcd_disp+0x4c>)
 80018b2:	f7ff fc69 	bl	8001188 <lcd_send_string>
	lcd_send_string (fltChar2);
	lcd_send_string(" ");*/
	//lcd_put_cur(1,0);
	//lcd_send_string("m/s");
	//HAL_Delay(10);
	return;
 80018b6:	bf00      	nop
}
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200013f0 	.word	0x200013f0
 80018c4:	080118a4 	.word	0x080118a4
 80018c8:	080118ac 	.word	0x080118ac
 80018cc:	00000000 	.word	0x00000000

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
 enum State {IDLE = 0, START = 1, CALTIME = 2, STOP = 3}; //define the number of states
 char State = IDLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]


 setvbuf(stdin, NULL, _IONBF, 0);
 80018da:	4b8b      	ldr	r3, [pc, #556]	@ (8001b08 <main+0x238>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6858      	ldr	r0, [r3, #4]
 80018e0:	2300      	movs	r3, #0
 80018e2:	2202      	movs	r2, #2
 80018e4:	2100      	movs	r1, #0
 80018e6:	f00a fcc3 	bl	800c270 <setvbuf>

lambda = v_sound/FREQ;  //wavelength
 80018ea:	4b88      	ldr	r3, [pc, #544]	@ (8001b0c <main+0x23c>)
 80018ec:	ed93 7a00 	vldr	s14, [r3]
 80018f0:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001b10 <main+0x240>
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	4b86      	ldr	r3, [pc, #536]	@ (8001b14 <main+0x244>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]
pathDiff = (DIST/lambda)-0.5;  //destructive interference, L/lambda-0.5=delta_L
 80018fe:	4b85      	ldr	r3, [pc, #532]	@ (8001b14 <main+0x244>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe48 	bl	8000598 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	a178      	add	r1, pc, #480	@ (adr r1, 8001af0 <main+0x220>)
 800190e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001912:	f7fe ffc3 	bl	800089c <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b7d      	ldr	r3, [pc, #500]	@ (8001b18 <main+0x248>)
 8001924:	f7fe fcd8 	bl	80002d8 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f982 	bl	8000c38 <__aeabi_d2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4a79      	ldr	r2, [pc, #484]	@ (8001b1c <main+0x24c>)
 8001938:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f001 f9fa 	bl	8002d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f90b 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001942:	f000 fc6b 	bl	800221c <MX_GPIO_Init>
  MX_DMA_Init();
 8001946:	f000 fc03 	bl	8002150 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800194a:	f000 fbb3 	bl	80020b4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800194e:	f000 fb3b 	bl	8001fc8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001952:	f000 fa41 	bl	8001dd8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001956:	f000 f94b 	bl	8001bf0 <MX_ADC1_Init>
  MX_DAC1_Init();
 800195a:	f000 f9c3 	bl	8001ce4 <MX_DAC1_Init>
  MX_TIM2_Init();
 800195e:	f000 fac1 	bl	8001ee4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001962:	f000 f9f9 	bl	8001d58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 8001966:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800196a:	4a6d      	ldr	r2, [pc, #436]	@ (8001b20 <main+0x250>)
 800196c:	2100      	movs	r1, #0
 800196e:	486d      	ldr	r0, [pc, #436]	@ (8001b24 <main+0x254>)
 8001970:	f007 fb30 	bl	8008fd4 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 8001974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001978:	4a6b      	ldr	r2, [pc, #428]	@ (8001b28 <main+0x258>)
 800197a:	2104      	movs	r1, #4
 800197c:	4869      	ldr	r0, [pc, #420]	@ (8001b24 <main+0x254>)
 800197e:	f007 fb29 	bl	8008fd4 <HAL_TIM_IC_Start_DMA>
  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  //start pwm timer
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //start TIM4 pwm ch1 - macro expan 0x00000000U

  lcd_init(); 														//initialize the lcd
 8001982:	f7ff fbc4 	bl	800110e <lcd_init>
  //start timer 2 for the sinewave
  HAL_TIM_Base_Start(&htim2);
 8001986:	4869      	ldr	r0, [pc, #420]	@ (8001b2c <main+0x25c>)
 8001988:	f007 f8fe 	bl	8008b88 <HAL_TIM_Base_Start>

  //start adc dma
  adc_dma();
 800198c:	f7ff fe9e 	bl	80016cc <adc_dma>
  //start uarat dma
  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
  uart_dma();
 8001990:	f7ff fc42 	bl	8001218 <uart_dma>

  //preprint something on the lcd
  lcd_put_cur(0,0);
 8001994:	2100      	movs	r1, #0
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fb9a 	bl	80010d0 <lcd_put_cur>
  lcd_send_string("W_vel[m/s]=");
 800199c:	4864      	ldr	r0, [pc, #400]	@ (8001b30 <main+0x260>)
 800199e:	f7ff fbf3 	bl	8001188 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //blinkLED();  //call the blinkLED function - disable the blink to save processing power
	  getTemp();
 80019a2:	f7ff fec7 	bl	8001734 <getTemp>
	  lcd_disp();
 80019a6:	f7ff ff69 	bl	800187c <lcd_disp>
	  //uart_dma();

	  if (isMeasured)
 80019aa:	4b62      	ldr	r3, [pc, #392]	@ (8001b34 <main+0x264>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d013      	beq.n	80019da <main+0x10a>
	  {
		  TIM1->CNT = 0;
 80019b2:	4b61      	ldr	r3, [pc, #388]	@ (8001b38 <main+0x268>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 80019b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019bc:	4a58      	ldr	r2, [pc, #352]	@ (8001b20 <main+0x250>)
 80019be:	2100      	movs	r1, #0
 80019c0:	4858      	ldr	r0, [pc, #352]	@ (8001b24 <main+0x254>)
 80019c2:	f007 fb07 	bl	8008fd4 <HAL_TIM_IC_Start_DMA>
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 80019c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ca:	4a57      	ldr	r2, [pc, #348]	@ (8001b28 <main+0x258>)
 80019cc:	2104      	movs	r1, #4
 80019ce:	4855      	ldr	r0, [pc, #340]	@ (8001b24 <main+0x254>)
 80019d0:	f007 fb00 	bl	8008fd4 <HAL_TIM_IC_Start_DMA>
		  isMeasured = 0;
 80019d4:	4b57      	ldr	r3, [pc, #348]	@ (8001b34 <main+0x264>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
	  //scan for user inpt for the state machine

	 //inp = *scanInp();
	  //wait again so we don't flood the serial terminal
	  //HAL_Delay(100);
	  inp = RxData[0];
 80019da:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <main+0x26c>)
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b58      	ldr	r3, [pc, #352]	@ (8001b40 <main+0x270>)
 80019e0:	701a      	strb	r2, [r3, #0]
	  if (inp == 'i')
 80019e2:	4b57      	ldr	r3, [pc, #348]	@ (8001b40 <main+0x270>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b69      	cmp	r3, #105	@ 0x69
 80019e8:	d102      	bne.n	80019f0 <main+0x120>
	  {
		  State = IDLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	e00c      	b.n	8001a0a <main+0x13a>
	  }
	  else if (inp == 's')
 80019f0:	4b53      	ldr	r3, [pc, #332]	@ (8001b40 <main+0x270>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b73      	cmp	r3, #115	@ 0x73
 80019f6:	d102      	bne.n	80019fe <main+0x12e>
	  {
		  State = START;
 80019f8:	2301      	movs	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	e005      	b.n	8001a0a <main+0x13a>
	  }
	  else if (inp == 't')
 80019fe:	4b50      	ldr	r3, [pc, #320]	@ (8001b40 <main+0x270>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b74      	cmp	r3, #116	@ 0x74
 8001a04:	d101      	bne.n	8001a0a <main+0x13a>
	  {
		  State = STOP;
 8001a06:	2303      	movs	r3, #3
 8001a08:	71fb      	strb	r3, [r7, #7]
	  }else{};

	  //State Machine starts here
	  switch (State)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d863      	bhi.n	8001ad8 <main+0x208>
 8001a10:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <main+0x148>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a43 	.word	0x08001a43
 8001a20:	08001ae7 	.word	0x08001ae7
 8001a24:	08001ac5 	.word	0x08001ac5
	  {
	  case IDLE:
		  lcd_init();
 8001a28:	f7ff fb71 	bl	800110e <lcd_init>
		 // uart_buf_len = sprintf(uart_buf, "In IDLE state\r\n");
		  //printf("In IDLE State\r\n");
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); /// disable nShutdown pin for digital amp
		  //startSpeaker(0); //turn off speaker
		  startSineW(0); //using sinewave instead
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff feb7 	bl	80017a0 <startSineW>
		  RxData[0] = '\0';
 8001a32:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <main+0x26c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]

		  HAL_Delay(1000);
 8001a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3c:	f001 f9ea 	bl	8002e14 <HAL_Delay>

		  break;
 8001a40:	e052      	b.n	8001ae8 <main+0x218>
	  case START:
		  //nShutdownDamp = 1; // start digital amplifier
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		  //printf("In START State\r\n"); // print status in terminal
		  //startSpeaker(1);
		  startSineW(1); //using sinewave instead
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff feac 	bl	80017a0 <startSineW>
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  /*the following is use to do pulse output and measure the very beginning****
		  //HAL_Delay(100);  //wait 20ms
		  //startSpeaker(0);
		   */
		  v_sound = 331+0.61*temp; // only capturing temp once
 8001a48:	4b3e      	ldr	r3, [pc, #248]	@ (8001b44 <main+0x274>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fda3 	bl	8000598 <__aeabi_f2d>
 8001a52:	a329      	add	r3, pc, #164	@ (adr r3, 8001af8 <main+0x228>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdf6 	bl	8000648 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	a326      	add	r3, pc, #152	@ (adr r3, 8001b00 <main+0x230>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fc37 	bl	80002dc <__adddf3>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8df 	bl	8000c38 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <main+0x23c>)
 8001a7e:	6013      	str	r3, [r2, #0]
		  cal_val = DIST/(pulseW*v_sound);  //get the calibration value from the drift and temperature
 8001a80:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <main+0x278>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <main+0x23c>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd80 	bl	8000598 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	a114      	add	r1, pc, #80	@ (adr r1, 8001af0 <main+0x220>)
 8001a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa2:	f7fe fefb 	bl	800089c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f8c3 	bl	8000c38 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a25      	ldr	r2, [pc, #148]	@ (8001b4c <main+0x27c>)
 8001ab6:	6013      	str	r3, [r2, #0]
		  RxData[0] = '\0';
 8001ab8:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <main+0x26c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		  State = CALTIME;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	71fb      	strb	r3, [r7, #7]

		  break;
 8001ac2:	e011      	b.n	8001ae8 <main+0x218>
		  break;

	  case STOP:
		  //nShutdownDamp = 0; //stop digital amplifier
		  //startSpeaker(0);
		  startSineW(0); //using sinewave instead
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fe6b 	bl	80017a0 <startSineW>
		  printf("In STOP State\r\n"); // print status in terminal
 8001aca:	4821      	ldr	r0, [pc, #132]	@ (8001b50 <main+0x280>)
 8001acc:	f00a fbc8 	bl	800c260 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001ad0:	2064      	movs	r0, #100	@ 0x64
 8001ad2:	f001 f99f 	bl	8002e14 <HAL_Delay>
		  break;
 8001ad6:	e007      	b.n	8001ae8 <main+0x218>

	  default:
		  /*uart_buf_len = sprintf(uart_buf, "In Default State\r\n");
  		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
		  printf("In DEFAULT State\r\n"); // print status in terminal
 8001ad8:	481e      	ldr	r0, [pc, #120]	@ (8001b54 <main+0x284>)
 8001ada:	f00a fbc1 	bl	800c260 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001ade:	2064      	movs	r0, #100	@ 0x64
 8001ae0:	f001 f998 	bl	8002e14 <HAL_Delay>
		  break;
 8001ae4:	e000      	b.n	8001ae8 <main+0x218>
		  break;
 8001ae6:	bf00      	nop
	  getTemp();
 8001ae8:	e75b      	b.n	80019a2 <main+0xd2>
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	47ae147b 	.word	0x47ae147b
 8001af4:	3f847ae1 	.word	0x3f847ae1
 8001af8:	b851eb85 	.word	0xb851eb85
 8001afc:	3fe3851e 	.word	0x3fe3851e
 8001b00:	00000000 	.word	0x00000000
 8001b04:	4074b000 	.word	0x4074b000
 8001b08:	20000430 	.word	0x20000430
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	46c35000 	.word	0x46c35000
 8001b14:	200013e4 	.word	0x200013e4
 8001b18:	3fe00000 	.word	0x3fe00000
 8001b1c:	200013ec 	.word	0x200013ec
 8001b20:	20000bd8 	.word	0x20000bd8
 8001b24:	200008d8 	.word	0x200008d8
 8001b28:	20000fd8 	.word	0x20000fd8
 8001b2c:	20000924 	.word	0x20000924
 8001b30:	080118b0 	.word	0x080118b0
 8001b34:	200013d8 	.word	0x200013d8
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	200013f4 	.word	0x200013f4
 8001b40:	20001400 	.word	0x20001400
 8001b44:	200013e8 	.word	0x200013e8
 8001b48:	200013dc 	.word	0x200013dc
 8001b4c:	200013e0 	.word	0x200013e0
 8001b50:	080118bc 	.word	0x080118bc
 8001b54:	080118cc 	.word	0x080118cc

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b094      	sub	sp, #80	@ 0x50
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	2238      	movs	r2, #56	@ 0x38
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00a fc9f 	bl	800c4aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f005 ffda 	bl	8007b34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8a:	2340      	movs	r3, #64	@ 0x40
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b92:	2302      	movs	r3, #2
 8001b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b96:	2304      	movs	r3, #4
 8001b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b9a:	2355      	movs	r3, #85	@ 0x55
 8001b9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f006 f874 	bl	8007c9c <HAL_RCC_OscConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bba:	f000 fb8f 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f006 fb72 	bl	80082c0 <HAL_RCC_ClockConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001be2:	f000 fb7b 	bl	80022dc <Error_Handler>
  }
}
 8001be6:	bf00      	nop
 8001be8:	3750      	adds	r7, #80	@ 0x50
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2220      	movs	r2, #32
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00a fc4e 	bl	800c4aa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c10:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001c16:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c30:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c38:	2204      	movs	r2, #4
 8001c3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c42:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c48:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c58:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c7c:	4817      	ldr	r0, [pc, #92]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c7e:	f001 fb51 	bl	8003324 <HAL_ADC_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001c88:	f000 fb28 	bl	80022dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001c98:	f002 fe04 	bl	80048a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001ca2:	f000 fb1b 	bl	80022dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_ADC1_Init+0xf0>)
 8001ca8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001caa:	2306      	movs	r3, #6
 8001cac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cb2:	237f      	movs	r3, #127	@ 0x7f
 8001cb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001cc4:	f001 ff9e 	bl	8003c04 <HAL_ADC_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001cce:	f000 fb05 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3730      	adds	r7, #48	@ 0x30
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200006e4 	.word	0x200006e4
 8001ce0:	04300002 	.word	0x04300002

08001ce4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2230      	movs	r2, #48	@ 0x30
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a fbda 	bl	800c4aa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <MX_DAC1_Init+0x6c>)
 8001cf8:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <MX_DAC1_Init+0x70>)
 8001cfa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001cfc:	4814      	ldr	r0, [pc, #80]	@ (8001d50 <MX_DAC1_Init+0x6c>)
 8001cfe:	f002 ff84 	bl	8004c0a <HAL_DAC_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d08:	f000 fae8 	bl	80022dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	@ (8001d50 <MX_DAC1_Init+0x6c>)
 8001d38:	f003 f92a 	bl	8004f90 <HAL_DAC_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001d42:	f000 facb 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3730      	adds	r7, #48	@ 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200007b0 	.word	0x200007b0
 8001d54:	50000800 	.word	0x50000800

08001d58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <MX_I2C1_Init+0x78>)
 8001d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <MX_I2C1_Init+0x7c>)
 8001d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d92:	480e      	ldr	r0, [pc, #56]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d94:	f004 f824 	bl	8005de0 <HAL_I2C_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d9e:	f000 fa9d 	bl	80022dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001da6:	f005 fe2d 	bl	8007a04 <HAL_I2CEx_ConfigAnalogFilter>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001db0:	f000 fa94 	bl	80022dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001db4:	2100      	movs	r1, #0
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001db8:	f005 fe6f 	bl	8007a9a <HAL_I2CEx_ConfigDigitalFilter>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dc2:	f000 fa8b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000824 	.word	0x20000824
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	40b285c2 	.word	0x40b285c2

08001dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	@ 0x30
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0320 	add.w	r3, r7, #32
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */
 // timer for PLL pulse width input capture. If we use prescaler 0, fclk = 170Mhz, then 5.882ns/tick
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e04:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e06:	4a36      	ldr	r2, [pc, #216]	@ (8001ee0 <MX_TIM1_Init+0x108>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e0a:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e16:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e2c:	2280      	movs	r2, #128	@ 0x80
 8001e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e30:	482a      	ldr	r0, [pc, #168]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e32:	f006 fe51 	bl	8008ad8 <HAL_TIM_Base_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001e3c:	f000 fa4e 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4823      	ldr	r0, [pc, #140]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e4e:	f007 fceb 	bl	8009828 <HAL_TIM_ConfigClockSource>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001e58:	f000 fa40 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001e5c:	481f      	ldr	r0, [pc, #124]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e5e:	f007 f857 	bl	8008f10 <HAL_TIM_IC_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001e68:	f000 fa38 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4817      	ldr	r0, [pc, #92]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001e80:	f008 fc5c 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001e8a:	f000 fa27 	bl	80022dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e92:	2301      	movs	r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480d      	ldr	r0, [pc, #52]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001ea6:	f007 fc23 	bl	80096f0 <HAL_TIM_IC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001eb0:	f000 fa14 	bl	80022dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4806      	ldr	r0, [pc, #24]	@ (8001edc <MX_TIM1_Init+0x104>)
 8001ec4:	f007 fc14 	bl	80096f0 <HAL_TIM_IC_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001ece:	f000 fa05 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	@ 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200008d8 	.word	0x200008d8
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	@ 0x38
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//this is used to generate a sinewave, f_sys_clk/(prescalar * 100)/4 = 25khz
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8001f1e:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f20:	2210      	movs	r2, #16
 8001f22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f3c:	4821      	ldr	r0, [pc, #132]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f3e:	f006 fdcb 	bl	8008ad8 <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f48:	f000 f9c8 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f56:	4619      	mov	r1, r3
 8001f58:	481a      	ldr	r0, [pc, #104]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f5a:	f007 fc65 	bl	8009828 <HAL_TIM_ConfigClockSource>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f64:	f000 f9ba 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001f68:	4816      	ldr	r0, [pc, #88]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f6a:	f006 fe6f 	bl	8008c4c <HAL_TIM_OC_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f74:	f000 f9b2 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	480f      	ldr	r0, [pc, #60]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f88:	f008 fbd8 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f92:	f000 f9a3 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_TIM2_Init+0xe0>)
 8001fae:	f007 fb25 	bl	80095fc <HAL_TIM_OC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fb8:	f000 f990 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3738      	adds	r7, #56	@ 0x38
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000924 	.word	0x20000924

08001fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	615a      	str	r2, [r3, #20]
 8001ff8:	619a      	str	r2, [r3, #24]
  //arr/2-1 = 6800/2-1
  //timer 4 is unused right now since we are using the sinewave from timer 2
  // timer 4 is used for adc trigger event

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80020ac <MX_TIM4_Init+0xe4>)
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80020b0 <MX_TIM4_Init+0xe8>)
 8001ffe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <MX_TIM4_Init+0xe4>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <MX_TIM4_Init+0xe4>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6799;
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <MX_TIM4_Init+0xe4>)
 800200e:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8002012:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <MX_TIM4_Init+0xe4>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <MX_TIM4_Init+0xe4>)
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002020:	4822      	ldr	r0, [pc, #136]	@ (80020ac <MX_TIM4_Init+0xe4>)
 8002022:	f006 fd59 	bl	8008ad8 <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800202c:	f000 f956 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002036:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800203a:	4619      	mov	r1, r3
 800203c:	481b      	ldr	r0, [pc, #108]	@ (80020ac <MX_TIM4_Init+0xe4>)
 800203e:	f007 fbf3 	bl	8009828 <HAL_TIM_ConfigClockSource>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002048:	f000 f948 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800204c:	4817      	ldr	r0, [pc, #92]	@ (80020ac <MX_TIM4_Init+0xe4>)
 800204e:	f006 fdfd 	bl	8008c4c <HAL_TIM_OC_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002058:	f000 f940 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800205c:	2320      	movs	r3, #32
 800205e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4810      	ldr	r0, [pc, #64]	@ (80020ac <MX_TIM4_Init+0xe4>)
 800206c:	f008 fb66 	bl	800a73c <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002076:	f000 f931 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3399;
 800207e:	f640 5347 	movw	r3, #3399	@ 0xd47
 8002082:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	@ (80020ac <MX_TIM4_Init+0xe4>)
 8002094:	f007 fab2 	bl	80095fc <HAL_TIM_OC_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800209e:	f000 f91d 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3738      	adds	r7, #56	@ 0x38
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000970 	.word	0x20000970
 80020b0:	40000800 	.word	0x40000800

080020b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020ba:	4a24      	ldr	r2, [pc, #144]	@ (800214c <MX_USART2_UART_Init+0x98>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80020ea:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020f0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fe:	4812      	ldr	r0, [pc, #72]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 8002100:	f008 fbe4 	bl	800a8cc <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800210a:	f000 f8e7 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800210e:	2100      	movs	r1, #0
 8002110:	480d      	ldr	r0, [pc, #52]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 8002112:	f009 fc31 	bl	800b978 <HAL_UARTEx_SetTxFifoThreshold>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800211c:	f000 f8de 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002120:	2100      	movs	r1, #0
 8002122:	4809      	ldr	r0, [pc, #36]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 8002124:	f009 fc66 	bl	800b9f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800212e:	f000 f8d5 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <MX_USART2_UART_Init+0x94>)
 8002134:	f009 fbe7 	bl	800b906 <HAL_UARTEx_DisableFifoMode>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800213e:	f000 f8cd 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000a7c 	.word	0x20000a7c
 800214c:	40004400 	.word	0x40004400

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002156:	4b30      	ldr	r3, [pc, #192]	@ (8002218 <MX_DMA_Init+0xc8>)
 8002158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <MX_DMA_Init+0xc8>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6493      	str	r3, [r2, #72]	@ 0x48
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <MX_DMA_Init+0xc8>)
 8002164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <MX_DMA_Init+0xc8>)
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	4a29      	ldr	r2, [pc, #164]	@ (8002218 <MX_DMA_Init+0xc8>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6493      	str	r3, [r2, #72]	@ 0x48
 800217a:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <MX_DMA_Init+0xc8>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002186:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <MX_DMA_Init+0xc8>)
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <MX_DMA_Init+0xc8>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6493      	str	r3, [r2, #72]	@ 0x48
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <MX_DMA_Init+0xc8>)
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	200b      	movs	r0, #11
 80021a4:	f002 fcfd 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021a8:	200b      	movs	r0, #11
 80021aa:	f002 fd14 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	200c      	movs	r0, #12
 80021b4:	f002 fcf5 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021b8:	200c      	movs	r0, #12
 80021ba:	f002 fd0c 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	200d      	movs	r0, #13
 80021c4:	f002 fced 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021c8:	200d      	movs	r0, #13
 80021ca:	f002 fd04 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	200e      	movs	r0, #14
 80021d4:	f002 fce5 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80021d8:	200e      	movs	r0, #14
 80021da:	f002 fcfc 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	200f      	movs	r0, #15
 80021e4:	f002 fcdd 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80021e8:	200f      	movs	r0, #15
 80021ea:	f002 fcf4 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	2038      	movs	r0, #56	@ 0x38
 80021f4:	f002 fcd5 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80021f8:	2038      	movs	r0, #56	@ 0x38
 80021fa:	f002 fcec 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2039      	movs	r0, #57	@ 0x39
 8002204:	f002 fccd 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002208:	2039      	movs	r0, #57	@ 0x39
 800220a:	f002 fce4 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <MX_GPIO_Init+0x94>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <MX_GPIO_Init+0x94>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_GPIO_Init+0x94>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <MX_GPIO_Init+0x94>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <MX_GPIO_Init+0x94>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <MX_GPIO_Init+0x94>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002268:	4812      	ldr	r0, [pc, #72]	@ (80022b4 <MX_GPIO_Init+0x98>)
 800226a:	f003 fda1 	bl	8005db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800226e:	2360      	movs	r3, #96	@ 0x60
 8002270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002284:	f003 fc12 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002288:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800228c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	4804      	ldr	r0, [pc, #16]	@ (80022b4 <MX_GPIO_Init+0x98>)
 80022a2:	f003 fc03 	bl	8005aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022a6:	bf00      	nop
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	48000400 	.word	0x48000400

080022b8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//adc dma callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	//adc_val[0] = HAL_ADC_GetValue(&hadc1);
	//adc_val_f = adc_val;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 80022c0:	2201      	movs	r2, #1
 80022c2:	4904      	ldr	r1, [pc, #16]	@ (80022d4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <HAL_ADC_ConvCpltCallback+0x20>)
 80022c6:	f001 f9b1 	bl	800362c <HAL_ADC_Start_DMA>
	return;
 80022ca:	bf00      	nop
}
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20001404 	.word	0x20001404
 80022d8:	200006e4 	.word	0x200006e4

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <Error_Handler+0x8>

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <HAL_MspInit+0x44>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <HAL_MspInit+0x44>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <HAL_MspInit+0x44>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_MspInit+0x44>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <HAL_MspInit+0x44>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002310:	6593      	str	r3, [r2, #88]	@ 0x58
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_MspInit+0x44>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800231e:	f005 fcad 	bl	8007c7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b09a      	sub	sp, #104	@ 0x68
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	2244      	movs	r2, #68	@ 0x44
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00a f8aa 	bl	800c4aa <memset>
  if(hadc->Instance==ADC1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235e:	d167      	bne.n	8002430 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002364:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002366:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4618      	mov	r0, r3
 8002372:	f006 f9c1 	bl	80086f8 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800237c:	f7ff ffae 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <HAL_ADC_MspInit+0x108>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002384:	4a2c      	ldr	r2, [pc, #176]	@ (8002438 <HAL_ADC_MspInit+0x108>)
 8002386:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238c:	4b2a      	ldr	r3, [pc, #168]	@ (8002438 <HAL_ADC_MspInit+0x108>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <HAL_ADC_MspInit+0x108>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239c:	4a26      	ldr	r2, [pc, #152]	@ (8002438 <HAL_ADC_MspInit+0x108>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_ADC_MspInit+0x108>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023b0:	2301      	movs	r3, #1
 80023b2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b4:	2303      	movs	r3, #3
 80023b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c6:	f003 fb71 	bl	8005aac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002440 <HAL_ADC_MspInit+0x110>)
 80023ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023d2:	2205      	movs	r2, #5
 80023d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023f8:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 80023fa:	2220      	movs	r2, #32
 80023fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023fe:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002404:	480d      	ldr	r0, [pc, #52]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 8002406:	f003 f811 	bl	800542c <HAL_DMA_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002410:	f7ff ff64 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a09      	ldr	r2, [pc, #36]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 8002418:	655a      	str	r2, [r3, #84]	@ 0x54
 800241a:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_ADC_MspInit+0x10c>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	2012      	movs	r0, #18
 8002426:	f002 fbbc 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800242a:	2012      	movs	r0, #18
 800242c:	f002 fbd3 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002430:	bf00      	nop
 8002432:	3768      	adds	r7, #104	@ 0x68
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	20000750 	.word	0x20000750
 8002440:	40020058 	.word	0x40020058

08002444 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2f      	ldr	r2, [pc, #188]	@ (8002520 <HAL_DAC_MspInit+0xdc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d157      	bne.n	8002516 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002466:	4b2f      	ldr	r3, [pc, #188]	@ (8002524 <HAL_DAC_MspInit+0xe0>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a2e      	ldr	r2, [pc, #184]	@ (8002524 <HAL_DAC_MspInit+0xe0>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <HAL_DAC_MspInit+0xe0>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_DAC_MspInit+0xe0>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <HAL_DAC_MspInit+0xe0>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248a:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_DAC_MspInit+0xe0>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002496:	2310      	movs	r3, #16
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249a:	2303      	movs	r3, #3
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ac:	f003 fafe 	bl	8005aac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024b2:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <HAL_DAC_MspInit+0xe8>)
 80024b4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024b8:	2206      	movs	r2, #6
 80024ba:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024be:	2210      	movs	r2, #16
 80024c0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024c8:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024ca:	2280      	movs	r2, #128	@ 0x80
 80024cc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ce:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80024de:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024e0:	2220      	movs	r2, #32
 80024e2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80024ea:	480f      	ldr	r0, [pc, #60]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024ec:	f002 ff9e 	bl	800542c <HAL_DMA_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80024f6:	f7ff fef1 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_DAC_MspInit+0xe4>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2036      	movs	r0, #54	@ 0x36
 800250c:	f002 fb49 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002510:	2036      	movs	r0, #54	@ 0x36
 8002512:	f002 fb60 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	50000800 	.word	0x50000800
 8002524:	40021000 	.word	0x40021000
 8002528:	200007c4 	.word	0x200007c4
 800252c:	40020030 	.word	0x40020030

08002530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b09c      	sub	sp, #112	@ 0x70
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002548:	f107 0318 	add.w	r3, r7, #24
 800254c:	2244      	movs	r2, #68	@ 0x44
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f009 ffaa 	bl	800c4aa <memset>
  if(hi2c->Instance==I2C1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a4a      	ldr	r2, [pc, #296]	@ (8002684 <HAL_I2C_MspInit+0x154>)
 800255c:	4293      	cmp	r3, r2
 800255e:	f040 808d 	bne.w	800267c <HAL_I2C_MspInit+0x14c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002562:	2340      	movs	r3, #64	@ 0x40
 8002564:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256a:	f107 0318 	add.w	r3, r7, #24
 800256e:	4618      	mov	r0, r3
 8002570:	f006 f8c2 	bl	80086f8 <HAL_RCCEx_PeriphCLKConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800257a:	f7ff feaf 	bl	80022dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b42      	ldr	r3, [pc, #264]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002582:	4a41      	ldr	r2, [pc, #260]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258a:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a3b      	ldr	r2, [pc, #236]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a2:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b4:	2312      	movs	r3, #18
 80025b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025c0:	2304      	movs	r3, #4
 80025c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025c8:	4619      	mov	r1, r3
 80025ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ce:	f003 fa6d 	bl	8005aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d6:	2312      	movs	r3, #18
 80025d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e2:	2304      	movs	r3, #4
 80025e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025ea:	4619      	mov	r1, r3
 80025ec:	4827      	ldr	r0, [pc, #156]	@ (800268c <HAL_I2C_MspInit+0x15c>)
 80025ee:	f003 fa5d 	bl	8005aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f2:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	4a24      	ldr	r2, [pc, #144]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 80025f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80025fe:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <HAL_I2C_MspInit+0x158>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 800260c:	4a21      	ldr	r2, [pc, #132]	@ (8002694 <HAL_I2C_MspInit+0x164>)
 800260e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002612:	2211      	movs	r2, #17
 8002614:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002616:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002618:	2210      	movs	r2, #16
 800261a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261c:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002624:	2280      	movs	r2, #128	@ 0x80
 8002626:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002640:	4813      	ldr	r0, [pc, #76]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002642:	f002 fef3 	bl	800542c <HAL_DMA_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 800264c:	f7ff fe46 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a0f      	ldr	r2, [pc, #60]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002654:	639a      	str	r2, [r3, #56]	@ 0x38
 8002656:	4a0e      	ldr	r2, [pc, #56]	@ (8002690 <HAL_I2C_MspInit+0x160>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	201f      	movs	r0, #31
 8002662:	f002 fa9e 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002666:	201f      	movs	r0, #31
 8002668:	f002 fab5 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	2020      	movs	r0, #32
 8002672:	f002 fa96 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002676:	2020      	movs	r0, #32
 8002678:	f002 faad 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800267c:	bf00      	nop
 800267e:	3770      	adds	r7, #112	@ 0x70
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40005400 	.word	0x40005400
 8002688:	40021000 	.word	0x40021000
 800268c:	48000400 	.word	0x48000400
 8002690:	20000878 	.word	0x20000878
 8002694:	40020044 	.word	0x40020044

08002698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	@ (8002858 <HAL_TIM_Base_MspInit+0x1c0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f040 808b 	bne.w	80027d2 <HAL_TIM_Base_MspInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026bc:	4b67      	ldr	r3, [pc, #412]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80026be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c0:	4a66      	ldr	r2, [pc, #408]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80026c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026c8:	4b64      	ldr	r3, [pc, #400]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b61      	ldr	r3, [pc, #388]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d8:	4a60      	ldr	r2, [pc, #384]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e0:	4b5e      	ldr	r3, [pc, #376]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026fe:	2306      	movs	r3, #6
 8002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	4619      	mov	r1, r3
 8002708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800270c:	f003 f9ce 	bl	8005aac <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002710:	4b53      	ldr	r3, [pc, #332]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002712:	4a54      	ldr	r2, [pc, #336]	@ (8002864 <HAL_TIM_Base_MspInit+0x1cc>)
 8002714:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002716:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002718:	222a      	movs	r2, #42	@ 0x2a
 800271a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271c:	4b50      	ldr	r3, [pc, #320]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002728:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800272e:	4b4c      	ldr	r3, [pc, #304]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002734:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002738:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800273c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800273e:	4b48      	ldr	r3, [pc, #288]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002740:	2220      	movs	r2, #32
 8002742:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002744:	4b46      	ldr	r3, [pc, #280]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002746:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800274a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800274c:	4844      	ldr	r0, [pc, #272]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 800274e:	f002 fe6d 	bl	800542c <HAL_DMA_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 8002758:	f7ff fdc0 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24
 8002762:	4a3f      	ldr	r2, [pc, #252]	@ (8002860 <HAL_TIM_Base_MspInit+0x1c8>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8002768:	4b3f      	ldr	r3, [pc, #252]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 800276a:	4a40      	ldr	r2, [pc, #256]	@ (800286c <HAL_TIM_Base_MspInit+0x1d4>)
 800276c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 800276e:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 8002770:	222b      	movs	r2, #43	@ 0x2b
 8002772:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002774:	4b3c      	ldr	r3, [pc, #240]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002780:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 8002782:	2280      	movs	r2, #128	@ 0x80
 8002784:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002786:	4b38      	ldr	r3, [pc, #224]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 8002788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 8002790:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002794:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002796:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 8002798:	2220      	movs	r2, #32
 800279a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800279c:	4b32      	ldr	r3, [pc, #200]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 800279e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80027a4:	4830      	ldr	r0, [pc, #192]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 80027a6:	f002 fe41 	bl	800542c <HAL_DMA_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_TIM_Base_MspInit+0x11c>
    {
      Error_Handler();
 80027b0:	f7ff fd94 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 80027b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80027ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d0>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	201b      	movs	r0, #27
 80027c6:	f002 f9ec 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80027ca:	201b      	movs	r0, #27
 80027cc:	f002 fa03 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027d0:	e03e      	b.n	8002850 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027da:	d10c      	bne.n	80027f6 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027dc:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e8:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
}
 80027f4:	e02c      	b.n	8002850 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_TIM_Base_MspInit+0x1d8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d127      	bne.n	8002850 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002800:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002804:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6593      	str	r3, [r2, #88]	@ 0x58
 800280c:	4b13      	ldr	r3, [pc, #76]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281c:	4a0f      	ldr	r2, [pc, #60]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002824:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <HAL_TIM_Base_MspInit+0x1c4>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002830:	2340      	movs	r3, #64	@ 0x40
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002840:	2302      	movs	r3, #2
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	480a      	ldr	r0, [pc, #40]	@ (8002874 <HAL_TIM_Base_MspInit+0x1dc>)
 800284c:	f003 f92e 	bl	8005aac <HAL_GPIO_Init>
}
 8002850:	bf00      	nop
 8002852:	3730      	adds	r7, #48	@ 0x30
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40021000 	.word	0x40021000
 8002860:	200009bc 	.word	0x200009bc
 8002864:	40020008 	.word	0x40020008
 8002868:	20000a1c 	.word	0x20000a1c
 800286c:	4002001c 	.word	0x4002001c
 8002870:	40000800 	.word	0x40000800
 8002874:	48000400 	.word	0x48000400

08002878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b09a      	sub	sp, #104	@ 0x68
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	2244      	movs	r2, #68	@ 0x44
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f009 fe06 	bl	800c4aa <memset>
  if(huart->Instance==USART2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a49      	ldr	r2, [pc, #292]	@ (80029c8 <HAL_UART_MspInit+0x150>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	f040 808a 	bne.w	80029be <HAL_UART_MspInit+0x146>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028aa:	2302      	movs	r3, #2
 80028ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b2:	f107 0310 	add.w	r3, r7, #16
 80028b6:	4618      	mov	r0, r3
 80028b8:	f005 ff1e 	bl	80086f8 <HAL_RCCEx_PeriphCLKConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028c2:	f7ff fd0b 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c6:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_UART_MspInit+0x154>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	4a40      	ldr	r2, [pc, #256]	@ (80029cc <HAL_UART_MspInit+0x154>)
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d2:	4b3e      	ldr	r3, [pc, #248]	@ (80029cc <HAL_UART_MspInit+0x154>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <HAL_UART_MspInit+0x154>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4a3a      	ldr	r2, [pc, #232]	@ (80029cc <HAL_UART_MspInit+0x154>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ea:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <HAL_UART_MspInit+0x154>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80028f6:	230c      	movs	r3, #12
 80028f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002906:	2307      	movs	r3, #7
 8002908:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800290e:	4619      	mov	r1, r3
 8002910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002914:	f003 f8ca 	bl	8005aac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel2;
 8002918:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 800291a:	4a2e      	ldr	r2, [pc, #184]	@ (80029d4 <HAL_UART_MspInit+0x15c>)
 800291c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800291e:	4b2c      	ldr	r3, [pc, #176]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002920:	221a      	movs	r2, #26
 8002922:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002924:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002930:	4b27      	ldr	r3, [pc, #156]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002932:	2280      	movs	r2, #128	@ 0x80
 8002934:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002936:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002938:	2200      	movs	r2, #0
 800293a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293c:	4b24      	ldr	r3, [pc, #144]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002944:	2220      	movs	r2, #32
 8002946:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002948:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 800294a:	2200      	movs	r2, #0
 800294c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800294e:	4820      	ldr	r0, [pc, #128]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002950:	f002 fd6c 	bl	800542c <HAL_DMA_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800295a:	f7ff fcbf 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_UART_MspInit+0x158>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Channel1;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <HAL_UART_MspInit+0x164>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 8002974:	221b      	movs	r2, #27
 8002976:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002978:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 800297a:	2210      	movs	r2, #16
 800297c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029a2:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 80029a4:	f002 fd42 	bl	800542c <HAL_DMA_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80029ae:	f7ff fc95 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 80029b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_UART_MspInit+0x160>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80029be:	bf00      	nop
 80029c0:	3768      	adds	r7, #104	@ 0x68
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40004400 	.word	0x40004400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	20000b10 	.word	0x20000b10
 80029d4:	4002041c 	.word	0x4002041c
 80029d8:	20000b70 	.word	0x20000b70
 80029dc:	40020408 	.word	0x40020408

080029e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <NMI_Handler+0x4>

080029e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <HardFault_Handler+0x4>

080029f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <MemManage_Handler+0x4>

080029f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <BusFault_Handler+0x4>

08002a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <UsageFault_Handler+0x4>

08002a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a36:	f000 f9cf 	bl	8002dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <DMA1_Channel1_IRQHandler+0x10>)
 8002a46:	f002 fed4 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200009bc 	.word	0x200009bc

08002a54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002a58:	4802      	ldr	r0, [pc, #8]	@ (8002a64 <DMA1_Channel2_IRQHandler+0x10>)
 8002a5a:	f002 feca 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000a1c 	.word	0x20000a1c

08002a68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002a6c:	4802      	ldr	r0, [pc, #8]	@ (8002a78 <DMA1_Channel3_IRQHandler+0x10>)
 8002a6e:	f002 fec0 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200007c4 	.word	0x200007c4

08002a7c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002a80:	4802      	ldr	r0, [pc, #8]	@ (8002a8c <DMA1_Channel4_IRQHandler+0x10>)
 8002a82:	f002 feb6 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000878 	.word	0x20000878

08002a90 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <DMA1_Channel5_IRQHandler+0x10>)
 8002a96:	f002 feac 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000750 	.word	0x20000750

08002aa4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <ADC1_2_IRQHandler+0x10>)
 8002aaa:	f000 fe73 	bl	8003794 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200006e4 	.word	0x200006e4

08002ab8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002abc:	4802      	ldr	r0, [pc, #8]	@ (8002ac8 <TIM1_CC_IRQHandler+0x10>)
 8002abe:	f006 fc4d 	bl	800935c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200008d8 	.word	0x200008d8

08002acc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	@ (8002adc <I2C1_EV_IRQHandler+0x10>)
 8002ad2:	f003 fb35 	bl	8006140 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000824 	.word	0x20000824

08002ae0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <I2C1_ER_IRQHandler+0x10>)
 8002ae6:	f003 fb45 	bl	8006174 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000824 	.word	0x20000824

08002af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002af8:	4802      	ldr	r0, [pc, #8]	@ (8002b04 <TIM6_DAC_IRQHandler+0x10>)
 8002afa:	f002 f9ca 	bl	8004e92 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200007b0 	.word	0x200007b0

08002b08 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b0c:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <DMA2_Channel1_IRQHandler+0x10>)
 8002b0e:	f002 fe70 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000b70 	.word	0x20000b70

08002b1c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b20:	4802      	ldr	r0, [pc, #8]	@ (8002b2c <DMA2_Channel2_IRQHandler+0x10>)
 8002b22:	f002 fe66 	bl	80057f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000b10 	.word	0x20000b10

08002b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return 1;
 8002b34:	2301      	movs	r3, #1
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_kill>:

int _kill(int pid, int sig)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b4a:	f009 fd0d 	bl	800c568 <__errno>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2216      	movs	r2, #22
 8002b52:	601a      	str	r2, [r3, #0]
  return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_exit>:

void _exit (int status)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffe7 	bl	8002b40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b72:	bf00      	nop
 8002b74:	e7fd      	b.n	8002b72 <_exit+0x12>

08002b76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e00a      	b.n	8002b9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b88:	f3af 8000 	nop.w
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	60ba      	str	r2, [r7, #8]
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbf0      	blt.n	8002b88 <_read+0x12>
  }

  return len;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e009      	b.n	8002bd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	60ba      	str	r2, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dbf1      	blt.n	8002bc2 <_write+0x12>
  }
  return len;
 8002bde:	687b      	ldr	r3, [r7, #4]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_close>:

int _close(int file)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c10:	605a      	str	r2, [r3, #4]
  return 0;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_isatty>:

int _isatty(int file)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b085      	sub	sp, #20
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <_sbrk+0x5c>)
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <_sbrk+0x60>)
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <_sbrk+0x64>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <_sbrk+0x68>)
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d207      	bcs.n	8002c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c80:	f009 fc72 	bl	800c568 <__errno>
 8002c84:	4603      	mov	r3, r0
 8002c86:	220c      	movs	r2, #12
 8002c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e009      	b.n	8002ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_sbrk+0x64>)
 8002ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20008000 	.word	0x20008000
 8002cb0:	00000400 	.word	0x00000400
 8002cb4:	20001598 	.word	0x20001598
 8002cb8:	200018b0 	.word	0x200018b0

08002cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <SystemInit+0x20>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <SystemInit+0x20>)
 8002cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce0:	480d      	ldr	r0, [pc, #52]	@ (8002d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ce2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce4:	f7ff ffea 	bl	8002cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002cea:	490d      	ldr	r1, [pc, #52]	@ (8002d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <LoopForever+0xe>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d00:	4c0a      	ldr	r4, [pc, #40]	@ (8002d2c <LoopForever+0x16>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002d0e:	f009 fc31 	bl	800c574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d12:	f7fe fddd 	bl	80018d0 <main>

08002d16 <LoopForever>:

LoopForever:
    b LoopForever
 8002d16:	e7fe      	b.n	8002d16 <LoopForever>
  ldr   r0, =_estack
 8002d18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 8002d24:	08011e9c 	.word	0x08011e9c
  ldr r2, =_sbss
 8002d28:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 8002d2c:	200018ac 	.word	0x200018ac

08002d30 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <COMP1_2_3_IRQHandler>

08002d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f001 ff25 	bl	8004b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d42:	2000      	movs	r0, #0
 8002d44:	f000 f80e 	bl	8002d64 <HAL_InitTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	71fb      	strb	r3, [r7, #7]
 8002d52:	e001      	b.n	8002d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d54:	f7ff fac8 	bl	80022e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d58:	79fb      	ldrb	r3, [r7, #7]

}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d70:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_InitTick+0x68>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d022      	beq.n	8002dbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d78:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_InitTick+0x6c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <HAL_InitTick+0x68>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 ff30 	bl	8004bf2 <HAL_SYSTICK_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d809      	bhi.n	8002db2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	f04f 30ff 	mov.w	r0, #4294967295
 8002da6:	f001 fefc 	bl	8004ba2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002daa:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <HAL_InitTick+0x70>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e007      	b.n	8002dc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e004      	b.n	8002dc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e001      	b.n	8002dc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000010 	.word	0x20000010
 8002dd0:	20000008 	.word	0x20000008
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <HAL_IncTick+0x1c>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_IncTick+0x20>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a03      	ldr	r2, [pc, #12]	@ (8002df4 <HAL_IncTick+0x1c>)
 8002de8:	6013      	str	r3, [r2, #0]
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	2000159c 	.word	0x2000159c
 8002df8:	20000010 	.word	0x20000010

08002dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002e00:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <HAL_GetTick+0x14>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	2000159c 	.word	0x2000159c

08002e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff ffee 	bl	8002dfc <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d004      	beq.n	8002e38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_Delay+0x40>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4413      	add	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e38:	bf00      	nop
 8002e3a:	f7ff ffdf 	bl	8002dfc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d8f7      	bhi.n	8002e3a <HAL_Delay+0x26>
  {
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000010 	.word	0x20000010

08002e58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3360      	adds	r3, #96	@ 0x60
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <LL_ADC_SetOffset+0x44>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	03fff000 	.word	0x03fff000

08002f08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3360      	adds	r3, #96	@ 0x60
 8002f16:	461a      	mov	r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3360      	adds	r3, #96	@ 0x60
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3360      	adds	r3, #96	@ 0x60
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3360      	adds	r3, #96	@ 0x60
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	615a      	str	r2, [r3, #20]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003022:	b480      	push	{r7}
 8003024:	b087      	sub	sp, #28
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3330      	adds	r3, #48	@ 0x30
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	4413      	add	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	211f      	movs	r1, #31
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	401a      	ands	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	f003 011f 	and.w	r1, r3, #31
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	431a      	orrs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3314      	adds	r3, #20
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0e5b      	lsrs	r3, r3, #25
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	4413      	add	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	0d1b      	lsrs	r3, r3, #20
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2107      	movs	r1, #7
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	401a      	ands	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	0d1b      	lsrs	r3, r3, #20
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0318 	and.w	r3, r3, #24
 800311a:	4908      	ldr	r1, [pc, #32]	@ (800313c <LL_ADC_SetChannelSingleDiff+0x44>)
 800311c:	40d9      	lsrs	r1, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	400b      	ands	r3, r1
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	0007ffff 	.word	0x0007ffff

08003140 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 031f 	and.w	r3, r3, #31
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003188:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6093      	str	r3, [r2, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003200:	d101      	bne.n	8003206 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003224:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003250:	f043 0202 	orr.w	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <LL_ADC_IsEnabled+0x18>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <LL_ADC_IsEnabled+0x1a>
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d101      	bne.n	80032a2 <LL_ADC_IsDisableOngoing+0x18>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <LL_ADC_IsDisableOngoing+0x1a>
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d101      	bne.n	80032f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d101      	bne.n	8003316 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b089      	sub	sp, #36	@ 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e167      	b.n	800360e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fe ffef 	bl	8002330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff19 	bl	800319c <LL_ADC_IsDeepPowerDownEnabled>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff feff 	bl	8003178 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff34 	bl	80031ec <LL_ADC_IsInternalRegulatorEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff18 	bl	80031c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003394:	4ba0      	ldr	r3, [pc, #640]	@ (8003618 <HAL_ADC_Init+0x2f4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	4aa0      	ldr	r2, [pc, #640]	@ (800361c <HAL_ADC_Init+0x2f8>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	3301      	adds	r3, #1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033a8:	e002      	b.n	80033b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff16 	bl	80031ec <LL_ADC_IsInternalRegulatorEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff76 	bl	80032d8 <LL_ADC_REG_IsConversionOngoing>
 80033ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 8100 	bne.w	80035fc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 80fc 	bne.w	80035fc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800340c:	f043 0202 	orr.w	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff23 	bl	8003264 <LL_ADC_IsEnabled>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003424:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003428:	f7ff ff1c 	bl	8003264 <LL_ADC_IsEnabled>
 800342c:	4604      	mov	r4, r0
 800342e:	487c      	ldr	r0, [pc, #496]	@ (8003620 <HAL_ADC_Init+0x2fc>)
 8003430:	f7ff ff18 	bl	8003264 <LL_ADC_IsEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	4323      	orrs	r3, r4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	4878      	ldr	r0, [pc, #480]	@ (8003624 <HAL_ADC_Init+0x300>)
 8003444:	f7ff fd08 	bl	8002e58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7f5b      	ldrb	r3, [r3, #29]
 800344c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003452:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003458:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800345e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003466:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003472:	2b01      	cmp	r3, #1
 8003474:	d106      	bne.n	8003484 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	045b      	lsls	r3, r3, #17
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b60      	ldr	r3, [pc, #384]	@ (8003628 <HAL_ADC_Init+0x304>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff15 	bl	80032fe <LL_ADC_INJ_IsConversionOngoing>
 80034d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d16d      	bne.n	80035b8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d16a      	bne.n	80035b8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034fe:	f023 0302 	bic.w	r3, r3, #2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	430b      	orrs	r3, r1
 800350a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003522:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800352c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003530:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6911      	ldr	r1, [r2, #16]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003542:	e013      	b.n	800356c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003552:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003564:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003568:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003572:	2b01      	cmp	r3, #1
 8003574:	d118      	bne.n	80035a8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003598:	430a      	orrs	r2, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e007      	b.n	80035b8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10c      	bne.n	80035da <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f023 010f 	bic.w	r1, r3, #15
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d8:	e007      	b.n	80035ea <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 020f 	bic.w	r2, r2, #15
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035fa:	e007      	b.n	800360c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	f043 0210 	orr.w	r2, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800360c:	7ffb      	ldrb	r3, [r7, #31]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	@ 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008
 800361c:	053e2d63 	.word	0x053e2d63
 8003620:	50000100 	.word	0x50000100
 8003624:	50000300 	.word	0x50000300
 8003628:	fff04007 	.word	0xfff04007

0800362c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003638:	4851      	ldr	r0, [pc, #324]	@ (8003780 <HAL_ADC_Start_DMA+0x154>)
 800363a:	f7ff fd81 	bl	8003140 <LL_ADC_GetMultimode>
 800363e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fe47 	bl	80032d8 <LL_ADC_REG_IsConversionOngoing>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 808f 	bne.w	8003770 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_ADC_Start_DMA+0x34>
 800365c:	2302      	movs	r3, #2
 800365e:	e08a      	b.n	8003776 <HAL_ADC_Start_DMA+0x14a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d002      	beq.n	800367a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b09      	cmp	r3, #9
 8003678:	d173      	bne.n	8003762 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 feb2 	bl	80043e4 <ADC_Enable>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d166      	bne.n	8003758 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a38      	ldr	r2, [pc, #224]	@ (8003784 <HAL_ADC_Start_DMA+0x158>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d002      	beq.n	80036ae <HAL_ADC_Start_DMA+0x82>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	e001      	b.n	80036b2 <HAL_ADC_Start_DMA+0x86>
 80036ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036dc:	f023 0206 	bic.w	r2, r3, #6
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80036e4:	e002      	b.n	80036ec <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	4a25      	ldr	r2, [pc, #148]	@ (8003788 <HAL_ADC_Start_DMA+0x15c>)
 80036f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	4a24      	ldr	r2, [pc, #144]	@ (800378c <HAL_ADC_Start_DMA+0x160>)
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	4a23      	ldr	r2, [pc, #140]	@ (8003790 <HAL_ADC_Start_DMA+0x164>)
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	221c      	movs	r2, #28
 800370a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0210 	orr.w	r2, r2, #16
 8003722:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3340      	adds	r3, #64	@ 0x40
 800373e:	4619      	mov	r1, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f001 ff1a 	bl	800557c <HAL_DMA_Start_IT>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fdad 	bl	80032b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003756:	e00d      	b.n	8003774 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003760:	e008      	b.n	8003774 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800376e:	e001      	b.n	8003774 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	50000300 	.word	0x50000300
 8003784:	50000100 	.word	0x50000100
 8003788:	080045af 	.word	0x080045af
 800378c:	08004687 	.word	0x08004687
 8003790:	080046a3 	.word	0x080046a3

08003794 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b0:	4883      	ldr	r0, [pc, #524]	@ (80039c0 <HAL_ADC_IRQHandler+0x22c>)
 80037b2:	f7ff fcc5 	bl	8003140 <LL_ADC_GetMultimode>
 80037b6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x5e>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 f853 	bl	8004890 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_ADC_IRQHandler+0x72>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8085 	beq.w	800391c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d07f      	beq.n	800391c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fbdf 	bl	8002ffc <LL_ADC_REG_IsTriggerSourceSWStart>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d064      	beq.n	800390e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5e      	ldr	r2, [pc, #376]	@ (80039c4 <HAL_ADC_IRQHandler+0x230>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d002      	beq.n	8003854 <HAL_ADC_IRQHandler+0xc0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e001      	b.n	8003858 <HAL_ADC_IRQHandler+0xc4>
 8003854:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	4293      	cmp	r3, r2
 800385e:	d008      	beq.n	8003872 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d002      	beq.n	8003872 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b09      	cmp	r3, #9
 8003870:	d104      	bne.n	800387c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	e00d      	b.n	8003898 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a50      	ldr	r2, [pc, #320]	@ (80039c4 <HAL_ADC_IRQHandler+0x230>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d002      	beq.n	800388c <HAL_ADC_IRQHandler+0xf8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	e001      	b.n	8003890 <HAL_ADC_IRQHandler+0xfc>
 800388c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003890:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d135      	bne.n	800390e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d12e      	bne.n	800390e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fd0f 	bl	80032d8 <LL_ADC_REG_IsConversionOngoing>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11a      	bne.n	80038f6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 020c 	bic.w	r2, r2, #12
 80038ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d112      	bne.n	800390e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038f4:	e00b      	b.n	800390e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f043 0210 	orr.w	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe fcd2 	bl	80022b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	220c      	movs	r2, #12
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_ADC_IRQHandler+0x19c>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 809e 	beq.w	8003a78 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8098 	beq.w	8003a78 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fb88 	bl	800307a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800396a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fb43 	bl	8002ffc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003976:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a11      	ldr	r2, [pc, #68]	@ (80039c4 <HAL_ADC_IRQHandler+0x230>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d002      	beq.n	8003988 <HAL_ADC_IRQHandler+0x1f4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	e001      	b.n	800398c <HAL_ADC_IRQHandler+0x1f8>
 8003988:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	4293      	cmp	r3, r2
 8003992:	d008      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b06      	cmp	r3, #6
 800399e:	d002      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b07      	cmp	r3, #7
 80039a4:	d104      	bne.n	80039b0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	e011      	b.n	80039d4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a03      	ldr	r2, [pc, #12]	@ (80039c4 <HAL_ADC_IRQHandler+0x230>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d006      	beq.n	80039c8 <HAL_ADC_IRQHandler+0x234>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	e005      	b.n	80039cc <HAL_ADC_IRQHandler+0x238>
 80039c0:	50000300 	.word	0x50000300
 80039c4:	50000100 	.word	0x50000100
 80039c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039cc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d047      	beq.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x260>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d03f      	beq.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13a      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d133      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d12e      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fc74 	bl	80032fe <LL_ADC_INJ_IsConversionOngoing>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11a      	bne.n	8003a52 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a2a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d112      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a50:	e00b      	b.n	8003a6a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fee8 	bl	8004840 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2260      	movs	r2, #96	@ 0x60
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d011      	beq.n	8003aa6 <HAL_ADC_IRQHandler+0x312>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f89f 	bl	8003bdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2280      	movs	r2, #128	@ 0x80
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <HAL_ADC_IRQHandler+0x342>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fece 	bl	8004868 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x372>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fec0 	bl	800487c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d036      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x3ea>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d031      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003b22:	2301      	movs	r3, #1
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b26:	e014      	b.n	8003b52 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b2e:	4825      	ldr	r0, [pc, #148]	@ (8003bc4 <HAL_ADC_IRQHandler+0x430>)
 8003b30:	f7ff fb14 	bl	800315c <LL_ADC_GetMultiDMATransfer>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3e:	e008      	b.n	8003b52 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10e      	bne.n	8003b76 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b68:	f043 0202 	orr.w	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f83d 	bl	8003bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d018      	beq.n	8003bba <HAL_ADC_IRQHandler+0x426>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba2:	f043 0208 	orr.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fe4d 	bl	8004854 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003bba:	bf00      	nop
 8003bbc:	3728      	adds	r7, #40	@ 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	50000300 	.word	0x50000300

08003bc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0b6      	sub	sp, #216	@ 0xd8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x22>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e3c8      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x7b4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fb50 	bl	80032d8 <LL_ADC_REG_IsConversionOngoing>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 83ad 	bne.w	800439a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f7ff f9e8 	bl	8003022 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fb3e 	bl	80032d8 <LL_ADC_REG_IsConversionOngoing>
 8003c5c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fb4a 	bl	80032fe <LL_ADC_INJ_IsConversionOngoing>
 8003c6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 81d9 	bne.w	800402a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f040 81d4 	bne.w	800402a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c8a:	d10f      	bne.n	8003cac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7ff fa02 	bl	80030a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff f996 	bl	8002fd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003caa:	e00e      	b.n	8003cca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f7ff f9f1 	bl	80030a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff f986 	bl	8002fd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d022      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6919      	ldr	r1, [r3, #16]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cfc:	f7ff f8e0 	bl	8002ec0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6919      	ldr	r1, [r3, #16]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f7ff f92c 	bl	8002f6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d102      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x124>
 8003d22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d26:	e000      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x126>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7ff f938 	bl	8002fa0 <LL_ADC_SetOffsetSaturation>
 8003d30:	e17b      	b.n	800402a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f8e5 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x15a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff f8da 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	e01e      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x198>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f8cf 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1b0>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	e018      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x1e2>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e004      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d106      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f89e 	bl	8002f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f882 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x220>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f877 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 021f 	and.w	r2, r3, #31
 8003e22:	e01e      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x25e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f86c 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x276>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	e018      	b.n	8003eac <HAL_ADC_ConfigChannel+0x2a8>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e004      	b.n	8003eac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d106      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff f83b 	bl	8002f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff f81f 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x2e6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff f814 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	0e9b      	lsrs	r3, r3, #26
 8003ee4:	f003 021f 	and.w	r2, r3, #31
 8003ee8:	e01e      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x324>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff f809 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	e004      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x33c>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	e016      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x36a>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f4c:	fa93 f3a3 	rbit	r3, r3
 8003f50:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e004      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d106      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2102      	movs	r1, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe ffda 	bl	8002f34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2103      	movs	r1, #3
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe ffbe 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x3a8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2103      	movs	r1, #3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe ffb3 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	0e9b      	lsrs	r3, r3, #26
 8003fa6:	f003 021f 	and.w	r2, r3, #31
 8003faa:	e017      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x3d8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2103      	movs	r1, #3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe ffa8 	bl	8002f08 <LL_ADC_GetOffsetChannel>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003fc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fc6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e003      	b.n	8003fda <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x3f0>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	0e9b      	lsrs	r3, r3, #26
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	e011      	b.n	8004018 <HAL_ADC_ConfigChannel+0x414>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004004:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004018:	429a      	cmp	r2, r3
 800401a:	d106      	bne.n	800402a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	2103      	movs	r1, #3
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe ff85 	bl	8002f34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff f918 	bl	8003264 <LL_ADC_IsEnabled>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 8140 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	f7ff f855 	bl	80030f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4a8f      	ldr	r2, [pc, #572]	@ (8004290 <HAL_ADC_ConfigChannel+0x68c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f040 8131 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x47e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	0e9b      	lsrs	r3, r3, #26
 8004070:	3301      	adds	r3, #1
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2b09      	cmp	r3, #9
 8004078:	bf94      	ite	ls
 800407a:	2301      	movls	r3, #1
 800407c:	2300      	movhi	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e019      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x4b2>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004092:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800409a:	2320      	movs	r3, #32
 800409c:	e003      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800409e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d079      	beq.n	80041ae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x4d2>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	3301      	adds	r3, #1
 80040ce:	069b      	lsls	r3, r3, #26
 80040d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040d4:	e015      	b.n	8004102 <HAL_ADC_ConfigChannel+0x4fe>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80040e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80040e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80040ee:	2320      	movs	r3, #32
 80040f0:	e003      	b.n	80040fa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	fab3 f383 	clz	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	069b      	lsls	r3, r3, #26
 80040fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x51e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	3301      	adds	r3, #1
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2101      	movs	r1, #1
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	e017      	b.n	8004152 <HAL_ADC_ConfigChannel+0x54e>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004132:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800413a:	2320      	movs	r3, #32
 800413c:	e003      	b.n	8004146 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800413e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3301      	adds	r3, #1
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	ea42 0103 	orr.w	r1, r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x574>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	3301      	adds	r3, #1
 800416a:	f003 021f 	and.w	r2, r3, #31
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	051b      	lsls	r3, r3, #20
 8004176:	e018      	b.n	80041aa <HAL_ADC_ConfigChannel+0x5a6>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e003      	b.n	800419c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3301      	adds	r3, #1
 800419e:	f003 021f 	and.w	r2, r3, #31
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041aa:	430b      	orrs	r3, r1
 80041ac:	e081      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x5c6>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	0e9b      	lsrs	r3, r3, #26
 80041c0:	3301      	adds	r3, #1
 80041c2:	069b      	lsls	r3, r3, #26
 80041c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c8:	e015      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x5f2>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e003      	b.n	80041ee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	069b      	lsls	r3, r3, #26
 80041f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x612>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	3301      	adds	r3, #1
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	e017      	b.n	8004246 <HAL_ADC_ConfigChannel+0x642>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	61fb      	str	r3, [r7, #28]
  return result;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800422e:	2320      	movs	r3, #32
 8004230:	e003      	b.n	800423a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	fab3 f383 	clz	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	ea42 0103 	orr.w	r1, r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x66e>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	0e9b      	lsrs	r3, r3, #26
 800425c:	3301      	adds	r3, #1
 800425e:	f003 021f 	and.w	r2, r3, #31
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	3b1e      	subs	r3, #30
 800426a:	051b      	lsls	r3, r3, #20
 800426c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004270:	e01e      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x6ac>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	613b      	str	r3, [r7, #16]
  return result;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800428a:	2320      	movs	r3, #32
 800428c:	e006      	b.n	800429c <HAL_ADC_ConfigChannel+0x698>
 800428e:	bf00      	nop
 8004290:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	3b1e      	subs	r3, #30
 80042aa:	051b      	lsls	r3, r3, #20
 80042ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b6:	4619      	mov	r1, r3
 80042b8:	f7fe fef2 	bl	80030a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b3f      	ldr	r3, [pc, #252]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d071      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c8:	483e      	ldr	r0, [pc, #248]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80042ca:	f7fe fdeb 	bl	8002ea4 <LL_ADC_GetCommonPathInternalCh>
 80042ce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	@ (80043c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_ADC_ConfigChannel+0x6e2>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3a      	ldr	r2, [pc, #232]	@ (80043cc <HAL_ADC_ConfigChannel+0x7c8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d127      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d121      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042fa:	d157      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004300:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004304:	4619      	mov	r1, r3
 8004306:	482f      	ldr	r0, [pc, #188]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004308:	f7fe fdb9 	bl	8002e7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800430c:	4b30      	ldr	r3, [pc, #192]	@ (80043d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	4a30      	ldr	r2, [pc, #192]	@ (80043d4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004326:	e002      	b.n	800432e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3b01      	subs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f9      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004334:	e03a      	b.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a27      	ldr	r2, [pc, #156]	@ (80043d8 <HAL_ADC_ConfigChannel+0x7d4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d113      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a22      	ldr	r2, [pc, #136]	@ (80043dc <HAL_ADC_ConfigChannel+0x7d8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02a      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800435a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435e:	4619      	mov	r1, r3
 8004360:	4818      	ldr	r0, [pc, #96]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004362:	f7fe fd8c 	bl	8002e7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004366:	e021      	b.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d11c      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <HAL_ADC_ConfigChannel+0x7d8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d011      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800438c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004390:	4619      	mov	r1, r3
 8004392:	480c      	ldr	r0, [pc, #48]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004394:	f7fe fd73 	bl	8002e7e <LL_ADC_SetCommonPathInternalCh>
 8004398:	e008      	b.n	80043ac <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	37d8      	adds	r7, #216	@ 0xd8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	80080000 	.word	0x80080000
 80043c4:	50000300 	.word	0x50000300
 80043c8:	c3210000 	.word	0xc3210000
 80043cc:	90c00010 	.word	0x90c00010
 80043d0:	20000008 	.word	0x20000008
 80043d4:	053e2d63 	.word	0x053e2d63
 80043d8:	c7520000 	.word	0xc7520000
 80043dc:	50000100 	.word	0x50000100
 80043e0:	cb840000 	.word	0xcb840000

080043e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe ff35 	bl	8003264 <LL_ADC_IsEnabled>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d169      	bne.n	80044d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <ADC_Enable+0xfc>)
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004412:	f043 0210 	orr.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e055      	b.n	80044d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fef0 	bl	8003214 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004434:	482b      	ldr	r0, [pc, #172]	@ (80044e4 <ADC_Enable+0x100>)
 8004436:	f7fe fd35 	bl	8002ea4 <LL_ADC_GetCommonPathInternalCh>
 800443a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800443c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004444:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <ADC_Enable+0x104>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	4a28      	ldr	r2, [pc, #160]	@ (80044ec <ADC_Enable+0x108>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800445e:	e002      	b.n	8004466 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3b01      	subs	r3, #1
 8004464:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f9      	bne.n	8004460 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800446c:	f7fe fcc6 	bl	8002dfc <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004472:	e028      	b.n	80044c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fef3 	bl	8003264 <LL_ADC_IsEnabled>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fec3 	bl	8003214 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800448e:	f7fe fcb5 	bl	8002dfc <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d914      	bls.n	80044c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d00d      	beq.n	80044c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	f043 0210 	orr.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f043 0201 	orr.w	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e007      	b.n	80044d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d1cf      	bne.n	8004474 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	8000003f 	.word	0x8000003f
 80044e4:	50000300 	.word	0x50000300
 80044e8:	20000008 	.word	0x20000008
 80044ec:	053e2d63 	.word	0x053e2d63

080044f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fec4 	bl	800328a <LL_ADC_IsDisableOngoing>
 8004502:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe feab 	bl	8003264 <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d047      	beq.n	80045a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d144      	bne.n	80045a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030d 	and.w	r3, r3, #13
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10c      	bne.n	8004542 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fe85 	bl	800323c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2203      	movs	r2, #3
 8004538:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800453a:	f7fe fc5f 	bl	8002dfc <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004540:	e029      	b.n	8004596 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f043 0210 	orr.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e023      	b.n	80045a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800455e:	f7fe fc4d 	bl	8002dfc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d914      	bls.n	8004596 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457e:	f043 0210 	orr.w	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e007      	b.n	80045a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1dc      	bne.n	800455e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d14b      	bne.n	8004660 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d021      	beq.n	8004626 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fd08 	bl	8002ffc <LL_ADC_REG_IsTriggerSourceSWStart>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d032      	beq.n	8004658 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d12b      	bne.n	8004658 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11f      	bne.n	8004658 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004624:	e018      	b.n	8004658 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d111      	bne.n	8004658 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7fd fe2d 	bl	80022b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800465e:	e00e      	b.n	800467e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fabf 	bl	8003bf0 <HAL_ADC_ErrorCallback>
}
 8004672:	e004      	b.n	800467e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fa97 	bl	8003bc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c0:	f043 0204 	orr.w	r2, r3, #4
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fa91 	bl	8003bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <LL_ADC_IsEnabled>:
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <LL_ADC_IsEnabled+0x18>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <LL_ADC_IsEnabled+0x1a>
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_ADC_StartCalibration>:
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800470e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004718:	4313      	orrs	r3, r2
 800471a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_ADC_IsCalibrationOnGoing>:
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800473e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004742:	d101      	bne.n	8004748 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_ADC_REG_IsConversionOngoing>:
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d101      	bne.n	800476e <LL_ADC_REG_IsConversionOngoing+0x18>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_ADCEx_Calibration_Start+0x1c>
 8004794:	2302      	movs	r3, #2
 8004796:	e04d      	b.n	8004834 <HAL_ADCEx_Calibration_Start+0xb8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fea5 	bl	80044f0 <ADC_Disable>
 80047a6:	4603      	mov	r3, r0
 80047a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d136      	bne.n	800481e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047b8:	f023 0302 	bic.w	r3, r3, #2
 80047bc:	f043 0202 	orr.w	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff96 	bl	80046fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047d0:	e014      	b.n	80047fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4a18      	ldr	r2, [pc, #96]	@ (800483c <HAL_ADCEx_Calibration_Start+0xc0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d90d      	bls.n	80047fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	f023 0312 	bic.w	r3, r3, #18
 80047e8:	f043 0210 	orr.w	r2, r3, #16
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e01b      	b.n	8004834 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff94 	bl	800472e <LL_ADC_IsCalibrationOnGoing>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e2      	bne.n	80047d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004810:	f023 0303 	bic.w	r3, r3, #3
 8004814:	f043 0201 	orr.w	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800481c:	e005      	b.n	800482a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	f043 0210 	orr.w	r2, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	0004de01 	.word	0x0004de01

08004840 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b0a1      	sub	sp, #132	@ 0x84
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048be:	2302      	movs	r3, #2
 80048c0:	e08b      	b.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80048ca:	2300      	movs	r3, #0
 80048cc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80048ce:	2300      	movs	r3, #0
 80048d0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048da:	d102      	bne.n	80048e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048dc:	4b41      	ldr	r3, [pc, #260]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	e001      	b.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e06a      	b.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff25 	bl	8004756 <LL_ADC_REG_IsConversionOngoing>
 800490c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff1f 	bl	8004756 <LL_ADC_REG_IsConversionOngoing>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d14c      	bne.n	80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800491e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004920:	2b00      	cmp	r3, #0
 8004922:	d149      	bne.n	80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004924:	4b30      	ldr	r3, [pc, #192]	@ (80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004926:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d028      	beq.n	8004982 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004942:	035b      	lsls	r3, r3, #13
 8004944:	430b      	orrs	r3, r1
 8004946:	431a      	orrs	r2, r3
 8004948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800494c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004950:	f7ff fec1 	bl	80046d6 <LL_ADC_IsEnabled>
 8004954:	4604      	mov	r4, r0
 8004956:	4823      	ldr	r0, [pc, #140]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004958:	f7ff febd 	bl	80046d6 <LL_ADC_IsEnabled>
 800495c:	4603      	mov	r3, r0
 800495e:	4323      	orrs	r3, r4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d133      	bne.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800496c:	f023 030f 	bic.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	6811      	ldr	r1, [r2, #0]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	6892      	ldr	r2, [r2, #8]
 8004978:	430a      	orrs	r2, r1
 800497a:	431a      	orrs	r2, r3
 800497c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800497e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004980:	e024      	b.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800498a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800498c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800498e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004992:	f7ff fea0 	bl	80046d6 <LL_ADC_IsEnabled>
 8004996:	4604      	mov	r4, r0
 8004998:	4812      	ldr	r0, [pc, #72]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800499a:	f7ff fe9c 	bl	80046d6 <LL_ADC_IsEnabled>
 800499e:	4603      	mov	r3, r0
 80049a0:	4323      	orrs	r3, r4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d112      	bne.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049ae:	f023 030f 	bic.w	r3, r3, #15
 80049b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80049b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049b6:	e009      	b.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80049ca:	e000      	b.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3784      	adds	r7, #132	@ 0x84
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}
 80049e2:	bf00      	nop
 80049e4:	50000100 	.word	0x50000100
 80049e8:	50000300 	.word	0x50000300

080049ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <__NVIC_SetPriorityGrouping+0x44>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a1e:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <__NVIC_SetPriorityGrouping+0x44>)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	60d3      	str	r3, [r2, #12]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <__NVIC_GetPriorityGrouping+0x18>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f003 0307 	and.w	r3, r3, #7
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	db0b      	blt.n	8004a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	4907      	ldr	r1, [pc, #28]	@ (8004a88 <__NVIC_EnableIRQ+0x38>)
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	2001      	movs	r0, #1
 8004a72:	fa00 f202 	lsl.w	r2, r0, r2
 8004a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	e000e100 	.word	0xe000e100

08004a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	db0a      	blt.n	8004ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	490c      	ldr	r1, [pc, #48]	@ (8004ad8 <__NVIC_SetPriority+0x4c>)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	0112      	lsls	r2, r2, #4
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	440b      	add	r3, r1
 8004ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab4:	e00a      	b.n	8004acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	4908      	ldr	r1, [pc, #32]	@ (8004adc <__NVIC_SetPriority+0x50>)
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	0112      	lsls	r2, r2, #4
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	440b      	add	r3, r1
 8004aca:	761a      	strb	r2, [r3, #24]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000e100 	.word	0xe000e100
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b089      	sub	sp, #36	@ 0x24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f1c3 0307 	rsb	r3, r3, #7
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	bf28      	it	cs
 8004afe:	2304      	movcs	r3, #4
 8004b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d902      	bls.n	8004b10 <NVIC_EncodePriority+0x30>
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3b03      	subs	r3, #3
 8004b0e:	e000      	b.n	8004b12 <NVIC_EncodePriority+0x32>
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	401a      	ands	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b28:	f04f 31ff 	mov.w	r1, #4294967295
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	43d9      	mvns	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b38:	4313      	orrs	r3, r2
         );
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3724      	adds	r7, #36	@ 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b58:	d301      	bcc.n	8004b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00f      	b.n	8004b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b88 <SysTick_Config+0x40>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b66:	210f      	movs	r1, #15
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	f7ff ff8e 	bl	8004a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <SysTick_Config+0x40>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b76:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <SysTick_Config+0x40>)
 8004b78:	2207      	movs	r2, #7
 8004b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	e000e010 	.word	0xe000e010

08004b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ff29 	bl	80049ec <__NVIC_SetPriorityGrouping>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	4603      	mov	r3, r0
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb0:	f7ff ff40 	bl	8004a34 <__NVIC_GetPriorityGrouping>
 8004bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff ff90 	bl	8004ae0 <NVIC_EncodePriority>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff5f 	bl	8004a8c <__NVIC_SetPriority>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff33 	bl	8004a50 <__NVIC_EnableIRQ>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffa4 	bl	8004b48 <SysTick_Config>
 8004c00:	4603      	mov	r3, r0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e014      	b.n	8004c46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	791b      	ldrb	r3, [r3, #4]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd fc09 	bl	8002444 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b2      	b.n	8004dce <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	795b      	ldrb	r3, [r3, #5]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_DAC_Start_DMA+0x24>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e0ac      	b.n	8004dce <HAL_DAC_Start_DMA+0x17e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d129      	bne.n	8004cda <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4a53      	ldr	r2, [pc, #332]	@ (8004dd8 <HAL_DAC_Start_DMA+0x188>)
 8004c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a52      	ldr	r2, [pc, #328]	@ (8004ddc <HAL_DAC_Start_DMA+0x18c>)
 8004c94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	4a51      	ldr	r2, [pc, #324]	@ (8004de0 <HAL_DAC_Start_DMA+0x190>)
 8004c9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_DAC_Start_DMA+0x6c>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d005      	beq.n	8004cc6 <HAL_DAC_Start_DMA+0x76>
 8004cba:	e009      	b.n	8004cd0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	61bb      	str	r3, [r7, #24]
        break;
 8004cc4:	e033      	b.n	8004d2e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	61bb      	str	r3, [r7, #24]
        break;
 8004cce:	e02e      	b.n	8004d2e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	61bb      	str	r3, [r7, #24]
        break;
 8004cd8:	e029      	b.n	8004d2e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4a41      	ldr	r2, [pc, #260]	@ (8004de4 <HAL_DAC_Start_DMA+0x194>)
 8004ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	4a40      	ldr	r2, [pc, #256]	@ (8004de8 <HAL_DAC_Start_DMA+0x198>)
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a3f      	ldr	r2, [pc, #252]	@ (8004dec <HAL_DAC_Start_DMA+0x19c>)
 8004cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d00:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_DAC_Start_DMA+0xc0>
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d005      	beq.n	8004d1a <HAL_DAC_Start_DMA+0xca>
 8004d0e:	e009      	b.n	8004d24 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	61bb      	str	r3, [r7, #24]
        break;
 8004d18:	e009      	b.n	8004d2e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3318      	adds	r3, #24
 8004d20:	61bb      	str	r3, [r7, #24]
        break;
 8004d22:	e004      	b.n	8004d2e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	331c      	adds	r3, #28
 8004d2a:	61bb      	str	r3, [r7, #24]
        break;
 8004d2c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6898      	ldr	r0, [r3, #8]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	f000 fc15 	bl	800557c <HAL_DMA_Start_IT>
 8004d52:	4603      	mov	r3, r0
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e010      	b.n	8004d7a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004d66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68d8      	ldr	r0, [r3, #12]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	f000 fc03 	bl	800557c <HAL_DMA_Start_IT>
 8004d76:	4603      	mov	r3, r0
 8004d78:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11c      	bne.n	8004dc0 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2201      	movs	r2, #1
 8004d94:	409a      	lsls	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d9e:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <HAL_DAC_Start_DMA+0x1a0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <HAL_DAC_Start_DMA+0x1a4>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	3301      	adds	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004db0:	e002      	b.n	8004db8 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f9      	bne.n	8004db2 <HAL_DAC_Start_DMA+0x162>
 8004dbe:	e005      	b.n	8004dcc <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f043 0204 	orr.w	r2, r3, #4
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	08005305 	.word	0x08005305
 8004ddc:	08005327 	.word	0x08005327
 8004de0:	08005343 	.word	0x08005343
 8004de4:	080053c1 	.word	0x080053c1
 8004de8:	080053e3 	.word	0x080053e3
 8004dec:	080053ff 	.word	0x080053ff
 8004df0:	20000008 	.word	0x20000008
 8004df4:	053e2d63 	.word	0x053e2d63

08004df8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e03e      	b.n	8004e8a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43da      	mvns	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	400a      	ands	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2201      	movs	r2, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43da      	mvns	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	400a      	ands	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fc0e 	bl	8005672 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00c      	b.n	8004e82 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fc00 	bl	8005672 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004e80:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01d      	beq.n	8004ef0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f043 0201 	orr.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f845 	bl	8004f7a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01d      	beq.n	8004f36 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d018      	beq.n	8004f36 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2204      	movs	r2, #4
 8004f08:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f043 0202 	orr.w	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004f1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fa3b 	bl	80053ac <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	@ 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_DAC_ConfigChannel+0x1c>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e1a1      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	795b      	ldrb	r3, [r3, #5]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_DAC_ConfigChannel+0x32>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e198      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x364>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d17a      	bne.n	80050cc <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004fd6:	f7fd ff11 	bl	8002dfc <HAL_GetTick>
 8004fda:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d13d      	bne.n	800505e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fe2:	e018      	b.n	8005016 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fe4:	f7fd ff0a 	bl	8002dfc <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d911      	bls.n	8005016 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f043 0208 	orr.w	r2, r3, #8
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2203      	movs	r2, #3
 8005010:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e16e      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1df      	bne.n	8004fe4 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40
 800502e:	e020      	b.n	8005072 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005030:	f7fd fee4 	bl	8002dfc <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	d90f      	bls.n	800505e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005044:	2b00      	cmp	r3, #0
 8005046:	da0a      	bge.n	800505e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f043 0208 	orr.w	r2, r3, #8
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2203      	movs	r2, #3
 8005058:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e14a      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	dbe3      	blt.n	8005030 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	ea02 0103 	and.w	r1, r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	21ff      	movs	r1, #255	@ 0xff
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	ea02 0103 	and.w	r1, r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d11d      	bne.n	8005110 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	221f      	movs	r2, #31
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ec:	4013      	ands	r3, r2
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005104:	4313      	orrs	r3, r2
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2207      	movs	r2, #7
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005128:	4013      	ands	r3, r2
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d102      	bne.n	800513a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005134:	2300      	movs	r3, #0
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	e00f      	b.n	800515a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d102      	bne.n	8005148 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005142:	2301      	movs	r3, #1
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	e008      	b.n	800515a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005150:	2301      	movs	r3, #1
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	e001      	b.n	800515a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	4013      	ands	r3, r2
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	791b      	ldrb	r3, [r3, #4]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d102      	bne.n	800518e <HAL_DAC_ConfigChannel+0x1fe>
 8005188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800518c:	e000      	b.n	8005190 <HAL_DAC_ConfigChannel+0x200>
 800518e:	2300      	movs	r3, #0
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	4013      	ands	r3, r2
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	795b      	ldrb	r3, [r3, #5]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d102      	bne.n	80051ba <HAL_DAC_ConfigChannel+0x22a>
 80051b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051b8:	e000      	b.n	80051bc <HAL_DAC_ConfigChannel+0x22c>
 80051ba:	2300      	movs	r3, #0
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d114      	bne.n	80051fc <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80051d2:	f003 fa13 	bl	80085fc <HAL_RCC_GetHCLKFreq>
 80051d6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4a48      	ldr	r2, [pc, #288]	@ (80052fc <HAL_DAC_ConfigChannel+0x36c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d904      	bls.n	80051ea <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e8:	e00f      	b.n	800520a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4a44      	ldr	r2, [pc, #272]	@ (8005300 <HAL_DAC_ConfigChannel+0x370>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d90a      	bls.n	8005208 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fa:	e006      	b.n	800520a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005202:	4313      	orrs	r3, r2
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
 8005206:	e000      	b.n	800520a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005208:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005218:	4313      	orrs	r3, r2
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005222:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43da      	mvns	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	400a      	ands	r2, r1
 8005240:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525c:	4013      	ands	r3, r2
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005274:	4313      	orrs	r3, r2
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6819      	ldr	r1, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	22c0      	movs	r2, #192	@ 0xc0
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43da      	mvns	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	400a      	ands	r2, r1
 800529a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	ea02 0103 	and.w	r1, r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	409a      	lsls	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80052f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	@ 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	09896800 	.word	0x09896800
 8005300:	04c4b400 	.word	0x04c4b400

08005304 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fe13 	bl	8004f3e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	711a      	strb	r2, [r3, #4]
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fe0c 	bl	8004f52 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7ff fe02 	bl	8004f66 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	711a      	strb	r2, [r3, #4]
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ffce 	bl	8005370 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	711a      	strb	r2, [r3, #4]
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff ffc7 	bl	8005384 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f043 0204 	orr.w	r2, r3, #4
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff ffbd 	bl	8005398 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	711a      	strb	r2, [r3, #4]
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e08d      	b.n	800555a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	4b47      	ldr	r3, [pc, #284]	@ (8005564 <HAL_DMA_Init+0x138>)
 8005446:	429a      	cmp	r2, r3
 8005448:	d80f      	bhi.n	800546a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	4b45      	ldr	r3, [pc, #276]	@ (8005568 <HAL_DMA_Init+0x13c>)
 8005452:	4413      	add	r3, r2
 8005454:	4a45      	ldr	r2, [pc, #276]	@ (800556c <HAL_DMA_Init+0x140>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	009a      	lsls	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a42      	ldr	r2, [pc, #264]	@ (8005570 <HAL_DMA_Init+0x144>)
 8005466:	641a      	str	r2, [r3, #64]	@ 0x40
 8005468:	e00e      	b.n	8005488 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	4b40      	ldr	r3, [pc, #256]	@ (8005574 <HAL_DMA_Init+0x148>)
 8005472:	4413      	add	r3, r2
 8005474:	4a3d      	ldr	r2, [pc, #244]	@ (800556c <HAL_DMA_Init+0x140>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	009a      	lsls	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a3c      	ldr	r2, [pc, #240]	@ (8005578 <HAL_DMA_Init+0x14c>)
 8005486:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800549e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa84 	bl	80059e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054e8:	d102      	bne.n	80054f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005504:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <HAL_DMA_Init+0x104>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d80c      	bhi.n	8005530 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 faa4 	bl	8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e008      	b.n	8005542 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40020407 	.word	0x40020407
 8005568:	bffdfff8 	.word	0xbffdfff8
 800556c:	cccccccd 	.word	0xcccccccd
 8005570:	40020000 	.word	0x40020000
 8005574:	bffdfbf8 	.word	0xbffdfbf8
 8005578:	40020400 	.word	0x40020400

0800557c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_DMA_Start_IT+0x20>
 8005598:	2302      	movs	r3, #2
 800559a:	e066      	b.n	800566a <HAL_DMA_Start_IT+0xee>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d155      	bne.n	800565c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f9c9 	bl	800596c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 020e 	orr.w	r2, r2, #14
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e00f      	b.n	8005614 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0204 	bic.w	r2, r2, #4
 8005602:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 020a 	orr.w	r2, r2, #10
 8005612:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005630:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005648:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e005      	b.n	8005668 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d005      	beq.n	8005696 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2204      	movs	r2, #4
 800568e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
 8005694:	e037      	b.n	8005706 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 020e 	bic.w	r2, r2, #14
 80056a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f003 021f 	and.w	r2, r3, #31
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	2101      	movs	r1, #1
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
 80056d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005704:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d00d      	beq.n	8005758 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
 8005756:	e047      	b.n	80057e8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 020e 	bic.w	r2, r2, #14
 8005766:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005782:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	f003 021f 	and.w	r2, r3, #31
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f202 	lsl.w	r2, r1, r2
 800579a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
    }
  }
  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2204      	movs	r2, #4
 8005814:	409a      	lsls	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d026      	beq.n	800586c <HAL_DMA_IRQHandler+0x7a>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d021      	beq.n	800586c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0204 	bic.w	r2, r2, #4
 8005844:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	f003 021f 	and.w	r2, r3, #31
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	2104      	movs	r1, #4
 8005854:	fa01 f202 	lsl.w	r2, r1, r2
 8005858:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	d071      	beq.n	8005946 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800586a:	e06c      	b.n	8005946 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	2202      	movs	r2, #2
 8005876:	409a      	lsls	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02e      	beq.n	80058de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d029      	beq.n	80058de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 020a 	bic.w	r2, r2, #10
 80058a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b4:	f003 021f 	and.w	r2, r3, #31
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	2102      	movs	r1, #2
 80058be:	fa01 f202 	lsl.w	r2, r1, r2
 80058c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d038      	beq.n	8005946 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80058dc:	e033      	b.n	8005946 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2208      	movs	r2, #8
 80058e8:	409a      	lsls	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d02a      	beq.n	8005948 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d025      	beq.n	8005948 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 020e 	bic.w	r2, r2, #14
 800590a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005910:	f003 021f 	and.w	r2, r3, #31
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	2101      	movs	r1, #1
 800591a:	fa01 f202 	lsl.w	r2, r1, r2
 800591e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005946:	bf00      	nop
 8005948:	bf00      	nop
}
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800595e:	b2db      	uxtb	r3, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005982:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	f003 021f 	and.w	r2, r3, #31
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	2101      	movs	r1, #1
 80059a4:	fa01 f202 	lsl.w	r2, r1, r2
 80059a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d108      	bne.n	80059cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059ca:	e007      	b.n	80059dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d802      	bhi.n	8005a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80059fc:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e001      	b.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005a02:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a04:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	3b08      	subs	r3, #8
 8005a12:	4a12      	ldr	r2, [pc, #72]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	461a      	mov	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a0b      	ldr	r2, [pc, #44]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40020407 	.word	0x40020407
 8005a54:	40020800 	.word	0x40020800
 8005a58:	40020820 	.word	0x40020820
 8005a5c:	cccccccd 	.word	0xcccccccd
 8005a60:	40020880 	.word	0x40020880

08005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a08      	ldr	r2, [pc, #32]	@ (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a86:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2201      	movs	r2, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	1000823f 	.word	0x1000823f
 8005aa8:	40020940 	.word	0x40020940

08005aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005aba:	e15a      	b.n	8005d72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 814c 	beq.w	8005d6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0303 	and.w	r3, r3, #3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d005      	beq.n	8005aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d130      	bne.n	8005b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	2203      	movs	r2, #3
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4013      	ands	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b22:	2201      	movs	r2, #1
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	f003 0201 	and.w	r2, r3, #1
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d017      	beq.n	8005b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	2203      	movs	r2, #3
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d123      	bne.n	8005bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	08da      	lsrs	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	220f      	movs	r2, #15
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	08da      	lsrs	r2, r3, #3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3208      	adds	r2, #8
 8005bd8:	6939      	ldr	r1, [r7, #16]
 8005bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	2203      	movs	r2, #3
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0203 	and.w	r2, r3, #3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80a6 	beq.w	8005d6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c20:	4b5b      	ldr	r3, [pc, #364]	@ (8005d90 <HAL_GPIO_Init+0x2e4>)
 8005c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c24:	4a5a      	ldr	r2, [pc, #360]	@ (8005d90 <HAL_GPIO_Init+0x2e4>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c2c:	4b58      	ldr	r3, [pc, #352]	@ (8005d90 <HAL_GPIO_Init+0x2e4>)
 8005c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c38:	4a56      	ldr	r2, [pc, #344]	@ (8005d94 <HAL_GPIO_Init+0x2e8>)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	220f      	movs	r2, #15
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c62:	d01f      	beq.n	8005ca4 <HAL_GPIO_Init+0x1f8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a4c      	ldr	r2, [pc, #304]	@ (8005d98 <HAL_GPIO_Init+0x2ec>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d019      	beq.n	8005ca0 <HAL_GPIO_Init+0x1f4>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8005d9c <HAL_GPIO_Init+0x2f0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <HAL_GPIO_Init+0x1f0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a4a      	ldr	r2, [pc, #296]	@ (8005da0 <HAL_GPIO_Init+0x2f4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00d      	beq.n	8005c98 <HAL_GPIO_Init+0x1ec>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a49      	ldr	r2, [pc, #292]	@ (8005da4 <HAL_GPIO_Init+0x2f8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <HAL_GPIO_Init+0x1e8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a48      	ldr	r2, [pc, #288]	@ (8005da8 <HAL_GPIO_Init+0x2fc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <HAL_GPIO_Init+0x1e4>
 8005c8c:	2305      	movs	r3, #5
 8005c8e:	e00a      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c90:	2306      	movs	r3, #6
 8005c92:	e008      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c94:	2304      	movs	r3, #4
 8005c96:	e006      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e004      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e002      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <HAL_GPIO_Init+0x1fa>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	f002 0203 	and.w	r2, r2, #3
 8005cac:	0092      	lsls	r2, r2, #2
 8005cae:	4093      	lsls	r3, r2
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cb6:	4937      	ldr	r1, [pc, #220]	@ (8005d94 <HAL_GPIO_Init+0x2e8>)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cc4:	4b39      	ldr	r3, [pc, #228]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ce8:	4a30      	ldr	r2, [pc, #192]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cee:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d12:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d18:	4b24      	ldr	r3, [pc, #144]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d42:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d66:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <HAL_GPIO_Init+0x300>)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f47f ae9d 	bne.w	8005abc <HAL_GPIO_Init+0x10>
  }
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40010000 	.word	0x40010000
 8005d98:	48000400 	.word	0x48000400
 8005d9c:	48000800 	.word	0x48000800
 8005da0:	48000c00 	.word	0x48000c00
 8005da4:	48001000 	.word	0x48001000
 8005da8:	48001400 	.word	0x48001400
 8005dac:	40010400 	.word	0x40010400

08005db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	807b      	strh	r3, [r7, #2]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc0:	787b      	ldrb	r3, [r7, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dcc:	e002      	b.n	8005dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dce:	887a      	ldrh	r2, [r7, #2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e08d      	b.n	8005f0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fb92 	bl	8002530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d107      	bne.n	8005e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	e006      	b.n	8005e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d108      	bne.n	8005e82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	e007      	b.n	8005e92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69d9      	ldr	r1, [r3, #28]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	461a      	mov	r2, r3
 8005f24:	460b      	mov	r3, r1
 8005f26:	817b      	strh	r3, [r7, #10]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	f040 80ef 	bne.w	800611c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0e5      	b.n	800611e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e0de      	b.n	800611e <HAL_I2C_Master_Transmit_DMA+0x206>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2221      	movs	r2, #33	@ 0x21
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2210      	movs	r2, #16
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	893a      	ldrh	r2, [r7, #8]
 8005f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a66      	ldr	r2, [pc, #408]	@ (8006128 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a66      	ldr	r2, [pc, #408]	@ (800612c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005f94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2bff      	cmp	r3, #255	@ 0xff
 8005f9e:	d906      	bls.n	8005fae <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	22ff      	movs	r2, #255	@ 0xff
 8005fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005fa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	e007      	b.n	8005fbe <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fbc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01a      	beq.n	8005ffc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d074      	beq.n	80060ee <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d022      	beq.n	8006052 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	4a47      	ldr	r2, [pc, #284]	@ (8006130 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8006012:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006018:	4a46      	ldr	r2, [pc, #280]	@ (8006134 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800601a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006028:	2200      	movs	r2, #0
 800602a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800603c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006042:	f7ff fa9b 	bl	800557c <HAL_DMA_Start_IT>
 8006046:	4603      	mov	r3, r0
 8006048:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d13a      	bne.n	80060c6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8006050:	e013      	b.n	800607a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006066:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e051      	b.n	800611e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607e:	b2db      	uxtb	r3, r3
 8006080:	3301      	adds	r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	8979      	ldrh	r1, [r7, #10]
 8006086:	4b2c      	ldr	r3, [pc, #176]	@ (8006138 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f001 fba5 	bl	80077dc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80060ac:	2110      	movs	r1, #16
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f001 fbc6 	bl	8007840 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e028      	b.n	8006118 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	f043 0210 	orr.w	r2, r3, #16
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e017      	b.n	800611e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a12      	ldr	r2, [pc, #72]	@ (800613c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80060f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	8979      	ldrh	r1, [r7, #10]
 80060fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006138 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 fb6a 	bl	80077dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006110:	2101      	movs	r1, #1
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f001 fb94 	bl	8007840 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	ffff0000 	.word	0xffff0000
 800612c:	0800675b 	.word	0x0800675b
 8006130:	080076db 	.word	0x080076db
 8006134:	08007771 	.word	0x08007771
 8006138:	80002000 	.word	0x80002000
 800613c:	0800631b 	.word	0x0800631b

08006140 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
  }
}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a4:	f043 0201 	orr.w	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00f      	beq.n	80061e0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00f      	beq.n	800620a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f8:	f043 0202 	orr.w	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006208:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 030b 	and.w	r3, r3, #11
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f921 	bl	8007464 <I2C_ITError>
  }
}
 8006222:	bf00      	nop
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	70fb      	strb	r3, [r7, #3]
 8006272:	4613      	mov	r3, r2
 8006274:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f4:	b2db      	uxtb	r3, r3
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b088      	sub	sp, #32
 800631e:	af02      	add	r7, sp, #8
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <I2C_Master_ISR_IT+0x1e>
 8006334:	2302      	movs	r3, #2
 8006336:	e113      	b.n	8006560 <I2C_Master_ISR_IT+0x246>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b00      	cmp	r3, #0
 8006348:	d012      	beq.n	8006370 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2210      	movs	r2, #16
 800635a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006360:	f043 0204 	orr.w	r2, r3, #4
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 f992 	bl	8007692 <I2C_Flush_TXDR>
 800636e:	e0e4      	b.n	800653a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d022      	beq.n	80063c0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01d      	beq.n	80063c0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0304 	bic.w	r3, r3, #4
 800638a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063be:	e0bc      	b.n	800653a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d128      	bne.n	800641c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d023      	beq.n	800641c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01e      	beq.n	800641c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a8 	beq.w	800653a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800641a:	e08e      	b.n	800653a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d05c      	beq.n	80064e0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800642c:	2b00      	cmp	r3, #0
 800642e:	d057      	beq.n	80064e0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d040      	beq.n	80064bc <I2C_Master_ISR_IT+0x1a2>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13c      	bne.n	80064bc <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800644e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2bff      	cmp	r3, #255	@ 0xff
 8006458:	d90e      	bls.n	8006478 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	22ff      	movs	r2, #255	@ 0xff
 800645e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006464:	b2da      	uxtb	r2, r3
 8006466:	8a79      	ldrh	r1, [r7, #18]
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f001 f9b3 	bl	80077dc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006476:	e032      	b.n	80064de <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800648a:	d00b      	beq.n	80064a4 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006490:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006496:	8a79      	ldrh	r1, [r7, #18]
 8006498:	2000      	movs	r0, #0
 800649a:	9000      	str	r0, [sp, #0]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f001 f99d 	bl	80077dc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064a2:	e01c      	b.n	80064de <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8a79      	ldrh	r1, [r7, #18]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 f991 	bl	80077dc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ba:	e010      	b.n	80064de <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ca:	d003      	beq.n	80064d4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fcb0 	bl	8006e32 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064d2:	e032      	b.n	800653a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064d4:	2140      	movs	r1, #64	@ 0x40
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 ffc4 	bl	8007464 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064dc:	e02d      	b.n	800653a <I2C_Master_ISR_IT+0x220>
 80064de:	e02c      	b.n	800653a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d027      	beq.n	800653a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d022      	beq.n	800653a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d119      	bne.n	8006532 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800650c:	d015      	beq.n	800653a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006516:	d108      	bne.n	800652a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	e007      	b.n	800653a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fc81 	bl	8006e32 <I2C_ITMasterSeqCplt>
 8006530:	e003      	b.n	800653a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006532:	2140      	movs	r1, #64	@ 0x40
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 ff95 	bl	8007464 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800654e:	6979      	ldr	r1, [r7, #20]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fd07 	bl	8006f64 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <I2C_Slave_ISR_IT+0x24>
 8006588:	2302      	movs	r3, #2
 800658a:	e0e2      	b.n	8006752 <I2C_Slave_ISR_IT+0x1ea>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80065a8:	6939      	ldr	r1, [r7, #16]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fda2 	bl	80070f4 <I2C_ITSlaveCplt>
 80065b0:	e0ca      	b.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d04b      	beq.n	8006654 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d046      	beq.n	8006654 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d128      	bne.n	8006622 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b28      	cmp	r3, #40	@ 0x28
 80065da:	d108      	bne.n	80065ee <I2C_Slave_ISR_IT+0x86>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065e2:	d104      	bne.n	80065ee <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80065e4:	6939      	ldr	r1, [r7, #16]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fee8 	bl	80073bc <I2C_ITListenCplt>
 80065ec:	e031      	b.n	8006652 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b29      	cmp	r3, #41	@ 0x29
 80065f8:	d10e      	bne.n	8006618 <I2C_Slave_ISR_IT+0xb0>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006600:	d00a      	beq.n	8006618 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f001 f841 	bl	8007692 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fc4b 	bl	8006eac <I2C_ITSlaveSeqCplt>
 8006616:	e01c      	b.n	8006652 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2210      	movs	r2, #16
 800661e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006620:	e08f      	b.n	8006742 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	f043 0204 	orr.w	r2, r3, #4
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <I2C_Slave_ISR_IT+0xdc>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006642:	d17e      	bne.n	8006742 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006648:	4619      	mov	r1, r3
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 ff0a 	bl	8007464 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006650:	e077      	b.n	8006742 <I2C_Slave_ISR_IT+0x1da>
 8006652:	e076      	b.n	8006742 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02f      	beq.n	80066be <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02a      	beq.n	80066be <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d018      	beq.n	80066a4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d14b      	bne.n	8006746 <I2C_Slave_ISR_IT+0x1de>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066b4:	d047      	beq.n	8006746 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fbf8 	bl	8006eac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80066bc:	e043      	b.n	8006746 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d004      	beq.n	80066dc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80066d2:	6939      	ldr	r1, [r7, #16]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fb28 	bl	8006d2a <I2C_ITAddrCplt>
 80066da:	e035      	b.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d030      	beq.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02b      	beq.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d018      	beq.n	800672c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	@ 0x28
 800672a:	e00d      	b.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006732:	d002      	beq.n	800673a <I2C_Slave_ISR_IT+0x1d2>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fbb6 	bl	8006eac <I2C_ITSlaveSeqCplt>
 8006740:	e002      	b.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006746:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af02      	add	r7, sp, #8
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <I2C_Master_ISR_DMA+0x1a>
 8006770:	2302      	movs	r3, #2
 8006772:	e0d9      	b.n	8006928 <I2C_Master_ISR_DMA+0x1ce>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800678c:	2b00      	cmp	r3, #0
 800678e:	d011      	beq.n	80067b4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2210      	movs	r2, #16
 8006796:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80067a4:	2120      	movs	r1, #32
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f001 f84a 	bl	8007840 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 ff70 	bl	8007692 <I2C_Flush_TXDR>
 80067b2:	e0b4      	b.n	800691e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d071      	beq.n	80068a2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d06c      	beq.n	80068a2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067d6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04e      	beq.n	8006880 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2bff      	cmp	r3, #255	@ 0xff
 80067f8:	d906      	bls.n	8006808 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	22ff      	movs	r2, #255	@ 0xff
 80067fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e010      	b.n	800682a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800681a:	d003      	beq.n	8006824 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e002      	b.n	800682a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006828:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682e:	b2da      	uxtb	r2, r3
 8006830:	8a79      	ldrh	r1, [r7, #18]
 8006832:	2300      	movs	r3, #0
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 ffcf 	bl	80077dc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b22      	cmp	r3, #34	@ 0x22
 800685a:	d108      	bne.n	800686e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800686a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800686c:	e057      	b.n	800691e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800687c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800687e:	e04e      	b.n	800691e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800688e:	d003      	beq.n	8006898 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 face 	bl	8006e32 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006896:	e042      	b.n	800691e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006898:	2140      	movs	r1, #64	@ 0x40
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fde2 	bl	8007464 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80068a0:	e03d      	b.n	800691e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d028      	beq.n	80068fe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d023      	beq.n	80068fe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d119      	bne.n	80068f4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ce:	d025      	beq.n	800691c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068d8:	d108      	bne.n	80068ec <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80068ea:	e017      	b.n	800691c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 faa0 	bl	8006e32 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80068f2:	e013      	b.n	800691c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80068f4:	2140      	movs	r1, #64	@ 0x40
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fdb4 	bl	8007464 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80068fc:	e00e      	b.n	800691c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fb25 	bl	8006f64 <I2C_ITMasterCplt>
 800691a:	e000      	b.n	800691e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800691c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800693c:	4b8d      	ldr	r3, [pc, #564]	@ (8006b74 <I2C_Mem_ISR_DMA+0x244>)
 800693e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <I2C_Mem_ISR_DMA+0x1e>
 800694a:	2302      	movs	r3, #2
 800694c:	e10e      	b.n	8006b6c <I2C_Mem_ISR_DMA+0x23c>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d016      	beq.n	800698e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006976:	f043 0204 	orr.w	r2, r3, #4
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800697e:	2120      	movs	r1, #32
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 ff5d 	bl	8007840 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fe83 	bl	8007692 <I2C_Flush_TXDR>
 800698c:	e0e9      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80069b4:	e0d5      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05f      	beq.n	8006a80 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d05a      	beq.n	8006a80 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069ca:	2101      	movs	r1, #1
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 ffbb 	bl	8007948 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80069d2:	2110      	movs	r1, #16
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 ff33 	bl	8007840 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d048      	beq.n	8006a76 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2bff      	cmp	r3, #255	@ 0xff
 80069ec:	d910      	bls.n	8006a10 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	22ff      	movs	r2, #255	@ 0xff
 80069f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f8:	b299      	uxth	r1, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fee7 	bl	80077dc <I2C_TransferConfig>
 8006a0e:	e011      	b.n	8006a34 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1e:	b299      	uxth	r1, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fed4 	bl	80077dc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b22      	cmp	r3, #34	@ 0x22
 8006a50:	d108      	bne.n	8006a64 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a62:	e07e      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a74:	e075      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a76:	2140      	movs	r1, #64	@ 0x40
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fcf3 	bl	8007464 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a7e:	e070      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d05d      	beq.n	8006b46 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d058      	beq.n	8006b46 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a94:	2101      	movs	r1, #1
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 ff56 	bl	8007948 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006a9c:	2110      	movs	r1, #16
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fece 	bl	8007840 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b22      	cmp	r3, #34	@ 0x22
 8006aae:	d101      	bne.n	8006ab4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006ab0:	4b31      	ldr	r3, [pc, #196]	@ (8006b78 <I2C_Mem_ISR_DMA+0x248>)
 8006ab2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2bff      	cmp	r3, #255	@ 0xff
 8006abc:	d910      	bls.n	8006ae0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	22ff      	movs	r2, #255	@ 0xff
 8006ac2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac8:	b299      	uxth	r1, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fe7f 	bl	80077dc <I2C_TransferConfig>
 8006ade:	e011      	b.n	8006b04 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aee:	b299      	uxth	r1, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 fe6c 	bl	80077dc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b22      	cmp	r3, #34	@ 0x22
 8006b20:	d108      	bne.n	8006b34 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b32:	e016      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b44:	e00d      	b.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fa01 	bl	8006f64 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	80002000 	.word	0x80002000
 8006b78:	80002400 	.word	0x80002400

08006b7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <I2C_Slave_ISR_DMA+0x24>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e0c0      	b.n	8006d22 <I2C_Slave_ISR_DMA+0x1a6>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fa98 	bl	80070f4 <I2C_ITSlaveCplt>
 8006bc4:	e0a8      	b.n	8006d18 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8095 	beq.w	8006cfc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 808f 	beq.w	8006cfc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d07d      	beq.n	8006cee <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006c10:	2301      	movs	r3, #1
 8006c12:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00c      	beq.n	8006c36 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006c32:	2301      	movs	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d128      	bne.n	8006c8e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b28      	cmp	r3, #40	@ 0x28
 8006c46:	d108      	bne.n	8006c5a <I2C_Slave_ISR_DMA+0xde>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c4e:	d104      	bne.n	8006c5a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fbb2 	bl	80073bc <I2C_ITListenCplt>
 8006c58:	e048      	b.n	8006cec <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b29      	cmp	r3, #41	@ 0x29
 8006c64:	d10e      	bne.n	8006c84 <I2C_Slave_ISR_DMA+0x108>
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c6c:	d00a      	beq.n	8006c84 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2210      	movs	r2, #16
 8006c74:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fd0b 	bl	8007692 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f915 	bl	8006eac <I2C_ITSlaveSeqCplt>
 8006c82:	e033      	b.n	8006cec <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006c8c:	e034      	b.n	8006cf8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2210      	movs	r2, #16
 8006c94:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9a:	f043 0204 	orr.w	r2, r3, #4
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <I2C_Slave_ISR_DMA+0x13c>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cb6:	d11f      	bne.n	8006cf8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b21      	cmp	r3, #33	@ 0x21
 8006cbc:	d002      	beq.n	8006cc4 <I2C_Slave_ISR_DMA+0x148>
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	2b29      	cmp	r3, #41	@ 0x29
 8006cc2:	d103      	bne.n	8006ccc <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2221      	movs	r2, #33	@ 0x21
 8006cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cca:	e008      	b.n	8006cde <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	2b22      	cmp	r3, #34	@ 0x22
 8006cd0:	d002      	beq.n	8006cd8 <I2C_Slave_ISR_DMA+0x15c>
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd6:	d102      	bne.n	8006cde <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2222      	movs	r2, #34	@ 0x22
 8006cdc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fbbd 	bl	8007464 <I2C_ITError>
      if (treatdmanack == 1U)
 8006cea:	e005      	b.n	8006cf8 <I2C_Slave_ISR_DMA+0x17c>
 8006cec:	e004      	b.n	8006cf8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006cf6:	e00f      	b.n	8006d18 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006cf8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006cfa:	e00d      	b.n	8006d18 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f809 	bl	8006d2a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d40:	2b28      	cmp	r3, #40	@ 0x28
 8006d42:	d16a      	bne.n	8006e1a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	0c1b      	lsrs	r3, r3, #16
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	0c1b      	lsrs	r3, r3, #16
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d62:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d70:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d7e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d138      	bne.n	8006dfa <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d88:	897b      	ldrh	r3, [r7, #10]
 8006d8a:	09db      	lsrs	r3, r3, #7
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	89bb      	ldrh	r3, [r7, #12]
 8006d90:	4053      	eors	r3, r2
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f003 0306 	and.w	r3, r3, #6
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11c      	bne.n	8006dd6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d9c:	897b      	ldrh	r3, [r7, #10]
 8006d9e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d13b      	bne.n	8006e2a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dc8:	89ba      	ldrh	r2, [r7, #12]
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fa49 	bl	8006266 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006dd4:	e029      	b.n	8006e2a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006dd6:	893b      	ldrh	r3, [r7, #8]
 8006dd8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fdb2 	bl	8007948 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dec:	89ba      	ldrh	r2, [r7, #12]
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fa37 	bl	8006266 <HAL_I2C_AddrCallback>
}
 8006df8:	e017      	b.n	8006e2a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fda2 	bl	8007948 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e0c:	89ba      	ldrh	r2, [r7, #12]
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fa27 	bl	8006266 <HAL_I2C_AddrCallback>
}
 8006e18:	e007      	b.n	8006e2a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2208      	movs	r2, #8
 8006e20:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b21      	cmp	r3, #33	@ 0x21
 8006e4c:	d115      	bne.n	8006e7a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2211      	movs	r2, #17
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e62:	2101      	movs	r1, #1
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fd6f 	bl	8007948 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa f99d 	bl	80011b2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e78:	e014      	b.n	8006ea4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2212      	movs	r2, #18
 8006e86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e8e:	2102      	movs	r1, #2
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fd59 	bl	8007948 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff f9c3 	bl	800622a <HAL_I2C_MasterRxCpltCallback>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e00c      	b.n	8006efa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ef8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b29      	cmp	r3, #41	@ 0x29
 8006f04:	d112      	bne.n	8006f2c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2228      	movs	r2, #40	@ 0x28
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2221      	movs	r2, #33	@ 0x21
 8006f12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f14:	2101      	movs	r1, #1
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fd16 	bl	8007948 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff f98a 	bl	800623e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f2a:	e017      	b.n	8006f5c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f36:	d111      	bne.n	8006f5c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2228      	movs	r2, #40	@ 0x28
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2222      	movs	r2, #34	@ 0x22
 8006f44:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006f46:	2102      	movs	r1, #2
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fcfd 	bl	8007948 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff f97b 	bl	8006252 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2220      	movs	r2, #32
 8006f78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b21      	cmp	r3, #33	@ 0x21
 8006f84:	d107      	bne.n	8006f96 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f86:	2101      	movs	r1, #1
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fcdd 	bl	8007948 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2211      	movs	r2, #17
 8006f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f94:	e00c      	b.n	8006fb0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b22      	cmp	r3, #34	@ 0x22
 8006fa0:	d106      	bne.n	8006fb0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fccf 	bl	8007948 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2212      	movs	r2, #18
 8006fae:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6859      	ldr	r1, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4b4c      	ldr	r3, [pc, #304]	@ (80070ec <I2C_ITMasterCplt+0x188>)
 8006fbc:	400b      	ands	r3, r1
 8006fbe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a49      	ldr	r2, [pc, #292]	@ (80070f0 <I2C_ITMasterCplt+0x18c>)
 8006fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe2:	f043 0204 	orr.w	r2, r3, #4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b60      	cmp	r3, #96	@ 0x60
 8006ff4:	d10a      	bne.n	800700c <I2C_ITMasterCplt+0xa8>
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	b2db      	uxtb	r3, r3
 8007008:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800700a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb40 	bl	8007692 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007016:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b60      	cmp	r3, #96	@ 0x60
 8007022:	d002      	beq.n	800702a <I2C_ITMasterCplt+0xc6>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d006      	beq.n	8007038 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa17 	bl	8007464 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007036:	e054      	b.n	80070e2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b21      	cmp	r3, #33	@ 0x21
 8007042:	d124      	bne.n	800708e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d10b      	bne.n	8007076 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff f911 	bl	8006296 <HAL_I2C_MemTxCpltCallback>
}
 8007074:	e035      	b.n	80070e2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fa f893 	bl	80011b2 <HAL_I2C_MasterTxCpltCallback>
}
 800708c:	e029      	b.n	80070e2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b22      	cmp	r3, #34	@ 0x22
 8007098:	d123      	bne.n	80070e2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b40      	cmp	r3, #64	@ 0x40
 80070b2:	d10b      	bne.n	80070cc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff f8f0 	bl	80062aa <HAL_I2C_MemRxCpltCallback>
}
 80070ca:	e00a      	b.n	80070e2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff f8a4 	bl	800622a <HAL_I2C_MasterRxCpltCallback>
}
 80070e2:	bf00      	nop
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	fe00e800 	.word	0xfe00e800
 80070f0:	ffff0000 	.word	0xffff0000

080070f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007116:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2220      	movs	r2, #32
 800711e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	2b21      	cmp	r3, #33	@ 0x21
 8007124:	d002      	beq.n	800712c <I2C_ITSlaveCplt+0x38>
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	2b29      	cmp	r3, #41	@ 0x29
 800712a:	d108      	bne.n	800713e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800712c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc09 	bl	8007948 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2221      	movs	r2, #33	@ 0x21
 800713a:	631a      	str	r2, [r3, #48]	@ 0x30
 800713c:	e019      	b.n	8007172 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b22      	cmp	r3, #34	@ 0x22
 8007142:	d002      	beq.n	800714a <I2C_ITSlaveCplt+0x56>
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	2b2a      	cmp	r3, #42	@ 0x2a
 8007148:	d108      	bne.n	800715c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800714a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fbfa 	bl	8007948 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2222      	movs	r2, #34	@ 0x22
 8007158:	631a      	str	r2, [r3, #48]	@ 0x30
 800715a:	e00a      	b.n	8007172 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	2b28      	cmp	r3, #40	@ 0x28
 8007160:	d107      	bne.n	8007172 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007162:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fbee 	bl	8007948 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007180:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6859      	ldr	r1, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b89      	ldr	r3, [pc, #548]	@ (80073b4 <I2C_ITSlaveCplt+0x2c0>)
 800718e:	400b      	ands	r3, r1
 8007190:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa7d 	bl	8007692 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d013      	beq.n	80071ca <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01f      	beq.n	80071fa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071c8:	e017      	b.n	80071fa <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d006      	beq.n	80071fa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d020      	beq.n	8007246 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0304 	bic.w	r3, r3, #4
 800720a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00c      	beq.n	8007246 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007254:	f043 0204 	orr.w	r2, r3, #4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	d049      	beq.n	80072fa <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800726c:	2b00      	cmp	r3, #0
 800726e:	d044      	beq.n	80072fa <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d128      	bne.n	80072cc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b28      	cmp	r3, #40	@ 0x28
 8007284:	d108      	bne.n	8007298 <I2C_ITSlaveCplt+0x1a4>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800728c:	d104      	bne.n	8007298 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800728e:	6979      	ldr	r1, [r7, #20]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f893 	bl	80073bc <I2C_ITListenCplt>
 8007296:	e030      	b.n	80072fa <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b29      	cmp	r3, #41	@ 0x29
 80072a2:	d10e      	bne.n	80072c2 <I2C_ITSlaveCplt+0x1ce>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072aa:	d00a      	beq.n	80072c2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2210      	movs	r2, #16
 80072b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9ec 	bl	8007692 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fdf6 	bl	8006eac <I2C_ITSlaveSeqCplt>
 80072c0:	e01b      	b.n	80072fa <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2210      	movs	r2, #16
 80072c8:	61da      	str	r2, [r3, #28]
 80072ca:	e016      	b.n	80072fa <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2210      	movs	r2, #16
 80072d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d8:	f043 0204 	orr.w	r2, r3, #4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <I2C_ITSlaveCplt+0x1fa>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ec:	d105      	bne.n	80072fa <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f8b5 	bl	8007464 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8a4 	bl	8007464 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b28      	cmp	r3, #40	@ 0x28
 8007326:	d141      	bne.n	80073ac <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f846 	bl	80073bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007330:	e03c      	b.n	80073ac <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800733a:	d014      	beq.n	8007366 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fdb5 	bl	8006eac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a1c      	ldr	r2, [pc, #112]	@ (80073b8 <I2C_ITSlaveCplt+0x2c4>)
 8007346:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fe ff8f 	bl	8006282 <HAL_I2C_ListenCpltCallback>
}
 8007364:	e022      	b.n	80073ac <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b22      	cmp	r3, #34	@ 0x22
 8007370:	d10e      	bne.n	8007390 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fe ff62 	bl	8006252 <HAL_I2C_SlaveRxCpltCallback>
}
 800738e:	e00d      	b.n	80073ac <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fe ff49 	bl	800623e <HAL_I2C_SlaveTxCpltCallback>
}
 80073ac:	bf00      	nop
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	fe00e800 	.word	0xfe00e800
 80073b8:	ffff0000 	.word	0xffff0000

080073bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a25      	ldr	r2, [pc, #148]	@ (8007460 <I2C_ITListenCplt+0xa4>)
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d022      	beq.n	8007438 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d012      	beq.n	8007438 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007430:	f043 0204 	orr.w	r2, r3, #4
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007438:	f248 0103 	movw	r1, #32771	@ 0x8003
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fa83 	bl	8007948 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2210      	movs	r2, #16
 8007448:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fe ff15 	bl	8006282 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	ffff0000 	.word	0xffff0000

08007464 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007474:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a6d      	ldr	r2, [pc, #436]	@ (8007638 <I2C_ITError+0x1d4>)
 8007482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b28      	cmp	r3, #40	@ 0x28
 800749a:	d005      	beq.n	80074a8 <I2C_ITError+0x44>
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b29      	cmp	r3, #41	@ 0x29
 80074a0:	d002      	beq.n	80074a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074a6:	d10b      	bne.n	80074c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074a8:	2103      	movs	r1, #3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa4c 	bl	8007948 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2228      	movs	r2, #40	@ 0x28
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a60      	ldr	r2, [pc, #384]	@ (800763c <I2C_ITError+0x1d8>)
 80074bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80074be:	e030      	b.n	8007522 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa3f 	bl	8007948 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8e1 	bl	8007692 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b60      	cmp	r3, #96	@ 0x60
 80074da:	d01f      	beq.n	800751c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d114      	bne.n	800751c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d109      	bne.n	8007514 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2210      	movs	r2, #16
 8007506:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750c:	f043 0204 	orr.w	r2, r3, #4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2220      	movs	r2, #32
 800751a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007526:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	2b00      	cmp	r3, #0
 800752e:	d039      	beq.n	80075a4 <I2C_ITError+0x140>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b11      	cmp	r3, #17
 8007534:	d002      	beq.n	800753c <I2C_ITError+0xd8>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b21      	cmp	r3, #33	@ 0x21
 800753a:	d133      	bne.n	80075a4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800754a:	d107      	bne.n	800755c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800755a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe f9f5 	bl	8005950 <HAL_DMA_GetState>
 8007566:	4603      	mov	r3, r0
 8007568:	2b01      	cmp	r3, #1
 800756a:	d017      	beq.n	800759c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007570:	4a33      	ldr	r2, [pc, #204]	@ (8007640 <I2C_ITError+0x1dc>)
 8007572:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe f8cf 	bl	8005724 <HAL_DMA_Abort_IT>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d04d      	beq.n	8007628 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007596:	4610      	mov	r0, r2
 8007598:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800759a:	e045      	b.n	8007628 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f851 	bl	8007644 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075a2:	e041      	b.n	8007628 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d039      	beq.n	8007620 <I2C_ITError+0x1bc>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b12      	cmp	r3, #18
 80075b0:	d002      	beq.n	80075b8 <I2C_ITError+0x154>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b22      	cmp	r3, #34	@ 0x22
 80075b6:	d133      	bne.n	8007620 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c6:	d107      	bne.n	80075d8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe f9b7 	bl	8005950 <HAL_DMA_GetState>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d017      	beq.n	8007618 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ec:	4a14      	ldr	r2, [pc, #80]	@ (8007640 <I2C_ITError+0x1dc>)
 80075ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe f891 	bl	8005724 <HAL_DMA_Abort_IT>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007612:	4610      	mov	r0, r2
 8007614:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007616:	e009      	b.n	800762c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f813 	bl	8007644 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800761e:	e005      	b.n	800762c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f80f 	bl	8007644 <I2C_TreatErrorCallback>
  }
}
 8007626:	e002      	b.n	800762e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007628:	bf00      	nop
 800762a:	e000      	b.n	800762e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800762c:	bf00      	nop
}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	ffff0000 	.word	0xffff0000
 800763c:	08006569 	.word	0x08006569
 8007640:	0800779f 	.word	0x0800779f

08007644 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b60      	cmp	r3, #96	@ 0x60
 8007656:	d10e      	bne.n	8007676 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fe fe2f 	bl	80062d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007674:	e009      	b.n	800768a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fe fe1a 	bl	80062be <HAL_I2C_ErrorCallback>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d103      	bne.n	80076b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d007      	beq.n	80076ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0201 	orr.w	r2, r2, #1
 80076cc:	619a      	str	r2, [r3, #24]
  }
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076f6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d104      	bne.n	800770c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007702:	2120      	movs	r1, #32
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f89b 	bl	8007840 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800770a:	e02d      	b.n	8007768 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2bff      	cmp	r3, #255	@ 0xff
 8007722:	d903      	bls.n	800772c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	22ff      	movs	r2, #255	@ 0xff
 8007728:	851a      	strh	r2, [r3, #40]	@ 0x28
 800772a:	e004      	b.n	8007736 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773e:	4619      	mov	r1, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3328      	adds	r3, #40	@ 0x28
 8007746:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800774c:	f7fd ff16 	bl	800557c <HAL_DMA_Start_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007756:	2110      	movs	r1, #16
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fe83 	bl	8007464 <I2C_ITError>
}
 800775e:	e003      	b.n	8007768 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007760:	2140      	movs	r1, #64	@ 0x40
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f86c 	bl	8007840 <I2C_Enable_IRQ>
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800778c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800778e:	2110      	movs	r1, #16
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fe67 	bl	8007464 <I2C_ITError>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	2200      	movs	r2, #0
 80077ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c8:	2200      	movs	r2, #0
 80077ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff ff39 	bl	8007644 <I2C_TreatErrorCallback>
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	817b      	strh	r3, [r7, #10]
 80077ea:	4613      	mov	r3, r2
 80077ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077ee:	897b      	ldrh	r3, [r7, #10]
 80077f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077f4:	7a7b      	ldrb	r3, [r7, #9]
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	4313      	orrs	r3, r2
 8007806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800780a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	0d5b      	lsrs	r3, r3, #21
 8007816:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800781a:	4b08      	ldr	r3, [pc, #32]	@ (800783c <I2C_TransferConfig+0x60>)
 800781c:	430b      	orrs	r3, r1
 800781e:	43db      	mvns	r3, r3
 8007820:	ea02 0103 	and.w	r1, r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	430a      	orrs	r2, r1
 800782c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	03ff63ff 	.word	0x03ff63ff

08007840 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007854:	4a39      	ldr	r2, [pc, #228]	@ (800793c <I2C_Enable_IRQ+0xfc>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d032      	beq.n	80078c0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800785e:	4a38      	ldr	r2, [pc, #224]	@ (8007940 <I2C_Enable_IRQ+0x100>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d02d      	beq.n	80078c0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007868:	4a36      	ldr	r2, [pc, #216]	@ (8007944 <I2C_Enable_IRQ+0x104>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d028      	beq.n	80078c0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800786e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007872:	2b00      	cmp	r3, #0
 8007874:	da03      	bge.n	800787e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800787c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800787e:	887b      	ldrh	r3, [r7, #2]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800788e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80078a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d103      	bne.n	80078b0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80078ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078b0:	887b      	ldrh	r3, [r7, #2]
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d133      	bne.n	800791e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f043 0320 	orr.w	r3, r3, #32
 80078bc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078be:	e02e      	b.n	800791e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80078c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da03      	bge.n	80078d0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80078ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80078d0:	887b      	ldrh	r3, [r7, #2]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80078e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078e2:	887b      	ldrh	r3, [r7, #2]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80078f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078f4:	887b      	ldrh	r3, [r7, #2]
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d103      	bne.n	8007902 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007900:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	2b20      	cmp	r3, #32
 8007906:	d103      	bne.n	8007910 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800790e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007910:	887b      	ldrh	r3, [r7, #2]
 8007912:	2b40      	cmp	r3, #64	@ 0x40
 8007914:	d103      	bne.n	800791e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	430a      	orrs	r2, r1
 800792c:	601a      	str	r2, [r3, #0]
}
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	0800675b 	.word	0x0800675b
 8007940:	08006b7d 	.word	0x08006b7d
 8007944:	08006931 	.word	0x08006931

08007948 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007958:	887b      	ldrh	r3, [r7, #2]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00f      	beq.n	8007982 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007968:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007976:	2b28      	cmp	r3, #40	@ 0x28
 8007978:	d003      	beq.n	8007982 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007980:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007982:	887b      	ldrh	r3, [r7, #2]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00f      	beq.n	80079ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007992:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80079a0:	2b28      	cmp	r3, #40	@ 0x28
 80079a2:	d003      	beq.n	80079ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80079aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80079ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	da03      	bge.n	80079bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80079ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80079bc:	887b      	ldrh	r3, [r7, #2]
 80079be:	2b10      	cmp	r3, #16
 80079c0:	d103      	bne.n	80079ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80079ca:	887b      	ldrh	r3, [r7, #2]
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d103      	bne.n	80079d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f043 0320 	orr.w	r3, r3, #32
 80079d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80079d8:	887b      	ldrh	r3, [r7, #2]
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d103      	bne.n	80079e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6819      	ldr	r1, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	43da      	mvns	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	400a      	ands	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d138      	bne.n	8007a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e032      	b.n	8007a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2224      	movs	r2, #36	@ 0x24
 8007a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	e000      	b.n	8007a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a8c:	2302      	movs	r3, #2
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d139      	bne.n	8007b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e033      	b.n	8007b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2224      	movs	r2, #36	@ 0x24
 8007aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0201 	orr.w	r2, r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b24:	2302      	movs	r3, #2
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
	...

08007b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d141      	bne.n	8007bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b42:	4b4b      	ldr	r3, [pc, #300]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b4e:	d131      	bne.n	8007bb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b50:	4b47      	ldr	r3, [pc, #284]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b56:	4a46      	ldr	r2, [pc, #280]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b60:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b68:	4a41      	ldr	r2, [pc, #260]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b70:	4b40      	ldr	r3, [pc, #256]	@ (8007c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2232      	movs	r2, #50	@ 0x32
 8007b76:	fb02 f303 	mul.w	r3, r2, r3
 8007b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	0c9b      	lsrs	r3, r3, #18
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b86:	e002      	b.n	8007b8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b8e:	4b38      	ldr	r3, [pc, #224]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b9a:	d102      	bne.n	8007ba2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f2      	bne.n	8007b88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ba2:	4b33      	ldr	r3, [pc, #204]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bae:	d158      	bne.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e057      	b.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bba:	4a2d      	ldr	r2, [pc, #180]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007bc4:	e04d      	b.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bcc:	d141      	bne.n	8007c52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bce:	4b28      	ldr	r3, [pc, #160]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bda:	d131      	bne.n	8007c40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bdc:	4b24      	ldr	r3, [pc, #144]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be2:	4a23      	ldr	r2, [pc, #140]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bec:	4b20      	ldr	r3, [pc, #128]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2232      	movs	r2, #50	@ 0x32
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
 8007c06:	4a1c      	ldr	r2, [pc, #112]	@ (8007c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	0c9b      	lsrs	r3, r3, #18
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c12:	e002      	b.n	8007c1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c1a:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c26:	d102      	bne.n	8007c2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f2      	bne.n	8007c14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c2e:	4b10      	ldr	r3, [pc, #64]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3a:	d112      	bne.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e011      	b.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c40:	4b0b      	ldr	r3, [pc, #44]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c46:	4a0a      	ldr	r2, [pc, #40]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c50:	e007      	b.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c52:	4b07      	ldr	r3, [pc, #28]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c5a:	4a05      	ldr	r2, [pc, #20]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	40007000 	.word	0x40007000
 8007c74:	20000008 	.word	0x20000008
 8007c78:	431bde83 	.word	0x431bde83

08007c7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	4a04      	ldr	r2, [pc, #16]	@ (8007c98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c8a:	6093      	str	r3, [r2, #8]
}
 8007c8c:	bf00      	nop
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40007000 	.word	0x40007000

08007c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e2fe      	b.n	80082ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d075      	beq.n	8007da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cba:	4b97      	ldr	r3, [pc, #604]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cc4:	4b94      	ldr	r3, [pc, #592]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b0c      	cmp	r3, #12
 8007cd2:	d102      	bne.n	8007cda <HAL_RCC_OscConfig+0x3e>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d002      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x44>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d10b      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d05b      	beq.n	8007da4 <HAL_RCC_OscConfig+0x108>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d157      	bne.n	8007da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e2d9      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d00:	d106      	bne.n	8007d10 <HAL_RCC_OscConfig+0x74>
 8007d02:	4b85      	ldr	r3, [pc, #532]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a84      	ldr	r2, [pc, #528]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	e01d      	b.n	8007d4c <HAL_RCC_OscConfig+0xb0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d18:	d10c      	bne.n	8007d34 <HAL_RCC_OscConfig+0x98>
 8007d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4b7c      	ldr	r3, [pc, #496]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a7b      	ldr	r2, [pc, #492]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e00b      	b.n	8007d4c <HAL_RCC_OscConfig+0xb0>
 8007d34:	4b78      	ldr	r3, [pc, #480]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a77      	ldr	r2, [pc, #476]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	4b75      	ldr	r3, [pc, #468]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a74      	ldr	r2, [pc, #464]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d013      	beq.n	8007d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fb f852 	bl	8002dfc <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d5c:	f7fb f84e 	bl	8002dfc <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b64      	cmp	r3, #100	@ 0x64
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e29e      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f0      	beq.n	8007d5c <HAL_RCC_OscConfig+0xc0>
 8007d7a:	e014      	b.n	8007da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7c:	f7fb f83e 	bl	8002dfc <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d84:	f7fb f83a 	bl	8002dfc <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b64      	cmp	r3, #100	@ 0x64
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e28a      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d96:	4b60      	ldr	r3, [pc, #384]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <HAL_RCC_OscConfig+0xe8>
 8007da2:	e000      	b.n	8007da6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d075      	beq.n	8007e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db2:	4b59      	ldr	r3, [pc, #356]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
 8007dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dbc:	4b56      	ldr	r3, [pc, #344]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b0c      	cmp	r3, #12
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x136>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d002      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x13c>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d11f      	bne.n	8007e18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <HAL_RCC_OscConfig+0x154>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e25d      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df0:	4b49      	ldr	r3, [pc, #292]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	061b      	lsls	r3, r3, #24
 8007dfe:	4946      	ldr	r1, [pc, #280]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e04:	4b45      	ldr	r3, [pc, #276]	@ (8007f1c <HAL_RCC_OscConfig+0x280>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fa ffab 	bl	8002d64 <HAL_InitTick>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d043      	beq.n	8007e9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e249      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d023      	beq.n	8007e68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e20:	4b3d      	ldr	r3, [pc, #244]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a3c      	ldr	r2, [pc, #240]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2c:	f7fa ffe6 	bl	8002dfc <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e34:	f7fa ffe2 	bl	8002dfc <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e232      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e46:	4b34      	ldr	r3, [pc, #208]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0f0      	beq.n	8007e34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e52:	4b31      	ldr	r3, [pc, #196]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	061b      	lsls	r3, r3, #24
 8007e60:	492d      	ldr	r1, [pc, #180]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	604b      	str	r3, [r1, #4]
 8007e66:	e01a      	b.n	8007e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e68:	4b2b      	ldr	r3, [pc, #172]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e74:	f7fa ffc2 	bl	8002dfc <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e7c:	f7fa ffbe 	bl	8002dfc <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e20e      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e8e:	4b22      	ldr	r3, [pc, #136]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <HAL_RCC_OscConfig+0x1e0>
 8007e9a:	e000      	b.n	8007e9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d041      	beq.n	8007f2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01c      	beq.n	8007eec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eb2:	4b19      	ldr	r3, [pc, #100]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eb8:	4a17      	ldr	r2, [pc, #92]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fa ff9b 	bl	8002dfc <HAL_GetTick>
 8007ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ec8:	e008      	b.n	8007edc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eca:	f7fa ff97 	bl	8002dfc <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e1e7      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007edc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0ef      	beq.n	8007eca <HAL_RCC_OscConfig+0x22e>
 8007eea:	e020      	b.n	8007f2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ef2:	4a09      	ldr	r2, [pc, #36]	@ (8007f18 <HAL_RCC_OscConfig+0x27c>)
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efc:	f7fa ff7e 	bl	8002dfc <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f02:	e00d      	b.n	8007f20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f04:	f7fa ff7a 	bl	8002dfc <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d906      	bls.n	8007f20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e1ca      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
 8007f16:	bf00      	nop
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f20:	4b8c      	ldr	r3, [pc, #560]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1ea      	bne.n	8007f04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80a6 	beq.w	8008088 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f40:	4b84      	ldr	r3, [pc, #528]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_RCC_OscConfig+0x2b4>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <HAL_RCC_OscConfig+0x2b6>
 8007f50:	2300      	movs	r3, #0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00d      	beq.n	8007f72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f56:	4b7f      	ldr	r3, [pc, #508]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f62:	4b7c      	ldr	r3, [pc, #496]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f72:	4b79      	ldr	r3, [pc, #484]	@ (8008158 <HAL_RCC_OscConfig+0x4bc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d118      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f7e:	4b76      	ldr	r3, [pc, #472]	@ (8008158 <HAL_RCC_OscConfig+0x4bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a75      	ldr	r2, [pc, #468]	@ (8008158 <HAL_RCC_OscConfig+0x4bc>)
 8007f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f8a:	f7fa ff37 	bl	8002dfc <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f90:	e008      	b.n	8007fa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f92:	f7fa ff33 	bl	8002dfc <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e183      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8008158 <HAL_RCC_OscConfig+0x4bc>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0f0      	beq.n	8007f92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d108      	bne.n	8007fca <HAL_RCC_OscConfig+0x32e>
 8007fb8:	4b66      	ldr	r3, [pc, #408]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fbe:	4a65      	ldr	r2, [pc, #404]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007fc0:	f043 0301 	orr.w	r3, r3, #1
 8007fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fc8:	e024      	b.n	8008014 <HAL_RCC_OscConfig+0x378>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	2b05      	cmp	r3, #5
 8007fd0:	d110      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x358>
 8007fd2:	4b60      	ldr	r3, [pc, #384]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007fda:	f043 0304 	orr.w	r3, r3, #4
 8007fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007fea:	f043 0301 	orr.w	r3, r3, #1
 8007fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ff2:	e00f      	b.n	8008014 <HAL_RCC_OscConfig+0x378>
 8007ff4:	4b57      	ldr	r3, [pc, #348]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ffa:	4a56      	ldr	r2, [pc, #344]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008004:	4b53      	ldr	r3, [pc, #332]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800a:	4a52      	ldr	r2, [pc, #328]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 800800c:	f023 0304 	bic.w	r3, r3, #4
 8008010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d016      	beq.n	800804a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801c:	f7fa feee 	bl	8002dfc <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008022:	e00a      	b.n	800803a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008024:	f7fa feea 	bl	8002dfc <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008032:	4293      	cmp	r3, r2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e138      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800803a:	4b46      	ldr	r3, [pc, #280]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0ed      	beq.n	8008024 <HAL_RCC_OscConfig+0x388>
 8008048:	e015      	b.n	8008076 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804a:	f7fa fed7 	bl	8002dfc <HAL_GetTick>
 800804e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008050:	e00a      	b.n	8008068 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008052:	f7fa fed3 	bl	8002dfc <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008060:	4293      	cmp	r3, r2
 8008062:	d901      	bls.n	8008068 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e121      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008068:	4b3a      	ldr	r3, [pc, #232]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1ed      	bne.n	8008052 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008076:	7ffb      	ldrb	r3, [r7, #31]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d105      	bne.n	8008088 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800807c:	4b35      	ldr	r3, [pc, #212]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008080:	4a34      	ldr	r2, [pc, #208]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8008082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008086:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d03c      	beq.n	800810e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01c      	beq.n	80080d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800809c:	4b2d      	ldr	r3, [pc, #180]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 800809e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080a2:	4a2c      	ldr	r2, [pc, #176]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ac:	f7fa fea6 	bl	8002dfc <HAL_GetTick>
 80080b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080b4:	f7fa fea2 	bl	8002dfc <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e0f2      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080c6:	4b23      	ldr	r3, [pc, #140]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 80080c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0ef      	beq.n	80080b4 <HAL_RCC_OscConfig+0x418>
 80080d4:	e01b      	b.n	800810e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 80080d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 80080de:	f023 0301 	bic.w	r3, r3, #1
 80080e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e6:	f7fa fe89 	bl	8002dfc <HAL_GetTick>
 80080ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080ee:	f7fa fe85 	bl	8002dfc <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e0d5      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008100:	4b14      	ldr	r3, [pc, #80]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8008102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1ef      	bne.n	80080ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80c9 	beq.w	80082aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008118:	4b0e      	ldr	r3, [pc, #56]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 030c 	and.w	r3, r3, #12
 8008120:	2b0c      	cmp	r3, #12
 8008122:	f000 8083 	beq.w	800822c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d15e      	bne.n	80081ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800812e:	4b09      	ldr	r3, [pc, #36]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a08      	ldr	r2, [pc, #32]	@ (8008154 <HAL_RCC_OscConfig+0x4b8>)
 8008134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813a:	f7fa fe5f 	bl	8002dfc <HAL_GetTick>
 800813e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008140:	e00c      	b.n	800815c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008142:	f7fa fe5b 	bl	8002dfc <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d905      	bls.n	800815c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e0ab      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
 8008154:	40021000 	.word	0x40021000
 8008158:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800815c:	4b55      	ldr	r3, [pc, #340]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1ec      	bne.n	8008142 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008168:	4b52      	ldr	r3, [pc, #328]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	4b52      	ldr	r3, [pc, #328]	@ (80082b8 <HAL_RCC_OscConfig+0x61c>)
 800816e:	4013      	ands	r3, r2
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6a11      	ldr	r1, [r2, #32]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008178:	3a01      	subs	r2, #1
 800817a:	0112      	lsls	r2, r2, #4
 800817c:	4311      	orrs	r1, r2
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008182:	0212      	lsls	r2, r2, #8
 8008184:	4311      	orrs	r1, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800818a:	0852      	lsrs	r2, r2, #1
 800818c:	3a01      	subs	r2, #1
 800818e:	0552      	lsls	r2, r2, #21
 8008190:	4311      	orrs	r1, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008196:	0852      	lsrs	r2, r2, #1
 8008198:	3a01      	subs	r2, #1
 800819a:	0652      	lsls	r2, r2, #25
 800819c:	4311      	orrs	r1, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80081a2:	06d2      	lsls	r2, r2, #27
 80081a4:	430a      	orrs	r2, r1
 80081a6:	4943      	ldr	r1, [pc, #268]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ac:	4b41      	ldr	r3, [pc, #260]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a40      	ldr	r2, [pc, #256]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081b8:	4b3e      	ldr	r3, [pc, #248]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	4a3d      	ldr	r2, [pc, #244]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c4:	f7fa fe1a 	bl	8002dfc <HAL_GetTick>
 80081c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081cc:	f7fa fe16 	bl	8002dfc <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e066      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081de:	4b35      	ldr	r3, [pc, #212]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0x530>
 80081ea:	e05e      	b.n	80082aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ec:	4b31      	ldr	r3, [pc, #196]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a30      	ldr	r2, [pc, #192]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 80081f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f8:	f7fa fe00 	bl	8002dfc <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008200:	f7fa fdfc 	bl	8002dfc <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e04c      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008212:	4b28      	ldr	r3, [pc, #160]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1f0      	bne.n	8008200 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800821e:	4b25      	ldr	r3, [pc, #148]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	4924      	ldr	r1, [pc, #144]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 8008224:	4b25      	ldr	r3, [pc, #148]	@ (80082bc <HAL_RCC_OscConfig+0x620>)
 8008226:	4013      	ands	r3, r2
 8008228:	60cb      	str	r3, [r1, #12]
 800822a:	e03e      	b.n	80082aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e039      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008238:	4b1e      	ldr	r3, [pc, #120]	@ (80082b4 <HAL_RCC_OscConfig+0x618>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f003 0203 	and.w	r2, r3, #3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	429a      	cmp	r2, r3
 800824a:	d12c      	bne.n	80082a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	3b01      	subs	r3, #1
 8008258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800825a:	429a      	cmp	r2, r3
 800825c:	d123      	bne.n	80082a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800826a:	429a      	cmp	r2, r3
 800826c:	d11b      	bne.n	80082a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008278:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800827a:	429a      	cmp	r2, r3
 800827c:	d113      	bne.n	80082a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	085b      	lsrs	r3, r3, #1
 800828a:	3b01      	subs	r3, #1
 800828c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800828e:	429a      	cmp	r2, r3
 8008290:	d109      	bne.n	80082a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829c:	085b      	lsrs	r3, r3, #1
 800829e:	3b01      	subs	r3, #1
 80082a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d001      	beq.n	80082aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3720      	adds	r7, #32
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40021000 	.word	0x40021000
 80082b8:	019f800c 	.word	0x019f800c
 80082bc:	feeefffc 	.word	0xfeeefffc

080082c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e11e      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082d8:	4b91      	ldr	r3, [pc, #580]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d910      	bls.n	8008308 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e6:	4b8e      	ldr	r3, [pc, #568]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f023 020f 	bic.w	r2, r3, #15
 80082ee:	498c      	ldr	r1, [pc, #560]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f6:	4b8a      	ldr	r3, [pc, #552]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d001      	beq.n	8008308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e106      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d073      	beq.n	80083fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d129      	bne.n	8008370 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800831c:	4b81      	ldr	r3, [pc, #516]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e0f4      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800832c:	f000 f99e 	bl	800866c <RCC_GetSysClockFreqFromPLLSource>
 8008330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	4a7c      	ldr	r2, [pc, #496]	@ (8008528 <HAL_RCC_ClockConfig+0x268>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d93f      	bls.n	80083ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800833a:	4b7a      	ldr	r3, [pc, #488]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800834e:	2b00      	cmp	r3, #0
 8008350:	d033      	beq.n	80083ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008356:	2b00      	cmp	r3, #0
 8008358:	d12f      	bne.n	80083ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800835a:	4b72      	ldr	r3, [pc, #456]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008362:	4a70      	ldr	r2, [pc, #448]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 8008364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008368:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800836a:	2380      	movs	r3, #128	@ 0x80
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	e024      	b.n	80083ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d107      	bne.n	8008388 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008378:	4b6a      	ldr	r3, [pc, #424]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e0c6      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008388:	4b66      	ldr	r3, [pc, #408]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0be      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008398:	f000 f8ce 	bl	8008538 <HAL_RCC_GetSysClockFreq>
 800839c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4a61      	ldr	r2, [pc, #388]	@ (8008528 <HAL_RCC_ClockConfig+0x268>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d909      	bls.n	80083ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ae:	4a5d      	ldr	r2, [pc, #372]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80083b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80083b6:	2380      	movs	r3, #128	@ 0x80
 80083b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083ba:	4b5a      	ldr	r3, [pc, #360]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f023 0203 	bic.w	r2, r3, #3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	4957      	ldr	r1, [pc, #348]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083cc:	f7fa fd16 	bl	8002dfc <HAL_GetTick>
 80083d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d2:	e00a      	b.n	80083ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083d4:	f7fa fd12 	bl	8002dfc <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e095      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ea:	4b4e      	ldr	r3, [pc, #312]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 020c 	and.w	r2, r3, #12
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d1eb      	bne.n	80083d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d023      	beq.n	8008450 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008414:	4b43      	ldr	r3, [pc, #268]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4a42      	ldr	r2, [pc, #264]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800841a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800841e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800842c:	4b3d      	ldr	r3, [pc, #244]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008434:	4a3b      	ldr	r2, [pc, #236]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 8008436:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800843a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800843c:	4b39      	ldr	r3, [pc, #228]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	4936      	ldr	r1, [pc, #216]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800844a:	4313      	orrs	r3, r2
 800844c:	608b      	str	r3, [r1, #8]
 800844e:	e008      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b80      	cmp	r3, #128	@ 0x80
 8008454:	d105      	bne.n	8008462 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008456:	4b33      	ldr	r3, [pc, #204]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	4a32      	ldr	r2, [pc, #200]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 800845c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008460:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008462:	4b2f      	ldr	r3, [pc, #188]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d21d      	bcs.n	80084ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008470:	4b2b      	ldr	r3, [pc, #172]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f023 020f 	bic.w	r2, r3, #15
 8008478:	4929      	ldr	r1, [pc, #164]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	4313      	orrs	r3, r2
 800847e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008480:	f7fa fcbc 	bl	8002dfc <HAL_GetTick>
 8008484:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008486:	e00a      	b.n	800849e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008488:	f7fa fcb8 	bl	8002dfc <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008496:	4293      	cmp	r3, r2
 8008498:	d901      	bls.n	800849e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e03b      	b.n	8008516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800849e:	4b20      	ldr	r3, [pc, #128]	@ (8008520 <HAL_RCC_ClockConfig+0x260>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d1ed      	bne.n	8008488 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	4917      	ldr	r1, [pc, #92]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084d6:	4b13      	ldr	r3, [pc, #76]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	490f      	ldr	r1, [pc, #60]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084ea:	f000 f825 	bl	8008538 <HAL_RCC_GetSysClockFreq>
 80084ee:	4602      	mov	r2, r0
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <HAL_RCC_ClockConfig+0x264>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	091b      	lsrs	r3, r3, #4
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	490c      	ldr	r1, [pc, #48]	@ (800852c <HAL_RCC_ClockConfig+0x26c>)
 80084fc:	5ccb      	ldrb	r3, [r1, r3]
 80084fe:	f003 031f 	and.w	r3, r3, #31
 8008502:	fa22 f303 	lsr.w	r3, r2, r3
 8008506:	4a0a      	ldr	r2, [pc, #40]	@ (8008530 <HAL_RCC_ClockConfig+0x270>)
 8008508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800850a:	4b0a      	ldr	r3, [pc, #40]	@ (8008534 <HAL_RCC_ClockConfig+0x274>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7fa fc28 	bl	8002d64 <HAL_InitTick>
 8008514:	4603      	mov	r3, r0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40022000 	.word	0x40022000
 8008524:	40021000 	.word	0x40021000
 8008528:	04c4b400 	.word	0x04c4b400
 800852c:	080118e0 	.word	0x080118e0
 8008530:	20000008 	.word	0x20000008
 8008534:	2000000c 	.word	0x2000000c

08008538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800853e:	4b2c      	ldr	r3, [pc, #176]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 030c 	and.w	r3, r3, #12
 8008546:	2b04      	cmp	r3, #4
 8008548:	d102      	bne.n	8008550 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800854a:	4b2a      	ldr	r3, [pc, #168]	@ (80085f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	e047      	b.n	80085e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008550:	4b27      	ldr	r3, [pc, #156]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 030c 	and.w	r3, r3, #12
 8008558:	2b08      	cmp	r3, #8
 800855a:	d102      	bne.n	8008562 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800855c:	4b26      	ldr	r3, [pc, #152]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	e03e      	b.n	80085e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008562:	4b23      	ldr	r3, [pc, #140]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 030c 	and.w	r3, r3, #12
 800856a:	2b0c      	cmp	r3, #12
 800856c:	d136      	bne.n	80085dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800856e:	4b20      	ldr	r3, [pc, #128]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008578:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	3301      	adds	r3, #1
 8008584:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b03      	cmp	r3, #3
 800858a:	d10c      	bne.n	80085a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800858c:	4a1a      	ldr	r2, [pc, #104]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	4a16      	ldr	r2, [pc, #88]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008596:	68d2      	ldr	r2, [r2, #12]
 8008598:	0a12      	lsrs	r2, r2, #8
 800859a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	617b      	str	r3, [r7, #20]
      break;
 80085a4:	e00c      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085a6:	4a13      	ldr	r2, [pc, #76]	@ (80085f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	4a10      	ldr	r2, [pc, #64]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085b0:	68d2      	ldr	r2, [r2, #12]
 80085b2:	0a12      	lsrs	r2, r2, #8
 80085b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085b8:	fb02 f303 	mul.w	r3, r2, r3
 80085bc:	617b      	str	r3, [r7, #20]
      break;
 80085be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085c0:	4b0b      	ldr	r3, [pc, #44]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	0e5b      	lsrs	r3, r3, #25
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	3301      	adds	r3, #1
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	e001      	b.n	80085e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80085e0:	693b      	ldr	r3, [r7, #16]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40021000 	.word	0x40021000
 80085f4:	00f42400 	.word	0x00f42400
 80085f8:	007a1200 	.word	0x007a1200

080085fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008600:	4b03      	ldr	r3, [pc, #12]	@ (8008610 <HAL_RCC_GetHCLKFreq+0x14>)
 8008602:	681b      	ldr	r3, [r3, #0]
}
 8008604:	4618      	mov	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000008 	.word	0x20000008

08008614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008618:	f7ff fff0 	bl	80085fc <HAL_RCC_GetHCLKFreq>
 800861c:	4602      	mov	r2, r0
 800861e:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	4904      	ldr	r1, [pc, #16]	@ (800863c <HAL_RCC_GetPCLK1Freq+0x28>)
 800862a:	5ccb      	ldrb	r3, [r1, r3]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40021000 	.word	0x40021000
 800863c:	080118f0 	.word	0x080118f0

08008640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008644:	f7ff ffda 	bl	80085fc <HAL_RCC_GetHCLKFreq>
 8008648:	4602      	mov	r2, r0
 800864a:	4b06      	ldr	r3, [pc, #24]	@ (8008664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	0adb      	lsrs	r3, r3, #11
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	4904      	ldr	r1, [pc, #16]	@ (8008668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008656:	5ccb      	ldrb	r3, [r1, r3]
 8008658:	f003 031f 	and.w	r3, r3, #31
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008660:	4618      	mov	r0, r3
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40021000 	.word	0x40021000
 8008668:	080118f0 	.word	0x080118f0

0800866c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008672:	4b1e      	ldr	r3, [pc, #120]	@ (80086ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800867c:	4b1b      	ldr	r3, [pc, #108]	@ (80086ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	3301      	adds	r3, #1
 8008688:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b03      	cmp	r3, #3
 800868e:	d10c      	bne.n	80086aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008690:	4a17      	ldr	r2, [pc, #92]	@ (80086f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	fbb2 f3f3 	udiv	r3, r2, r3
 8008698:	4a14      	ldr	r2, [pc, #80]	@ (80086ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800869a:	68d2      	ldr	r2, [r2, #12]
 800869c:	0a12      	lsrs	r2, r2, #8
 800869e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	617b      	str	r3, [r7, #20]
    break;
 80086a8:	e00c      	b.n	80086c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086aa:	4a12      	ldr	r2, [pc, #72]	@ (80086f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b2:	4a0e      	ldr	r2, [pc, #56]	@ (80086ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086b4:	68d2      	ldr	r2, [r2, #12]
 80086b6:	0a12      	lsrs	r2, r2, #8
 80086b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086bc:	fb02 f303 	mul.w	r3, r2, r3
 80086c0:	617b      	str	r3, [r7, #20]
    break;
 80086c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086c4:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	0e5b      	lsrs	r3, r3, #25
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	3301      	adds	r3, #1
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80086de:	687b      	ldr	r3, [r7, #4]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	40021000 	.word	0x40021000
 80086f0:	007a1200 	.word	0x007a1200
 80086f4:	00f42400 	.word	0x00f42400

080086f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008700:	2300      	movs	r3, #0
 8008702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008704:	2300      	movs	r3, #0
 8008706:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8098 	beq.w	8008846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008716:	2300      	movs	r3, #0
 8008718:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800871a:	4b43      	ldr	r3, [pc, #268]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800871c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800871e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10d      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008726:	4b40      	ldr	r3, [pc, #256]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800872a:	4a3f      	ldr	r2, [pc, #252]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800872c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008730:	6593      	str	r3, [r2, #88]	@ 0x58
 8008732:	4b3d      	ldr	r3, [pc, #244]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800873a:	60bb      	str	r3, [r7, #8]
 800873c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800873e:	2301      	movs	r3, #1
 8008740:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008742:	4b3a      	ldr	r3, [pc, #232]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a39      	ldr	r2, [pc, #228]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800874c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800874e:	f7fa fb55 	bl	8002dfc <HAL_GetTick>
 8008752:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008754:	e009      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008756:	f7fa fb51 	bl	8002dfc <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d902      	bls.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	74fb      	strb	r3, [r7, #19]
        break;
 8008768:	e005      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800876a:	4b30      	ldr	r3, [pc, #192]	@ (800882c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0ef      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008776:	7cfb      	ldrb	r3, [r7, #19]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d159      	bne.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800877c:	4b2a      	ldr	r3, [pc, #168]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008786:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01e      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	429a      	cmp	r2, r3
 8008796:	d019      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008798:	4b23      	ldr	r3, [pc, #140]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800879a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800879e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087a4:	4b20      	ldr	r3, [pc, #128]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087c4:	4a18      	ldr	r2, [pc, #96]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d016      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d6:	f7fa fb11 	bl	8002dfc <HAL_GetTick>
 80087da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087dc:	e00b      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087de:	f7fa fb0d 	bl	8002dfc <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d902      	bls.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	74fb      	strb	r3, [r7, #19]
            break;
 80087f4:	e006      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0ec      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008804:	7cfb      	ldrb	r3, [r7, #19]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10b      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800880a:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008818:	4903      	ldr	r1, [pc, #12]	@ (8008828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800881a:	4313      	orrs	r3, r2
 800881c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008820:	e008      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008822:	7cfb      	ldrb	r3, [r7, #19]
 8008824:	74bb      	strb	r3, [r7, #18]
 8008826:	e005      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008828:	40021000 	.word	0x40021000
 800882c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008830:	7cfb      	ldrb	r3, [r7, #19]
 8008832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008834:	7c7b      	ldrb	r3, [r7, #17]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d105      	bne.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800883a:	4ba6      	ldr	r3, [pc, #664]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800883c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883e:	4aa5      	ldr	r2, [pc, #660]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008844:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008852:	4ba0      	ldr	r3, [pc, #640]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008858:	f023 0203 	bic.w	r2, r3, #3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	499c      	ldr	r1, [pc, #624]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008862:	4313      	orrs	r3, r2
 8008864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008874:	4b97      	ldr	r3, [pc, #604]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887a:	f023 020c 	bic.w	r2, r3, #12
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	4994      	ldr	r1, [pc, #592]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008884:	4313      	orrs	r3, r2
 8008886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008896:	4b8f      	ldr	r3, [pc, #572]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800889c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	498b      	ldr	r1, [pc, #556]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00a      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088b8:	4b86      	ldr	r3, [pc, #536]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	4983      	ldr	r1, [pc, #524]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088da:	4b7e      	ldr	r3, [pc, #504]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	497a      	ldr	r1, [pc, #488]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088fc:	4b75      	ldr	r3, [pc, #468]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008902:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	4972      	ldr	r1, [pc, #456]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800890c:	4313      	orrs	r3, r2
 800890e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800891e:	4b6d      	ldr	r3, [pc, #436]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4969      	ldr	r1, [pc, #420]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800892e:	4313      	orrs	r3, r2
 8008930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00a      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008940:	4b64      	ldr	r3, [pc, #400]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008946:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	4961      	ldr	r1, [pc, #388]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008950:	4313      	orrs	r3, r2
 8008952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008962:	4b5c      	ldr	r3, [pc, #368]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008968:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	4958      	ldr	r1, [pc, #352]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008980:	2b00      	cmp	r3, #0
 8008982:	d015      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008984:	4b53      	ldr	r3, [pc, #332]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	4950      	ldr	r1, [pc, #320]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008994:	4313      	orrs	r3, r2
 8008996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089a2:	d105      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089a4:	4b4b      	ldr	r3, [pc, #300]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	4a4a      	ldr	r2, [pc, #296]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d015      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089bc:	4b45      	ldr	r3, [pc, #276]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ca:	4942      	ldr	r1, [pc, #264]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089da:	d105      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089dc:	4b3d      	ldr	r3, [pc, #244]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d015      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089f4:	4b37      	ldr	r3, [pc, #220]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	4934      	ldr	r1, [pc, #208]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a12:	d105      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a14:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4a2e      	ldr	r2, [pc, #184]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d015      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a2c:	4b29      	ldr	r3, [pc, #164]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3a:	4926      	ldr	r1, [pc, #152]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a4a:	d105      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a4c:	4b21      	ldr	r3, [pc, #132]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	4a20      	ldr	r2, [pc, #128]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d015      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a64:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a72:	4918      	ldr	r1, [pc, #96]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a82:	d105      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a84:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	4a12      	ldr	r2, [pc, #72]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d015      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aaa:	490a      	ldr	r1, [pc, #40]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aba:	d105      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008abc:	4b05      	ldr	r3, [pc, #20]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	4a04      	ldr	r2, [pc, #16]	@ (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008ac8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	40021000 	.word	0x40021000

08008ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e049      	b.n	8008b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7f9 fdca 	bl	8002698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f001 f89e 	bl	8009c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d001      	beq.n	8008ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e042      	b.n	8008c26 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a21      	ldr	r2, [pc, #132]	@ (8008c34 <HAL_TIM_Base_Start+0xac>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d018      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bba:	d013      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c38 <HAL_TIM_Base_Start+0xb0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00e      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1c      	ldr	r2, [pc, #112]	@ (8008c3c <HAL_TIM_Base_Start+0xb4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c40 <HAL_TIM_Base_Start+0xb8>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a19      	ldr	r2, [pc, #100]	@ (8008c44 <HAL_TIM_Base_Start+0xbc>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d115      	bne.n	8008c10 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	4b17      	ldr	r3, [pc, #92]	@ (8008c48 <HAL_TIM_Base_Start+0xc0>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	d015      	beq.n	8008c22 <HAL_TIM_Base_Start+0x9a>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bfc:	d011      	beq.n	8008c22 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0201 	orr.w	r2, r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0e:	e008      	b.n	8008c22 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e000      	b.n	8008c24 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40012c00 	.word	0x40012c00
 8008c38:	40000400 	.word	0x40000400
 8008c3c:	40000800 	.word	0x40000800
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	00010007 	.word	0x00010007

08008c4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e049      	b.n	8008cf2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f841 	bl	8008cfa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f000 ffe4 	bl	8009c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008d02:	bf00      	nop
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
	...

08008d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d109      	bne.n	8008d34 <HAL_TIM_PWM_Start+0x24>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	bf14      	ite	ne
 8008d2c:	2301      	movne	r3, #1
 8008d2e:	2300      	moveq	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	e03c      	b.n	8008dae <HAL_TIM_PWM_Start+0x9e>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d109      	bne.n	8008d4e <HAL_TIM_PWM_Start+0x3e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	bf14      	ite	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	2300      	moveq	r3, #0
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	e02f      	b.n	8008dae <HAL_TIM_PWM_Start+0x9e>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d109      	bne.n	8008d68 <HAL_TIM_PWM_Start+0x58>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	bf14      	ite	ne
 8008d60:	2301      	movne	r3, #1
 8008d62:	2300      	moveq	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	e022      	b.n	8008dae <HAL_TIM_PWM_Start+0x9e>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b0c      	cmp	r3, #12
 8008d6c:	d109      	bne.n	8008d82 <HAL_TIM_PWM_Start+0x72>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	bf14      	ite	ne
 8008d7a:	2301      	movne	r3, #1
 8008d7c:	2300      	moveq	r3, #0
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	e015      	b.n	8008dae <HAL_TIM_PWM_Start+0x9e>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d109      	bne.n	8008d9c <HAL_TIM_PWM_Start+0x8c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	bf14      	ite	ne
 8008d94:	2301      	movne	r3, #1
 8008d96:	2300      	moveq	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	e008      	b.n	8008dae <HAL_TIM_PWM_Start+0x9e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	bf14      	ite	ne
 8008da8:	2301      	movne	r3, #1
 8008daa:	2300      	moveq	r3, #0
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e097      	b.n	8008ee6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d104      	bne.n	8008dc6 <HAL_TIM_PWM_Start+0xb6>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dc4:	e023      	b.n	8008e0e <HAL_TIM_PWM_Start+0xfe>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d104      	bne.n	8008dd6 <HAL_TIM_PWM_Start+0xc6>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dd4:	e01b      	b.n	8008e0e <HAL_TIM_PWM_Start+0xfe>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d104      	bne.n	8008de6 <HAL_TIM_PWM_Start+0xd6>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008de4:	e013      	b.n	8008e0e <HAL_TIM_PWM_Start+0xfe>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b0c      	cmp	r3, #12
 8008dea:	d104      	bne.n	8008df6 <HAL_TIM_PWM_Start+0xe6>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008df4:	e00b      	b.n	8008e0e <HAL_TIM_PWM_Start+0xfe>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	d104      	bne.n	8008e06 <HAL_TIM_PWM_Start+0xf6>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e04:	e003      	b.n	8008e0e <HAL_TIM_PWM_Start+0xfe>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2201      	movs	r2, #1
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fc6a 	bl	800a6f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a33      	ldr	r2, [pc, #204]	@ (8008ef0 <HAL_TIM_PWM_Start+0x1e0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d013      	beq.n	8008e4e <HAL_TIM_PWM_Start+0x13e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a32      	ldr	r2, [pc, #200]	@ (8008ef4 <HAL_TIM_PWM_Start+0x1e4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00e      	beq.n	8008e4e <HAL_TIM_PWM_Start+0x13e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a30      	ldr	r2, [pc, #192]	@ (8008ef8 <HAL_TIM_PWM_Start+0x1e8>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d009      	beq.n	8008e4e <HAL_TIM_PWM_Start+0x13e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8008efc <HAL_TIM_PWM_Start+0x1ec>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d004      	beq.n	8008e4e <HAL_TIM_PWM_Start+0x13e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a2d      	ldr	r2, [pc, #180]	@ (8008f00 <HAL_TIM_PWM_Start+0x1f0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d101      	bne.n	8008e52 <HAL_TIM_PWM_Start+0x142>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <HAL_TIM_PWM_Start+0x144>
 8008e52:	2300      	movs	r3, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	@ (8008ef0 <HAL_TIM_PWM_Start+0x1e0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d018      	beq.n	8008ea4 <HAL_TIM_PWM_Start+0x194>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7a:	d013      	beq.n	8008ea4 <HAL_TIM_PWM_Start+0x194>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a20      	ldr	r2, [pc, #128]	@ (8008f04 <HAL_TIM_PWM_Start+0x1f4>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00e      	beq.n	8008ea4 <HAL_TIM_PWM_Start+0x194>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f08 <HAL_TIM_PWM_Start+0x1f8>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d009      	beq.n	8008ea4 <HAL_TIM_PWM_Start+0x194>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a17      	ldr	r2, [pc, #92]	@ (8008ef4 <HAL_TIM_PWM_Start+0x1e4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d004      	beq.n	8008ea4 <HAL_TIM_PWM_Start+0x194>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a16      	ldr	r2, [pc, #88]	@ (8008ef8 <HAL_TIM_PWM_Start+0x1e8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d115      	bne.n	8008ed0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	4b18      	ldr	r3, [pc, #96]	@ (8008f0c <HAL_TIM_PWM_Start+0x1fc>)
 8008eac:	4013      	ands	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b06      	cmp	r3, #6
 8008eb4:	d015      	beq.n	8008ee2 <HAL_TIM_PWM_Start+0x1d2>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ebc:	d011      	beq.n	8008ee2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f042 0201 	orr.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ece:	e008      	b.n	8008ee2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0201 	orr.w	r2, r2, #1
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	e000      	b.n	8008ee4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40012c00 	.word	0x40012c00
 8008ef4:	40013400 	.word	0x40013400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400
 8008f00:	40014800 	.word	0x40014800
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800
 8008f0c:	00010007 	.word	0x00010007

08008f10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e049      	b.n	8008fb6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f841 	bl	8008fbe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f000 fe82 	bl	8009c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_TIM_IC_Start_DMA+0x22>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	e023      	b.n	800903e <HAL_TIM_IC_Start_DMA+0x6a>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d104      	bne.n	8009006 <HAL_TIM_IC_Start_DMA+0x32>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009002:	b2db      	uxtb	r3, r3
 8009004:	e01b      	b.n	800903e <HAL_TIM_IC_Start_DMA+0x6a>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b08      	cmp	r3, #8
 800900a:	d104      	bne.n	8009016 <HAL_TIM_IC_Start_DMA+0x42>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009012:	b2db      	uxtb	r3, r3
 8009014:	e013      	b.n	800903e <HAL_TIM_IC_Start_DMA+0x6a>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b0c      	cmp	r3, #12
 800901a:	d104      	bne.n	8009026 <HAL_TIM_IC_Start_DMA+0x52>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009022:	b2db      	uxtb	r3, r3
 8009024:	e00b      	b.n	800903e <HAL_TIM_IC_Start_DMA+0x6a>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b10      	cmp	r3, #16
 800902a:	d104      	bne.n	8009036 <HAL_TIM_IC_Start_DMA+0x62>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009032:	b2db      	uxtb	r3, r3
 8009034:	e003      	b.n	800903e <HAL_TIM_IC_Start_DMA+0x6a>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800903c:	b2db      	uxtb	r3, r3
 800903e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <HAL_TIM_IC_Start_DMA+0x7c>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800904c:	b2db      	uxtb	r3, r3
 800904e:	e013      	b.n	8009078 <HAL_TIM_IC_Start_DMA+0xa4>
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b04      	cmp	r3, #4
 8009054:	d104      	bne.n	8009060 <HAL_TIM_IC_Start_DMA+0x8c>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800905c:	b2db      	uxtb	r3, r3
 800905e:	e00b      	b.n	8009078 <HAL_TIM_IC_Start_DMA+0xa4>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b08      	cmp	r3, #8
 8009064:	d104      	bne.n	8009070 <HAL_TIM_IC_Start_DMA+0x9c>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e003      	b.n	8009078 <HAL_TIM_IC_Start_DMA+0xa4>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009076:	b2db      	uxtb	r3, r3
 8009078:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800907a:	7dbb      	ldrb	r3, [r7, #22]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d002      	beq.n	8009086 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8009080:	7d7b      	ldrb	r3, [r7, #21]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d101      	bne.n	800908a <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8009086:	2302      	movs	r3, #2
 8009088:	e152      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800908a:	7dbb      	ldrb	r3, [r7, #22]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d153      	bne.n	8009138 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8009090:	7d7b      	ldrb	r3, [r7, #21]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d150      	bne.n	8009138 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <HAL_TIM_IC_Start_DMA+0xce>
 800909c:	887b      	ldrh	r3, [r7, #2]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e144      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <HAL_TIM_IC_Start_DMA+0xe2>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090b4:	e023      	b.n	80090fe <HAL_TIM_IC_Start_DMA+0x12a>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_IC_Start_DMA+0xf2>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090c4:	e01b      	b.n	80090fe <HAL_TIM_IC_Start_DMA+0x12a>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_IC_Start_DMA+0x102>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090d4:	e013      	b.n	80090fe <HAL_TIM_IC_Start_DMA+0x12a>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b0c      	cmp	r3, #12
 80090da:	d104      	bne.n	80090e6 <HAL_TIM_IC_Start_DMA+0x112>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090e4:	e00b      	b.n	80090fe <HAL_TIM_IC_Start_DMA+0x12a>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d104      	bne.n	80090f6 <HAL_TIM_IC_Start_DMA+0x122>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090f4:	e003      	b.n	80090fe <HAL_TIM_IC_Start_DMA+0x12a>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <HAL_TIM_IC_Start_DMA+0x13a>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 800910c:	e016      	b.n	800913c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b04      	cmp	r3, #4
 8009112:	d104      	bne.n	800911e <HAL_TIM_IC_Start_DMA+0x14a>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 800911c:	e00e      	b.n	800913c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b08      	cmp	r3, #8
 8009122:	d104      	bne.n	800912e <HAL_TIM_IC_Start_DMA+0x15a>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 800912c:	e006      	b.n	800913c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8009136:	e001      	b.n	800913c <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0f9      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2201      	movs	r2, #1
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fad3 	bl	800a6f0 <TIM_CCxChannelCmd>

  switch (Channel)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b0c      	cmp	r3, #12
 800914e:	f200 80ad 	bhi.w	80092ac <HAL_TIM_IC_Start_DMA+0x2d8>
 8009152:	a201      	add	r2, pc, #4	@ (adr r2, 8009158 <HAL_TIM_IC_Start_DMA+0x184>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	0800918d 	.word	0x0800918d
 800915c:	080092ad 	.word	0x080092ad
 8009160:	080092ad 	.word	0x080092ad
 8009164:	080092ad 	.word	0x080092ad
 8009168:	080091d5 	.word	0x080091d5
 800916c:	080092ad 	.word	0x080092ad
 8009170:	080092ad 	.word	0x080092ad
 8009174:	080092ad 	.word	0x080092ad
 8009178:	0800921d 	.word	0x0800921d
 800917c:	080092ad 	.word	0x080092ad
 8009180:	080092ad 	.word	0x080092ad
 8009184:	080092ad 	.word	0x080092ad
 8009188:	08009265 	.word	0x08009265
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	4a69      	ldr	r2, [pc, #420]	@ (8009338 <HAL_TIM_IC_Start_DMA+0x364>)
 8009192:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	4a68      	ldr	r2, [pc, #416]	@ (800933c <HAL_TIM_IC_Start_DMA+0x368>)
 800919a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a0:	4a67      	ldr	r2, [pc, #412]	@ (8009340 <HAL_TIM_IC_Start_DMA+0x36c>)
 80091a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3334      	adds	r3, #52	@ 0x34
 80091ae:	4619      	mov	r1, r3
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	887b      	ldrh	r3, [r7, #2]
 80091b4:	f7fc f9e2 	bl	800557c <HAL_DMA_Start_IT>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e0b6      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091d0:	60da      	str	r2, [r3, #12]
      break;
 80091d2:	e06e      	b.n	80092b2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d8:	4a57      	ldr	r2, [pc, #348]	@ (8009338 <HAL_TIM_IC_Start_DMA+0x364>)
 80091da:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	4a56      	ldr	r2, [pc, #344]	@ (800933c <HAL_TIM_IC_Start_DMA+0x368>)
 80091e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e8:	4a55      	ldr	r2, [pc, #340]	@ (8009340 <HAL_TIM_IC_Start_DMA+0x36c>)
 80091ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3338      	adds	r3, #56	@ 0x38
 80091f6:	4619      	mov	r1, r3
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	887b      	ldrh	r3, [r7, #2]
 80091fc:	f7fc f9be 	bl	800557c <HAL_DMA_Start_IT>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e092      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009218:	60da      	str	r2, [r3, #12]
      break;
 800921a:	e04a      	b.n	80092b2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009220:	4a45      	ldr	r2, [pc, #276]	@ (8009338 <HAL_TIM_IC_Start_DMA+0x364>)
 8009222:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	4a44      	ldr	r2, [pc, #272]	@ (800933c <HAL_TIM_IC_Start_DMA+0x368>)
 800922a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009230:	4a43      	ldr	r2, [pc, #268]	@ (8009340 <HAL_TIM_IC_Start_DMA+0x36c>)
 8009232:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	333c      	adds	r3, #60	@ 0x3c
 800923e:	4619      	mov	r1, r3
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	887b      	ldrh	r3, [r7, #2]
 8009244:	f7fc f99a 	bl	800557c <HAL_DMA_Start_IT>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e06e      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68da      	ldr	r2, [r3, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009260:	60da      	str	r2, [r3, #12]
      break;
 8009262:	e026      	b.n	80092b2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009268:	4a33      	ldr	r2, [pc, #204]	@ (8009338 <HAL_TIM_IC_Start_DMA+0x364>)
 800926a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009270:	4a32      	ldr	r2, [pc, #200]	@ (800933c <HAL_TIM_IC_Start_DMA+0x368>)
 8009272:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009278:	4a31      	ldr	r2, [pc, #196]	@ (8009340 <HAL_TIM_IC_Start_DMA+0x36c>)
 800927a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3340      	adds	r3, #64	@ 0x40
 8009286:	4619      	mov	r1, r3
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	887b      	ldrh	r3, [r7, #2]
 800928c:	f7fc f976 	bl	800557c <HAL_DMA_Start_IT>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e04a      	b.n	8009330 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092a8:	60da      	str	r2, [r3, #12]
      break;
 80092aa:	e002      	b.n	80092b2 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	75fb      	strb	r3, [r7, #23]
      break;
 80092b0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a23      	ldr	r2, [pc, #140]	@ (8009344 <HAL_TIM_IC_Start_DMA+0x370>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d018      	beq.n	80092ee <HAL_TIM_IC_Start_DMA+0x31a>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c4:	d013      	beq.n	80092ee <HAL_TIM_IC_Start_DMA+0x31a>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009348 <HAL_TIM_IC_Start_DMA+0x374>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00e      	beq.n	80092ee <HAL_TIM_IC_Start_DMA+0x31a>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a1d      	ldr	r2, [pc, #116]	@ (800934c <HAL_TIM_IC_Start_DMA+0x378>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d009      	beq.n	80092ee <HAL_TIM_IC_Start_DMA+0x31a>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1c      	ldr	r2, [pc, #112]	@ (8009350 <HAL_TIM_IC_Start_DMA+0x37c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d004      	beq.n	80092ee <HAL_TIM_IC_Start_DMA+0x31a>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009354 <HAL_TIM_IC_Start_DMA+0x380>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d115      	bne.n	800931a <HAL_TIM_IC_Start_DMA+0x346>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	4b18      	ldr	r3, [pc, #96]	@ (8009358 <HAL_TIM_IC_Start_DMA+0x384>)
 80092f6:	4013      	ands	r3, r2
 80092f8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2b06      	cmp	r3, #6
 80092fe:	d015      	beq.n	800932c <HAL_TIM_IC_Start_DMA+0x358>
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009306:	d011      	beq.n	800932c <HAL_TIM_IC_Start_DMA+0x358>
    {
      __HAL_TIM_ENABLE(htim);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009318:	e008      	b.n	800932c <HAL_TIM_IC_Start_DMA+0x358>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0201 	orr.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e000      	b.n	800932e <HAL_TIM_IC_Start_DMA+0x35a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800932c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800932e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	08009b27 	.word	0x08009b27
 800933c:	08009bef 	.word	0x08009bef
 8009340:	08009a95 	.word	0x08009a95
 8009344:	40012c00 	.word	0x40012c00
 8009348:	40000400 	.word	0x40000400
 800934c:	40000800 	.word	0x40000800
 8009350:	40013400 	.word	0x40013400
 8009354:	40014000 	.word	0x40014000
 8009358:	00010007 	.word	0x00010007

0800935c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d020      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0302 	and.w	r3, r3, #2
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01b      	beq.n	80093c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0202 	mvn.w	r2, #2
 8009390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7f7 ff4e 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 80093ac:	e005      	b.n	80093ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fb3e 	bl	8009a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb4f 	bl	8009a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d020      	beq.n	800940c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01b      	beq.n	800940c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0204 	mvn.w	r2, #4
 80093dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2202      	movs	r2, #2
 80093e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f7 ff28 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 80093f8:	e005      	b.n	8009406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fb18 	bl	8009a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fb29 	bl	8009a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 0308 	and.w	r3, r3, #8
 8009412:	2b00      	cmp	r3, #0
 8009414:	d020      	beq.n	8009458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f003 0308 	and.w	r3, r3, #8
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01b      	beq.n	8009458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0208 	mvn.w	r2, #8
 8009428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2204      	movs	r2, #4
 800942e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7f7 ff02 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 8009444:	e005      	b.n	8009452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 faf2 	bl	8009a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb03 	bl	8009a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f003 0310 	and.w	r3, r3, #16
 800945e:	2b00      	cmp	r3, #0
 8009460:	d020      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d01b      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0210 	mvn.w	r2, #16
 8009474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2208      	movs	r2, #8
 800947a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7f7 fedc 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
 8009490:	e005      	b.n	800949e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 facc 	bl	8009a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fadd 	bl	8009a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0201 	mvn.w	r2, #1
 80094c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 faaa 	bl	8009a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d104      	bne.n	80094dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f9af 	bl	800a854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00c      	beq.n	800951a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009506:	2b00      	cmp	r3, #0
 8009508:	d007      	beq.n	800951a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f9a7 	bl	800a868 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00c      	beq.n	800953e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d007      	beq.n	800953e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fa97 	bl	8009a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00c      	beq.n	8009562 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b00      	cmp	r3, #0
 8009550:	d007      	beq.n	8009562 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f06f 0220 	mvn.w	r2, #32
 800955a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 f96f 	bl	800a840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00c      	beq.n	8009586 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d007      	beq.n	8009586 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800957e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 f97b 	bl	800a87c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00c      	beq.n	80095aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d007      	beq.n	80095aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80095a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f973 	bl	800a890 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00c      	beq.n	80095ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d007      	beq.n	80095ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80095c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 f96b 	bl	800a8a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00c      	beq.n	80095f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d007      	beq.n	80095f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80095ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 f963 	bl	800a8b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009612:	2b01      	cmp	r3, #1
 8009614:	d101      	bne.n	800961a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009616:	2302      	movs	r3, #2
 8009618:	e066      	b.n	80096e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b14      	cmp	r3, #20
 8009626:	d857      	bhi.n	80096d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009628:	a201      	add	r2, pc, #4	@ (adr r2, 8009630 <HAL_TIM_OC_ConfigChannel+0x34>)
 800962a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962e:	bf00      	nop
 8009630:	08009685 	.word	0x08009685
 8009634:	080096d9 	.word	0x080096d9
 8009638:	080096d9 	.word	0x080096d9
 800963c:	080096d9 	.word	0x080096d9
 8009640:	08009693 	.word	0x08009693
 8009644:	080096d9 	.word	0x080096d9
 8009648:	080096d9 	.word	0x080096d9
 800964c:	080096d9 	.word	0x080096d9
 8009650:	080096a1 	.word	0x080096a1
 8009654:	080096d9 	.word	0x080096d9
 8009658:	080096d9 	.word	0x080096d9
 800965c:	080096d9 	.word	0x080096d9
 8009660:	080096af 	.word	0x080096af
 8009664:	080096d9 	.word	0x080096d9
 8009668:	080096d9 	.word	0x080096d9
 800966c:	080096d9 	.word	0x080096d9
 8009670:	080096bd 	.word	0x080096bd
 8009674:	080096d9 	.word	0x080096d9
 8009678:	080096d9 	.word	0x080096d9
 800967c:	080096d9 	.word	0x080096d9
 8009680:	080096cb 	.word	0x080096cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fb80 	bl	8009d90 <TIM_OC1_SetConfig>
      break;
 8009690:	e025      	b.n	80096de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68b9      	ldr	r1, [r7, #8]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fc09 	bl	8009eb0 <TIM_OC2_SetConfig>
      break;
 800969e:	e01e      	b.n	80096de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fc8c 	bl	8009fc4 <TIM_OC3_SetConfig>
      break;
 80096ac:	e017      	b.n	80096de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68b9      	ldr	r1, [r7, #8]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fd0d 	bl	800a0d4 <TIM_OC4_SetConfig>
      break;
 80096ba:	e010      	b.n	80096de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 fd90 	bl	800a1e8 <TIM_OC5_SetConfig>
      break;
 80096c8:	e009      	b.n	80096de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fded 	bl	800a2b0 <TIM_OC6_SetConfig>
      break;
 80096d6:	e002      	b.n	80096de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
      break;
 80096dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_TIM_IC_ConfigChannel+0x1e>
 800970a:	2302      	movs	r3, #2
 800970c:	e088      	b.n	8009820 <HAL_TIM_IC_ConfigChannel+0x130>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d11b      	bne.n	8009754 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800972c:	f000 fe26 	bl	800a37c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 020c 	bic.w	r2, r2, #12
 800973e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6999      	ldr	r1, [r3, #24]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	619a      	str	r2, [r3, #24]
 8009752:	e060      	b.n	8009816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b04      	cmp	r3, #4
 8009758:	d11c      	bne.n	8009794 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800976a:	f000 fe9e 	bl	800a4aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800977c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6999      	ldr	r1, [r3, #24]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	021a      	lsls	r2, r3, #8
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	619a      	str	r2, [r3, #24]
 8009792:	e040      	b.n	8009816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b08      	cmp	r3, #8
 8009798:	d11b      	bne.n	80097d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80097aa:	f000 feeb 	bl	800a584 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69da      	ldr	r2, [r3, #28]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 020c 	bic.w	r2, r2, #12
 80097bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69d9      	ldr	r1, [r3, #28]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	61da      	str	r2, [r3, #28]
 80097d0:	e021      	b.n	8009816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b0c      	cmp	r3, #12
 80097d6:	d11c      	bne.n	8009812 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80097e8:	f000 ff08 	bl	800a5fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	69da      	ldr	r2, [r3, #28]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80097fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69d9      	ldr	r1, [r3, #28]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	021a      	lsls	r2, r3, #8
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	61da      	str	r2, [r3, #28]
 8009810:	e001      	b.n	8009816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_TIM_ConfigClockSource+0x1c>
 8009840:	2302      	movs	r3, #2
 8009842:	e0de      	b.n	8009a02 <HAL_TIM_ConfigClockSource+0x1da>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800986e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a63      	ldr	r2, [pc, #396]	@ (8009a0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	f000 80a9 	beq.w	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8009884:	4a61      	ldr	r2, [pc, #388]	@ (8009a0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	f200 80ae 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800988c:	4a60      	ldr	r2, [pc, #384]	@ (8009a10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	f000 80a1 	beq.w	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8009894:	4a5e      	ldr	r2, [pc, #376]	@ (8009a10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009896:	4293      	cmp	r3, r2
 8009898:	f200 80a6 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800989c:	4a5d      	ldr	r2, [pc, #372]	@ (8009a14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	f000 8099 	beq.w	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80098a4:	4a5b      	ldr	r2, [pc, #364]	@ (8009a14 <HAL_TIM_ConfigClockSource+0x1ec>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	f200 809e 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098ac:	4a5a      	ldr	r2, [pc, #360]	@ (8009a18 <HAL_TIM_ConfigClockSource+0x1f0>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	f000 8091 	beq.w	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80098b4:	4a58      	ldr	r2, [pc, #352]	@ (8009a18 <HAL_TIM_ConfigClockSource+0x1f0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	f200 8096 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80098c0:	f000 8089 	beq.w	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80098c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80098c8:	f200 808e 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d0:	d03e      	beq.n	8009950 <HAL_TIM_ConfigClockSource+0x128>
 80098d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d6:	f200 8087 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098de:	f000 8086 	beq.w	80099ee <HAL_TIM_ConfigClockSource+0x1c6>
 80098e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e6:	d87f      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098e8:	2b70      	cmp	r3, #112	@ 0x70
 80098ea:	d01a      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0xfa>
 80098ec:	2b70      	cmp	r3, #112	@ 0x70
 80098ee:	d87b      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098f0:	2b60      	cmp	r3, #96	@ 0x60
 80098f2:	d050      	beq.n	8009996 <HAL_TIM_ConfigClockSource+0x16e>
 80098f4:	2b60      	cmp	r3, #96	@ 0x60
 80098f6:	d877      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80098f8:	2b50      	cmp	r3, #80	@ 0x50
 80098fa:	d03c      	beq.n	8009976 <HAL_TIM_ConfigClockSource+0x14e>
 80098fc:	2b50      	cmp	r3, #80	@ 0x50
 80098fe:	d873      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8009900:	2b40      	cmp	r3, #64	@ 0x40
 8009902:	d058      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x18e>
 8009904:	2b40      	cmp	r3, #64	@ 0x40
 8009906:	d86f      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8009908:	2b30      	cmp	r3, #48	@ 0x30
 800990a:	d064      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800990c:	2b30      	cmp	r3, #48	@ 0x30
 800990e:	d86b      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8009910:	2b20      	cmp	r3, #32
 8009912:	d060      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8009914:	2b20      	cmp	r3, #32
 8009916:	d867      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d05c      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800991c:	2b10      	cmp	r3, #16
 800991e:	d05a      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8009920:	e062      	b.n	80099e8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009932:	f000 febd 	bl	800a6b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	609a      	str	r2, [r3, #8]
      break;
 800994e:	e04f      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009960:	f000 fea6 	bl	800a6b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009972:	609a      	str	r2, [r3, #8]
      break;
 8009974:	e03c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009982:	461a      	mov	r2, r3
 8009984:	f000 fd62 	bl	800a44c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2150      	movs	r1, #80	@ 0x50
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fe71 	bl	800a676 <TIM_ITRx_SetConfig>
      break;
 8009994:	e02c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099a2:	461a      	mov	r2, r3
 80099a4:	f000 fdbe 	bl	800a524 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2160      	movs	r1, #96	@ 0x60
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fe61 	bl	800a676 <TIM_ITRx_SetConfig>
      break;
 80099b4:	e01c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099c2:	461a      	mov	r2, r3
 80099c4:	f000 fd42 	bl	800a44c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2140      	movs	r1, #64	@ 0x40
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fe51 	bl	800a676 <TIM_ITRx_SetConfig>
      break;
 80099d4:	e00c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f000 fe48 	bl	800a676 <TIM_ITRx_SetConfig>
      break;
 80099e6:	e003      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
      break;
 80099ec:	e000      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80099ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	00100070 	.word	0x00100070
 8009a10:	00100040 	.word	0x00100040
 8009a14:	00100030 	.word	0x00100030
 8009a18:	00100020 	.word	0x00100020

08009a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d107      	bne.n	8009abc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009aba:	e02a      	b.n	8009b12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d107      	bne.n	8009ad6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ad4:	e01d      	b.n	8009b12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d107      	bne.n	8009af0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2204      	movs	r2, #4
 8009ae4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009aee:	e010      	b.n	8009b12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d107      	bne.n	8009b0a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2208      	movs	r2, #8
 8009afe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b08:	e003      	b.n	8009b12 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff ffb4 	bl	8009a80 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	771a      	strb	r2, [r3, #28]
}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d10f      	bne.n	8009b5e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d146      	bne.n	8009bda <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b5c:	e03d      	b.n	8009bda <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d10f      	bne.n	8009b88 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d131      	bne.n	8009bda <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b86:	e028      	b.n	8009bda <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d10f      	bne.n	8009bb2 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2204      	movs	r2, #4
 8009b96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d11c      	bne.n	8009bda <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009bb0:	e013      	b.n	8009bda <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d10e      	bne.n	8009bda <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2208      	movs	r2, #8
 8009bc0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d107      	bne.n	8009bda <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7f7 fb34 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	771a      	strb	r2, [r3, #28]
}
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d103      	bne.n	8009c0e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	771a      	strb	r2, [r3, #28]
 8009c0c:	e019      	b.n	8009c42 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d103      	bne.n	8009c20 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	771a      	strb	r2, [r3, #28]
 8009c1e:	e010      	b.n	8009c42 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d103      	bne.n	8009c32 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2204      	movs	r2, #4
 8009c2e:	771a      	strb	r2, [r3, #28]
 8009c30:	e007      	b.n	8009c42 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d102      	bne.n	8009c42 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2208      	movs	r2, #8
 8009c40:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fefe 	bl	8009a44 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	771a      	strb	r2, [r3, #28]
}
 8009c4e:	bf00      	nop
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a42      	ldr	r2, [pc, #264]	@ (8009d74 <TIM_Base_SetConfig+0x11c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d00f      	beq.n	8009c90 <TIM_Base_SetConfig+0x38>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c76:	d00b      	beq.n	8009c90 <TIM_Base_SetConfig+0x38>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8009d78 <TIM_Base_SetConfig+0x120>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d007      	beq.n	8009c90 <TIM_Base_SetConfig+0x38>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a3e      	ldr	r2, [pc, #248]	@ (8009d7c <TIM_Base_SetConfig+0x124>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d003      	beq.n	8009c90 <TIM_Base_SetConfig+0x38>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8009d80 <TIM_Base_SetConfig+0x128>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d108      	bne.n	8009ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a33      	ldr	r2, [pc, #204]	@ (8009d74 <TIM_Base_SetConfig+0x11c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01b      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cb0:	d017      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a30      	ldr	r2, [pc, #192]	@ (8009d78 <TIM_Base_SetConfig+0x120>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d013      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8009d7c <TIM_Base_SetConfig+0x124>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00f      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8009d80 <TIM_Base_SetConfig+0x128>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00b      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8009d84 <TIM_Base_SetConfig+0x12c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d007      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8009d88 <TIM_Base_SetConfig+0x130>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d003      	beq.n	8009ce2 <TIM_Base_SetConfig+0x8a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8009d8c <TIM_Base_SetConfig+0x134>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d108      	bne.n	8009cf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a16      	ldr	r2, [pc, #88]	@ (8009d74 <TIM_Base_SetConfig+0x11c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d00f      	beq.n	8009d40 <TIM_Base_SetConfig+0xe8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a17      	ldr	r2, [pc, #92]	@ (8009d80 <TIM_Base_SetConfig+0x128>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00b      	beq.n	8009d40 <TIM_Base_SetConfig+0xe8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a16      	ldr	r2, [pc, #88]	@ (8009d84 <TIM_Base_SetConfig+0x12c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d007      	beq.n	8009d40 <TIM_Base_SetConfig+0xe8>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a15      	ldr	r2, [pc, #84]	@ (8009d88 <TIM_Base_SetConfig+0x130>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d003      	beq.n	8009d40 <TIM_Base_SetConfig+0xe8>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a14      	ldr	r2, [pc, #80]	@ (8009d8c <TIM_Base_SetConfig+0x134>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d103      	bne.n	8009d48 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d105      	bne.n	8009d66 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	f023 0201 	bic.w	r2, r3, #1
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	611a      	str	r2, [r3, #16]
  }
}
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40012c00 	.word	0x40012c00
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40013400 	.word	0x40013400
 8009d84:	40014000 	.word	0x40014000
 8009d88:	40014400 	.word	0x40014400
 8009d8c:	40014800 	.word	0x40014800

08009d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	f023 0201 	bic.w	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0303 	bic.w	r3, r3, #3
 8009dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f023 0302 	bic.w	r3, r3, #2
 8009ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a2c      	ldr	r2, [pc, #176]	@ (8009e9c <TIM_OC1_SetConfig+0x10c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00f      	beq.n	8009e10 <TIM_OC1_SetConfig+0x80>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a2b      	ldr	r2, [pc, #172]	@ (8009ea0 <TIM_OC1_SetConfig+0x110>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d00b      	beq.n	8009e10 <TIM_OC1_SetConfig+0x80>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8009ea4 <TIM_OC1_SetConfig+0x114>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d007      	beq.n	8009e10 <TIM_OC1_SetConfig+0x80>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a29      	ldr	r2, [pc, #164]	@ (8009ea8 <TIM_OC1_SetConfig+0x118>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d003      	beq.n	8009e10 <TIM_OC1_SetConfig+0x80>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a28      	ldr	r2, [pc, #160]	@ (8009eac <TIM_OC1_SetConfig+0x11c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d10c      	bne.n	8009e2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f023 0308 	bic.w	r3, r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f023 0304 	bic.w	r3, r3, #4
 8009e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009e9c <TIM_OC1_SetConfig+0x10c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d00f      	beq.n	8009e52 <TIM_OC1_SetConfig+0xc2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea0 <TIM_OC1_SetConfig+0x110>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00b      	beq.n	8009e52 <TIM_OC1_SetConfig+0xc2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ea4 <TIM_OC1_SetConfig+0x114>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d007      	beq.n	8009e52 <TIM_OC1_SetConfig+0xc2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a18      	ldr	r2, [pc, #96]	@ (8009ea8 <TIM_OC1_SetConfig+0x118>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d003      	beq.n	8009e52 <TIM_OC1_SetConfig+0xc2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a17      	ldr	r2, [pc, #92]	@ (8009eac <TIM_OC1_SetConfig+0x11c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d111      	bne.n	8009e76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	621a      	str	r2, [r3, #32]
}
 8009e90:	bf00      	nop
 8009e92:	371c      	adds	r7, #28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	40012c00 	.word	0x40012c00
 8009ea0:	40013400 	.word	0x40013400
 8009ea4:	40014000 	.word	0x40014000
 8009ea8:	40014400 	.word	0x40014400
 8009eac:	40014800 	.word	0x40014800

08009eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	f023 0210 	bic.w	r2, r3, #16
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f023 0320 	bic.w	r3, r3, #32
 8009efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a28      	ldr	r2, [pc, #160]	@ (8009fb0 <TIM_OC2_SetConfig+0x100>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d003      	beq.n	8009f1c <TIM_OC2_SetConfig+0x6c>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a27      	ldr	r2, [pc, #156]	@ (8009fb4 <TIM_OC2_SetConfig+0x104>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d10d      	bne.n	8009f38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb0 <TIM_OC2_SetConfig+0x100>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00f      	beq.n	8009f60 <TIM_OC2_SetConfig+0xb0>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb4 <TIM_OC2_SetConfig+0x104>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d00b      	beq.n	8009f60 <TIM_OC2_SetConfig+0xb0>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb8 <TIM_OC2_SetConfig+0x108>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d007      	beq.n	8009f60 <TIM_OC2_SetConfig+0xb0>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a1a      	ldr	r2, [pc, #104]	@ (8009fbc <TIM_OC2_SetConfig+0x10c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d003      	beq.n	8009f60 <TIM_OC2_SetConfig+0xb0>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a19      	ldr	r2, [pc, #100]	@ (8009fc0 <TIM_OC2_SetConfig+0x110>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d113      	bne.n	8009f88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	621a      	str	r2, [r3, #32]
}
 8009fa2:	bf00      	nop
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40013400 	.word	0x40013400
 8009fb8:	40014000 	.word	0x40014000
 8009fbc:	40014400 	.word	0x40014400
 8009fc0:	40014800 	.word	0x40014800

08009fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0303 	bic.w	r3, r3, #3
 8009ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a27      	ldr	r2, [pc, #156]	@ (800a0c0 <TIM_OC3_SetConfig+0xfc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d003      	beq.n	800a02e <TIM_OC3_SetConfig+0x6a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a26      	ldr	r2, [pc, #152]	@ (800a0c4 <TIM_OC3_SetConfig+0x100>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d10d      	bne.n	800a04a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a1c      	ldr	r2, [pc, #112]	@ (800a0c0 <TIM_OC3_SetConfig+0xfc>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00f      	beq.n	800a072 <TIM_OC3_SetConfig+0xae>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a1b      	ldr	r2, [pc, #108]	@ (800a0c4 <TIM_OC3_SetConfig+0x100>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00b      	beq.n	800a072 <TIM_OC3_SetConfig+0xae>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a1a      	ldr	r2, [pc, #104]	@ (800a0c8 <TIM_OC3_SetConfig+0x104>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d007      	beq.n	800a072 <TIM_OC3_SetConfig+0xae>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a19      	ldr	r2, [pc, #100]	@ (800a0cc <TIM_OC3_SetConfig+0x108>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d003      	beq.n	800a072 <TIM_OC3_SetConfig+0xae>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a18      	ldr	r2, [pc, #96]	@ (800a0d0 <TIM_OC3_SetConfig+0x10c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d113      	bne.n	800a09a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	4313      	orrs	r3, r2
 800a098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	621a      	str	r2, [r3, #32]
}
 800a0b4:	bf00      	nop
 800a0b6:	371c      	adds	r7, #28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	40012c00 	.word	0x40012c00
 800a0c4:	40013400 	.word	0x40013400
 800a0c8:	40014000 	.word	0x40014000
 800a0cc:	40014400 	.word	0x40014400
 800a0d0:	40014800 	.word	0x40014800

0800a0d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	021b      	lsls	r3, r3, #8
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4313      	orrs	r3, r2
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	031b      	lsls	r3, r3, #12
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a28      	ldr	r2, [pc, #160]	@ (800a1d4 <TIM_OC4_SetConfig+0x100>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d003      	beq.n	800a140 <TIM_OC4_SetConfig+0x6c>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a27      	ldr	r2, [pc, #156]	@ (800a1d8 <TIM_OC4_SetConfig+0x104>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d10d      	bne.n	800a15c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	031b      	lsls	r3, r3, #12
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	4313      	orrs	r3, r2
 800a152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a15a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d4 <TIM_OC4_SetConfig+0x100>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00f      	beq.n	800a184 <TIM_OC4_SetConfig+0xb0>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a1c      	ldr	r2, [pc, #112]	@ (800a1d8 <TIM_OC4_SetConfig+0x104>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_OC4_SetConfig+0xb0>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1dc <TIM_OC4_SetConfig+0x108>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_OC4_SetConfig+0xb0>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a1a      	ldr	r2, [pc, #104]	@ (800a1e0 <TIM_OC4_SetConfig+0x10c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_OC4_SetConfig+0xb0>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a19      	ldr	r2, [pc, #100]	@ (800a1e4 <TIM_OC4_SetConfig+0x110>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d113      	bne.n	800a1ac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a18a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a192:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	019b      	lsls	r3, r3, #6
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	019b      	lsls	r3, r3, #6
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	621a      	str	r2, [r3, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40012c00 	.word	0x40012c00
 800a1d8:	40013400 	.word	0x40013400
 800a1dc:	40014000 	.word	0x40014000
 800a1e0:	40014400 	.word	0x40014400
 800a1e4:	40014800 	.word	0x40014800

0800a1e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a22c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4313      	orrs	r3, r2
 800a238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a17      	ldr	r2, [pc, #92]	@ (800a29c <TIM_OC5_SetConfig+0xb4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00f      	beq.n	800a262 <TIM_OC5_SetConfig+0x7a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a16      	ldr	r2, [pc, #88]	@ (800a2a0 <TIM_OC5_SetConfig+0xb8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00b      	beq.n	800a262 <TIM_OC5_SetConfig+0x7a>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a15      	ldr	r2, [pc, #84]	@ (800a2a4 <TIM_OC5_SetConfig+0xbc>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d007      	beq.n	800a262 <TIM_OC5_SetConfig+0x7a>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a14      	ldr	r2, [pc, #80]	@ (800a2a8 <TIM_OC5_SetConfig+0xc0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_OC5_SetConfig+0x7a>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a13      	ldr	r2, [pc, #76]	@ (800a2ac <TIM_OC5_SetConfig+0xc4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d109      	bne.n	800a276 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	621a      	str	r2, [r3, #32]
}
 800a290:	bf00      	nop
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	40012c00 	.word	0x40012c00
 800a2a0:	40013400 	.word	0x40013400
 800a2a4:	40014000 	.word	0x40014000
 800a2a8:	40014400 	.word	0x40014400
 800a2ac:	40014800 	.word	0x40014800

0800a2b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	051b      	lsls	r3, r3, #20
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a18      	ldr	r2, [pc, #96]	@ (800a368 <TIM_OC6_SetConfig+0xb8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00f      	beq.n	800a32c <TIM_OC6_SetConfig+0x7c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a17      	ldr	r2, [pc, #92]	@ (800a36c <TIM_OC6_SetConfig+0xbc>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d00b      	beq.n	800a32c <TIM_OC6_SetConfig+0x7c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a16      	ldr	r2, [pc, #88]	@ (800a370 <TIM_OC6_SetConfig+0xc0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d007      	beq.n	800a32c <TIM_OC6_SetConfig+0x7c>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a15      	ldr	r2, [pc, #84]	@ (800a374 <TIM_OC6_SetConfig+0xc4>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d003      	beq.n	800a32c <TIM_OC6_SetConfig+0x7c>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a14      	ldr	r2, [pc, #80]	@ (800a378 <TIM_OC6_SetConfig+0xc8>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d109      	bne.n	800a340 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	029b      	lsls	r3, r3, #10
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	621a      	str	r2, [r3, #32]
}
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	40012c00 	.word	0x40012c00
 800a36c:	40013400 	.word	0x40013400
 800a370:	40014000 	.word	0x40014000
 800a374:	40014400 	.word	0x40014400
 800a378:	40014800 	.word	0x40014800

0800a37c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	f023 0201 	bic.w	r2, r3, #1
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	4a24      	ldr	r2, [pc, #144]	@ (800a438 <TIM_TI1_SetConfig+0xbc>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d013      	beq.n	800a3d2 <TIM_TI1_SetConfig+0x56>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b0:	d00f      	beq.n	800a3d2 <TIM_TI1_SetConfig+0x56>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4a21      	ldr	r2, [pc, #132]	@ (800a43c <TIM_TI1_SetConfig+0xc0>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d00b      	beq.n	800a3d2 <TIM_TI1_SetConfig+0x56>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4a20      	ldr	r2, [pc, #128]	@ (800a440 <TIM_TI1_SetConfig+0xc4>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d007      	beq.n	800a3d2 <TIM_TI1_SetConfig+0x56>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a444 <TIM_TI1_SetConfig+0xc8>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d003      	beq.n	800a3d2 <TIM_TI1_SetConfig+0x56>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a448 <TIM_TI1_SetConfig+0xcc>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d101      	bne.n	800a3d6 <TIM_TI1_SetConfig+0x5a>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e000      	b.n	800a3d8 <TIM_TI1_SetConfig+0x5c>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d008      	beq.n	800a3ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f023 0303 	bic.w	r3, r3, #3
 800a3e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e003      	b.n	800a3f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f043 0301 	orr.w	r3, r3, #1
 800a3f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	b2db      	uxtb	r3, r3
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f023 030a 	bic.w	r3, r3, #10
 800a410:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f003 030a 	and.w	r3, r3, #10
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	621a      	str	r2, [r3, #32]
}
 800a42a:	bf00      	nop
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	40012c00 	.word	0x40012c00
 800a43c:	40000400 	.word	0x40000400
 800a440:	40000800 	.word	0x40000800
 800a444:	40013400 	.word	0x40013400
 800a448:	40014000 	.word	0x40014000

0800a44c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	f023 0201 	bic.w	r2, r3, #1
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	4313      	orrs	r3, r2
 800a480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f023 030a 	bic.w	r3, r3, #10
 800a488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b087      	sub	sp, #28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	f023 0210 	bic.w	r2, r3, #16
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	031b      	lsls	r3, r3, #12
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a4fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	011b      	lsls	r3, r3, #4
 800a502:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	4313      	orrs	r3, r2
 800a50a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	621a      	str	r2, [r3, #32]
}
 800a518:	bf00      	nop
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	f023 0210 	bic.w	r2, r3, #16
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a54e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	031b      	lsls	r3, r3, #12
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	4313      	orrs	r3, r2
 800a558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a560:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	4313      	orrs	r3, r2
 800a56a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	621a      	str	r2, [r3, #32]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	011b      	lsls	r3, r3, #4
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a5d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	621a      	str	r2, [r3, #32]
}
 800a5f0:	bf00      	nop
 800a5f2:	371c      	adds	r7, #28
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a628:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	021b      	lsls	r3, r3, #8
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a63a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	031b      	lsls	r3, r3, #12
 800a640:	b29b      	uxth	r3, r3
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a64e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	031b      	lsls	r3, r3, #12
 800a654:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	621a      	str	r2, [r3, #32]
}
 800a66a:	bf00      	nop
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a676:	b480      	push	{r7}
 800a678:	b085      	sub	sp, #20
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a68c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	f043 0307 	orr.w	r3, r3, #7
 800a69c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	609a      	str	r2, [r3, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	609a      	str	r2, [r3, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f003 031f 	and.w	r3, r3, #31
 800a702:	2201      	movs	r2, #1
 800a704:	fa02 f303 	lsl.w	r3, r2, r3
 800a708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a1a      	ldr	r2, [r3, #32]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	43db      	mvns	r3, r3
 800a712:	401a      	ands	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	fa01 f303 	lsl.w	r3, r1, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	621a      	str	r2, [r3, #32]
}
 800a72e:	bf00      	nop
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a750:	2302      	movs	r3, #2
 800a752:	e065      	b.n	800a820 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a2c      	ldr	r2, [pc, #176]	@ (800a82c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d004      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a2b      	ldr	r2, [pc, #172]	@ (800a830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d108      	bne.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a78e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a7a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a82c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d018      	beq.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ca:	d013      	beq.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a18      	ldr	r2, [pc, #96]	@ (800a834 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d00e      	beq.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a17      	ldr	r2, [pc, #92]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d009      	beq.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a12      	ldr	r2, [pc, #72]	@ (800a830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d004      	beq.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a13      	ldr	r2, [pc, #76]	@ (800a83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d10c      	bne.n	800a80e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	4313      	orrs	r3, r2
 800a804:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	40012c00 	.word	0x40012c00
 800a830:	40013400 	.word	0x40013400
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40014000 	.word	0x40014000

0800a840 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e042      	b.n	800a964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7f7 ffc1 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2224      	movs	r2, #36	@ 0x24
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 0201 	bic.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fb9e 	bl	800b058 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f8cf 	bl	800aac0 <UART_SetConfig>
 800a922:	4603      	mov	r3, r0
 800a924:	2b01      	cmp	r3, #1
 800a926:	d101      	bne.n	800a92c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e01b      	b.n	800a964 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a93a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a94a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fc1d 	bl	800b19c <UART_CheckIdleState>
 800a962:	4603      	mov	r3, r0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a980:	2b20      	cmp	r3, #32
 800a982:	d167      	bne.n	800aa54 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <HAL_UART_Transmit_DMA+0x24>
 800a98a:	88fb      	ldrh	r3, [r7, #6]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e060      	b.n	800aa56 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	88fa      	ldrh	r2, [r7, #6]
 800a99e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	88fa      	ldrh	r2, [r7, #6]
 800a9a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2221      	movs	r2, #33	@ 0x21
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d028      	beq.n	800aa14 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9c6:	4a26      	ldr	r2, [pc, #152]	@ (800aa60 <HAL_UART_Transmit_DMA+0xf4>)
 800a9c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9ce:	4a25      	ldr	r2, [pc, #148]	@ (800aa64 <HAL_UART_Transmit_DMA+0xf8>)
 800a9d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9d6:	4a24      	ldr	r2, [pc, #144]	@ (800aa68 <HAL_UART_Transmit_DMA+0xfc>)
 800a9d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9de:	2200      	movs	r2, #0
 800a9e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3328      	adds	r3, #40	@ 0x28
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	88fb      	ldrh	r3, [r7, #6]
 800a9f6:	f7fa fdc1 	bl	800557c <HAL_DMA_Start_IT>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d009      	beq.n	800aa14 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2210      	movs	r2, #16
 800aa04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e020      	b.n	800aa56 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2240      	movs	r2, #64	@ 0x40
 800aa1a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	e853 3f00 	ldrex	r3, [r3]
 800aa2a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa32:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3308      	adds	r3, #8
 800aa3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa3c:	623a      	str	r2, [r7, #32]
 800aa3e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa40:	69f9      	ldr	r1, [r7, #28]
 800aa42:	6a3a      	ldr	r2, [r7, #32]
 800aa44:	e841 2300 	strex	r3, r2, [r1]
 800aa48:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e5      	bne.n	800aa1c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	e000      	b.n	800aa56 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aa54:	2302      	movs	r3, #2
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3728      	adds	r7, #40	@ 0x28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800b667 	.word	0x0800b667
 800aa64:	0800b701 	.word	0x0800b701
 800aa68:	0800b887 	.word	0x0800b887

0800aa6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aac4:	b08c      	sub	sp, #48	@ 0x30
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	431a      	orrs	r2, r3
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	431a      	orrs	r2, r3
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4bab      	ldr	r3, [pc, #684]	@ (800ad9c <UART_SetConfig+0x2dc>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	6812      	ldr	r2, [r2, #0]
 800aaf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4aa0      	ldr	r2, [pc, #640]	@ (800ada0 <UART_SetConfig+0x2e0>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d004      	beq.n	800ab2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ab36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	6812      	ldr	r2, [r2, #0]
 800ab3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab40:	430b      	orrs	r3, r1
 800ab42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4a:	f023 010f 	bic.w	r1, r3, #15
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a91      	ldr	r2, [pc, #580]	@ (800ada4 <UART_SetConfig+0x2e4>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d125      	bne.n	800abb0 <UART_SetConfig+0xf0>
 800ab64:	4b90      	ldr	r3, [pc, #576]	@ (800ada8 <UART_SetConfig+0x2e8>)
 800ab66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d81a      	bhi.n	800aba8 <UART_SetConfig+0xe8>
 800ab72:	a201      	add	r2, pc, #4	@ (adr r2, 800ab78 <UART_SetConfig+0xb8>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800ab89 	.word	0x0800ab89
 800ab7c:	0800ab99 	.word	0x0800ab99
 800ab80:	0800ab91 	.word	0x0800ab91
 800ab84:	0800aba1 	.word	0x0800aba1
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab8e:	e0d6      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ab90:	2302      	movs	r3, #2
 800ab92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab96:	e0d2      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ab98:	2304      	movs	r3, #4
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9e:	e0ce      	b.n	800ad3e <UART_SetConfig+0x27e>
 800aba0:	2308      	movs	r3, #8
 800aba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba6:	e0ca      	b.n	800ad3e <UART_SetConfig+0x27e>
 800aba8:	2310      	movs	r3, #16
 800abaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abae:	e0c6      	b.n	800ad3e <UART_SetConfig+0x27e>
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a7d      	ldr	r2, [pc, #500]	@ (800adac <UART_SetConfig+0x2ec>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d138      	bne.n	800ac2c <UART_SetConfig+0x16c>
 800abba:	4b7b      	ldr	r3, [pc, #492]	@ (800ada8 <UART_SetConfig+0x2e8>)
 800abbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc0:	f003 030c 	and.w	r3, r3, #12
 800abc4:	2b0c      	cmp	r3, #12
 800abc6:	d82d      	bhi.n	800ac24 <UART_SetConfig+0x164>
 800abc8:	a201      	add	r2, pc, #4	@ (adr r2, 800abd0 <UART_SetConfig+0x110>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800ac05 	.word	0x0800ac05
 800abd4:	0800ac25 	.word	0x0800ac25
 800abd8:	0800ac25 	.word	0x0800ac25
 800abdc:	0800ac25 	.word	0x0800ac25
 800abe0:	0800ac15 	.word	0x0800ac15
 800abe4:	0800ac25 	.word	0x0800ac25
 800abe8:	0800ac25 	.word	0x0800ac25
 800abec:	0800ac25 	.word	0x0800ac25
 800abf0:	0800ac0d 	.word	0x0800ac0d
 800abf4:	0800ac25 	.word	0x0800ac25
 800abf8:	0800ac25 	.word	0x0800ac25
 800abfc:	0800ac25 	.word	0x0800ac25
 800ac00:	0800ac1d 	.word	0x0800ac1d
 800ac04:	2300      	movs	r3, #0
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0a:	e098      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac12:	e094      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac14:	2304      	movs	r3, #4
 800ac16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1a:	e090      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac1c:	2308      	movs	r3, #8
 800ac1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac22:	e08c      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac24:	2310      	movs	r3, #16
 800ac26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2a:	e088      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a5f      	ldr	r2, [pc, #380]	@ (800adb0 <UART_SetConfig+0x2f0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d125      	bne.n	800ac82 <UART_SetConfig+0x1c2>
 800ac36:	4b5c      	ldr	r3, [pc, #368]	@ (800ada8 <UART_SetConfig+0x2e8>)
 800ac38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac40:	2b30      	cmp	r3, #48	@ 0x30
 800ac42:	d016      	beq.n	800ac72 <UART_SetConfig+0x1b2>
 800ac44:	2b30      	cmp	r3, #48	@ 0x30
 800ac46:	d818      	bhi.n	800ac7a <UART_SetConfig+0x1ba>
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d00a      	beq.n	800ac62 <UART_SetConfig+0x1a2>
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d814      	bhi.n	800ac7a <UART_SetConfig+0x1ba>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <UART_SetConfig+0x19a>
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	d008      	beq.n	800ac6a <UART_SetConfig+0x1aa>
 800ac58:	e00f      	b.n	800ac7a <UART_SetConfig+0x1ba>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac60:	e06d      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac62:	2302      	movs	r3, #2
 800ac64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac68:	e069      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac6a:	2304      	movs	r3, #4
 800ac6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac70:	e065      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac72:	2308      	movs	r3, #8
 800ac74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac78:	e061      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac80:	e05d      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a4b      	ldr	r2, [pc, #300]	@ (800adb4 <UART_SetConfig+0x2f4>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d125      	bne.n	800acd8 <UART_SetConfig+0x218>
 800ac8c:	4b46      	ldr	r3, [pc, #280]	@ (800ada8 <UART_SetConfig+0x2e8>)
 800ac8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac96:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac98:	d016      	beq.n	800acc8 <UART_SetConfig+0x208>
 800ac9a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac9c:	d818      	bhi.n	800acd0 <UART_SetConfig+0x210>
 800ac9e:	2b80      	cmp	r3, #128	@ 0x80
 800aca0:	d00a      	beq.n	800acb8 <UART_SetConfig+0x1f8>
 800aca2:	2b80      	cmp	r3, #128	@ 0x80
 800aca4:	d814      	bhi.n	800acd0 <UART_SetConfig+0x210>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <UART_SetConfig+0x1f0>
 800acaa:	2b40      	cmp	r3, #64	@ 0x40
 800acac:	d008      	beq.n	800acc0 <UART_SetConfig+0x200>
 800acae:	e00f      	b.n	800acd0 <UART_SetConfig+0x210>
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb6:	e042      	b.n	800ad3e <UART_SetConfig+0x27e>
 800acb8:	2302      	movs	r3, #2
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acbe:	e03e      	b.n	800ad3e <UART_SetConfig+0x27e>
 800acc0:	2304      	movs	r3, #4
 800acc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acc6:	e03a      	b.n	800ad3e <UART_SetConfig+0x27e>
 800acc8:	2308      	movs	r3, #8
 800acca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acce:	e036      	b.n	800ad3e <UART_SetConfig+0x27e>
 800acd0:	2310      	movs	r3, #16
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd6:	e032      	b.n	800ad3e <UART_SetConfig+0x27e>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a30      	ldr	r2, [pc, #192]	@ (800ada0 <UART_SetConfig+0x2e0>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d12a      	bne.n	800ad38 <UART_SetConfig+0x278>
 800ace2:	4b31      	ldr	r3, [pc, #196]	@ (800ada8 <UART_SetConfig+0x2e8>)
 800ace4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ace8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800acec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acf0:	d01a      	beq.n	800ad28 <UART_SetConfig+0x268>
 800acf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acf6:	d81b      	bhi.n	800ad30 <UART_SetConfig+0x270>
 800acf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acfc:	d00c      	beq.n	800ad18 <UART_SetConfig+0x258>
 800acfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad02:	d815      	bhi.n	800ad30 <UART_SetConfig+0x270>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <UART_SetConfig+0x250>
 800ad08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad0c:	d008      	beq.n	800ad20 <UART_SetConfig+0x260>
 800ad0e:	e00f      	b.n	800ad30 <UART_SetConfig+0x270>
 800ad10:	2300      	movs	r3, #0
 800ad12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad16:	e012      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1e:	e00e      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ad20:	2304      	movs	r3, #4
 800ad22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad26:	e00a      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ad28:	2308      	movs	r3, #8
 800ad2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2e:	e006      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ad30:	2310      	movs	r3, #16
 800ad32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad36:	e002      	b.n	800ad3e <UART_SetConfig+0x27e>
 800ad38:	2310      	movs	r3, #16
 800ad3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a17      	ldr	r2, [pc, #92]	@ (800ada0 <UART_SetConfig+0x2e0>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	f040 80a8 	bne.w	800ae9a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad4e:	2b08      	cmp	r3, #8
 800ad50:	d834      	bhi.n	800adbc <UART_SetConfig+0x2fc>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <UART_SetConfig+0x298>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800adbd 	.word	0x0800adbd
 800ad60:	0800ad85 	.word	0x0800ad85
 800ad64:	0800adbd 	.word	0x0800adbd
 800ad68:	0800ad8b 	.word	0x0800ad8b
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800adbd 	.word	0x0800adbd
 800ad74:	0800adbd 	.word	0x0800adbd
 800ad78:	0800ad93 	.word	0x0800ad93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7c:	f7fd fc4a 	bl	8008614 <HAL_RCC_GetPCLK1Freq>
 800ad80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad82:	e021      	b.n	800adc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad84:	4b0c      	ldr	r3, [pc, #48]	@ (800adb8 <UART_SetConfig+0x2f8>)
 800ad86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad88:	e01e      	b.n	800adc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad8a:	f7fd fbd5 	bl	8008538 <HAL_RCC_GetSysClockFreq>
 800ad8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad90:	e01a      	b.n	800adc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad98:	e016      	b.n	800adc8 <UART_SetConfig+0x308>
 800ad9a:	bf00      	nop
 800ad9c:	cfff69f3 	.word	0xcfff69f3
 800ada0:	40008000 	.word	0x40008000
 800ada4:	40013800 	.word	0x40013800
 800ada8:	40021000 	.word	0x40021000
 800adac:	40004400 	.word	0x40004400
 800adb0:	40004800 	.word	0x40004800
 800adb4:	40004c00 	.word	0x40004c00
 800adb8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 812a 	beq.w	800b024 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add4:	4a9e      	ldr	r2, [pc, #632]	@ (800b050 <UART_SetConfig+0x590>)
 800add6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adda:	461a      	mov	r2, r3
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	4613      	mov	r3, r2
 800adea:	005b      	lsls	r3, r3, #1
 800adec:	4413      	add	r3, r2
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d305      	bcc.n	800ae00 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adfa:	69ba      	ldr	r2, [r7, #24]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d903      	bls.n	800ae08 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae06:	e10d      	b.n	800b024 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
 800ae0e:	60fa      	str	r2, [r7, #12]
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae14:	4a8e      	ldr	r2, [pc, #568]	@ (800b050 <UART_SetConfig+0x590>)
 800ae16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	607a      	str	r2, [r7, #4]
 800ae22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae2a:	f7f5 ff55 	bl	8000cd8 <__aeabi_uldivmod>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4610      	mov	r0, r2
 800ae34:	4619      	mov	r1, r3
 800ae36:	f04f 0200 	mov.w	r2, #0
 800ae3a:	f04f 0300 	mov.w	r3, #0
 800ae3e:	020b      	lsls	r3, r1, #8
 800ae40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae44:	0202      	lsls	r2, r0, #8
 800ae46:	6979      	ldr	r1, [r7, #20]
 800ae48:	6849      	ldr	r1, [r1, #4]
 800ae4a:	0849      	lsrs	r1, r1, #1
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	4605      	mov	r5, r0
 800ae52:	eb12 0804 	adds.w	r8, r2, r4
 800ae56:	eb43 0905 	adc.w	r9, r3, r5
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	469a      	mov	sl, r3
 800ae62:	4693      	mov	fp, r2
 800ae64:	4652      	mov	r2, sl
 800ae66:	465b      	mov	r3, fp
 800ae68:	4640      	mov	r0, r8
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	f7f5 ff34 	bl	8000cd8 <__aeabi_uldivmod>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4613      	mov	r3, r2
 800ae76:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae7e:	d308      	bcc.n	800ae92 <UART_SetConfig+0x3d2>
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae86:	d204      	bcs.n	800ae92 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6a3a      	ldr	r2, [r7, #32]
 800ae8e:	60da      	str	r2, [r3, #12]
 800ae90:	e0c8      	b.n	800b024 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae98:	e0c4      	b.n	800b024 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aea2:	d167      	bne.n	800af74 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800aea4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d828      	bhi.n	800aefe <UART_SetConfig+0x43e>
 800aeac:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb4 <UART_SetConfig+0x3f4>)
 800aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb2:	bf00      	nop
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aee1 	.word	0x0800aee1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	0800aeff 	.word	0x0800aeff
 800aec4:	0800aeef 	.word	0x0800aeef
 800aec8:	0800aeff 	.word	0x0800aeff
 800aecc:	0800aeff 	.word	0x0800aeff
 800aed0:	0800aeff 	.word	0x0800aeff
 800aed4:	0800aef7 	.word	0x0800aef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aed8:	f7fd fb9c 	bl	8008614 <HAL_RCC_GetPCLK1Freq>
 800aedc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aede:	e014      	b.n	800af0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee0:	f7fd fbae 	bl	8008640 <HAL_RCC_GetPCLK2Freq>
 800aee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aee6:	e010      	b.n	800af0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aee8:	4b5a      	ldr	r3, [pc, #360]	@ (800b054 <UART_SetConfig+0x594>)
 800aeea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aeec:	e00d      	b.n	800af0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeee:	f7fd fb23 	bl	8008538 <HAL_RCC_GetSysClockFreq>
 800aef2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aef4:	e009      	b.n	800af0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aefa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aefc:	e005      	b.n	800af0a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8089 	beq.w	800b024 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af16:	4a4e      	ldr	r2, [pc, #312]	@ (800b050 <UART_SetConfig+0x590>)
 800af18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af20:	fbb3 f3f2 	udiv	r3, r3, r2
 800af24:	005a      	lsls	r2, r3, #1
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	085b      	lsrs	r3, r3, #1
 800af2c:	441a      	add	r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	fbb2 f3f3 	udiv	r3, r2, r3
 800af36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	d916      	bls.n	800af6c <UART_SetConfig+0x4ac>
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af44:	d212      	bcs.n	800af6c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	f023 030f 	bic.w	r3, r3, #15
 800af4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	085b      	lsrs	r3, r3, #1
 800af54:	b29b      	uxth	r3, r3
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	8bfb      	ldrh	r3, [r7, #30]
 800af5e:	4313      	orrs	r3, r2
 800af60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	8bfa      	ldrh	r2, [r7, #30]
 800af68:	60da      	str	r2, [r3, #12]
 800af6a:	e05b      	b.n	800b024 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af72:	e057      	b.n	800b024 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af78:	2b08      	cmp	r3, #8
 800af7a:	d828      	bhi.n	800afce <UART_SetConfig+0x50e>
 800af7c:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <UART_SetConfig+0x4c4>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800afa9 	.word	0x0800afa9
 800af88:	0800afb1 	.word	0x0800afb1
 800af8c:	0800afb9 	.word	0x0800afb9
 800af90:	0800afcf 	.word	0x0800afcf
 800af94:	0800afbf 	.word	0x0800afbf
 800af98:	0800afcf 	.word	0x0800afcf
 800af9c:	0800afcf 	.word	0x0800afcf
 800afa0:	0800afcf 	.word	0x0800afcf
 800afa4:	0800afc7 	.word	0x0800afc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afa8:	f7fd fb34 	bl	8008614 <HAL_RCC_GetPCLK1Freq>
 800afac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afae:	e014      	b.n	800afda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afb0:	f7fd fb46 	bl	8008640 <HAL_RCC_GetPCLK2Freq>
 800afb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afb6:	e010      	b.n	800afda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afb8:	4b26      	ldr	r3, [pc, #152]	@ (800b054 <UART_SetConfig+0x594>)
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afbc:	e00d      	b.n	800afda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afbe:	f7fd fabb 	bl	8008538 <HAL_RCC_GetSysClockFreq>
 800afc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afc4:	e009      	b.n	800afda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afcc:	e005      	b.n	800afda <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800afd8:	bf00      	nop
    }

    if (pclk != 0U)
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d021      	beq.n	800b024 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe4:	4a1a      	ldr	r2, [pc, #104]	@ (800b050 <UART_SetConfig+0x590>)
 800afe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afea:	461a      	mov	r2, r3
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	fbb3 f2f2 	udiv	r2, r3, r2
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	085b      	lsrs	r3, r3, #1
 800aff8:	441a      	add	r2, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	2b0f      	cmp	r3, #15
 800b008:	d909      	bls.n	800b01e <UART_SetConfig+0x55e>
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b010:	d205      	bcs.n	800b01e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	b29a      	uxth	r2, r3
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60da      	str	r2, [r3, #12]
 800b01c:	e002      	b.n	800b024 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2201      	movs	r2, #1
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2201      	movs	r2, #1
 800b030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2200      	movs	r2, #0
 800b038:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2200      	movs	r2, #0
 800b03e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b040:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b044:	4618      	mov	r0, r3
 800b046:	3730      	adds	r7, #48	@ 0x30
 800b048:	46bd      	mov	sp, r7
 800b04a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b04e:	bf00      	nop
 800b050:	080118f8 	.word	0x080118f8
 800b054:	00f42400 	.word	0x00f42400

0800b058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b064:	f003 0308 	and.w	r3, r3, #8
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a8:	f003 0302 	and.w	r3, r3, #2
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ca:	f003 0304 	and.w	r3, r3, #4
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ec:	f003 0310 	and.w	r3, r3, #16
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00a      	beq.n	800b10a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10e:	f003 0320 	and.w	r3, r3, #32
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01a      	beq.n	800b16e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b156:	d10a      	bne.n	800b16e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	605a      	str	r2, [r3, #4]
  }
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b098      	sub	sp, #96	@ 0x60
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1ac:	f7f7 fe26 	bl	8002dfc <HAL_GetTick>
 800b1b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0308 	and.w	r3, r3, #8
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	d12f      	bne.n	800b220 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f88e 	bl	800b2f0 <UART_WaitOnFlagUntilTimeout>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d022      	beq.n	800b220 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e2:	e853 3f00 	ldrex	r3, [r3]
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e6      	bne.n	800b1da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2220      	movs	r2, #32
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e063      	b.n	800b2e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0304 	and.w	r3, r3, #4
 800b22a:	2b04      	cmp	r3, #4
 800b22c:	d149      	bne.n	800b2c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b22e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b236:	2200      	movs	r2, #0
 800b238:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f857 	bl	800b2f0 <UART_WaitOnFlagUntilTimeout>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d03c      	beq.n	800b2c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b250:	e853 3f00 	ldrex	r3, [r3]
 800b254:	623b      	str	r3, [r7, #32]
   return(result);
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b25c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b266:	633b      	str	r3, [r7, #48]	@ 0x30
 800b268:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b26c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e6      	bne.n	800b248 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	60fb      	str	r3, [r7, #12]
   return(result);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f023 0301 	bic.w	r3, r3, #1
 800b290:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3308      	adds	r3, #8
 800b298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b29a:	61fa      	str	r2, [r7, #28]
 800b29c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	69b9      	ldr	r1, [r7, #24]
 800b2a0:	69fa      	ldr	r2, [r7, #28]
 800b2a2:	e841 2300 	strex	r3, r2, [r1]
 800b2a6:	617b      	str	r3, [r7, #20]
   return(result);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e5      	bne.n	800b27a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e012      	b.n	800b2e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3758      	adds	r7, #88	@ 0x58
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b300:	e04f      	b.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b308:	d04b      	beq.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b30a:	f7f7 fd77 	bl	8002dfc <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	429a      	cmp	r2, r3
 800b318:	d302      	bcc.n	800b320 <UART_WaitOnFlagUntilTimeout+0x30>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e04e      	b.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0304 	and.w	r3, r3, #4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d037      	beq.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2b80      	cmp	r3, #128	@ 0x80
 800b336:	d034      	beq.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b40      	cmp	r3, #64	@ 0x40
 800b33c:	d031      	beq.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d110      	bne.n	800b36e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2208      	movs	r2, #8
 800b352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f920 	bl	800b59a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2208      	movs	r2, #8
 800b35e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e029      	b.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	69db      	ldr	r3, [r3, #28]
 800b374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b37c:	d111      	bne.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f000 f906 	bl	800b59a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2220      	movs	r2, #32
 800b392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e00f      	b.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	bf0c      	ite	eq
 800b3b2:	2301      	moveq	r3, #1
 800b3b4:	2300      	movne	r3, #0
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d0a0      	beq.n	800b302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b096      	sub	sp, #88	@ 0x58
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	88fa      	ldrh	r2, [r7, #6]
 800b3e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2222      	movs	r2, #34	@ 0x22
 800b3f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d02d      	beq.n	800b45e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b408:	4a40      	ldr	r2, [pc, #256]	@ (800b50c <UART_Start_Receive_DMA+0x140>)
 800b40a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b412:	4a3f      	ldr	r2, [pc, #252]	@ (800b510 <UART_Start_Receive_DMA+0x144>)
 800b414:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b41c:	4a3d      	ldr	r2, [pc, #244]	@ (800b514 <UART_Start_Receive_DMA+0x148>)
 800b41e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b426:	2200      	movs	r2, #0
 800b428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3324      	adds	r3, #36	@ 0x24
 800b436:	4619      	mov	r1, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b43c:	461a      	mov	r2, r3
 800b43e:	88fb      	ldrh	r3, [r7, #6]
 800b440:	f7fa f89c 	bl	800557c <HAL_DMA_Start_IT>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d009      	beq.n	800b45e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2210      	movs	r2, #16
 800b44e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2220      	movs	r2, #32
 800b456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e051      	b.n	800b502 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d018      	beq.n	800b498 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b47a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	461a      	mov	r2, r3
 800b482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b486:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b48a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e6      	bne.n	800b466 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3308      	adds	r3, #8
 800b49e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	f043 0301 	orr.w	r3, r3, #1
 800b4ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4b8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b4ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4c0:	e841 2300 	strex	r3, r2, [r1]
 800b4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e5      	bne.n	800b498 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	e853 3f00 	ldrex	r3, [r3]
 800b4da:	613b      	str	r3, [r7, #16]
   return(result);
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4ec:	623a      	str	r2, [r7, #32]
 800b4ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f0:	69f9      	ldr	r1, [r7, #28]
 800b4f2:	6a3a      	ldr	r2, [r7, #32]
 800b4f4:	e841 2300 	strex	r3, r2, [r1]
 800b4f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e5      	bne.n	800b4cc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3758      	adds	r7, #88	@ 0x58
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	0800b71d 	.word	0x0800b71d
 800b510:	0800b849 	.word	0x0800b849
 800b514:	0800b887 	.word	0x0800b887

0800b518 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b518:	b480      	push	{r7}
 800b51a:	b08f      	sub	sp, #60	@ 0x3c
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b534:	637b      	str	r3, [r7, #52]	@ 0x34
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b540:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e6      	bne.n	800b520 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	60bb      	str	r3, [r7, #8]
   return(result);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b568:	633b      	str	r3, [r7, #48]	@ 0x30
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3308      	adds	r3, #8
 800b570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b572:	61ba      	str	r2, [r7, #24]
 800b574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b576:	6979      	ldr	r1, [r7, #20]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	e841 2300 	strex	r3, r2, [r1]
 800b57e:	613b      	str	r3, [r7, #16]
   return(result);
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1e5      	bne.n	800b552 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2220      	movs	r2, #32
 800b58a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b58e:	bf00      	nop
 800b590:	373c      	adds	r7, #60	@ 0x3c
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b095      	sub	sp, #84	@ 0x54
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e6      	bne.n	800b5a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3308      	adds	r3, #8
 800b5da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	e853 3f00 	ldrex	r3, [r3]
 800b5e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5ea:	f023 0301 	bic.w	r3, r3, #1
 800b5ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b600:	e841 2300 	strex	r3, r2, [r1]
 800b604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e3      	bne.n	800b5d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b610:	2b01      	cmp	r3, #1
 800b612:	d118      	bne.n	800b646 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	e853 3f00 	ldrex	r3, [r3]
 800b620:	60bb      	str	r3, [r7, #8]
   return(result);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f023 0310 	bic.w	r3, r3, #16
 800b628:	647b      	str	r3, [r7, #68]	@ 0x44
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b632:	61bb      	str	r3, [r7, #24]
 800b634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6979      	ldr	r1, [r7, #20]
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	613b      	str	r3, [r7, #16]
   return(result);
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e6      	bne.n	800b614 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b65a:	bf00      	nop
 800b65c:	3754      	adds	r7, #84	@ 0x54
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b090      	sub	sp, #64	@ 0x40
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b672:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0320 	and.w	r3, r3, #32
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d137      	bne.n	800b6f2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b684:	2200      	movs	r2, #0
 800b686:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	623b      	str	r3, [r7, #32]
   return(result);
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6b2:	e841 2300 	strex	r3, r2, [r1]
 800b6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1e5      	bne.n	800b68a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6dc:	61fb      	str	r3, [r7, #28]
 800b6de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e0:	69b9      	ldr	r1, [r7, #24]
 800b6e2:	69fa      	ldr	r2, [r7, #28]
 800b6e4:	e841 2300 	strex	r3, r2, [r1]
 800b6e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e6      	bne.n	800b6be <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6f0:	e002      	b.n	800b6f8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b6f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6f4:	f7ff f9ba 	bl	800aa6c <HAL_UART_TxCpltCallback>
}
 800b6f8:	bf00      	nop
 800b6fa:	3740      	adds	r7, #64	@ 0x40
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff f9b6 	bl	800aa80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b714:	bf00      	nop
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b09c      	sub	sp, #112	@ 0x70
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b728:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0320 	and.w	r3, r3, #32
 800b734:	2b00      	cmp	r3, #0
 800b736:	d171      	bne.n	800b81c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b748:	e853 3f00 	ldrex	r3, [r3]
 800b74c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b74e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b754:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	461a      	mov	r2, r3
 800b75c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b75e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b766:	e841 2300 	strex	r3, r2, [r1]
 800b76a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b76c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1e6      	bne.n	800b740 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3308      	adds	r3, #8
 800b778:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b784:	f023 0301 	bic.w	r3, r3, #1
 800b788:	667b      	str	r3, [r7, #100]	@ 0x64
 800b78a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3308      	adds	r3, #8
 800b790:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b792:	647a      	str	r2, [r7, #68]	@ 0x44
 800b794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e5      	bne.n	800b772 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7bc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e5      	bne.n	800b7a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7dc:	2220      	movs	r2, #32
 800b7de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d118      	bne.n	800b81c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b808:	61fb      	str	r3, [r7, #28]
 800b80a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	69b9      	ldr	r1, [r7, #24]
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	617b      	str	r3, [r7, #20]
   return(result);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b81c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81e:	2200      	movs	r2, #0
 800b820:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b826:	2b01      	cmp	r3, #1
 800b828:	d107      	bne.n	800b83a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b82a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b830:	4619      	mov	r1, r3
 800b832:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b834:	f7ff f938 	bl	800aaa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b838:	e002      	b.n	800b840 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b83a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b83c:	f7f5 fcd8 	bl	80011f0 <HAL_UART_RxCpltCallback>
}
 800b840:	bf00      	nop
 800b842:	3770      	adds	r7, #112	@ 0x70
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b854:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b860:	2b01      	cmp	r3, #1
 800b862:	d109      	bne.n	800b878 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b86a:	085b      	lsrs	r3, r3, #1
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	4619      	mov	r1, r3
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff f919 	bl	800aaa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b876:	e002      	b.n	800b87e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7f5 fca5 	bl	80011c8 <HAL_UART_RxHalfCpltCallback>
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b892:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b89a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ae:	2b80      	cmp	r3, #128	@ 0x80
 800b8b0:	d109      	bne.n	800b8c6 <UART_DMAError+0x40>
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b21      	cmp	r3, #33	@ 0x21
 800b8b6:	d106      	bne.n	800b8c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b8c0:	6978      	ldr	r0, [r7, #20]
 800b8c2:	f7ff fe29 	bl	800b518 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d0:	2b40      	cmp	r3, #64	@ 0x40
 800b8d2:	d109      	bne.n	800b8e8 <UART_DMAError+0x62>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b22      	cmp	r3, #34	@ 0x22
 800b8d8:	d106      	bne.n	800b8e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f7ff fe59 	bl	800b59a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ee:	f043 0210 	orr.w	r2, r3, #16
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8f8:	6978      	ldr	r0, [r7, #20]
 800b8fa:	f7ff f8cb 	bl	800aa94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8fe:	bf00      	nop
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b906:	b480      	push	{r7}
 800b908:	b085      	sub	sp, #20
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b914:	2b01      	cmp	r3, #1
 800b916:	d101      	bne.n	800b91c <HAL_UARTEx_DisableFifoMode+0x16>
 800b918:	2302      	movs	r3, #2
 800b91a:	e027      	b.n	800b96c <HAL_UARTEx_DisableFifoMode+0x66>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2224      	movs	r2, #36	@ 0x24
 800b928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f022 0201 	bic.w	r2, r2, #1
 800b942:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b94a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2220      	movs	r2, #32
 800b95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e02d      	b.n	800b9ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2224      	movs	r2, #36	@ 0x24
 800b99c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f022 0201 	bic.w	r2, r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f8a3 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d101      	bne.n	800ba0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e02d      	b.n	800ba68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2224      	movs	r2, #36	@ 0x24
 800ba18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0201 	bic.w	r2, r2, #1
 800ba32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	430a      	orrs	r2, r1
 800ba46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f865 	bl	800bb18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08c      	sub	sp, #48	@ 0x30
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba84:	2b20      	cmp	r3, #32
 800ba86:	d142      	bne.n	800bb0e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ba8e:	88fb      	ldrh	r3, [r7, #6]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e03b      	b.n	800bb10 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800baa4:	88fb      	ldrh	r3, [r7, #6]
 800baa6:	461a      	mov	r2, r3
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f7ff fc8e 	bl	800b3cc <UART_Start_Receive_DMA>
 800bab0:	4603      	mov	r3, r0
 800bab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800baba:	2b00      	cmp	r3, #0
 800babc:	d124      	bne.n	800bb08 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d11d      	bne.n	800bb02 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2210      	movs	r2, #16
 800bacc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	e853 3f00 	ldrex	r3, [r3]
 800bada:	617b      	str	r3, [r7, #20]
   return(result);
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f043 0310 	orr.w	r3, r3, #16
 800bae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	461a      	mov	r2, r3
 800baea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baec:	627b      	str	r3, [r7, #36]	@ 0x24
 800baee:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	6a39      	ldr	r1, [r7, #32]
 800baf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e6      	bne.n	800bace <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bb00:	e002      	b.n	800bb08 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bb08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb0c:	e000      	b.n	800bb10 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb0e:	2302      	movs	r3, #2
  }
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3730      	adds	r7, #48	@ 0x30
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d108      	bne.n	800bb3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb38:	e031      	b.n	800bb9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb3e:	2308      	movs	r3, #8
 800bb40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	0e5b      	lsrs	r3, r3, #25
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	0f5b      	lsrs	r3, r3, #29
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	7b3a      	ldrb	r2, [r7, #12]
 800bb66:	4911      	ldr	r1, [pc, #68]	@ (800bbac <UARTEx_SetNbDataToProcess+0x94>)
 800bb68:	5c8a      	ldrb	r2, [r1, r2]
 800bb6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb6e:	7b3a      	ldrb	r2, [r7, #12]
 800bb70:	490f      	ldr	r1, [pc, #60]	@ (800bbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb74:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	7b7a      	ldrb	r2, [r7, #13]
 800bb84:	4909      	ldr	r1, [pc, #36]	@ (800bbac <UARTEx_SetNbDataToProcess+0x94>)
 800bb86:	5c8a      	ldrb	r2, [r1, r2]
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb8c:	7b7a      	ldrb	r2, [r7, #13]
 800bb8e:	4908      	ldr	r1, [pc, #32]	@ (800bbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800bb90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb92:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	08011910 	.word	0x08011910
 800bbb0:	08011918 	.word	0x08011918

0800bbb4 <malloc>:
 800bbb4:	4b02      	ldr	r3, [pc, #8]	@ (800bbc0 <malloc+0xc>)
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	6818      	ldr	r0, [r3, #0]
 800bbba:	f000 b803 	b.w	800bbc4 <_malloc_r>
 800bbbe:	bf00      	nop
 800bbc0:	20000430 	.word	0x20000430

0800bbc4 <_malloc_r>:
 800bbc4:	f101 030b 	add.w	r3, r1, #11
 800bbc8:	2b16      	cmp	r3, #22
 800bbca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbce:	4605      	mov	r5, r0
 800bbd0:	d906      	bls.n	800bbe0 <_malloc_r+0x1c>
 800bbd2:	f033 0707 	bics.w	r7, r3, #7
 800bbd6:	d504      	bpl.n	800bbe2 <_malloc_r+0x1e>
 800bbd8:	230c      	movs	r3, #12
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	2400      	movs	r4, #0
 800bbde:	e1a3      	b.n	800bf28 <_malloc_r+0x364>
 800bbe0:	2710      	movs	r7, #16
 800bbe2:	42b9      	cmp	r1, r7
 800bbe4:	d8f8      	bhi.n	800bbd8 <_malloc_r+0x14>
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f000 fa26 	bl	800c038 <__malloc_lock>
 800bbec:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800bbf0:	4eaf      	ldr	r6, [pc, #700]	@ (800beb0 <_malloc_r+0x2ec>)
 800bbf2:	d237      	bcs.n	800bc64 <_malloc_r+0xa0>
 800bbf4:	f107 0208 	add.w	r2, r7, #8
 800bbf8:	4432      	add	r2, r6
 800bbfa:	f1a2 0108 	sub.w	r1, r2, #8
 800bbfe:	6854      	ldr	r4, [r2, #4]
 800bc00:	428c      	cmp	r4, r1
 800bc02:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800bc06:	d102      	bne.n	800bc0e <_malloc_r+0x4a>
 800bc08:	68d4      	ldr	r4, [r2, #12]
 800bc0a:	42a2      	cmp	r2, r4
 800bc0c:	d010      	beq.n	800bc30 <_malloc_r+0x6c>
 800bc0e:	6863      	ldr	r3, [r4, #4]
 800bc10:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	60ca      	str	r2, [r1, #12]
 800bc1a:	4423      	add	r3, r4
 800bc1c:	6091      	str	r1, [r2, #8]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	f042 0201 	orr.w	r2, r2, #1
 800bc24:	605a      	str	r2, [r3, #4]
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 fa0c 	bl	800c044 <__malloc_unlock>
 800bc2c:	3408      	adds	r4, #8
 800bc2e:	e17b      	b.n	800bf28 <_malloc_r+0x364>
 800bc30:	3302      	adds	r3, #2
 800bc32:	6934      	ldr	r4, [r6, #16]
 800bc34:	499f      	ldr	r1, [pc, #636]	@ (800beb4 <_malloc_r+0x2f0>)
 800bc36:	428c      	cmp	r4, r1
 800bc38:	d077      	beq.n	800bd2a <_malloc_r+0x166>
 800bc3a:	6862      	ldr	r2, [r4, #4]
 800bc3c:	f022 0c03 	bic.w	ip, r2, #3
 800bc40:	ebac 0007 	sub.w	r0, ip, r7
 800bc44:	280f      	cmp	r0, #15
 800bc46:	dd48      	ble.n	800bcda <_malloc_r+0x116>
 800bc48:	19e2      	adds	r2, r4, r7
 800bc4a:	f040 0301 	orr.w	r3, r0, #1
 800bc4e:	f047 0701 	orr.w	r7, r7, #1
 800bc52:	6067      	str	r7, [r4, #4]
 800bc54:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800bc58:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800bc5c:	6053      	str	r3, [r2, #4]
 800bc5e:	f844 000c 	str.w	r0, [r4, ip]
 800bc62:	e7e0      	b.n	800bc26 <_malloc_r+0x62>
 800bc64:	0a7b      	lsrs	r3, r7, #9
 800bc66:	d02a      	beq.n	800bcbe <_malloc_r+0xfa>
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d812      	bhi.n	800bc92 <_malloc_r+0xce>
 800bc6c:	09bb      	lsrs	r3, r7, #6
 800bc6e:	3338      	adds	r3, #56	@ 0x38
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800bc76:	f1a2 0c08 	sub.w	ip, r2, #8
 800bc7a:	6854      	ldr	r4, [r2, #4]
 800bc7c:	4564      	cmp	r4, ip
 800bc7e:	d006      	beq.n	800bc8e <_malloc_r+0xca>
 800bc80:	6862      	ldr	r2, [r4, #4]
 800bc82:	f022 0203 	bic.w	r2, r2, #3
 800bc86:	1bd0      	subs	r0, r2, r7
 800bc88:	280f      	cmp	r0, #15
 800bc8a:	dd1c      	ble.n	800bcc6 <_malloc_r+0x102>
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	3301      	adds	r3, #1
 800bc90:	e7cf      	b.n	800bc32 <_malloc_r+0x6e>
 800bc92:	2b14      	cmp	r3, #20
 800bc94:	d801      	bhi.n	800bc9a <_malloc_r+0xd6>
 800bc96:	335b      	adds	r3, #91	@ 0x5b
 800bc98:	e7ea      	b.n	800bc70 <_malloc_r+0xac>
 800bc9a:	2b54      	cmp	r3, #84	@ 0x54
 800bc9c:	d802      	bhi.n	800bca4 <_malloc_r+0xe0>
 800bc9e:	0b3b      	lsrs	r3, r7, #12
 800bca0:	336e      	adds	r3, #110	@ 0x6e
 800bca2:	e7e5      	b.n	800bc70 <_malloc_r+0xac>
 800bca4:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800bca8:	d802      	bhi.n	800bcb0 <_malloc_r+0xec>
 800bcaa:	0bfb      	lsrs	r3, r7, #15
 800bcac:	3377      	adds	r3, #119	@ 0x77
 800bcae:	e7df      	b.n	800bc70 <_malloc_r+0xac>
 800bcb0:	f240 5254 	movw	r2, #1364	@ 0x554
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d804      	bhi.n	800bcc2 <_malloc_r+0xfe>
 800bcb8:	0cbb      	lsrs	r3, r7, #18
 800bcba:	337c      	adds	r3, #124	@ 0x7c
 800bcbc:	e7d8      	b.n	800bc70 <_malloc_r+0xac>
 800bcbe:	233f      	movs	r3, #63	@ 0x3f
 800bcc0:	e7d6      	b.n	800bc70 <_malloc_r+0xac>
 800bcc2:	237e      	movs	r3, #126	@ 0x7e
 800bcc4:	e7d4      	b.n	800bc70 <_malloc_r+0xac>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	68e1      	ldr	r1, [r4, #12]
 800bcca:	db04      	blt.n	800bcd6 <_malloc_r+0x112>
 800bccc:	68a3      	ldr	r3, [r4, #8]
 800bcce:	60d9      	str	r1, [r3, #12]
 800bcd0:	608b      	str	r3, [r1, #8]
 800bcd2:	18a3      	adds	r3, r4, r2
 800bcd4:	e7a3      	b.n	800bc1e <_malloc_r+0x5a>
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	e7d0      	b.n	800bc7c <_malloc_r+0xb8>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800bce0:	db07      	blt.n	800bcf2 <_malloc_r+0x12e>
 800bce2:	44a4      	add	ip, r4
 800bce4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800bce8:	f043 0301 	orr.w	r3, r3, #1
 800bcec:	f8cc 3004 	str.w	r3, [ip, #4]
 800bcf0:	e799      	b.n	800bc26 <_malloc_r+0x62>
 800bcf2:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800bcf6:	6870      	ldr	r0, [r6, #4]
 800bcf8:	f080 8095 	bcs.w	800be26 <_malloc_r+0x262>
 800bcfc:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800bd00:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800bd04:	f04f 0c01 	mov.w	ip, #1
 800bd08:	3201      	adds	r2, #1
 800bd0a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800bd0e:	ea4c 0000 	orr.w	r0, ip, r0
 800bd12:	6070      	str	r0, [r6, #4]
 800bd14:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800bd18:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800bd1c:	3808      	subs	r0, #8
 800bd1e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800bd22:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800bd26:	f8cc 400c 	str.w	r4, [ip, #12]
 800bd2a:	1098      	asrs	r0, r3, #2
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	4082      	lsls	r2, r0
 800bd30:	6870      	ldr	r0, [r6, #4]
 800bd32:	4290      	cmp	r0, r2
 800bd34:	d326      	bcc.n	800bd84 <_malloc_r+0x1c0>
 800bd36:	4210      	tst	r0, r2
 800bd38:	d106      	bne.n	800bd48 <_malloc_r+0x184>
 800bd3a:	f023 0303 	bic.w	r3, r3, #3
 800bd3e:	0052      	lsls	r2, r2, #1
 800bd40:	4210      	tst	r0, r2
 800bd42:	f103 0304 	add.w	r3, r3, #4
 800bd46:	d0fa      	beq.n	800bd3e <_malloc_r+0x17a>
 800bd48:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800bd4c:	46c1      	mov	r9, r8
 800bd4e:	469e      	mov	lr, r3
 800bd50:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800bd54:	454c      	cmp	r4, r9
 800bd56:	f040 80b9 	bne.w	800becc <_malloc_r+0x308>
 800bd5a:	f10e 0e01 	add.w	lr, lr, #1
 800bd5e:	f01e 0f03 	tst.w	lr, #3
 800bd62:	f109 0908 	add.w	r9, r9, #8
 800bd66:	d1f3      	bne.n	800bd50 <_malloc_r+0x18c>
 800bd68:	0798      	lsls	r0, r3, #30
 800bd6a:	f040 80e3 	bne.w	800bf34 <_malloc_r+0x370>
 800bd6e:	6873      	ldr	r3, [r6, #4]
 800bd70:	ea23 0302 	bic.w	r3, r3, r2
 800bd74:	6073      	str	r3, [r6, #4]
 800bd76:	6870      	ldr	r0, [r6, #4]
 800bd78:	0052      	lsls	r2, r2, #1
 800bd7a:	4290      	cmp	r0, r2
 800bd7c:	d302      	bcc.n	800bd84 <_malloc_r+0x1c0>
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	f040 80e5 	bne.w	800bf4e <_malloc_r+0x38a>
 800bd84:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800bd88:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bd8c:	f023 0903 	bic.w	r9, r3, #3
 800bd90:	45b9      	cmp	r9, r7
 800bd92:	d304      	bcc.n	800bd9e <_malloc_r+0x1da>
 800bd94:	eba9 0207 	sub.w	r2, r9, r7
 800bd98:	2a0f      	cmp	r2, #15
 800bd9a:	f300 8141 	bgt.w	800c020 <_malloc_r+0x45c>
 800bd9e:	4b46      	ldr	r3, [pc, #280]	@ (800beb8 <_malloc_r+0x2f4>)
 800bda0:	6819      	ldr	r1, [r3, #0]
 800bda2:	3110      	adds	r1, #16
 800bda4:	4439      	add	r1, r7
 800bda6:	2008      	movs	r0, #8
 800bda8:	9101      	str	r1, [sp, #4]
 800bdaa:	f000 fc0b 	bl	800c5c4 <sysconf>
 800bdae:	4a43      	ldr	r2, [pc, #268]	@ (800bebc <_malloc_r+0x2f8>)
 800bdb0:	9901      	ldr	r1, [sp, #4]
 800bdb2:	6813      	ldr	r3, [r2, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	bf1f      	itttt	ne
 800bdb8:	f101 31ff 	addne.w	r1, r1, #4294967295
 800bdbc:	1809      	addne	r1, r1, r0
 800bdbe:	4243      	negne	r3, r0
 800bdc0:	4019      	andne	r1, r3
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	9101      	str	r1, [sp, #4]
 800bdc8:	f000 fbac 	bl	800c524 <_sbrk_r>
 800bdcc:	1c42      	adds	r2, r0, #1
 800bdce:	eb0a 0b09 	add.w	fp, sl, r9
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	f000 80f7 	beq.w	800bfc6 <_malloc_r+0x402>
 800bdd8:	4583      	cmp	fp, r0
 800bdda:	9901      	ldr	r1, [sp, #4]
 800bddc:	4a37      	ldr	r2, [pc, #220]	@ (800bebc <_malloc_r+0x2f8>)
 800bdde:	d902      	bls.n	800bde6 <_malloc_r+0x222>
 800bde0:	45b2      	cmp	sl, r6
 800bde2:	f040 80f0 	bne.w	800bfc6 <_malloc_r+0x402>
 800bde6:	4b36      	ldr	r3, [pc, #216]	@ (800bec0 <_malloc_r+0x2fc>)
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	45a3      	cmp	fp, r4
 800bdec:	eb00 0e01 	add.w	lr, r0, r1
 800bdf0:	f8c3 e000 	str.w	lr, [r3]
 800bdf4:	f108 3cff 	add.w	ip, r8, #4294967295
 800bdf8:	f040 80ab 	bne.w	800bf52 <_malloc_r+0x38e>
 800bdfc:	ea1b 0f0c 	tst.w	fp, ip
 800be00:	f040 80a7 	bne.w	800bf52 <_malloc_r+0x38e>
 800be04:	68b2      	ldr	r2, [r6, #8]
 800be06:	4449      	add	r1, r9
 800be08:	f041 0101 	orr.w	r1, r1, #1
 800be0c:	6051      	str	r1, [r2, #4]
 800be0e:	4a2d      	ldr	r2, [pc, #180]	@ (800bec4 <_malloc_r+0x300>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6811      	ldr	r1, [r2, #0]
 800be14:	428b      	cmp	r3, r1
 800be16:	bf88      	it	hi
 800be18:	6013      	strhi	r3, [r2, #0]
 800be1a:	4a2b      	ldr	r2, [pc, #172]	@ (800bec8 <_malloc_r+0x304>)
 800be1c:	6811      	ldr	r1, [r2, #0]
 800be1e:	428b      	cmp	r3, r1
 800be20:	bf88      	it	hi
 800be22:	6013      	strhi	r3, [r2, #0]
 800be24:	e0cf      	b.n	800bfc6 <_malloc_r+0x402>
 800be26:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800be2a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800be2e:	d218      	bcs.n	800be62 <_malloc_r+0x29e>
 800be30:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800be34:	3238      	adds	r2, #56	@ 0x38
 800be36:	f102 0e01 	add.w	lr, r2, #1
 800be3a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800be3e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800be42:	45f0      	cmp	r8, lr
 800be44:	d12b      	bne.n	800be9e <_malloc_r+0x2da>
 800be46:	1092      	asrs	r2, r2, #2
 800be48:	f04f 0c01 	mov.w	ip, #1
 800be4c:	fa0c f202 	lsl.w	r2, ip, r2
 800be50:	4302      	orrs	r2, r0
 800be52:	6072      	str	r2, [r6, #4]
 800be54:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800be58:	f8c8 4008 	str.w	r4, [r8, #8]
 800be5c:	f8ce 400c 	str.w	r4, [lr, #12]
 800be60:	e763      	b.n	800bd2a <_malloc_r+0x166>
 800be62:	2a14      	cmp	r2, #20
 800be64:	d801      	bhi.n	800be6a <_malloc_r+0x2a6>
 800be66:	325b      	adds	r2, #91	@ 0x5b
 800be68:	e7e5      	b.n	800be36 <_malloc_r+0x272>
 800be6a:	2a54      	cmp	r2, #84	@ 0x54
 800be6c:	d803      	bhi.n	800be76 <_malloc_r+0x2b2>
 800be6e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800be72:	326e      	adds	r2, #110	@ 0x6e
 800be74:	e7df      	b.n	800be36 <_malloc_r+0x272>
 800be76:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800be7a:	d803      	bhi.n	800be84 <_malloc_r+0x2c0>
 800be7c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800be80:	3277      	adds	r2, #119	@ 0x77
 800be82:	e7d8      	b.n	800be36 <_malloc_r+0x272>
 800be84:	f240 5e54 	movw	lr, #1364	@ 0x554
 800be88:	4572      	cmp	r2, lr
 800be8a:	bf9a      	itte	ls
 800be8c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800be90:	327c      	addls	r2, #124	@ 0x7c
 800be92:	227e      	movhi	r2, #126	@ 0x7e
 800be94:	e7cf      	b.n	800be36 <_malloc_r+0x272>
 800be96:	f8de e008 	ldr.w	lr, [lr, #8]
 800be9a:	45f0      	cmp	r8, lr
 800be9c:	d005      	beq.n	800beaa <_malloc_r+0x2e6>
 800be9e:	f8de 2004 	ldr.w	r2, [lr, #4]
 800bea2:	f022 0203 	bic.w	r2, r2, #3
 800bea6:	4562      	cmp	r2, ip
 800bea8:	d8f5      	bhi.n	800be96 <_malloc_r+0x2d2>
 800beaa:	f8de 800c 	ldr.w	r8, [lr, #12]
 800beae:	e7d1      	b.n	800be54 <_malloc_r+0x290>
 800beb0:	2000001c 	.word	0x2000001c
 800beb4:	20000024 	.word	0x20000024
 800beb8:	200015d0 	.word	0x200015d0
 800bebc:	20000014 	.word	0x20000014
 800bec0:	200015a0 	.word	0x200015a0
 800bec4:	200015cc 	.word	0x200015cc
 800bec8:	200015c8 	.word	0x200015c8
 800becc:	6860      	ldr	r0, [r4, #4]
 800bece:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800bed2:	f020 0003 	bic.w	r0, r0, #3
 800bed6:	eba0 0a07 	sub.w	sl, r0, r7
 800beda:	f1ba 0f0f 	cmp.w	sl, #15
 800bede:	dd12      	ble.n	800bf06 <_malloc_r+0x342>
 800bee0:	68a3      	ldr	r3, [r4, #8]
 800bee2:	19e2      	adds	r2, r4, r7
 800bee4:	f047 0701 	orr.w	r7, r7, #1
 800bee8:	6067      	str	r7, [r4, #4]
 800beea:	f8c3 c00c 	str.w	ip, [r3, #12]
 800beee:	f8cc 3008 	str.w	r3, [ip, #8]
 800bef2:	f04a 0301 	orr.w	r3, sl, #1
 800bef6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800befa:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800befe:	6053      	str	r3, [r2, #4]
 800bf00:	f844 a000 	str.w	sl, [r4, r0]
 800bf04:	e68f      	b.n	800bc26 <_malloc_r+0x62>
 800bf06:	f1ba 0f00 	cmp.w	sl, #0
 800bf0a:	db11      	blt.n	800bf30 <_malloc_r+0x36c>
 800bf0c:	4420      	add	r0, r4
 800bf0e:	6843      	ldr	r3, [r0, #4]
 800bf10:	f043 0301 	orr.w	r3, r3, #1
 800bf14:	6043      	str	r3, [r0, #4]
 800bf16:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f8c3 c00c 	str.w	ip, [r3, #12]
 800bf20:	f8cc 3008 	str.w	r3, [ip, #8]
 800bf24:	f000 f88e 	bl	800c044 <__malloc_unlock>
 800bf28:	4620      	mov	r0, r4
 800bf2a:	b003      	add	sp, #12
 800bf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf30:	4664      	mov	r4, ip
 800bf32:	e70f      	b.n	800bd54 <_malloc_r+0x190>
 800bf34:	f858 0908 	ldr.w	r0, [r8], #-8
 800bf38:	4540      	cmp	r0, r8
 800bf3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf3e:	f43f af13 	beq.w	800bd68 <_malloc_r+0x1a4>
 800bf42:	e718      	b.n	800bd76 <_malloc_r+0x1b2>
 800bf44:	3304      	adds	r3, #4
 800bf46:	0052      	lsls	r2, r2, #1
 800bf48:	4210      	tst	r0, r2
 800bf4a:	d0fb      	beq.n	800bf44 <_malloc_r+0x380>
 800bf4c:	e6fc      	b.n	800bd48 <_malloc_r+0x184>
 800bf4e:	4673      	mov	r3, lr
 800bf50:	e7fa      	b.n	800bf48 <_malloc_r+0x384>
 800bf52:	6810      	ldr	r0, [r2, #0]
 800bf54:	3001      	adds	r0, #1
 800bf56:	bf1b      	ittet	ne
 800bf58:	eba4 0b0b 	subne.w	fp, r4, fp
 800bf5c:	eb0b 020e 	addne.w	r2, fp, lr
 800bf60:	6014      	streq	r4, [r2, #0]
 800bf62:	601a      	strne	r2, [r3, #0]
 800bf64:	f014 0b07 	ands.w	fp, r4, #7
 800bf68:	bf1a      	itte	ne
 800bf6a:	f1cb 0008 	rsbne	r0, fp, #8
 800bf6e:	1824      	addne	r4, r4, r0
 800bf70:	4658      	moveq	r0, fp
 800bf72:	1862      	adds	r2, r4, r1
 800bf74:	ea02 010c 	and.w	r1, r2, ip
 800bf78:	4480      	add	r8, r0
 800bf7a:	eba8 0801 	sub.w	r8, r8, r1
 800bf7e:	ea08 080c 	and.w	r8, r8, ip
 800bf82:	4641      	mov	r1, r8
 800bf84:	4628      	mov	r0, r5
 800bf86:	9201      	str	r2, [sp, #4]
 800bf88:	f000 facc 	bl	800c524 <_sbrk_r>
 800bf8c:	1c43      	adds	r3, r0, #1
 800bf8e:	9a01      	ldr	r2, [sp, #4]
 800bf90:	4b28      	ldr	r3, [pc, #160]	@ (800c034 <_malloc_r+0x470>)
 800bf92:	d107      	bne.n	800bfa4 <_malloc_r+0x3e0>
 800bf94:	f1bb 0f00 	cmp.w	fp, #0
 800bf98:	d023      	beq.n	800bfe2 <_malloc_r+0x41e>
 800bf9a:	f1ab 0008 	sub.w	r0, fp, #8
 800bf9e:	4410      	add	r0, r2
 800bfa0:	f04f 0800 	mov.w	r8, #0
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	60b4      	str	r4, [r6, #8]
 800bfa8:	1b00      	subs	r0, r0, r4
 800bfaa:	4440      	add	r0, r8
 800bfac:	4442      	add	r2, r8
 800bfae:	f040 0001 	orr.w	r0, r0, #1
 800bfb2:	45b2      	cmp	sl, r6
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	6060      	str	r0, [r4, #4]
 800bfb8:	f43f af29 	beq.w	800be0e <_malloc_r+0x24a>
 800bfbc:	f1b9 0f0f 	cmp.w	r9, #15
 800bfc0:	d812      	bhi.n	800bfe8 <_malloc_r+0x424>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	6063      	str	r3, [r4, #4]
 800bfc6:	68b3      	ldr	r3, [r6, #8]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f023 0303 	bic.w	r3, r3, #3
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	eba3 0207 	sub.w	r2, r3, r7
 800bfd4:	d301      	bcc.n	800bfda <_malloc_r+0x416>
 800bfd6:	2a0f      	cmp	r2, #15
 800bfd8:	dc22      	bgt.n	800c020 <_malloc_r+0x45c>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f000 f832 	bl	800c044 <__malloc_unlock>
 800bfe0:	e5fc      	b.n	800bbdc <_malloc_r+0x18>
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	46d8      	mov	r8, fp
 800bfe6:	e7dd      	b.n	800bfa4 <_malloc_r+0x3e0>
 800bfe8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bfec:	f1a9 090c 	sub.w	r9, r9, #12
 800bff0:	f029 0907 	bic.w	r9, r9, #7
 800bff4:	f002 0201 	and.w	r2, r2, #1
 800bff8:	ea42 0209 	orr.w	r2, r2, r9
 800bffc:	f8ca 2004 	str.w	r2, [sl, #4]
 800c000:	2105      	movs	r1, #5
 800c002:	eb0a 0209 	add.w	r2, sl, r9
 800c006:	f1b9 0f0f 	cmp.w	r9, #15
 800c00a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800c00e:	f67f aefe 	bls.w	800be0e <_malloc_r+0x24a>
 800c012:	f10a 0108 	add.w	r1, sl, #8
 800c016:	4628      	mov	r0, r5
 800c018:	f000 fb46 	bl	800c6a8 <_free_r>
 800c01c:	4b05      	ldr	r3, [pc, #20]	@ (800c034 <_malloc_r+0x470>)
 800c01e:	e6f6      	b.n	800be0e <_malloc_r+0x24a>
 800c020:	68b4      	ldr	r4, [r6, #8]
 800c022:	f047 0301 	orr.w	r3, r7, #1
 800c026:	4427      	add	r7, r4
 800c028:	f042 0201 	orr.w	r2, r2, #1
 800c02c:	6063      	str	r3, [r4, #4]
 800c02e:	60b7      	str	r7, [r6, #8]
 800c030:	607a      	str	r2, [r7, #4]
 800c032:	e5f8      	b.n	800bc26 <_malloc_r+0x62>
 800c034:	200015a0 	.word	0x200015a0

0800c038 <__malloc_lock>:
 800c038:	4801      	ldr	r0, [pc, #4]	@ (800c040 <__malloc_lock+0x8>)
 800c03a:	f000 bac1 	b.w	800c5c0 <__retarget_lock_acquire_recursive>
 800c03e:	bf00      	nop
 800c040:	20001714 	.word	0x20001714

0800c044 <__malloc_unlock>:
 800c044:	4801      	ldr	r0, [pc, #4]	@ (800c04c <__malloc_unlock+0x8>)
 800c046:	f000 babc 	b.w	800c5c2 <__retarget_lock_release_recursive>
 800c04a:	bf00      	nop
 800c04c:	20001714 	.word	0x20001714

0800c050 <std>:
 800c050:	2300      	movs	r3, #0
 800c052:	b510      	push	{r4, lr}
 800c054:	4604      	mov	r4, r0
 800c056:	e9c0 3300 	strd	r3, r3, [r0]
 800c05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c05e:	6083      	str	r3, [r0, #8]
 800c060:	8181      	strh	r1, [r0, #12]
 800c062:	6643      	str	r3, [r0, #100]	@ 0x64
 800c064:	81c2      	strh	r2, [r0, #14]
 800c066:	6183      	str	r3, [r0, #24]
 800c068:	4619      	mov	r1, r3
 800c06a:	2208      	movs	r2, #8
 800c06c:	305c      	adds	r0, #92	@ 0x5c
 800c06e:	f000 fa1c 	bl	800c4aa <memset>
 800c072:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a8 <std+0x58>)
 800c074:	6223      	str	r3, [r4, #32]
 800c076:	4b0d      	ldr	r3, [pc, #52]	@ (800c0ac <std+0x5c>)
 800c078:	6263      	str	r3, [r4, #36]	@ 0x24
 800c07a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b0 <std+0x60>)
 800c07c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c07e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b4 <std+0x64>)
 800c080:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c082:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b8 <std+0x68>)
 800c084:	61e4      	str	r4, [r4, #28]
 800c086:	429c      	cmp	r4, r3
 800c088:	d006      	beq.n	800c098 <std+0x48>
 800c08a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c08e:	4294      	cmp	r4, r2
 800c090:	d002      	beq.n	800c098 <std+0x48>
 800c092:	33d0      	adds	r3, #208	@ 0xd0
 800c094:	429c      	cmp	r4, r3
 800c096:	d105      	bne.n	800c0a4 <std+0x54>
 800c098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a0:	f000 ba8c 	b.w	800c5bc <__retarget_lock_init_recursive>
 800c0a4:	bd10      	pop	{r4, pc}
 800c0a6:	bf00      	nop
 800c0a8:	0800c425 	.word	0x0800c425
 800c0ac:	0800c447 	.word	0x0800c447
 800c0b0:	0800c47f 	.word	0x0800c47f
 800c0b4:	0800c4a3 	.word	0x0800c4a3
 800c0b8:	200015d4 	.word	0x200015d4

0800c0bc <stdio_exit_handler>:
 800c0bc:	4a02      	ldr	r2, [pc, #8]	@ (800c0c8 <stdio_exit_handler+0xc>)
 800c0be:	4903      	ldr	r1, [pc, #12]	@ (800c0cc <stdio_exit_handler+0x10>)
 800c0c0:	4803      	ldr	r0, [pc, #12]	@ (800c0d0 <stdio_exit_handler+0x14>)
 800c0c2:	f000 b869 	b.w	800c198 <_fwalk_sglue>
 800c0c6:	bf00      	nop
 800c0c8:	20000424 	.word	0x20000424
 800c0cc:	0800dbe5 	.word	0x0800dbe5
 800c0d0:	20000438 	.word	0x20000438

0800c0d4 <cleanup_stdio>:
 800c0d4:	6841      	ldr	r1, [r0, #4]
 800c0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c108 <cleanup_stdio+0x34>)
 800c0d8:	4299      	cmp	r1, r3
 800c0da:	b510      	push	{r4, lr}
 800c0dc:	4604      	mov	r4, r0
 800c0de:	d001      	beq.n	800c0e4 <cleanup_stdio+0x10>
 800c0e0:	f001 fd80 	bl	800dbe4 <_fclose_r>
 800c0e4:	68a1      	ldr	r1, [r4, #8]
 800c0e6:	4b09      	ldr	r3, [pc, #36]	@ (800c10c <cleanup_stdio+0x38>)
 800c0e8:	4299      	cmp	r1, r3
 800c0ea:	d002      	beq.n	800c0f2 <cleanup_stdio+0x1e>
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f001 fd79 	bl	800dbe4 <_fclose_r>
 800c0f2:	68e1      	ldr	r1, [r4, #12]
 800c0f4:	4b06      	ldr	r3, [pc, #24]	@ (800c110 <cleanup_stdio+0x3c>)
 800c0f6:	4299      	cmp	r1, r3
 800c0f8:	d004      	beq.n	800c104 <cleanup_stdio+0x30>
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c100:	f001 bd70 	b.w	800dbe4 <_fclose_r>
 800c104:	bd10      	pop	{r4, pc}
 800c106:	bf00      	nop
 800c108:	200015d4 	.word	0x200015d4
 800c10c:	2000163c 	.word	0x2000163c
 800c110:	200016a4 	.word	0x200016a4

0800c114 <global_stdio_init.part.0>:
 800c114:	b510      	push	{r4, lr}
 800c116:	4b0b      	ldr	r3, [pc, #44]	@ (800c144 <global_stdio_init.part.0+0x30>)
 800c118:	4c0b      	ldr	r4, [pc, #44]	@ (800c148 <global_stdio_init.part.0+0x34>)
 800c11a:	4a0c      	ldr	r2, [pc, #48]	@ (800c14c <global_stdio_init.part.0+0x38>)
 800c11c:	601a      	str	r2, [r3, #0]
 800c11e:	4620      	mov	r0, r4
 800c120:	2200      	movs	r2, #0
 800c122:	2104      	movs	r1, #4
 800c124:	f7ff ff94 	bl	800c050 <std>
 800c128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c12c:	2201      	movs	r2, #1
 800c12e:	2109      	movs	r1, #9
 800c130:	f7ff ff8e 	bl	800c050 <std>
 800c134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c138:	2202      	movs	r2, #2
 800c13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c13e:	2112      	movs	r1, #18
 800c140:	f7ff bf86 	b.w	800c050 <std>
 800c144:	2000170c 	.word	0x2000170c
 800c148:	200015d4 	.word	0x200015d4
 800c14c:	0800c0bd 	.word	0x0800c0bd

0800c150 <__sfp_lock_acquire>:
 800c150:	4801      	ldr	r0, [pc, #4]	@ (800c158 <__sfp_lock_acquire+0x8>)
 800c152:	f000 ba35 	b.w	800c5c0 <__retarget_lock_acquire_recursive>
 800c156:	bf00      	nop
 800c158:	20001716 	.word	0x20001716

0800c15c <__sfp_lock_release>:
 800c15c:	4801      	ldr	r0, [pc, #4]	@ (800c164 <__sfp_lock_release+0x8>)
 800c15e:	f000 ba30 	b.w	800c5c2 <__retarget_lock_release_recursive>
 800c162:	bf00      	nop
 800c164:	20001716 	.word	0x20001716

0800c168 <__sinit>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	4604      	mov	r4, r0
 800c16c:	f7ff fff0 	bl	800c150 <__sfp_lock_acquire>
 800c170:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c172:	b11b      	cbz	r3, 800c17c <__sinit+0x14>
 800c174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c178:	f7ff bff0 	b.w	800c15c <__sfp_lock_release>
 800c17c:	4b04      	ldr	r3, [pc, #16]	@ (800c190 <__sinit+0x28>)
 800c17e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c180:	4b04      	ldr	r3, [pc, #16]	@ (800c194 <__sinit+0x2c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1f5      	bne.n	800c174 <__sinit+0xc>
 800c188:	f7ff ffc4 	bl	800c114 <global_stdio_init.part.0>
 800c18c:	e7f2      	b.n	800c174 <__sinit+0xc>
 800c18e:	bf00      	nop
 800c190:	0800c0d5 	.word	0x0800c0d5
 800c194:	2000170c 	.word	0x2000170c

0800c198 <_fwalk_sglue>:
 800c198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c19c:	4607      	mov	r7, r0
 800c19e:	4688      	mov	r8, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	2600      	movs	r6, #0
 800c1a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c1ac:	d505      	bpl.n	800c1ba <_fwalk_sglue+0x22>
 800c1ae:	6824      	ldr	r4, [r4, #0]
 800c1b0:	2c00      	cmp	r4, #0
 800c1b2:	d1f7      	bne.n	800c1a4 <_fwalk_sglue+0xc>
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d907      	bls.n	800c1d0 <_fwalk_sglue+0x38>
 800c1c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	d003      	beq.n	800c1d0 <_fwalk_sglue+0x38>
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	47c0      	blx	r8
 800c1ce:	4306      	orrs	r6, r0
 800c1d0:	3568      	adds	r5, #104	@ 0x68
 800c1d2:	e7e9      	b.n	800c1a8 <_fwalk_sglue+0x10>

0800c1d4 <_puts_r>:
 800c1d4:	b530      	push	{r4, r5, lr}
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	b089      	sub	sp, #36	@ 0x24
 800c1da:	4608      	mov	r0, r1
 800c1dc:	460c      	mov	r4, r1
 800c1de:	f7f4 f81f 	bl	8000220 <strlen>
 800c1e2:	4b1e      	ldr	r3, [pc, #120]	@ (800c25c <_puts_r+0x88>)
 800c1e4:	9306      	str	r3, [sp, #24]
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800c1ec:	9307      	str	r3, [sp, #28]
 800c1ee:	4418      	add	r0, r3
 800c1f0:	ab04      	add	r3, sp, #16
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c1fa:	68ac      	ldr	r4, [r5, #8]
 800c1fc:	9003      	str	r0, [sp, #12]
 800c1fe:	b913      	cbnz	r3, 800c206 <_puts_r+0x32>
 800c200:	4628      	mov	r0, r5
 800c202:	f7ff ffb1 	bl	800c168 <__sinit>
 800c206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c208:	07db      	lsls	r3, r3, #31
 800c20a:	d405      	bmi.n	800c218 <_puts_r+0x44>
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	0598      	lsls	r0, r3, #22
 800c210:	d402      	bmi.n	800c218 <_puts_r+0x44>
 800c212:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c214:	f000 f9d4 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 800c218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21c:	0499      	lsls	r1, r3, #18
 800c21e:	d406      	bmi.n	800c22e <_puts_r+0x5a>
 800c220:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c224:	81a3      	strh	r3, [r4, #12]
 800c226:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c22c:	6663      	str	r3, [r4, #100]	@ 0x64
 800c22e:	4628      	mov	r0, r5
 800c230:	aa01      	add	r2, sp, #4
 800c232:	4621      	mov	r1, r4
 800c234:	f001 fdda 	bl	800ddec <__sfvwrite_r>
 800c238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c23a:	2800      	cmp	r0, #0
 800c23c:	bf0c      	ite	eq
 800c23e:	250a      	moveq	r5, #10
 800c240:	f04f 35ff 	movne.w	r5, #4294967295
 800c244:	07da      	lsls	r2, r3, #31
 800c246:	d405      	bmi.n	800c254 <_puts_r+0x80>
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	059b      	lsls	r3, r3, #22
 800c24c:	d402      	bmi.n	800c254 <_puts_r+0x80>
 800c24e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c250:	f000 f9b7 	bl	800c5c2 <__retarget_lock_release_recursive>
 800c254:	4628      	mov	r0, r5
 800c256:	b009      	add	sp, #36	@ 0x24
 800c258:	bd30      	pop	{r4, r5, pc}
 800c25a:	bf00      	nop
 800c25c:	08011c8b 	.word	0x08011c8b

0800c260 <puts>:
 800c260:	4b02      	ldr	r3, [pc, #8]	@ (800c26c <puts+0xc>)
 800c262:	4601      	mov	r1, r0
 800c264:	6818      	ldr	r0, [r3, #0]
 800c266:	f7ff bfb5 	b.w	800c1d4 <_puts_r>
 800c26a:	bf00      	nop
 800c26c:	20000430 	.word	0x20000430

0800c270 <setvbuf>:
 800c270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c274:	461d      	mov	r5, r3
 800c276:	4b5a      	ldr	r3, [pc, #360]	@ (800c3e0 <setvbuf+0x170>)
 800c278:	681f      	ldr	r7, [r3, #0]
 800c27a:	4604      	mov	r4, r0
 800c27c:	460e      	mov	r6, r1
 800c27e:	4690      	mov	r8, r2
 800c280:	b127      	cbz	r7, 800c28c <setvbuf+0x1c>
 800c282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c284:	b913      	cbnz	r3, 800c28c <setvbuf+0x1c>
 800c286:	4638      	mov	r0, r7
 800c288:	f7ff ff6e 	bl	800c168 <__sinit>
 800c28c:	f1b8 0f02 	cmp.w	r8, #2
 800c290:	d006      	beq.n	800c2a0 <setvbuf+0x30>
 800c292:	f1b8 0f01 	cmp.w	r8, #1
 800c296:	f200 80a0 	bhi.w	800c3da <setvbuf+0x16a>
 800c29a:	2d00      	cmp	r5, #0
 800c29c:	f2c0 809d 	blt.w	800c3da <setvbuf+0x16a>
 800c2a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2a2:	07d9      	lsls	r1, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <setvbuf+0x42>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	059a      	lsls	r2, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <setvbuf+0x42>
 800c2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ae:	f000 f987 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f001 fd73 	bl	800dda0 <_fflush_r>
 800c2ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c2bc:	b141      	cbz	r1, 800c2d0 <setvbuf+0x60>
 800c2be:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800c2c2:	4299      	cmp	r1, r3
 800c2c4:	d002      	beq.n	800c2cc <setvbuf+0x5c>
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f000 f9ee 	bl	800c6a8 <_free_r>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	61a3      	str	r3, [r4, #24]
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	061b      	lsls	r3, r3, #24
 800c2da:	d503      	bpl.n	800c2e4 <setvbuf+0x74>
 800c2dc:	6921      	ldr	r1, [r4, #16]
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f000 f9e2 	bl	800c6a8 <_free_r>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800c2ea:	f023 0303 	bic.w	r3, r3, #3
 800c2ee:	f1b8 0f02 	cmp.w	r8, #2
 800c2f2:	81a3      	strh	r3, [r4, #12]
 800c2f4:	d067      	beq.n	800c3c6 <setvbuf+0x156>
 800c2f6:	ab01      	add	r3, sp, #4
 800c2f8:	466a      	mov	r2, sp
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f001 fec1 	bl	800e084 <__swhatbuf_r>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	4318      	orrs	r0, r3
 800c306:	81a0      	strh	r0, [r4, #12]
 800c308:	bb2d      	cbnz	r5, 800c356 <setvbuf+0xe6>
 800c30a:	9d00      	ldr	r5, [sp, #0]
 800c30c:	4628      	mov	r0, r5
 800c30e:	f7ff fc51 	bl	800bbb4 <malloc>
 800c312:	4606      	mov	r6, r0
 800c314:	2800      	cmp	r0, #0
 800c316:	d158      	bne.n	800c3ca <setvbuf+0x15a>
 800c318:	f8dd 9000 	ldr.w	r9, [sp]
 800c31c:	45a9      	cmp	r9, r5
 800c31e:	d146      	bne.n	800c3ae <setvbuf+0x13e>
 800c320:	f04f 35ff 	mov.w	r5, #4294967295
 800c324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c328:	f043 0202 	orr.w	r2, r3, #2
 800c32c:	81a2      	strh	r2, [r4, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	60a2      	str	r2, [r4, #8]
 800c332:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c336:	6022      	str	r2, [r4, #0]
 800c338:	6122      	str	r2, [r4, #16]
 800c33a:	2201      	movs	r2, #1
 800c33c:	6162      	str	r2, [r4, #20]
 800c33e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c340:	07d6      	lsls	r6, r2, #31
 800c342:	d404      	bmi.n	800c34e <setvbuf+0xde>
 800c344:	0598      	lsls	r0, r3, #22
 800c346:	d402      	bmi.n	800c34e <setvbuf+0xde>
 800c348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c34a:	f000 f93a 	bl	800c5c2 <__retarget_lock_release_recursive>
 800c34e:	4628      	mov	r0, r5
 800c350:	b003      	add	sp, #12
 800c352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c356:	2e00      	cmp	r6, #0
 800c358:	d0d8      	beq.n	800c30c <setvbuf+0x9c>
 800c35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c35c:	b913      	cbnz	r3, 800c364 <setvbuf+0xf4>
 800c35e:	4638      	mov	r0, r7
 800c360:	f7ff ff02 	bl	800c168 <__sinit>
 800c364:	9b00      	ldr	r3, [sp, #0]
 800c366:	6026      	str	r6, [r4, #0]
 800c368:	42ab      	cmp	r3, r5
 800c36a:	bf1e      	ittt	ne
 800c36c:	89a3      	ldrhne	r3, [r4, #12]
 800c36e:	f443 6300 	orrne.w	r3, r3, #2048	@ 0x800
 800c372:	81a3      	strhne	r3, [r4, #12]
 800c374:	f1b8 0f01 	cmp.w	r8, #1
 800c378:	bf02      	ittt	eq
 800c37a:	89a3      	ldrheq	r3, [r4, #12]
 800c37c:	f043 0301 	orreq.w	r3, r3, #1
 800c380:	81a3      	strheq	r3, [r4, #12]
 800c382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c386:	f013 0208 	ands.w	r2, r3, #8
 800c38a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c38e:	d01e      	beq.n	800c3ce <setvbuf+0x15e>
 800c390:	07d9      	lsls	r1, r3, #31
 800c392:	bf41      	itttt	mi
 800c394:	2200      	movmi	r2, #0
 800c396:	426d      	negmi	r5, r5
 800c398:	60a2      	strmi	r2, [r4, #8]
 800c39a:	61a5      	strmi	r5, [r4, #24]
 800c39c:	bf58      	it	pl
 800c39e:	60a5      	strpl	r5, [r4, #8]
 800c3a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3a2:	07d2      	lsls	r2, r2, #31
 800c3a4:	d401      	bmi.n	800c3aa <setvbuf+0x13a>
 800c3a6:	059b      	lsls	r3, r3, #22
 800c3a8:	d513      	bpl.n	800c3d2 <setvbuf+0x162>
 800c3aa:	2500      	movs	r5, #0
 800c3ac:	e7cf      	b.n	800c34e <setvbuf+0xde>
 800c3ae:	4648      	mov	r0, r9
 800c3b0:	f7ff fc00 	bl	800bbb4 <malloc>
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d0b2      	beq.n	800c320 <setvbuf+0xb0>
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	464d      	mov	r5, r9
 800c3c4:	e7c9      	b.n	800c35a <setvbuf+0xea>
 800c3c6:	2500      	movs	r5, #0
 800c3c8:	e7ac      	b.n	800c324 <setvbuf+0xb4>
 800c3ca:	46a9      	mov	r9, r5
 800c3cc:	e7f5      	b.n	800c3ba <setvbuf+0x14a>
 800c3ce:	60a2      	str	r2, [r4, #8]
 800c3d0:	e7e6      	b.n	800c3a0 <setvbuf+0x130>
 800c3d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3d4:	f000 f8f5 	bl	800c5c2 <__retarget_lock_release_recursive>
 800c3d8:	e7e7      	b.n	800c3aa <setvbuf+0x13a>
 800c3da:	f04f 35ff 	mov.w	r5, #4294967295
 800c3de:	e7b6      	b.n	800c34e <setvbuf+0xde>
 800c3e0:	20000430 	.word	0x20000430

0800c3e4 <sprintf>:
 800c3e4:	b40e      	push	{r1, r2, r3}
 800c3e6:	b500      	push	{lr}
 800c3e8:	b09c      	sub	sp, #112	@ 0x70
 800c3ea:	ab1d      	add	r3, sp, #116	@ 0x74
 800c3ec:	9002      	str	r0, [sp, #8]
 800c3ee:	9006      	str	r0, [sp, #24]
 800c3f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c3f4:	4809      	ldr	r0, [pc, #36]	@ (800c41c <sprintf+0x38>)
 800c3f6:	9107      	str	r1, [sp, #28]
 800c3f8:	9104      	str	r1, [sp, #16]
 800c3fa:	4909      	ldr	r1, [pc, #36]	@ (800c420 <sprintf+0x3c>)
 800c3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c400:	9105      	str	r1, [sp, #20]
 800c402:	6800      	ldr	r0, [r0, #0]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	a902      	add	r1, sp, #8
 800c408:	f000 fa0e 	bl	800c828 <_svfprintf_r>
 800c40c:	9b02      	ldr	r3, [sp, #8]
 800c40e:	2200      	movs	r2, #0
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	b01c      	add	sp, #112	@ 0x70
 800c414:	f85d eb04 	ldr.w	lr, [sp], #4
 800c418:	b003      	add	sp, #12
 800c41a:	4770      	bx	lr
 800c41c:	20000430 	.word	0x20000430
 800c420:	ffff0208 	.word	0xffff0208

0800c424 <__sread>:
 800c424:	b510      	push	{r4, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42c:	f000 f868 	bl	800c500 <_read_r>
 800c430:	2800      	cmp	r0, #0
 800c432:	bfab      	itete	ge
 800c434:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800c436:	89a3      	ldrhlt	r3, [r4, #12]
 800c438:	181b      	addge	r3, r3, r0
 800c43a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c43e:	bfac      	ite	ge
 800c440:	6523      	strge	r3, [r4, #80]	@ 0x50
 800c442:	81a3      	strhlt	r3, [r4, #12]
 800c444:	bd10      	pop	{r4, pc}

0800c446 <__swrite>:
 800c446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44a:	461f      	mov	r7, r3
 800c44c:	898b      	ldrh	r3, [r1, #12]
 800c44e:	05db      	lsls	r3, r3, #23
 800c450:	4605      	mov	r5, r0
 800c452:	460c      	mov	r4, r1
 800c454:	4616      	mov	r6, r2
 800c456:	d505      	bpl.n	800c464 <__swrite+0x1e>
 800c458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45c:	2302      	movs	r3, #2
 800c45e:	2200      	movs	r2, #0
 800c460:	f000 f83c 	bl	800c4dc <_lseek_r>
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c46a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	4632      	mov	r2, r6
 800c472:	463b      	mov	r3, r7
 800c474:	4628      	mov	r0, r5
 800c476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c47a:	f000 b863 	b.w	800c544 <_write_r>

0800c47e <__sseek>:
 800c47e:	b510      	push	{r4, lr}
 800c480:	460c      	mov	r4, r1
 800c482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c486:	f000 f829 	bl	800c4dc <_lseek_r>
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	bf15      	itete	ne
 800c490:	6520      	strne	r0, [r4, #80]	@ 0x50
 800c492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c49a:	81a3      	strheq	r3, [r4, #12]
 800c49c:	bf18      	it	ne
 800c49e:	81a3      	strhne	r3, [r4, #12]
 800c4a0:	bd10      	pop	{r4, pc}

0800c4a2 <__sclose>:
 800c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a6:	f000 b809 	b.w	800c4bc <_close_r>

0800c4aa <memset>:
 800c4aa:	4402      	add	r2, r0
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d100      	bne.n	800c4b4 <memset+0xa>
 800c4b2:	4770      	bx	lr
 800c4b4:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b8:	e7f9      	b.n	800c4ae <memset+0x4>
	...

0800c4bc <_close_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4d06      	ldr	r5, [pc, #24]	@ (800c4d8 <_close_r+0x1c>)
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	602b      	str	r3, [r5, #0]
 800c4c8:	f7f6 fb8e 	bl	8002be8 <_close>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_close_r+0x1a>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_close_r+0x1a>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	20001710 	.word	0x20001710

0800c4dc <_lseek_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d07      	ldr	r5, [pc, #28]	@ (800c4fc <_lseek_r+0x20>)
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	602a      	str	r2, [r5, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7f6 fba3 	bl	8002c36 <_lseek>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_lseek_r+0x1e>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_lseek_r+0x1e>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20001710 	.word	0x20001710

0800c500 <_read_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	@ (800c520 <_read_r+0x20>)
 800c504:	4604      	mov	r4, r0
 800c506:	4608      	mov	r0, r1
 800c508:	4611      	mov	r1, r2
 800c50a:	2200      	movs	r2, #0
 800c50c:	602a      	str	r2, [r5, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	f7f6 fb31 	bl	8002b76 <_read>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_read_r+0x1e>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_read_r+0x1e>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	20001710 	.word	0x20001710

0800c524 <_sbrk_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d06      	ldr	r5, [pc, #24]	@ (800c540 <_sbrk_r+0x1c>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	f7f6 fb8e 	bl	8002c50 <_sbrk>
 800c534:	1c43      	adds	r3, r0, #1
 800c536:	d102      	bne.n	800c53e <_sbrk_r+0x1a>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	b103      	cbz	r3, 800c53e <_sbrk_r+0x1a>
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	20001710 	.word	0x20001710

0800c544 <_write_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d07      	ldr	r5, [pc, #28]	@ (800c564 <_write_r+0x20>)
 800c548:	4604      	mov	r4, r0
 800c54a:	4608      	mov	r0, r1
 800c54c:	4611      	mov	r1, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	602a      	str	r2, [r5, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	f7f6 fb2c 	bl	8002bb0 <_write>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_write_r+0x1e>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_write_r+0x1e>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20001710 	.word	0x20001710

0800c568 <__errno>:
 800c568:	4b01      	ldr	r3, [pc, #4]	@ (800c570 <__errno+0x8>)
 800c56a:	6818      	ldr	r0, [r3, #0]
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	20000430 	.word	0x20000430

0800c574 <__libc_init_array>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	4d0d      	ldr	r5, [pc, #52]	@ (800c5ac <__libc_init_array+0x38>)
 800c578:	4c0d      	ldr	r4, [pc, #52]	@ (800c5b0 <__libc_init_array+0x3c>)
 800c57a:	1b64      	subs	r4, r4, r5
 800c57c:	10a4      	asrs	r4, r4, #2
 800c57e:	2600      	movs	r6, #0
 800c580:	42a6      	cmp	r6, r4
 800c582:	d109      	bne.n	800c598 <__libc_init_array+0x24>
 800c584:	4d0b      	ldr	r5, [pc, #44]	@ (800c5b4 <__libc_init_array+0x40>)
 800c586:	4c0c      	ldr	r4, [pc, #48]	@ (800c5b8 <__libc_init_array+0x44>)
 800c588:	f005 f97e 	bl	8011888 <_init>
 800c58c:	1b64      	subs	r4, r4, r5
 800c58e:	10a4      	asrs	r4, r4, #2
 800c590:	2600      	movs	r6, #0
 800c592:	42a6      	cmp	r6, r4
 800c594:	d105      	bne.n	800c5a2 <__libc_init_array+0x2e>
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	f855 3b04 	ldr.w	r3, [r5], #4
 800c59c:	4798      	blx	r3
 800c59e:	3601      	adds	r6, #1
 800c5a0:	e7ee      	b.n	800c580 <__libc_init_array+0xc>
 800c5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a6:	4798      	blx	r3
 800c5a8:	3601      	adds	r6, #1
 800c5aa:	e7f2      	b.n	800c592 <__libc_init_array+0x1e>
 800c5ac:	08011e90 	.word	0x08011e90
 800c5b0:	08011e90 	.word	0x08011e90
 800c5b4:	08011e90 	.word	0x08011e90
 800c5b8:	08011e98 	.word	0x08011e98

0800c5bc <__retarget_lock_init_recursive>:
 800c5bc:	4770      	bx	lr

0800c5be <__retarget_lock_close_recursive>:
 800c5be:	4770      	bx	lr

0800c5c0 <__retarget_lock_acquire_recursive>:
 800c5c0:	4770      	bx	lr

0800c5c2 <__retarget_lock_release_recursive>:
 800c5c2:	4770      	bx	lr

0800c5c4 <sysconf>:
 800c5c4:	2808      	cmp	r0, #8
 800c5c6:	b508      	push	{r3, lr}
 800c5c8:	d006      	beq.n	800c5d8 <sysconf+0x14>
 800c5ca:	f7ff ffcd 	bl	800c568 <__errno>
 800c5ce:	2316      	movs	r3, #22
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d6:	bd08      	pop	{r3, pc}
 800c5d8:	2080      	movs	r0, #128	@ 0x80
 800c5da:	e7fc      	b.n	800c5d6 <sysconf+0x12>

0800c5dc <register_fini>:
 800c5dc:	4b02      	ldr	r3, [pc, #8]	@ (800c5e8 <register_fini+0xc>)
 800c5de:	b113      	cbz	r3, 800c5e6 <register_fini+0xa>
 800c5e0:	4802      	ldr	r0, [pc, #8]	@ (800c5ec <register_fini+0x10>)
 800c5e2:	f000 b805 	b.w	800c5f0 <atexit>
 800c5e6:	4770      	bx	lr
 800c5e8:	00000000 	.word	0x00000000
 800c5ec:	0800e2ad 	.word	0x0800e2ad

0800c5f0 <atexit>:
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 beb0 	b.w	800e35c <__register_exitproc>

0800c5fc <_malloc_trim_r>:
 800c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c600:	4606      	mov	r6, r0
 800c602:	2008      	movs	r0, #8
 800c604:	4689      	mov	r9, r1
 800c606:	f7ff ffdd 	bl	800c5c4 <sysconf>
 800c60a:	4f24      	ldr	r7, [pc, #144]	@ (800c69c <_malloc_trim_r+0xa0>)
 800c60c:	4680      	mov	r8, r0
 800c60e:	4630      	mov	r0, r6
 800c610:	f7ff fd12 	bl	800c038 <__malloc_lock>
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	685d      	ldr	r5, [r3, #4]
 800c618:	f025 0503 	bic.w	r5, r5, #3
 800c61c:	f1a5 0411 	sub.w	r4, r5, #17
 800c620:	eba4 0409 	sub.w	r4, r4, r9
 800c624:	4444      	add	r4, r8
 800c626:	fbb4 f4f8 	udiv	r4, r4, r8
 800c62a:	3c01      	subs	r4, #1
 800c62c:	fb08 f404 	mul.w	r4, r8, r4
 800c630:	45a0      	cmp	r8, r4
 800c632:	dd05      	ble.n	800c640 <_malloc_trim_r+0x44>
 800c634:	4630      	mov	r0, r6
 800c636:	f7ff fd05 	bl	800c044 <__malloc_unlock>
 800c63a:	2000      	movs	r0, #0
 800c63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c640:	2100      	movs	r1, #0
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ff6e 	bl	800c524 <_sbrk_r>
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	442b      	add	r3, r5
 800c64c:	4298      	cmp	r0, r3
 800c64e:	d1f1      	bne.n	800c634 <_malloc_trim_r+0x38>
 800c650:	4261      	negs	r1, r4
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff ff66 	bl	800c524 <_sbrk_r>
 800c658:	3001      	adds	r0, #1
 800c65a:	d110      	bne.n	800c67e <_malloc_trim_r+0x82>
 800c65c:	2100      	movs	r1, #0
 800c65e:	4630      	mov	r0, r6
 800c660:	f7ff ff60 	bl	800c524 <_sbrk_r>
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	1a83      	subs	r3, r0, r2
 800c668:	2b0f      	cmp	r3, #15
 800c66a:	dde3      	ble.n	800c634 <_malloc_trim_r+0x38>
 800c66c:	490c      	ldr	r1, [pc, #48]	@ (800c6a0 <_malloc_trim_r+0xa4>)
 800c66e:	6809      	ldr	r1, [r1, #0]
 800c670:	1a40      	subs	r0, r0, r1
 800c672:	490c      	ldr	r1, [pc, #48]	@ (800c6a4 <_malloc_trim_r+0xa8>)
 800c674:	f043 0301 	orr.w	r3, r3, #1
 800c678:	6008      	str	r0, [r1, #0]
 800c67a:	6053      	str	r3, [r2, #4]
 800c67c:	e7da      	b.n	800c634 <_malloc_trim_r+0x38>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	4a08      	ldr	r2, [pc, #32]	@ (800c6a4 <_malloc_trim_r+0xa8>)
 800c682:	1b2d      	subs	r5, r5, r4
 800c684:	f045 0501 	orr.w	r5, r5, #1
 800c688:	605d      	str	r5, [r3, #4]
 800c68a:	6813      	ldr	r3, [r2, #0]
 800c68c:	4630      	mov	r0, r6
 800c68e:	1b1b      	subs	r3, r3, r4
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	f7ff fcd7 	bl	800c044 <__malloc_unlock>
 800c696:	2001      	movs	r0, #1
 800c698:	e7d0      	b.n	800c63c <_malloc_trim_r+0x40>
 800c69a:	bf00      	nop
 800c69c:	2000001c 	.word	0x2000001c
 800c6a0:	20000014 	.word	0x20000014
 800c6a4:	200015a0 	.word	0x200015a0

0800c6a8 <_free_r>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	2900      	cmp	r1, #0
 800c6b0:	f000 80b1 	beq.w	800c816 <_free_r+0x16e>
 800c6b4:	f7ff fcc0 	bl	800c038 <__malloc_lock>
 800c6b8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c6bc:	4d56      	ldr	r5, [pc, #344]	@ (800c818 <_free_r+0x170>)
 800c6be:	f022 0001 	bic.w	r0, r2, #1
 800c6c2:	f1a7 0308 	sub.w	r3, r7, #8
 800c6c6:	eb03 0c00 	add.w	ip, r3, r0
 800c6ca:	68a9      	ldr	r1, [r5, #8]
 800c6cc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800c6d0:	4561      	cmp	r1, ip
 800c6d2:	f026 0603 	bic.w	r6, r6, #3
 800c6d6:	f002 0201 	and.w	r2, r2, #1
 800c6da:	d11b      	bne.n	800c714 <_free_r+0x6c>
 800c6dc:	4406      	add	r6, r0
 800c6de:	b93a      	cbnz	r2, 800c6f0 <_free_r+0x48>
 800c6e0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800c6e4:	1a9b      	subs	r3, r3, r2
 800c6e6:	4416      	add	r6, r2
 800c6e8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800c6ec:	60ca      	str	r2, [r1, #12]
 800c6ee:	6091      	str	r1, [r2, #8]
 800c6f0:	f046 0201 	orr.w	r2, r6, #1
 800c6f4:	605a      	str	r2, [r3, #4]
 800c6f6:	60ab      	str	r3, [r5, #8]
 800c6f8:	4b48      	ldr	r3, [pc, #288]	@ (800c81c <_free_r+0x174>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	42b3      	cmp	r3, r6
 800c6fe:	d804      	bhi.n	800c70a <_free_r+0x62>
 800c700:	4b47      	ldr	r3, [pc, #284]	@ (800c820 <_free_r+0x178>)
 800c702:	4620      	mov	r0, r4
 800c704:	6819      	ldr	r1, [r3, #0]
 800c706:	f7ff ff79 	bl	800c5fc <_malloc_trim_r>
 800c70a:	4620      	mov	r0, r4
 800c70c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c710:	f7ff bc98 	b.w	800c044 <__malloc_unlock>
 800c714:	f8cc 6004 	str.w	r6, [ip, #4]
 800c718:	2a00      	cmp	r2, #0
 800c71a:	d138      	bne.n	800c78e <_free_r+0xe6>
 800c71c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800c720:	1a5b      	subs	r3, r3, r1
 800c722:	4408      	add	r0, r1
 800c724:	6899      	ldr	r1, [r3, #8]
 800c726:	f105 0708 	add.w	r7, r5, #8
 800c72a:	42b9      	cmp	r1, r7
 800c72c:	d031      	beq.n	800c792 <_free_r+0xea>
 800c72e:	68df      	ldr	r7, [r3, #12]
 800c730:	60cf      	str	r7, [r1, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	eb0c 0106 	add.w	r1, ip, r6
 800c738:	6849      	ldr	r1, [r1, #4]
 800c73a:	07c9      	lsls	r1, r1, #31
 800c73c:	d40b      	bmi.n	800c756 <_free_r+0xae>
 800c73e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800c742:	4430      	add	r0, r6
 800c744:	bb3a      	cbnz	r2, 800c796 <_free_r+0xee>
 800c746:	4e37      	ldr	r6, [pc, #220]	@ (800c824 <_free_r+0x17c>)
 800c748:	42b1      	cmp	r1, r6
 800c74a:	d124      	bne.n	800c796 <_free_r+0xee>
 800c74c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800c750:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800c754:	2201      	movs	r2, #1
 800c756:	f040 0101 	orr.w	r1, r0, #1
 800c75a:	6059      	str	r1, [r3, #4]
 800c75c:	5018      	str	r0, [r3, r0]
 800c75e:	2a00      	cmp	r2, #0
 800c760:	d1d3      	bne.n	800c70a <_free_r+0x62>
 800c762:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800c766:	d21b      	bcs.n	800c7a0 <_free_r+0xf8>
 800c768:	08c2      	lsrs	r2, r0, #3
 800c76a:	2101      	movs	r1, #1
 800c76c:	0940      	lsrs	r0, r0, #5
 800c76e:	4081      	lsls	r1, r0
 800c770:	6868      	ldr	r0, [r5, #4]
 800c772:	3201      	adds	r2, #1
 800c774:	4301      	orrs	r1, r0
 800c776:	6069      	str	r1, [r5, #4]
 800c778:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800c77c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800c780:	3908      	subs	r1, #8
 800c782:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c786:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800c78a:	60c3      	str	r3, [r0, #12]
 800c78c:	e7bd      	b.n	800c70a <_free_r+0x62>
 800c78e:	2200      	movs	r2, #0
 800c790:	e7d0      	b.n	800c734 <_free_r+0x8c>
 800c792:	2201      	movs	r2, #1
 800c794:	e7ce      	b.n	800c734 <_free_r+0x8c>
 800c796:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800c79a:	60ce      	str	r6, [r1, #12]
 800c79c:	60b1      	str	r1, [r6, #8]
 800c79e:	e7da      	b.n	800c756 <_free_r+0xae>
 800c7a0:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800c7a4:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800c7a8:	d214      	bcs.n	800c7d4 <_free_r+0x12c>
 800c7aa:	0982      	lsrs	r2, r0, #6
 800c7ac:	3238      	adds	r2, #56	@ 0x38
 800c7ae:	1c51      	adds	r1, r2, #1
 800c7b0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c7b4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c7b8:	428e      	cmp	r6, r1
 800c7ba:	d125      	bne.n	800c808 <_free_r+0x160>
 800c7bc:	2001      	movs	r0, #1
 800c7be:	1092      	asrs	r2, r2, #2
 800c7c0:	fa00 f202 	lsl.w	r2, r0, r2
 800c7c4:	6868      	ldr	r0, [r5, #4]
 800c7c6:	4302      	orrs	r2, r0
 800c7c8:	606a      	str	r2, [r5, #4]
 800c7ca:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800c7ce:	60b3      	str	r3, [r6, #8]
 800c7d0:	60cb      	str	r3, [r1, #12]
 800c7d2:	e79a      	b.n	800c70a <_free_r+0x62>
 800c7d4:	2a14      	cmp	r2, #20
 800c7d6:	d801      	bhi.n	800c7dc <_free_r+0x134>
 800c7d8:	325b      	adds	r2, #91	@ 0x5b
 800c7da:	e7e8      	b.n	800c7ae <_free_r+0x106>
 800c7dc:	2a54      	cmp	r2, #84	@ 0x54
 800c7de:	d802      	bhi.n	800c7e6 <_free_r+0x13e>
 800c7e0:	0b02      	lsrs	r2, r0, #12
 800c7e2:	326e      	adds	r2, #110	@ 0x6e
 800c7e4:	e7e3      	b.n	800c7ae <_free_r+0x106>
 800c7e6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800c7ea:	d802      	bhi.n	800c7f2 <_free_r+0x14a>
 800c7ec:	0bc2      	lsrs	r2, r0, #15
 800c7ee:	3277      	adds	r2, #119	@ 0x77
 800c7f0:	e7dd      	b.n	800c7ae <_free_r+0x106>
 800c7f2:	f240 5154 	movw	r1, #1364	@ 0x554
 800c7f6:	428a      	cmp	r2, r1
 800c7f8:	bf9a      	itte	ls
 800c7fa:	0c82      	lsrls	r2, r0, #18
 800c7fc:	327c      	addls	r2, #124	@ 0x7c
 800c7fe:	227e      	movhi	r2, #126	@ 0x7e
 800c800:	e7d5      	b.n	800c7ae <_free_r+0x106>
 800c802:	6889      	ldr	r1, [r1, #8]
 800c804:	428e      	cmp	r6, r1
 800c806:	d004      	beq.n	800c812 <_free_r+0x16a>
 800c808:	684a      	ldr	r2, [r1, #4]
 800c80a:	f022 0203 	bic.w	r2, r2, #3
 800c80e:	4282      	cmp	r2, r0
 800c810:	d8f7      	bhi.n	800c802 <_free_r+0x15a>
 800c812:	68ce      	ldr	r6, [r1, #12]
 800c814:	e7d9      	b.n	800c7ca <_free_r+0x122>
 800c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c818:	2000001c 	.word	0x2000001c
 800c81c:	20000018 	.word	0x20000018
 800c820:	200015d0 	.word	0x200015d0
 800c824:	20000024 	.word	0x20000024

0800c828 <_svfprintf_r>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	b0d3      	sub	sp, #332	@ 0x14c
 800c82e:	468b      	mov	fp, r1
 800c830:	4691      	mov	r9, r2
 800c832:	461e      	mov	r6, r3
 800c834:	9003      	str	r0, [sp, #12]
 800c836:	f001 fd13 	bl	800e260 <_localeconv_r>
 800c83a:	6803      	ldr	r3, [r0, #0]
 800c83c:	9316      	str	r3, [sp, #88]	@ 0x58
 800c83e:	4618      	mov	r0, r3
 800c840:	f7f3 fcee 	bl	8000220 <strlen>
 800c844:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c848:	900d      	str	r0, [sp, #52]	@ 0x34
 800c84a:	061b      	lsls	r3, r3, #24
 800c84c:	d515      	bpl.n	800c87a <_svfprintf_r+0x52>
 800c84e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c852:	b993      	cbnz	r3, 800c87a <_svfprintf_r+0x52>
 800c854:	9803      	ldr	r0, [sp, #12]
 800c856:	2140      	movs	r1, #64	@ 0x40
 800c858:	f7ff f9b4 	bl	800bbc4 <_malloc_r>
 800c85c:	f8cb 0000 	str.w	r0, [fp]
 800c860:	f8cb 0010 	str.w	r0, [fp, #16]
 800c864:	b930      	cbnz	r0, 800c874 <_svfprintf_r+0x4c>
 800c866:	9a03      	ldr	r2, [sp, #12]
 800c868:	230c      	movs	r3, #12
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	f04f 33ff 	mov.w	r3, #4294967295
 800c870:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c872:	e1f7      	b.n	800cc64 <_svfprintf_r+0x43c>
 800c874:	2340      	movs	r3, #64	@ 0x40
 800c876:	f8cb 3014 	str.w	r3, [fp, #20]
 800c87a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800cac8 <_svfprintf_r+0x2a0>
 800c87e:	2300      	movs	r3, #0
 800c880:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800c884:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c888:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800c88c:	ac29      	add	r4, sp, #164	@ 0xa4
 800c88e:	9426      	str	r4, [sp, #152]	@ 0x98
 800c890:	9304      	str	r3, [sp, #16]
 800c892:	9309      	str	r3, [sp, #36]	@ 0x24
 800c894:	9312      	str	r3, [sp, #72]	@ 0x48
 800c896:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c898:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c89a:	464b      	mov	r3, r9
 800c89c:	461d      	mov	r5, r3
 800c89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a2:	b10a      	cbz	r2, 800c8a8 <_svfprintf_r+0x80>
 800c8a4:	2a25      	cmp	r2, #37	@ 0x25
 800c8a6:	d1f9      	bne.n	800c89c <_svfprintf_r+0x74>
 800c8a8:	ebb5 0709 	subs.w	r7, r5, r9
 800c8ac:	d00d      	beq.n	800c8ca <_svfprintf_r+0xa2>
 800c8ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c8b0:	443b      	add	r3, r7
 800c8b2:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c8b4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	2b07      	cmp	r3, #7
 800c8ba:	e9c4 9700 	strd	r9, r7, [r4]
 800c8be:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c8c0:	dc75      	bgt.n	800c9ae <_svfprintf_r+0x186>
 800c8c2:	3408      	adds	r4, #8
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c6:	443b      	add	r3, r7
 800c8c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8ca:	782b      	ldrb	r3, [r5, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f001 8148 	beq.w	800db62 <_svfprintf_r+0x133a>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	1c6b      	adds	r3, r5, #1
 800c8d6:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800c8da:	f04f 38ff 	mov.w	r8, #4294967295
 800c8de:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8e0:	4615      	mov	r5, r2
 800c8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8e6:	9206      	str	r2, [sp, #24]
 800c8e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c8ea:	9b06      	ldr	r3, [sp, #24]
 800c8ec:	3b20      	subs	r3, #32
 800c8ee:	2b5a      	cmp	r3, #90	@ 0x5a
 800c8f0:	f200 85a4 	bhi.w	800d43c <_svfprintf_r+0xc14>
 800c8f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c8f8:	05a2009d 	.word	0x05a2009d
 800c8fc:	00a505a2 	.word	0x00a505a2
 800c900:	05a205a2 	.word	0x05a205a2
 800c904:	008505a2 	.word	0x008505a2
 800c908:	05a205a2 	.word	0x05a205a2
 800c90c:	00b200a8 	.word	0x00b200a8
 800c910:	00af05a2 	.word	0x00af05a2
 800c914:	05a200b4 	.word	0x05a200b4
 800c918:	00d100ce 	.word	0x00d100ce
 800c91c:	00d100d1 	.word	0x00d100d1
 800c920:	00d100d1 	.word	0x00d100d1
 800c924:	00d100d1 	.word	0x00d100d1
 800c928:	00d100d1 	.word	0x00d100d1
 800c92c:	05a205a2 	.word	0x05a205a2
 800c930:	05a205a2 	.word	0x05a205a2
 800c934:	05a205a2 	.word	0x05a205a2
 800c938:	014705a2 	.word	0x014705a2
 800c93c:	010805a2 	.word	0x010805a2
 800c940:	0147011b 	.word	0x0147011b
 800c944:	01470147 	.word	0x01470147
 800c948:	05a205a2 	.word	0x05a205a2
 800c94c:	05a205a2 	.word	0x05a205a2
 800c950:	05a200e2 	.word	0x05a200e2
 800c954:	049d05a2 	.word	0x049d05a2
 800c958:	05a205a2 	.word	0x05a205a2
 800c95c:	04e705a2 	.word	0x04e705a2
 800c960:	050805a2 	.word	0x050805a2
 800c964:	05a205a2 	.word	0x05a205a2
 800c968:	05a2052a 	.word	0x05a2052a
 800c96c:	05a205a2 	.word	0x05a205a2
 800c970:	05a205a2 	.word	0x05a205a2
 800c974:	05a205a2 	.word	0x05a205a2
 800c978:	014705a2 	.word	0x014705a2
 800c97c:	010805a2 	.word	0x010805a2
 800c980:	0147011d 	.word	0x0147011d
 800c984:	01470147 	.word	0x01470147
 800c988:	011d00ee 	.word	0x011d00ee
 800c98c:	05a20102 	.word	0x05a20102
 800c990:	05a200fb 	.word	0x05a200fb
 800c994:	049f047e 	.word	0x049f047e
 800c998:	010204d6 	.word	0x010204d6
 800c99c:	04e705a2 	.word	0x04e705a2
 800c9a0:	050a009b 	.word	0x050a009b
 800c9a4:	05a205a2 	.word	0x05a205a2
 800c9a8:	05a20065 	.word	0x05a20065
 800c9ac:	009b      	.short	0x009b
 800c9ae:	9803      	ldr	r0, [sp, #12]
 800c9b0:	aa26      	add	r2, sp, #152	@ 0x98
 800c9b2:	4659      	mov	r1, fp
 800c9b4:	f003 f843 	bl	800fa3e <__ssprint_r>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	f040 814e 	bne.w	800cc5a <_svfprintf_r+0x432>
 800c9be:	ac29      	add	r4, sp, #164	@ 0xa4
 800c9c0:	e780      	b.n	800c8c4 <_svfprintf_r+0x9c>
 800c9c2:	4b43      	ldr	r3, [pc, #268]	@ (800cad0 <_svfprintf_r+0x2a8>)
 800c9c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9c6:	f015 0320 	ands.w	r3, r5, #32
 800c9ca:	f000 84c2 	beq.w	800d352 <_svfprintf_r+0xb2a>
 800c9ce:	3607      	adds	r6, #7
 800c9d0:	f026 0307 	bic.w	r3, r6, #7
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	685f      	ldr	r7, [r3, #4]
 800c9d8:	f852 6b08 	ldr.w	r6, [r2], #8
 800c9dc:	9207      	str	r2, [sp, #28]
 800c9de:	07eb      	lsls	r3, r5, #31
 800c9e0:	d50a      	bpl.n	800c9f8 <_svfprintf_r+0x1d0>
 800c9e2:	ea56 0307 	orrs.w	r3, r6, r7
 800c9e6:	d007      	beq.n	800c9f8 <_svfprintf_r+0x1d0>
 800c9e8:	2330      	movs	r3, #48	@ 0x30
 800c9ea:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800c9ee:	9b06      	ldr	r3, [sp, #24]
 800c9f0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800c9f4:	f045 0502 	orr.w	r5, r5, #2
 800c9f8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	f000 bc28 	b.w	800d252 <_svfprintf_r+0xa2a>
 800ca02:	9803      	ldr	r0, [sp, #12]
 800ca04:	f001 fc2c 	bl	800e260 <_localeconv_r>
 800ca08:	6843      	ldr	r3, [r0, #4]
 800ca0a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7f3 fc07 	bl	8000220 <strlen>
 800ca12:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca14:	9803      	ldr	r0, [sp, #12]
 800ca16:	f001 fc23 	bl	800e260 <_localeconv_r>
 800ca1a:	6883      	ldr	r3, [r0, #8]
 800ca1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca20:	b12b      	cbz	r3, 800ca2e <_svfprintf_r+0x206>
 800ca22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca24:	b11b      	cbz	r3, 800ca2e <_svfprintf_r+0x206>
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	b10b      	cbz	r3, 800ca2e <_svfprintf_r+0x206>
 800ca2a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800ca2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca30:	e757      	b.n	800c8e2 <_svfprintf_r+0xba>
 800ca32:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1f9      	bne.n	800ca2e <_svfprintf_r+0x206>
 800ca3a:	2320      	movs	r3, #32
 800ca3c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800ca40:	e7f5      	b.n	800ca2e <_svfprintf_r+0x206>
 800ca42:	f045 0501 	orr.w	r5, r5, #1
 800ca46:	e7f2      	b.n	800ca2e <_svfprintf_r+0x206>
 800ca48:	f856 3b04 	ldr.w	r3, [r6], #4
 800ca4c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	daed      	bge.n	800ca2e <_svfprintf_r+0x206>
 800ca52:	425b      	negs	r3, r3
 800ca54:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca56:	f045 0504 	orr.w	r5, r5, #4
 800ca5a:	e7e8      	b.n	800ca2e <_svfprintf_r+0x206>
 800ca5c:	232b      	movs	r3, #43	@ 0x2b
 800ca5e:	e7ed      	b.n	800ca3c <_svfprintf_r+0x214>
 800ca60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca66:	9206      	str	r2, [sp, #24]
 800ca68:	2a2a      	cmp	r2, #42	@ 0x2a
 800ca6a:	d10f      	bne.n	800ca8c <_svfprintf_r+0x264>
 800ca6c:	f856 2b04 	ldr.w	r2, [r6], #4
 800ca70:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca72:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800ca76:	e7da      	b.n	800ca2e <_svfprintf_r+0x206>
 800ca78:	fb01 2808 	mla	r8, r1, r8, r2
 800ca7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca80:	9206      	str	r2, [sp, #24]
 800ca82:	9a06      	ldr	r2, [sp, #24]
 800ca84:	3a30      	subs	r2, #48	@ 0x30
 800ca86:	2a09      	cmp	r2, #9
 800ca88:	d9f6      	bls.n	800ca78 <_svfprintf_r+0x250>
 800ca8a:	e72d      	b.n	800c8e8 <_svfprintf_r+0xc0>
 800ca8c:	f04f 0800 	mov.w	r8, #0
 800ca90:	210a      	movs	r1, #10
 800ca92:	e7f6      	b.n	800ca82 <_svfprintf_r+0x25a>
 800ca94:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800ca98:	e7c9      	b.n	800ca2e <_svfprintf_r+0x206>
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800caa0:	210a      	movs	r1, #10
 800caa2:	9a06      	ldr	r2, [sp, #24]
 800caa4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800caa6:	3a30      	subs	r2, #48	@ 0x30
 800caa8:	fb01 2200 	mla	r2, r1, r0, r2
 800caac:	920e      	str	r2, [sp, #56]	@ 0x38
 800caae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab2:	9206      	str	r2, [sp, #24]
 800cab4:	3a30      	subs	r2, #48	@ 0x30
 800cab6:	2a09      	cmp	r2, #9
 800cab8:	d9f3      	bls.n	800caa2 <_svfprintf_r+0x27a>
 800caba:	e715      	b.n	800c8e8 <_svfprintf_r+0xc0>
 800cabc:	f045 0508 	orr.w	r5, r5, #8
 800cac0:	e7b5      	b.n	800ca2e <_svfprintf_r+0x206>
 800cac2:	bf00      	nop
 800cac4:	f3af 8000 	nop.w
	...
 800cad0:	08011930 	.word	0x08011930
 800cad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b68      	cmp	r3, #104	@ 0x68
 800cada:	bf01      	itttt	eq
 800cadc:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800cade:	3301      	addeq	r3, #1
 800cae0:	930c      	streq	r3, [sp, #48]	@ 0x30
 800cae2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800cae6:	bf18      	it	ne
 800cae8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800caec:	e79f      	b.n	800ca2e <_svfprintf_r+0x206>
 800caee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b6c      	cmp	r3, #108	@ 0x6c
 800caf4:	d105      	bne.n	800cb02 <_svfprintf_r+0x2da>
 800caf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caf8:	3301      	adds	r3, #1
 800cafa:	930c      	str	r3, [sp, #48]	@ 0x30
 800cafc:	f045 0520 	orr.w	r5, r5, #32
 800cb00:	e795      	b.n	800ca2e <_svfprintf_r+0x206>
 800cb02:	f045 0510 	orr.w	r5, r5, #16
 800cb06:	e792      	b.n	800ca2e <_svfprintf_r+0x206>
 800cb08:	4632      	mov	r2, r6
 800cb0a:	f852 3b04 	ldr.w	r3, [r2], #4
 800cb0e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800cb12:	2300      	movs	r3, #0
 800cb14:	9207      	str	r2, [sp, #28]
 800cb16:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800cb1a:	469a      	mov	sl, r3
 800cb1c:	f04f 0801 	mov.w	r8, #1
 800cb20:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb22:	461f      	mov	r7, r3
 800cb24:	9308      	str	r3, [sp, #32]
 800cb26:	461e      	mov	r6, r3
 800cb28:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800cb2c:	e1d2      	b.n	800ced4 <_svfprintf_r+0x6ac>
 800cb2e:	f045 0510 	orr.w	r5, r5, #16
 800cb32:	06af      	lsls	r7, r5, #26
 800cb34:	d512      	bpl.n	800cb5c <_svfprintf_r+0x334>
 800cb36:	3607      	adds	r6, #7
 800cb38:	f026 0307 	bic.w	r3, r6, #7
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	685f      	ldr	r7, [r3, #4]
 800cb40:	f852 6b08 	ldr.w	r6, [r2], #8
 800cb44:	9207      	str	r2, [sp, #28]
 800cb46:	2f00      	cmp	r7, #0
 800cb48:	da06      	bge.n	800cb58 <_svfprintf_r+0x330>
 800cb4a:	4276      	negs	r6, r6
 800cb4c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800cb50:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800cb54:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e37d      	b.n	800d258 <_svfprintf_r+0xa30>
 800cb5c:	4633      	mov	r3, r6
 800cb5e:	06ee      	lsls	r6, r5, #27
 800cb60:	f853 7b04 	ldr.w	r7, [r3], #4
 800cb64:	9307      	str	r3, [sp, #28]
 800cb66:	d502      	bpl.n	800cb6e <_svfprintf_r+0x346>
 800cb68:	463e      	mov	r6, r7
 800cb6a:	17ff      	asrs	r7, r7, #31
 800cb6c:	e7eb      	b.n	800cb46 <_svfprintf_r+0x31e>
 800cb6e:	0668      	lsls	r0, r5, #25
 800cb70:	d503      	bpl.n	800cb7a <_svfprintf_r+0x352>
 800cb72:	b23e      	sxth	r6, r7
 800cb74:	f347 37c0 	sbfx	r7, r7, #15, #1
 800cb78:	e7e5      	b.n	800cb46 <_svfprintf_r+0x31e>
 800cb7a:	05a9      	lsls	r1, r5, #22
 800cb7c:	d5f4      	bpl.n	800cb68 <_svfprintf_r+0x340>
 800cb7e:	b27e      	sxtb	r6, r7
 800cb80:	f347 17c0 	sbfx	r7, r7, #7, #1
 800cb84:	e7df      	b.n	800cb46 <_svfprintf_r+0x31e>
 800cb86:	3607      	adds	r6, #7
 800cb88:	f026 0307 	bic.w	r3, r6, #7
 800cb8c:	ecb3 7b02 	vldmia	r3!, {d7}
 800cb90:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cb94:	9307      	str	r3, [sp, #28]
 800cb96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb98:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cba0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cba2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800cba6:	4b81      	ldr	r3, [pc, #516]	@ (800cdac <_svfprintf_r+0x584>)
 800cba8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbac:	f7f3 ffe6 	bl	8000b7c <__aeabi_dcmpun>
 800cbb0:	bb10      	cbnz	r0, 800cbf8 <_svfprintf_r+0x3d0>
 800cbb2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800cbb6:	4b7d      	ldr	r3, [pc, #500]	@ (800cdac <_svfprintf_r+0x584>)
 800cbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbbc:	f7f3 ffc0 	bl	8000b40 <__aeabi_dcmple>
 800cbc0:	b9d0      	cbnz	r0, 800cbf8 <_svfprintf_r+0x3d0>
 800cbc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f7f3 ffaf 	bl	8000b2c <__aeabi_dcmplt>
 800cbce:	b110      	cbz	r0, 800cbd6 <_svfprintf_r+0x3ae>
 800cbd0:	232d      	movs	r3, #45	@ 0x2d
 800cbd2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800cbd6:	4a76      	ldr	r2, [pc, #472]	@ (800cdb0 <_svfprintf_r+0x588>)
 800cbd8:	4b76      	ldr	r3, [pc, #472]	@ (800cdb4 <_svfprintf_r+0x58c>)
 800cbda:	9906      	ldr	r1, [sp, #24]
 800cbdc:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800cbe0:	2947      	cmp	r1, #71	@ 0x47
 800cbe2:	bfd4      	ite	le
 800cbe4:	4691      	movle	r9, r2
 800cbe6:	4699      	movgt	r9, r3
 800cbe8:	f04f 0a00 	mov.w	sl, #0
 800cbec:	f04f 0803 	mov.w	r8, #3
 800cbf0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800cbf4:	f000 bfec 	b.w	800dbd0 <_svfprintf_r+0x13a8>
 800cbf8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	4619      	mov	r1, r3
 800cc00:	f7f3 ffbc 	bl	8000b7c <__aeabi_dcmpun>
 800cc04:	4682      	mov	sl, r0
 800cc06:	b140      	cbz	r0, 800cc1a <_svfprintf_r+0x3f2>
 800cc08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc0a:	4a6b      	ldr	r2, [pc, #428]	@ (800cdb8 <_svfprintf_r+0x590>)
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bfbc      	itt	lt
 800cc10:	232d      	movlt	r3, #45	@ 0x2d
 800cc12:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800cc16:	4b69      	ldr	r3, [pc, #420]	@ (800cdbc <_svfprintf_r+0x594>)
 800cc18:	e7df      	b.n	800cbda <_svfprintf_r+0x3b2>
 800cc1a:	9b06      	ldr	r3, [sp, #24]
 800cc1c:	2b61      	cmp	r3, #97	@ 0x61
 800cc1e:	d025      	beq.n	800cc6c <_svfprintf_r+0x444>
 800cc20:	2b41      	cmp	r3, #65	@ 0x41
 800cc22:	d125      	bne.n	800cc70 <_svfprintf_r+0x448>
 800cc24:	2358      	movs	r3, #88	@ 0x58
 800cc26:	2230      	movs	r2, #48	@ 0x30
 800cc28:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800cc2c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800cc30:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800cc34:	f045 0502 	orr.w	r5, r5, #2
 800cc38:	f340 80a5 	ble.w	800cd86 <_svfprintf_r+0x55e>
 800cc3c:	9803      	ldr	r0, [sp, #12]
 800cc3e:	f108 0101 	add.w	r1, r8, #1
 800cc42:	f7fe ffbf 	bl	800bbc4 <_malloc_r>
 800cc46:	4681      	mov	r9, r0
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f040 80a1 	bne.w	800cd90 <_svfprintf_r+0x568>
 800cc4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800cc52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc56:	f8ab 300c 	strh.w	r3, [fp, #12]
 800cc5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800cc5e:	065b      	lsls	r3, r3, #25
 800cc60:	f53f ae04 	bmi.w	800c86c <_svfprintf_r+0x44>
 800cc64:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800cc66:	b053      	add	sp, #332	@ 0x14c
 800cc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6c:	2378      	movs	r3, #120	@ 0x78
 800cc6e:	e7da      	b.n	800cc26 <_svfprintf_r+0x3fe>
 800cc70:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cc74:	f000 808e 	beq.w	800cd94 <_svfprintf_r+0x56c>
 800cc78:	9b06      	ldr	r3, [sp, #24]
 800cc7a:	f023 0320 	bic.w	r3, r3, #32
 800cc7e:	2b47      	cmp	r3, #71	@ 0x47
 800cc80:	d105      	bne.n	800cc8e <_svfprintf_r+0x466>
 800cc82:	f1b8 0f00 	cmp.w	r8, #0
 800cc86:	d102      	bne.n	800cc8e <_svfprintf_r+0x466>
 800cc88:	46c2      	mov	sl, r8
 800cc8a:	f04f 0801 	mov.w	r8, #1
 800cc8e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800cc92:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	da7f      	bge.n	800cd9a <_svfprintf_r+0x572>
 800cc9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc9c:	9314      	str	r3, [sp, #80]	@ 0x50
 800cc9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cca0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cca4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cca6:	232d      	movs	r3, #45	@ 0x2d
 800cca8:	931c      	str	r3, [sp, #112]	@ 0x70
 800ccaa:	9b06      	ldr	r3, [sp, #24]
 800ccac:	f023 0320 	bic.w	r3, r3, #32
 800ccb0:	2b41      	cmp	r3, #65	@ 0x41
 800ccb2:	9308      	str	r3, [sp, #32]
 800ccb4:	f040 81e6 	bne.w	800d084 <_svfprintf_r+0x85c>
 800ccb8:	a820      	add	r0, sp, #128	@ 0x80
 800ccba:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800ccbe:	f001 fb17 	bl	800e2f0 <frexp>
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ccc8:	ec51 0b10 	vmov	r0, r1, d0
 800cccc:	f7f3 fcbc 	bl	8000648 <__aeabi_dmul>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f7f3 ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 800cce0:	b108      	cbz	r0, 800cce6 <_svfprintf_r+0x4be>
 800cce2:	2301      	movs	r3, #1
 800cce4:	9320      	str	r3, [sp, #128]	@ 0x80
 800cce6:	4a36      	ldr	r2, [pc, #216]	@ (800cdc0 <_svfprintf_r+0x598>)
 800cce8:	4b36      	ldr	r3, [pc, #216]	@ (800cdc4 <_svfprintf_r+0x59c>)
 800ccea:	9906      	ldr	r1, [sp, #24]
 800ccec:	2961      	cmp	r1, #97	@ 0x61
 800ccee:	bf18      	it	ne
 800ccf0:	461a      	movne	r2, r3
 800ccf2:	9210      	str	r2, [sp, #64]	@ 0x40
 800ccf4:	f108 37ff 	add.w	r7, r8, #4294967295
 800ccf8:	464e      	mov	r6, r9
 800ccfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccfe:	4b32      	ldr	r3, [pc, #200]	@ (800cdc8 <_svfprintf_r+0x5a0>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	f7f3 fca1 	bl	8000648 <__aeabi_dmul>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd0e:	f7f3 ff4b 	bl	8000ba8 <__aeabi_d2iz>
 800cd12:	9013      	str	r0, [sp, #76]	@ 0x4c
 800cd14:	f7f3 fc2e 	bl	8000574 <__aeabi_i2d>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd20:	f7f3 fada 	bl	80002d8 <__aeabi_dsub>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd30:	5c9b      	ldrb	r3, [r3, r2]
 800cd32:	f806 3b01 	strb.w	r3, [r6], #1
 800cd36:	1c7a      	adds	r2, r7, #1
 800cd38:	d006      	beq.n	800cd48 <_svfprintf_r+0x520>
 800cd3a:	1e7b      	subs	r3, r7, #1
 800cd3c:	931d      	str	r3, [sp, #116]	@ 0x74
 800cd3e:	2200      	movs	r2, #0
 800cd40:	2300      	movs	r3, #0
 800cd42:	f7f3 fee9 	bl	8000b18 <__aeabi_dcmpeq>
 800cd46:	b370      	cbz	r0, 800cda6 <_svfprintf_r+0x57e>
 800cd48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd4c:	4b1f      	ldr	r3, [pc, #124]	@ (800cdcc <_svfprintf_r+0x5a4>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f7f3 ff0a 	bl	8000b68 <__aeabi_dcmpgt>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d13b      	bne.n	800cdd0 <_svfprintf_r+0x5a8>
 800cd58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd5c:	4b1b      	ldr	r3, [pc, #108]	@ (800cdcc <_svfprintf_r+0x5a4>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f7f3 feda 	bl	8000b18 <__aeabi_dcmpeq>
 800cd64:	b110      	cbz	r0, 800cd6c <_svfprintf_r+0x544>
 800cd66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd68:	07db      	lsls	r3, r3, #31
 800cd6a:	d431      	bmi.n	800cdd0 <_svfprintf_r+0x5a8>
 800cd6c:	4633      	mov	r3, r6
 800cd6e:	19f1      	adds	r1, r6, r7
 800cd70:	2030      	movs	r0, #48	@ 0x30
 800cd72:	1aca      	subs	r2, r1, r3
 800cd74:	2a00      	cmp	r2, #0
 800cd76:	f280 8182 	bge.w	800d07e <_svfprintf_r+0x856>
 800cd7a:	1c7b      	adds	r3, r7, #1
 800cd7c:	3701      	adds	r7, #1
 800cd7e:	bfb8      	it	lt
 800cd80:	2300      	movlt	r3, #0
 800cd82:	441e      	add	r6, r3
 800cd84:	e038      	b.n	800cdf8 <_svfprintf_r+0x5d0>
 800cd86:	f04f 0a00 	mov.w	sl, #0
 800cd8a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800cd8e:	e77e      	b.n	800cc8e <_svfprintf_r+0x466>
 800cd90:	4682      	mov	sl, r0
 800cd92:	e77c      	b.n	800cc8e <_svfprintf_r+0x466>
 800cd94:	f04f 0806 	mov.w	r8, #6
 800cd98:	e779      	b.n	800cc8e <_svfprintf_r+0x466>
 800cd9a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800cd9e:	2300      	movs	r3, #0
 800cda0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800cda4:	e780      	b.n	800cca8 <_svfprintf_r+0x480>
 800cda6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800cda8:	e7a7      	b.n	800ccfa <_svfprintf_r+0x4d2>
 800cdaa:	bf00      	nop
 800cdac:	7fefffff 	.word	0x7fefffff
 800cdb0:	08011920 	.word	0x08011920
 800cdb4:	08011924 	.word	0x08011924
 800cdb8:	08011928 	.word	0x08011928
 800cdbc:	0801192c 	.word	0x0801192c
 800cdc0:	08011930 	.word	0x08011930
 800cdc4:	08011941 	.word	0x08011941
 800cdc8:	40300000 	.word	0x40300000
 800cdcc:	3fe00000 	.word	0x3fe00000
 800cdd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdd2:	9624      	str	r6, [sp, #144]	@ 0x90
 800cdd4:	7bd9      	ldrb	r1, [r3, #15]
 800cdd6:	2030      	movs	r0, #48	@ 0x30
 800cdd8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cdda:	1e53      	subs	r3, r2, #1
 800cddc:	9324      	str	r3, [sp, #144]	@ 0x90
 800cdde:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800cde2:	428b      	cmp	r3, r1
 800cde4:	f000 8148 	beq.w	800d078 <_svfprintf_r+0x850>
 800cde8:	2b39      	cmp	r3, #57	@ 0x39
 800cdea:	bf0b      	itete	eq
 800cdec:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800cdee:	3301      	addne	r3, #1
 800cdf0:	7a9b      	ldrbeq	r3, [r3, #10]
 800cdf2:	b2db      	uxtbne	r3, r3
 800cdf4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cdf8:	eba6 0309 	sub.w	r3, r6, r9
 800cdfc:	9304      	str	r3, [sp, #16]
 800cdfe:	9b08      	ldr	r3, [sp, #32]
 800ce00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ce02:	2b47      	cmp	r3, #71	@ 0x47
 800ce04:	f040 8187 	bne.w	800d116 <_svfprintf_r+0x8ee>
 800ce08:	1cf1      	adds	r1, r6, #3
 800ce0a:	db02      	blt.n	800ce12 <_svfprintf_r+0x5ea>
 800ce0c:	4546      	cmp	r6, r8
 800ce0e:	f340 81a5 	ble.w	800d15c <_svfprintf_r+0x934>
 800ce12:	9b06      	ldr	r3, [sp, #24]
 800ce14:	3b02      	subs	r3, #2
 800ce16:	9306      	str	r3, [sp, #24]
 800ce18:	9906      	ldr	r1, [sp, #24]
 800ce1a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800ce1e:	f021 0120 	bic.w	r1, r1, #32
 800ce22:	2941      	cmp	r1, #65	@ 0x41
 800ce24:	bf08      	it	eq
 800ce26:	320f      	addeq	r2, #15
 800ce28:	f106 33ff 	add.w	r3, r6, #4294967295
 800ce2c:	bf06      	itte	eq
 800ce2e:	b2d2      	uxtbeq	r2, r2
 800ce30:	2101      	moveq	r1, #1
 800ce32:	2100      	movne	r1, #0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	9320      	str	r3, [sp, #128]	@ 0x80
 800ce38:	bfb8      	it	lt
 800ce3a:	f1c6 0301 	rsblt	r3, r6, #1
 800ce3e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800ce42:	bfb4      	ite	lt
 800ce44:	222d      	movlt	r2, #45	@ 0x2d
 800ce46:	222b      	movge	r2, #43	@ 0x2b
 800ce48:	2b09      	cmp	r3, #9
 800ce4a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800ce4e:	f340 8178 	ble.w	800d142 <_svfprintf_r+0x91a>
 800ce52:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800ce56:	270a      	movs	r7, #10
 800ce58:	4602      	mov	r2, r0
 800ce5a:	fbb3 f6f7 	udiv	r6, r3, r7
 800ce5e:	fb07 3116 	mls	r1, r7, r6, r3
 800ce62:	3130      	adds	r1, #48	@ 0x30
 800ce64:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	2963      	cmp	r1, #99	@ 0x63
 800ce6c:	f100 30ff 	add.w	r0, r0, #4294967295
 800ce70:	4633      	mov	r3, r6
 800ce72:	dcf1      	bgt.n	800ce58 <_svfprintf_r+0x630>
 800ce74:	3330      	adds	r3, #48	@ 0x30
 800ce76:	1e91      	subs	r1, r2, #2
 800ce78:	f800 3c01 	strb.w	r3, [r0, #-1]
 800ce7c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800ce80:	460b      	mov	r3, r1
 800ce82:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800ce86:	4283      	cmp	r3, r0
 800ce88:	f0c0 8156 	bcc.w	800d138 <_svfprintf_r+0x910>
 800ce8c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800ce90:	1a9b      	subs	r3, r3, r2
 800ce92:	4281      	cmp	r1, r0
 800ce94:	bf88      	it	hi
 800ce96:	2300      	movhi	r3, #0
 800ce98:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800ce9c:	441a      	add	r2, r3
 800ce9e:	ab22      	add	r3, sp, #136	@ 0x88
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	9318      	str	r3, [sp, #96]	@ 0x60
 800cea6:	2a01      	cmp	r2, #1
 800cea8:	eb03 0802 	add.w	r8, r3, r2
 800ceac:	dc01      	bgt.n	800ceb2 <_svfprintf_r+0x68a>
 800ceae:	07ea      	lsls	r2, r5, #31
 800ceb0:	d501      	bpl.n	800ceb6 <_svfprintf_r+0x68e>
 800ceb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ceb4:	4498      	add	r8, r3
 800ceb6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ceba:	2700      	movs	r7, #0
 800cebc:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800cec0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cec2:	9708      	str	r7, [sp, #32]
 800cec4:	463e      	mov	r6, r7
 800cec6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f040 818f 	bne.w	800d1ec <_svfprintf_r+0x9c4>
 800cece:	2300      	movs	r3, #0
 800ced0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ced2:	9310      	str	r3, [sp, #64]	@ 0x40
 800ced4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ced6:	4543      	cmp	r3, r8
 800ced8:	bfb8      	it	lt
 800ceda:	4643      	movlt	r3, r8
 800cedc:	9311      	str	r3, [sp, #68]	@ 0x44
 800cede:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800cee2:	b113      	cbz	r3, 800ceea <_svfprintf_r+0x6c2>
 800cee4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cee6:	3301      	adds	r3, #1
 800cee8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ceea:	f015 0302 	ands.w	r3, r5, #2
 800ceee:	931c      	str	r3, [sp, #112]	@ 0x70
 800cef0:	bf1e      	ittt	ne
 800cef2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800cef4:	3302      	addne	r3, #2
 800cef6:	9311      	strne	r3, [sp, #68]	@ 0x44
 800cef8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800cefc:	931d      	str	r3, [sp, #116]	@ 0x74
 800cefe:	d122      	bne.n	800cf46 <_svfprintf_r+0x71e>
 800cf00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf02:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cf04:	1a9b      	subs	r3, r3, r2
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf0a:	dd1c      	ble.n	800cf46 <_svfprintf_r+0x71e>
 800cf0c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cf0e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800cf12:	2810      	cmp	r0, #16
 800cf14:	489e      	ldr	r0, [pc, #632]	@ (800d190 <_svfprintf_r+0x968>)
 800cf16:	6020      	str	r0, [r4, #0]
 800cf18:	f102 0201 	add.w	r2, r2, #1
 800cf1c:	f104 0108 	add.w	r1, r4, #8
 800cf20:	f300 8298 	bgt.w	800d454 <_svfprintf_r+0xc2c>
 800cf24:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cf26:	6060      	str	r0, [r4, #4]
 800cf28:	4403      	add	r3, r0
 800cf2a:	2a07      	cmp	r2, #7
 800cf2c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cf30:	f340 82a5 	ble.w	800d47e <_svfprintf_r+0xc56>
 800cf34:	9803      	ldr	r0, [sp, #12]
 800cf36:	aa26      	add	r2, sp, #152	@ 0x98
 800cf38:	4659      	mov	r1, fp
 800cf3a:	f002 fd80 	bl	800fa3e <__ssprint_r>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f040 85ed 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800cf44:	ac29      	add	r4, sp, #164	@ 0xa4
 800cf46:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800cf4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cf4c:	b16a      	cbz	r2, 800cf6a <_svfprintf_r+0x742>
 800cf4e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800cf52:	6022      	str	r2, [r4, #0]
 800cf54:	2201      	movs	r2, #1
 800cf56:	4413      	add	r3, r2
 800cf58:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cf5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cf5c:	6062      	str	r2, [r4, #4]
 800cf5e:	4413      	add	r3, r2
 800cf60:	2b07      	cmp	r3, #7
 800cf62:	9327      	str	r3, [sp, #156]	@ 0x9c
 800cf64:	f300 828d 	bgt.w	800d482 <_svfprintf_r+0xc5a>
 800cf68:	3408      	adds	r4, #8
 800cf6a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf6c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cf6e:	b162      	cbz	r2, 800cf8a <_svfprintf_r+0x762>
 800cf70:	aa1f      	add	r2, sp, #124	@ 0x7c
 800cf72:	6022      	str	r2, [r4, #0]
 800cf74:	2202      	movs	r2, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cf7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cf7c:	6062      	str	r2, [r4, #4]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	9327      	str	r3, [sp, #156]	@ 0x9c
 800cf84:	f300 8287 	bgt.w	800d496 <_svfprintf_r+0xc6e>
 800cf88:	3408      	adds	r4, #8
 800cf8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf8c:	2b80      	cmp	r3, #128	@ 0x80
 800cf8e:	d122      	bne.n	800cfd6 <_svfprintf_r+0x7ae>
 800cf90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf92:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf9a:	dd1c      	ble.n	800cfd6 <_svfprintf_r+0x7ae>
 800cf9c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cf9e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800cfa2:	2810      	cmp	r0, #16
 800cfa4:	487b      	ldr	r0, [pc, #492]	@ (800d194 <_svfprintf_r+0x96c>)
 800cfa6:	6020      	str	r0, [r4, #0]
 800cfa8:	f102 0201 	add.w	r2, r2, #1
 800cfac:	f104 0108 	add.w	r1, r4, #8
 800cfb0:	f300 827b 	bgt.w	800d4aa <_svfprintf_r+0xc82>
 800cfb4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cfb6:	6060      	str	r0, [r4, #4]
 800cfb8:	4403      	add	r3, r0
 800cfba:	2a07      	cmp	r2, #7
 800cfbc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cfc0:	f340 8288 	ble.w	800d4d4 <_svfprintf_r+0xcac>
 800cfc4:	9803      	ldr	r0, [sp, #12]
 800cfc6:	aa26      	add	r2, sp, #152	@ 0x98
 800cfc8:	4659      	mov	r1, fp
 800cfca:	f002 fd38 	bl	800fa3e <__ssprint_r>
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	f040 85a5 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800cfd4:	ac29      	add	r4, sp, #164	@ 0xa4
 800cfd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfd8:	eba3 0308 	sub.w	r3, r3, r8
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfe0:	dd1c      	ble.n	800d01c <_svfprintf_r+0x7f4>
 800cfe2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cfe4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800cfe8:	2810      	cmp	r0, #16
 800cfea:	486a      	ldr	r0, [pc, #424]	@ (800d194 <_svfprintf_r+0x96c>)
 800cfec:	6020      	str	r0, [r4, #0]
 800cfee:	f102 0201 	add.w	r2, r2, #1
 800cff2:	f104 0108 	add.w	r1, r4, #8
 800cff6:	f300 826f 	bgt.w	800d4d8 <_svfprintf_r+0xcb0>
 800cffa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cffc:	6060      	str	r0, [r4, #4]
 800cffe:	4403      	add	r3, r0
 800d000:	2a07      	cmp	r2, #7
 800d002:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d006:	f340 827c 	ble.w	800d502 <_svfprintf_r+0xcda>
 800d00a:	9803      	ldr	r0, [sp, #12]
 800d00c:	aa26      	add	r2, sp, #152	@ 0x98
 800d00e:	4659      	mov	r1, fp
 800d010:	f002 fd15 	bl	800fa3e <__ssprint_r>
 800d014:	2800      	cmp	r0, #0
 800d016:	f040 8582 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d01a:	ac29      	add	r4, sp, #164	@ 0xa4
 800d01c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d01e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d020:	05ea      	lsls	r2, r5, #23
 800d022:	f100 8275 	bmi.w	800d510 <_svfprintf_r+0xce8>
 800d026:	4443      	add	r3, r8
 800d028:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d02a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d02c:	3301      	adds	r3, #1
 800d02e:	2b07      	cmp	r3, #7
 800d030:	e9c4 9800 	strd	r9, r8, [r4]
 800d034:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d036:	f300 82b1 	bgt.w	800d59c <_svfprintf_r+0xd74>
 800d03a:	3408      	adds	r4, #8
 800d03c:	076a      	lsls	r2, r5, #29
 800d03e:	f100 8550 	bmi.w	800dae2 <_svfprintf_r+0x12ba>
 800d042:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d046:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d048:	428a      	cmp	r2, r1
 800d04a:	bfac      	ite	ge
 800d04c:	189b      	addge	r3, r3, r2
 800d04e:	185b      	addlt	r3, r3, r1
 800d050:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d052:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d054:	b13b      	cbz	r3, 800d066 <_svfprintf_r+0x83e>
 800d056:	9803      	ldr	r0, [sp, #12]
 800d058:	aa26      	add	r2, sp, #152	@ 0x98
 800d05a:	4659      	mov	r1, fp
 800d05c:	f002 fcef 	bl	800fa3e <__ssprint_r>
 800d060:	2800      	cmp	r0, #0
 800d062:	f040 855c 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d066:	2300      	movs	r3, #0
 800d068:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d06a:	f1ba 0f00 	cmp.w	sl, #0
 800d06e:	f040 8572 	bne.w	800db56 <_svfprintf_r+0x132e>
 800d072:	9e07      	ldr	r6, [sp, #28]
 800d074:	ac29      	add	r4, sp, #164	@ 0xa4
 800d076:	e0c6      	b.n	800d206 <_svfprintf_r+0x9de>
 800d078:	f802 0c01 	strb.w	r0, [r2, #-1]
 800d07c:	e6ac      	b.n	800cdd8 <_svfprintf_r+0x5b0>
 800d07e:	f803 0b01 	strb.w	r0, [r3], #1
 800d082:	e676      	b.n	800cd72 <_svfprintf_r+0x54a>
 800d084:	9b08      	ldr	r3, [sp, #32]
 800d086:	2b46      	cmp	r3, #70	@ 0x46
 800d088:	d005      	beq.n	800d096 <_svfprintf_r+0x86e>
 800d08a:	2b45      	cmp	r3, #69	@ 0x45
 800d08c:	d11a      	bne.n	800d0c4 <_svfprintf_r+0x89c>
 800d08e:	f108 0601 	add.w	r6, r8, #1
 800d092:	2102      	movs	r1, #2
 800d094:	e001      	b.n	800d09a <_svfprintf_r+0x872>
 800d096:	4646      	mov	r6, r8
 800d098:	2103      	movs	r1, #3
 800d09a:	ab24      	add	r3, sp, #144	@ 0x90
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	ab21      	add	r3, sp, #132	@ 0x84
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800d0a6:	ab20      	add	r3, sp, #128	@ 0x80
 800d0a8:	9803      	ldr	r0, [sp, #12]
 800d0aa:	4632      	mov	r2, r6
 800d0ac:	f001 fa20 	bl	800e4f0 <_dtoa_r>
 800d0b0:	9b08      	ldr	r3, [sp, #32]
 800d0b2:	2b47      	cmp	r3, #71	@ 0x47
 800d0b4:	4681      	mov	r9, r0
 800d0b6:	d119      	bne.n	800d0ec <_svfprintf_r+0x8c4>
 800d0b8:	07e8      	lsls	r0, r5, #31
 800d0ba:	d405      	bmi.n	800d0c8 <_svfprintf_r+0x8a0>
 800d0bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d0be:	eba3 0309 	sub.w	r3, r3, r9
 800d0c2:	e69b      	b.n	800cdfc <_svfprintf_r+0x5d4>
 800d0c4:	4646      	mov	r6, r8
 800d0c6:	e7e4      	b.n	800d092 <_svfprintf_r+0x86a>
 800d0c8:	eb09 0706 	add.w	r7, r9, r6
 800d0cc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f7f3 fd20 	bl	8000b18 <__aeabi_dcmpeq>
 800d0d8:	b100      	cbz	r0, 800d0dc <_svfprintf_r+0x8b4>
 800d0da:	9724      	str	r7, [sp, #144]	@ 0x90
 800d0dc:	2230      	movs	r2, #48	@ 0x30
 800d0de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d0e0:	429f      	cmp	r7, r3
 800d0e2:	d9eb      	bls.n	800d0bc <_svfprintf_r+0x894>
 800d0e4:	1c59      	adds	r1, r3, #1
 800d0e6:	9124      	str	r1, [sp, #144]	@ 0x90
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	e7f8      	b.n	800d0de <_svfprintf_r+0x8b6>
 800d0ec:	9b08      	ldr	r3, [sp, #32]
 800d0ee:	2b46      	cmp	r3, #70	@ 0x46
 800d0f0:	eb00 0706 	add.w	r7, r0, r6
 800d0f4:	d1ea      	bne.n	800d0cc <_svfprintf_r+0x8a4>
 800d0f6:	7803      	ldrb	r3, [r0, #0]
 800d0f8:	2b30      	cmp	r3, #48	@ 0x30
 800d0fa:	d109      	bne.n	800d110 <_svfprintf_r+0x8e8>
 800d0fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800d100:	2200      	movs	r2, #0
 800d102:	2300      	movs	r3, #0
 800d104:	f7f3 fd08 	bl	8000b18 <__aeabi_dcmpeq>
 800d108:	b910      	cbnz	r0, 800d110 <_svfprintf_r+0x8e8>
 800d10a:	f1c6 0601 	rsb	r6, r6, #1
 800d10e:	9620      	str	r6, [sp, #128]	@ 0x80
 800d110:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d112:	441f      	add	r7, r3
 800d114:	e7da      	b.n	800d0cc <_svfprintf_r+0x8a4>
 800d116:	9b08      	ldr	r3, [sp, #32]
 800d118:	2b46      	cmp	r3, #70	@ 0x46
 800d11a:	f47f ae7d 	bne.w	800ce18 <_svfprintf_r+0x5f0>
 800d11e:	f005 0301 	and.w	r3, r5, #1
 800d122:	2e00      	cmp	r6, #0
 800d124:	ea43 0308 	orr.w	r3, r3, r8
 800d128:	dd25      	ble.n	800d176 <_svfprintf_r+0x94e>
 800d12a:	b37b      	cbz	r3, 800d18c <_svfprintf_r+0x964>
 800d12c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d12e:	18f3      	adds	r3, r6, r3
 800d130:	4498      	add	r8, r3
 800d132:	2366      	movs	r3, #102	@ 0x66
 800d134:	9306      	str	r3, [sp, #24]
 800d136:	e033      	b.n	800d1a0 <_svfprintf_r+0x978>
 800d138:	f813 7b01 	ldrb.w	r7, [r3], #1
 800d13c:	f806 7f01 	strb.w	r7, [r6, #1]!
 800d140:	e6a1      	b.n	800ce86 <_svfprintf_r+0x65e>
 800d142:	b941      	cbnz	r1, 800d156 <_svfprintf_r+0x92e>
 800d144:	2230      	movs	r2, #48	@ 0x30
 800d146:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800d14a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800d14e:	3330      	adds	r3, #48	@ 0x30
 800d150:	f802 3b01 	strb.w	r3, [r2], #1
 800d154:	e6a3      	b.n	800ce9e <_svfprintf_r+0x676>
 800d156:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800d15a:	e7f8      	b.n	800d14e <_svfprintf_r+0x926>
 800d15c:	9b04      	ldr	r3, [sp, #16]
 800d15e:	429e      	cmp	r6, r3
 800d160:	da0d      	bge.n	800d17e <_svfprintf_r+0x956>
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d166:	2e00      	cmp	r6, #0
 800d168:	eb03 0802 	add.w	r8, r3, r2
 800d16c:	dc0c      	bgt.n	800d188 <_svfprintf_r+0x960>
 800d16e:	f1c6 0301 	rsb	r3, r6, #1
 800d172:	4498      	add	r8, r3
 800d174:	e008      	b.n	800d188 <_svfprintf_r+0x960>
 800d176:	b17b      	cbz	r3, 800d198 <_svfprintf_r+0x970>
 800d178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d17a:	3301      	adds	r3, #1
 800d17c:	e7d8      	b.n	800d130 <_svfprintf_r+0x908>
 800d17e:	07eb      	lsls	r3, r5, #31
 800d180:	d521      	bpl.n	800d1c6 <_svfprintf_r+0x99e>
 800d182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d184:	eb06 0803 	add.w	r8, r6, r3
 800d188:	2367      	movs	r3, #103	@ 0x67
 800d18a:	e7d3      	b.n	800d134 <_svfprintf_r+0x90c>
 800d18c:	46b0      	mov	r8, r6
 800d18e:	e7d0      	b.n	800d132 <_svfprintf_r+0x90a>
 800d190:	08011964 	.word	0x08011964
 800d194:	08011954 	.word	0x08011954
 800d198:	2366      	movs	r3, #102	@ 0x66
 800d19a:	9306      	str	r3, [sp, #24]
 800d19c:	f04f 0801 	mov.w	r8, #1
 800d1a0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800d1a4:	9308      	str	r3, [sp, #32]
 800d1a6:	d01f      	beq.n	800d1e8 <_svfprintf_r+0x9c0>
 800d1a8:	2700      	movs	r7, #0
 800d1aa:	2e00      	cmp	r6, #0
 800d1ac:	9708      	str	r7, [sp, #32]
 800d1ae:	f77f ae8a 	ble.w	800cec6 <_svfprintf_r+0x69e>
 800d1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2bff      	cmp	r3, #255	@ 0xff
 800d1b8:	d107      	bne.n	800d1ca <_svfprintf_r+0x9a2>
 800d1ba:	9b08      	ldr	r3, [sp, #32]
 800d1bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d1be:	443b      	add	r3, r7
 800d1c0:	fb02 8803 	mla	r8, r2, r3, r8
 800d1c4:	e67f      	b.n	800cec6 <_svfprintf_r+0x69e>
 800d1c6:	46b0      	mov	r8, r6
 800d1c8:	e7de      	b.n	800d188 <_svfprintf_r+0x960>
 800d1ca:	42b3      	cmp	r3, r6
 800d1cc:	daf5      	bge.n	800d1ba <_svfprintf_r+0x992>
 800d1ce:	1af6      	subs	r6, r6, r3
 800d1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	b133      	cbz	r3, 800d1e4 <_svfprintf_r+0x9bc>
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	9308      	str	r3, [sp, #32]
 800d1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1de:	3301      	adds	r3, #1
 800d1e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1e2:	e7e6      	b.n	800d1b2 <_svfprintf_r+0x98a>
 800d1e4:	3701      	adds	r7, #1
 800d1e6:	e7e4      	b.n	800d1b2 <_svfprintf_r+0x98a>
 800d1e8:	9f08      	ldr	r7, [sp, #32]
 800d1ea:	e66c      	b.n	800cec6 <_svfprintf_r+0x69e>
 800d1ec:	232d      	movs	r3, #45	@ 0x2d
 800d1ee:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d1f2:	e66c      	b.n	800cece <_svfprintf_r+0x6a6>
 800d1f4:	06af      	lsls	r7, r5, #26
 800d1f6:	d50a      	bpl.n	800d20e <_svfprintf_r+0x9e6>
 800d1f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d1fa:	6833      	ldr	r3, [r6, #0]
 800d1fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1fe:	17d2      	asrs	r2, r2, #31
 800d200:	e9c3 1200 	strd	r1, r2, [r3]
 800d204:	3604      	adds	r6, #4
 800d206:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800d20a:	f7ff bb46 	b.w	800c89a <_svfprintf_r+0x72>
 800d20e:	06e8      	lsls	r0, r5, #27
 800d210:	d503      	bpl.n	800d21a <_svfprintf_r+0x9f2>
 800d212:	6833      	ldr	r3, [r6, #0]
 800d214:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	e7f4      	b.n	800d204 <_svfprintf_r+0x9dc>
 800d21a:	0669      	lsls	r1, r5, #25
 800d21c:	d503      	bpl.n	800d226 <_svfprintf_r+0x9fe>
 800d21e:	6833      	ldr	r3, [r6, #0]
 800d220:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d222:	801a      	strh	r2, [r3, #0]
 800d224:	e7ee      	b.n	800d204 <_svfprintf_r+0x9dc>
 800d226:	05aa      	lsls	r2, r5, #22
 800d228:	d5f3      	bpl.n	800d212 <_svfprintf_r+0x9ea>
 800d22a:	6833      	ldr	r3, [r6, #0]
 800d22c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d22e:	701a      	strb	r2, [r3, #0]
 800d230:	e7e8      	b.n	800d204 <_svfprintf_r+0x9dc>
 800d232:	f045 0510 	orr.w	r5, r5, #16
 800d236:	f015 0320 	ands.w	r3, r5, #32
 800d23a:	d020      	beq.n	800d27e <_svfprintf_r+0xa56>
 800d23c:	3607      	adds	r6, #7
 800d23e:	f026 0307 	bic.w	r3, r6, #7
 800d242:	461a      	mov	r2, r3
 800d244:	685f      	ldr	r7, [r3, #4]
 800d246:	f852 6b08 	ldr.w	r6, [r2], #8
 800d24a:	9207      	str	r2, [sp, #28]
 800d24c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800d250:	2300      	movs	r3, #0
 800d252:	2200      	movs	r2, #0
 800d254:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800d258:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d25c:	f000 848c 	beq.w	800db78 <_svfprintf_r+0x1350>
 800d260:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800d264:	9208      	str	r2, [sp, #32]
 800d266:	ea56 0207 	orrs.w	r2, r6, r7
 800d26a:	f040 848a 	bne.w	800db82 <_svfprintf_r+0x135a>
 800d26e:	f1b8 0f00 	cmp.w	r8, #0
 800d272:	f000 80db 	beq.w	800d42c <_svfprintf_r+0xc04>
 800d276:	2b01      	cmp	r3, #1
 800d278:	f040 8486 	bne.w	800db88 <_svfprintf_r+0x1360>
 800d27c:	e083      	b.n	800d386 <_svfprintf_r+0xb5e>
 800d27e:	4632      	mov	r2, r6
 800d280:	f015 0710 	ands.w	r7, r5, #16
 800d284:	f852 6b04 	ldr.w	r6, [r2], #4
 800d288:	9207      	str	r2, [sp, #28]
 800d28a:	d001      	beq.n	800d290 <_svfprintf_r+0xa68>
 800d28c:	461f      	mov	r7, r3
 800d28e:	e7dd      	b.n	800d24c <_svfprintf_r+0xa24>
 800d290:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800d294:	d001      	beq.n	800d29a <_svfprintf_r+0xa72>
 800d296:	b2b6      	uxth	r6, r6
 800d298:	e7d8      	b.n	800d24c <_svfprintf_r+0xa24>
 800d29a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800d29e:	d0d5      	beq.n	800d24c <_svfprintf_r+0xa24>
 800d2a0:	b2f6      	uxtb	r6, r6
 800d2a2:	e7f3      	b.n	800d28c <_svfprintf_r+0xa64>
 800d2a4:	4633      	mov	r3, r6
 800d2a6:	2278      	movs	r2, #120	@ 0x78
 800d2a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2ac:	9307      	str	r3, [sp, #28]
 800d2ae:	f647 0330 	movw	r3, #30768	@ 0x7830
 800d2b2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800d2b6:	4b94      	ldr	r3, [pc, #592]	@ (800d508 <_svfprintf_r+0xce0>)
 800d2b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2ba:	2700      	movs	r7, #0
 800d2bc:	f045 0502 	orr.w	r5, r5, #2
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	9206      	str	r2, [sp, #24]
 800d2c4:	e7c5      	b.n	800d252 <_svfprintf_r+0xa2a>
 800d2c6:	4633      	mov	r3, r6
 800d2c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d2cc:	f853 9b04 	ldr.w	r9, [r3], #4
 800d2d0:	9307      	str	r3, [sp, #28]
 800d2d2:	f04f 0600 	mov.w	r6, #0
 800d2d6:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800d2da:	d00f      	beq.n	800d2fc <_svfprintf_r+0xad4>
 800d2dc:	4642      	mov	r2, r8
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4648      	mov	r0, r9
 800d2e2:	f7f2 ffa5 	bl	8000230 <memchr>
 800d2e6:	4682      	mov	sl, r0
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f43f ac81 	beq.w	800cbf0 <_svfprintf_r+0x3c8>
 800d2ee:	eba0 0809 	sub.w	r8, r0, r9
 800d2f2:	46b2      	mov	sl, r6
 800d2f4:	9610      	str	r6, [sp, #64]	@ 0x40
 800d2f6:	4637      	mov	r7, r6
 800d2f8:	9608      	str	r6, [sp, #32]
 800d2fa:	e5eb      	b.n	800ced4 <_svfprintf_r+0x6ac>
 800d2fc:	4648      	mov	r0, r9
 800d2fe:	f7f2 ff8f 	bl	8000220 <strlen>
 800d302:	46b2      	mov	sl, r6
 800d304:	4680      	mov	r8, r0
 800d306:	e473      	b.n	800cbf0 <_svfprintf_r+0x3c8>
 800d308:	f045 0510 	orr.w	r5, r5, #16
 800d30c:	f015 0320 	ands.w	r3, r5, #32
 800d310:	d009      	beq.n	800d326 <_svfprintf_r+0xafe>
 800d312:	3607      	adds	r6, #7
 800d314:	f026 0307 	bic.w	r3, r6, #7
 800d318:	461a      	mov	r2, r3
 800d31a:	685f      	ldr	r7, [r3, #4]
 800d31c:	f852 6b08 	ldr.w	r6, [r2], #8
 800d320:	9207      	str	r2, [sp, #28]
 800d322:	2301      	movs	r3, #1
 800d324:	e795      	b.n	800d252 <_svfprintf_r+0xa2a>
 800d326:	4632      	mov	r2, r6
 800d328:	f015 0710 	ands.w	r7, r5, #16
 800d32c:	f852 6b04 	ldr.w	r6, [r2], #4
 800d330:	9207      	str	r2, [sp, #28]
 800d332:	d001      	beq.n	800d338 <_svfprintf_r+0xb10>
 800d334:	461f      	mov	r7, r3
 800d336:	e7f4      	b.n	800d322 <_svfprintf_r+0xafa>
 800d338:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800d33c:	d001      	beq.n	800d342 <_svfprintf_r+0xb1a>
 800d33e:	b2b6      	uxth	r6, r6
 800d340:	e7ef      	b.n	800d322 <_svfprintf_r+0xafa>
 800d342:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800d346:	d0ec      	beq.n	800d322 <_svfprintf_r+0xafa>
 800d348:	b2f6      	uxtb	r6, r6
 800d34a:	e7f3      	b.n	800d334 <_svfprintf_r+0xb0c>
 800d34c:	4b6f      	ldr	r3, [pc, #444]	@ (800d50c <_svfprintf_r+0xce4>)
 800d34e:	f7ff bb39 	b.w	800c9c4 <_svfprintf_r+0x19c>
 800d352:	4632      	mov	r2, r6
 800d354:	f015 0710 	ands.w	r7, r5, #16
 800d358:	f852 6b04 	ldr.w	r6, [r2], #4
 800d35c:	9207      	str	r2, [sp, #28]
 800d35e:	d002      	beq.n	800d366 <_svfprintf_r+0xb3e>
 800d360:	461f      	mov	r7, r3
 800d362:	f7ff bb3c 	b.w	800c9de <_svfprintf_r+0x1b6>
 800d366:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800d36a:	d002      	beq.n	800d372 <_svfprintf_r+0xb4a>
 800d36c:	b2b6      	uxth	r6, r6
 800d36e:	f7ff bb36 	b.w	800c9de <_svfprintf_r+0x1b6>
 800d372:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800d376:	f43f ab32 	beq.w	800c9de <_svfprintf_r+0x1b6>
 800d37a:	b2f6      	uxtb	r6, r6
 800d37c:	e7f0      	b.n	800d360 <_svfprintf_r+0xb38>
 800d37e:	2e0a      	cmp	r6, #10
 800d380:	f177 0300 	sbcs.w	r3, r7, #0
 800d384:	d207      	bcs.n	800d396 <_svfprintf_r+0xb6e>
 800d386:	3630      	adds	r6, #48	@ 0x30
 800d388:	b2f6      	uxtb	r6, r6
 800d38a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800d38e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800d392:	f000 bc15 	b.w	800dbc0 <_svfprintf_r+0x1398>
 800d396:	2300      	movs	r3, #0
 800d398:	9304      	str	r3, [sp, #16]
 800d39a:	9b08      	ldr	r3, [sp, #32]
 800d39c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3a0:	ad52      	add	r5, sp, #328	@ 0x148
 800d3a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3a4:	220a      	movs	r2, #10
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 fc94 	bl	8000cd8 <__aeabi_uldivmod>
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	9011      	str	r0, [sp, #68]	@ 0x44
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3ba:	3230      	adds	r2, #48	@ 0x30
 800d3bc:	468a      	mov	sl, r1
 800d3be:	f105 39ff 	add.w	r9, r5, #4294967295
 800d3c2:	f805 2c01 	strb.w	r2, [r5, #-1]
 800d3c6:	b1d3      	cbz	r3, 800d3fe <_svfprintf_r+0xbd6>
 800d3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ca:	9a04      	ldr	r2, [sp, #16]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d115      	bne.n	800d3fe <_svfprintf_r+0xbd6>
 800d3d2:	2aff      	cmp	r2, #255	@ 0xff
 800d3d4:	d013      	beq.n	800d3fe <_svfprintf_r+0xbd6>
 800d3d6:	2e0a      	cmp	r6, #10
 800d3d8:	f177 0300 	sbcs.w	r3, r7, #0
 800d3dc:	d30f      	bcc.n	800d3fe <_svfprintf_r+0xbd6>
 800d3de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3e0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d3e2:	eba9 0903 	sub.w	r9, r9, r3
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	4648      	mov	r0, r9
 800d3ea:	f000 ff1f 	bl	800e22c <strncpy>
 800d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f0:	785b      	ldrb	r3, [r3, #1]
 800d3f2:	b11b      	cbz	r3, 800d3fc <_svfprintf_r+0xbd4>
 800d3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9304      	str	r3, [sp, #16]
 800d3fe:	2e0a      	cmp	r6, #10
 800d400:	f177 0700 	sbcs.w	r7, r7, #0
 800d404:	f0c0 83dc 	bcc.w	800dbc0 <_svfprintf_r+0x1398>
 800d408:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d40a:	4657      	mov	r7, sl
 800d40c:	464d      	mov	r5, r9
 800d40e:	e7c9      	b.n	800d3a4 <_svfprintf_r+0xb7c>
 800d410:	f006 030f 	and.w	r3, r6, #15
 800d414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d416:	0936      	lsrs	r6, r6, #4
 800d418:	5cd3      	ldrb	r3, [r2, r3]
 800d41a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d41e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800d422:	093f      	lsrs	r7, r7, #4
 800d424:	ea56 0307 	orrs.w	r3, r6, r7
 800d428:	d1f2      	bne.n	800d410 <_svfprintf_r+0xbe8>
 800d42a:	e3c9      	b.n	800dbc0 <_svfprintf_r+0x1398>
 800d42c:	b91b      	cbnz	r3, 800d436 <_svfprintf_r+0xc0e>
 800d42e:	07e9      	lsls	r1, r5, #31
 800d430:	d501      	bpl.n	800d436 <_svfprintf_r+0xc0e>
 800d432:	2630      	movs	r6, #48	@ 0x30
 800d434:	e7a9      	b.n	800d38a <_svfprintf_r+0xb62>
 800d436:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800d43a:	e3c1      	b.n	800dbc0 <_svfprintf_r+0x1398>
 800d43c:	9b06      	ldr	r3, [sp, #24]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f000 838f 	beq.w	800db62 <_svfprintf_r+0x133a>
 800d444:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800d448:	2300      	movs	r3, #0
 800d44a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d44e:	9607      	str	r6, [sp, #28]
 800d450:	f7ff bb63 	b.w	800cb1a <_svfprintf_r+0x2f2>
 800d454:	2010      	movs	r0, #16
 800d456:	4403      	add	r3, r0
 800d458:	2a07      	cmp	r2, #7
 800d45a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d45e:	6060      	str	r0, [r4, #4]
 800d460:	dd08      	ble.n	800d474 <_svfprintf_r+0xc4c>
 800d462:	9803      	ldr	r0, [sp, #12]
 800d464:	aa26      	add	r2, sp, #152	@ 0x98
 800d466:	4659      	mov	r1, fp
 800d468:	f002 fae9 	bl	800fa3e <__ssprint_r>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	f040 8356 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d472:	a929      	add	r1, sp, #164	@ 0xa4
 800d474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d476:	3b10      	subs	r3, #16
 800d478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d47a:	460c      	mov	r4, r1
 800d47c:	e546      	b.n	800cf0c <_svfprintf_r+0x6e4>
 800d47e:	460c      	mov	r4, r1
 800d480:	e561      	b.n	800cf46 <_svfprintf_r+0x71e>
 800d482:	9803      	ldr	r0, [sp, #12]
 800d484:	aa26      	add	r2, sp, #152	@ 0x98
 800d486:	4659      	mov	r1, fp
 800d488:	f002 fad9 	bl	800fa3e <__ssprint_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	f040 8346 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d492:	ac29      	add	r4, sp, #164	@ 0xa4
 800d494:	e569      	b.n	800cf6a <_svfprintf_r+0x742>
 800d496:	9803      	ldr	r0, [sp, #12]
 800d498:	aa26      	add	r2, sp, #152	@ 0x98
 800d49a:	4659      	mov	r1, fp
 800d49c:	f002 facf 	bl	800fa3e <__ssprint_r>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	f040 833c 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d4a6:	ac29      	add	r4, sp, #164	@ 0xa4
 800d4a8:	e56f      	b.n	800cf8a <_svfprintf_r+0x762>
 800d4aa:	2010      	movs	r0, #16
 800d4ac:	4403      	add	r3, r0
 800d4ae:	2a07      	cmp	r2, #7
 800d4b0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d4b4:	6060      	str	r0, [r4, #4]
 800d4b6:	dd08      	ble.n	800d4ca <_svfprintf_r+0xca2>
 800d4b8:	9803      	ldr	r0, [sp, #12]
 800d4ba:	aa26      	add	r2, sp, #152	@ 0x98
 800d4bc:	4659      	mov	r1, fp
 800d4be:	f002 fabe 	bl	800fa3e <__ssprint_r>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	f040 832b 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d4c8:	a929      	add	r1, sp, #164	@ 0xa4
 800d4ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4cc:	3b10      	subs	r3, #16
 800d4ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	e563      	b.n	800cf9c <_svfprintf_r+0x774>
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	e57e      	b.n	800cfd6 <_svfprintf_r+0x7ae>
 800d4d8:	2010      	movs	r0, #16
 800d4da:	4403      	add	r3, r0
 800d4dc:	2a07      	cmp	r2, #7
 800d4de:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d4e2:	6060      	str	r0, [r4, #4]
 800d4e4:	dd08      	ble.n	800d4f8 <_svfprintf_r+0xcd0>
 800d4e6:	9803      	ldr	r0, [sp, #12]
 800d4e8:	aa26      	add	r2, sp, #152	@ 0x98
 800d4ea:	4659      	mov	r1, fp
 800d4ec:	f002 faa7 	bl	800fa3e <__ssprint_r>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	f040 8314 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d4f6:	a929      	add	r1, sp, #164	@ 0xa4
 800d4f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4fa:	3b10      	subs	r3, #16
 800d4fc:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4fe:	460c      	mov	r4, r1
 800d500:	e56f      	b.n	800cfe2 <_svfprintf_r+0x7ba>
 800d502:	460c      	mov	r4, r1
 800d504:	e58a      	b.n	800d01c <_svfprintf_r+0x7f4>
 800d506:	bf00      	nop
 800d508:	08011930 	.word	0x08011930
 800d50c:	08011941 	.word	0x08011941
 800d510:	9b06      	ldr	r3, [sp, #24]
 800d512:	2b65      	cmp	r3, #101	@ 0x65
 800d514:	f340 8246 	ble.w	800d9a4 <_svfprintf_r+0x117c>
 800d518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d51c:	2200      	movs	r2, #0
 800d51e:	2300      	movs	r3, #0
 800d520:	f7f3 fafa 	bl	8000b18 <__aeabi_dcmpeq>
 800d524:	2800      	cmp	r0, #0
 800d526:	d06a      	beq.n	800d5fe <_svfprintf_r+0xdd6>
 800d528:	4b73      	ldr	r3, [pc, #460]	@ (800d6f8 <_svfprintf_r+0xed0>)
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	2301      	movs	r3, #1
 800d52e:	6063      	str	r3, [r4, #4]
 800d530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d532:	3301      	adds	r3, #1
 800d534:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d536:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d538:	3301      	adds	r3, #1
 800d53a:	2b07      	cmp	r3, #7
 800d53c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d53e:	dc37      	bgt.n	800d5b0 <_svfprintf_r+0xd88>
 800d540:	3408      	adds	r4, #8
 800d542:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d544:	9a04      	ldr	r2, [sp, #16]
 800d546:	4293      	cmp	r3, r2
 800d548:	db02      	blt.n	800d550 <_svfprintf_r+0xd28>
 800d54a:	07ef      	lsls	r7, r5, #31
 800d54c:	f57f ad76 	bpl.w	800d03c <_svfprintf_r+0x814>
 800d550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d552:	6023      	str	r3, [r4, #0]
 800d554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d556:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d558:	6063      	str	r3, [r4, #4]
 800d55a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d55c:	4413      	add	r3, r2
 800d55e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d560:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d562:	3301      	adds	r3, #1
 800d564:	2b07      	cmp	r3, #7
 800d566:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d568:	dc2c      	bgt.n	800d5c4 <_svfprintf_r+0xd9c>
 800d56a:	3408      	adds	r4, #8
 800d56c:	9b04      	ldr	r3, [sp, #16]
 800d56e:	1e5e      	subs	r6, r3, #1
 800d570:	2e00      	cmp	r6, #0
 800d572:	f77f ad63 	ble.w	800d03c <_svfprintf_r+0x814>
 800d576:	4f61      	ldr	r7, [pc, #388]	@ (800d6fc <_svfprintf_r+0xed4>)
 800d578:	f04f 0810 	mov.w	r8, #16
 800d57c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d580:	2e10      	cmp	r6, #16
 800d582:	f103 0301 	add.w	r3, r3, #1
 800d586:	f104 0108 	add.w	r1, r4, #8
 800d58a:	6027      	str	r7, [r4, #0]
 800d58c:	dc24      	bgt.n	800d5d8 <_svfprintf_r+0xdb0>
 800d58e:	6066      	str	r6, [r4, #4]
 800d590:	2b07      	cmp	r3, #7
 800d592:	4416      	add	r6, r2
 800d594:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800d598:	f340 82a0 	ble.w	800dadc <_svfprintf_r+0x12b4>
 800d59c:	9803      	ldr	r0, [sp, #12]
 800d59e:	aa26      	add	r2, sp, #152	@ 0x98
 800d5a0:	4659      	mov	r1, fp
 800d5a2:	f002 fa4c 	bl	800fa3e <__ssprint_r>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	f040 82b9 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d5ac:	ac29      	add	r4, sp, #164	@ 0xa4
 800d5ae:	e545      	b.n	800d03c <_svfprintf_r+0x814>
 800d5b0:	9803      	ldr	r0, [sp, #12]
 800d5b2:	aa26      	add	r2, sp, #152	@ 0x98
 800d5b4:	4659      	mov	r1, fp
 800d5b6:	f002 fa42 	bl	800fa3e <__ssprint_r>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f040 82af 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d5c0:	ac29      	add	r4, sp, #164	@ 0xa4
 800d5c2:	e7be      	b.n	800d542 <_svfprintf_r+0xd1a>
 800d5c4:	9803      	ldr	r0, [sp, #12]
 800d5c6:	aa26      	add	r2, sp, #152	@ 0x98
 800d5c8:	4659      	mov	r1, fp
 800d5ca:	f002 fa38 	bl	800fa3e <__ssprint_r>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	f040 82a5 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d5d4:	ac29      	add	r4, sp, #164	@ 0xa4
 800d5d6:	e7c9      	b.n	800d56c <_svfprintf_r+0xd44>
 800d5d8:	3210      	adds	r2, #16
 800d5da:	2b07      	cmp	r3, #7
 800d5dc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d5e0:	f8c4 8004 	str.w	r8, [r4, #4]
 800d5e4:	dd08      	ble.n	800d5f8 <_svfprintf_r+0xdd0>
 800d5e6:	9803      	ldr	r0, [sp, #12]
 800d5e8:	aa26      	add	r2, sp, #152	@ 0x98
 800d5ea:	4659      	mov	r1, fp
 800d5ec:	f002 fa27 	bl	800fa3e <__ssprint_r>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	f040 8294 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d5f6:	a929      	add	r1, sp, #164	@ 0xa4
 800d5f8:	3e10      	subs	r6, #16
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	e7be      	b.n	800d57c <_svfprintf_r+0xd54>
 800d5fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d600:	2b00      	cmp	r3, #0
 800d602:	dc7d      	bgt.n	800d700 <_svfprintf_r+0xed8>
 800d604:	4b3c      	ldr	r3, [pc, #240]	@ (800d6f8 <_svfprintf_r+0xed0>)
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	2301      	movs	r3, #1
 800d60a:	6063      	str	r3, [r4, #4]
 800d60c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d60e:	3301      	adds	r3, #1
 800d610:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d612:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d614:	3301      	adds	r3, #1
 800d616:	2b07      	cmp	r3, #7
 800d618:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d61a:	dc46      	bgt.n	800d6aa <_svfprintf_r+0xe82>
 800d61c:	3408      	adds	r4, #8
 800d61e:	9904      	ldr	r1, [sp, #16]
 800d620:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d622:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800d624:	430b      	orrs	r3, r1
 800d626:	f005 0101 	and.w	r1, r5, #1
 800d62a:	430b      	orrs	r3, r1
 800d62c:	f43f ad06 	beq.w	800d03c <_svfprintf_r+0x814>
 800d630:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d636:	6063      	str	r3, [r4, #4]
 800d638:	441a      	add	r2, r3
 800d63a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d63c:	9228      	str	r2, [sp, #160]	@ 0xa0
 800d63e:	3301      	adds	r3, #1
 800d640:	2b07      	cmp	r3, #7
 800d642:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d644:	dc3b      	bgt.n	800d6be <_svfprintf_r+0xe96>
 800d646:	f104 0308 	add.w	r3, r4, #8
 800d64a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d64c:	2e00      	cmp	r6, #0
 800d64e:	da1b      	bge.n	800d688 <_svfprintf_r+0xe60>
 800d650:	4f2a      	ldr	r7, [pc, #168]	@ (800d6fc <_svfprintf_r+0xed4>)
 800d652:	4276      	negs	r6, r6
 800d654:	461a      	mov	r2, r3
 800d656:	2410      	movs	r4, #16
 800d658:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800d65c:	2e10      	cmp	r6, #16
 800d65e:	f101 0101 	add.w	r1, r1, #1
 800d662:	f103 0308 	add.w	r3, r3, #8
 800d666:	6017      	str	r7, [r2, #0]
 800d668:	dc33      	bgt.n	800d6d2 <_svfprintf_r+0xeaa>
 800d66a:	6056      	str	r6, [r2, #4]
 800d66c:	2907      	cmp	r1, #7
 800d66e:	4406      	add	r6, r0
 800d670:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800d674:	dd08      	ble.n	800d688 <_svfprintf_r+0xe60>
 800d676:	9803      	ldr	r0, [sp, #12]
 800d678:	aa26      	add	r2, sp, #152	@ 0x98
 800d67a:	4659      	mov	r1, fp
 800d67c:	f002 f9df 	bl	800fa3e <__ssprint_r>
 800d680:	2800      	cmp	r0, #0
 800d682:	f040 824c 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d686:	ab29      	add	r3, sp, #164	@ 0xa4
 800d688:	9a04      	ldr	r2, [sp, #16]
 800d68a:	9904      	ldr	r1, [sp, #16]
 800d68c:	605a      	str	r2, [r3, #4]
 800d68e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800d690:	f8c3 9000 	str.w	r9, [r3]
 800d694:	440a      	add	r2, r1
 800d696:	9228      	str	r2, [sp, #160]	@ 0xa0
 800d698:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800d69a:	3201      	adds	r2, #1
 800d69c:	2a07      	cmp	r2, #7
 800d69e:	9227      	str	r2, [sp, #156]	@ 0x9c
 800d6a0:	f73f af7c 	bgt.w	800d59c <_svfprintf_r+0xd74>
 800d6a4:	f103 0408 	add.w	r4, r3, #8
 800d6a8:	e4c8      	b.n	800d03c <_svfprintf_r+0x814>
 800d6aa:	9803      	ldr	r0, [sp, #12]
 800d6ac:	aa26      	add	r2, sp, #152	@ 0x98
 800d6ae:	4659      	mov	r1, fp
 800d6b0:	f002 f9c5 	bl	800fa3e <__ssprint_r>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	f040 8232 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d6ba:	ac29      	add	r4, sp, #164	@ 0xa4
 800d6bc:	e7af      	b.n	800d61e <_svfprintf_r+0xdf6>
 800d6be:	9803      	ldr	r0, [sp, #12]
 800d6c0:	aa26      	add	r2, sp, #152	@ 0x98
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	f002 f9bb 	bl	800fa3e <__ssprint_r>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	f040 8228 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d6ce:	ab29      	add	r3, sp, #164	@ 0xa4
 800d6d0:	e7bb      	b.n	800d64a <_svfprintf_r+0xe22>
 800d6d2:	3010      	adds	r0, #16
 800d6d4:	2907      	cmp	r1, #7
 800d6d6:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800d6da:	6054      	str	r4, [r2, #4]
 800d6dc:	dd08      	ble.n	800d6f0 <_svfprintf_r+0xec8>
 800d6de:	9803      	ldr	r0, [sp, #12]
 800d6e0:	aa26      	add	r2, sp, #152	@ 0x98
 800d6e2:	4659      	mov	r1, fp
 800d6e4:	f002 f9ab 	bl	800fa3e <__ssprint_r>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	f040 8218 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d6ee:	ab29      	add	r3, sp, #164	@ 0xa4
 800d6f0:	3e10      	subs	r6, #16
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	e7b0      	b.n	800d658 <_svfprintf_r+0xe30>
 800d6f6:	bf00      	nop
 800d6f8:	08011952 	.word	0x08011952
 800d6fc:	08011954 	.word	0x08011954
 800d700:	9b04      	ldr	r3, [sp, #16]
 800d702:	444b      	add	r3, r9
 800d704:	9306      	str	r3, [sp, #24]
 800d706:	9b04      	ldr	r3, [sp, #16]
 800d708:	42b3      	cmp	r3, r6
 800d70a:	bfa8      	it	ge
 800d70c:	4633      	movge	r3, r6
 800d70e:	2b00      	cmp	r3, #0
 800d710:	4698      	mov	r8, r3
 800d712:	dd0b      	ble.n	800d72c <_svfprintf_r+0xf04>
 800d714:	e9c4 9300 	strd	r9, r3, [r4]
 800d718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d71a:	4443      	add	r3, r8
 800d71c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d71e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d720:	3301      	adds	r3, #1
 800d722:	2b07      	cmp	r3, #7
 800d724:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d726:	f300 8089 	bgt.w	800d83c <_svfprintf_r+0x1014>
 800d72a:	3408      	adds	r4, #8
 800d72c:	4643      	mov	r3, r8
 800d72e:	2b00      	cmp	r3, #0
 800d730:	bfac      	ite	ge
 800d732:	eba6 0808 	subge.w	r8, r6, r8
 800d736:	46b0      	movlt	r8, r6
 800d738:	f1b8 0f00 	cmp.w	r8, #0
 800d73c:	dd1b      	ble.n	800d776 <_svfprintf_r+0xf4e>
 800d73e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800d742:	4897      	ldr	r0, [pc, #604]	@ (800d9a0 <_svfprintf_r+0x1178>)
 800d744:	6020      	str	r0, [r4, #0]
 800d746:	f1b8 0f10 	cmp.w	r8, #16
 800d74a:	f102 0201 	add.w	r2, r2, #1
 800d74e:	f104 0108 	add.w	r1, r4, #8
 800d752:	dc7d      	bgt.n	800d850 <_svfprintf_r+0x1028>
 800d754:	4443      	add	r3, r8
 800d756:	2a07      	cmp	r2, #7
 800d758:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d75c:	f8c4 8004 	str.w	r8, [r4, #4]
 800d760:	f340 808a 	ble.w	800d878 <_svfprintf_r+0x1050>
 800d764:	9803      	ldr	r0, [sp, #12]
 800d766:	aa26      	add	r2, sp, #152	@ 0x98
 800d768:	4659      	mov	r1, fp
 800d76a:	f002 f968 	bl	800fa3e <__ssprint_r>
 800d76e:	2800      	cmp	r0, #0
 800d770:	f040 81d5 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d774:	ac29      	add	r4, sp, #164	@ 0xa4
 800d776:	eb09 0806 	add.w	r8, r9, r6
 800d77a:	056e      	lsls	r6, r5, #21
 800d77c:	d508      	bpl.n	800d790 <_svfprintf_r+0xf68>
 800d77e:	9b08      	ldr	r3, [sp, #32]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d17b      	bne.n	800d87c <_svfprintf_r+0x1054>
 800d784:	2f00      	cmp	r7, #0
 800d786:	d17b      	bne.n	800d880 <_svfprintf_r+0x1058>
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	4598      	cmp	r8, r3
 800d78c:	bf28      	it	cs
 800d78e:	4698      	movcs	r8, r3
 800d790:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d792:	9a04      	ldr	r2, [sp, #16]
 800d794:	4293      	cmp	r3, r2
 800d796:	db01      	blt.n	800d79c <_svfprintf_r+0xf74>
 800d798:	07e8      	lsls	r0, r5, #31
 800d79a:	d50e      	bpl.n	800d7ba <_svfprintf_r+0xf92>
 800d79c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d7a4:	6063      	str	r3, [r4, #4]
 800d7a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d7a8:	4413      	add	r3, r2
 800d7aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d7ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	2b07      	cmp	r3, #7
 800d7b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d7b4:	f300 80df 	bgt.w	800d976 <_svfprintf_r+0x114e>
 800d7b8:	3408      	adds	r4, #8
 800d7ba:	9b04      	ldr	r3, [sp, #16]
 800d7bc:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800d7be:	1bdf      	subs	r7, r3, r7
 800d7c0:	9b06      	ldr	r3, [sp, #24]
 800d7c2:	eba3 0308 	sub.w	r3, r3, r8
 800d7c6:	429f      	cmp	r7, r3
 800d7c8:	bfa8      	it	ge
 800d7ca:	461f      	movge	r7, r3
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d7d0:	dd0a      	ble.n	800d7e8 <_svfprintf_r+0xfc0>
 800d7d2:	443b      	add	r3, r7
 800d7d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d7d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d7d8:	3301      	adds	r3, #1
 800d7da:	2b07      	cmp	r3, #7
 800d7dc:	e9c4 8700 	strd	r8, r7, [r4]
 800d7e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d7e2:	f300 80d2 	bgt.w	800d98a <_svfprintf_r+0x1162>
 800d7e6:	3408      	adds	r4, #8
 800d7e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d7ea:	9b04      	ldr	r3, [sp, #16]
 800d7ec:	2f00      	cmp	r7, #0
 800d7ee:	eba3 0606 	sub.w	r6, r3, r6
 800d7f2:	bfa8      	it	ge
 800d7f4:	1bf6      	subge	r6, r6, r7
 800d7f6:	2e00      	cmp	r6, #0
 800d7f8:	f77f ac20 	ble.w	800d03c <_svfprintf_r+0x814>
 800d7fc:	4f68      	ldr	r7, [pc, #416]	@ (800d9a0 <_svfprintf_r+0x1178>)
 800d7fe:	f04f 0810 	mov.w	r8, #16
 800d802:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d806:	2e10      	cmp	r6, #16
 800d808:	f103 0301 	add.w	r3, r3, #1
 800d80c:	f104 0108 	add.w	r1, r4, #8
 800d810:	6027      	str	r7, [r4, #0]
 800d812:	f77f aebc 	ble.w	800d58e <_svfprintf_r+0xd66>
 800d816:	3210      	adds	r2, #16
 800d818:	2b07      	cmp	r3, #7
 800d81a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d81e:	f8c4 8004 	str.w	r8, [r4, #4]
 800d822:	dd08      	ble.n	800d836 <_svfprintf_r+0x100e>
 800d824:	9803      	ldr	r0, [sp, #12]
 800d826:	aa26      	add	r2, sp, #152	@ 0x98
 800d828:	4659      	mov	r1, fp
 800d82a:	f002 f908 	bl	800fa3e <__ssprint_r>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f040 8175 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d834:	a929      	add	r1, sp, #164	@ 0xa4
 800d836:	3e10      	subs	r6, #16
 800d838:	460c      	mov	r4, r1
 800d83a:	e7e2      	b.n	800d802 <_svfprintf_r+0xfda>
 800d83c:	9803      	ldr	r0, [sp, #12]
 800d83e:	aa26      	add	r2, sp, #152	@ 0x98
 800d840:	4659      	mov	r1, fp
 800d842:	f002 f8fc 	bl	800fa3e <__ssprint_r>
 800d846:	2800      	cmp	r0, #0
 800d848:	f040 8169 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d84c:	ac29      	add	r4, sp, #164	@ 0xa4
 800d84e:	e76d      	b.n	800d72c <_svfprintf_r+0xf04>
 800d850:	2010      	movs	r0, #16
 800d852:	4403      	add	r3, r0
 800d854:	2a07      	cmp	r2, #7
 800d856:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d85a:	6060      	str	r0, [r4, #4]
 800d85c:	dd08      	ble.n	800d870 <_svfprintf_r+0x1048>
 800d85e:	9803      	ldr	r0, [sp, #12]
 800d860:	aa26      	add	r2, sp, #152	@ 0x98
 800d862:	4659      	mov	r1, fp
 800d864:	f002 f8eb 	bl	800fa3e <__ssprint_r>
 800d868:	2800      	cmp	r0, #0
 800d86a:	f040 8158 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d86e:	a929      	add	r1, sp, #164	@ 0xa4
 800d870:	f1a8 0810 	sub.w	r8, r8, #16
 800d874:	460c      	mov	r4, r1
 800d876:	e762      	b.n	800d73e <_svfprintf_r+0xf16>
 800d878:	460c      	mov	r4, r1
 800d87a:	e77c      	b.n	800d776 <_svfprintf_r+0xf4e>
 800d87c:	2f00      	cmp	r7, #0
 800d87e:	d04a      	beq.n	800d916 <_svfprintf_r+0x10ee>
 800d880:	3f01      	subs	r7, #1
 800d882:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d888:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d88a:	6063      	str	r3, [r4, #4]
 800d88c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d88e:	4413      	add	r3, r2
 800d890:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d892:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d894:	3301      	adds	r3, #1
 800d896:	2b07      	cmp	r3, #7
 800d898:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d89a:	dc43      	bgt.n	800d924 <_svfprintf_r+0x10fc>
 800d89c:	3408      	adds	r4, #8
 800d89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	9b06      	ldr	r3, [sp, #24]
 800d8a4:	eba3 0308 	sub.w	r3, r3, r8
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	bfa8      	it	ge
 800d8ac:	461a      	movge	r2, r3
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d8b2:	4691      	mov	r9, r2
 800d8b4:	dd09      	ble.n	800d8ca <_svfprintf_r+0x10a2>
 800d8b6:	4413      	add	r3, r2
 800d8b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d8ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d8bc:	3301      	adds	r3, #1
 800d8be:	2b07      	cmp	r3, #7
 800d8c0:	e9c4 8200 	strd	r8, r2, [r4]
 800d8c4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d8c6:	dc37      	bgt.n	800d938 <_svfprintf_r+0x1110>
 800d8c8:	3408      	adds	r4, #8
 800d8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8cc:	781e      	ldrb	r6, [r3, #0]
 800d8ce:	f1b9 0f00 	cmp.w	r9, #0
 800d8d2:	bfa8      	it	ge
 800d8d4:	eba6 0609 	subge.w	r6, r6, r9
 800d8d8:	2e00      	cmp	r6, #0
 800d8da:	dd18      	ble.n	800d90e <_svfprintf_r+0x10e6>
 800d8dc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d8e0:	482f      	ldr	r0, [pc, #188]	@ (800d9a0 <_svfprintf_r+0x1178>)
 800d8e2:	6020      	str	r0, [r4, #0]
 800d8e4:	2e10      	cmp	r6, #16
 800d8e6:	f103 0301 	add.w	r3, r3, #1
 800d8ea:	f104 0108 	add.w	r1, r4, #8
 800d8ee:	dc2d      	bgt.n	800d94c <_svfprintf_r+0x1124>
 800d8f0:	6066      	str	r6, [r4, #4]
 800d8f2:	2b07      	cmp	r3, #7
 800d8f4:	4416      	add	r6, r2
 800d8f6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800d8fa:	dd3a      	ble.n	800d972 <_svfprintf_r+0x114a>
 800d8fc:	9803      	ldr	r0, [sp, #12]
 800d8fe:	aa26      	add	r2, sp, #152	@ 0x98
 800d900:	4659      	mov	r1, fp
 800d902:	f002 f89c 	bl	800fa3e <__ssprint_r>
 800d906:	2800      	cmp	r0, #0
 800d908:	f040 8109 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d90c:	ac29      	add	r4, sp, #164	@ 0xa4
 800d90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	4498      	add	r8, r3
 800d914:	e733      	b.n	800d77e <_svfprintf_r+0xf56>
 800d916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d918:	3b01      	subs	r3, #1
 800d91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d91c:	9b08      	ldr	r3, [sp, #32]
 800d91e:	3b01      	subs	r3, #1
 800d920:	9308      	str	r3, [sp, #32]
 800d922:	e7ae      	b.n	800d882 <_svfprintf_r+0x105a>
 800d924:	9803      	ldr	r0, [sp, #12]
 800d926:	aa26      	add	r2, sp, #152	@ 0x98
 800d928:	4659      	mov	r1, fp
 800d92a:	f002 f888 	bl	800fa3e <__ssprint_r>
 800d92e:	2800      	cmp	r0, #0
 800d930:	f040 80f5 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d934:	ac29      	add	r4, sp, #164	@ 0xa4
 800d936:	e7b2      	b.n	800d89e <_svfprintf_r+0x1076>
 800d938:	9803      	ldr	r0, [sp, #12]
 800d93a:	aa26      	add	r2, sp, #152	@ 0x98
 800d93c:	4659      	mov	r1, fp
 800d93e:	f002 f87e 	bl	800fa3e <__ssprint_r>
 800d942:	2800      	cmp	r0, #0
 800d944:	f040 80eb 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d948:	ac29      	add	r4, sp, #164	@ 0xa4
 800d94a:	e7be      	b.n	800d8ca <_svfprintf_r+0x10a2>
 800d94c:	2010      	movs	r0, #16
 800d94e:	4402      	add	r2, r0
 800d950:	2b07      	cmp	r3, #7
 800d952:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d956:	6060      	str	r0, [r4, #4]
 800d958:	dd08      	ble.n	800d96c <_svfprintf_r+0x1144>
 800d95a:	9803      	ldr	r0, [sp, #12]
 800d95c:	aa26      	add	r2, sp, #152	@ 0x98
 800d95e:	4659      	mov	r1, fp
 800d960:	f002 f86d 	bl	800fa3e <__ssprint_r>
 800d964:	2800      	cmp	r0, #0
 800d966:	f040 80da 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d96a:	a929      	add	r1, sp, #164	@ 0xa4
 800d96c:	3e10      	subs	r6, #16
 800d96e:	460c      	mov	r4, r1
 800d970:	e7b4      	b.n	800d8dc <_svfprintf_r+0x10b4>
 800d972:	460c      	mov	r4, r1
 800d974:	e7cb      	b.n	800d90e <_svfprintf_r+0x10e6>
 800d976:	9803      	ldr	r0, [sp, #12]
 800d978:	aa26      	add	r2, sp, #152	@ 0x98
 800d97a:	4659      	mov	r1, fp
 800d97c:	f002 f85f 	bl	800fa3e <__ssprint_r>
 800d980:	2800      	cmp	r0, #0
 800d982:	f040 80cc 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d986:	ac29      	add	r4, sp, #164	@ 0xa4
 800d988:	e717      	b.n	800d7ba <_svfprintf_r+0xf92>
 800d98a:	9803      	ldr	r0, [sp, #12]
 800d98c:	aa26      	add	r2, sp, #152	@ 0x98
 800d98e:	4659      	mov	r1, fp
 800d990:	f002 f855 	bl	800fa3e <__ssprint_r>
 800d994:	2800      	cmp	r0, #0
 800d996:	f040 80c2 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d99a:	ac29      	add	r4, sp, #164	@ 0xa4
 800d99c:	e724      	b.n	800d7e8 <_svfprintf_r+0xfc0>
 800d99e:	bf00      	nop
 800d9a0:	08011954 	.word	0x08011954
 800d9a4:	9904      	ldr	r1, [sp, #16]
 800d9a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9a8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800d9aa:	2901      	cmp	r1, #1
 800d9ac:	f103 0301 	add.w	r3, r3, #1
 800d9b0:	f102 0201 	add.w	r2, r2, #1
 800d9b4:	f104 0608 	add.w	r6, r4, #8
 800d9b8:	dc02      	bgt.n	800d9c0 <_svfprintf_r+0x1198>
 800d9ba:	07e9      	lsls	r1, r5, #31
 800d9bc:	f140 8083 	bpl.w	800dac6 <_svfprintf_r+0x129e>
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	2a07      	cmp	r2, #7
 800d9c4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d9c8:	f8c4 9000 	str.w	r9, [r4]
 800d9cc:	6061      	str	r1, [r4, #4]
 800d9ce:	dd08      	ble.n	800d9e2 <_svfprintf_r+0x11ba>
 800d9d0:	9803      	ldr	r0, [sp, #12]
 800d9d2:	aa26      	add	r2, sp, #152	@ 0x98
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	f002 f832 	bl	800fa3e <__ssprint_r>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	f040 809f 	bne.w	800db1e <_svfprintf_r+0x12f6>
 800d9e0:	ae29      	add	r6, sp, #164	@ 0xa4
 800d9e2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9ea:	6073      	str	r3, [r6, #4]
 800d9ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d9ee:	4413      	add	r3, r2
 800d9f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d9f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	2b07      	cmp	r3, #7
 800d9f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d9fa:	dc33      	bgt.n	800da64 <_svfprintf_r+0x123c>
 800d9fc:	3608      	adds	r6, #8
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da04:	1e5c      	subs	r4, r3, #1
 800da06:	2200      	movs	r2, #0
 800da08:	2300      	movs	r3, #0
 800da0a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800da0e:	f7f3 f883 	bl	8000b18 <__aeabi_dcmpeq>
 800da12:	2800      	cmp	r0, #0
 800da14:	d12f      	bne.n	800da76 <_svfprintf_r+0x124e>
 800da16:	f109 0201 	add.w	r2, r9, #1
 800da1a:	e9c6 2400 	strd	r2, r4, [r6]
 800da1e:	9a04      	ldr	r2, [sp, #16]
 800da20:	f108 0301 	add.w	r3, r8, #1
 800da24:	3f01      	subs	r7, #1
 800da26:	4417      	add	r7, r2
 800da28:	2b07      	cmp	r3, #7
 800da2a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800da2e:	dd53      	ble.n	800dad8 <_svfprintf_r+0x12b0>
 800da30:	9803      	ldr	r0, [sp, #12]
 800da32:	aa26      	add	r2, sp, #152	@ 0x98
 800da34:	4659      	mov	r1, fp
 800da36:	f002 f802 	bl	800fa3e <__ssprint_r>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d16f      	bne.n	800db1e <_svfprintf_r+0x12f6>
 800da3e:	ae29      	add	r6, sp, #164	@ 0xa4
 800da40:	ab22      	add	r3, sp, #136	@ 0x88
 800da42:	6033      	str	r3, [r6, #0]
 800da44:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800da46:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800da48:	6073      	str	r3, [r6, #4]
 800da4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800da4c:	4413      	add	r3, r2
 800da4e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800da50:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800da52:	3301      	adds	r3, #1
 800da54:	2b07      	cmp	r3, #7
 800da56:	9327      	str	r3, [sp, #156]	@ 0x9c
 800da58:	f73f ada0 	bgt.w	800d59c <_svfprintf_r+0xd74>
 800da5c:	f106 0408 	add.w	r4, r6, #8
 800da60:	f7ff baec 	b.w	800d03c <_svfprintf_r+0x814>
 800da64:	9803      	ldr	r0, [sp, #12]
 800da66:	aa26      	add	r2, sp, #152	@ 0x98
 800da68:	4659      	mov	r1, fp
 800da6a:	f001 ffe8 	bl	800fa3e <__ssprint_r>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d155      	bne.n	800db1e <_svfprintf_r+0x12f6>
 800da72:	ae29      	add	r6, sp, #164	@ 0xa4
 800da74:	e7c3      	b.n	800d9fe <_svfprintf_r+0x11d6>
 800da76:	9b04      	ldr	r3, [sp, #16]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	dde1      	ble.n	800da40 <_svfprintf_r+0x1218>
 800da7c:	4f57      	ldr	r7, [pc, #348]	@ (800dbdc <_svfprintf_r+0x13b4>)
 800da7e:	f04f 0810 	mov.w	r8, #16
 800da82:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800da86:	2c10      	cmp	r4, #16
 800da88:	f103 0301 	add.w	r3, r3, #1
 800da8c:	f106 0108 	add.w	r1, r6, #8
 800da90:	6037      	str	r7, [r6, #0]
 800da92:	dc07      	bgt.n	800daa4 <_svfprintf_r+0x127c>
 800da94:	6074      	str	r4, [r6, #4]
 800da96:	2b07      	cmp	r3, #7
 800da98:	4414      	add	r4, r2
 800da9a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800da9e:	dcc7      	bgt.n	800da30 <_svfprintf_r+0x1208>
 800daa0:	460e      	mov	r6, r1
 800daa2:	e7cd      	b.n	800da40 <_svfprintf_r+0x1218>
 800daa4:	3210      	adds	r2, #16
 800daa6:	2b07      	cmp	r3, #7
 800daa8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800daac:	f8c6 8004 	str.w	r8, [r6, #4]
 800dab0:	dd06      	ble.n	800dac0 <_svfprintf_r+0x1298>
 800dab2:	9803      	ldr	r0, [sp, #12]
 800dab4:	aa26      	add	r2, sp, #152	@ 0x98
 800dab6:	4659      	mov	r1, fp
 800dab8:	f001 ffc1 	bl	800fa3e <__ssprint_r>
 800dabc:	bb78      	cbnz	r0, 800db1e <_svfprintf_r+0x12f6>
 800dabe:	a929      	add	r1, sp, #164	@ 0xa4
 800dac0:	3c10      	subs	r4, #16
 800dac2:	460e      	mov	r6, r1
 800dac4:	e7dd      	b.n	800da82 <_svfprintf_r+0x125a>
 800dac6:	2101      	movs	r1, #1
 800dac8:	2a07      	cmp	r2, #7
 800daca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800dace:	f8c4 9000 	str.w	r9, [r4]
 800dad2:	6061      	str	r1, [r4, #4]
 800dad4:	ddb4      	ble.n	800da40 <_svfprintf_r+0x1218>
 800dad6:	e7ab      	b.n	800da30 <_svfprintf_r+0x1208>
 800dad8:	3608      	adds	r6, #8
 800dada:	e7b1      	b.n	800da40 <_svfprintf_r+0x1218>
 800dadc:	460c      	mov	r4, r1
 800dade:	f7ff baad 	b.w	800d03c <_svfprintf_r+0x814>
 800dae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dae4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dae6:	1a9d      	subs	r5, r3, r2
 800dae8:	2d00      	cmp	r5, #0
 800daea:	f77f aaaa 	ble.w	800d042 <_svfprintf_r+0x81a>
 800daee:	4e3c      	ldr	r6, [pc, #240]	@ (800dbe0 <_svfprintf_r+0x13b8>)
 800daf0:	2710      	movs	r7, #16
 800daf2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800daf6:	2d10      	cmp	r5, #16
 800daf8:	f103 0301 	add.w	r3, r3, #1
 800dafc:	6026      	str	r6, [r4, #0]
 800dafe:	dc18      	bgt.n	800db32 <_svfprintf_r+0x130a>
 800db00:	442a      	add	r2, r5
 800db02:	2b07      	cmp	r3, #7
 800db04:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800db08:	6065      	str	r5, [r4, #4]
 800db0a:	f77f aa9a 	ble.w	800d042 <_svfprintf_r+0x81a>
 800db0e:	9803      	ldr	r0, [sp, #12]
 800db10:	aa26      	add	r2, sp, #152	@ 0x98
 800db12:	4659      	mov	r1, fp
 800db14:	f001 ff93 	bl	800fa3e <__ssprint_r>
 800db18:	2800      	cmp	r0, #0
 800db1a:	f43f aa92 	beq.w	800d042 <_svfprintf_r+0x81a>
 800db1e:	f1ba 0f00 	cmp.w	sl, #0
 800db22:	f43f a89a 	beq.w	800cc5a <_svfprintf_r+0x432>
 800db26:	9803      	ldr	r0, [sp, #12]
 800db28:	4651      	mov	r1, sl
 800db2a:	f7fe fdbd 	bl	800c6a8 <_free_r>
 800db2e:	f7ff b894 	b.w	800cc5a <_svfprintf_r+0x432>
 800db32:	3210      	adds	r2, #16
 800db34:	2b07      	cmp	r3, #7
 800db36:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800db3a:	6067      	str	r7, [r4, #4]
 800db3c:	dc02      	bgt.n	800db44 <_svfprintf_r+0x131c>
 800db3e:	3408      	adds	r4, #8
 800db40:	3d10      	subs	r5, #16
 800db42:	e7d6      	b.n	800daf2 <_svfprintf_r+0x12ca>
 800db44:	9803      	ldr	r0, [sp, #12]
 800db46:	aa26      	add	r2, sp, #152	@ 0x98
 800db48:	4659      	mov	r1, fp
 800db4a:	f001 ff78 	bl	800fa3e <__ssprint_r>
 800db4e:	2800      	cmp	r0, #0
 800db50:	d1e5      	bne.n	800db1e <_svfprintf_r+0x12f6>
 800db52:	ac29      	add	r4, sp, #164	@ 0xa4
 800db54:	e7f4      	b.n	800db40 <_svfprintf_r+0x1318>
 800db56:	9803      	ldr	r0, [sp, #12]
 800db58:	4651      	mov	r1, sl
 800db5a:	f7fe fda5 	bl	800c6a8 <_free_r>
 800db5e:	f7ff ba88 	b.w	800d072 <_svfprintf_r+0x84a>
 800db62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800db64:	2b00      	cmp	r3, #0
 800db66:	f43f a878 	beq.w	800cc5a <_svfprintf_r+0x432>
 800db6a:	9803      	ldr	r0, [sp, #12]
 800db6c:	aa26      	add	r2, sp, #152	@ 0x98
 800db6e:	4659      	mov	r1, fp
 800db70:	f001 ff65 	bl	800fa3e <__ssprint_r>
 800db74:	f7ff b871 	b.w	800cc5a <_svfprintf_r+0x432>
 800db78:	ea56 0207 	orrs.w	r2, r6, r7
 800db7c:	9508      	str	r5, [sp, #32]
 800db7e:	f43f ab7a 	beq.w	800d276 <_svfprintf_r+0xa4e>
 800db82:	2b01      	cmp	r3, #1
 800db84:	f43f abfb 	beq.w	800d37e <_svfprintf_r+0xb56>
 800db88:	2b02      	cmp	r3, #2
 800db8a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800db8e:	f43f ac3f 	beq.w	800d410 <_svfprintf_r+0xbe8>
 800db92:	f006 0307 	and.w	r3, r6, #7
 800db96:	08f6      	lsrs	r6, r6, #3
 800db98:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800db9c:	08ff      	lsrs	r7, r7, #3
 800db9e:	3330      	adds	r3, #48	@ 0x30
 800dba0:	ea56 0107 	orrs.w	r1, r6, r7
 800dba4:	464a      	mov	r2, r9
 800dba6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800dbaa:	d1f2      	bne.n	800db92 <_svfprintf_r+0x136a>
 800dbac:	9908      	ldr	r1, [sp, #32]
 800dbae:	07c8      	lsls	r0, r1, #31
 800dbb0:	d506      	bpl.n	800dbc0 <_svfprintf_r+0x1398>
 800dbb2:	2b30      	cmp	r3, #48	@ 0x30
 800dbb4:	d004      	beq.n	800dbc0 <_svfprintf_r+0x1398>
 800dbb6:	2330      	movs	r3, #48	@ 0x30
 800dbb8:	f809 3c01 	strb.w	r3, [r9, #-1]
 800dbbc:	f1a2 0902 	sub.w	r9, r2, #2
 800dbc0:	ab52      	add	r3, sp, #328	@ 0x148
 800dbc2:	9d08      	ldr	r5, [sp, #32]
 800dbc4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800dbc8:	f04f 0a00 	mov.w	sl, #0
 800dbcc:	eba3 0809 	sub.w	r8, r3, r9
 800dbd0:	4657      	mov	r7, sl
 800dbd2:	f8cd a020 	str.w	sl, [sp, #32]
 800dbd6:	4656      	mov	r6, sl
 800dbd8:	f7ff b97c 	b.w	800ced4 <_svfprintf_r+0x6ac>
 800dbdc:	08011954 	.word	0x08011954
 800dbe0:	08011964 	.word	0x08011964

0800dbe4 <_fclose_r>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	b1b1      	cbz	r1, 800dc1a <_fclose_r+0x36>
 800dbec:	b118      	cbz	r0, 800dbf6 <_fclose_r+0x12>
 800dbee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dbf0:	b90b      	cbnz	r3, 800dbf6 <_fclose_r+0x12>
 800dbf2:	f7fe fab9 	bl	800c168 <__sinit>
 800dbf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf8:	07de      	lsls	r6, r3, #31
 800dbfa:	d405      	bmi.n	800dc08 <_fclose_r+0x24>
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	0598      	lsls	r0, r3, #22
 800dc00:	d402      	bmi.n	800dc08 <_fclose_r+0x24>
 800dc02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc04:	f7fe fcdc 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 800dc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc0c:	b943      	cbnz	r3, 800dc20 <_fclose_r+0x3c>
 800dc0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc10:	07d9      	lsls	r1, r3, #31
 800dc12:	d402      	bmi.n	800dc1a <_fclose_r+0x36>
 800dc14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc16:	f7fe fcd4 	bl	800c5c2 <__retarget_lock_release_recursive>
 800dc1a:	2600      	movs	r6, #0
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	bd70      	pop	{r4, r5, r6, pc}
 800dc20:	4621      	mov	r1, r4
 800dc22:	4628      	mov	r0, r5
 800dc24:	f000 f834 	bl	800dc90 <__sflush_r>
 800dc28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	b133      	cbz	r3, 800dc3c <_fclose_r+0x58>
 800dc2e:	69e1      	ldr	r1, [r4, #28]
 800dc30:	4628      	mov	r0, r5
 800dc32:	4798      	blx	r3
 800dc34:	2800      	cmp	r0, #0
 800dc36:	bfb8      	it	lt
 800dc38:	f04f 36ff 	movlt.w	r6, #4294967295
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	061a      	lsls	r2, r3, #24
 800dc40:	d503      	bpl.n	800dc4a <_fclose_r+0x66>
 800dc42:	6921      	ldr	r1, [r4, #16]
 800dc44:	4628      	mov	r0, r5
 800dc46:	f7fe fd2f 	bl	800c6a8 <_free_r>
 800dc4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc4c:	b141      	cbz	r1, 800dc60 <_fclose_r+0x7c>
 800dc4e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800dc52:	4299      	cmp	r1, r3
 800dc54:	d002      	beq.n	800dc5c <_fclose_r+0x78>
 800dc56:	4628      	mov	r0, r5
 800dc58:	f7fe fd26 	bl	800c6a8 <_free_r>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dc62:	b121      	cbz	r1, 800dc6e <_fclose_r+0x8a>
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7fe fd1f 	bl	800c6a8 <_free_r>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6463      	str	r3, [r4, #68]	@ 0x44
 800dc6e:	f7fe fa6f 	bl	800c150 <__sfp_lock_acquire>
 800dc72:	2300      	movs	r3, #0
 800dc74:	81a3      	strh	r3, [r4, #12]
 800dc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc78:	07db      	lsls	r3, r3, #31
 800dc7a:	d402      	bmi.n	800dc82 <_fclose_r+0x9e>
 800dc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc7e:	f7fe fca0 	bl	800c5c2 <__retarget_lock_release_recursive>
 800dc82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc84:	f7fe fc9b 	bl	800c5be <__retarget_lock_close_recursive>
 800dc88:	f7fe fa68 	bl	800c15c <__sfp_lock_release>
 800dc8c:	e7c6      	b.n	800dc1c <_fclose_r+0x38>
	...

0800dc90 <__sflush_r>:
 800dc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc94:	4605      	mov	r5, r0
 800dc96:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800dc9a:	0706      	lsls	r6, r0, #28
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	d457      	bmi.n	800dd50 <__sflush_r+0xc0>
 800dca0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800dca4:	818b      	strh	r3, [r1, #12]
 800dca6:	684b      	ldr	r3, [r1, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	dc02      	bgt.n	800dcb2 <__sflush_r+0x22>
 800dcac:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd4c      	ble.n	800dd4c <__sflush_r+0xbc>
 800dcb2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	d049      	beq.n	800dd4c <__sflush_r+0xbc>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800dcbe:	682f      	ldr	r7, [r5, #0]
 800dcc0:	69e1      	ldr	r1, [r4, #28]
 800dcc2:	602b      	str	r3, [r5, #0]
 800dcc4:	d034      	beq.n	800dd30 <__sflush_r+0xa0>
 800dcc6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	0759      	lsls	r1, r3, #29
 800dccc:	d505      	bpl.n	800dcda <__sflush_r+0x4a>
 800dcce:	6863      	ldr	r3, [r4, #4]
 800dcd0:	1ad2      	subs	r2, r2, r3
 800dcd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dcd4:	b10b      	cbz	r3, 800dcda <__sflush_r+0x4a>
 800dcd6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dcd8:	1ad2      	subs	r2, r2, r3
 800dcda:	2300      	movs	r3, #0
 800dcdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcde:	69e1      	ldr	r1, [r4, #28]
 800dce0:	4628      	mov	r0, r5
 800dce2:	47b0      	blx	r6
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d106      	bne.n	800dcf6 <__sflush_r+0x66>
 800dce8:	682a      	ldr	r2, [r5, #0]
 800dcea:	2a1d      	cmp	r2, #29
 800dcec:	d848      	bhi.n	800dd80 <__sflush_r+0xf0>
 800dcee:	4b2b      	ldr	r3, [pc, #172]	@ (800dd9c <__sflush_r+0x10c>)
 800dcf0:	4113      	asrs	r3, r2
 800dcf2:	07de      	lsls	r6, r3, #31
 800dcf4:	d444      	bmi.n	800dd80 <__sflush_r+0xf0>
 800dcf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dcfe:	81a2      	strh	r2, [r4, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	6062      	str	r2, [r4, #4]
 800dd04:	04d9      	lsls	r1, r3, #19
 800dd06:	6922      	ldr	r2, [r4, #16]
 800dd08:	6022      	str	r2, [r4, #0]
 800dd0a:	d504      	bpl.n	800dd16 <__sflush_r+0x86>
 800dd0c:	1c42      	adds	r2, r0, #1
 800dd0e:	d101      	bne.n	800dd14 <__sflush_r+0x84>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	b903      	cbnz	r3, 800dd16 <__sflush_r+0x86>
 800dd14:	6520      	str	r0, [r4, #80]	@ 0x50
 800dd16:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd18:	602f      	str	r7, [r5, #0]
 800dd1a:	b1b9      	cbz	r1, 800dd4c <__sflush_r+0xbc>
 800dd1c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800dd20:	4299      	cmp	r1, r3
 800dd22:	d002      	beq.n	800dd2a <__sflush_r+0x9a>
 800dd24:	4628      	mov	r0, r5
 800dd26:	f7fe fcbf 	bl	800c6a8 <_free_r>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd2e:	e00d      	b.n	800dd4c <__sflush_r+0xbc>
 800dd30:	2301      	movs	r3, #1
 800dd32:	4628      	mov	r0, r5
 800dd34:	47b0      	blx	r6
 800dd36:	4602      	mov	r2, r0
 800dd38:	1c50      	adds	r0, r2, #1
 800dd3a:	d1c5      	bne.n	800dcc8 <__sflush_r+0x38>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0c2      	beq.n	800dcc8 <__sflush_r+0x38>
 800dd42:	2b1d      	cmp	r3, #29
 800dd44:	d001      	beq.n	800dd4a <__sflush_r+0xba>
 800dd46:	2b16      	cmp	r3, #22
 800dd48:	d11a      	bne.n	800dd80 <__sflush_r+0xf0>
 800dd4a:	602f      	str	r7, [r5, #0]
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	e01e      	b.n	800dd8e <__sflush_r+0xfe>
 800dd50:	690f      	ldr	r7, [r1, #16]
 800dd52:	2f00      	cmp	r7, #0
 800dd54:	d0fa      	beq.n	800dd4c <__sflush_r+0xbc>
 800dd56:	0783      	lsls	r3, r0, #30
 800dd58:	680e      	ldr	r6, [r1, #0]
 800dd5a:	bf08      	it	eq
 800dd5c:	694b      	ldreq	r3, [r1, #20]
 800dd5e:	600f      	str	r7, [r1, #0]
 800dd60:	bf18      	it	ne
 800dd62:	2300      	movne	r3, #0
 800dd64:	eba6 0807 	sub.w	r8, r6, r7
 800dd68:	608b      	str	r3, [r1, #8]
 800dd6a:	f1b8 0f00 	cmp.w	r8, #0
 800dd6e:	dded      	ble.n	800dd4c <__sflush_r+0xbc>
 800dd70:	69e1      	ldr	r1, [r4, #28]
 800dd72:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800dd74:	4643      	mov	r3, r8
 800dd76:	463a      	mov	r2, r7
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b0      	blx	r6
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	dc08      	bgt.n	800dd92 <__sflush_r+0x102>
 800dd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd88:	81a3      	strh	r3, [r4, #12]
 800dd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd92:	4407      	add	r7, r0
 800dd94:	eba8 0800 	sub.w	r8, r8, r0
 800dd98:	e7e7      	b.n	800dd6a <__sflush_r+0xda>
 800dd9a:	bf00      	nop
 800dd9c:	dfbffffe 	.word	0xdfbffffe

0800dda0 <_fflush_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	460c      	mov	r4, r1
 800dda4:	4605      	mov	r5, r0
 800dda6:	b118      	cbz	r0, 800ddb0 <_fflush_r+0x10>
 800dda8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ddaa:	b90b      	cbnz	r3, 800ddb0 <_fflush_r+0x10>
 800ddac:	f7fe f9dc 	bl	800c168 <__sinit>
 800ddb0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800ddb4:	b1b8      	cbz	r0, 800dde6 <_fflush_r+0x46>
 800ddb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddb8:	07db      	lsls	r3, r3, #31
 800ddba:	d404      	bmi.n	800ddc6 <_fflush_r+0x26>
 800ddbc:	0581      	lsls	r1, r0, #22
 800ddbe:	d402      	bmi.n	800ddc6 <_fflush_r+0x26>
 800ddc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddc2:	f7fe fbfd 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	4621      	mov	r1, r4
 800ddca:	f7ff ff61 	bl	800dc90 <__sflush_r>
 800ddce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddd0:	07da      	lsls	r2, r3, #31
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	d405      	bmi.n	800dde2 <_fflush_r+0x42>
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	059b      	lsls	r3, r3, #22
 800ddda:	d402      	bmi.n	800dde2 <_fflush_r+0x42>
 800dddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddde:	f7fe fbf0 	bl	800c5c2 <__retarget_lock_release_recursive>
 800dde2:	4628      	mov	r0, r5
 800dde4:	bd38      	pop	{r3, r4, r5, pc}
 800dde6:	4605      	mov	r5, r0
 800dde8:	e7fb      	b.n	800dde2 <_fflush_r+0x42>
	...

0800ddec <__sfvwrite_r>:
 800ddec:	6893      	ldr	r3, [r2, #8]
 800ddee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf2:	4606      	mov	r6, r0
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	4691      	mov	r9, r2
 800ddf8:	b91b      	cbnz	r3, 800de02 <__sfvwrite_r+0x16>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	b003      	add	sp, #12
 800ddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de02:	898b      	ldrh	r3, [r1, #12]
 800de04:	0718      	lsls	r0, r3, #28
 800de06:	d550      	bpl.n	800deaa <__sfvwrite_r+0xbe>
 800de08:	690b      	ldr	r3, [r1, #16]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d04d      	beq.n	800deaa <__sfvwrite_r+0xbe>
 800de0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de12:	f8d9 8000 	ldr.w	r8, [r9]
 800de16:	f013 0702 	ands.w	r7, r3, #2
 800de1a:	d16b      	bne.n	800def4 <__sfvwrite_r+0x108>
 800de1c:	f013 0301 	ands.w	r3, r3, #1
 800de20:	f000 809c 	beq.w	800df5c <__sfvwrite_r+0x170>
 800de24:	4638      	mov	r0, r7
 800de26:	46ba      	mov	sl, r7
 800de28:	46bb      	mov	fp, r7
 800de2a:	f1bb 0f00 	cmp.w	fp, #0
 800de2e:	f000 8103 	beq.w	800e038 <__sfvwrite_r+0x24c>
 800de32:	b950      	cbnz	r0, 800de4a <__sfvwrite_r+0x5e>
 800de34:	465a      	mov	r2, fp
 800de36:	210a      	movs	r1, #10
 800de38:	4650      	mov	r0, sl
 800de3a:	f7f2 f9f9 	bl	8000230 <memchr>
 800de3e:	2800      	cmp	r0, #0
 800de40:	f000 8100 	beq.w	800e044 <__sfvwrite_r+0x258>
 800de44:	3001      	adds	r0, #1
 800de46:	eba0 070a 	sub.w	r7, r0, sl
 800de4a:	6820      	ldr	r0, [r4, #0]
 800de4c:	6921      	ldr	r1, [r4, #16]
 800de4e:	68a5      	ldr	r5, [r4, #8]
 800de50:	6963      	ldr	r3, [r4, #20]
 800de52:	455f      	cmp	r7, fp
 800de54:	463a      	mov	r2, r7
 800de56:	bf28      	it	cs
 800de58:	465a      	movcs	r2, fp
 800de5a:	4288      	cmp	r0, r1
 800de5c:	f240 80f5 	bls.w	800e04a <__sfvwrite_r+0x25e>
 800de60:	441d      	add	r5, r3
 800de62:	42aa      	cmp	r2, r5
 800de64:	f340 80f1 	ble.w	800e04a <__sfvwrite_r+0x25e>
 800de68:	4651      	mov	r1, sl
 800de6a:	462a      	mov	r2, r5
 800de6c:	f000 f9c4 	bl	800e1f8 <memmove>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	442b      	add	r3, r5
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	4621      	mov	r1, r4
 800de78:	4630      	mov	r0, r6
 800de7a:	f7ff ff91 	bl	800dda0 <_fflush_r>
 800de7e:	2800      	cmp	r0, #0
 800de80:	d167      	bne.n	800df52 <__sfvwrite_r+0x166>
 800de82:	1b7f      	subs	r7, r7, r5
 800de84:	f040 80f9 	bne.w	800e07a <__sfvwrite_r+0x28e>
 800de88:	4621      	mov	r1, r4
 800de8a:	4630      	mov	r0, r6
 800de8c:	f7ff ff88 	bl	800dda0 <_fflush_r>
 800de90:	2800      	cmp	r0, #0
 800de92:	d15e      	bne.n	800df52 <__sfvwrite_r+0x166>
 800de94:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800de98:	1b5b      	subs	r3, r3, r5
 800de9a:	44aa      	add	sl, r5
 800de9c:	ebab 0b05 	sub.w	fp, fp, r5
 800dea0:	f8c9 3008 	str.w	r3, [r9, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1c0      	bne.n	800de2a <__sfvwrite_r+0x3e>
 800dea8:	e7a7      	b.n	800ddfa <__sfvwrite_r+0xe>
 800deaa:	4621      	mov	r1, r4
 800deac:	4630      	mov	r0, r6
 800deae:	f000 f94d 	bl	800e14c <__swsetup_r>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d0ab      	beq.n	800de0e <__sfvwrite_r+0x22>
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295
 800deba:	e79f      	b.n	800ddfc <__sfvwrite_r+0x10>
 800debc:	e9d8 a500 	ldrd	sl, r5, [r8]
 800dec0:	f108 0808 	add.w	r8, r8, #8
 800dec4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dec8:	69e1      	ldr	r1, [r4, #28]
 800deca:	2d00      	cmp	r5, #0
 800decc:	d0f6      	beq.n	800debc <__sfvwrite_r+0xd0>
 800dece:	42bd      	cmp	r5, r7
 800ded0:	462b      	mov	r3, r5
 800ded2:	4652      	mov	r2, sl
 800ded4:	bf28      	it	cs
 800ded6:	463b      	movcs	r3, r7
 800ded8:	4630      	mov	r0, r6
 800deda:	47d8      	blx	fp
 800dedc:	2800      	cmp	r0, #0
 800dede:	dd38      	ble.n	800df52 <__sfvwrite_r+0x166>
 800dee0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dee4:	1a1b      	subs	r3, r3, r0
 800dee6:	4482      	add	sl, r0
 800dee8:	1a2d      	subs	r5, r5, r0
 800deea:	f8c9 3008 	str.w	r3, [r9, #8]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e8      	bne.n	800dec4 <__sfvwrite_r+0xd8>
 800def2:	e782      	b.n	800ddfa <__sfvwrite_r+0xe>
 800def4:	f04f 0a00 	mov.w	sl, #0
 800def8:	4f61      	ldr	r7, [pc, #388]	@ (800e080 <__sfvwrite_r+0x294>)
 800defa:	4655      	mov	r5, sl
 800defc:	e7e2      	b.n	800dec4 <__sfvwrite_r+0xd8>
 800defe:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800df02:	f108 0808 	add.w	r8, r8, #8
 800df06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	68a2      	ldr	r2, [r4, #8]
 800df0e:	f1ba 0f00 	cmp.w	sl, #0
 800df12:	d0f4      	beq.n	800defe <__sfvwrite_r+0x112>
 800df14:	0599      	lsls	r1, r3, #22
 800df16:	d563      	bpl.n	800dfe0 <__sfvwrite_r+0x1f4>
 800df18:	4552      	cmp	r2, sl
 800df1a:	d836      	bhi.n	800df8a <__sfvwrite_r+0x19e>
 800df1c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800df20:	d033      	beq.n	800df8a <__sfvwrite_r+0x19e>
 800df22:	6921      	ldr	r1, [r4, #16]
 800df24:	6965      	ldr	r5, [r4, #20]
 800df26:	eba0 0b01 	sub.w	fp, r0, r1
 800df2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df32:	f10b 0201 	add.w	r2, fp, #1
 800df36:	106d      	asrs	r5, r5, #1
 800df38:	4452      	add	r2, sl
 800df3a:	4295      	cmp	r5, r2
 800df3c:	bf38      	it	cc
 800df3e:	4615      	movcc	r5, r2
 800df40:	055b      	lsls	r3, r3, #21
 800df42:	d53d      	bpl.n	800dfc0 <__sfvwrite_r+0x1d4>
 800df44:	4629      	mov	r1, r5
 800df46:	4630      	mov	r0, r6
 800df48:	f7fd fe3c 	bl	800bbc4 <_malloc_r>
 800df4c:	b948      	cbnz	r0, 800df62 <__sfvwrite_r+0x176>
 800df4e:	230c      	movs	r3, #12
 800df50:	6033      	str	r3, [r6, #0]
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	e7ac      	b.n	800deb6 <__sfvwrite_r+0xca>
 800df5c:	461f      	mov	r7, r3
 800df5e:	469a      	mov	sl, r3
 800df60:	e7d1      	b.n	800df06 <__sfvwrite_r+0x11a>
 800df62:	465a      	mov	r2, fp
 800df64:	6921      	ldr	r1, [r4, #16]
 800df66:	9001      	str	r0, [sp, #4]
 800df68:	f000 f9b4 	bl	800e2d4 <memcpy>
 800df6c:	89a2      	ldrh	r2, [r4, #12]
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800df74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800df78:	81a2      	strh	r2, [r4, #12]
 800df7a:	6123      	str	r3, [r4, #16]
 800df7c:	6165      	str	r5, [r4, #20]
 800df7e:	445b      	add	r3, fp
 800df80:	eba5 050b 	sub.w	r5, r5, fp
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	4652      	mov	r2, sl
 800df88:	60a5      	str	r5, [r4, #8]
 800df8a:	4552      	cmp	r2, sl
 800df8c:	bf28      	it	cs
 800df8e:	4652      	movcs	r2, sl
 800df90:	6820      	ldr	r0, [r4, #0]
 800df92:	9201      	str	r2, [sp, #4]
 800df94:	4639      	mov	r1, r7
 800df96:	f000 f92f 	bl	800e1f8 <memmove>
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	9a01      	ldr	r2, [sp, #4]
 800df9e:	1a9b      	subs	r3, r3, r2
 800dfa0:	60a3      	str	r3, [r4, #8]
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	4655      	mov	r5, sl
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dfae:	1b5b      	subs	r3, r3, r5
 800dfb0:	442f      	add	r7, r5
 800dfb2:	ebaa 0a05 	sub.w	sl, sl, r5
 800dfb6:	f8c9 3008 	str.w	r3, [r9, #8]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1a3      	bne.n	800df06 <__sfvwrite_r+0x11a>
 800dfbe:	e71c      	b.n	800ddfa <__sfvwrite_r+0xe>
 800dfc0:	462a      	mov	r2, r5
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f001 fb86 	bl	800f6d4 <_realloc_r>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d1d5      	bne.n	800df7a <__sfvwrite_r+0x18e>
 800dfce:	6921      	ldr	r1, [r4, #16]
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f7fe fb69 	bl	800c6a8 <_free_r>
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfdc:	81a3      	strh	r3, [r4, #12]
 800dfde:	e7b6      	b.n	800df4e <__sfvwrite_r+0x162>
 800dfe0:	6923      	ldr	r3, [r4, #16]
 800dfe2:	4283      	cmp	r3, r0
 800dfe4:	d302      	bcc.n	800dfec <__sfvwrite_r+0x200>
 800dfe6:	6961      	ldr	r1, [r4, #20]
 800dfe8:	4551      	cmp	r1, sl
 800dfea:	d915      	bls.n	800e018 <__sfvwrite_r+0x22c>
 800dfec:	4552      	cmp	r2, sl
 800dfee:	bf28      	it	cs
 800dff0:	4652      	movcs	r2, sl
 800dff2:	4639      	mov	r1, r7
 800dff4:	4615      	mov	r5, r2
 800dff6:	f000 f8ff 	bl	800e1f8 <memmove>
 800dffa:	68a3      	ldr	r3, [r4, #8]
 800dffc:	6822      	ldr	r2, [r4, #0]
 800dffe:	1b5b      	subs	r3, r3, r5
 800e000:	442a      	add	r2, r5
 800e002:	60a3      	str	r3, [r4, #8]
 800e004:	6022      	str	r2, [r4, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1cf      	bne.n	800dfaa <__sfvwrite_r+0x1be>
 800e00a:	4621      	mov	r1, r4
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7ff fec7 	bl	800dda0 <_fflush_r>
 800e012:	2800      	cmp	r0, #0
 800e014:	d0c9      	beq.n	800dfaa <__sfvwrite_r+0x1be>
 800e016:	e79c      	b.n	800df52 <__sfvwrite_r+0x166>
 800e018:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e01c:	4553      	cmp	r3, sl
 800e01e:	bf28      	it	cs
 800e020:	4653      	movcs	r3, sl
 800e022:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800e024:	fb93 f3f1 	sdiv	r3, r3, r1
 800e028:	463a      	mov	r2, r7
 800e02a:	434b      	muls	r3, r1
 800e02c:	4630      	mov	r0, r6
 800e02e:	69e1      	ldr	r1, [r4, #28]
 800e030:	47a8      	blx	r5
 800e032:	1e05      	subs	r5, r0, #0
 800e034:	dcb9      	bgt.n	800dfaa <__sfvwrite_r+0x1be>
 800e036:	e78c      	b.n	800df52 <__sfvwrite_r+0x166>
 800e038:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800e03c:	2000      	movs	r0, #0
 800e03e:	f108 0808 	add.w	r8, r8, #8
 800e042:	e6f2      	b.n	800de2a <__sfvwrite_r+0x3e>
 800e044:	f10b 0701 	add.w	r7, fp, #1
 800e048:	e6ff      	b.n	800de4a <__sfvwrite_r+0x5e>
 800e04a:	4293      	cmp	r3, r2
 800e04c:	dc08      	bgt.n	800e060 <__sfvwrite_r+0x274>
 800e04e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800e050:	69e1      	ldr	r1, [r4, #28]
 800e052:	4652      	mov	r2, sl
 800e054:	4630      	mov	r0, r6
 800e056:	47a8      	blx	r5
 800e058:	1e05      	subs	r5, r0, #0
 800e05a:	f73f af12 	bgt.w	800de82 <__sfvwrite_r+0x96>
 800e05e:	e778      	b.n	800df52 <__sfvwrite_r+0x166>
 800e060:	4651      	mov	r1, sl
 800e062:	9201      	str	r2, [sp, #4]
 800e064:	f000 f8c8 	bl	800e1f8 <memmove>
 800e068:	9a01      	ldr	r2, [sp, #4]
 800e06a:	68a3      	ldr	r3, [r4, #8]
 800e06c:	1a9b      	subs	r3, r3, r2
 800e06e:	60a3      	str	r3, [r4, #8]
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	4413      	add	r3, r2
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	4615      	mov	r5, r2
 800e078:	e703      	b.n	800de82 <__sfvwrite_r+0x96>
 800e07a:	2001      	movs	r0, #1
 800e07c:	e70a      	b.n	800de94 <__sfvwrite_r+0xa8>
 800e07e:	bf00      	nop
 800e080:	7ffffc00 	.word	0x7ffffc00

0800e084 <__swhatbuf_r>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	460c      	mov	r4, r1
 800e088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e08c:	2900      	cmp	r1, #0
 800e08e:	b096      	sub	sp, #88	@ 0x58
 800e090:	4615      	mov	r5, r2
 800e092:	461e      	mov	r6, r3
 800e094:	da07      	bge.n	800e0a6 <__swhatbuf_r+0x22>
 800e096:	89a1      	ldrh	r1, [r4, #12]
 800e098:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800e09c:	d117      	bne.n	800e0ce <__swhatbuf_r+0x4a>
 800e09e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0a2:	4608      	mov	r0, r1
 800e0a4:	e00f      	b.n	800e0c6 <__swhatbuf_r+0x42>
 800e0a6:	466a      	mov	r2, sp
 800e0a8:	f000 f8de 	bl	800e268 <_fstat_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	dbf2      	blt.n	800e096 <__swhatbuf_r+0x12>
 800e0b0:	9901      	ldr	r1, [sp, #4]
 800e0b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0ba:	4259      	negs	r1, r3
 800e0bc:	4159      	adcs	r1, r3
 800e0be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e0c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0c6:	6031      	str	r1, [r6, #0]
 800e0c8:	602b      	str	r3, [r5, #0]
 800e0ca:	b016      	add	sp, #88	@ 0x58
 800e0cc:	bd70      	pop	{r4, r5, r6, pc}
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	2340      	movs	r3, #64	@ 0x40
 800e0d2:	e7e6      	b.n	800e0a2 <__swhatbuf_r+0x1e>

0800e0d4 <__smakebuf_r>:
 800e0d4:	898b      	ldrh	r3, [r1, #12]
 800e0d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0d8:	079d      	lsls	r5, r3, #30
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460c      	mov	r4, r1
 800e0de:	d507      	bpl.n	800e0f0 <__smakebuf_r+0x1c>
 800e0e0:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	6163      	str	r3, [r4, #20]
 800e0ec:	b003      	add	sp, #12
 800e0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f0:	ab01      	add	r3, sp, #4
 800e0f2:	466a      	mov	r2, sp
 800e0f4:	f7ff ffc6 	bl	800e084 <__swhatbuf_r>
 800e0f8:	9f00      	ldr	r7, [sp, #0]
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	4630      	mov	r0, r6
 800e100:	f7fd fd60 	bl	800bbc4 <_malloc_r>
 800e104:	b948      	cbnz	r0, 800e11a <__smakebuf_r+0x46>
 800e106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10a:	059a      	lsls	r2, r3, #22
 800e10c:	d4ee      	bmi.n	800e0ec <__smakebuf_r+0x18>
 800e10e:	f023 0303 	bic.w	r3, r3, #3
 800e112:	f043 0302 	orr.w	r3, r3, #2
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	e7e2      	b.n	800e0e0 <__smakebuf_r+0xc>
 800e11a:	89a3      	ldrh	r3, [r4, #12]
 800e11c:	6020      	str	r0, [r4, #0]
 800e11e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e122:	81a3      	strh	r3, [r4, #12]
 800e124:	9b01      	ldr	r3, [sp, #4]
 800e126:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e12a:	b15b      	cbz	r3, 800e144 <__smakebuf_r+0x70>
 800e12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e130:	4630      	mov	r0, r6
 800e132:	f000 f8ab 	bl	800e28c <_isatty_r>
 800e136:	b128      	cbz	r0, 800e144 <__smakebuf_r+0x70>
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	f023 0303 	bic.w	r3, r3, #3
 800e13e:	f043 0301 	orr.w	r3, r3, #1
 800e142:	81a3      	strh	r3, [r4, #12]
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	431d      	orrs	r5, r3
 800e148:	81a5      	strh	r5, [r4, #12]
 800e14a:	e7cf      	b.n	800e0ec <__smakebuf_r+0x18>

0800e14c <__swsetup_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4b29      	ldr	r3, [pc, #164]	@ (800e1f4 <__swsetup_r+0xa8>)
 800e150:	4605      	mov	r5, r0
 800e152:	6818      	ldr	r0, [r3, #0]
 800e154:	460c      	mov	r4, r1
 800e156:	b118      	cbz	r0, 800e160 <__swsetup_r+0x14>
 800e158:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e15a:	b90b      	cbnz	r3, 800e160 <__swsetup_r+0x14>
 800e15c:	f7fe f804 	bl	800c168 <__sinit>
 800e160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e164:	0719      	lsls	r1, r3, #28
 800e166:	d422      	bmi.n	800e1ae <__swsetup_r+0x62>
 800e168:	06da      	lsls	r2, r3, #27
 800e16a:	d407      	bmi.n	800e17c <__swsetup_r+0x30>
 800e16c:	2209      	movs	r2, #9
 800e16e:	602a      	str	r2, [r5, #0]
 800e170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	f04f 30ff 	mov.w	r0, #4294967295
 800e17a:	e033      	b.n	800e1e4 <__swsetup_r+0x98>
 800e17c:	0758      	lsls	r0, r3, #29
 800e17e:	d512      	bpl.n	800e1a6 <__swsetup_r+0x5a>
 800e180:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e182:	b141      	cbz	r1, 800e196 <__swsetup_r+0x4a>
 800e184:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e188:	4299      	cmp	r1, r3
 800e18a:	d002      	beq.n	800e192 <__swsetup_r+0x46>
 800e18c:	4628      	mov	r0, r5
 800e18e:	f7fe fa8b 	bl	800c6a8 <_free_r>
 800e192:	2300      	movs	r3, #0
 800e194:	6323      	str	r3, [r4, #48]	@ 0x30
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e19c:	81a3      	strh	r3, [r4, #12]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	6063      	str	r3, [r4, #4]
 800e1a2:	6923      	ldr	r3, [r4, #16]
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	89a3      	ldrh	r3, [r4, #12]
 800e1a8:	f043 0308 	orr.w	r3, r3, #8
 800e1ac:	81a3      	strh	r3, [r4, #12]
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	b94b      	cbnz	r3, 800e1c6 <__swsetup_r+0x7a>
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1bc:	d003      	beq.n	800e1c6 <__swsetup_r+0x7a>
 800e1be:	4621      	mov	r1, r4
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	f7ff ff87 	bl	800e0d4 <__smakebuf_r>
 800e1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ca:	f013 0201 	ands.w	r2, r3, #1
 800e1ce:	d00a      	beq.n	800e1e6 <__swsetup_r+0x9a>
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	60a2      	str	r2, [r4, #8]
 800e1d4:	6962      	ldr	r2, [r4, #20]
 800e1d6:	4252      	negs	r2, r2
 800e1d8:	61a2      	str	r2, [r4, #24]
 800e1da:	6922      	ldr	r2, [r4, #16]
 800e1dc:	b942      	cbnz	r2, 800e1f0 <__swsetup_r+0xa4>
 800e1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1e2:	d1c5      	bne.n	800e170 <__swsetup_r+0x24>
 800e1e4:	bd38      	pop	{r3, r4, r5, pc}
 800e1e6:	0799      	lsls	r1, r3, #30
 800e1e8:	bf58      	it	pl
 800e1ea:	6962      	ldrpl	r2, [r4, #20]
 800e1ec:	60a2      	str	r2, [r4, #8]
 800e1ee:	e7f4      	b.n	800e1da <__swsetup_r+0x8e>
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	e7f7      	b.n	800e1e4 <__swsetup_r+0x98>
 800e1f4:	20000430 	.word	0x20000430

0800e1f8 <memmove>:
 800e1f8:	4288      	cmp	r0, r1
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	eb01 0402 	add.w	r4, r1, r2
 800e200:	d902      	bls.n	800e208 <memmove+0x10>
 800e202:	4284      	cmp	r4, r0
 800e204:	4623      	mov	r3, r4
 800e206:	d807      	bhi.n	800e218 <memmove+0x20>
 800e208:	1e43      	subs	r3, r0, #1
 800e20a:	42a1      	cmp	r1, r4
 800e20c:	d008      	beq.n	800e220 <memmove+0x28>
 800e20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e216:	e7f8      	b.n	800e20a <memmove+0x12>
 800e218:	4402      	add	r2, r0
 800e21a:	4601      	mov	r1, r0
 800e21c:	428a      	cmp	r2, r1
 800e21e:	d100      	bne.n	800e222 <memmove+0x2a>
 800e220:	bd10      	pop	{r4, pc}
 800e222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e22a:	e7f7      	b.n	800e21c <memmove+0x24>

0800e22c <strncpy>:
 800e22c:	b510      	push	{r4, lr}
 800e22e:	3901      	subs	r1, #1
 800e230:	4603      	mov	r3, r0
 800e232:	b132      	cbz	r2, 800e242 <strncpy+0x16>
 800e234:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e238:	f803 4b01 	strb.w	r4, [r3], #1
 800e23c:	3a01      	subs	r2, #1
 800e23e:	2c00      	cmp	r4, #0
 800e240:	d1f7      	bne.n	800e232 <strncpy+0x6>
 800e242:	441a      	add	r2, r3
 800e244:	2100      	movs	r1, #0
 800e246:	4293      	cmp	r3, r2
 800e248:	d100      	bne.n	800e24c <strncpy+0x20>
 800e24a:	bd10      	pop	{r4, pc}
 800e24c:	f803 1b01 	strb.w	r1, [r3], #1
 800e250:	e7f9      	b.n	800e246 <strncpy+0x1a>
	...

0800e254 <__locale_mb_cur_max>:
 800e254:	4b01      	ldr	r3, [pc, #4]	@ (800e25c <__locale_mb_cur_max+0x8>)
 800e256:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800e25a:	4770      	bx	lr
 800e25c:	2000055c 	.word	0x2000055c

0800e260 <_localeconv_r>:
 800e260:	4800      	ldr	r0, [pc, #0]	@ (800e264 <_localeconv_r+0x4>)
 800e262:	4770      	bx	lr
 800e264:	2000064c 	.word	0x2000064c

0800e268 <_fstat_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d07      	ldr	r5, [pc, #28]	@ (800e288 <_fstat_r+0x20>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	602b      	str	r3, [r5, #0]
 800e276:	f7f4 fcc3 	bl	8002c00 <_fstat>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	d102      	bne.n	800e284 <_fstat_r+0x1c>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	b103      	cbz	r3, 800e284 <_fstat_r+0x1c>
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop
 800e288:	20001710 	.word	0x20001710

0800e28c <_isatty_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	4d06      	ldr	r5, [pc, #24]	@ (800e2a8 <_isatty_r+0x1c>)
 800e290:	2300      	movs	r3, #0
 800e292:	4604      	mov	r4, r0
 800e294:	4608      	mov	r0, r1
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	f7f4 fcc2 	bl	8002c20 <_isatty>
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	d102      	bne.n	800e2a6 <_isatty_r+0x1a>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	b103      	cbz	r3, 800e2a6 <_isatty_r+0x1a>
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	20001710 	.word	0x20001710

0800e2ac <__libc_fini_array>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	4d07      	ldr	r5, [pc, #28]	@ (800e2cc <__libc_fini_array+0x20>)
 800e2b0:	4c07      	ldr	r4, [pc, #28]	@ (800e2d0 <__libc_fini_array+0x24>)
 800e2b2:	1b64      	subs	r4, r4, r5
 800e2b4:	10a4      	asrs	r4, r4, #2
 800e2b6:	b91c      	cbnz	r4, 800e2c0 <__libc_fini_array+0x14>
 800e2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2bc:	f003 baea 	b.w	8011894 <_fini>
 800e2c0:	3c01      	subs	r4, #1
 800e2c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e2c6:	4798      	blx	r3
 800e2c8:	e7f5      	b.n	800e2b6 <__libc_fini_array+0xa>
 800e2ca:	bf00      	nop
 800e2cc:	08011e98 	.word	0x08011e98
 800e2d0:	08011e9c 	.word	0x08011e9c

0800e2d4 <memcpy>:
 800e2d4:	440a      	add	r2, r1
 800e2d6:	4291      	cmp	r1, r2
 800e2d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2dc:	d100      	bne.n	800e2e0 <memcpy+0xc>
 800e2de:	4770      	bx	lr
 800e2e0:	b510      	push	{r4, lr}
 800e2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2ea:	4291      	cmp	r1, r2
 800e2ec:	d1f9      	bne.n	800e2e2 <memcpy+0xe>
 800e2ee:	bd10      	pop	{r4, pc}

0800e2f0 <frexp>:
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	ec55 4b10 	vmov	r4, r5, d0
 800e2f8:	6001      	str	r1, [r0, #0]
 800e2fa:	4915      	ldr	r1, [pc, #84]	@ (800e350 <frexp+0x60>)
 800e2fc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e300:	428a      	cmp	r2, r1
 800e302:	4606      	mov	r6, r0
 800e304:	462b      	mov	r3, r5
 800e306:	d820      	bhi.n	800e34a <frexp+0x5a>
 800e308:	4621      	mov	r1, r4
 800e30a:	4311      	orrs	r1, r2
 800e30c:	d01d      	beq.n	800e34a <frexp+0x5a>
 800e30e:	4911      	ldr	r1, [pc, #68]	@ (800e354 <frexp+0x64>)
 800e310:	4029      	ands	r1, r5
 800e312:	b961      	cbnz	r1, 800e32e <frexp+0x3e>
 800e314:	4b10      	ldr	r3, [pc, #64]	@ (800e358 <frexp+0x68>)
 800e316:	2200      	movs	r2, #0
 800e318:	4620      	mov	r0, r4
 800e31a:	4629      	mov	r1, r5
 800e31c:	f7f2 f994 	bl	8000648 <__aeabi_dmul>
 800e320:	460b      	mov	r3, r1
 800e322:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800e326:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800e32a:	4604      	mov	r4, r0
 800e32c:	6031      	str	r1, [r6, #0]
 800e32e:	6831      	ldr	r1, [r6, #0]
 800e330:	1512      	asrs	r2, r2, #20
 800e332:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e336:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800e33a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e33e:	4411      	add	r1, r2
 800e340:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800e344:	6031      	str	r1, [r6, #0]
 800e346:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800e34a:	ec45 4b10 	vmov	d0, r4, r5
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	7fefffff 	.word	0x7fefffff
 800e354:	7ff00000 	.word	0x7ff00000
 800e358:	43500000 	.word	0x43500000

0800e35c <__register_exitproc>:
 800e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e360:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800e3d8 <__register_exitproc+0x7c>
 800e364:	4606      	mov	r6, r0
 800e366:	f8da 0000 	ldr.w	r0, [sl]
 800e36a:	4698      	mov	r8, r3
 800e36c:	460f      	mov	r7, r1
 800e36e:	4691      	mov	r9, r2
 800e370:	f7fe f926 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 800e374:	4b16      	ldr	r3, [pc, #88]	@ (800e3d0 <__register_exitproc+0x74>)
 800e376:	681c      	ldr	r4, [r3, #0]
 800e378:	b90c      	cbnz	r4, 800e37e <__register_exitproc+0x22>
 800e37a:	4c16      	ldr	r4, [pc, #88]	@ (800e3d4 <__register_exitproc+0x78>)
 800e37c:	601c      	str	r4, [r3, #0]
 800e37e:	6865      	ldr	r5, [r4, #4]
 800e380:	f8da 0000 	ldr.w	r0, [sl]
 800e384:	2d1f      	cmp	r5, #31
 800e386:	dd05      	ble.n	800e394 <__register_exitproc+0x38>
 800e388:	f7fe f91b 	bl	800c5c2 <__retarget_lock_release_recursive>
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e394:	b19e      	cbz	r6, 800e3be <__register_exitproc+0x62>
 800e396:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800e39a:	2201      	movs	r2, #1
 800e39c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800e3a0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800e3a4:	40aa      	lsls	r2, r5
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800e3ac:	2e02      	cmp	r6, #2
 800e3ae:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800e3b2:	bf02      	ittt	eq
 800e3b4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800e3b8:	4313      	orreq	r3, r2
 800e3ba:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800e3be:	1c6b      	adds	r3, r5, #1
 800e3c0:	3502      	adds	r5, #2
 800e3c2:	6063      	str	r3, [r4, #4]
 800e3c4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800e3c8:	f7fe f8fb 	bl	800c5c2 <__retarget_lock_release_recursive>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	e7df      	b.n	800e390 <__register_exitproc+0x34>
 800e3d0:	20001718 	.word	0x20001718
 800e3d4:	2000171c 	.word	0x2000171c
 800e3d8:	20000558 	.word	0x20000558

0800e3dc <quorem>:
 800e3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	6903      	ldr	r3, [r0, #16]
 800e3e2:	690c      	ldr	r4, [r1, #16]
 800e3e4:	42a3      	cmp	r3, r4
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	db7e      	blt.n	800e4e8 <quorem+0x10c>
 800e3ea:	3c01      	subs	r4, #1
 800e3ec:	f101 0814 	add.w	r8, r1, #20
 800e3f0:	00a3      	lsls	r3, r4, #2
 800e3f2:	f100 0514 	add.w	r5, r0, #20
 800e3f6:	9300      	str	r3, [sp, #0]
 800e3f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3fc:	9301      	str	r3, [sp, #4]
 800e3fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e406:	3301      	adds	r3, #1
 800e408:	429a      	cmp	r2, r3
 800e40a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e40e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e412:	d32e      	bcc.n	800e472 <quorem+0x96>
 800e414:	f04f 0a00 	mov.w	sl, #0
 800e418:	46c4      	mov	ip, r8
 800e41a:	46ae      	mov	lr, r5
 800e41c:	46d3      	mov	fp, sl
 800e41e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e422:	b298      	uxth	r0, r3
 800e424:	fb06 a000 	mla	r0, r6, r0, sl
 800e428:	0c02      	lsrs	r2, r0, #16
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	fb06 2303 	mla	r3, r6, r3, r2
 800e430:	f8de 2000 	ldr.w	r2, [lr]
 800e434:	b280      	uxth	r0, r0
 800e436:	b292      	uxth	r2, r2
 800e438:	1a12      	subs	r2, r2, r0
 800e43a:	445a      	add	r2, fp
 800e43c:	f8de 0000 	ldr.w	r0, [lr]
 800e440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e444:	b29b      	uxth	r3, r3
 800e446:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e44a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e44e:	b292      	uxth	r2, r2
 800e450:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e454:	45e1      	cmp	r9, ip
 800e456:	f84e 2b04 	str.w	r2, [lr], #4
 800e45a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e45e:	d2de      	bcs.n	800e41e <quorem+0x42>
 800e460:	9b00      	ldr	r3, [sp, #0]
 800e462:	58eb      	ldr	r3, [r5, r3]
 800e464:	b92b      	cbnz	r3, 800e472 <quorem+0x96>
 800e466:	9b01      	ldr	r3, [sp, #4]
 800e468:	3b04      	subs	r3, #4
 800e46a:	429d      	cmp	r5, r3
 800e46c:	461a      	mov	r2, r3
 800e46e:	d32f      	bcc.n	800e4d0 <quorem+0xf4>
 800e470:	613c      	str	r4, [r7, #16]
 800e472:	4638      	mov	r0, r7
 800e474:	f001 f826 	bl	800f4c4 <__mcmp>
 800e478:	2800      	cmp	r0, #0
 800e47a:	db25      	blt.n	800e4c8 <quorem+0xec>
 800e47c:	4629      	mov	r1, r5
 800e47e:	2000      	movs	r0, #0
 800e480:	f858 2b04 	ldr.w	r2, [r8], #4
 800e484:	f8d1 c000 	ldr.w	ip, [r1]
 800e488:	fa1f fe82 	uxth.w	lr, r2
 800e48c:	fa1f f38c 	uxth.w	r3, ip
 800e490:	eba3 030e 	sub.w	r3, r3, lr
 800e494:	4403      	add	r3, r0
 800e496:	0c12      	lsrs	r2, r2, #16
 800e498:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e49c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4a6:	45c1      	cmp	r9, r8
 800e4a8:	f841 3b04 	str.w	r3, [r1], #4
 800e4ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e4b0:	d2e6      	bcs.n	800e480 <quorem+0xa4>
 800e4b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4ba:	b922      	cbnz	r2, 800e4c6 <quorem+0xea>
 800e4bc:	3b04      	subs	r3, #4
 800e4be:	429d      	cmp	r5, r3
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	d30b      	bcc.n	800e4dc <quorem+0x100>
 800e4c4:	613c      	str	r4, [r7, #16]
 800e4c6:	3601      	adds	r6, #1
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	b003      	add	sp, #12
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	6812      	ldr	r2, [r2, #0]
 800e4d2:	3b04      	subs	r3, #4
 800e4d4:	2a00      	cmp	r2, #0
 800e4d6:	d1cb      	bne.n	800e470 <quorem+0x94>
 800e4d8:	3c01      	subs	r4, #1
 800e4da:	e7c6      	b.n	800e46a <quorem+0x8e>
 800e4dc:	6812      	ldr	r2, [r2, #0]
 800e4de:	3b04      	subs	r3, #4
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	d1ef      	bne.n	800e4c4 <quorem+0xe8>
 800e4e4:	3c01      	subs	r4, #1
 800e4e6:	e7ea      	b.n	800e4be <quorem+0xe2>
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	e7ee      	b.n	800e4ca <quorem+0xee>
 800e4ec:	0000      	movs	r0, r0
	...

0800e4f0 <_dtoa_r>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	b099      	sub	sp, #100	@ 0x64
 800e4f6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e4fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4fc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800e4fe:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e500:	920e      	str	r2, [sp, #56]	@ 0x38
 800e502:	ec55 4b10 	vmov	r4, r5, d0
 800e506:	4683      	mov	fp, r0
 800e508:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e50a:	b149      	cbz	r1, 800e520 <_dtoa_r+0x30>
 800e50c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e50e:	604a      	str	r2, [r1, #4]
 800e510:	2301      	movs	r3, #1
 800e512:	4093      	lsls	r3, r2
 800e514:	608b      	str	r3, [r1, #8]
 800e516:	f000 fdce 	bl	800f0b6 <_Bfree>
 800e51a:	2300      	movs	r3, #0
 800e51c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800e520:	1e2b      	subs	r3, r5, #0
 800e522:	bfb9      	ittee	lt
 800e524:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e528:	9303      	strlt	r3, [sp, #12]
 800e52a:	2300      	movge	r3, #0
 800e52c:	6033      	strge	r3, [r6, #0]
 800e52e:	9f03      	ldr	r7, [sp, #12]
 800e530:	4b97      	ldr	r3, [pc, #604]	@ (800e790 <_dtoa_r+0x2a0>)
 800e532:	bfbc      	itt	lt
 800e534:	2201      	movlt	r2, #1
 800e536:	6032      	strlt	r2, [r6, #0]
 800e538:	43bb      	bics	r3, r7
 800e53a:	d114      	bne.n	800e566 <_dtoa_r+0x76>
 800e53c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e53e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e548:	4323      	orrs	r3, r4
 800e54a:	f000 854c 	beq.w	800efe6 <_dtoa_r+0xaf6>
 800e54e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e550:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e7a8 <_dtoa_r+0x2b8>
 800e554:	b11b      	cbz	r3, 800e55e <_dtoa_r+0x6e>
 800e556:	f10a 0303 	add.w	r3, sl, #3
 800e55a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e55c:	6013      	str	r3, [r2, #0]
 800e55e:	4650      	mov	r0, sl
 800e560:	b019      	add	sp, #100	@ 0x64
 800e562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e56a:	2200      	movs	r2, #0
 800e56c:	ec51 0b17 	vmov	r0, r1, d7
 800e570:	2300      	movs	r3, #0
 800e572:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e576:	f7f2 facf 	bl	8000b18 <__aeabi_dcmpeq>
 800e57a:	4680      	mov	r8, r0
 800e57c:	b150      	cbz	r0, 800e594 <_dtoa_r+0xa4>
 800e57e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e580:	2301      	movs	r3, #1
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e586:	b113      	cbz	r3, 800e58e <_dtoa_r+0x9e>
 800e588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e58a:	4b82      	ldr	r3, [pc, #520]	@ (800e794 <_dtoa_r+0x2a4>)
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800e7ac <_dtoa_r+0x2bc>
 800e592:	e7e4      	b.n	800e55e <_dtoa_r+0x6e>
 800e594:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e598:	aa16      	add	r2, sp, #88	@ 0x58
 800e59a:	a917      	add	r1, sp, #92	@ 0x5c
 800e59c:	4658      	mov	r0, fp
 800e59e:	f001 f841 	bl	800f624 <__d2b>
 800e5a2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e5a6:	4681      	mov	r9, r0
 800e5a8:	2e00      	cmp	r6, #0
 800e5aa:	d077      	beq.n	800e69c <_dtoa_r+0x1ac>
 800e5ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5ae:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e5b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5ba:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e5be:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e5c2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4b73      	ldr	r3, [pc, #460]	@ (800e798 <_dtoa_r+0x2a8>)
 800e5cc:	f7f1 fe84 	bl	80002d8 <__aeabi_dsub>
 800e5d0:	a369      	add	r3, pc, #420	@ (adr r3, 800e778 <_dtoa_r+0x288>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f2 f837 	bl	8000648 <__aeabi_dmul>
 800e5da:	a369      	add	r3, pc, #420	@ (adr r3, 800e780 <_dtoa_r+0x290>)
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	f7f1 fe7c 	bl	80002dc <__adddf3>
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	460d      	mov	r5, r1
 800e5ea:	f7f1 ffc3 	bl	8000574 <__aeabi_i2d>
 800e5ee:	a366      	add	r3, pc, #408	@ (adr r3, 800e788 <_dtoa_r+0x298>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	f7f2 f828 	bl	8000648 <__aeabi_dmul>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	f7f1 fe6c 	bl	80002dc <__adddf3>
 800e604:	4604      	mov	r4, r0
 800e606:	460d      	mov	r5, r1
 800e608:	f7f2 face 	bl	8000ba8 <__aeabi_d2iz>
 800e60c:	2200      	movs	r2, #0
 800e60e:	4607      	mov	r7, r0
 800e610:	2300      	movs	r3, #0
 800e612:	4620      	mov	r0, r4
 800e614:	4629      	mov	r1, r5
 800e616:	f7f2 fa89 	bl	8000b2c <__aeabi_dcmplt>
 800e61a:	b140      	cbz	r0, 800e62e <_dtoa_r+0x13e>
 800e61c:	4638      	mov	r0, r7
 800e61e:	f7f1 ffa9 	bl	8000574 <__aeabi_i2d>
 800e622:	4622      	mov	r2, r4
 800e624:	462b      	mov	r3, r5
 800e626:	f7f2 fa77 	bl	8000b18 <__aeabi_dcmpeq>
 800e62a:	b900      	cbnz	r0, 800e62e <_dtoa_r+0x13e>
 800e62c:	3f01      	subs	r7, #1
 800e62e:	2f16      	cmp	r7, #22
 800e630:	d851      	bhi.n	800e6d6 <_dtoa_r+0x1e6>
 800e632:	4b5a      	ldr	r3, [pc, #360]	@ (800e79c <_dtoa_r+0x2ac>)
 800e634:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e640:	f7f2 fa74 	bl	8000b2c <__aeabi_dcmplt>
 800e644:	2800      	cmp	r0, #0
 800e646:	d048      	beq.n	800e6da <_dtoa_r+0x1ea>
 800e648:	3f01      	subs	r7, #1
 800e64a:	2300      	movs	r3, #0
 800e64c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e64e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e650:	1b9b      	subs	r3, r3, r6
 800e652:	1e5a      	subs	r2, r3, #1
 800e654:	bf44      	itt	mi
 800e656:	f1c3 0801 	rsbmi	r8, r3, #1
 800e65a:	2300      	movmi	r3, #0
 800e65c:	9208      	str	r2, [sp, #32]
 800e65e:	bf54      	ite	pl
 800e660:	f04f 0800 	movpl.w	r8, #0
 800e664:	9308      	strmi	r3, [sp, #32]
 800e666:	2f00      	cmp	r7, #0
 800e668:	db39      	blt.n	800e6de <_dtoa_r+0x1ee>
 800e66a:	9b08      	ldr	r3, [sp, #32]
 800e66c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e66e:	443b      	add	r3, r7
 800e670:	9308      	str	r3, [sp, #32]
 800e672:	2300      	movs	r3, #0
 800e674:	930a      	str	r3, [sp, #40]	@ 0x28
 800e676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e678:	2b09      	cmp	r3, #9
 800e67a:	d865      	bhi.n	800e748 <_dtoa_r+0x258>
 800e67c:	2b05      	cmp	r3, #5
 800e67e:	bfc4      	itt	gt
 800e680:	3b04      	subgt	r3, #4
 800e682:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e686:	f1a3 0302 	sub.w	r3, r3, #2
 800e68a:	bfcc      	ite	gt
 800e68c:	2400      	movgt	r4, #0
 800e68e:	2401      	movle	r4, #1
 800e690:	2b03      	cmp	r3, #3
 800e692:	d864      	bhi.n	800e75e <_dtoa_r+0x26e>
 800e694:	e8df f003 	tbb	[pc, r3]
 800e698:	5635372a 	.word	0x5635372a
 800e69c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e6a0:	441e      	add	r6, r3
 800e6a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e6a6:	2b20      	cmp	r3, #32
 800e6a8:	bfc1      	itttt	gt
 800e6aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e6ae:	409f      	lslgt	r7, r3
 800e6b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e6b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e6b8:	bfd6      	itet	le
 800e6ba:	f1c3 0320 	rsble	r3, r3, #32
 800e6be:	ea47 0003 	orrgt.w	r0, r7, r3
 800e6c2:	fa04 f003 	lslle.w	r0, r4, r3
 800e6c6:	f7f1 ff45 	bl	8000554 <__aeabi_ui2d>
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e6d0:	3e01      	subs	r6, #1
 800e6d2:	9214      	str	r2, [sp, #80]	@ 0x50
 800e6d4:	e777      	b.n	800e5c6 <_dtoa_r+0xd6>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e7b8      	b.n	800e64c <_dtoa_r+0x15c>
 800e6da:	9012      	str	r0, [sp, #72]	@ 0x48
 800e6dc:	e7b7      	b.n	800e64e <_dtoa_r+0x15e>
 800e6de:	427b      	negs	r3, r7
 800e6e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	eba8 0807 	sub.w	r8, r8, r7
 800e6e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6ea:	e7c4      	b.n	800e676 <_dtoa_r+0x186>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	dc36      	bgt.n	800e764 <_dtoa_r+0x274>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800e700:	e00b      	b.n	800e71a <_dtoa_r+0x22a>
 800e702:	2301      	movs	r3, #1
 800e704:	e7f3      	b.n	800e6ee <_dtoa_r+0x1fe>
 800e706:	2300      	movs	r3, #0
 800e708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e70c:	18fb      	adds	r3, r7, r3
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	3301      	adds	r3, #1
 800e712:	2b01      	cmp	r3, #1
 800e714:	9307      	str	r3, [sp, #28]
 800e716:	bfb8      	it	lt
 800e718:	2301      	movlt	r3, #1
 800e71a:	2100      	movs	r1, #0
 800e71c:	2204      	movs	r2, #4
 800e71e:	f102 0014 	add.w	r0, r2, #20
 800e722:	4298      	cmp	r0, r3
 800e724:	d922      	bls.n	800e76c <_dtoa_r+0x27c>
 800e726:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800e72a:	4658      	mov	r0, fp
 800e72c:	f000 fc9e 	bl	800f06c <_Balloc>
 800e730:	4682      	mov	sl, r0
 800e732:	2800      	cmp	r0, #0
 800e734:	d13c      	bne.n	800e7b0 <_dtoa_r+0x2c0>
 800e736:	4b1a      	ldr	r3, [pc, #104]	@ (800e7a0 <_dtoa_r+0x2b0>)
 800e738:	4602      	mov	r2, r0
 800e73a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e73e:	4819      	ldr	r0, [pc, #100]	@ (800e7a4 <_dtoa_r+0x2b4>)
 800e740:	f001 f9fa 	bl	800fb38 <__assert_func>
 800e744:	2301      	movs	r3, #1
 800e746:	e7df      	b.n	800e708 <_dtoa_r+0x218>
 800e748:	2401      	movs	r4, #1
 800e74a:	2300      	movs	r3, #0
 800e74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e74e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e750:	f04f 33ff 	mov.w	r3, #4294967295
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	9307      	str	r3, [sp, #28]
 800e758:	2200      	movs	r2, #0
 800e75a:	2312      	movs	r3, #18
 800e75c:	e7cf      	b.n	800e6fe <_dtoa_r+0x20e>
 800e75e:	2301      	movs	r3, #1
 800e760:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e762:	e7f5      	b.n	800e750 <_dtoa_r+0x260>
 800e764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	9307      	str	r3, [sp, #28]
 800e76a:	e7d6      	b.n	800e71a <_dtoa_r+0x22a>
 800e76c:	3101      	adds	r1, #1
 800e76e:	0052      	lsls	r2, r2, #1
 800e770:	e7d5      	b.n	800e71e <_dtoa_r+0x22e>
 800e772:	bf00      	nop
 800e774:	f3af 8000 	nop.w
 800e778:	636f4361 	.word	0x636f4361
 800e77c:	3fd287a7 	.word	0x3fd287a7
 800e780:	8b60c8b3 	.word	0x8b60c8b3
 800e784:	3fc68a28 	.word	0x3fc68a28
 800e788:	509f79fb 	.word	0x509f79fb
 800e78c:	3fd34413 	.word	0x3fd34413
 800e790:	7ff00000 	.word	0x7ff00000
 800e794:	08011953 	.word	0x08011953
 800e798:	3ff80000 	.word	0x3ff80000
 800e79c:	08011a88 	.word	0x08011a88
 800e7a0:	0801198b 	.word	0x0801198b
 800e7a4:	0801199c 	.word	0x0801199c
 800e7a8:	08011987 	.word	0x08011987
 800e7ac:	08011952 	.word	0x08011952
 800e7b0:	9b07      	ldr	r3, [sp, #28]
 800e7b2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800e7b6:	2b0e      	cmp	r3, #14
 800e7b8:	f200 80a4 	bhi.w	800e904 <_dtoa_r+0x414>
 800e7bc:	2c00      	cmp	r4, #0
 800e7be:	f000 80a1 	beq.w	800e904 <_dtoa_r+0x414>
 800e7c2:	2f00      	cmp	r7, #0
 800e7c4:	dd33      	ble.n	800e82e <_dtoa_r+0x33e>
 800e7c6:	4bae      	ldr	r3, [pc, #696]	@ (800ea80 <_dtoa_r+0x590>)
 800e7c8:	f007 020f 	and.w	r2, r7, #15
 800e7cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7d0:	ed93 7b00 	vldr	d7, [r3]
 800e7d4:	05f8      	lsls	r0, r7, #23
 800e7d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e7da:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e7de:	d516      	bpl.n	800e80e <_dtoa_r+0x31e>
 800e7e0:	4ba8      	ldr	r3, [pc, #672]	@ (800ea84 <_dtoa_r+0x594>)
 800e7e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7ea:	f7f2 f857 	bl	800089c <__aeabi_ddiv>
 800e7ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7f2:	f004 040f 	and.w	r4, r4, #15
 800e7f6:	2603      	movs	r6, #3
 800e7f8:	4da2      	ldr	r5, [pc, #648]	@ (800ea84 <_dtoa_r+0x594>)
 800e7fa:	b954      	cbnz	r4, 800e812 <_dtoa_r+0x322>
 800e7fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e804:	f7f2 f84a 	bl	800089c <__aeabi_ddiv>
 800e808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e80c:	e028      	b.n	800e860 <_dtoa_r+0x370>
 800e80e:	2602      	movs	r6, #2
 800e810:	e7f2      	b.n	800e7f8 <_dtoa_r+0x308>
 800e812:	07e1      	lsls	r1, r4, #31
 800e814:	d508      	bpl.n	800e828 <_dtoa_r+0x338>
 800e816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e81a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e81e:	f7f1 ff13 	bl	8000648 <__aeabi_dmul>
 800e822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e826:	3601      	adds	r6, #1
 800e828:	1064      	asrs	r4, r4, #1
 800e82a:	3508      	adds	r5, #8
 800e82c:	e7e5      	b.n	800e7fa <_dtoa_r+0x30a>
 800e82e:	f000 80d2 	beq.w	800e9d6 <_dtoa_r+0x4e6>
 800e832:	427c      	negs	r4, r7
 800e834:	4b92      	ldr	r3, [pc, #584]	@ (800ea80 <_dtoa_r+0x590>)
 800e836:	4d93      	ldr	r5, [pc, #588]	@ (800ea84 <_dtoa_r+0x594>)
 800e838:	f004 020f 	and.w	r2, r4, #15
 800e83c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e848:	f7f1 fefe 	bl	8000648 <__aeabi_dmul>
 800e84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e850:	1124      	asrs	r4, r4, #4
 800e852:	2300      	movs	r3, #0
 800e854:	2602      	movs	r6, #2
 800e856:	2c00      	cmp	r4, #0
 800e858:	f040 80b2 	bne.w	800e9c0 <_dtoa_r+0x4d0>
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1d3      	bne.n	800e808 <_dtoa_r+0x318>
 800e860:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e862:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 80b7 	beq.w	800e9da <_dtoa_r+0x4ea>
 800e86c:	4b86      	ldr	r3, [pc, #536]	@ (800ea88 <_dtoa_r+0x598>)
 800e86e:	2200      	movs	r2, #0
 800e870:	4620      	mov	r0, r4
 800e872:	4629      	mov	r1, r5
 800e874:	f7f2 f95a 	bl	8000b2c <__aeabi_dcmplt>
 800e878:	2800      	cmp	r0, #0
 800e87a:	f000 80ae 	beq.w	800e9da <_dtoa_r+0x4ea>
 800e87e:	9b07      	ldr	r3, [sp, #28]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 80aa 	beq.w	800e9da <_dtoa_r+0x4ea>
 800e886:	9b00      	ldr	r3, [sp, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	dd37      	ble.n	800e8fc <_dtoa_r+0x40c>
 800e88c:	1e7b      	subs	r3, r7, #1
 800e88e:	9304      	str	r3, [sp, #16]
 800e890:	4620      	mov	r0, r4
 800e892:	4b7e      	ldr	r3, [pc, #504]	@ (800ea8c <_dtoa_r+0x59c>)
 800e894:	2200      	movs	r2, #0
 800e896:	4629      	mov	r1, r5
 800e898:	f7f1 fed6 	bl	8000648 <__aeabi_dmul>
 800e89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8a0:	9c00      	ldr	r4, [sp, #0]
 800e8a2:	3601      	adds	r6, #1
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f7f1 fe65 	bl	8000574 <__aeabi_i2d>
 800e8aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8ae:	f7f1 fecb 	bl	8000648 <__aeabi_dmul>
 800e8b2:	4b77      	ldr	r3, [pc, #476]	@ (800ea90 <_dtoa_r+0x5a0>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f7f1 fd11 	bl	80002dc <__adddf3>
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e8c0:	2c00      	cmp	r4, #0
 800e8c2:	f040 808d 	bne.w	800e9e0 <_dtoa_r+0x4f0>
 800e8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ca:	4b72      	ldr	r3, [pc, #456]	@ (800ea94 <_dtoa_r+0x5a4>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f7f1 fd03 	bl	80002d8 <__aeabi_dsub>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8da:	462a      	mov	r2, r5
 800e8dc:	4633      	mov	r3, r6
 800e8de:	f7f2 f943 	bl	8000b68 <__aeabi_dcmpgt>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	f040 828c 	bne.w	800ee00 <_dtoa_r+0x910>
 800e8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ec:	462a      	mov	r2, r5
 800e8ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e8f2:	f7f2 f91b 	bl	8000b2c <__aeabi_dcmplt>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f040 8129 	bne.w	800eb4e <_dtoa_r+0x65e>
 800e8fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e900:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e904:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e906:	2b00      	cmp	r3, #0
 800e908:	f2c0 815b 	blt.w	800ebc2 <_dtoa_r+0x6d2>
 800e90c:	2f0e      	cmp	r7, #14
 800e90e:	f300 8158 	bgt.w	800ebc2 <_dtoa_r+0x6d2>
 800e912:	4b5b      	ldr	r3, [pc, #364]	@ (800ea80 <_dtoa_r+0x590>)
 800e914:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e918:	ed93 7b00 	vldr	d7, [r3]
 800e91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e91e:	2b00      	cmp	r3, #0
 800e920:	ed8d 7b00 	vstr	d7, [sp]
 800e924:	da03      	bge.n	800e92e <_dtoa_r+0x43e>
 800e926:	9b07      	ldr	r3, [sp, #28]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f340 8102 	ble.w	800eb32 <_dtoa_r+0x642>
 800e92e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e932:	4656      	mov	r6, sl
 800e934:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e938:	4620      	mov	r0, r4
 800e93a:	4629      	mov	r1, r5
 800e93c:	f7f1 ffae 	bl	800089c <__aeabi_ddiv>
 800e940:	f7f2 f932 	bl	8000ba8 <__aeabi_d2iz>
 800e944:	4680      	mov	r8, r0
 800e946:	f7f1 fe15 	bl	8000574 <__aeabi_i2d>
 800e94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e94e:	f7f1 fe7b 	bl	8000648 <__aeabi_dmul>
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	4620      	mov	r0, r4
 800e958:	4629      	mov	r1, r5
 800e95a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e95e:	f7f1 fcbb 	bl	80002d8 <__aeabi_dsub>
 800e962:	f806 4b01 	strb.w	r4, [r6], #1
 800e966:	9d07      	ldr	r5, [sp, #28]
 800e968:	eba6 040a 	sub.w	r4, r6, sl
 800e96c:	42a5      	cmp	r5, r4
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	f040 8118 	bne.w	800eba6 <_dtoa_r+0x6b6>
 800e976:	f7f1 fcb1 	bl	80002dc <__adddf3>
 800e97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e97e:	4604      	mov	r4, r0
 800e980:	460d      	mov	r5, r1
 800e982:	f7f2 f8f1 	bl	8000b68 <__aeabi_dcmpgt>
 800e986:	2800      	cmp	r0, #0
 800e988:	f040 80fa 	bne.w	800eb80 <_dtoa_r+0x690>
 800e98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e990:	4620      	mov	r0, r4
 800e992:	4629      	mov	r1, r5
 800e994:	f7f2 f8c0 	bl	8000b18 <__aeabi_dcmpeq>
 800e998:	b118      	cbz	r0, 800e9a2 <_dtoa_r+0x4b2>
 800e99a:	f018 0f01 	tst.w	r8, #1
 800e99e:	f040 80ef 	bne.w	800eb80 <_dtoa_r+0x690>
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	4658      	mov	r0, fp
 800e9a6:	f000 fb86 	bl	800f0b6 <_Bfree>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	7033      	strb	r3, [r6, #0]
 800e9ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9b0:	3701      	adds	r7, #1
 800e9b2:	601f      	str	r7, [r3, #0]
 800e9b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f43f add1 	beq.w	800e55e <_dtoa_r+0x6e>
 800e9bc:	601e      	str	r6, [r3, #0]
 800e9be:	e5ce      	b.n	800e55e <_dtoa_r+0x6e>
 800e9c0:	07e2      	lsls	r2, r4, #31
 800e9c2:	d505      	bpl.n	800e9d0 <_dtoa_r+0x4e0>
 800e9c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9c8:	f7f1 fe3e 	bl	8000648 <__aeabi_dmul>
 800e9cc:	3601      	adds	r6, #1
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	1064      	asrs	r4, r4, #1
 800e9d2:	3508      	adds	r5, #8
 800e9d4:	e73f      	b.n	800e856 <_dtoa_r+0x366>
 800e9d6:	2602      	movs	r6, #2
 800e9d8:	e742      	b.n	800e860 <_dtoa_r+0x370>
 800e9da:	9c07      	ldr	r4, [sp, #28]
 800e9dc:	9704      	str	r7, [sp, #16]
 800e9de:	e761      	b.n	800e8a4 <_dtoa_r+0x3b4>
 800e9e0:	4b27      	ldr	r3, [pc, #156]	@ (800ea80 <_dtoa_r+0x590>)
 800e9e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9ec:	4454      	add	r4, sl
 800e9ee:	2900      	cmp	r1, #0
 800e9f0:	d054      	beq.n	800ea9c <_dtoa_r+0x5ac>
 800e9f2:	4929      	ldr	r1, [pc, #164]	@ (800ea98 <_dtoa_r+0x5a8>)
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	f7f1 ff51 	bl	800089c <__aeabi_ddiv>
 800e9fa:	4633      	mov	r3, r6
 800e9fc:	462a      	mov	r2, r5
 800e9fe:	f7f1 fc6b 	bl	80002d8 <__aeabi_dsub>
 800ea02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea06:	4656      	mov	r6, sl
 800ea08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea0c:	f7f2 f8cc 	bl	8000ba8 <__aeabi_d2iz>
 800ea10:	4605      	mov	r5, r0
 800ea12:	f7f1 fdaf 	bl	8000574 <__aeabi_i2d>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea1e:	f7f1 fc5b 	bl	80002d8 <__aeabi_dsub>
 800ea22:	3530      	adds	r5, #48	@ 0x30
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea2c:	f806 5b01 	strb.w	r5, [r6], #1
 800ea30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea34:	f7f2 f87a 	bl	8000b2c <__aeabi_dcmplt>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d172      	bne.n	800eb22 <_dtoa_r+0x632>
 800ea3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea40:	4911      	ldr	r1, [pc, #68]	@ (800ea88 <_dtoa_r+0x598>)
 800ea42:	2000      	movs	r0, #0
 800ea44:	f7f1 fc48 	bl	80002d8 <__aeabi_dsub>
 800ea48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea4c:	f7f2 f86e 	bl	8000b2c <__aeabi_dcmplt>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	f040 8096 	bne.w	800eb82 <_dtoa_r+0x692>
 800ea56:	42a6      	cmp	r6, r4
 800ea58:	f43f af50 	beq.w	800e8fc <_dtoa_r+0x40c>
 800ea5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea60:	4b0a      	ldr	r3, [pc, #40]	@ (800ea8c <_dtoa_r+0x59c>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	f7f1 fdf0 	bl	8000648 <__aeabi_dmul>
 800ea68:	4b08      	ldr	r3, [pc, #32]	@ (800ea8c <_dtoa_r+0x59c>)
 800ea6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea6e:	2200      	movs	r2, #0
 800ea70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea74:	f7f1 fde8 	bl	8000648 <__aeabi_dmul>
 800ea78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea7c:	e7c4      	b.n	800ea08 <_dtoa_r+0x518>
 800ea7e:	bf00      	nop
 800ea80:	08011a88 	.word	0x08011a88
 800ea84:	08011a60 	.word	0x08011a60
 800ea88:	3ff00000 	.word	0x3ff00000
 800ea8c:	40240000 	.word	0x40240000
 800ea90:	401c0000 	.word	0x401c0000
 800ea94:	40140000 	.word	0x40140000
 800ea98:	3fe00000 	.word	0x3fe00000
 800ea9c:	4631      	mov	r1, r6
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f7f1 fdd2 	bl	8000648 <__aeabi_dmul>
 800eaa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eaa8:	9415      	str	r4, [sp, #84]	@ 0x54
 800eaaa:	4656      	mov	r6, sl
 800eaac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eab0:	f7f2 f87a 	bl	8000ba8 <__aeabi_d2iz>
 800eab4:	4605      	mov	r5, r0
 800eab6:	f7f1 fd5d 	bl	8000574 <__aeabi_i2d>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eac2:	f7f1 fc09 	bl	80002d8 <__aeabi_dsub>
 800eac6:	3530      	adds	r5, #48	@ 0x30
 800eac8:	f806 5b01 	strb.w	r5, [r6], #1
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	42a6      	cmp	r6, r4
 800ead2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ead6:	f04f 0200 	mov.w	r2, #0
 800eada:	d124      	bne.n	800eb26 <_dtoa_r+0x636>
 800eadc:	4bac      	ldr	r3, [pc, #688]	@ (800ed90 <_dtoa_r+0x8a0>)
 800eade:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eae2:	f7f1 fbfb 	bl	80002dc <__adddf3>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaee:	f7f2 f83b 	bl	8000b68 <__aeabi_dcmpgt>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d145      	bne.n	800eb82 <_dtoa_r+0x692>
 800eaf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eafa:	49a5      	ldr	r1, [pc, #660]	@ (800ed90 <_dtoa_r+0x8a0>)
 800eafc:	2000      	movs	r0, #0
 800eafe:	f7f1 fbeb 	bl	80002d8 <__aeabi_dsub>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb0a:	f7f2 f80f 	bl	8000b2c <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f43f aef4 	beq.w	800e8fc <_dtoa_r+0x40c>
 800eb14:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eb16:	1e73      	subs	r3, r6, #1
 800eb18:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb1e:	2b30      	cmp	r3, #48	@ 0x30
 800eb20:	d0f8      	beq.n	800eb14 <_dtoa_r+0x624>
 800eb22:	9f04      	ldr	r7, [sp, #16]
 800eb24:	e73d      	b.n	800e9a2 <_dtoa_r+0x4b2>
 800eb26:	4b9b      	ldr	r3, [pc, #620]	@ (800ed94 <_dtoa_r+0x8a4>)
 800eb28:	f7f1 fd8e 	bl	8000648 <__aeabi_dmul>
 800eb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb30:	e7bc      	b.n	800eaac <_dtoa_r+0x5bc>
 800eb32:	d10c      	bne.n	800eb4e <_dtoa_r+0x65e>
 800eb34:	4b98      	ldr	r3, [pc, #608]	@ (800ed98 <_dtoa_r+0x8a8>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb3c:	f7f1 fd84 	bl	8000648 <__aeabi_dmul>
 800eb40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb44:	f7f2 f806 	bl	8000b54 <__aeabi_dcmpge>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f000 8157 	beq.w	800edfc <_dtoa_r+0x90c>
 800eb4e:	2400      	movs	r4, #0
 800eb50:	4625      	mov	r5, r4
 800eb52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb54:	43db      	mvns	r3, r3
 800eb56:	9304      	str	r3, [sp, #16]
 800eb58:	4656      	mov	r6, sl
 800eb5a:	2700      	movs	r7, #0
 800eb5c:	4621      	mov	r1, r4
 800eb5e:	4658      	mov	r0, fp
 800eb60:	f000 faa9 	bl	800f0b6 <_Bfree>
 800eb64:	2d00      	cmp	r5, #0
 800eb66:	d0dc      	beq.n	800eb22 <_dtoa_r+0x632>
 800eb68:	b12f      	cbz	r7, 800eb76 <_dtoa_r+0x686>
 800eb6a:	42af      	cmp	r7, r5
 800eb6c:	d003      	beq.n	800eb76 <_dtoa_r+0x686>
 800eb6e:	4639      	mov	r1, r7
 800eb70:	4658      	mov	r0, fp
 800eb72:	f000 faa0 	bl	800f0b6 <_Bfree>
 800eb76:	4629      	mov	r1, r5
 800eb78:	4658      	mov	r0, fp
 800eb7a:	f000 fa9c 	bl	800f0b6 <_Bfree>
 800eb7e:	e7d0      	b.n	800eb22 <_dtoa_r+0x632>
 800eb80:	9704      	str	r7, [sp, #16]
 800eb82:	4633      	mov	r3, r6
 800eb84:	461e      	mov	r6, r3
 800eb86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb8a:	2a39      	cmp	r2, #57	@ 0x39
 800eb8c:	d107      	bne.n	800eb9e <_dtoa_r+0x6ae>
 800eb8e:	459a      	cmp	sl, r3
 800eb90:	d1f8      	bne.n	800eb84 <_dtoa_r+0x694>
 800eb92:	9a04      	ldr	r2, [sp, #16]
 800eb94:	3201      	adds	r2, #1
 800eb96:	9204      	str	r2, [sp, #16]
 800eb98:	2230      	movs	r2, #48	@ 0x30
 800eb9a:	f88a 2000 	strb.w	r2, [sl]
 800eb9e:	781a      	ldrb	r2, [r3, #0]
 800eba0:	3201      	adds	r2, #1
 800eba2:	701a      	strb	r2, [r3, #0]
 800eba4:	e7bd      	b.n	800eb22 <_dtoa_r+0x632>
 800eba6:	4b7b      	ldr	r3, [pc, #492]	@ (800ed94 <_dtoa_r+0x8a4>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f7f1 fd4d 	bl	8000648 <__aeabi_dmul>
 800ebae:	2200      	movs	r2, #0
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	460d      	mov	r5, r1
 800ebb6:	f7f1 ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	f43f aeba 	beq.w	800e934 <_dtoa_r+0x444>
 800ebc0:	e6ef      	b.n	800e9a2 <_dtoa_r+0x4b2>
 800ebc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	f000 80db 	beq.w	800ed80 <_dtoa_r+0x890>
 800ebca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebcc:	2a01      	cmp	r2, #1
 800ebce:	f300 80bf 	bgt.w	800ed50 <_dtoa_r+0x860>
 800ebd2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	f000 80b7 	beq.w	800ed48 <_dtoa_r+0x858>
 800ebda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ebde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ebe0:	4646      	mov	r6, r8
 800ebe2:	9a08      	ldr	r2, [sp, #32]
 800ebe4:	2101      	movs	r1, #1
 800ebe6:	441a      	add	r2, r3
 800ebe8:	4658      	mov	r0, fp
 800ebea:	4498      	add	r8, r3
 800ebec:	9208      	str	r2, [sp, #32]
 800ebee:	f000 fafd 	bl	800f1ec <__i2b>
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	b15e      	cbz	r6, 800ec0e <_dtoa_r+0x71e>
 800ebf6:	9b08      	ldr	r3, [sp, #32]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	dd08      	ble.n	800ec0e <_dtoa_r+0x71e>
 800ebfc:	42b3      	cmp	r3, r6
 800ebfe:	9a08      	ldr	r2, [sp, #32]
 800ec00:	bfa8      	it	ge
 800ec02:	4633      	movge	r3, r6
 800ec04:	eba8 0803 	sub.w	r8, r8, r3
 800ec08:	1af6      	subs	r6, r6, r3
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	9308      	str	r3, [sp, #32]
 800ec0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec10:	b1f3      	cbz	r3, 800ec50 <_dtoa_r+0x760>
 800ec12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f000 80b7 	beq.w	800ed88 <_dtoa_r+0x898>
 800ec1a:	b18c      	cbz	r4, 800ec40 <_dtoa_r+0x750>
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	4622      	mov	r2, r4
 800ec20:	4658      	mov	r0, fp
 800ec22:	f000 fba3 	bl	800f36c <__pow5mult>
 800ec26:	464a      	mov	r2, r9
 800ec28:	4601      	mov	r1, r0
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	4658      	mov	r0, fp
 800ec2e:	f000 faf3 	bl	800f218 <__multiply>
 800ec32:	4649      	mov	r1, r9
 800ec34:	9004      	str	r0, [sp, #16]
 800ec36:	4658      	mov	r0, fp
 800ec38:	f000 fa3d 	bl	800f0b6 <_Bfree>
 800ec3c:	9b04      	ldr	r3, [sp, #16]
 800ec3e:	4699      	mov	r9, r3
 800ec40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec42:	1b1a      	subs	r2, r3, r4
 800ec44:	d004      	beq.n	800ec50 <_dtoa_r+0x760>
 800ec46:	4649      	mov	r1, r9
 800ec48:	4658      	mov	r0, fp
 800ec4a:	f000 fb8f 	bl	800f36c <__pow5mult>
 800ec4e:	4681      	mov	r9, r0
 800ec50:	2101      	movs	r1, #1
 800ec52:	4658      	mov	r0, fp
 800ec54:	f000 faca 	bl	800f1ec <__i2b>
 800ec58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 81cc 	beq.w	800effa <_dtoa_r+0xb0a>
 800ec62:	461a      	mov	r2, r3
 800ec64:	4601      	mov	r1, r0
 800ec66:	4658      	mov	r0, fp
 800ec68:	f000 fb80 	bl	800f36c <__pow5mult>
 800ec6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	4604      	mov	r4, r0
 800ec72:	f300 8095 	bgt.w	800eda0 <_dtoa_r+0x8b0>
 800ec76:	9b02      	ldr	r3, [sp, #8]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f040 8087 	bne.w	800ed8c <_dtoa_r+0x89c>
 800ec7e:	9b03      	ldr	r3, [sp, #12]
 800ec80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f040 8089 	bne.w	800ed9c <_dtoa_r+0x8ac>
 800ec8a:	9b03      	ldr	r3, [sp, #12]
 800ec8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec90:	0d1b      	lsrs	r3, r3, #20
 800ec92:	051b      	lsls	r3, r3, #20
 800ec94:	b12b      	cbz	r3, 800eca2 <_dtoa_r+0x7b2>
 800ec96:	9b08      	ldr	r3, [sp, #32]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	9308      	str	r3, [sp, #32]
 800ec9c:	f108 0801 	add.w	r8, r8, #1
 800eca0:	2301      	movs	r3, #1
 800eca2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f000 81ad 	beq.w	800f006 <_dtoa_r+0xb16>
 800ecac:	6923      	ldr	r3, [r4, #16]
 800ecae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecb2:	6918      	ldr	r0, [r3, #16]
 800ecb4:	f000 fa4e 	bl	800f154 <__hi0bits>
 800ecb8:	f1c0 0020 	rsb	r0, r0, #32
 800ecbc:	9b08      	ldr	r3, [sp, #32]
 800ecbe:	4418      	add	r0, r3
 800ecc0:	f010 001f 	ands.w	r0, r0, #31
 800ecc4:	d077      	beq.n	800edb6 <_dtoa_r+0x8c6>
 800ecc6:	f1c0 0320 	rsb	r3, r0, #32
 800ecca:	2b04      	cmp	r3, #4
 800eccc:	dd6b      	ble.n	800eda6 <_dtoa_r+0x8b6>
 800ecce:	9b08      	ldr	r3, [sp, #32]
 800ecd0:	f1c0 001c 	rsb	r0, r0, #28
 800ecd4:	4403      	add	r3, r0
 800ecd6:	4480      	add	r8, r0
 800ecd8:	4406      	add	r6, r0
 800ecda:	9308      	str	r3, [sp, #32]
 800ecdc:	f1b8 0f00 	cmp.w	r8, #0
 800ece0:	dd05      	ble.n	800ecee <_dtoa_r+0x7fe>
 800ece2:	4649      	mov	r1, r9
 800ece4:	4642      	mov	r2, r8
 800ece6:	4658      	mov	r0, fp
 800ece8:	f000 fb80 	bl	800f3ec <__lshift>
 800ecec:	4681      	mov	r9, r0
 800ecee:	9b08      	ldr	r3, [sp, #32]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	dd05      	ble.n	800ed00 <_dtoa_r+0x810>
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	4658      	mov	r0, fp
 800ecfa:	f000 fb77 	bl	800f3ec <__lshift>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d059      	beq.n	800edba <_dtoa_r+0x8ca>
 800ed06:	4621      	mov	r1, r4
 800ed08:	4648      	mov	r0, r9
 800ed0a:	f000 fbdb 	bl	800f4c4 <__mcmp>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	da53      	bge.n	800edba <_dtoa_r+0x8ca>
 800ed12:	1e7b      	subs	r3, r7, #1
 800ed14:	9304      	str	r3, [sp, #16]
 800ed16:	4649      	mov	r1, r9
 800ed18:	2300      	movs	r3, #0
 800ed1a:	220a      	movs	r2, #10
 800ed1c:	4658      	mov	r0, fp
 800ed1e:	f000 f9d3 	bl	800f0c8 <__multadd>
 800ed22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed24:	4681      	mov	r9, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f000 816f 	beq.w	800f00a <_dtoa_r+0xb1a>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	4629      	mov	r1, r5
 800ed30:	220a      	movs	r2, #10
 800ed32:	4658      	mov	r0, fp
 800ed34:	f000 f9c8 	bl	800f0c8 <__multadd>
 800ed38:	9b00      	ldr	r3, [sp, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	4605      	mov	r5, r0
 800ed3e:	dc67      	bgt.n	800ee10 <_dtoa_r+0x920>
 800ed40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	dc41      	bgt.n	800edca <_dtoa_r+0x8da>
 800ed46:	e063      	b.n	800ee10 <_dtoa_r+0x920>
 800ed48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ed4a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed4e:	e746      	b.n	800ebde <_dtoa_r+0x6ee>
 800ed50:	9b07      	ldr	r3, [sp, #28]
 800ed52:	1e5c      	subs	r4, r3, #1
 800ed54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed56:	42a3      	cmp	r3, r4
 800ed58:	bfbf      	itttt	lt
 800ed5a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ed5c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ed5e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ed60:	1ae3      	sublt	r3, r4, r3
 800ed62:	bfb4      	ite	lt
 800ed64:	18d2      	addlt	r2, r2, r3
 800ed66:	1b1c      	subge	r4, r3, r4
 800ed68:	9b07      	ldr	r3, [sp, #28]
 800ed6a:	bfbc      	itt	lt
 800ed6c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ed6e:	2400      	movlt	r4, #0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	bfb5      	itete	lt
 800ed74:	eba8 0603 	sublt.w	r6, r8, r3
 800ed78:	9b07      	ldrge	r3, [sp, #28]
 800ed7a:	2300      	movlt	r3, #0
 800ed7c:	4646      	movge	r6, r8
 800ed7e:	e730      	b.n	800ebe2 <_dtoa_r+0x6f2>
 800ed80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ed84:	4646      	mov	r6, r8
 800ed86:	e735      	b.n	800ebf4 <_dtoa_r+0x704>
 800ed88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed8a:	e75c      	b.n	800ec46 <_dtoa_r+0x756>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	e788      	b.n	800eca2 <_dtoa_r+0x7b2>
 800ed90:	3fe00000 	.word	0x3fe00000
 800ed94:	40240000 	.word	0x40240000
 800ed98:	40140000 	.word	0x40140000
 800ed9c:	9b02      	ldr	r3, [sp, #8]
 800ed9e:	e780      	b.n	800eca2 <_dtoa_r+0x7b2>
 800eda0:	2300      	movs	r3, #0
 800eda2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eda4:	e782      	b.n	800ecac <_dtoa_r+0x7bc>
 800eda6:	d099      	beq.n	800ecdc <_dtoa_r+0x7ec>
 800eda8:	9a08      	ldr	r2, [sp, #32]
 800edaa:	331c      	adds	r3, #28
 800edac:	441a      	add	r2, r3
 800edae:	4498      	add	r8, r3
 800edb0:	441e      	add	r6, r3
 800edb2:	9208      	str	r2, [sp, #32]
 800edb4:	e792      	b.n	800ecdc <_dtoa_r+0x7ec>
 800edb6:	4603      	mov	r3, r0
 800edb8:	e7f6      	b.n	800eda8 <_dtoa_r+0x8b8>
 800edba:	9b07      	ldr	r3, [sp, #28]
 800edbc:	9704      	str	r7, [sp, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dc20      	bgt.n	800ee04 <_dtoa_r+0x914>
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	dd1e      	ble.n	800ee08 <_dtoa_r+0x918>
 800edca:	9b00      	ldr	r3, [sp, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f47f aec0 	bne.w	800eb52 <_dtoa_r+0x662>
 800edd2:	4621      	mov	r1, r4
 800edd4:	2205      	movs	r2, #5
 800edd6:	4658      	mov	r0, fp
 800edd8:	f000 f976 	bl	800f0c8 <__multadd>
 800eddc:	4601      	mov	r1, r0
 800edde:	4604      	mov	r4, r0
 800ede0:	4648      	mov	r0, r9
 800ede2:	f000 fb6f 	bl	800f4c4 <__mcmp>
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f77f aeb3 	ble.w	800eb52 <_dtoa_r+0x662>
 800edec:	4656      	mov	r6, sl
 800edee:	2331      	movs	r3, #49	@ 0x31
 800edf0:	f806 3b01 	strb.w	r3, [r6], #1
 800edf4:	9b04      	ldr	r3, [sp, #16]
 800edf6:	3301      	adds	r3, #1
 800edf8:	9304      	str	r3, [sp, #16]
 800edfa:	e6ae      	b.n	800eb5a <_dtoa_r+0x66a>
 800edfc:	9c07      	ldr	r4, [sp, #28]
 800edfe:	9704      	str	r7, [sp, #16]
 800ee00:	4625      	mov	r5, r4
 800ee02:	e7f3      	b.n	800edec <_dtoa_r+0x8fc>
 800ee04:	9b07      	ldr	r3, [sp, #28]
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 8101 	beq.w	800f012 <_dtoa_r+0xb22>
 800ee10:	2e00      	cmp	r6, #0
 800ee12:	dd05      	ble.n	800ee20 <_dtoa_r+0x930>
 800ee14:	4629      	mov	r1, r5
 800ee16:	4632      	mov	r2, r6
 800ee18:	4658      	mov	r0, fp
 800ee1a:	f000 fae7 	bl	800f3ec <__lshift>
 800ee1e:	4605      	mov	r5, r0
 800ee20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d059      	beq.n	800eeda <_dtoa_r+0x9ea>
 800ee26:	6869      	ldr	r1, [r5, #4]
 800ee28:	4658      	mov	r0, fp
 800ee2a:	f000 f91f 	bl	800f06c <_Balloc>
 800ee2e:	4606      	mov	r6, r0
 800ee30:	b920      	cbnz	r0, 800ee3c <_dtoa_r+0x94c>
 800ee32:	4b83      	ldr	r3, [pc, #524]	@ (800f040 <_dtoa_r+0xb50>)
 800ee34:	4602      	mov	r2, r0
 800ee36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee3a:	e480      	b.n	800e73e <_dtoa_r+0x24e>
 800ee3c:	692a      	ldr	r2, [r5, #16]
 800ee3e:	3202      	adds	r2, #2
 800ee40:	0092      	lsls	r2, r2, #2
 800ee42:	f105 010c 	add.w	r1, r5, #12
 800ee46:	300c      	adds	r0, #12
 800ee48:	f7ff fa44 	bl	800e2d4 <memcpy>
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	4631      	mov	r1, r6
 800ee50:	4658      	mov	r0, fp
 800ee52:	f000 facb 	bl	800f3ec <__lshift>
 800ee56:	f10a 0301 	add.w	r3, sl, #1
 800ee5a:	9307      	str	r3, [sp, #28]
 800ee5c:	9b00      	ldr	r3, [sp, #0]
 800ee5e:	4453      	add	r3, sl
 800ee60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee62:	9b02      	ldr	r3, [sp, #8]
 800ee64:	f003 0301 	and.w	r3, r3, #1
 800ee68:	462f      	mov	r7, r5
 800ee6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	9b07      	ldr	r3, [sp, #28]
 800ee70:	4621      	mov	r1, r4
 800ee72:	3b01      	subs	r3, #1
 800ee74:	4648      	mov	r0, r9
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	f7ff fab0 	bl	800e3dc <quorem>
 800ee7c:	4639      	mov	r1, r7
 800ee7e:	9002      	str	r0, [sp, #8]
 800ee80:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ee84:	4648      	mov	r0, r9
 800ee86:	f000 fb1d 	bl	800f4c4 <__mcmp>
 800ee8a:	462a      	mov	r2, r5
 800ee8c:	9008      	str	r0, [sp, #32]
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4658      	mov	r0, fp
 800ee92:	f000 fb33 	bl	800f4fc <__mdiff>
 800ee96:	68c2      	ldr	r2, [r0, #12]
 800ee98:	4606      	mov	r6, r0
 800ee9a:	bb02      	cbnz	r2, 800eede <_dtoa_r+0x9ee>
 800ee9c:	4601      	mov	r1, r0
 800ee9e:	4648      	mov	r0, r9
 800eea0:	f000 fb10 	bl	800f4c4 <__mcmp>
 800eea4:	4602      	mov	r2, r0
 800eea6:	4631      	mov	r1, r6
 800eea8:	4658      	mov	r0, fp
 800eeaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800eeac:	f000 f903 	bl	800f0b6 <_Bfree>
 800eeb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeb4:	9e07      	ldr	r6, [sp, #28]
 800eeb6:	ea43 0102 	orr.w	r1, r3, r2
 800eeba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eebc:	4319      	orrs	r1, r3
 800eebe:	d110      	bne.n	800eee2 <_dtoa_r+0x9f2>
 800eec0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eec4:	d029      	beq.n	800ef1a <_dtoa_r+0xa2a>
 800eec6:	9b08      	ldr	r3, [sp, #32]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	dd02      	ble.n	800eed2 <_dtoa_r+0x9e2>
 800eecc:	9b02      	ldr	r3, [sp, #8]
 800eece:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eed2:	9b00      	ldr	r3, [sp, #0]
 800eed4:	f883 8000 	strb.w	r8, [r3]
 800eed8:	e640      	b.n	800eb5c <_dtoa_r+0x66c>
 800eeda:	4628      	mov	r0, r5
 800eedc:	e7bb      	b.n	800ee56 <_dtoa_r+0x966>
 800eede:	2201      	movs	r2, #1
 800eee0:	e7e1      	b.n	800eea6 <_dtoa_r+0x9b6>
 800eee2:	9b08      	ldr	r3, [sp, #32]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	db04      	blt.n	800eef2 <_dtoa_r+0xa02>
 800eee8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eeea:	430b      	orrs	r3, r1
 800eeec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eeee:	430b      	orrs	r3, r1
 800eef0:	d120      	bne.n	800ef34 <_dtoa_r+0xa44>
 800eef2:	2a00      	cmp	r2, #0
 800eef4:	dded      	ble.n	800eed2 <_dtoa_r+0x9e2>
 800eef6:	4649      	mov	r1, r9
 800eef8:	2201      	movs	r2, #1
 800eefa:	4658      	mov	r0, fp
 800eefc:	f000 fa76 	bl	800f3ec <__lshift>
 800ef00:	4621      	mov	r1, r4
 800ef02:	4681      	mov	r9, r0
 800ef04:	f000 fade 	bl	800f4c4 <__mcmp>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	dc03      	bgt.n	800ef14 <_dtoa_r+0xa24>
 800ef0c:	d1e1      	bne.n	800eed2 <_dtoa_r+0x9e2>
 800ef0e:	f018 0f01 	tst.w	r8, #1
 800ef12:	d0de      	beq.n	800eed2 <_dtoa_r+0x9e2>
 800ef14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef18:	d1d8      	bne.n	800eecc <_dtoa_r+0x9dc>
 800ef1a:	9a00      	ldr	r2, [sp, #0]
 800ef1c:	2339      	movs	r3, #57	@ 0x39
 800ef1e:	7013      	strb	r3, [r2, #0]
 800ef20:	4633      	mov	r3, r6
 800ef22:	461e      	mov	r6, r3
 800ef24:	3b01      	subs	r3, #1
 800ef26:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef2a:	2a39      	cmp	r2, #57	@ 0x39
 800ef2c:	d052      	beq.n	800efd4 <_dtoa_r+0xae4>
 800ef2e:	3201      	adds	r2, #1
 800ef30:	701a      	strb	r2, [r3, #0]
 800ef32:	e613      	b.n	800eb5c <_dtoa_r+0x66c>
 800ef34:	2a00      	cmp	r2, #0
 800ef36:	dd07      	ble.n	800ef48 <_dtoa_r+0xa58>
 800ef38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef3c:	d0ed      	beq.n	800ef1a <_dtoa_r+0xa2a>
 800ef3e:	9a00      	ldr	r2, [sp, #0]
 800ef40:	f108 0301 	add.w	r3, r8, #1
 800ef44:	7013      	strb	r3, [r2, #0]
 800ef46:	e609      	b.n	800eb5c <_dtoa_r+0x66c>
 800ef48:	9b07      	ldr	r3, [sp, #28]
 800ef4a:	9a07      	ldr	r2, [sp, #28]
 800ef4c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ef50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d028      	beq.n	800efa8 <_dtoa_r+0xab8>
 800ef56:	4649      	mov	r1, r9
 800ef58:	2300      	movs	r3, #0
 800ef5a:	220a      	movs	r2, #10
 800ef5c:	4658      	mov	r0, fp
 800ef5e:	f000 f8b3 	bl	800f0c8 <__multadd>
 800ef62:	42af      	cmp	r7, r5
 800ef64:	4681      	mov	r9, r0
 800ef66:	f04f 0300 	mov.w	r3, #0
 800ef6a:	f04f 020a 	mov.w	r2, #10
 800ef6e:	4639      	mov	r1, r7
 800ef70:	4658      	mov	r0, fp
 800ef72:	d107      	bne.n	800ef84 <_dtoa_r+0xa94>
 800ef74:	f000 f8a8 	bl	800f0c8 <__multadd>
 800ef78:	4607      	mov	r7, r0
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	9b07      	ldr	r3, [sp, #28]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	9307      	str	r3, [sp, #28]
 800ef82:	e774      	b.n	800ee6e <_dtoa_r+0x97e>
 800ef84:	f000 f8a0 	bl	800f0c8 <__multadd>
 800ef88:	4629      	mov	r1, r5
 800ef8a:	4607      	mov	r7, r0
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	220a      	movs	r2, #10
 800ef90:	4658      	mov	r0, fp
 800ef92:	f000 f899 	bl	800f0c8 <__multadd>
 800ef96:	4605      	mov	r5, r0
 800ef98:	e7f0      	b.n	800ef7c <_dtoa_r+0xa8c>
 800ef9a:	9b00      	ldr	r3, [sp, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	bfcc      	ite	gt
 800efa0:	461e      	movgt	r6, r3
 800efa2:	2601      	movle	r6, #1
 800efa4:	4456      	add	r6, sl
 800efa6:	2700      	movs	r7, #0
 800efa8:	4649      	mov	r1, r9
 800efaa:	2201      	movs	r2, #1
 800efac:	4658      	mov	r0, fp
 800efae:	f000 fa1d 	bl	800f3ec <__lshift>
 800efb2:	4621      	mov	r1, r4
 800efb4:	4681      	mov	r9, r0
 800efb6:	f000 fa85 	bl	800f4c4 <__mcmp>
 800efba:	2800      	cmp	r0, #0
 800efbc:	dcb0      	bgt.n	800ef20 <_dtoa_r+0xa30>
 800efbe:	d102      	bne.n	800efc6 <_dtoa_r+0xad6>
 800efc0:	f018 0f01 	tst.w	r8, #1
 800efc4:	d1ac      	bne.n	800ef20 <_dtoa_r+0xa30>
 800efc6:	4633      	mov	r3, r6
 800efc8:	461e      	mov	r6, r3
 800efca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efce:	2a30      	cmp	r2, #48	@ 0x30
 800efd0:	d0fa      	beq.n	800efc8 <_dtoa_r+0xad8>
 800efd2:	e5c3      	b.n	800eb5c <_dtoa_r+0x66c>
 800efd4:	459a      	cmp	sl, r3
 800efd6:	d1a4      	bne.n	800ef22 <_dtoa_r+0xa32>
 800efd8:	9b04      	ldr	r3, [sp, #16]
 800efda:	3301      	adds	r3, #1
 800efdc:	9304      	str	r3, [sp, #16]
 800efde:	2331      	movs	r3, #49	@ 0x31
 800efe0:	f88a 3000 	strb.w	r3, [sl]
 800efe4:	e5ba      	b.n	800eb5c <_dtoa_r+0x66c>
 800efe6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800efe8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f044 <_dtoa_r+0xb54>
 800efec:	2b00      	cmp	r3, #0
 800efee:	f43f aab6 	beq.w	800e55e <_dtoa_r+0x6e>
 800eff2:	f10a 0308 	add.w	r3, sl, #8
 800eff6:	f7ff bab0 	b.w	800e55a <_dtoa_r+0x6a>
 800effa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800effc:	2b01      	cmp	r3, #1
 800effe:	f77f ae3a 	ble.w	800ec76 <_dtoa_r+0x786>
 800f002:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f004:	930a      	str	r3, [sp, #40]	@ 0x28
 800f006:	2001      	movs	r0, #1
 800f008:	e658      	b.n	800ecbc <_dtoa_r+0x7cc>
 800f00a:	9b00      	ldr	r3, [sp, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f77f aed9 	ble.w	800edc4 <_dtoa_r+0x8d4>
 800f012:	4656      	mov	r6, sl
 800f014:	4621      	mov	r1, r4
 800f016:	4648      	mov	r0, r9
 800f018:	f7ff f9e0 	bl	800e3dc <quorem>
 800f01c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f020:	f806 8b01 	strb.w	r8, [r6], #1
 800f024:	9b00      	ldr	r3, [sp, #0]
 800f026:	eba6 020a 	sub.w	r2, r6, sl
 800f02a:	4293      	cmp	r3, r2
 800f02c:	ddb5      	ble.n	800ef9a <_dtoa_r+0xaaa>
 800f02e:	4649      	mov	r1, r9
 800f030:	2300      	movs	r3, #0
 800f032:	220a      	movs	r2, #10
 800f034:	4658      	mov	r0, fp
 800f036:	f000 f847 	bl	800f0c8 <__multadd>
 800f03a:	4681      	mov	r9, r0
 800f03c:	e7ea      	b.n	800f014 <_dtoa_r+0xb24>
 800f03e:	bf00      	nop
 800f040:	0801198b 	.word	0x0801198b
 800f044:	0801197e 	.word	0x0801197e

0800f048 <__ascii_mbtowc>:
 800f048:	b082      	sub	sp, #8
 800f04a:	b901      	cbnz	r1, 800f04e <__ascii_mbtowc+0x6>
 800f04c:	a901      	add	r1, sp, #4
 800f04e:	b142      	cbz	r2, 800f062 <__ascii_mbtowc+0x1a>
 800f050:	b14b      	cbz	r3, 800f066 <__ascii_mbtowc+0x1e>
 800f052:	7813      	ldrb	r3, [r2, #0]
 800f054:	600b      	str	r3, [r1, #0]
 800f056:	7812      	ldrb	r2, [r2, #0]
 800f058:	1e10      	subs	r0, r2, #0
 800f05a:	bf18      	it	ne
 800f05c:	2001      	movne	r0, #1
 800f05e:	b002      	add	sp, #8
 800f060:	4770      	bx	lr
 800f062:	4610      	mov	r0, r2
 800f064:	e7fb      	b.n	800f05e <__ascii_mbtowc+0x16>
 800f066:	f06f 0001 	mvn.w	r0, #1
 800f06a:	e7f8      	b.n	800f05e <__ascii_mbtowc+0x16>

0800f06c <_Balloc>:
 800f06c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800f06e:	b570      	push	{r4, r5, r6, lr}
 800f070:	4605      	mov	r5, r0
 800f072:	460c      	mov	r4, r1
 800f074:	b17b      	cbz	r3, 800f096 <_Balloc+0x2a>
 800f076:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f078:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f07c:	b9a0      	cbnz	r0, 800f0a8 <_Balloc+0x3c>
 800f07e:	2101      	movs	r1, #1
 800f080:	fa01 f604 	lsl.w	r6, r1, r4
 800f084:	1d72      	adds	r2, r6, #5
 800f086:	0092      	lsls	r2, r2, #2
 800f088:	4628      	mov	r0, r5
 800f08a:	f000 fd73 	bl	800fb74 <_calloc_r>
 800f08e:	b148      	cbz	r0, 800f0a4 <_Balloc+0x38>
 800f090:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800f094:	e00b      	b.n	800f0ae <_Balloc+0x42>
 800f096:	2221      	movs	r2, #33	@ 0x21
 800f098:	2104      	movs	r1, #4
 800f09a:	f000 fd6b 	bl	800fb74 <_calloc_r>
 800f09e:	6468      	str	r0, [r5, #68]	@ 0x44
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d1e8      	bne.n	800f076 <_Balloc+0xa>
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}
 800f0a8:	6802      	ldr	r2, [r0, #0]
 800f0aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0b4:	e7f7      	b.n	800f0a6 <_Balloc+0x3a>

0800f0b6 <_Bfree>:
 800f0b6:	b131      	cbz	r1, 800f0c6 <_Bfree+0x10>
 800f0b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800f0ba:	684a      	ldr	r2, [r1, #4]
 800f0bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f0c0:	6008      	str	r0, [r1, #0]
 800f0c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f0c6:	4770      	bx	lr

0800f0c8 <__multadd>:
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	690d      	ldr	r5, [r1, #16]
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	461e      	mov	r6, r3
 800f0d4:	f101 0c14 	add.w	ip, r1, #20
 800f0d8:	2000      	movs	r0, #0
 800f0da:	f8dc 3000 	ldr.w	r3, [ip]
 800f0de:	b299      	uxth	r1, r3
 800f0e0:	fb02 6101 	mla	r1, r2, r1, r6
 800f0e4:	0c1e      	lsrs	r6, r3, #16
 800f0e6:	0c0b      	lsrs	r3, r1, #16
 800f0e8:	fb02 3306 	mla	r3, r2, r6, r3
 800f0ec:	b289      	uxth	r1, r1
 800f0ee:	3001      	adds	r0, #1
 800f0f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0f4:	4285      	cmp	r5, r0
 800f0f6:	f84c 1b04 	str.w	r1, [ip], #4
 800f0fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0fe:	dcec      	bgt.n	800f0da <__multadd+0x12>
 800f100:	b30e      	cbz	r6, 800f146 <__multadd+0x7e>
 800f102:	68a3      	ldr	r3, [r4, #8]
 800f104:	42ab      	cmp	r3, r5
 800f106:	dc19      	bgt.n	800f13c <__multadd+0x74>
 800f108:	6861      	ldr	r1, [r4, #4]
 800f10a:	4638      	mov	r0, r7
 800f10c:	3101      	adds	r1, #1
 800f10e:	f7ff ffad 	bl	800f06c <_Balloc>
 800f112:	4680      	mov	r8, r0
 800f114:	b928      	cbnz	r0, 800f122 <__multadd+0x5a>
 800f116:	4602      	mov	r2, r0
 800f118:	4b0c      	ldr	r3, [pc, #48]	@ (800f14c <__multadd+0x84>)
 800f11a:	480d      	ldr	r0, [pc, #52]	@ (800f150 <__multadd+0x88>)
 800f11c:	21ba      	movs	r1, #186	@ 0xba
 800f11e:	f000 fd0b 	bl	800fb38 <__assert_func>
 800f122:	6922      	ldr	r2, [r4, #16]
 800f124:	3202      	adds	r2, #2
 800f126:	f104 010c 	add.w	r1, r4, #12
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	300c      	adds	r0, #12
 800f12e:	f7ff f8d1 	bl	800e2d4 <memcpy>
 800f132:	4621      	mov	r1, r4
 800f134:	4638      	mov	r0, r7
 800f136:	f7ff ffbe 	bl	800f0b6 <_Bfree>
 800f13a:	4644      	mov	r4, r8
 800f13c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f140:	3501      	adds	r5, #1
 800f142:	615e      	str	r6, [r3, #20]
 800f144:	6125      	str	r5, [r4, #16]
 800f146:	4620      	mov	r0, r4
 800f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14c:	0801198b 	.word	0x0801198b
 800f150:	080119f4 	.word	0x080119f4

0800f154 <__hi0bits>:
 800f154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f158:	4603      	mov	r3, r0
 800f15a:	bf36      	itet	cc
 800f15c:	0403      	lslcc	r3, r0, #16
 800f15e:	2000      	movcs	r0, #0
 800f160:	2010      	movcc	r0, #16
 800f162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f166:	bf3c      	itt	cc
 800f168:	021b      	lslcc	r3, r3, #8
 800f16a:	3008      	addcc	r0, #8
 800f16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f170:	bf3c      	itt	cc
 800f172:	011b      	lslcc	r3, r3, #4
 800f174:	3004      	addcc	r0, #4
 800f176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f17a:	bf3c      	itt	cc
 800f17c:	009b      	lslcc	r3, r3, #2
 800f17e:	3002      	addcc	r0, #2
 800f180:	2b00      	cmp	r3, #0
 800f182:	db05      	blt.n	800f190 <__hi0bits+0x3c>
 800f184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f188:	f100 0001 	add.w	r0, r0, #1
 800f18c:	bf08      	it	eq
 800f18e:	2020      	moveq	r0, #32
 800f190:	4770      	bx	lr

0800f192 <__lo0bits>:
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	4602      	mov	r2, r0
 800f196:	f013 0007 	ands.w	r0, r3, #7
 800f19a:	d00b      	beq.n	800f1b4 <__lo0bits+0x22>
 800f19c:	07d9      	lsls	r1, r3, #31
 800f19e:	d421      	bmi.n	800f1e4 <__lo0bits+0x52>
 800f1a0:	0798      	lsls	r0, r3, #30
 800f1a2:	bf49      	itett	mi
 800f1a4:	085b      	lsrmi	r3, r3, #1
 800f1a6:	089b      	lsrpl	r3, r3, #2
 800f1a8:	2001      	movmi	r0, #1
 800f1aa:	6013      	strmi	r3, [r2, #0]
 800f1ac:	bf5c      	itt	pl
 800f1ae:	6013      	strpl	r3, [r2, #0]
 800f1b0:	2002      	movpl	r0, #2
 800f1b2:	4770      	bx	lr
 800f1b4:	b299      	uxth	r1, r3
 800f1b6:	b909      	cbnz	r1, 800f1bc <__lo0bits+0x2a>
 800f1b8:	0c1b      	lsrs	r3, r3, #16
 800f1ba:	2010      	movs	r0, #16
 800f1bc:	b2d9      	uxtb	r1, r3
 800f1be:	b909      	cbnz	r1, 800f1c4 <__lo0bits+0x32>
 800f1c0:	3008      	adds	r0, #8
 800f1c2:	0a1b      	lsrs	r3, r3, #8
 800f1c4:	0719      	lsls	r1, r3, #28
 800f1c6:	bf04      	itt	eq
 800f1c8:	091b      	lsreq	r3, r3, #4
 800f1ca:	3004      	addeq	r0, #4
 800f1cc:	0799      	lsls	r1, r3, #30
 800f1ce:	bf04      	itt	eq
 800f1d0:	089b      	lsreq	r3, r3, #2
 800f1d2:	3002      	addeq	r0, #2
 800f1d4:	07d9      	lsls	r1, r3, #31
 800f1d6:	d403      	bmi.n	800f1e0 <__lo0bits+0x4e>
 800f1d8:	085b      	lsrs	r3, r3, #1
 800f1da:	f100 0001 	add.w	r0, r0, #1
 800f1de:	d003      	beq.n	800f1e8 <__lo0bits+0x56>
 800f1e0:	6013      	str	r3, [r2, #0]
 800f1e2:	4770      	bx	lr
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	4770      	bx	lr
 800f1e8:	2020      	movs	r0, #32
 800f1ea:	4770      	bx	lr

0800f1ec <__i2b>:
 800f1ec:	b510      	push	{r4, lr}
 800f1ee:	460c      	mov	r4, r1
 800f1f0:	2101      	movs	r1, #1
 800f1f2:	f7ff ff3b 	bl	800f06c <_Balloc>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	b928      	cbnz	r0, 800f206 <__i2b+0x1a>
 800f1fa:	4b05      	ldr	r3, [pc, #20]	@ (800f210 <__i2b+0x24>)
 800f1fc:	4805      	ldr	r0, [pc, #20]	@ (800f214 <__i2b+0x28>)
 800f1fe:	f240 1145 	movw	r1, #325	@ 0x145
 800f202:	f000 fc99 	bl	800fb38 <__assert_func>
 800f206:	2301      	movs	r3, #1
 800f208:	6144      	str	r4, [r0, #20]
 800f20a:	6103      	str	r3, [r0, #16]
 800f20c:	bd10      	pop	{r4, pc}
 800f20e:	bf00      	nop
 800f210:	0801198b 	.word	0x0801198b
 800f214:	080119f4 	.word	0x080119f4

0800f218 <__multiply>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	4614      	mov	r4, r2
 800f21e:	690a      	ldr	r2, [r1, #16]
 800f220:	6923      	ldr	r3, [r4, #16]
 800f222:	429a      	cmp	r2, r3
 800f224:	bfa8      	it	ge
 800f226:	4623      	movge	r3, r4
 800f228:	460f      	mov	r7, r1
 800f22a:	bfa4      	itt	ge
 800f22c:	460c      	movge	r4, r1
 800f22e:	461f      	movge	r7, r3
 800f230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f238:	68a3      	ldr	r3, [r4, #8]
 800f23a:	6861      	ldr	r1, [r4, #4]
 800f23c:	eb0a 0609 	add.w	r6, sl, r9
 800f240:	42b3      	cmp	r3, r6
 800f242:	b085      	sub	sp, #20
 800f244:	bfb8      	it	lt
 800f246:	3101      	addlt	r1, #1
 800f248:	f7ff ff10 	bl	800f06c <_Balloc>
 800f24c:	b930      	cbnz	r0, 800f25c <__multiply+0x44>
 800f24e:	4602      	mov	r2, r0
 800f250:	4b44      	ldr	r3, [pc, #272]	@ (800f364 <__multiply+0x14c>)
 800f252:	4845      	ldr	r0, [pc, #276]	@ (800f368 <__multiply+0x150>)
 800f254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f258:	f000 fc6e 	bl	800fb38 <__assert_func>
 800f25c:	f100 0514 	add.w	r5, r0, #20
 800f260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f264:	462b      	mov	r3, r5
 800f266:	2200      	movs	r2, #0
 800f268:	4543      	cmp	r3, r8
 800f26a:	d321      	bcc.n	800f2b0 <__multiply+0x98>
 800f26c:	f107 0114 	add.w	r1, r7, #20
 800f270:	f104 0214 	add.w	r2, r4, #20
 800f274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f27c:	9302      	str	r3, [sp, #8]
 800f27e:	1b13      	subs	r3, r2, r4
 800f280:	3b15      	subs	r3, #21
 800f282:	f023 0303 	bic.w	r3, r3, #3
 800f286:	3304      	adds	r3, #4
 800f288:	f104 0715 	add.w	r7, r4, #21
 800f28c:	42ba      	cmp	r2, r7
 800f28e:	bf38      	it	cc
 800f290:	2304      	movcc	r3, #4
 800f292:	9301      	str	r3, [sp, #4]
 800f294:	9b02      	ldr	r3, [sp, #8]
 800f296:	9103      	str	r1, [sp, #12]
 800f298:	428b      	cmp	r3, r1
 800f29a:	d80c      	bhi.n	800f2b6 <__multiply+0x9e>
 800f29c:	2e00      	cmp	r6, #0
 800f29e:	dd03      	ble.n	800f2a8 <__multiply+0x90>
 800f2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d05b      	beq.n	800f360 <__multiply+0x148>
 800f2a8:	6106      	str	r6, [r0, #16]
 800f2aa:	b005      	add	sp, #20
 800f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b0:	f843 2b04 	str.w	r2, [r3], #4
 800f2b4:	e7d8      	b.n	800f268 <__multiply+0x50>
 800f2b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f2ba:	f1ba 0f00 	cmp.w	sl, #0
 800f2be:	d024      	beq.n	800f30a <__multiply+0xf2>
 800f2c0:	f104 0e14 	add.w	lr, r4, #20
 800f2c4:	46a9      	mov	r9, r5
 800f2c6:	f04f 0c00 	mov.w	ip, #0
 800f2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2ce:	f8d9 3000 	ldr.w	r3, [r9]
 800f2d2:	fa1f fb87 	uxth.w	fp, r7
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f2e0:	f8d9 7000 	ldr.w	r7, [r9]
 800f2e4:	4463      	add	r3, ip
 800f2e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800f2ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f2f8:	4572      	cmp	r2, lr
 800f2fa:	f849 3b04 	str.w	r3, [r9], #4
 800f2fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f302:	d8e2      	bhi.n	800f2ca <__multiply+0xb2>
 800f304:	9b01      	ldr	r3, [sp, #4]
 800f306:	f845 c003 	str.w	ip, [r5, r3]
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f310:	3104      	adds	r1, #4
 800f312:	f1b9 0f00 	cmp.w	r9, #0
 800f316:	d021      	beq.n	800f35c <__multiply+0x144>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	f104 0c14 	add.w	ip, r4, #20
 800f31e:	46ae      	mov	lr, r5
 800f320:	f04f 0a00 	mov.w	sl, #0
 800f324:	f8bc b000 	ldrh.w	fp, [ip]
 800f328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f32c:	fb09 770b 	mla	r7, r9, fp, r7
 800f330:	4457      	add	r7, sl
 800f332:	b29b      	uxth	r3, r3
 800f334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f338:	f84e 3b04 	str.w	r3, [lr], #4
 800f33c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f344:	f8be 3000 	ldrh.w	r3, [lr]
 800f348:	fb09 330a 	mla	r3, r9, sl, r3
 800f34c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f350:	4562      	cmp	r2, ip
 800f352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f356:	d8e5      	bhi.n	800f324 <__multiply+0x10c>
 800f358:	9f01      	ldr	r7, [sp, #4]
 800f35a:	51eb      	str	r3, [r5, r7]
 800f35c:	3504      	adds	r5, #4
 800f35e:	e799      	b.n	800f294 <__multiply+0x7c>
 800f360:	3e01      	subs	r6, #1
 800f362:	e79b      	b.n	800f29c <__multiply+0x84>
 800f364:	0801198b 	.word	0x0801198b
 800f368:	080119f4 	.word	0x080119f4

0800f36c <__pow5mult>:
 800f36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f370:	4615      	mov	r5, r2
 800f372:	f012 0203 	ands.w	r2, r2, #3
 800f376:	4607      	mov	r7, r0
 800f378:	460e      	mov	r6, r1
 800f37a:	d007      	beq.n	800f38c <__pow5mult+0x20>
 800f37c:	4c1a      	ldr	r4, [pc, #104]	@ (800f3e8 <__pow5mult+0x7c>)
 800f37e:	3a01      	subs	r2, #1
 800f380:	2300      	movs	r3, #0
 800f382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f386:	f7ff fe9f 	bl	800f0c8 <__multadd>
 800f38a:	4606      	mov	r6, r0
 800f38c:	10ad      	asrs	r5, r5, #2
 800f38e:	d027      	beq.n	800f3e0 <__pow5mult+0x74>
 800f390:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800f392:	b944      	cbnz	r4, 800f3a6 <__pow5mult+0x3a>
 800f394:	f240 2171 	movw	r1, #625	@ 0x271
 800f398:	4638      	mov	r0, r7
 800f39a:	f7ff ff27 	bl	800f1ec <__i2b>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	6438      	str	r0, [r7, #64]	@ 0x40
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	f04f 0900 	mov.w	r9, #0
 800f3aa:	07eb      	lsls	r3, r5, #31
 800f3ac:	d50a      	bpl.n	800f3c4 <__pow5mult+0x58>
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	4622      	mov	r2, r4
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	f7ff ff30 	bl	800f218 <__multiply>
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4680      	mov	r8, r0
 800f3bc:	4638      	mov	r0, r7
 800f3be:	f7ff fe7a 	bl	800f0b6 <_Bfree>
 800f3c2:	4646      	mov	r6, r8
 800f3c4:	106d      	asrs	r5, r5, #1
 800f3c6:	d00b      	beq.n	800f3e0 <__pow5mult+0x74>
 800f3c8:	6820      	ldr	r0, [r4, #0]
 800f3ca:	b938      	cbnz	r0, 800f3dc <__pow5mult+0x70>
 800f3cc:	4622      	mov	r2, r4
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f7ff ff21 	bl	800f218 <__multiply>
 800f3d6:	6020      	str	r0, [r4, #0]
 800f3d8:	f8c0 9000 	str.w	r9, [r0]
 800f3dc:	4604      	mov	r4, r0
 800f3de:	e7e4      	b.n	800f3aa <__pow5mult+0x3e>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e6:	bf00      	nop
 800f3e8:	08011a50 	.word	0x08011a50

0800f3ec <__lshift>:
 800f3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	6849      	ldr	r1, [r1, #4]
 800f3f4:	6923      	ldr	r3, [r4, #16]
 800f3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	4691      	mov	r9, r2
 800f400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f404:	f108 0601 	add.w	r6, r8, #1
 800f408:	42b3      	cmp	r3, r6
 800f40a:	db0b      	blt.n	800f424 <__lshift+0x38>
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff fe2d 	bl	800f06c <_Balloc>
 800f412:	4605      	mov	r5, r0
 800f414:	b948      	cbnz	r0, 800f42a <__lshift+0x3e>
 800f416:	4602      	mov	r2, r0
 800f418:	4b28      	ldr	r3, [pc, #160]	@ (800f4bc <__lshift+0xd0>)
 800f41a:	4829      	ldr	r0, [pc, #164]	@ (800f4c0 <__lshift+0xd4>)
 800f41c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f420:	f000 fb8a 	bl	800fb38 <__assert_func>
 800f424:	3101      	adds	r1, #1
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	e7ee      	b.n	800f408 <__lshift+0x1c>
 800f42a:	2300      	movs	r3, #0
 800f42c:	f100 0114 	add.w	r1, r0, #20
 800f430:	f100 0210 	add.w	r2, r0, #16
 800f434:	4618      	mov	r0, r3
 800f436:	4553      	cmp	r3, sl
 800f438:	db33      	blt.n	800f4a2 <__lshift+0xb6>
 800f43a:	6920      	ldr	r0, [r4, #16]
 800f43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f440:	f104 0314 	add.w	r3, r4, #20
 800f444:	f019 091f 	ands.w	r9, r9, #31
 800f448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f44c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f450:	d02b      	beq.n	800f4aa <__lshift+0xbe>
 800f452:	f1c9 0e20 	rsb	lr, r9, #32
 800f456:	468a      	mov	sl, r1
 800f458:	2200      	movs	r2, #0
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	fa00 f009 	lsl.w	r0, r0, r9
 800f460:	4310      	orrs	r0, r2
 800f462:	f84a 0b04 	str.w	r0, [sl], #4
 800f466:	f853 2b04 	ldr.w	r2, [r3], #4
 800f46a:	459c      	cmp	ip, r3
 800f46c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f470:	d8f3      	bhi.n	800f45a <__lshift+0x6e>
 800f472:	ebac 0304 	sub.w	r3, ip, r4
 800f476:	3b15      	subs	r3, #21
 800f478:	f023 0303 	bic.w	r3, r3, #3
 800f47c:	3304      	adds	r3, #4
 800f47e:	f104 0015 	add.w	r0, r4, #21
 800f482:	4584      	cmp	ip, r0
 800f484:	bf38      	it	cc
 800f486:	2304      	movcc	r3, #4
 800f488:	50ca      	str	r2, [r1, r3]
 800f48a:	b10a      	cbz	r2, 800f490 <__lshift+0xa4>
 800f48c:	f108 0602 	add.w	r6, r8, #2
 800f490:	3e01      	subs	r6, #1
 800f492:	4638      	mov	r0, r7
 800f494:	612e      	str	r6, [r5, #16]
 800f496:	4621      	mov	r1, r4
 800f498:	f7ff fe0d 	bl	800f0b6 <_Bfree>
 800f49c:	4628      	mov	r0, r5
 800f49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	e7c5      	b.n	800f436 <__lshift+0x4a>
 800f4aa:	3904      	subs	r1, #4
 800f4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4b4:	459c      	cmp	ip, r3
 800f4b6:	d8f9      	bhi.n	800f4ac <__lshift+0xc0>
 800f4b8:	e7ea      	b.n	800f490 <__lshift+0xa4>
 800f4ba:	bf00      	nop
 800f4bc:	0801198b 	.word	0x0801198b
 800f4c0:	080119f4 	.word	0x080119f4

0800f4c4 <__mcmp>:
 800f4c4:	690a      	ldr	r2, [r1, #16]
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	6900      	ldr	r0, [r0, #16]
 800f4ca:	1a80      	subs	r0, r0, r2
 800f4cc:	b530      	push	{r4, r5, lr}
 800f4ce:	d10e      	bne.n	800f4ee <__mcmp+0x2a>
 800f4d0:	3314      	adds	r3, #20
 800f4d2:	3114      	adds	r1, #20
 800f4d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f4d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f4dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f4e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f4e4:	4295      	cmp	r5, r2
 800f4e6:	d003      	beq.n	800f4f0 <__mcmp+0x2c>
 800f4e8:	d205      	bcs.n	800f4f6 <__mcmp+0x32>
 800f4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ee:	bd30      	pop	{r4, r5, pc}
 800f4f0:	42a3      	cmp	r3, r4
 800f4f2:	d3f3      	bcc.n	800f4dc <__mcmp+0x18>
 800f4f4:	e7fb      	b.n	800f4ee <__mcmp+0x2a>
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	e7f9      	b.n	800f4ee <__mcmp+0x2a>
	...

0800f4fc <__mdiff>:
 800f4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f500:	4689      	mov	r9, r1
 800f502:	4606      	mov	r6, r0
 800f504:	4611      	mov	r1, r2
 800f506:	4648      	mov	r0, r9
 800f508:	4614      	mov	r4, r2
 800f50a:	f7ff ffdb 	bl	800f4c4 <__mcmp>
 800f50e:	1e05      	subs	r5, r0, #0
 800f510:	d112      	bne.n	800f538 <__mdiff+0x3c>
 800f512:	4629      	mov	r1, r5
 800f514:	4630      	mov	r0, r6
 800f516:	f7ff fda9 	bl	800f06c <_Balloc>
 800f51a:	4602      	mov	r2, r0
 800f51c:	b928      	cbnz	r0, 800f52a <__mdiff+0x2e>
 800f51e:	4b3f      	ldr	r3, [pc, #252]	@ (800f61c <__mdiff+0x120>)
 800f520:	f240 2137 	movw	r1, #567	@ 0x237
 800f524:	483e      	ldr	r0, [pc, #248]	@ (800f620 <__mdiff+0x124>)
 800f526:	f000 fb07 	bl	800fb38 <__assert_func>
 800f52a:	2301      	movs	r3, #1
 800f52c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f530:	4610      	mov	r0, r2
 800f532:	b003      	add	sp, #12
 800f534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f538:	bfbc      	itt	lt
 800f53a:	464b      	movlt	r3, r9
 800f53c:	46a1      	movlt	r9, r4
 800f53e:	4630      	mov	r0, r6
 800f540:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f544:	bfba      	itte	lt
 800f546:	461c      	movlt	r4, r3
 800f548:	2501      	movlt	r5, #1
 800f54a:	2500      	movge	r5, #0
 800f54c:	f7ff fd8e 	bl	800f06c <_Balloc>
 800f550:	4602      	mov	r2, r0
 800f552:	b918      	cbnz	r0, 800f55c <__mdiff+0x60>
 800f554:	4b31      	ldr	r3, [pc, #196]	@ (800f61c <__mdiff+0x120>)
 800f556:	f240 2145 	movw	r1, #581	@ 0x245
 800f55a:	e7e3      	b.n	800f524 <__mdiff+0x28>
 800f55c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f560:	6926      	ldr	r6, [r4, #16]
 800f562:	60c5      	str	r5, [r0, #12]
 800f564:	f109 0310 	add.w	r3, r9, #16
 800f568:	f109 0514 	add.w	r5, r9, #20
 800f56c:	f104 0e14 	add.w	lr, r4, #20
 800f570:	f100 0b14 	add.w	fp, r0, #20
 800f574:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f578:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	46d9      	mov	r9, fp
 800f580:	f04f 0c00 	mov.w	ip, #0
 800f584:	9b01      	ldr	r3, [sp, #4]
 800f586:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f58a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	fa1f f38a 	uxth.w	r3, sl
 800f594:	4619      	mov	r1, r3
 800f596:	b283      	uxth	r3, r0
 800f598:	1acb      	subs	r3, r1, r3
 800f59a:	0c00      	lsrs	r0, r0, #16
 800f59c:	4463      	add	r3, ip
 800f59e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5ac:	4576      	cmp	r6, lr
 800f5ae:	f849 3b04 	str.w	r3, [r9], #4
 800f5b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5b6:	d8e5      	bhi.n	800f584 <__mdiff+0x88>
 800f5b8:	1b33      	subs	r3, r6, r4
 800f5ba:	3b15      	subs	r3, #21
 800f5bc:	f023 0303 	bic.w	r3, r3, #3
 800f5c0:	3415      	adds	r4, #21
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	42a6      	cmp	r6, r4
 800f5c6:	bf38      	it	cc
 800f5c8:	2304      	movcc	r3, #4
 800f5ca:	441d      	add	r5, r3
 800f5cc:	445b      	add	r3, fp
 800f5ce:	461e      	mov	r6, r3
 800f5d0:	462c      	mov	r4, r5
 800f5d2:	4544      	cmp	r4, r8
 800f5d4:	d30e      	bcc.n	800f5f4 <__mdiff+0xf8>
 800f5d6:	f108 0103 	add.w	r1, r8, #3
 800f5da:	1b49      	subs	r1, r1, r5
 800f5dc:	f021 0103 	bic.w	r1, r1, #3
 800f5e0:	3d03      	subs	r5, #3
 800f5e2:	45a8      	cmp	r8, r5
 800f5e4:	bf38      	it	cc
 800f5e6:	2100      	movcc	r1, #0
 800f5e8:	440b      	add	r3, r1
 800f5ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f5ee:	b191      	cbz	r1, 800f616 <__mdiff+0x11a>
 800f5f0:	6117      	str	r7, [r2, #16]
 800f5f2:	e79d      	b.n	800f530 <__mdiff+0x34>
 800f5f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f5f8:	46e6      	mov	lr, ip
 800f5fa:	0c08      	lsrs	r0, r1, #16
 800f5fc:	fa1c fc81 	uxtah	ip, ip, r1
 800f600:	4471      	add	r1, lr
 800f602:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f606:	b289      	uxth	r1, r1
 800f608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f60c:	f846 1b04 	str.w	r1, [r6], #4
 800f610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f614:	e7dd      	b.n	800f5d2 <__mdiff+0xd6>
 800f616:	3f01      	subs	r7, #1
 800f618:	e7e7      	b.n	800f5ea <__mdiff+0xee>
 800f61a:	bf00      	nop
 800f61c:	0801198b 	.word	0x0801198b
 800f620:	080119f4 	.word	0x080119f4

0800f624 <__d2b>:
 800f624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f628:	460f      	mov	r7, r1
 800f62a:	2101      	movs	r1, #1
 800f62c:	ec59 8b10 	vmov	r8, r9, d0
 800f630:	4616      	mov	r6, r2
 800f632:	f7ff fd1b 	bl	800f06c <_Balloc>
 800f636:	4604      	mov	r4, r0
 800f638:	b930      	cbnz	r0, 800f648 <__d2b+0x24>
 800f63a:	4602      	mov	r2, r0
 800f63c:	4b23      	ldr	r3, [pc, #140]	@ (800f6cc <__d2b+0xa8>)
 800f63e:	4824      	ldr	r0, [pc, #144]	@ (800f6d0 <__d2b+0xac>)
 800f640:	f240 310f 	movw	r1, #783	@ 0x30f
 800f644:	f000 fa78 	bl	800fb38 <__assert_func>
 800f648:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f64c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f650:	b10d      	cbz	r5, 800f656 <__d2b+0x32>
 800f652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f656:	9301      	str	r3, [sp, #4]
 800f658:	f1b8 0300 	subs.w	r3, r8, #0
 800f65c:	d023      	beq.n	800f6a6 <__d2b+0x82>
 800f65e:	4668      	mov	r0, sp
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	f7ff fd96 	bl	800f192 <__lo0bits>
 800f666:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f66a:	b1d0      	cbz	r0, 800f6a2 <__d2b+0x7e>
 800f66c:	f1c0 0320 	rsb	r3, r0, #32
 800f670:	fa02 f303 	lsl.w	r3, r2, r3
 800f674:	430b      	orrs	r3, r1
 800f676:	40c2      	lsrs	r2, r0
 800f678:	6163      	str	r3, [r4, #20]
 800f67a:	9201      	str	r2, [sp, #4]
 800f67c:	9b01      	ldr	r3, [sp, #4]
 800f67e:	61a3      	str	r3, [r4, #24]
 800f680:	2b00      	cmp	r3, #0
 800f682:	bf0c      	ite	eq
 800f684:	2201      	moveq	r2, #1
 800f686:	2202      	movne	r2, #2
 800f688:	6122      	str	r2, [r4, #16]
 800f68a:	b1a5      	cbz	r5, 800f6b6 <__d2b+0x92>
 800f68c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f690:	4405      	add	r5, r0
 800f692:	603d      	str	r5, [r7, #0]
 800f694:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f698:	6030      	str	r0, [r6, #0]
 800f69a:	4620      	mov	r0, r4
 800f69c:	b003      	add	sp, #12
 800f69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a2:	6161      	str	r1, [r4, #20]
 800f6a4:	e7ea      	b.n	800f67c <__d2b+0x58>
 800f6a6:	a801      	add	r0, sp, #4
 800f6a8:	f7ff fd73 	bl	800f192 <__lo0bits>
 800f6ac:	9b01      	ldr	r3, [sp, #4]
 800f6ae:	6163      	str	r3, [r4, #20]
 800f6b0:	3020      	adds	r0, #32
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	e7e8      	b.n	800f688 <__d2b+0x64>
 800f6b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f6be:	6038      	str	r0, [r7, #0]
 800f6c0:	6918      	ldr	r0, [r3, #16]
 800f6c2:	f7ff fd47 	bl	800f154 <__hi0bits>
 800f6c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f6ca:	e7e5      	b.n	800f698 <__d2b+0x74>
 800f6cc:	0801198b 	.word	0x0801198b
 800f6d0:	080119f4 	.word	0x080119f4

0800f6d4 <_realloc_r>:
 800f6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	4682      	mov	sl, r0
 800f6da:	4693      	mov	fp, r2
 800f6dc:	460c      	mov	r4, r1
 800f6de:	b929      	cbnz	r1, 800f6ec <_realloc_r+0x18>
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	b003      	add	sp, #12
 800f6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	f7fc ba6c 	b.w	800bbc4 <_malloc_r>
 800f6ec:	f7fc fca4 	bl	800c038 <__malloc_lock>
 800f6f0:	f10b 080b 	add.w	r8, fp, #11
 800f6f4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800f6f8:	f1b8 0f16 	cmp.w	r8, #22
 800f6fc:	f1a4 0908 	sub.w	r9, r4, #8
 800f700:	f025 0603 	bic.w	r6, r5, #3
 800f704:	d908      	bls.n	800f718 <_realloc_r+0x44>
 800f706:	f038 0807 	bics.w	r8, r8, #7
 800f70a:	d507      	bpl.n	800f71c <_realloc_r+0x48>
 800f70c:	230c      	movs	r3, #12
 800f70e:	f8ca 3000 	str.w	r3, [sl]
 800f712:	f04f 0b00 	mov.w	fp, #0
 800f716:	e032      	b.n	800f77e <_realloc_r+0xaa>
 800f718:	f04f 0810 	mov.w	r8, #16
 800f71c:	45c3      	cmp	fp, r8
 800f71e:	d8f5      	bhi.n	800f70c <_realloc_r+0x38>
 800f720:	4546      	cmp	r6, r8
 800f722:	f280 8174 	bge.w	800fa0e <_realloc_r+0x33a>
 800f726:	4b9e      	ldr	r3, [pc, #632]	@ (800f9a0 <_realloc_r+0x2cc>)
 800f728:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800f72c:	eb09 0106 	add.w	r1, r9, r6
 800f730:	458c      	cmp	ip, r1
 800f732:	6848      	ldr	r0, [r1, #4]
 800f734:	d005      	beq.n	800f742 <_realloc_r+0x6e>
 800f736:	f020 0201 	bic.w	r2, r0, #1
 800f73a:	440a      	add	r2, r1
 800f73c:	6852      	ldr	r2, [r2, #4]
 800f73e:	07d7      	lsls	r7, r2, #31
 800f740:	d449      	bmi.n	800f7d6 <_realloc_r+0x102>
 800f742:	f020 0003 	bic.w	r0, r0, #3
 800f746:	458c      	cmp	ip, r1
 800f748:	eb06 0700 	add.w	r7, r6, r0
 800f74c:	d11b      	bne.n	800f786 <_realloc_r+0xb2>
 800f74e:	f108 0210 	add.w	r2, r8, #16
 800f752:	42ba      	cmp	r2, r7
 800f754:	dc41      	bgt.n	800f7da <_realloc_r+0x106>
 800f756:	eb09 0208 	add.w	r2, r9, r8
 800f75a:	eba7 0708 	sub.w	r7, r7, r8
 800f75e:	f047 0701 	orr.w	r7, r7, #1
 800f762:	609a      	str	r2, [r3, #8]
 800f764:	6057      	str	r7, [r2, #4]
 800f766:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	ea43 0308 	orr.w	r3, r3, r8
 800f772:	f844 3c04 	str.w	r3, [r4, #-4]
 800f776:	4650      	mov	r0, sl
 800f778:	f7fc fc64 	bl	800c044 <__malloc_unlock>
 800f77c:	46a3      	mov	fp, r4
 800f77e:	4658      	mov	r0, fp
 800f780:	b003      	add	sp, #12
 800f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f786:	45b8      	cmp	r8, r7
 800f788:	dc27      	bgt.n	800f7da <_realloc_r+0x106>
 800f78a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800f78e:	60d3      	str	r3, [r2, #12]
 800f790:	609a      	str	r2, [r3, #8]
 800f792:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f796:	eba7 0008 	sub.w	r0, r7, r8
 800f79a:	280f      	cmp	r0, #15
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	eb09 0207 	add.w	r2, r9, r7
 800f7a4:	f240 8135 	bls.w	800fa12 <_realloc_r+0x33e>
 800f7a8:	eb09 0108 	add.w	r1, r9, r8
 800f7ac:	ea48 0303 	orr.w	r3, r8, r3
 800f7b0:	f040 0001 	orr.w	r0, r0, #1
 800f7b4:	f8c9 3004 	str.w	r3, [r9, #4]
 800f7b8:	6048      	str	r0, [r1, #4]
 800f7ba:	6853      	ldr	r3, [r2, #4]
 800f7bc:	f043 0301 	orr.w	r3, r3, #1
 800f7c0:	6053      	str	r3, [r2, #4]
 800f7c2:	3108      	adds	r1, #8
 800f7c4:	4650      	mov	r0, sl
 800f7c6:	f7fc ff6f 	bl	800c6a8 <_free_r>
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	f7fc fc3a 	bl	800c044 <__malloc_unlock>
 800f7d0:	f109 0b08 	add.w	fp, r9, #8
 800f7d4:	e7d3      	b.n	800f77e <_realloc_r+0xaa>
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	4601      	mov	r1, r0
 800f7da:	07ea      	lsls	r2, r5, #31
 800f7dc:	f100 80c7 	bmi.w	800f96e <_realloc_r+0x29a>
 800f7e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800f7e4:	eba9 0505 	sub.w	r5, r9, r5
 800f7e8:	686a      	ldr	r2, [r5, #4]
 800f7ea:	f022 0203 	bic.w	r2, r2, #3
 800f7ee:	4432      	add	r2, r6
 800f7f0:	9201      	str	r2, [sp, #4]
 800f7f2:	2900      	cmp	r1, #0
 800f7f4:	f000 8086 	beq.w	800f904 <_realloc_r+0x230>
 800f7f8:	458c      	cmp	ip, r1
 800f7fa:	eb00 0702 	add.w	r7, r0, r2
 800f7fe:	d149      	bne.n	800f894 <_realloc_r+0x1c0>
 800f800:	f108 0210 	add.w	r2, r8, #16
 800f804:	42ba      	cmp	r2, r7
 800f806:	dc7d      	bgt.n	800f904 <_realloc_r+0x230>
 800f808:	46ab      	mov	fp, r5
 800f80a:	68ea      	ldr	r2, [r5, #12]
 800f80c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800f810:	60ca      	str	r2, [r1, #12]
 800f812:	6091      	str	r1, [r2, #8]
 800f814:	1f32      	subs	r2, r6, #4
 800f816:	2a24      	cmp	r2, #36	@ 0x24
 800f818:	d836      	bhi.n	800f888 <_realloc_r+0x1b4>
 800f81a:	2a13      	cmp	r2, #19
 800f81c:	d932      	bls.n	800f884 <_realloc_r+0x1b0>
 800f81e:	6821      	ldr	r1, [r4, #0]
 800f820:	60a9      	str	r1, [r5, #8]
 800f822:	6861      	ldr	r1, [r4, #4]
 800f824:	60e9      	str	r1, [r5, #12]
 800f826:	2a1b      	cmp	r2, #27
 800f828:	d81a      	bhi.n	800f860 <_realloc_r+0x18c>
 800f82a:	3408      	adds	r4, #8
 800f82c:	f105 0210 	add.w	r2, r5, #16
 800f830:	6821      	ldr	r1, [r4, #0]
 800f832:	6011      	str	r1, [r2, #0]
 800f834:	6861      	ldr	r1, [r4, #4]
 800f836:	6051      	str	r1, [r2, #4]
 800f838:	68a1      	ldr	r1, [r4, #8]
 800f83a:	6091      	str	r1, [r2, #8]
 800f83c:	eb05 0208 	add.w	r2, r5, r8
 800f840:	eba7 0708 	sub.w	r7, r7, r8
 800f844:	f047 0701 	orr.w	r7, r7, #1
 800f848:	609a      	str	r2, [r3, #8]
 800f84a:	6057      	str	r7, [r2, #4]
 800f84c:	686b      	ldr	r3, [r5, #4]
 800f84e:	f003 0301 	and.w	r3, r3, #1
 800f852:	ea43 0308 	orr.w	r3, r3, r8
 800f856:	606b      	str	r3, [r5, #4]
 800f858:	4650      	mov	r0, sl
 800f85a:	f7fc fbf3 	bl	800c044 <__malloc_unlock>
 800f85e:	e78e      	b.n	800f77e <_realloc_r+0xaa>
 800f860:	68a1      	ldr	r1, [r4, #8]
 800f862:	6129      	str	r1, [r5, #16]
 800f864:	68e1      	ldr	r1, [r4, #12]
 800f866:	6169      	str	r1, [r5, #20]
 800f868:	2a24      	cmp	r2, #36	@ 0x24
 800f86a:	bf01      	itttt	eq
 800f86c:	6922      	ldreq	r2, [r4, #16]
 800f86e:	61aa      	streq	r2, [r5, #24]
 800f870:	6961      	ldreq	r1, [r4, #20]
 800f872:	61e9      	streq	r1, [r5, #28]
 800f874:	bf19      	ittee	ne
 800f876:	3410      	addne	r4, #16
 800f878:	f105 0218 	addne.w	r2, r5, #24
 800f87c:	f105 0220 	addeq.w	r2, r5, #32
 800f880:	3418      	addeq	r4, #24
 800f882:	e7d5      	b.n	800f830 <_realloc_r+0x15c>
 800f884:	465a      	mov	r2, fp
 800f886:	e7d3      	b.n	800f830 <_realloc_r+0x15c>
 800f888:	4621      	mov	r1, r4
 800f88a:	4658      	mov	r0, fp
 800f88c:	f7fe fcb4 	bl	800e1f8 <memmove>
 800f890:	4b43      	ldr	r3, [pc, #268]	@ (800f9a0 <_realloc_r+0x2cc>)
 800f892:	e7d3      	b.n	800f83c <_realloc_r+0x168>
 800f894:	45b8      	cmp	r8, r7
 800f896:	dc35      	bgt.n	800f904 <_realloc_r+0x230>
 800f898:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800f89c:	4628      	mov	r0, r5
 800f89e:	60d3      	str	r3, [r2, #12]
 800f8a0:	609a      	str	r2, [r3, #8]
 800f8a2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800f8a6:	68eb      	ldr	r3, [r5, #12]
 800f8a8:	60d3      	str	r3, [r2, #12]
 800f8aa:	609a      	str	r2, [r3, #8]
 800f8ac:	1f32      	subs	r2, r6, #4
 800f8ae:	2a24      	cmp	r2, #36	@ 0x24
 800f8b0:	d824      	bhi.n	800f8fc <_realloc_r+0x228>
 800f8b2:	2a13      	cmp	r2, #19
 800f8b4:	d908      	bls.n	800f8c8 <_realloc_r+0x1f4>
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	60ab      	str	r3, [r5, #8]
 800f8ba:	6863      	ldr	r3, [r4, #4]
 800f8bc:	60eb      	str	r3, [r5, #12]
 800f8be:	2a1b      	cmp	r2, #27
 800f8c0:	d80a      	bhi.n	800f8d8 <_realloc_r+0x204>
 800f8c2:	3408      	adds	r4, #8
 800f8c4:	f105 0010 	add.w	r0, r5, #16
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	6003      	str	r3, [r0, #0]
 800f8cc:	6863      	ldr	r3, [r4, #4]
 800f8ce:	6043      	str	r3, [r0, #4]
 800f8d0:	68a3      	ldr	r3, [r4, #8]
 800f8d2:	6083      	str	r3, [r0, #8]
 800f8d4:	46a9      	mov	r9, r5
 800f8d6:	e75c      	b.n	800f792 <_realloc_r+0xbe>
 800f8d8:	68a3      	ldr	r3, [r4, #8]
 800f8da:	612b      	str	r3, [r5, #16]
 800f8dc:	68e3      	ldr	r3, [r4, #12]
 800f8de:	616b      	str	r3, [r5, #20]
 800f8e0:	2a24      	cmp	r2, #36	@ 0x24
 800f8e2:	bf01      	itttt	eq
 800f8e4:	6923      	ldreq	r3, [r4, #16]
 800f8e6:	61ab      	streq	r3, [r5, #24]
 800f8e8:	6963      	ldreq	r3, [r4, #20]
 800f8ea:	61eb      	streq	r3, [r5, #28]
 800f8ec:	bf19      	ittee	ne
 800f8ee:	3410      	addne	r4, #16
 800f8f0:	f105 0018 	addne.w	r0, r5, #24
 800f8f4:	f105 0020 	addeq.w	r0, r5, #32
 800f8f8:	3418      	addeq	r4, #24
 800f8fa:	e7e5      	b.n	800f8c8 <_realloc_r+0x1f4>
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	f7fe fc7b 	bl	800e1f8 <memmove>
 800f902:	e7e7      	b.n	800f8d4 <_realloc_r+0x200>
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	4598      	cmp	r8, r3
 800f908:	dc31      	bgt.n	800f96e <_realloc_r+0x29a>
 800f90a:	4628      	mov	r0, r5
 800f90c:	68eb      	ldr	r3, [r5, #12]
 800f90e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800f912:	60d3      	str	r3, [r2, #12]
 800f914:	609a      	str	r2, [r3, #8]
 800f916:	1f32      	subs	r2, r6, #4
 800f918:	2a24      	cmp	r2, #36	@ 0x24
 800f91a:	d824      	bhi.n	800f966 <_realloc_r+0x292>
 800f91c:	2a13      	cmp	r2, #19
 800f91e:	d908      	bls.n	800f932 <_realloc_r+0x25e>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	60ab      	str	r3, [r5, #8]
 800f924:	6863      	ldr	r3, [r4, #4]
 800f926:	60eb      	str	r3, [r5, #12]
 800f928:	2a1b      	cmp	r2, #27
 800f92a:	d80a      	bhi.n	800f942 <_realloc_r+0x26e>
 800f92c:	3408      	adds	r4, #8
 800f92e:	f105 0010 	add.w	r0, r5, #16
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	6003      	str	r3, [r0, #0]
 800f936:	6863      	ldr	r3, [r4, #4]
 800f938:	6043      	str	r3, [r0, #4]
 800f93a:	68a3      	ldr	r3, [r4, #8]
 800f93c:	6083      	str	r3, [r0, #8]
 800f93e:	9f01      	ldr	r7, [sp, #4]
 800f940:	e7c8      	b.n	800f8d4 <_realloc_r+0x200>
 800f942:	68a3      	ldr	r3, [r4, #8]
 800f944:	612b      	str	r3, [r5, #16]
 800f946:	68e3      	ldr	r3, [r4, #12]
 800f948:	616b      	str	r3, [r5, #20]
 800f94a:	2a24      	cmp	r2, #36	@ 0x24
 800f94c:	bf01      	itttt	eq
 800f94e:	6923      	ldreq	r3, [r4, #16]
 800f950:	61ab      	streq	r3, [r5, #24]
 800f952:	6963      	ldreq	r3, [r4, #20]
 800f954:	61eb      	streq	r3, [r5, #28]
 800f956:	bf19      	ittee	ne
 800f958:	3410      	addne	r4, #16
 800f95a:	f105 0018 	addne.w	r0, r5, #24
 800f95e:	f105 0020 	addeq.w	r0, r5, #32
 800f962:	3418      	addeq	r4, #24
 800f964:	e7e5      	b.n	800f932 <_realloc_r+0x25e>
 800f966:	4621      	mov	r1, r4
 800f968:	f7fe fc46 	bl	800e1f8 <memmove>
 800f96c:	e7e7      	b.n	800f93e <_realloc_r+0x26a>
 800f96e:	4659      	mov	r1, fp
 800f970:	4650      	mov	r0, sl
 800f972:	f7fc f927 	bl	800bbc4 <_malloc_r>
 800f976:	4683      	mov	fp, r0
 800f978:	b918      	cbnz	r0, 800f982 <_realloc_r+0x2ae>
 800f97a:	4650      	mov	r0, sl
 800f97c:	f7fc fb62 	bl	800c044 <__malloc_unlock>
 800f980:	e6c7      	b.n	800f712 <_realloc_r+0x3e>
 800f982:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f986:	f023 0301 	bic.w	r3, r3, #1
 800f98a:	444b      	add	r3, r9
 800f98c:	f1a0 0208 	sub.w	r2, r0, #8
 800f990:	4293      	cmp	r3, r2
 800f992:	d107      	bne.n	800f9a4 <_realloc_r+0x2d0>
 800f994:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800f998:	f027 0703 	bic.w	r7, r7, #3
 800f99c:	4437      	add	r7, r6
 800f99e:	e6f8      	b.n	800f792 <_realloc_r+0xbe>
 800f9a0:	2000001c 	.word	0x2000001c
 800f9a4:	1f32      	subs	r2, r6, #4
 800f9a6:	2a24      	cmp	r2, #36	@ 0x24
 800f9a8:	d82d      	bhi.n	800fa06 <_realloc_r+0x332>
 800f9aa:	2a13      	cmp	r2, #19
 800f9ac:	d928      	bls.n	800fa00 <_realloc_r+0x32c>
 800f9ae:	6823      	ldr	r3, [r4, #0]
 800f9b0:	6003      	str	r3, [r0, #0]
 800f9b2:	6863      	ldr	r3, [r4, #4]
 800f9b4:	6043      	str	r3, [r0, #4]
 800f9b6:	2a1b      	cmp	r2, #27
 800f9b8:	d80e      	bhi.n	800f9d8 <_realloc_r+0x304>
 800f9ba:	f104 0208 	add.w	r2, r4, #8
 800f9be:	f100 0308 	add.w	r3, r0, #8
 800f9c2:	6811      	ldr	r1, [r2, #0]
 800f9c4:	6019      	str	r1, [r3, #0]
 800f9c6:	6851      	ldr	r1, [r2, #4]
 800f9c8:	6059      	str	r1, [r3, #4]
 800f9ca:	6892      	ldr	r2, [r2, #8]
 800f9cc:	609a      	str	r2, [r3, #8]
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4650      	mov	r0, sl
 800f9d2:	f7fc fe69 	bl	800c6a8 <_free_r>
 800f9d6:	e73f      	b.n	800f858 <_realloc_r+0x184>
 800f9d8:	68a3      	ldr	r3, [r4, #8]
 800f9da:	6083      	str	r3, [r0, #8]
 800f9dc:	68e3      	ldr	r3, [r4, #12]
 800f9de:	60c3      	str	r3, [r0, #12]
 800f9e0:	2a24      	cmp	r2, #36	@ 0x24
 800f9e2:	bf01      	itttt	eq
 800f9e4:	6923      	ldreq	r3, [r4, #16]
 800f9e6:	6103      	streq	r3, [r0, #16]
 800f9e8:	6961      	ldreq	r1, [r4, #20]
 800f9ea:	6141      	streq	r1, [r0, #20]
 800f9ec:	bf19      	ittee	ne
 800f9ee:	f104 0210 	addne.w	r2, r4, #16
 800f9f2:	f100 0310 	addne.w	r3, r0, #16
 800f9f6:	f104 0218 	addeq.w	r2, r4, #24
 800f9fa:	f100 0318 	addeq.w	r3, r0, #24
 800f9fe:	e7e0      	b.n	800f9c2 <_realloc_r+0x2ee>
 800fa00:	4603      	mov	r3, r0
 800fa02:	4622      	mov	r2, r4
 800fa04:	e7dd      	b.n	800f9c2 <_realloc_r+0x2ee>
 800fa06:	4621      	mov	r1, r4
 800fa08:	f7fe fbf6 	bl	800e1f8 <memmove>
 800fa0c:	e7df      	b.n	800f9ce <_realloc_r+0x2fa>
 800fa0e:	4637      	mov	r7, r6
 800fa10:	e6bf      	b.n	800f792 <_realloc_r+0xbe>
 800fa12:	431f      	orrs	r7, r3
 800fa14:	f8c9 7004 	str.w	r7, [r9, #4]
 800fa18:	6853      	ldr	r3, [r2, #4]
 800fa1a:	f043 0301 	orr.w	r3, r3, #1
 800fa1e:	6053      	str	r3, [r2, #4]
 800fa20:	e6d3      	b.n	800f7ca <_realloc_r+0xf6>
 800fa22:	bf00      	nop

0800fa24 <__ascii_wctomb>:
 800fa24:	4603      	mov	r3, r0
 800fa26:	4608      	mov	r0, r1
 800fa28:	b141      	cbz	r1, 800fa3c <__ascii_wctomb+0x18>
 800fa2a:	2aff      	cmp	r2, #255	@ 0xff
 800fa2c:	d904      	bls.n	800fa38 <__ascii_wctomb+0x14>
 800fa2e:	228a      	movs	r2, #138	@ 0x8a
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	f04f 30ff 	mov.w	r0, #4294967295
 800fa36:	4770      	bx	lr
 800fa38:	700a      	strb	r2, [r1, #0]
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	4770      	bx	lr

0800fa3e <__ssprint_r>:
 800fa3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa42:	6893      	ldr	r3, [r2, #8]
 800fa44:	f8d2 b000 	ldr.w	fp, [r2]
 800fa48:	9001      	str	r0, [sp, #4]
 800fa4a:	460c      	mov	r4, r1
 800fa4c:	4617      	mov	r7, r2
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d157      	bne.n	800fb02 <__ssprint_r+0xc4>
 800fa52:	2000      	movs	r0, #0
 800fa54:	2300      	movs	r3, #0
 800fa56:	607b      	str	r3, [r7, #4]
 800fa58:	b003      	add	sp, #12
 800fa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5e:	e9db a800 	ldrd	sl, r8, [fp]
 800fa62:	f10b 0b08 	add.w	fp, fp, #8
 800fa66:	68a6      	ldr	r6, [r4, #8]
 800fa68:	6820      	ldr	r0, [r4, #0]
 800fa6a:	f1b8 0f00 	cmp.w	r8, #0
 800fa6e:	d0f6      	beq.n	800fa5e <__ssprint_r+0x20>
 800fa70:	45b0      	cmp	r8, r6
 800fa72:	d32e      	bcc.n	800fad2 <__ssprint_r+0x94>
 800fa74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fa7c:	d029      	beq.n	800fad2 <__ssprint_r+0x94>
 800fa7e:	6921      	ldr	r1, [r4, #16]
 800fa80:	6965      	ldr	r5, [r4, #20]
 800fa82:	eba0 0901 	sub.w	r9, r0, r1
 800fa86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa8e:	f109 0001 	add.w	r0, r9, #1
 800fa92:	106d      	asrs	r5, r5, #1
 800fa94:	4440      	add	r0, r8
 800fa96:	4285      	cmp	r5, r0
 800fa98:	bf38      	it	cc
 800fa9a:	4605      	movcc	r5, r0
 800fa9c:	0553      	lsls	r3, r2, #21
 800fa9e:	d534      	bpl.n	800fb0a <__ssprint_r+0xcc>
 800faa0:	9801      	ldr	r0, [sp, #4]
 800faa2:	4629      	mov	r1, r5
 800faa4:	f7fc f88e 	bl	800bbc4 <_malloc_r>
 800faa8:	4606      	mov	r6, r0
 800faaa:	2800      	cmp	r0, #0
 800faac:	d038      	beq.n	800fb20 <__ssprint_r+0xe2>
 800faae:	464a      	mov	r2, r9
 800fab0:	6921      	ldr	r1, [r4, #16]
 800fab2:	f7fe fc0f 	bl	800e2d4 <memcpy>
 800fab6:	89a2      	ldrh	r2, [r4, #12]
 800fab8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800fabc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800fac0:	81a2      	strh	r2, [r4, #12]
 800fac2:	6126      	str	r6, [r4, #16]
 800fac4:	6165      	str	r5, [r4, #20]
 800fac6:	444e      	add	r6, r9
 800fac8:	eba5 0509 	sub.w	r5, r5, r9
 800facc:	6026      	str	r6, [r4, #0]
 800face:	60a5      	str	r5, [r4, #8]
 800fad0:	4646      	mov	r6, r8
 800fad2:	4546      	cmp	r6, r8
 800fad4:	bf28      	it	cs
 800fad6:	4646      	movcs	r6, r8
 800fad8:	4632      	mov	r2, r6
 800fada:	4651      	mov	r1, sl
 800fadc:	6820      	ldr	r0, [r4, #0]
 800fade:	f7fe fb8b 	bl	800e1f8 <memmove>
 800fae2:	68a2      	ldr	r2, [r4, #8]
 800fae4:	1b92      	subs	r2, r2, r6
 800fae6:	60a2      	str	r2, [r4, #8]
 800fae8:	6822      	ldr	r2, [r4, #0]
 800faea:	4432      	add	r2, r6
 800faec:	6022      	str	r2, [r4, #0]
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	eba2 0308 	sub.w	r3, r2, r8
 800faf4:	44c2      	add	sl, r8
 800faf6:	60bb      	str	r3, [r7, #8]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d0aa      	beq.n	800fa52 <__ssprint_r+0x14>
 800fafc:	f04f 0800 	mov.w	r8, #0
 800fb00:	e7b1      	b.n	800fa66 <__ssprint_r+0x28>
 800fb02:	f04f 0a00 	mov.w	sl, #0
 800fb06:	46d0      	mov	r8, sl
 800fb08:	e7ad      	b.n	800fa66 <__ssprint_r+0x28>
 800fb0a:	9801      	ldr	r0, [sp, #4]
 800fb0c:	462a      	mov	r2, r5
 800fb0e:	f7ff fde1 	bl	800f6d4 <_realloc_r>
 800fb12:	4606      	mov	r6, r0
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d1d4      	bne.n	800fac2 <__ssprint_r+0x84>
 800fb18:	6921      	ldr	r1, [r4, #16]
 800fb1a:	9801      	ldr	r0, [sp, #4]
 800fb1c:	f7fc fdc4 	bl	800c6a8 <_free_r>
 800fb20:	9a01      	ldr	r2, [sp, #4]
 800fb22:	230c      	movs	r3, #12
 800fb24:	6013      	str	r3, [r2, #0]
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60bb      	str	r3, [r7, #8]
 800fb32:	f04f 30ff 	mov.w	r0, #4294967295
 800fb36:	e78d      	b.n	800fa54 <__ssprint_r+0x16>

0800fb38 <__assert_func>:
 800fb38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb3a:	4614      	mov	r4, r2
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	4b09      	ldr	r3, [pc, #36]	@ (800fb64 <__assert_func+0x2c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4605      	mov	r5, r0
 800fb44:	68d8      	ldr	r0, [r3, #12]
 800fb46:	b954      	cbnz	r4, 800fb5e <__assert_func+0x26>
 800fb48:	4b07      	ldr	r3, [pc, #28]	@ (800fb68 <__assert_func+0x30>)
 800fb4a:	461c      	mov	r4, r3
 800fb4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb50:	9100      	str	r1, [sp, #0]
 800fb52:	462b      	mov	r3, r5
 800fb54:	4905      	ldr	r1, [pc, #20]	@ (800fb6c <__assert_func+0x34>)
 800fb56:	f000 f843 	bl	800fbe0 <fiprintf>
 800fb5a:	f000 fdb7 	bl	80106cc <abort>
 800fb5e:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <__assert_func+0x38>)
 800fb60:	e7f4      	b.n	800fb4c <__assert_func+0x14>
 800fb62:	bf00      	nop
 800fb64:	20000430 	.word	0x20000430
 800fb68:	08011c8c 	.word	0x08011c8c
 800fb6c:	08011c5e 	.word	0x08011c5e
 800fb70:	08011c51 	.word	0x08011c51

0800fb74 <_calloc_r>:
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	fba1 1502 	umull	r1, r5, r1, r2
 800fb7a:	b935      	cbnz	r5, 800fb8a <_calloc_r+0x16>
 800fb7c:	f7fc f822 	bl	800bbc4 <_malloc_r>
 800fb80:	4604      	mov	r4, r0
 800fb82:	b938      	cbnz	r0, 800fb94 <_calloc_r+0x20>
 800fb84:	2400      	movs	r4, #0
 800fb86:	4620      	mov	r0, r4
 800fb88:	bd38      	pop	{r3, r4, r5, pc}
 800fb8a:	f7fc fced 	bl	800c568 <__errno>
 800fb8e:	230c      	movs	r3, #12
 800fb90:	6003      	str	r3, [r0, #0]
 800fb92:	e7f7      	b.n	800fb84 <_calloc_r+0x10>
 800fb94:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800fb98:	f022 0203 	bic.w	r2, r2, #3
 800fb9c:	3a04      	subs	r2, #4
 800fb9e:	2a24      	cmp	r2, #36	@ 0x24
 800fba0:	d819      	bhi.n	800fbd6 <_calloc_r+0x62>
 800fba2:	2a13      	cmp	r2, #19
 800fba4:	d915      	bls.n	800fbd2 <_calloc_r+0x5e>
 800fba6:	2a1b      	cmp	r2, #27
 800fba8:	e9c0 5500 	strd	r5, r5, [r0]
 800fbac:	d806      	bhi.n	800fbbc <_calloc_r+0x48>
 800fbae:	f100 0308 	add.w	r3, r0, #8
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	e9c3 2200 	strd	r2, r2, [r3]
 800fbb8:	609a      	str	r2, [r3, #8]
 800fbba:	e7e4      	b.n	800fb86 <_calloc_r+0x12>
 800fbbc:	2a24      	cmp	r2, #36	@ 0x24
 800fbbe:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800fbc2:	bf11      	iteee	ne
 800fbc4:	f100 0310 	addne.w	r3, r0, #16
 800fbc8:	6105      	streq	r5, [r0, #16]
 800fbca:	f100 0318 	addeq.w	r3, r0, #24
 800fbce:	6145      	streq	r5, [r0, #20]
 800fbd0:	e7ef      	b.n	800fbb2 <_calloc_r+0x3e>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	e7ed      	b.n	800fbb2 <_calloc_r+0x3e>
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f7fc fc67 	bl	800c4aa <memset>
 800fbdc:	e7d3      	b.n	800fb86 <_calloc_r+0x12>
	...

0800fbe0 <fiprintf>:
 800fbe0:	b40e      	push	{r1, r2, r3}
 800fbe2:	b503      	push	{r0, r1, lr}
 800fbe4:	4601      	mov	r1, r0
 800fbe6:	ab03      	add	r3, sp, #12
 800fbe8:	4805      	ldr	r0, [pc, #20]	@ (800fc00 <fiprintf+0x20>)
 800fbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbee:	6800      	ldr	r0, [r0, #0]
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	f000 f839 	bl	800fc68 <_vfiprintf_r>
 800fbf6:	b002      	add	sp, #8
 800fbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbfc:	b003      	add	sp, #12
 800fbfe:	4770      	bx	lr
 800fc00:	20000430 	.word	0x20000430

0800fc04 <__sprint_r>:
 800fc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc08:	6893      	ldr	r3, [r2, #8]
 800fc0a:	4680      	mov	r8, r0
 800fc0c:	460e      	mov	r6, r1
 800fc0e:	4614      	mov	r4, r2
 800fc10:	b343      	cbz	r3, 800fc64 <__sprint_r+0x60>
 800fc12:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800fc14:	049d      	lsls	r5, r3, #18
 800fc16:	d522      	bpl.n	800fc5e <__sprint_r+0x5a>
 800fc18:	6815      	ldr	r5, [r2, #0]
 800fc1a:	68a0      	ldr	r0, [r4, #8]
 800fc1c:	3508      	adds	r5, #8
 800fc1e:	b928      	cbnz	r0, 800fc2c <__sprint_r+0x28>
 800fc20:	2300      	movs	r3, #0
 800fc22:	60a3      	str	r3, [r4, #8]
 800fc24:	2300      	movs	r3, #0
 800fc26:	6063      	str	r3, [r4, #4]
 800fc28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2c:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800fc30:	f04f 0900 	mov.w	r9, #0
 800fc34:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800fc38:	45ca      	cmp	sl, r9
 800fc3a:	dc05      	bgt.n	800fc48 <__sprint_r+0x44>
 800fc3c:	68a3      	ldr	r3, [r4, #8]
 800fc3e:	f027 0703 	bic.w	r7, r7, #3
 800fc42:	1bdb      	subs	r3, r3, r7
 800fc44:	60a3      	str	r3, [r4, #8]
 800fc46:	e7e8      	b.n	800fc1a <__sprint_r+0x16>
 800fc48:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	4640      	mov	r0, r8
 800fc50:	f000 fd13 	bl	801067a <_fputwc_r>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d0e3      	beq.n	800fc20 <__sprint_r+0x1c>
 800fc58:	f109 0901 	add.w	r9, r9, #1
 800fc5c:	e7ec      	b.n	800fc38 <__sprint_r+0x34>
 800fc5e:	f7fe f8c5 	bl	800ddec <__sfvwrite_r>
 800fc62:	e7dd      	b.n	800fc20 <__sprint_r+0x1c>
 800fc64:	4618      	mov	r0, r3
 800fc66:	e7dd      	b.n	800fc24 <__sprint_r+0x20>

0800fc68 <_vfiprintf_r>:
 800fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6c:	b0bb      	sub	sp, #236	@ 0xec
 800fc6e:	460f      	mov	r7, r1
 800fc70:	4693      	mov	fp, r2
 800fc72:	461c      	mov	r4, r3
 800fc74:	461d      	mov	r5, r3
 800fc76:	9000      	str	r0, [sp, #0]
 800fc78:	b118      	cbz	r0, 800fc82 <_vfiprintf_r+0x1a>
 800fc7a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fc7c:	b90b      	cbnz	r3, 800fc82 <_vfiprintf_r+0x1a>
 800fc7e:	f7fc fa73 	bl	800c168 <__sinit>
 800fc82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc84:	07db      	lsls	r3, r3, #31
 800fc86:	d405      	bmi.n	800fc94 <_vfiprintf_r+0x2c>
 800fc88:	89bb      	ldrh	r3, [r7, #12]
 800fc8a:	059e      	lsls	r6, r3, #22
 800fc8c:	d402      	bmi.n	800fc94 <_vfiprintf_r+0x2c>
 800fc8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fc90:	f7fc fc96 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 800fc94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fc98:	0498      	lsls	r0, r3, #18
 800fc9a:	d406      	bmi.n	800fcaa <_vfiprintf_r+0x42>
 800fc9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fca0:	81bb      	strh	r3, [r7, #12]
 800fca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fca4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fca8:	667b      	str	r3, [r7, #100]	@ 0x64
 800fcaa:	89bb      	ldrh	r3, [r7, #12]
 800fcac:	0719      	lsls	r1, r3, #28
 800fcae:	d501      	bpl.n	800fcb4 <_vfiprintf_r+0x4c>
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	b9ab      	cbnz	r3, 800fce0 <_vfiprintf_r+0x78>
 800fcb4:	9800      	ldr	r0, [sp, #0]
 800fcb6:	4639      	mov	r1, r7
 800fcb8:	f7fe fa48 	bl	800e14c <__swsetup_r>
 800fcbc:	b180      	cbz	r0, 800fce0 <_vfiprintf_r+0x78>
 800fcbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcc0:	07da      	lsls	r2, r3, #31
 800fcc2:	d506      	bpl.n	800fcd2 <_vfiprintf_r+0x6a>
 800fcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc8:	9303      	str	r3, [sp, #12]
 800fcca:	9803      	ldr	r0, [sp, #12]
 800fccc:	b03b      	add	sp, #236	@ 0xec
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd2:	89bb      	ldrh	r3, [r7, #12]
 800fcd4:	059b      	lsls	r3, r3, #22
 800fcd6:	d4f5      	bmi.n	800fcc4 <_vfiprintf_r+0x5c>
 800fcd8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fcda:	f7fc fc72 	bl	800c5c2 <__retarget_lock_release_recursive>
 800fcde:	e7f1      	b.n	800fcc4 <_vfiprintf_r+0x5c>
 800fce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fce4:	f003 021a 	and.w	r2, r3, #26
 800fce8:	2a0a      	cmp	r2, #10
 800fcea:	d114      	bne.n	800fd16 <_vfiprintf_r+0xae>
 800fcec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fcf0:	2a00      	cmp	r2, #0
 800fcf2:	db10      	blt.n	800fd16 <_vfiprintf_r+0xae>
 800fcf4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fcf6:	07d6      	lsls	r6, r2, #31
 800fcf8:	d404      	bmi.n	800fd04 <_vfiprintf_r+0x9c>
 800fcfa:	059d      	lsls	r5, r3, #22
 800fcfc:	d402      	bmi.n	800fd04 <_vfiprintf_r+0x9c>
 800fcfe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fd00:	f7fc fc5f 	bl	800c5c2 <__retarget_lock_release_recursive>
 800fd04:	9800      	ldr	r0, [sp, #0]
 800fd06:	4623      	mov	r3, r4
 800fd08:	465a      	mov	r2, fp
 800fd0a:	4639      	mov	r1, r7
 800fd0c:	b03b      	add	sp, #236	@ 0xec
 800fd0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd12:	f000 bc31 	b.w	8010578 <__sbprintf>
 800fd16:	2300      	movs	r3, #0
 800fd18:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800fd1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fd20:	ae11      	add	r6, sp, #68	@ 0x44
 800fd22:	960e      	str	r6, [sp, #56]	@ 0x38
 800fd24:	9307      	str	r3, [sp, #28]
 800fd26:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd28:	9303      	str	r3, [sp, #12]
 800fd2a:	465b      	mov	r3, fp
 800fd2c:	461c      	mov	r4, r3
 800fd2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd32:	b10a      	cbz	r2, 800fd38 <_vfiprintf_r+0xd0>
 800fd34:	2a25      	cmp	r2, #37	@ 0x25
 800fd36:	d1f9      	bne.n	800fd2c <_vfiprintf_r+0xc4>
 800fd38:	ebb4 080b 	subs.w	r8, r4, fp
 800fd3c:	d00d      	beq.n	800fd5a <_vfiprintf_r+0xf2>
 800fd3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd40:	4443      	add	r3, r8
 800fd42:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd46:	3301      	adds	r3, #1
 800fd48:	2b07      	cmp	r3, #7
 800fd4a:	e9c6 b800 	strd	fp, r8, [r6]
 800fd4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd50:	dc75      	bgt.n	800fe3e <_vfiprintf_r+0x1d6>
 800fd52:	3608      	adds	r6, #8
 800fd54:	9b03      	ldr	r3, [sp, #12]
 800fd56:	4443      	add	r3, r8
 800fd58:	9303      	str	r3, [sp, #12]
 800fd5a:	7823      	ldrb	r3, [r4, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 83cd 	beq.w	80104fc <_vfiprintf_r+0x894>
 800fd62:	2300      	movs	r3, #0
 800fd64:	f04f 32ff 	mov.w	r2, #4294967295
 800fd68:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800fd6c:	3401      	adds	r4, #1
 800fd6e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800fd72:	469a      	mov	sl, r3
 800fd74:	46a3      	mov	fp, r4
 800fd76:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800fd7a:	f1a3 0220 	sub.w	r2, r3, #32
 800fd7e:	2a5a      	cmp	r2, #90	@ 0x5a
 800fd80:	f200 8316 	bhi.w	80103b0 <_vfiprintf_r+0x748>
 800fd84:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fd88:	0314009a 	.word	0x0314009a
 800fd8c:	00a20314 	.word	0x00a20314
 800fd90:	03140314 	.word	0x03140314
 800fd94:	00820314 	.word	0x00820314
 800fd98:	03140314 	.word	0x03140314
 800fd9c:	00af00a5 	.word	0x00af00a5
 800fda0:	00ac0314 	.word	0x00ac0314
 800fda4:	031400b1 	.word	0x031400b1
 800fda8:	00d000cd 	.word	0x00d000cd
 800fdac:	00d000d0 	.word	0x00d000d0
 800fdb0:	00d000d0 	.word	0x00d000d0
 800fdb4:	00d000d0 	.word	0x00d000d0
 800fdb8:	00d000d0 	.word	0x00d000d0
 800fdbc:	03140314 	.word	0x03140314
 800fdc0:	03140314 	.word	0x03140314
 800fdc4:	03140314 	.word	0x03140314
 800fdc8:	03140314 	.word	0x03140314
 800fdcc:	00f70314 	.word	0x00f70314
 800fdd0:	03140104 	.word	0x03140104
 800fdd4:	03140314 	.word	0x03140314
 800fdd8:	03140314 	.word	0x03140314
 800fddc:	03140314 	.word	0x03140314
 800fde0:	03140314 	.word	0x03140314
 800fde4:	01520314 	.word	0x01520314
 800fde8:	03140314 	.word	0x03140314
 800fdec:	019a0314 	.word	0x019a0314
 800fdf0:	027a0314 	.word	0x027a0314
 800fdf4:	03140314 	.word	0x03140314
 800fdf8:	0314029a 	.word	0x0314029a
 800fdfc:	03140314 	.word	0x03140314
 800fe00:	03140314 	.word	0x03140314
 800fe04:	03140314 	.word	0x03140314
 800fe08:	03140314 	.word	0x03140314
 800fe0c:	00f70314 	.word	0x00f70314
 800fe10:	03140106 	.word	0x03140106
 800fe14:	03140314 	.word	0x03140314
 800fe18:	010600e0 	.word	0x010600e0
 800fe1c:	031400f1 	.word	0x031400f1
 800fe20:	031400eb 	.word	0x031400eb
 800fe24:	01540132 	.word	0x01540132
 800fe28:	00f10189 	.word	0x00f10189
 800fe2c:	019a0314 	.word	0x019a0314
 800fe30:	027c0098 	.word	0x027c0098
 800fe34:	03140314 	.word	0x03140314
 800fe38:	03140065 	.word	0x03140065
 800fe3c:	0098      	.short	0x0098
 800fe3e:	9800      	ldr	r0, [sp, #0]
 800fe40:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe42:	4639      	mov	r1, r7
 800fe44:	f7ff fede 	bl	800fc04 <__sprint_r>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	f040 8336 	bne.w	80104ba <_vfiprintf_r+0x852>
 800fe4e:	ae11      	add	r6, sp, #68	@ 0x44
 800fe50:	e780      	b.n	800fd54 <_vfiprintf_r+0xec>
 800fe52:	4a99      	ldr	r2, [pc, #612]	@ (80100b8 <_vfiprintf_r+0x450>)
 800fe54:	9205      	str	r2, [sp, #20]
 800fe56:	f01a 0220 	ands.w	r2, sl, #32
 800fe5a:	f000 8231 	beq.w	80102c0 <_vfiprintf_r+0x658>
 800fe5e:	3507      	adds	r5, #7
 800fe60:	f025 0507 	bic.w	r5, r5, #7
 800fe64:	46a8      	mov	r8, r5
 800fe66:	686d      	ldr	r5, [r5, #4]
 800fe68:	f858 4b08 	ldr.w	r4, [r8], #8
 800fe6c:	f01a 0f01 	tst.w	sl, #1
 800fe70:	d009      	beq.n	800fe86 <_vfiprintf_r+0x21e>
 800fe72:	ea54 0205 	orrs.w	r2, r4, r5
 800fe76:	bf1f      	itttt	ne
 800fe78:	2230      	movne	r2, #48	@ 0x30
 800fe7a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800fe7e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800fe82:	f04a 0a02 	orrne.w	sl, sl, #2
 800fe86:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800fe8a:	e112      	b.n	80100b2 <_vfiprintf_r+0x44a>
 800fe8c:	9800      	ldr	r0, [sp, #0]
 800fe8e:	f7fe f9e7 	bl	800e260 <_localeconv_r>
 800fe92:	6843      	ldr	r3, [r0, #4]
 800fe94:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7f0 f9c2 	bl	8000220 <strlen>
 800fe9c:	9007      	str	r0, [sp, #28]
 800fe9e:	9800      	ldr	r0, [sp, #0]
 800fea0:	f7fe f9de 	bl	800e260 <_localeconv_r>
 800fea4:	6883      	ldr	r3, [r0, #8]
 800fea6:	9306      	str	r3, [sp, #24]
 800fea8:	9b07      	ldr	r3, [sp, #28]
 800feaa:	b12b      	cbz	r3, 800feb8 <_vfiprintf_r+0x250>
 800feac:	9b06      	ldr	r3, [sp, #24]
 800feae:	b11b      	cbz	r3, 800feb8 <_vfiprintf_r+0x250>
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	b10b      	cbz	r3, 800feb8 <_vfiprintf_r+0x250>
 800feb4:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800feb8:	465c      	mov	r4, fp
 800feba:	e75b      	b.n	800fd74 <_vfiprintf_r+0x10c>
 800febc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1f9      	bne.n	800feb8 <_vfiprintf_r+0x250>
 800fec4:	2320      	movs	r3, #32
 800fec6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800feca:	e7f5      	b.n	800feb8 <_vfiprintf_r+0x250>
 800fecc:	f04a 0a01 	orr.w	sl, sl, #1
 800fed0:	e7f2      	b.n	800feb8 <_vfiprintf_r+0x250>
 800fed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fed6:	9302      	str	r3, [sp, #8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	daed      	bge.n	800feb8 <_vfiprintf_r+0x250>
 800fedc:	425b      	negs	r3, r3
 800fede:	9302      	str	r3, [sp, #8]
 800fee0:	f04a 0a04 	orr.w	sl, sl, #4
 800fee4:	e7e8      	b.n	800feb8 <_vfiprintf_r+0x250>
 800fee6:	232b      	movs	r3, #43	@ 0x2b
 800fee8:	e7ed      	b.n	800fec6 <_vfiprintf_r+0x25e>
 800feea:	465a      	mov	r2, fp
 800feec:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fef0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fef2:	d112      	bne.n	800ff1a <_vfiprintf_r+0x2b2>
 800fef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	4693      	mov	fp, r2
 800ff00:	e7da      	b.n	800feb8 <_vfiprintf_r+0x250>
 800ff02:	9b01      	ldr	r3, [sp, #4]
 800ff04:	fb00 1303 	mla	r3, r0, r3, r1
 800ff08:	9301      	str	r3, [sp, #4]
 800ff0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ff0e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ff12:	2909      	cmp	r1, #9
 800ff14:	d9f5      	bls.n	800ff02 <_vfiprintf_r+0x29a>
 800ff16:	4693      	mov	fp, r2
 800ff18:	e72f      	b.n	800fd7a <_vfiprintf_r+0x112>
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	9101      	str	r1, [sp, #4]
 800ff1e:	200a      	movs	r0, #10
 800ff20:	e7f5      	b.n	800ff0e <_vfiprintf_r+0x2a6>
 800ff22:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ff26:	e7c7      	b.n	800feb8 <_vfiprintf_r+0x250>
 800ff28:	2100      	movs	r1, #0
 800ff2a:	465a      	mov	r2, fp
 800ff2c:	9102      	str	r1, [sp, #8]
 800ff2e:	200a      	movs	r0, #10
 800ff30:	9902      	ldr	r1, [sp, #8]
 800ff32:	3b30      	subs	r3, #48	@ 0x30
 800ff34:	fb00 3301 	mla	r3, r0, r1, r3
 800ff38:	9302      	str	r3, [sp, #8]
 800ff3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ff3e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ff42:	2909      	cmp	r1, #9
 800ff44:	d9f4      	bls.n	800ff30 <_vfiprintf_r+0x2c8>
 800ff46:	e7e6      	b.n	800ff16 <_vfiprintf_r+0x2ae>
 800ff48:	f89b 3000 	ldrb.w	r3, [fp]
 800ff4c:	2b68      	cmp	r3, #104	@ 0x68
 800ff4e:	bf06      	itte	eq
 800ff50:	f10b 0b01 	addeq.w	fp, fp, #1
 800ff54:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ff58:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ff5c:	e7ac      	b.n	800feb8 <_vfiprintf_r+0x250>
 800ff5e:	f89b 3000 	ldrb.w	r3, [fp]
 800ff62:	2b6c      	cmp	r3, #108	@ 0x6c
 800ff64:	d104      	bne.n	800ff70 <_vfiprintf_r+0x308>
 800ff66:	f10b 0b01 	add.w	fp, fp, #1
 800ff6a:	f04a 0a20 	orr.w	sl, sl, #32
 800ff6e:	e7a3      	b.n	800feb8 <_vfiprintf_r+0x250>
 800ff70:	f04a 0a10 	orr.w	sl, sl, #16
 800ff74:	e7a0      	b.n	800feb8 <_vfiprintf_r+0x250>
 800ff76:	46a8      	mov	r8, r5
 800ff78:	2400      	movs	r4, #0
 800ff7a:	f858 3b04 	ldr.w	r3, [r8], #4
 800ff7e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ff82:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ff86:	2301      	movs	r3, #1
 800ff88:	9301      	str	r3, [sp, #4]
 800ff8a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ff8e:	e0ab      	b.n	80100e8 <_vfiprintf_r+0x480>
 800ff90:	f04a 0a10 	orr.w	sl, sl, #16
 800ff94:	f01a 0f20 	tst.w	sl, #32
 800ff98:	d011      	beq.n	800ffbe <_vfiprintf_r+0x356>
 800ff9a:	3507      	adds	r5, #7
 800ff9c:	f025 0507 	bic.w	r5, r5, #7
 800ffa0:	46a8      	mov	r8, r5
 800ffa2:	686d      	ldr	r5, [r5, #4]
 800ffa4:	f858 4b08 	ldr.w	r4, [r8], #8
 800ffa8:	2d00      	cmp	r5, #0
 800ffaa:	da06      	bge.n	800ffba <_vfiprintf_r+0x352>
 800ffac:	4264      	negs	r4, r4
 800ffae:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ffb2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ffb6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e048      	b.n	8010050 <_vfiprintf_r+0x3e8>
 800ffbe:	46a8      	mov	r8, r5
 800ffc0:	f01a 0f10 	tst.w	sl, #16
 800ffc4:	f858 5b04 	ldr.w	r5, [r8], #4
 800ffc8:	d002      	beq.n	800ffd0 <_vfiprintf_r+0x368>
 800ffca:	462c      	mov	r4, r5
 800ffcc:	17ed      	asrs	r5, r5, #31
 800ffce:	e7eb      	b.n	800ffa8 <_vfiprintf_r+0x340>
 800ffd0:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ffd4:	d003      	beq.n	800ffde <_vfiprintf_r+0x376>
 800ffd6:	b22c      	sxth	r4, r5
 800ffd8:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ffdc:	e7e4      	b.n	800ffa8 <_vfiprintf_r+0x340>
 800ffde:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ffe2:	d0f2      	beq.n	800ffca <_vfiprintf_r+0x362>
 800ffe4:	b26c      	sxtb	r4, r5
 800ffe6:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ffea:	e7dd      	b.n	800ffa8 <_vfiprintf_r+0x340>
 800ffec:	f01a 0f20 	tst.w	sl, #32
 800fff0:	d007      	beq.n	8010002 <_vfiprintf_r+0x39a>
 800fff2:	9a03      	ldr	r2, [sp, #12]
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	9903      	ldr	r1, [sp, #12]
 800fff8:	17d2      	asrs	r2, r2, #31
 800fffa:	e9c3 1200 	strd	r1, r2, [r3]
 800fffe:	3504      	adds	r5, #4
 8010000:	e693      	b.n	800fd2a <_vfiprintf_r+0xc2>
 8010002:	f01a 0f10 	tst.w	sl, #16
 8010006:	d003      	beq.n	8010010 <_vfiprintf_r+0x3a8>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	9a03      	ldr	r2, [sp, #12]
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	e7f6      	b.n	800fffe <_vfiprintf_r+0x396>
 8010010:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010014:	d003      	beq.n	801001e <_vfiprintf_r+0x3b6>
 8010016:	682b      	ldr	r3, [r5, #0]
 8010018:	9a03      	ldr	r2, [sp, #12]
 801001a:	801a      	strh	r2, [r3, #0]
 801001c:	e7ef      	b.n	800fffe <_vfiprintf_r+0x396>
 801001e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010022:	d0f1      	beq.n	8010008 <_vfiprintf_r+0x3a0>
 8010024:	682b      	ldr	r3, [r5, #0]
 8010026:	9a03      	ldr	r2, [sp, #12]
 8010028:	701a      	strb	r2, [r3, #0]
 801002a:	e7e8      	b.n	800fffe <_vfiprintf_r+0x396>
 801002c:	f04a 0a10 	orr.w	sl, sl, #16
 8010030:	f01a 0320 	ands.w	r3, sl, #32
 8010034:	d01f      	beq.n	8010076 <_vfiprintf_r+0x40e>
 8010036:	3507      	adds	r5, #7
 8010038:	f025 0507 	bic.w	r5, r5, #7
 801003c:	46a8      	mov	r8, r5
 801003e:	686d      	ldr	r5, [r5, #4]
 8010040:	f858 4b08 	ldr.w	r4, [r8], #8
 8010044:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010048:	2300      	movs	r3, #0
 801004a:	2200      	movs	r2, #0
 801004c:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	3201      	adds	r2, #1
 8010054:	f000 825f 	beq.w	8010516 <_vfiprintf_r+0x8ae>
 8010058:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 801005c:	9204      	str	r2, [sp, #16]
 801005e:	ea54 0205 	orrs.w	r2, r4, r5
 8010062:	f040 825e 	bne.w	8010522 <_vfiprintf_r+0x8ba>
 8010066:	9a01      	ldr	r2, [sp, #4]
 8010068:	2a00      	cmp	r2, #0
 801006a:	f000 8198 	beq.w	801039e <_vfiprintf_r+0x736>
 801006e:	2b01      	cmp	r3, #1
 8010070:	f040 825a 	bne.w	8010528 <_vfiprintf_r+0x8c0>
 8010074:	e13b      	b.n	80102ee <_vfiprintf_r+0x686>
 8010076:	46a8      	mov	r8, r5
 8010078:	f01a 0510 	ands.w	r5, sl, #16
 801007c:	f858 4b04 	ldr.w	r4, [r8], #4
 8010080:	d001      	beq.n	8010086 <_vfiprintf_r+0x41e>
 8010082:	461d      	mov	r5, r3
 8010084:	e7de      	b.n	8010044 <_vfiprintf_r+0x3dc>
 8010086:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 801008a:	d001      	beq.n	8010090 <_vfiprintf_r+0x428>
 801008c:	b2a4      	uxth	r4, r4
 801008e:	e7d9      	b.n	8010044 <_vfiprintf_r+0x3dc>
 8010090:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010094:	d0d6      	beq.n	8010044 <_vfiprintf_r+0x3dc>
 8010096:	b2e4      	uxtb	r4, r4
 8010098:	e7f3      	b.n	8010082 <_vfiprintf_r+0x41a>
 801009a:	46a8      	mov	r8, r5
 801009c:	f647 0330 	movw	r3, #30768	@ 0x7830
 80100a0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80100a4:	f858 4b04 	ldr.w	r4, [r8], #4
 80100a8:	4b03      	ldr	r3, [pc, #12]	@ (80100b8 <_vfiprintf_r+0x450>)
 80100aa:	9305      	str	r3, [sp, #20]
 80100ac:	2500      	movs	r5, #0
 80100ae:	f04a 0a02 	orr.w	sl, sl, #2
 80100b2:	2302      	movs	r3, #2
 80100b4:	e7c9      	b.n	801004a <_vfiprintf_r+0x3e2>
 80100b6:	bf00      	nop
 80100b8:	08011930 	.word	0x08011930
 80100bc:	9b01      	ldr	r3, [sp, #4]
 80100be:	46a8      	mov	r8, r5
 80100c0:	1c5c      	adds	r4, r3, #1
 80100c2:	f04f 0500 	mov.w	r5, #0
 80100c6:	f858 9b04 	ldr.w	r9, [r8], #4
 80100ca:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80100ce:	f000 80d0 	beq.w	8010272 <_vfiprintf_r+0x60a>
 80100d2:	461a      	mov	r2, r3
 80100d4:	4629      	mov	r1, r5
 80100d6:	4648      	mov	r0, r9
 80100d8:	f7f0 f8aa 	bl	8000230 <memchr>
 80100dc:	4604      	mov	r4, r0
 80100de:	b118      	cbz	r0, 80100e8 <_vfiprintf_r+0x480>
 80100e0:	eba0 0309 	sub.w	r3, r0, r9
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	462c      	mov	r4, r5
 80100e8:	9b01      	ldr	r3, [sp, #4]
 80100ea:	42a3      	cmp	r3, r4
 80100ec:	bfb8      	it	lt
 80100ee:	4623      	movlt	r3, r4
 80100f0:	9304      	str	r3, [sp, #16]
 80100f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80100f6:	b113      	cbz	r3, 80100fe <_vfiprintf_r+0x496>
 80100f8:	9b04      	ldr	r3, [sp, #16]
 80100fa:	3301      	adds	r3, #1
 80100fc:	9304      	str	r3, [sp, #16]
 80100fe:	f01a 0302 	ands.w	r3, sl, #2
 8010102:	9308      	str	r3, [sp, #32]
 8010104:	bf1e      	ittt	ne
 8010106:	9b04      	ldrne	r3, [sp, #16]
 8010108:	3302      	addne	r3, #2
 801010a:	9304      	strne	r3, [sp, #16]
 801010c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8010110:	930a      	str	r3, [sp, #40]	@ 0x28
 8010112:	d11f      	bne.n	8010154 <_vfiprintf_r+0x4ec>
 8010114:	9b02      	ldr	r3, [sp, #8]
 8010116:	9a04      	ldr	r2, [sp, #16]
 8010118:	1a9d      	subs	r5, r3, r2
 801011a:	2d00      	cmp	r5, #0
 801011c:	dd1a      	ble.n	8010154 <_vfiprintf_r+0x4ec>
 801011e:	4ba9      	ldr	r3, [pc, #676]	@ (80103c4 <_vfiprintf_r+0x75c>)
 8010120:	6033      	str	r3, [r6, #0]
 8010122:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8010126:	2d10      	cmp	r5, #16
 8010128:	f102 0201 	add.w	r2, r2, #1
 801012c:	f106 0008 	add.w	r0, r6, #8
 8010130:	f300 814e 	bgt.w	80103d0 <_vfiprintf_r+0x768>
 8010134:	6075      	str	r5, [r6, #4]
 8010136:	2a07      	cmp	r2, #7
 8010138:	4465      	add	r5, ip
 801013a:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801013e:	f340 815a 	ble.w	80103f6 <_vfiprintf_r+0x78e>
 8010142:	9800      	ldr	r0, [sp, #0]
 8010144:	aa0e      	add	r2, sp, #56	@ 0x38
 8010146:	4639      	mov	r1, r7
 8010148:	f7ff fd5c 	bl	800fc04 <__sprint_r>
 801014c:	2800      	cmp	r0, #0
 801014e:	f040 81b4 	bne.w	80104ba <_vfiprintf_r+0x852>
 8010152:	ae11      	add	r6, sp, #68	@ 0x44
 8010154:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8010158:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801015c:	b161      	cbz	r1, 8010178 <_vfiprintf_r+0x510>
 801015e:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8010162:	3301      	adds	r3, #1
 8010164:	6031      	str	r1, [r6, #0]
 8010166:	2101      	movs	r1, #1
 8010168:	440a      	add	r2, r1
 801016a:	2b07      	cmp	r3, #7
 801016c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010170:	6071      	str	r1, [r6, #4]
 8010172:	f300 8142 	bgt.w	80103fa <_vfiprintf_r+0x792>
 8010176:	3608      	adds	r6, #8
 8010178:	9908      	ldr	r1, [sp, #32]
 801017a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801017e:	b159      	cbz	r1, 8010198 <_vfiprintf_r+0x530>
 8010180:	a90d      	add	r1, sp, #52	@ 0x34
 8010182:	3301      	adds	r3, #1
 8010184:	6031      	str	r1, [r6, #0]
 8010186:	2102      	movs	r1, #2
 8010188:	440a      	add	r2, r1
 801018a:	2b07      	cmp	r3, #7
 801018c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010190:	6071      	str	r1, [r6, #4]
 8010192:	f300 813b 	bgt.w	801040c <_vfiprintf_r+0x7a4>
 8010196:	3608      	adds	r6, #8
 8010198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801019a:	2b80      	cmp	r3, #128	@ 0x80
 801019c:	d11f      	bne.n	80101de <_vfiprintf_r+0x576>
 801019e:	9b02      	ldr	r3, [sp, #8]
 80101a0:	9a04      	ldr	r2, [sp, #16]
 80101a2:	1a9d      	subs	r5, r3, r2
 80101a4:	2d00      	cmp	r5, #0
 80101a6:	dd1a      	ble.n	80101de <_vfiprintf_r+0x576>
 80101a8:	4b87      	ldr	r3, [pc, #540]	@ (80103c8 <_vfiprintf_r+0x760>)
 80101aa:	6033      	str	r3, [r6, #0]
 80101ac:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80101b0:	2d10      	cmp	r5, #16
 80101b2:	f102 0201 	add.w	r2, r2, #1
 80101b6:	f106 0008 	add.w	r0, r6, #8
 80101ba:	f300 8130 	bgt.w	801041e <_vfiprintf_r+0x7b6>
 80101be:	6075      	str	r5, [r6, #4]
 80101c0:	2a07      	cmp	r2, #7
 80101c2:	4465      	add	r5, ip
 80101c4:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80101c8:	f340 813c 	ble.w	8010444 <_vfiprintf_r+0x7dc>
 80101cc:	9800      	ldr	r0, [sp, #0]
 80101ce:	aa0e      	add	r2, sp, #56	@ 0x38
 80101d0:	4639      	mov	r1, r7
 80101d2:	f7ff fd17 	bl	800fc04 <__sprint_r>
 80101d6:	2800      	cmp	r0, #0
 80101d8:	f040 816f 	bne.w	80104ba <_vfiprintf_r+0x852>
 80101dc:	ae11      	add	r6, sp, #68	@ 0x44
 80101de:	9b01      	ldr	r3, [sp, #4]
 80101e0:	1ae4      	subs	r4, r4, r3
 80101e2:	2c00      	cmp	r4, #0
 80101e4:	dd1a      	ble.n	801021c <_vfiprintf_r+0x5b4>
 80101e6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80101ea:	4877      	ldr	r0, [pc, #476]	@ (80103c8 <_vfiprintf_r+0x760>)
 80101ec:	6030      	str	r0, [r6, #0]
 80101ee:	2c10      	cmp	r4, #16
 80101f0:	f103 0301 	add.w	r3, r3, #1
 80101f4:	f106 0108 	add.w	r1, r6, #8
 80101f8:	f300 8126 	bgt.w	8010448 <_vfiprintf_r+0x7e0>
 80101fc:	6074      	str	r4, [r6, #4]
 80101fe:	2b07      	cmp	r3, #7
 8010200:	4414      	add	r4, r2
 8010202:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8010206:	f340 8130 	ble.w	801046a <_vfiprintf_r+0x802>
 801020a:	9800      	ldr	r0, [sp, #0]
 801020c:	aa0e      	add	r2, sp, #56	@ 0x38
 801020e:	4639      	mov	r1, r7
 8010210:	f7ff fcf8 	bl	800fc04 <__sprint_r>
 8010214:	2800      	cmp	r0, #0
 8010216:	f040 8150 	bne.w	80104ba <_vfiprintf_r+0x852>
 801021a:	ae11      	add	r6, sp, #68	@ 0x44
 801021c:	9b01      	ldr	r3, [sp, #4]
 801021e:	9a01      	ldr	r2, [sp, #4]
 8010220:	6073      	str	r3, [r6, #4]
 8010222:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010224:	f8c6 9000 	str.w	r9, [r6]
 8010228:	4413      	add	r3, r2
 801022a:	9310      	str	r3, [sp, #64]	@ 0x40
 801022c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801022e:	3301      	adds	r3, #1
 8010230:	2b07      	cmp	r3, #7
 8010232:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010234:	f300 811b 	bgt.w	801046e <_vfiprintf_r+0x806>
 8010238:	f106 0308 	add.w	r3, r6, #8
 801023c:	f01a 0f04 	tst.w	sl, #4
 8010240:	f040 811d 	bne.w	801047e <_vfiprintf_r+0x816>
 8010244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010248:	9904      	ldr	r1, [sp, #16]
 801024a:	428a      	cmp	r2, r1
 801024c:	bfac      	ite	ge
 801024e:	189b      	addge	r3, r3, r2
 8010250:	185b      	addlt	r3, r3, r1
 8010252:	9303      	str	r3, [sp, #12]
 8010254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010256:	b13b      	cbz	r3, 8010268 <_vfiprintf_r+0x600>
 8010258:	9800      	ldr	r0, [sp, #0]
 801025a:	aa0e      	add	r2, sp, #56	@ 0x38
 801025c:	4639      	mov	r1, r7
 801025e:	f7ff fcd1 	bl	800fc04 <__sprint_r>
 8010262:	2800      	cmp	r0, #0
 8010264:	f040 8129 	bne.w	80104ba <_vfiprintf_r+0x852>
 8010268:	2300      	movs	r3, #0
 801026a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801026c:	4645      	mov	r5, r8
 801026e:	ae11      	add	r6, sp, #68	@ 0x44
 8010270:	e55b      	b.n	800fd2a <_vfiprintf_r+0xc2>
 8010272:	4648      	mov	r0, r9
 8010274:	f7ef ffd4 	bl	8000220 <strlen>
 8010278:	9001      	str	r0, [sp, #4]
 801027a:	e734      	b.n	80100e6 <_vfiprintf_r+0x47e>
 801027c:	f04a 0a10 	orr.w	sl, sl, #16
 8010280:	f01a 0320 	ands.w	r3, sl, #32
 8010284:	d008      	beq.n	8010298 <_vfiprintf_r+0x630>
 8010286:	3507      	adds	r5, #7
 8010288:	f025 0507 	bic.w	r5, r5, #7
 801028c:	46a8      	mov	r8, r5
 801028e:	686d      	ldr	r5, [r5, #4]
 8010290:	f858 4b08 	ldr.w	r4, [r8], #8
 8010294:	2301      	movs	r3, #1
 8010296:	e6d8      	b.n	801004a <_vfiprintf_r+0x3e2>
 8010298:	46a8      	mov	r8, r5
 801029a:	f01a 0510 	ands.w	r5, sl, #16
 801029e:	f858 4b04 	ldr.w	r4, [r8], #4
 80102a2:	d001      	beq.n	80102a8 <_vfiprintf_r+0x640>
 80102a4:	461d      	mov	r5, r3
 80102a6:	e7f5      	b.n	8010294 <_vfiprintf_r+0x62c>
 80102a8:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80102ac:	d001      	beq.n	80102b2 <_vfiprintf_r+0x64a>
 80102ae:	b2a4      	uxth	r4, r4
 80102b0:	e7f0      	b.n	8010294 <_vfiprintf_r+0x62c>
 80102b2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80102b6:	d0ed      	beq.n	8010294 <_vfiprintf_r+0x62c>
 80102b8:	b2e4      	uxtb	r4, r4
 80102ba:	e7f3      	b.n	80102a4 <_vfiprintf_r+0x63c>
 80102bc:	4a43      	ldr	r2, [pc, #268]	@ (80103cc <_vfiprintf_r+0x764>)
 80102be:	e5c9      	b.n	800fe54 <_vfiprintf_r+0x1ec>
 80102c0:	46a8      	mov	r8, r5
 80102c2:	f01a 0510 	ands.w	r5, sl, #16
 80102c6:	f858 4b04 	ldr.w	r4, [r8], #4
 80102ca:	d001      	beq.n	80102d0 <_vfiprintf_r+0x668>
 80102cc:	4615      	mov	r5, r2
 80102ce:	e5cd      	b.n	800fe6c <_vfiprintf_r+0x204>
 80102d0:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80102d4:	d001      	beq.n	80102da <_vfiprintf_r+0x672>
 80102d6:	b2a4      	uxth	r4, r4
 80102d8:	e5c8      	b.n	800fe6c <_vfiprintf_r+0x204>
 80102da:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80102de:	f43f adc5 	beq.w	800fe6c <_vfiprintf_r+0x204>
 80102e2:	b2e4      	uxtb	r4, r4
 80102e4:	e7f2      	b.n	80102cc <_vfiprintf_r+0x664>
 80102e6:	2c0a      	cmp	r4, #10
 80102e8:	f175 0300 	sbcs.w	r3, r5, #0
 80102ec:	d206      	bcs.n	80102fc <_vfiprintf_r+0x694>
 80102ee:	3430      	adds	r4, #48	@ 0x30
 80102f0:	b2e4      	uxtb	r4, r4
 80102f2:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80102f6:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80102fa:	e131      	b.n	8010560 <_vfiprintf_r+0x8f8>
 80102fc:	ab3a      	add	r3, sp, #232	@ 0xe8
 80102fe:	9308      	str	r3, [sp, #32]
 8010300:	9b04      	ldr	r3, [sp, #16]
 8010302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010306:	f04f 0a00 	mov.w	sl, #0
 801030a:	930a      	str	r3, [sp, #40]	@ 0x28
 801030c:	220a      	movs	r2, #10
 801030e:	2300      	movs	r3, #0
 8010310:	4620      	mov	r0, r4
 8010312:	4629      	mov	r1, r5
 8010314:	f7f0 fce0 	bl	8000cd8 <__aeabi_uldivmod>
 8010318:	460b      	mov	r3, r1
 801031a:	9908      	ldr	r1, [sp, #32]
 801031c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801031e:	3230      	adds	r2, #48	@ 0x30
 8010320:	f801 2c01 	strb.w	r2, [r1, #-1]
 8010324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010326:	f101 39ff 	add.w	r9, r1, #4294967295
 801032a:	f10a 0a01 	add.w	sl, sl, #1
 801032e:	b1e2      	cbz	r2, 801036a <_vfiprintf_r+0x702>
 8010330:	9a06      	ldr	r2, [sp, #24]
 8010332:	7812      	ldrb	r2, [r2, #0]
 8010334:	4552      	cmp	r2, sl
 8010336:	d118      	bne.n	801036a <_vfiprintf_r+0x702>
 8010338:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801033c:	d015      	beq.n	801036a <_vfiprintf_r+0x702>
 801033e:	2c0a      	cmp	r4, #10
 8010340:	f175 0200 	sbcs.w	r2, r5, #0
 8010344:	d311      	bcc.n	801036a <_vfiprintf_r+0x702>
 8010346:	9308      	str	r3, [sp, #32]
 8010348:	9b07      	ldr	r3, [sp, #28]
 801034a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801034c:	eba9 0903 	sub.w	r9, r9, r3
 8010350:	461a      	mov	r2, r3
 8010352:	4648      	mov	r0, r9
 8010354:	f7fd ff6a 	bl	800e22c <strncpy>
 8010358:	9b06      	ldr	r3, [sp, #24]
 801035a:	785a      	ldrb	r2, [r3, #1]
 801035c:	9b08      	ldr	r3, [sp, #32]
 801035e:	b172      	cbz	r2, 801037e <_vfiprintf_r+0x716>
 8010360:	9a06      	ldr	r2, [sp, #24]
 8010362:	3201      	adds	r2, #1
 8010364:	9206      	str	r2, [sp, #24]
 8010366:	f04f 0a00 	mov.w	sl, #0
 801036a:	2c0a      	cmp	r4, #10
 801036c:	f175 0500 	sbcs.w	r5, r5, #0
 8010370:	f0c0 80f6 	bcc.w	8010560 <_vfiprintf_r+0x8f8>
 8010374:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010376:	f8cd 9020 	str.w	r9, [sp, #32]
 801037a:	461d      	mov	r5, r3
 801037c:	e7c6      	b.n	801030c <_vfiprintf_r+0x6a4>
 801037e:	4692      	mov	sl, r2
 8010380:	e7f3      	b.n	801036a <_vfiprintf_r+0x702>
 8010382:	f004 030f 	and.w	r3, r4, #15
 8010386:	9a05      	ldr	r2, [sp, #20]
 8010388:	0924      	lsrs	r4, r4, #4
 801038a:	5cd3      	ldrb	r3, [r2, r3]
 801038c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8010390:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8010394:	092d      	lsrs	r5, r5, #4
 8010396:	ea54 0305 	orrs.w	r3, r4, r5
 801039a:	d1f2      	bne.n	8010382 <_vfiprintf_r+0x71a>
 801039c:	e0e0      	b.n	8010560 <_vfiprintf_r+0x8f8>
 801039e:	b923      	cbnz	r3, 80103aa <_vfiprintf_r+0x742>
 80103a0:	f01a 0f01 	tst.w	sl, #1
 80103a4:	d001      	beq.n	80103aa <_vfiprintf_r+0x742>
 80103a6:	2430      	movs	r4, #48	@ 0x30
 80103a8:	e7a3      	b.n	80102f2 <_vfiprintf_r+0x68a>
 80103aa:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80103ae:	e0d7      	b.n	8010560 <_vfiprintf_r+0x8f8>
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f000 80a3 	beq.w	80104fc <_vfiprintf_r+0x894>
 80103b6:	2400      	movs	r4, #0
 80103b8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80103bc:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80103c0:	46a8      	mov	r8, r5
 80103c2:	e5e0      	b.n	800ff86 <_vfiprintf_r+0x31e>
 80103c4:	08011c9d 	.word	0x08011c9d
 80103c8:	08011c8d 	.word	0x08011c8d
 80103cc:	08011941 	.word	0x08011941
 80103d0:	2110      	movs	r1, #16
 80103d2:	6071      	str	r1, [r6, #4]
 80103d4:	2a07      	cmp	r2, #7
 80103d6:	4461      	add	r1, ip
 80103d8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80103dc:	dd08      	ble.n	80103f0 <_vfiprintf_r+0x788>
 80103de:	9800      	ldr	r0, [sp, #0]
 80103e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80103e2:	4639      	mov	r1, r7
 80103e4:	f7ff fc0e 	bl	800fc04 <__sprint_r>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d166      	bne.n	80104ba <_vfiprintf_r+0x852>
 80103ec:	4b60      	ldr	r3, [pc, #384]	@ (8010570 <_vfiprintf_r+0x908>)
 80103ee:	a811      	add	r0, sp, #68	@ 0x44
 80103f0:	3d10      	subs	r5, #16
 80103f2:	4606      	mov	r6, r0
 80103f4:	e694      	b.n	8010120 <_vfiprintf_r+0x4b8>
 80103f6:	4606      	mov	r6, r0
 80103f8:	e6ac      	b.n	8010154 <_vfiprintf_r+0x4ec>
 80103fa:	9800      	ldr	r0, [sp, #0]
 80103fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80103fe:	4639      	mov	r1, r7
 8010400:	f7ff fc00 	bl	800fc04 <__sprint_r>
 8010404:	2800      	cmp	r0, #0
 8010406:	d158      	bne.n	80104ba <_vfiprintf_r+0x852>
 8010408:	ae11      	add	r6, sp, #68	@ 0x44
 801040a:	e6b5      	b.n	8010178 <_vfiprintf_r+0x510>
 801040c:	9800      	ldr	r0, [sp, #0]
 801040e:	aa0e      	add	r2, sp, #56	@ 0x38
 8010410:	4639      	mov	r1, r7
 8010412:	f7ff fbf7 	bl	800fc04 <__sprint_r>
 8010416:	2800      	cmp	r0, #0
 8010418:	d14f      	bne.n	80104ba <_vfiprintf_r+0x852>
 801041a:	ae11      	add	r6, sp, #68	@ 0x44
 801041c:	e6bc      	b.n	8010198 <_vfiprintf_r+0x530>
 801041e:	2110      	movs	r1, #16
 8010420:	6071      	str	r1, [r6, #4]
 8010422:	2a07      	cmp	r2, #7
 8010424:	4461      	add	r1, ip
 8010426:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801042a:	dd08      	ble.n	801043e <_vfiprintf_r+0x7d6>
 801042c:	9800      	ldr	r0, [sp, #0]
 801042e:	aa0e      	add	r2, sp, #56	@ 0x38
 8010430:	4639      	mov	r1, r7
 8010432:	f7ff fbe7 	bl	800fc04 <__sprint_r>
 8010436:	2800      	cmp	r0, #0
 8010438:	d13f      	bne.n	80104ba <_vfiprintf_r+0x852>
 801043a:	4b4e      	ldr	r3, [pc, #312]	@ (8010574 <_vfiprintf_r+0x90c>)
 801043c:	a811      	add	r0, sp, #68	@ 0x44
 801043e:	3d10      	subs	r5, #16
 8010440:	4606      	mov	r6, r0
 8010442:	e6b2      	b.n	80101aa <_vfiprintf_r+0x542>
 8010444:	4606      	mov	r6, r0
 8010446:	e6ca      	b.n	80101de <_vfiprintf_r+0x576>
 8010448:	2010      	movs	r0, #16
 801044a:	4402      	add	r2, r0
 801044c:	2b07      	cmp	r3, #7
 801044e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010452:	6070      	str	r0, [r6, #4]
 8010454:	dd06      	ble.n	8010464 <_vfiprintf_r+0x7fc>
 8010456:	9800      	ldr	r0, [sp, #0]
 8010458:	aa0e      	add	r2, sp, #56	@ 0x38
 801045a:	4639      	mov	r1, r7
 801045c:	f7ff fbd2 	bl	800fc04 <__sprint_r>
 8010460:	bb58      	cbnz	r0, 80104ba <_vfiprintf_r+0x852>
 8010462:	a911      	add	r1, sp, #68	@ 0x44
 8010464:	3c10      	subs	r4, #16
 8010466:	460e      	mov	r6, r1
 8010468:	e6bd      	b.n	80101e6 <_vfiprintf_r+0x57e>
 801046a:	460e      	mov	r6, r1
 801046c:	e6d6      	b.n	801021c <_vfiprintf_r+0x5b4>
 801046e:	9800      	ldr	r0, [sp, #0]
 8010470:	aa0e      	add	r2, sp, #56	@ 0x38
 8010472:	4639      	mov	r1, r7
 8010474:	f7ff fbc6 	bl	800fc04 <__sprint_r>
 8010478:	b9f8      	cbnz	r0, 80104ba <_vfiprintf_r+0x852>
 801047a:	ab11      	add	r3, sp, #68	@ 0x44
 801047c:	e6de      	b.n	801023c <_vfiprintf_r+0x5d4>
 801047e:	9a02      	ldr	r2, [sp, #8]
 8010480:	9904      	ldr	r1, [sp, #16]
 8010482:	1a54      	subs	r4, r2, r1
 8010484:	2c00      	cmp	r4, #0
 8010486:	f77f aedd 	ble.w	8010244 <_vfiprintf_r+0x5dc>
 801048a:	4d39      	ldr	r5, [pc, #228]	@ (8010570 <_vfiprintf_r+0x908>)
 801048c:	2610      	movs	r6, #16
 801048e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8010492:	2c10      	cmp	r4, #16
 8010494:	f102 0201 	add.w	r2, r2, #1
 8010498:	601d      	str	r5, [r3, #0]
 801049a:	dc1d      	bgt.n	80104d8 <_vfiprintf_r+0x870>
 801049c:	605c      	str	r4, [r3, #4]
 801049e:	2a07      	cmp	r2, #7
 80104a0:	440c      	add	r4, r1
 80104a2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80104a6:	f77f aecd 	ble.w	8010244 <_vfiprintf_r+0x5dc>
 80104aa:	9800      	ldr	r0, [sp, #0]
 80104ac:	aa0e      	add	r2, sp, #56	@ 0x38
 80104ae:	4639      	mov	r1, r7
 80104b0:	f7ff fba8 	bl	800fc04 <__sprint_r>
 80104b4:	2800      	cmp	r0, #0
 80104b6:	f43f aec5 	beq.w	8010244 <_vfiprintf_r+0x5dc>
 80104ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104bc:	07d9      	lsls	r1, r3, #31
 80104be:	d405      	bmi.n	80104cc <_vfiprintf_r+0x864>
 80104c0:	89bb      	ldrh	r3, [r7, #12]
 80104c2:	059a      	lsls	r2, r3, #22
 80104c4:	d402      	bmi.n	80104cc <_vfiprintf_r+0x864>
 80104c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80104c8:	f7fc f87b 	bl	800c5c2 <__retarget_lock_release_recursive>
 80104cc:	89bb      	ldrh	r3, [r7, #12]
 80104ce:	065b      	lsls	r3, r3, #25
 80104d0:	f57f abfb 	bpl.w	800fcca <_vfiprintf_r+0x62>
 80104d4:	f7ff bbf6 	b.w	800fcc4 <_vfiprintf_r+0x5c>
 80104d8:	3110      	adds	r1, #16
 80104da:	2a07      	cmp	r2, #7
 80104dc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80104e0:	605e      	str	r6, [r3, #4]
 80104e2:	dc02      	bgt.n	80104ea <_vfiprintf_r+0x882>
 80104e4:	3308      	adds	r3, #8
 80104e6:	3c10      	subs	r4, #16
 80104e8:	e7d1      	b.n	801048e <_vfiprintf_r+0x826>
 80104ea:	9800      	ldr	r0, [sp, #0]
 80104ec:	aa0e      	add	r2, sp, #56	@ 0x38
 80104ee:	4639      	mov	r1, r7
 80104f0:	f7ff fb88 	bl	800fc04 <__sprint_r>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d1e0      	bne.n	80104ba <_vfiprintf_r+0x852>
 80104f8:	ab11      	add	r3, sp, #68	@ 0x44
 80104fa:	e7f4      	b.n	80104e6 <_vfiprintf_r+0x87e>
 80104fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80104fe:	b913      	cbnz	r3, 8010506 <_vfiprintf_r+0x89e>
 8010500:	2300      	movs	r3, #0
 8010502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010504:	e7d9      	b.n	80104ba <_vfiprintf_r+0x852>
 8010506:	9800      	ldr	r0, [sp, #0]
 8010508:	aa0e      	add	r2, sp, #56	@ 0x38
 801050a:	4639      	mov	r1, r7
 801050c:	f7ff fb7a 	bl	800fc04 <__sprint_r>
 8010510:	2800      	cmp	r0, #0
 8010512:	d0f5      	beq.n	8010500 <_vfiprintf_r+0x898>
 8010514:	e7d1      	b.n	80104ba <_vfiprintf_r+0x852>
 8010516:	ea54 0205 	orrs.w	r2, r4, r5
 801051a:	f8cd a010 	str.w	sl, [sp, #16]
 801051e:	f43f ada6 	beq.w	801006e <_vfiprintf_r+0x406>
 8010522:	2b01      	cmp	r3, #1
 8010524:	f43f aedf 	beq.w	80102e6 <_vfiprintf_r+0x67e>
 8010528:	2b02      	cmp	r3, #2
 801052a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801052e:	f43f af28 	beq.w	8010382 <_vfiprintf_r+0x71a>
 8010532:	f004 0307 	and.w	r3, r4, #7
 8010536:	08e4      	lsrs	r4, r4, #3
 8010538:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801053c:	08ed      	lsrs	r5, r5, #3
 801053e:	3330      	adds	r3, #48	@ 0x30
 8010540:	ea54 0105 	orrs.w	r1, r4, r5
 8010544:	464a      	mov	r2, r9
 8010546:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801054a:	d1f2      	bne.n	8010532 <_vfiprintf_r+0x8ca>
 801054c:	9904      	ldr	r1, [sp, #16]
 801054e:	07c8      	lsls	r0, r1, #31
 8010550:	d506      	bpl.n	8010560 <_vfiprintf_r+0x8f8>
 8010552:	2b30      	cmp	r3, #48	@ 0x30
 8010554:	d004      	beq.n	8010560 <_vfiprintf_r+0x8f8>
 8010556:	2330      	movs	r3, #48	@ 0x30
 8010558:	f809 3c01 	strb.w	r3, [r9, #-1]
 801055c:	f1a2 0902 	sub.w	r9, r2, #2
 8010560:	ab3a      	add	r3, sp, #232	@ 0xe8
 8010562:	eba3 0309 	sub.w	r3, r3, r9
 8010566:	9c01      	ldr	r4, [sp, #4]
 8010568:	f8dd a010 	ldr.w	sl, [sp, #16]
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	e5bb      	b.n	80100e8 <_vfiprintf_r+0x480>
 8010570:	08011c9d 	.word	0x08011c9d
 8010574:	08011c8d 	.word	0x08011c8d

08010578 <__sbprintf>:
 8010578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801057a:	461f      	mov	r7, r3
 801057c:	898b      	ldrh	r3, [r1, #12]
 801057e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8010582:	f023 0302 	bic.w	r3, r3, #2
 8010586:	f8ad 300c 	strh.w	r3, [sp, #12]
 801058a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801058c:	9319      	str	r3, [sp, #100]	@ 0x64
 801058e:	89cb      	ldrh	r3, [r1, #14]
 8010590:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010594:	69cb      	ldr	r3, [r1, #28]
 8010596:	9307      	str	r3, [sp, #28]
 8010598:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801059a:	9309      	str	r3, [sp, #36]	@ 0x24
 801059c:	ab1a      	add	r3, sp, #104	@ 0x68
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	9304      	str	r3, [sp, #16]
 80105a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105a6:	4615      	mov	r5, r2
 80105a8:	4606      	mov	r6, r0
 80105aa:	9302      	str	r3, [sp, #8]
 80105ac:	9305      	str	r3, [sp, #20]
 80105ae:	a816      	add	r0, sp, #88	@ 0x58
 80105b0:	2300      	movs	r3, #0
 80105b2:	460c      	mov	r4, r1
 80105b4:	9306      	str	r3, [sp, #24]
 80105b6:	f7fc f801 	bl	800c5bc <__retarget_lock_init_recursive>
 80105ba:	462a      	mov	r2, r5
 80105bc:	463b      	mov	r3, r7
 80105be:	4669      	mov	r1, sp
 80105c0:	4630      	mov	r0, r6
 80105c2:	f7ff fb51 	bl	800fc68 <_vfiprintf_r>
 80105c6:	1e05      	subs	r5, r0, #0
 80105c8:	db07      	blt.n	80105da <__sbprintf+0x62>
 80105ca:	4669      	mov	r1, sp
 80105cc:	4630      	mov	r0, r6
 80105ce:	f7fd fbe7 	bl	800dda0 <_fflush_r>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	bf18      	it	ne
 80105d6:	f04f 35ff 	movne.w	r5, #4294967295
 80105da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80105de:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80105e0:	065b      	lsls	r3, r3, #25
 80105e2:	bf42      	ittt	mi
 80105e4:	89a3      	ldrhmi	r3, [r4, #12]
 80105e6:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80105ea:	81a3      	strhmi	r3, [r4, #12]
 80105ec:	f7fb ffe7 	bl	800c5be <__retarget_lock_close_recursive>
 80105f0:	4628      	mov	r0, r5
 80105f2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80105f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080105f8 <__fputwc>:
 80105f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105fc:	4680      	mov	r8, r0
 80105fe:	460f      	mov	r7, r1
 8010600:	4614      	mov	r4, r2
 8010602:	f7fd fe27 	bl	800e254 <__locale_mb_cur_max>
 8010606:	2801      	cmp	r0, #1
 8010608:	4605      	mov	r5, r0
 801060a:	d11b      	bne.n	8010644 <__fputwc+0x4c>
 801060c:	1e7b      	subs	r3, r7, #1
 801060e:	2bfe      	cmp	r3, #254	@ 0xfe
 8010610:	d818      	bhi.n	8010644 <__fputwc+0x4c>
 8010612:	f88d 7004 	strb.w	r7, [sp, #4]
 8010616:	2600      	movs	r6, #0
 8010618:	f10d 0904 	add.w	r9, sp, #4
 801061c:	42ae      	cmp	r6, r5
 801061e:	d021      	beq.n	8010664 <__fputwc+0x6c>
 8010620:	68a3      	ldr	r3, [r4, #8]
 8010622:	f816 1009 	ldrb.w	r1, [r6, r9]
 8010626:	3b01      	subs	r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	60a3      	str	r3, [r4, #8]
 801062c:	da04      	bge.n	8010638 <__fputwc+0x40>
 801062e:	69a2      	ldr	r2, [r4, #24]
 8010630:	4293      	cmp	r3, r2
 8010632:	db1b      	blt.n	801066c <__fputwc+0x74>
 8010634:	290a      	cmp	r1, #10
 8010636:	d019      	beq.n	801066c <__fputwc+0x74>
 8010638:	6823      	ldr	r3, [r4, #0]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	6022      	str	r2, [r4, #0]
 801063e:	7019      	strb	r1, [r3, #0]
 8010640:	3601      	adds	r6, #1
 8010642:	e7eb      	b.n	801061c <__fputwc+0x24>
 8010644:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8010648:	463a      	mov	r2, r7
 801064a:	a901      	add	r1, sp, #4
 801064c:	4640      	mov	r0, r8
 801064e:	f000 f845 	bl	80106dc <_wcrtomb_r>
 8010652:	1c43      	adds	r3, r0, #1
 8010654:	4605      	mov	r5, r0
 8010656:	d1de      	bne.n	8010616 <__fputwc+0x1e>
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	f04f 37ff 	mov.w	r7, #4294967295
 8010664:	4638      	mov	r0, r7
 8010666:	b003      	add	sp, #12
 8010668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801066c:	4622      	mov	r2, r4
 801066e:	4640      	mov	r0, r8
 8010670:	f000 f84a 	bl	8010708 <__swbuf_r>
 8010674:	3001      	adds	r0, #1
 8010676:	d1e3      	bne.n	8010640 <__fputwc+0x48>
 8010678:	e7f2      	b.n	8010660 <__fputwc+0x68>

0801067a <_fputwc_r>:
 801067a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 801067c:	07db      	lsls	r3, r3, #31
 801067e:	b570      	push	{r4, r5, r6, lr}
 8010680:	4605      	mov	r5, r0
 8010682:	460e      	mov	r6, r1
 8010684:	4614      	mov	r4, r2
 8010686:	d405      	bmi.n	8010694 <_fputwc_r+0x1a>
 8010688:	8993      	ldrh	r3, [r2, #12]
 801068a:	0598      	lsls	r0, r3, #22
 801068c:	d402      	bmi.n	8010694 <_fputwc_r+0x1a>
 801068e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8010690:	f7fb ff96 	bl	800c5c0 <__retarget_lock_acquire_recursive>
 8010694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010698:	0499      	lsls	r1, r3, #18
 801069a:	d406      	bmi.n	80106aa <_fputwc_r+0x30>
 801069c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80106a0:	81a3      	strh	r3, [r4, #12]
 80106a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80106a8:	6663      	str	r3, [r4, #100]	@ 0x64
 80106aa:	4622      	mov	r2, r4
 80106ac:	4628      	mov	r0, r5
 80106ae:	4631      	mov	r1, r6
 80106b0:	f7ff ffa2 	bl	80105f8 <__fputwc>
 80106b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106b6:	07da      	lsls	r2, r3, #31
 80106b8:	4605      	mov	r5, r0
 80106ba:	d405      	bmi.n	80106c8 <_fputwc_r+0x4e>
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	059b      	lsls	r3, r3, #22
 80106c0:	d402      	bmi.n	80106c8 <_fputwc_r+0x4e>
 80106c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106c4:	f7fb ff7d 	bl	800c5c2 <__retarget_lock_release_recursive>
 80106c8:	4628      	mov	r0, r5
 80106ca:	bd70      	pop	{r4, r5, r6, pc}

080106cc <abort>:
 80106cc:	b508      	push	{r3, lr}
 80106ce:	2006      	movs	r0, #6
 80106d0:	f000 f88c 	bl	80107ec <raise>
 80106d4:	2001      	movs	r0, #1
 80106d6:	f7f2 fa43 	bl	8002b60 <_exit>
	...

080106dc <_wcrtomb_r>:
 80106dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106de:	4c09      	ldr	r4, [pc, #36]	@ (8010704 <_wcrtomb_r+0x28>)
 80106e0:	b085      	sub	sp, #20
 80106e2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80106e6:	4605      	mov	r5, r0
 80106e8:	461e      	mov	r6, r3
 80106ea:	b909      	cbnz	r1, 80106f0 <_wcrtomb_r+0x14>
 80106ec:	460a      	mov	r2, r1
 80106ee:	a901      	add	r1, sp, #4
 80106f0:	47b8      	blx	r7
 80106f2:	1c43      	adds	r3, r0, #1
 80106f4:	bf01      	itttt	eq
 80106f6:	2300      	moveq	r3, #0
 80106f8:	6033      	streq	r3, [r6, #0]
 80106fa:	238a      	moveq	r3, #138	@ 0x8a
 80106fc:	602b      	streq	r3, [r5, #0]
 80106fe:	b005      	add	sp, #20
 8010700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010702:	bf00      	nop
 8010704:	2000055c 	.word	0x2000055c

08010708 <__swbuf_r>:
 8010708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070a:	460e      	mov	r6, r1
 801070c:	4614      	mov	r4, r2
 801070e:	4605      	mov	r5, r0
 8010710:	b118      	cbz	r0, 801071a <__swbuf_r+0x12>
 8010712:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010714:	b90b      	cbnz	r3, 801071a <__swbuf_r+0x12>
 8010716:	f7fb fd27 	bl	800c168 <__sinit>
 801071a:	69a3      	ldr	r3, [r4, #24]
 801071c:	60a3      	str	r3, [r4, #8]
 801071e:	89a3      	ldrh	r3, [r4, #12]
 8010720:	0719      	lsls	r1, r3, #28
 8010722:	d501      	bpl.n	8010728 <__swbuf_r+0x20>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	b943      	cbnz	r3, 801073a <__swbuf_r+0x32>
 8010728:	4621      	mov	r1, r4
 801072a:	4628      	mov	r0, r5
 801072c:	f7fd fd0e 	bl	800e14c <__swsetup_r>
 8010730:	b118      	cbz	r0, 801073a <__swbuf_r+0x32>
 8010732:	f04f 37ff 	mov.w	r7, #4294967295
 8010736:	4638      	mov	r0, r7
 8010738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801073a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801073e:	b2f6      	uxtb	r6, r6
 8010740:	049a      	lsls	r2, r3, #18
 8010742:	4637      	mov	r7, r6
 8010744:	d406      	bmi.n	8010754 <__swbuf_r+0x4c>
 8010746:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801074a:	81a3      	strh	r3, [r4, #12]
 801074c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801074e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010752:	6663      	str	r3, [r4, #100]	@ 0x64
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	6922      	ldr	r2, [r4, #16]
 8010758:	1a98      	subs	r0, r3, r2
 801075a:	6963      	ldr	r3, [r4, #20]
 801075c:	4283      	cmp	r3, r0
 801075e:	dc05      	bgt.n	801076c <__swbuf_r+0x64>
 8010760:	4621      	mov	r1, r4
 8010762:	4628      	mov	r0, r5
 8010764:	f7fd fb1c 	bl	800dda0 <_fflush_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	d1e2      	bne.n	8010732 <__swbuf_r+0x2a>
 801076c:	68a3      	ldr	r3, [r4, #8]
 801076e:	3b01      	subs	r3, #1
 8010770:	60a3      	str	r3, [r4, #8]
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	6022      	str	r2, [r4, #0]
 8010778:	701e      	strb	r6, [r3, #0]
 801077a:	6962      	ldr	r2, [r4, #20]
 801077c:	1c43      	adds	r3, r0, #1
 801077e:	429a      	cmp	r2, r3
 8010780:	d004      	beq.n	801078c <__swbuf_r+0x84>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	07db      	lsls	r3, r3, #31
 8010786:	d5d6      	bpl.n	8010736 <__swbuf_r+0x2e>
 8010788:	2e0a      	cmp	r6, #10
 801078a:	d1d4      	bne.n	8010736 <__swbuf_r+0x2e>
 801078c:	4621      	mov	r1, r4
 801078e:	4628      	mov	r0, r5
 8010790:	f7fd fb06 	bl	800dda0 <_fflush_r>
 8010794:	2800      	cmp	r0, #0
 8010796:	d0ce      	beq.n	8010736 <__swbuf_r+0x2e>
 8010798:	e7cb      	b.n	8010732 <__swbuf_r+0x2a>

0801079a <_raise_r>:
 801079a:	291f      	cmp	r1, #31
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	4605      	mov	r5, r0
 80107a0:	460c      	mov	r4, r1
 80107a2:	d904      	bls.n	80107ae <_raise_r+0x14>
 80107a4:	2316      	movs	r3, #22
 80107a6:	6003      	str	r3, [r0, #0]
 80107a8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ac:	bd38      	pop	{r3, r4, r5, pc}
 80107ae:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80107b2:	b112      	cbz	r2, 80107ba <_raise_r+0x20>
 80107b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107b8:	b94b      	cbnz	r3, 80107ce <_raise_r+0x34>
 80107ba:	4628      	mov	r0, r5
 80107bc:	f000 f830 	bl	8010820 <_getpid_r>
 80107c0:	4622      	mov	r2, r4
 80107c2:	4601      	mov	r1, r0
 80107c4:	4628      	mov	r0, r5
 80107c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107ca:	f000 b817 	b.w	80107fc <_kill_r>
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d00a      	beq.n	80107e8 <_raise_r+0x4e>
 80107d2:	1c59      	adds	r1, r3, #1
 80107d4:	d103      	bne.n	80107de <_raise_r+0x44>
 80107d6:	2316      	movs	r3, #22
 80107d8:	6003      	str	r3, [r0, #0]
 80107da:	2001      	movs	r0, #1
 80107dc:	e7e6      	b.n	80107ac <_raise_r+0x12>
 80107de:	2100      	movs	r1, #0
 80107e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80107e4:	4620      	mov	r0, r4
 80107e6:	4798      	blx	r3
 80107e8:	2000      	movs	r0, #0
 80107ea:	e7df      	b.n	80107ac <_raise_r+0x12>

080107ec <raise>:
 80107ec:	4b02      	ldr	r3, [pc, #8]	@ (80107f8 <raise+0xc>)
 80107ee:	4601      	mov	r1, r0
 80107f0:	6818      	ldr	r0, [r3, #0]
 80107f2:	f7ff bfd2 	b.w	801079a <_raise_r>
 80107f6:	bf00      	nop
 80107f8:	20000430 	.word	0x20000430

080107fc <_kill_r>:
 80107fc:	b538      	push	{r3, r4, r5, lr}
 80107fe:	4d07      	ldr	r5, [pc, #28]	@ (801081c <_kill_r+0x20>)
 8010800:	2300      	movs	r3, #0
 8010802:	4604      	mov	r4, r0
 8010804:	4608      	mov	r0, r1
 8010806:	4611      	mov	r1, r2
 8010808:	602b      	str	r3, [r5, #0]
 801080a:	f7f2 f999 	bl	8002b40 <_kill>
 801080e:	1c43      	adds	r3, r0, #1
 8010810:	d102      	bne.n	8010818 <_kill_r+0x1c>
 8010812:	682b      	ldr	r3, [r5, #0]
 8010814:	b103      	cbz	r3, 8010818 <_kill_r+0x1c>
 8010816:	6023      	str	r3, [r4, #0]
 8010818:	bd38      	pop	{r3, r4, r5, pc}
 801081a:	bf00      	nop
 801081c:	20001710 	.word	0x20001710

08010820 <_getpid_r>:
 8010820:	f7f2 b986 	b.w	8002b30 <_getpid>
 8010824:	0000      	movs	r0, r0
	...

08010828 <sin>:
 8010828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801082a:	ec53 2b10 	vmov	r2, r3, d0
 801082e:	4826      	ldr	r0, [pc, #152]	@ (80108c8 <sin+0xa0>)
 8010830:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010834:	4281      	cmp	r1, r0
 8010836:	d807      	bhi.n	8010848 <sin+0x20>
 8010838:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80108c0 <sin+0x98>
 801083c:	2000      	movs	r0, #0
 801083e:	b005      	add	sp, #20
 8010840:	f85d eb04 	ldr.w	lr, [sp], #4
 8010844:	f000 b90c 	b.w	8010a60 <__kernel_sin>
 8010848:	4820      	ldr	r0, [pc, #128]	@ (80108cc <sin+0xa4>)
 801084a:	4281      	cmp	r1, r0
 801084c:	d908      	bls.n	8010860 <sin+0x38>
 801084e:	4610      	mov	r0, r2
 8010850:	4619      	mov	r1, r3
 8010852:	f7ef fd41 	bl	80002d8 <__aeabi_dsub>
 8010856:	ec41 0b10 	vmov	d0, r0, r1
 801085a:	b005      	add	sp, #20
 801085c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010860:	4668      	mov	r0, sp
 8010862:	f000 f9b9 	bl	8010bd8 <__ieee754_rem_pio2>
 8010866:	f000 0003 	and.w	r0, r0, #3
 801086a:	2801      	cmp	r0, #1
 801086c:	d00c      	beq.n	8010888 <sin+0x60>
 801086e:	2802      	cmp	r0, #2
 8010870:	d011      	beq.n	8010896 <sin+0x6e>
 8010872:	b9e8      	cbnz	r0, 80108b0 <sin+0x88>
 8010874:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010878:	ed9d 0b00 	vldr	d0, [sp]
 801087c:	2001      	movs	r0, #1
 801087e:	f000 f8ef 	bl	8010a60 <__kernel_sin>
 8010882:	ec51 0b10 	vmov	r0, r1, d0
 8010886:	e7e6      	b.n	8010856 <sin+0x2e>
 8010888:	ed9d 1b02 	vldr	d1, [sp, #8]
 801088c:	ed9d 0b00 	vldr	d0, [sp]
 8010890:	f000 f81e 	bl	80108d0 <__kernel_cos>
 8010894:	e7f5      	b.n	8010882 <sin+0x5a>
 8010896:	ed9d 1b02 	vldr	d1, [sp, #8]
 801089a:	ed9d 0b00 	vldr	d0, [sp]
 801089e:	2001      	movs	r0, #1
 80108a0:	f000 f8de 	bl	8010a60 <__kernel_sin>
 80108a4:	ec53 2b10 	vmov	r2, r3, d0
 80108a8:	4610      	mov	r0, r2
 80108aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80108ae:	e7d2      	b.n	8010856 <sin+0x2e>
 80108b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108b4:	ed9d 0b00 	vldr	d0, [sp]
 80108b8:	f000 f80a 	bl	80108d0 <__kernel_cos>
 80108bc:	e7f2      	b.n	80108a4 <sin+0x7c>
 80108be:	bf00      	nop
	...
 80108c8:	3fe921fb 	.word	0x3fe921fb
 80108cc:	7fefffff 	.word	0x7fefffff

080108d0 <__kernel_cos>:
 80108d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	ec57 6b10 	vmov	r6, r7, d0
 80108d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80108dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80108e0:	ed8d 1b00 	vstr	d1, [sp]
 80108e4:	d206      	bcs.n	80108f4 <__kernel_cos+0x24>
 80108e6:	4630      	mov	r0, r6
 80108e8:	4639      	mov	r1, r7
 80108ea:	f7f0 f95d 	bl	8000ba8 <__aeabi_d2iz>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f000 8088 	beq.w	8010a04 <__kernel_cos+0x134>
 80108f4:	4632      	mov	r2, r6
 80108f6:	463b      	mov	r3, r7
 80108f8:	4630      	mov	r0, r6
 80108fa:	4639      	mov	r1, r7
 80108fc:	f7ef fea4 	bl	8000648 <__aeabi_dmul>
 8010900:	4b51      	ldr	r3, [pc, #324]	@ (8010a48 <__kernel_cos+0x178>)
 8010902:	2200      	movs	r2, #0
 8010904:	4604      	mov	r4, r0
 8010906:	460d      	mov	r5, r1
 8010908:	f7ef fe9e 	bl	8000648 <__aeabi_dmul>
 801090c:	a340      	add	r3, pc, #256	@ (adr r3, 8010a10 <__kernel_cos+0x140>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	4682      	mov	sl, r0
 8010914:	468b      	mov	fp, r1
 8010916:	4620      	mov	r0, r4
 8010918:	4629      	mov	r1, r5
 801091a:	f7ef fe95 	bl	8000648 <__aeabi_dmul>
 801091e:	a33e      	add	r3, pc, #248	@ (adr r3, 8010a18 <__kernel_cos+0x148>)
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	f7ef fcda 	bl	80002dc <__adddf3>
 8010928:	4622      	mov	r2, r4
 801092a:	462b      	mov	r3, r5
 801092c:	f7ef fe8c 	bl	8000648 <__aeabi_dmul>
 8010930:	a33b      	add	r3, pc, #236	@ (adr r3, 8010a20 <__kernel_cos+0x150>)
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	f7ef fccf 	bl	80002d8 <__aeabi_dsub>
 801093a:	4622      	mov	r2, r4
 801093c:	462b      	mov	r3, r5
 801093e:	f7ef fe83 	bl	8000648 <__aeabi_dmul>
 8010942:	a339      	add	r3, pc, #228	@ (adr r3, 8010a28 <__kernel_cos+0x158>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	f7ef fcc8 	bl	80002dc <__adddf3>
 801094c:	4622      	mov	r2, r4
 801094e:	462b      	mov	r3, r5
 8010950:	f7ef fe7a 	bl	8000648 <__aeabi_dmul>
 8010954:	a336      	add	r3, pc, #216	@ (adr r3, 8010a30 <__kernel_cos+0x160>)
 8010956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095a:	f7ef fcbd 	bl	80002d8 <__aeabi_dsub>
 801095e:	4622      	mov	r2, r4
 8010960:	462b      	mov	r3, r5
 8010962:	f7ef fe71 	bl	8000648 <__aeabi_dmul>
 8010966:	a334      	add	r3, pc, #208	@ (adr r3, 8010a38 <__kernel_cos+0x168>)
 8010968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096c:	f7ef fcb6 	bl	80002dc <__adddf3>
 8010970:	4622      	mov	r2, r4
 8010972:	462b      	mov	r3, r5
 8010974:	f7ef fe68 	bl	8000648 <__aeabi_dmul>
 8010978:	4622      	mov	r2, r4
 801097a:	462b      	mov	r3, r5
 801097c:	f7ef fe64 	bl	8000648 <__aeabi_dmul>
 8010980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010984:	4604      	mov	r4, r0
 8010986:	460d      	mov	r5, r1
 8010988:	4630      	mov	r0, r6
 801098a:	4639      	mov	r1, r7
 801098c:	f7ef fe5c 	bl	8000648 <__aeabi_dmul>
 8010990:	460b      	mov	r3, r1
 8010992:	4602      	mov	r2, r0
 8010994:	4629      	mov	r1, r5
 8010996:	4620      	mov	r0, r4
 8010998:	f7ef fc9e 	bl	80002d8 <__aeabi_dsub>
 801099c:	4b2b      	ldr	r3, [pc, #172]	@ (8010a4c <__kernel_cos+0x17c>)
 801099e:	4598      	cmp	r8, r3
 80109a0:	4606      	mov	r6, r0
 80109a2:	460f      	mov	r7, r1
 80109a4:	d810      	bhi.n	80109c8 <__kernel_cos+0xf8>
 80109a6:	4602      	mov	r2, r0
 80109a8:	460b      	mov	r3, r1
 80109aa:	4650      	mov	r0, sl
 80109ac:	4659      	mov	r1, fp
 80109ae:	f7ef fc93 	bl	80002d8 <__aeabi_dsub>
 80109b2:	460b      	mov	r3, r1
 80109b4:	4926      	ldr	r1, [pc, #152]	@ (8010a50 <__kernel_cos+0x180>)
 80109b6:	4602      	mov	r2, r0
 80109b8:	2000      	movs	r0, #0
 80109ba:	f7ef fc8d 	bl	80002d8 <__aeabi_dsub>
 80109be:	ec41 0b10 	vmov	d0, r0, r1
 80109c2:	b003      	add	sp, #12
 80109c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c8:	4b22      	ldr	r3, [pc, #136]	@ (8010a54 <__kernel_cos+0x184>)
 80109ca:	4921      	ldr	r1, [pc, #132]	@ (8010a50 <__kernel_cos+0x180>)
 80109cc:	4598      	cmp	r8, r3
 80109ce:	bf8c      	ite	hi
 80109d0:	4d21      	ldrhi	r5, [pc, #132]	@ (8010a58 <__kernel_cos+0x188>)
 80109d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80109d6:	2400      	movs	r4, #0
 80109d8:	4622      	mov	r2, r4
 80109da:	462b      	mov	r3, r5
 80109dc:	2000      	movs	r0, #0
 80109de:	f7ef fc7b 	bl	80002d8 <__aeabi_dsub>
 80109e2:	4622      	mov	r2, r4
 80109e4:	4680      	mov	r8, r0
 80109e6:	4689      	mov	r9, r1
 80109e8:	462b      	mov	r3, r5
 80109ea:	4650      	mov	r0, sl
 80109ec:	4659      	mov	r1, fp
 80109ee:	f7ef fc73 	bl	80002d8 <__aeabi_dsub>
 80109f2:	4632      	mov	r2, r6
 80109f4:	463b      	mov	r3, r7
 80109f6:	f7ef fc6f 	bl	80002d8 <__aeabi_dsub>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	4640      	mov	r0, r8
 8010a00:	4649      	mov	r1, r9
 8010a02:	e7da      	b.n	80109ba <__kernel_cos+0xea>
 8010a04:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010a40 <__kernel_cos+0x170>
 8010a08:	e7db      	b.n	80109c2 <__kernel_cos+0xf2>
 8010a0a:	bf00      	nop
 8010a0c:	f3af 8000 	nop.w
 8010a10:	be8838d4 	.word	0xbe8838d4
 8010a14:	bda8fae9 	.word	0xbda8fae9
 8010a18:	bdb4b1c4 	.word	0xbdb4b1c4
 8010a1c:	3e21ee9e 	.word	0x3e21ee9e
 8010a20:	809c52ad 	.word	0x809c52ad
 8010a24:	3e927e4f 	.word	0x3e927e4f
 8010a28:	19cb1590 	.word	0x19cb1590
 8010a2c:	3efa01a0 	.word	0x3efa01a0
 8010a30:	16c15177 	.word	0x16c15177
 8010a34:	3f56c16c 	.word	0x3f56c16c
 8010a38:	5555554c 	.word	0x5555554c
 8010a3c:	3fa55555 	.word	0x3fa55555
 8010a40:	00000000 	.word	0x00000000
 8010a44:	3ff00000 	.word	0x3ff00000
 8010a48:	3fe00000 	.word	0x3fe00000
 8010a4c:	3fd33332 	.word	0x3fd33332
 8010a50:	3ff00000 	.word	0x3ff00000
 8010a54:	3fe90000 	.word	0x3fe90000
 8010a58:	3fd20000 	.word	0x3fd20000
 8010a5c:	00000000 	.word	0x00000000

08010a60 <__kernel_sin>:
 8010a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	ec55 4b10 	vmov	r4, r5, d0
 8010a68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010a6c:	b085      	sub	sp, #20
 8010a6e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010a72:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010a76:	4680      	mov	r8, r0
 8010a78:	d205      	bcs.n	8010a86 <__kernel_sin+0x26>
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	f7f0 f893 	bl	8000ba8 <__aeabi_d2iz>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d052      	beq.n	8010b2c <__kernel_sin+0xcc>
 8010a86:	4622      	mov	r2, r4
 8010a88:	462b      	mov	r3, r5
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	f7ef fddb 	bl	8000648 <__aeabi_dmul>
 8010a92:	4682      	mov	sl, r0
 8010a94:	468b      	mov	fp, r1
 8010a96:	4602      	mov	r2, r0
 8010a98:	460b      	mov	r3, r1
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	f7ef fdd3 	bl	8000648 <__aeabi_dmul>
 8010aa2:	a342      	add	r3, pc, #264	@ (adr r3, 8010bac <__kernel_sin+0x14c>)
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	e9cd 0100 	strd	r0, r1, [sp]
 8010aac:	4650      	mov	r0, sl
 8010aae:	4659      	mov	r1, fp
 8010ab0:	f7ef fdca 	bl	8000648 <__aeabi_dmul>
 8010ab4:	a33f      	add	r3, pc, #252	@ (adr r3, 8010bb4 <__kernel_sin+0x154>)
 8010ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aba:	f7ef fc0d 	bl	80002d8 <__aeabi_dsub>
 8010abe:	4652      	mov	r2, sl
 8010ac0:	465b      	mov	r3, fp
 8010ac2:	f7ef fdc1 	bl	8000648 <__aeabi_dmul>
 8010ac6:	a33d      	add	r3, pc, #244	@ (adr r3, 8010bbc <__kernel_sin+0x15c>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	f7ef fc06 	bl	80002dc <__adddf3>
 8010ad0:	4652      	mov	r2, sl
 8010ad2:	465b      	mov	r3, fp
 8010ad4:	f7ef fdb8 	bl	8000648 <__aeabi_dmul>
 8010ad8:	a33a      	add	r3, pc, #232	@ (adr r3, 8010bc4 <__kernel_sin+0x164>)
 8010ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ade:	f7ef fbfb 	bl	80002d8 <__aeabi_dsub>
 8010ae2:	4652      	mov	r2, sl
 8010ae4:	465b      	mov	r3, fp
 8010ae6:	f7ef fdaf 	bl	8000648 <__aeabi_dmul>
 8010aea:	a338      	add	r3, pc, #224	@ (adr r3, 8010bcc <__kernel_sin+0x16c>)
 8010aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af0:	f7ef fbf4 	bl	80002dc <__adddf3>
 8010af4:	4606      	mov	r6, r0
 8010af6:	460f      	mov	r7, r1
 8010af8:	f1b8 0f00 	cmp.w	r8, #0
 8010afc:	d11b      	bne.n	8010b36 <__kernel_sin+0xd6>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	4650      	mov	r0, sl
 8010b04:	4659      	mov	r1, fp
 8010b06:	f7ef fd9f 	bl	8000648 <__aeabi_dmul>
 8010b0a:	a325      	add	r3, pc, #148	@ (adr r3, 8010ba0 <__kernel_sin+0x140>)
 8010b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b10:	f7ef fbe2 	bl	80002d8 <__aeabi_dsub>
 8010b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b18:	f7ef fd96 	bl	8000648 <__aeabi_dmul>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	4620      	mov	r0, r4
 8010b22:	4629      	mov	r1, r5
 8010b24:	f7ef fbda 	bl	80002dc <__adddf3>
 8010b28:	4604      	mov	r4, r0
 8010b2a:	460d      	mov	r5, r1
 8010b2c:	ec45 4b10 	vmov	d0, r4, r5
 8010b30:	b005      	add	sp, #20
 8010b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8010ba8 <__kernel_sin+0x148>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f7ef fd83 	bl	8000648 <__aeabi_dmul>
 8010b42:	4632      	mov	r2, r6
 8010b44:	4680      	mov	r8, r0
 8010b46:	4689      	mov	r9, r1
 8010b48:	463b      	mov	r3, r7
 8010b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b4e:	f7ef fd7b 	bl	8000648 <__aeabi_dmul>
 8010b52:	4602      	mov	r2, r0
 8010b54:	460b      	mov	r3, r1
 8010b56:	4640      	mov	r0, r8
 8010b58:	4649      	mov	r1, r9
 8010b5a:	f7ef fbbd 	bl	80002d8 <__aeabi_dsub>
 8010b5e:	4652      	mov	r2, sl
 8010b60:	465b      	mov	r3, fp
 8010b62:	f7ef fd71 	bl	8000648 <__aeabi_dmul>
 8010b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b6a:	f7ef fbb5 	bl	80002d8 <__aeabi_dsub>
 8010b6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010ba0 <__kernel_sin+0x140>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	4606      	mov	r6, r0
 8010b76:	460f      	mov	r7, r1
 8010b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b7c:	f7ef fd64 	bl	8000648 <__aeabi_dmul>
 8010b80:	4602      	mov	r2, r0
 8010b82:	460b      	mov	r3, r1
 8010b84:	4630      	mov	r0, r6
 8010b86:	4639      	mov	r1, r7
 8010b88:	f7ef fba8 	bl	80002dc <__adddf3>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	460b      	mov	r3, r1
 8010b90:	4620      	mov	r0, r4
 8010b92:	4629      	mov	r1, r5
 8010b94:	f7ef fba0 	bl	80002d8 <__aeabi_dsub>
 8010b98:	e7c6      	b.n	8010b28 <__kernel_sin+0xc8>
 8010b9a:	bf00      	nop
 8010b9c:	f3af 8000 	nop.w
 8010ba0:	55555549 	.word	0x55555549
 8010ba4:	3fc55555 	.word	0x3fc55555
 8010ba8:	3fe00000 	.word	0x3fe00000
 8010bac:	5acfd57c 	.word	0x5acfd57c
 8010bb0:	3de5d93a 	.word	0x3de5d93a
 8010bb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8010bb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8010bbc:	57b1fe7d 	.word	0x57b1fe7d
 8010bc0:	3ec71de3 	.word	0x3ec71de3
 8010bc4:	19c161d5 	.word	0x19c161d5
 8010bc8:	3f2a01a0 	.word	0x3f2a01a0
 8010bcc:	1110f8a6 	.word	0x1110f8a6
 8010bd0:	3f811111 	.word	0x3f811111
 8010bd4:	00000000 	.word	0x00000000

08010bd8 <__ieee754_rem_pio2>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	ec57 6b10 	vmov	r6, r7, d0
 8010be0:	4bc5      	ldr	r3, [pc, #788]	@ (8010ef8 <__ieee754_rem_pio2+0x320>)
 8010be2:	b08d      	sub	sp, #52	@ 0x34
 8010be4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010be8:	4598      	cmp	r8, r3
 8010bea:	4604      	mov	r4, r0
 8010bec:	9704      	str	r7, [sp, #16]
 8010bee:	d807      	bhi.n	8010c00 <__ieee754_rem_pio2+0x28>
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	ed80 0b00 	vstr	d0, [r0]
 8010bf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010bfc:	2500      	movs	r5, #0
 8010bfe:	e028      	b.n	8010c52 <__ieee754_rem_pio2+0x7a>
 8010c00:	4bbe      	ldr	r3, [pc, #760]	@ (8010efc <__ieee754_rem_pio2+0x324>)
 8010c02:	4598      	cmp	r8, r3
 8010c04:	d878      	bhi.n	8010cf8 <__ieee754_rem_pio2+0x120>
 8010c06:	9b04      	ldr	r3, [sp, #16]
 8010c08:	4dbd      	ldr	r5, [pc, #756]	@ (8010f00 <__ieee754_rem_pio2+0x328>)
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010ec0 <__ieee754_rem_pio2+0x2e8>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	4639      	mov	r1, r7
 8010c16:	dd38      	ble.n	8010c8a <__ieee754_rem_pio2+0xb2>
 8010c18:	f7ef fb5e 	bl	80002d8 <__aeabi_dsub>
 8010c1c:	45a8      	cmp	r8, r5
 8010c1e:	4606      	mov	r6, r0
 8010c20:	460f      	mov	r7, r1
 8010c22:	d01a      	beq.n	8010c5a <__ieee754_rem_pio2+0x82>
 8010c24:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010ec8 <__ieee754_rem_pio2+0x2f0>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	f7ef fb55 	bl	80002d8 <__aeabi_dsub>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	460b      	mov	r3, r1
 8010c32:	4680      	mov	r8, r0
 8010c34:	4689      	mov	r9, r1
 8010c36:	4630      	mov	r0, r6
 8010c38:	4639      	mov	r1, r7
 8010c3a:	f7ef fb4d 	bl	80002d8 <__aeabi_dsub>
 8010c3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010ec8 <__ieee754_rem_pio2+0x2f0>)
 8010c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c44:	f7ef fb48 	bl	80002d8 <__aeabi_dsub>
 8010c48:	e9c4 8900 	strd	r8, r9, [r4]
 8010c4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c50:	2501      	movs	r5, #1
 8010c52:	4628      	mov	r0, r5
 8010c54:	b00d      	add	sp, #52	@ 0x34
 8010c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5a:	a39d      	add	r3, pc, #628	@ (adr r3, 8010ed0 <__ieee754_rem_pio2+0x2f8>)
 8010c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c60:	f7ef fb3a 	bl	80002d8 <__aeabi_dsub>
 8010c64:	a39c      	add	r3, pc, #624	@ (adr r3, 8010ed8 <__ieee754_rem_pio2+0x300>)
 8010c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	460f      	mov	r7, r1
 8010c6e:	f7ef fb33 	bl	80002d8 <__aeabi_dsub>
 8010c72:	4602      	mov	r2, r0
 8010c74:	460b      	mov	r3, r1
 8010c76:	4680      	mov	r8, r0
 8010c78:	4689      	mov	r9, r1
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	f7ef fb2b 	bl	80002d8 <__aeabi_dsub>
 8010c82:	a395      	add	r3, pc, #596	@ (adr r3, 8010ed8 <__ieee754_rem_pio2+0x300>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	e7dc      	b.n	8010c44 <__ieee754_rem_pio2+0x6c>
 8010c8a:	f7ef fb27 	bl	80002dc <__adddf3>
 8010c8e:	45a8      	cmp	r8, r5
 8010c90:	4606      	mov	r6, r0
 8010c92:	460f      	mov	r7, r1
 8010c94:	d018      	beq.n	8010cc8 <__ieee754_rem_pio2+0xf0>
 8010c96:	a38c      	add	r3, pc, #560	@ (adr r3, 8010ec8 <__ieee754_rem_pio2+0x2f0>)
 8010c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9c:	f7ef fb1e 	bl	80002dc <__adddf3>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	4689      	mov	r9, r1
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f7ef fb14 	bl	80002d8 <__aeabi_dsub>
 8010cb0:	a385      	add	r3, pc, #532	@ (adr r3, 8010ec8 <__ieee754_rem_pio2+0x2f0>)
 8010cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb6:	f7ef fb11 	bl	80002dc <__adddf3>
 8010cba:	f04f 35ff 	mov.w	r5, #4294967295
 8010cbe:	e9c4 8900 	strd	r8, r9, [r4]
 8010cc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010cc6:	e7c4      	b.n	8010c52 <__ieee754_rem_pio2+0x7a>
 8010cc8:	a381      	add	r3, pc, #516	@ (adr r3, 8010ed0 <__ieee754_rem_pio2+0x2f8>)
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	f7ef fb05 	bl	80002dc <__adddf3>
 8010cd2:	a381      	add	r3, pc, #516	@ (adr r3, 8010ed8 <__ieee754_rem_pio2+0x300>)
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	4606      	mov	r6, r0
 8010cda:	460f      	mov	r7, r1
 8010cdc:	f7ef fafe 	bl	80002dc <__adddf3>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	4680      	mov	r8, r0
 8010ce6:	4689      	mov	r9, r1
 8010ce8:	4630      	mov	r0, r6
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7ef faf4 	bl	80002d8 <__aeabi_dsub>
 8010cf0:	a379      	add	r3, pc, #484	@ (adr r3, 8010ed8 <__ieee754_rem_pio2+0x300>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	e7de      	b.n	8010cb6 <__ieee754_rem_pio2+0xde>
 8010cf8:	4b82      	ldr	r3, [pc, #520]	@ (8010f04 <__ieee754_rem_pio2+0x32c>)
 8010cfa:	4598      	cmp	r8, r3
 8010cfc:	f200 80d1 	bhi.w	8010ea2 <__ieee754_rem_pio2+0x2ca>
 8010d00:	f000 f966 	bl	8010fd0 <fabs>
 8010d04:	ec57 6b10 	vmov	r6, r7, d0
 8010d08:	a375      	add	r3, pc, #468	@ (adr r3, 8010ee0 <__ieee754_rem_pio2+0x308>)
 8010d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0e:	4630      	mov	r0, r6
 8010d10:	4639      	mov	r1, r7
 8010d12:	f7ef fc99 	bl	8000648 <__aeabi_dmul>
 8010d16:	4b7c      	ldr	r3, [pc, #496]	@ (8010f08 <__ieee754_rem_pio2+0x330>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f7ef fadf 	bl	80002dc <__adddf3>
 8010d1e:	f7ef ff43 	bl	8000ba8 <__aeabi_d2iz>
 8010d22:	4605      	mov	r5, r0
 8010d24:	f7ef fc26 	bl	8000574 <__aeabi_i2d>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d30:	a363      	add	r3, pc, #396	@ (adr r3, 8010ec0 <__ieee754_rem_pio2+0x2e8>)
 8010d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d36:	f7ef fc87 	bl	8000648 <__aeabi_dmul>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4630      	mov	r0, r6
 8010d40:	4639      	mov	r1, r7
 8010d42:	f7ef fac9 	bl	80002d8 <__aeabi_dsub>
 8010d46:	a360      	add	r3, pc, #384	@ (adr r3, 8010ec8 <__ieee754_rem_pio2+0x2f0>)
 8010d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4c:	4682      	mov	sl, r0
 8010d4e:	468b      	mov	fp, r1
 8010d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d54:	f7ef fc78 	bl	8000648 <__aeabi_dmul>
 8010d58:	2d1f      	cmp	r5, #31
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	460f      	mov	r7, r1
 8010d5e:	dc0c      	bgt.n	8010d7a <__ieee754_rem_pio2+0x1a2>
 8010d60:	4b6a      	ldr	r3, [pc, #424]	@ (8010f0c <__ieee754_rem_pio2+0x334>)
 8010d62:	1e6a      	subs	r2, r5, #1
 8010d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d68:	4543      	cmp	r3, r8
 8010d6a:	d006      	beq.n	8010d7a <__ieee754_rem_pio2+0x1a2>
 8010d6c:	4632      	mov	r2, r6
 8010d6e:	463b      	mov	r3, r7
 8010d70:	4650      	mov	r0, sl
 8010d72:	4659      	mov	r1, fp
 8010d74:	f7ef fab0 	bl	80002d8 <__aeabi_dsub>
 8010d78:	e00e      	b.n	8010d98 <__ieee754_rem_pio2+0x1c0>
 8010d7a:	463b      	mov	r3, r7
 8010d7c:	4632      	mov	r2, r6
 8010d7e:	4650      	mov	r0, sl
 8010d80:	4659      	mov	r1, fp
 8010d82:	f7ef faa9 	bl	80002d8 <__aeabi_dsub>
 8010d86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010d8a:	9305      	str	r3, [sp, #20]
 8010d8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010d94:	2b10      	cmp	r3, #16
 8010d96:	dc02      	bgt.n	8010d9e <__ieee754_rem_pio2+0x1c6>
 8010d98:	e9c4 0100 	strd	r0, r1, [r4]
 8010d9c:	e039      	b.n	8010e12 <__ieee754_rem_pio2+0x23a>
 8010d9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8010ed0 <__ieee754_rem_pio2+0x2f8>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010da8:	f7ef fc4e 	bl	8000648 <__aeabi_dmul>
 8010dac:	4606      	mov	r6, r0
 8010dae:	460f      	mov	r7, r1
 8010db0:	4602      	mov	r2, r0
 8010db2:	460b      	mov	r3, r1
 8010db4:	4650      	mov	r0, sl
 8010db6:	4659      	mov	r1, fp
 8010db8:	f7ef fa8e 	bl	80002d8 <__aeabi_dsub>
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	4680      	mov	r8, r0
 8010dc2:	4689      	mov	r9, r1
 8010dc4:	4650      	mov	r0, sl
 8010dc6:	4659      	mov	r1, fp
 8010dc8:	f7ef fa86 	bl	80002d8 <__aeabi_dsub>
 8010dcc:	4632      	mov	r2, r6
 8010dce:	463b      	mov	r3, r7
 8010dd0:	f7ef fa82 	bl	80002d8 <__aeabi_dsub>
 8010dd4:	a340      	add	r3, pc, #256	@ (adr r3, 8010ed8 <__ieee754_rem_pio2+0x300>)
 8010dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dda:	4606      	mov	r6, r0
 8010ddc:	460f      	mov	r7, r1
 8010dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010de2:	f7ef fc31 	bl	8000648 <__aeabi_dmul>
 8010de6:	4632      	mov	r2, r6
 8010de8:	463b      	mov	r3, r7
 8010dea:	f7ef fa75 	bl	80002d8 <__aeabi_dsub>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4606      	mov	r6, r0
 8010df4:	460f      	mov	r7, r1
 8010df6:	4640      	mov	r0, r8
 8010df8:	4649      	mov	r1, r9
 8010dfa:	f7ef fa6d 	bl	80002d8 <__aeabi_dsub>
 8010dfe:	9a05      	ldr	r2, [sp, #20]
 8010e00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e04:	1ad3      	subs	r3, r2, r3
 8010e06:	2b31      	cmp	r3, #49	@ 0x31
 8010e08:	dc20      	bgt.n	8010e4c <__ieee754_rem_pio2+0x274>
 8010e0a:	e9c4 0100 	strd	r0, r1, [r4]
 8010e0e:	46c2      	mov	sl, r8
 8010e10:	46cb      	mov	fp, r9
 8010e12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010e16:	4650      	mov	r0, sl
 8010e18:	4642      	mov	r2, r8
 8010e1a:	464b      	mov	r3, r9
 8010e1c:	4659      	mov	r1, fp
 8010e1e:	f7ef fa5b 	bl	80002d8 <__aeabi_dsub>
 8010e22:	463b      	mov	r3, r7
 8010e24:	4632      	mov	r2, r6
 8010e26:	f7ef fa57 	bl	80002d8 <__aeabi_dsub>
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010e32:	f6bf af0e 	bge.w	8010c52 <__ieee754_rem_pio2+0x7a>
 8010e36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010e3a:	6063      	str	r3, [r4, #4]
 8010e3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e40:	f8c4 8000 	str.w	r8, [r4]
 8010e44:	60a0      	str	r0, [r4, #8]
 8010e46:	60e3      	str	r3, [r4, #12]
 8010e48:	426d      	negs	r5, r5
 8010e4a:	e702      	b.n	8010c52 <__ieee754_rem_pio2+0x7a>
 8010e4c:	a326      	add	r3, pc, #152	@ (adr r3, 8010ee8 <__ieee754_rem_pio2+0x310>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e56:	f7ef fbf7 	bl	8000648 <__aeabi_dmul>
 8010e5a:	4606      	mov	r6, r0
 8010e5c:	460f      	mov	r7, r1
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	4640      	mov	r0, r8
 8010e64:	4649      	mov	r1, r9
 8010e66:	f7ef fa37 	bl	80002d8 <__aeabi_dsub>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	4682      	mov	sl, r0
 8010e70:	468b      	mov	fp, r1
 8010e72:	4640      	mov	r0, r8
 8010e74:	4649      	mov	r1, r9
 8010e76:	f7ef fa2f 	bl	80002d8 <__aeabi_dsub>
 8010e7a:	4632      	mov	r2, r6
 8010e7c:	463b      	mov	r3, r7
 8010e7e:	f7ef fa2b 	bl	80002d8 <__aeabi_dsub>
 8010e82:	a31b      	add	r3, pc, #108	@ (adr r3, 8010ef0 <__ieee754_rem_pio2+0x318>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	4606      	mov	r6, r0
 8010e8a:	460f      	mov	r7, r1
 8010e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e90:	f7ef fbda 	bl	8000648 <__aeabi_dmul>
 8010e94:	4632      	mov	r2, r6
 8010e96:	463b      	mov	r3, r7
 8010e98:	f7ef fa1e 	bl	80002d8 <__aeabi_dsub>
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	460f      	mov	r7, r1
 8010ea0:	e764      	b.n	8010d6c <__ieee754_rem_pio2+0x194>
 8010ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8010f10 <__ieee754_rem_pio2+0x338>)
 8010ea4:	4598      	cmp	r8, r3
 8010ea6:	d935      	bls.n	8010f14 <__ieee754_rem_pio2+0x33c>
 8010ea8:	4632      	mov	r2, r6
 8010eaa:	463b      	mov	r3, r7
 8010eac:	4630      	mov	r0, r6
 8010eae:	4639      	mov	r1, r7
 8010eb0:	f7ef fa12 	bl	80002d8 <__aeabi_dsub>
 8010eb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010eb8:	e9c4 0100 	strd	r0, r1, [r4]
 8010ebc:	e69e      	b.n	8010bfc <__ieee754_rem_pio2+0x24>
 8010ebe:	bf00      	nop
 8010ec0:	54400000 	.word	0x54400000
 8010ec4:	3ff921fb 	.word	0x3ff921fb
 8010ec8:	1a626331 	.word	0x1a626331
 8010ecc:	3dd0b461 	.word	0x3dd0b461
 8010ed0:	1a600000 	.word	0x1a600000
 8010ed4:	3dd0b461 	.word	0x3dd0b461
 8010ed8:	2e037073 	.word	0x2e037073
 8010edc:	3ba3198a 	.word	0x3ba3198a
 8010ee0:	6dc9c883 	.word	0x6dc9c883
 8010ee4:	3fe45f30 	.word	0x3fe45f30
 8010ee8:	2e000000 	.word	0x2e000000
 8010eec:	3ba3198a 	.word	0x3ba3198a
 8010ef0:	252049c1 	.word	0x252049c1
 8010ef4:	397b839a 	.word	0x397b839a
 8010ef8:	3fe921fb 	.word	0x3fe921fb
 8010efc:	4002d97b 	.word	0x4002d97b
 8010f00:	3ff921fb 	.word	0x3ff921fb
 8010f04:	413921fb 	.word	0x413921fb
 8010f08:	3fe00000 	.word	0x3fe00000
 8010f0c:	08011cb0 	.word	0x08011cb0
 8010f10:	7fefffff 	.word	0x7fefffff
 8010f14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010f18:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010f1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010f20:	4630      	mov	r0, r6
 8010f22:	460f      	mov	r7, r1
 8010f24:	f7ef fe40 	bl	8000ba8 <__aeabi_d2iz>
 8010f28:	f7ef fb24 	bl	8000574 <__aeabi_i2d>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	4630      	mov	r0, r6
 8010f32:	4639      	mov	r1, r7
 8010f34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010f38:	f7ef f9ce 	bl	80002d8 <__aeabi_dsub>
 8010f3c:	4b22      	ldr	r3, [pc, #136]	@ (8010fc8 <__ieee754_rem_pio2+0x3f0>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f7ef fb82 	bl	8000648 <__aeabi_dmul>
 8010f44:	460f      	mov	r7, r1
 8010f46:	4606      	mov	r6, r0
 8010f48:	f7ef fe2e 	bl	8000ba8 <__aeabi_d2iz>
 8010f4c:	f7ef fb12 	bl	8000574 <__aeabi_i2d>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4630      	mov	r0, r6
 8010f56:	4639      	mov	r1, r7
 8010f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f5c:	f7ef f9bc 	bl	80002d8 <__aeabi_dsub>
 8010f60:	4b19      	ldr	r3, [pc, #100]	@ (8010fc8 <__ieee754_rem_pio2+0x3f0>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	f7ef fb70 	bl	8000648 <__aeabi_dmul>
 8010f68:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010f6c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010f70:	f04f 0803 	mov.w	r8, #3
 8010f74:	2600      	movs	r6, #0
 8010f76:	2700      	movs	r7, #0
 8010f78:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010f7c:	4632      	mov	r2, r6
 8010f7e:	463b      	mov	r3, r7
 8010f80:	46c2      	mov	sl, r8
 8010f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f86:	f7ef fdc7 	bl	8000b18 <__aeabi_dcmpeq>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d1f4      	bne.n	8010f78 <__ieee754_rem_pio2+0x3a0>
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010fcc <__ieee754_rem_pio2+0x3f4>)
 8010f90:	9301      	str	r3, [sp, #4]
 8010f92:	2302      	movs	r3, #2
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	462a      	mov	r2, r5
 8010f98:	4653      	mov	r3, sl
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	a806      	add	r0, sp, #24
 8010f9e:	f000 f81f 	bl	8010fe0 <__kernel_rem_pio2>
 8010fa2:	9b04      	ldr	r3, [sp, #16]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	f6bf ae53 	bge.w	8010c52 <__ieee754_rem_pio2+0x7a>
 8010fac:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010fb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010fb4:	e9c4 2300 	strd	r2, r3, [r4]
 8010fb8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010fbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010fc0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010fc4:	e740      	b.n	8010e48 <__ieee754_rem_pio2+0x270>
 8010fc6:	bf00      	nop
 8010fc8:	41700000 	.word	0x41700000
 8010fcc:	08011d30 	.word	0x08011d30

08010fd0 <fabs>:
 8010fd0:	ec51 0b10 	vmov	r0, r1, d0
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010fda:	ec43 2b10 	vmov	d0, r2, r3
 8010fde:	4770      	bx	lr

08010fe0 <__kernel_rem_pio2>:
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	ed2d 8b02 	vpush	{d8}
 8010fe8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010fec:	f112 0f14 	cmn.w	r2, #20
 8010ff0:	9306      	str	r3, [sp, #24]
 8010ff2:	9104      	str	r1, [sp, #16]
 8010ff4:	4bbe      	ldr	r3, [pc, #760]	@ (80112f0 <__kernel_rem_pio2+0x310>)
 8010ff6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010ff8:	9008      	str	r0, [sp, #32]
 8010ffa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	9b06      	ldr	r3, [sp, #24]
 8011002:	f103 33ff 	add.w	r3, r3, #4294967295
 8011006:	bfa8      	it	ge
 8011008:	1ed4      	subge	r4, r2, #3
 801100a:	9305      	str	r3, [sp, #20]
 801100c:	bfb2      	itee	lt
 801100e:	2400      	movlt	r4, #0
 8011010:	2318      	movge	r3, #24
 8011012:	fb94 f4f3 	sdivge	r4, r4, r3
 8011016:	f06f 0317 	mvn.w	r3, #23
 801101a:	fb04 3303 	mla	r3, r4, r3, r3
 801101e:	eb03 0b02 	add.w	fp, r3, r2
 8011022:	9b00      	ldr	r3, [sp, #0]
 8011024:	9a05      	ldr	r2, [sp, #20]
 8011026:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80112e0 <__kernel_rem_pio2+0x300>
 801102a:	eb03 0802 	add.w	r8, r3, r2
 801102e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011030:	1aa7      	subs	r7, r4, r2
 8011032:	ae20      	add	r6, sp, #128	@ 0x80
 8011034:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011038:	2500      	movs	r5, #0
 801103a:	4545      	cmp	r5, r8
 801103c:	dd13      	ble.n	8011066 <__kernel_rem_pio2+0x86>
 801103e:	9b06      	ldr	r3, [sp, #24]
 8011040:	aa20      	add	r2, sp, #128	@ 0x80
 8011042:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011046:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801104a:	f04f 0800 	mov.w	r8, #0
 801104e:	9b00      	ldr	r3, [sp, #0]
 8011050:	4598      	cmp	r8, r3
 8011052:	dc31      	bgt.n	80110b8 <__kernel_rem_pio2+0xd8>
 8011054:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80112e0 <__kernel_rem_pio2+0x300>
 8011058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801105c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011060:	462f      	mov	r7, r5
 8011062:	2600      	movs	r6, #0
 8011064:	e01b      	b.n	801109e <__kernel_rem_pio2+0xbe>
 8011066:	42ef      	cmn	r7, r5
 8011068:	d407      	bmi.n	801107a <__kernel_rem_pio2+0x9a>
 801106a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801106e:	f7ef fa81 	bl	8000574 <__aeabi_i2d>
 8011072:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011076:	3501      	adds	r5, #1
 8011078:	e7df      	b.n	801103a <__kernel_rem_pio2+0x5a>
 801107a:	ec51 0b18 	vmov	r0, r1, d8
 801107e:	e7f8      	b.n	8011072 <__kernel_rem_pio2+0x92>
 8011080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011084:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011088:	f7ef fade 	bl	8000648 <__aeabi_dmul>
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011094:	f7ef f922 	bl	80002dc <__adddf3>
 8011098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801109c:	3601      	adds	r6, #1
 801109e:	9b05      	ldr	r3, [sp, #20]
 80110a0:	429e      	cmp	r6, r3
 80110a2:	f1a7 0708 	sub.w	r7, r7, #8
 80110a6:	ddeb      	ble.n	8011080 <__kernel_rem_pio2+0xa0>
 80110a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110ac:	f108 0801 	add.w	r8, r8, #1
 80110b0:	ecaa 7b02 	vstmia	sl!, {d7}
 80110b4:	3508      	adds	r5, #8
 80110b6:	e7ca      	b.n	801104e <__kernel_rem_pio2+0x6e>
 80110b8:	9b00      	ldr	r3, [sp, #0]
 80110ba:	f8dd 8000 	ldr.w	r8, [sp]
 80110be:	aa0c      	add	r2, sp, #48	@ 0x30
 80110c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80110c6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80110c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80110cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80110ce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80110d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110d4:	ab98      	add	r3, sp, #608	@ 0x260
 80110d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80110da:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80110de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110e2:	ac0c      	add	r4, sp, #48	@ 0x30
 80110e4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80110e6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80110ea:	46a1      	mov	r9, r4
 80110ec:	46c2      	mov	sl, r8
 80110ee:	f1ba 0f00 	cmp.w	sl, #0
 80110f2:	f1a5 0508 	sub.w	r5, r5, #8
 80110f6:	dc77      	bgt.n	80111e8 <__kernel_rem_pio2+0x208>
 80110f8:	4658      	mov	r0, fp
 80110fa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80110fe:	f000 fac7 	bl	8011690 <scalbn>
 8011102:	ec57 6b10 	vmov	r6, r7, d0
 8011106:	2200      	movs	r2, #0
 8011108:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801110c:	4630      	mov	r0, r6
 801110e:	4639      	mov	r1, r7
 8011110:	f7ef fa9a 	bl	8000648 <__aeabi_dmul>
 8011114:	ec41 0b10 	vmov	d0, r0, r1
 8011118:	f000 fb3a 	bl	8011790 <floor>
 801111c:	4b75      	ldr	r3, [pc, #468]	@ (80112f4 <__kernel_rem_pio2+0x314>)
 801111e:	ec51 0b10 	vmov	r0, r1, d0
 8011122:	2200      	movs	r2, #0
 8011124:	f7ef fa90 	bl	8000648 <__aeabi_dmul>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4630      	mov	r0, r6
 801112e:	4639      	mov	r1, r7
 8011130:	f7ef f8d2 	bl	80002d8 <__aeabi_dsub>
 8011134:	460f      	mov	r7, r1
 8011136:	4606      	mov	r6, r0
 8011138:	f7ef fd36 	bl	8000ba8 <__aeabi_d2iz>
 801113c:	9002      	str	r0, [sp, #8]
 801113e:	f7ef fa19 	bl	8000574 <__aeabi_i2d>
 8011142:	4602      	mov	r2, r0
 8011144:	460b      	mov	r3, r1
 8011146:	4630      	mov	r0, r6
 8011148:	4639      	mov	r1, r7
 801114a:	f7ef f8c5 	bl	80002d8 <__aeabi_dsub>
 801114e:	f1bb 0f00 	cmp.w	fp, #0
 8011152:	4606      	mov	r6, r0
 8011154:	460f      	mov	r7, r1
 8011156:	dd6c      	ble.n	8011232 <__kernel_rem_pio2+0x252>
 8011158:	f108 31ff 	add.w	r1, r8, #4294967295
 801115c:	ab0c      	add	r3, sp, #48	@ 0x30
 801115e:	9d02      	ldr	r5, [sp, #8]
 8011160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011164:	f1cb 0018 	rsb	r0, fp, #24
 8011168:	fa43 f200 	asr.w	r2, r3, r0
 801116c:	4415      	add	r5, r2
 801116e:	4082      	lsls	r2, r0
 8011170:	1a9b      	subs	r3, r3, r2
 8011172:	aa0c      	add	r2, sp, #48	@ 0x30
 8011174:	9502      	str	r5, [sp, #8]
 8011176:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801117a:	f1cb 0217 	rsb	r2, fp, #23
 801117e:	fa43 f902 	asr.w	r9, r3, r2
 8011182:	f1b9 0f00 	cmp.w	r9, #0
 8011186:	dd64      	ble.n	8011252 <__kernel_rem_pio2+0x272>
 8011188:	9b02      	ldr	r3, [sp, #8]
 801118a:	2200      	movs	r2, #0
 801118c:	3301      	adds	r3, #1
 801118e:	9302      	str	r3, [sp, #8]
 8011190:	4615      	mov	r5, r2
 8011192:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011196:	4590      	cmp	r8, r2
 8011198:	f300 80b8 	bgt.w	801130c <__kernel_rem_pio2+0x32c>
 801119c:	f1bb 0f00 	cmp.w	fp, #0
 80111a0:	dd07      	ble.n	80111b2 <__kernel_rem_pio2+0x1d2>
 80111a2:	f1bb 0f01 	cmp.w	fp, #1
 80111a6:	f000 80bf 	beq.w	8011328 <__kernel_rem_pio2+0x348>
 80111aa:	f1bb 0f02 	cmp.w	fp, #2
 80111ae:	f000 80c6 	beq.w	801133e <__kernel_rem_pio2+0x35e>
 80111b2:	f1b9 0f02 	cmp.w	r9, #2
 80111b6:	d14c      	bne.n	8011252 <__kernel_rem_pio2+0x272>
 80111b8:	4632      	mov	r2, r6
 80111ba:	463b      	mov	r3, r7
 80111bc:	494e      	ldr	r1, [pc, #312]	@ (80112f8 <__kernel_rem_pio2+0x318>)
 80111be:	2000      	movs	r0, #0
 80111c0:	f7ef f88a 	bl	80002d8 <__aeabi_dsub>
 80111c4:	4606      	mov	r6, r0
 80111c6:	460f      	mov	r7, r1
 80111c8:	2d00      	cmp	r5, #0
 80111ca:	d042      	beq.n	8011252 <__kernel_rem_pio2+0x272>
 80111cc:	4658      	mov	r0, fp
 80111ce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80112e8 <__kernel_rem_pio2+0x308>
 80111d2:	f000 fa5d 	bl	8011690 <scalbn>
 80111d6:	4630      	mov	r0, r6
 80111d8:	4639      	mov	r1, r7
 80111da:	ec53 2b10 	vmov	r2, r3, d0
 80111de:	f7ef f87b 	bl	80002d8 <__aeabi_dsub>
 80111e2:	4606      	mov	r6, r0
 80111e4:	460f      	mov	r7, r1
 80111e6:	e034      	b.n	8011252 <__kernel_rem_pio2+0x272>
 80111e8:	4b44      	ldr	r3, [pc, #272]	@ (80112fc <__kernel_rem_pio2+0x31c>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111f0:	f7ef fa2a 	bl	8000648 <__aeabi_dmul>
 80111f4:	f7ef fcd8 	bl	8000ba8 <__aeabi_d2iz>
 80111f8:	f7ef f9bc 	bl	8000574 <__aeabi_i2d>
 80111fc:	4b40      	ldr	r3, [pc, #256]	@ (8011300 <__kernel_rem_pio2+0x320>)
 80111fe:	2200      	movs	r2, #0
 8011200:	4606      	mov	r6, r0
 8011202:	460f      	mov	r7, r1
 8011204:	f7ef fa20 	bl	8000648 <__aeabi_dmul>
 8011208:	4602      	mov	r2, r0
 801120a:	460b      	mov	r3, r1
 801120c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011210:	f7ef f862 	bl	80002d8 <__aeabi_dsub>
 8011214:	f7ef fcc8 	bl	8000ba8 <__aeabi_d2iz>
 8011218:	e9d5 2300 	ldrd	r2, r3, [r5]
 801121c:	f849 0b04 	str.w	r0, [r9], #4
 8011220:	4639      	mov	r1, r7
 8011222:	4630      	mov	r0, r6
 8011224:	f7ef f85a 	bl	80002dc <__adddf3>
 8011228:	f10a 3aff 	add.w	sl, sl, #4294967295
 801122c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011230:	e75d      	b.n	80110ee <__kernel_rem_pio2+0x10e>
 8011232:	d107      	bne.n	8011244 <__kernel_rem_pio2+0x264>
 8011234:	f108 33ff 	add.w	r3, r8, #4294967295
 8011238:	aa0c      	add	r2, sp, #48	@ 0x30
 801123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801123e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011242:	e79e      	b.n	8011182 <__kernel_rem_pio2+0x1a2>
 8011244:	4b2f      	ldr	r3, [pc, #188]	@ (8011304 <__kernel_rem_pio2+0x324>)
 8011246:	2200      	movs	r2, #0
 8011248:	f7ef fc84 	bl	8000b54 <__aeabi_dcmpge>
 801124c:	2800      	cmp	r0, #0
 801124e:	d143      	bne.n	80112d8 <__kernel_rem_pio2+0x2f8>
 8011250:	4681      	mov	r9, r0
 8011252:	2200      	movs	r2, #0
 8011254:	2300      	movs	r3, #0
 8011256:	4630      	mov	r0, r6
 8011258:	4639      	mov	r1, r7
 801125a:	f7ef fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 801125e:	2800      	cmp	r0, #0
 8011260:	f000 80bf 	beq.w	80113e2 <__kernel_rem_pio2+0x402>
 8011264:	f108 33ff 	add.w	r3, r8, #4294967295
 8011268:	2200      	movs	r2, #0
 801126a:	9900      	ldr	r1, [sp, #0]
 801126c:	428b      	cmp	r3, r1
 801126e:	da6e      	bge.n	801134e <__kernel_rem_pio2+0x36e>
 8011270:	2a00      	cmp	r2, #0
 8011272:	f000 8089 	beq.w	8011388 <__kernel_rem_pio2+0x3a8>
 8011276:	f108 38ff 	add.w	r8, r8, #4294967295
 801127a:	ab0c      	add	r3, sp, #48	@ 0x30
 801127c:	f1ab 0b18 	sub.w	fp, fp, #24
 8011280:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d0f6      	beq.n	8011276 <__kernel_rem_pio2+0x296>
 8011288:	4658      	mov	r0, fp
 801128a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80112e8 <__kernel_rem_pio2+0x308>
 801128e:	f000 f9ff 	bl	8011690 <scalbn>
 8011292:	f108 0301 	add.w	r3, r8, #1
 8011296:	00da      	lsls	r2, r3, #3
 8011298:	9205      	str	r2, [sp, #20]
 801129a:	ec55 4b10 	vmov	r4, r5, d0
 801129e:	aa70      	add	r2, sp, #448	@ 0x1c0
 80112a0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80112fc <__kernel_rem_pio2+0x31c>
 80112a4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80112a8:	4646      	mov	r6, r8
 80112aa:	f04f 0a00 	mov.w	sl, #0
 80112ae:	2e00      	cmp	r6, #0
 80112b0:	f280 80cf 	bge.w	8011452 <__kernel_rem_pio2+0x472>
 80112b4:	4644      	mov	r4, r8
 80112b6:	2c00      	cmp	r4, #0
 80112b8:	f2c0 80fd 	blt.w	80114b6 <__kernel_rem_pio2+0x4d6>
 80112bc:	4b12      	ldr	r3, [pc, #72]	@ (8011308 <__kernel_rem_pio2+0x328>)
 80112be:	461f      	mov	r7, r3
 80112c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80112c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112c6:	9306      	str	r3, [sp, #24]
 80112c8:	f04f 0a00 	mov.w	sl, #0
 80112cc:	f04f 0b00 	mov.w	fp, #0
 80112d0:	2600      	movs	r6, #0
 80112d2:	eba8 0504 	sub.w	r5, r8, r4
 80112d6:	e0e2      	b.n	801149e <__kernel_rem_pio2+0x4be>
 80112d8:	f04f 0902 	mov.w	r9, #2
 80112dc:	e754      	b.n	8011188 <__kernel_rem_pio2+0x1a8>
 80112de:	bf00      	nop
	...
 80112ec:	3ff00000 	.word	0x3ff00000
 80112f0:	08011e78 	.word	0x08011e78
 80112f4:	40200000 	.word	0x40200000
 80112f8:	3ff00000 	.word	0x3ff00000
 80112fc:	3e700000 	.word	0x3e700000
 8011300:	41700000 	.word	0x41700000
 8011304:	3fe00000 	.word	0x3fe00000
 8011308:	08011e38 	.word	0x08011e38
 801130c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011310:	b945      	cbnz	r5, 8011324 <__kernel_rem_pio2+0x344>
 8011312:	b123      	cbz	r3, 801131e <__kernel_rem_pio2+0x33e>
 8011314:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011318:	f844 3c04 	str.w	r3, [r4, #-4]
 801131c:	2301      	movs	r3, #1
 801131e:	3201      	adds	r2, #1
 8011320:	461d      	mov	r5, r3
 8011322:	e738      	b.n	8011196 <__kernel_rem_pio2+0x1b6>
 8011324:	1acb      	subs	r3, r1, r3
 8011326:	e7f7      	b.n	8011318 <__kernel_rem_pio2+0x338>
 8011328:	f108 32ff 	add.w	r2, r8, #4294967295
 801132c:	ab0c      	add	r3, sp, #48	@ 0x30
 801132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011332:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011336:	a90c      	add	r1, sp, #48	@ 0x30
 8011338:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801133c:	e739      	b.n	80111b2 <__kernel_rem_pio2+0x1d2>
 801133e:	f108 32ff 	add.w	r2, r8, #4294967295
 8011342:	ab0c      	add	r3, sp, #48	@ 0x30
 8011344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011348:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801134c:	e7f3      	b.n	8011336 <__kernel_rem_pio2+0x356>
 801134e:	a90c      	add	r1, sp, #48	@ 0x30
 8011350:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011354:	3b01      	subs	r3, #1
 8011356:	430a      	orrs	r2, r1
 8011358:	e787      	b.n	801126a <__kernel_rem_pio2+0x28a>
 801135a:	3401      	adds	r4, #1
 801135c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011360:	2a00      	cmp	r2, #0
 8011362:	d0fa      	beq.n	801135a <__kernel_rem_pio2+0x37a>
 8011364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011366:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801136a:	eb0d 0503 	add.w	r5, sp, r3
 801136e:	9b06      	ldr	r3, [sp, #24]
 8011370:	aa20      	add	r2, sp, #128	@ 0x80
 8011372:	4443      	add	r3, r8
 8011374:	f108 0701 	add.w	r7, r8, #1
 8011378:	3d98      	subs	r5, #152	@ 0x98
 801137a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801137e:	4444      	add	r4, r8
 8011380:	42bc      	cmp	r4, r7
 8011382:	da04      	bge.n	801138e <__kernel_rem_pio2+0x3ae>
 8011384:	46a0      	mov	r8, r4
 8011386:	e6a2      	b.n	80110ce <__kernel_rem_pio2+0xee>
 8011388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801138a:	2401      	movs	r4, #1
 801138c:	e7e6      	b.n	801135c <__kernel_rem_pio2+0x37c>
 801138e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011390:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011394:	f7ef f8ee 	bl	8000574 <__aeabi_i2d>
 8011398:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8011660 <__kernel_rem_pio2+0x680>
 801139c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80113a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113a8:	46b2      	mov	sl, r6
 80113aa:	f04f 0800 	mov.w	r8, #0
 80113ae:	9b05      	ldr	r3, [sp, #20]
 80113b0:	4598      	cmp	r8, r3
 80113b2:	dd05      	ble.n	80113c0 <__kernel_rem_pio2+0x3e0>
 80113b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113b8:	3701      	adds	r7, #1
 80113ba:	eca5 7b02 	vstmia	r5!, {d7}
 80113be:	e7df      	b.n	8011380 <__kernel_rem_pio2+0x3a0>
 80113c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80113c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80113c8:	f7ef f93e 	bl	8000648 <__aeabi_dmul>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113d4:	f7ee ff82 	bl	80002dc <__adddf3>
 80113d8:	f108 0801 	add.w	r8, r8, #1
 80113dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113e0:	e7e5      	b.n	80113ae <__kernel_rem_pio2+0x3ce>
 80113e2:	f1cb 0000 	rsb	r0, fp, #0
 80113e6:	ec47 6b10 	vmov	d0, r6, r7
 80113ea:	f000 f951 	bl	8011690 <scalbn>
 80113ee:	ec55 4b10 	vmov	r4, r5, d0
 80113f2:	4b9d      	ldr	r3, [pc, #628]	@ (8011668 <__kernel_rem_pio2+0x688>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	4620      	mov	r0, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	f7ef fbab 	bl	8000b54 <__aeabi_dcmpge>
 80113fe:	b300      	cbz	r0, 8011442 <__kernel_rem_pio2+0x462>
 8011400:	4b9a      	ldr	r3, [pc, #616]	@ (801166c <__kernel_rem_pio2+0x68c>)
 8011402:	2200      	movs	r2, #0
 8011404:	4620      	mov	r0, r4
 8011406:	4629      	mov	r1, r5
 8011408:	f7ef f91e 	bl	8000648 <__aeabi_dmul>
 801140c:	f7ef fbcc 	bl	8000ba8 <__aeabi_d2iz>
 8011410:	4606      	mov	r6, r0
 8011412:	f7ef f8af 	bl	8000574 <__aeabi_i2d>
 8011416:	4b94      	ldr	r3, [pc, #592]	@ (8011668 <__kernel_rem_pio2+0x688>)
 8011418:	2200      	movs	r2, #0
 801141a:	f7ef f915 	bl	8000648 <__aeabi_dmul>
 801141e:	460b      	mov	r3, r1
 8011420:	4602      	mov	r2, r0
 8011422:	4629      	mov	r1, r5
 8011424:	4620      	mov	r0, r4
 8011426:	f7ee ff57 	bl	80002d8 <__aeabi_dsub>
 801142a:	f7ef fbbd 	bl	8000ba8 <__aeabi_d2iz>
 801142e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011430:	f10b 0b18 	add.w	fp, fp, #24
 8011434:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011438:	f108 0801 	add.w	r8, r8, #1
 801143c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011440:	e722      	b.n	8011288 <__kernel_rem_pio2+0x2a8>
 8011442:	4620      	mov	r0, r4
 8011444:	4629      	mov	r1, r5
 8011446:	f7ef fbaf 	bl	8000ba8 <__aeabi_d2iz>
 801144a:	ab0c      	add	r3, sp, #48	@ 0x30
 801144c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011450:	e71a      	b.n	8011288 <__kernel_rem_pio2+0x2a8>
 8011452:	ab0c      	add	r3, sp, #48	@ 0x30
 8011454:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011458:	f7ef f88c 	bl	8000574 <__aeabi_i2d>
 801145c:	4622      	mov	r2, r4
 801145e:	462b      	mov	r3, r5
 8011460:	f7ef f8f2 	bl	8000648 <__aeabi_dmul>
 8011464:	4652      	mov	r2, sl
 8011466:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801146a:	465b      	mov	r3, fp
 801146c:	4620      	mov	r0, r4
 801146e:	4629      	mov	r1, r5
 8011470:	f7ef f8ea 	bl	8000648 <__aeabi_dmul>
 8011474:	3e01      	subs	r6, #1
 8011476:	4604      	mov	r4, r0
 8011478:	460d      	mov	r5, r1
 801147a:	e718      	b.n	80112ae <__kernel_rem_pio2+0x2ce>
 801147c:	9906      	ldr	r1, [sp, #24]
 801147e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011482:	9106      	str	r1, [sp, #24]
 8011484:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011488:	f7ef f8de 	bl	8000648 <__aeabi_dmul>
 801148c:	4602      	mov	r2, r0
 801148e:	460b      	mov	r3, r1
 8011490:	4650      	mov	r0, sl
 8011492:	4659      	mov	r1, fp
 8011494:	f7ee ff22 	bl	80002dc <__adddf3>
 8011498:	3601      	adds	r6, #1
 801149a:	4682      	mov	sl, r0
 801149c:	468b      	mov	fp, r1
 801149e:	9b00      	ldr	r3, [sp, #0]
 80114a0:	429e      	cmp	r6, r3
 80114a2:	dc01      	bgt.n	80114a8 <__kernel_rem_pio2+0x4c8>
 80114a4:	42b5      	cmp	r5, r6
 80114a6:	dae9      	bge.n	801147c <__kernel_rem_pio2+0x49c>
 80114a8:	ab48      	add	r3, sp, #288	@ 0x120
 80114aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80114ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80114b2:	3c01      	subs	r4, #1
 80114b4:	e6ff      	b.n	80112b6 <__kernel_rem_pio2+0x2d6>
 80114b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	dc0b      	bgt.n	80114d4 <__kernel_rem_pio2+0x4f4>
 80114bc:	2b00      	cmp	r3, #0
 80114be:	dc39      	bgt.n	8011534 <__kernel_rem_pio2+0x554>
 80114c0:	d05d      	beq.n	801157e <__kernel_rem_pio2+0x59e>
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	f003 0007 	and.w	r0, r3, #7
 80114c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80114cc:	ecbd 8b02 	vpop	{d8}
 80114d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80114d6:	2b03      	cmp	r3, #3
 80114d8:	d1f3      	bne.n	80114c2 <__kernel_rem_pio2+0x4e2>
 80114da:	9b05      	ldr	r3, [sp, #20]
 80114dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80114e0:	eb0d 0403 	add.w	r4, sp, r3
 80114e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80114e8:	4625      	mov	r5, r4
 80114ea:	46c2      	mov	sl, r8
 80114ec:	f1ba 0f00 	cmp.w	sl, #0
 80114f0:	f1a5 0508 	sub.w	r5, r5, #8
 80114f4:	dc6b      	bgt.n	80115ce <__kernel_rem_pio2+0x5ee>
 80114f6:	4645      	mov	r5, r8
 80114f8:	2d01      	cmp	r5, #1
 80114fa:	f1a4 0408 	sub.w	r4, r4, #8
 80114fe:	f300 8087 	bgt.w	8011610 <__kernel_rem_pio2+0x630>
 8011502:	9c05      	ldr	r4, [sp, #20]
 8011504:	ab48      	add	r3, sp, #288	@ 0x120
 8011506:	441c      	add	r4, r3
 8011508:	2000      	movs	r0, #0
 801150a:	2100      	movs	r1, #0
 801150c:	f1b8 0f01 	cmp.w	r8, #1
 8011510:	f300 809c 	bgt.w	801164c <__kernel_rem_pio2+0x66c>
 8011514:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011518:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801151c:	f1b9 0f00 	cmp.w	r9, #0
 8011520:	f040 80a6 	bne.w	8011670 <__kernel_rem_pio2+0x690>
 8011524:	9b04      	ldr	r3, [sp, #16]
 8011526:	e9c3 7800 	strd	r7, r8, [r3]
 801152a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801152e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011532:	e7c6      	b.n	80114c2 <__kernel_rem_pio2+0x4e2>
 8011534:	9d05      	ldr	r5, [sp, #20]
 8011536:	ab48      	add	r3, sp, #288	@ 0x120
 8011538:	441d      	add	r5, r3
 801153a:	4644      	mov	r4, r8
 801153c:	2000      	movs	r0, #0
 801153e:	2100      	movs	r1, #0
 8011540:	2c00      	cmp	r4, #0
 8011542:	da35      	bge.n	80115b0 <__kernel_rem_pio2+0x5d0>
 8011544:	f1b9 0f00 	cmp.w	r9, #0
 8011548:	d038      	beq.n	80115bc <__kernel_rem_pio2+0x5dc>
 801154a:	4602      	mov	r2, r0
 801154c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011550:	9c04      	ldr	r4, [sp, #16]
 8011552:	e9c4 2300 	strd	r2, r3, [r4]
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801155e:	f7ee febb 	bl	80002d8 <__aeabi_dsub>
 8011562:	ad4a      	add	r5, sp, #296	@ 0x128
 8011564:	2401      	movs	r4, #1
 8011566:	45a0      	cmp	r8, r4
 8011568:	da2b      	bge.n	80115c2 <__kernel_rem_pio2+0x5e2>
 801156a:	f1b9 0f00 	cmp.w	r9, #0
 801156e:	d002      	beq.n	8011576 <__kernel_rem_pio2+0x596>
 8011570:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011574:	4619      	mov	r1, r3
 8011576:	9b04      	ldr	r3, [sp, #16]
 8011578:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801157c:	e7a1      	b.n	80114c2 <__kernel_rem_pio2+0x4e2>
 801157e:	9c05      	ldr	r4, [sp, #20]
 8011580:	ab48      	add	r3, sp, #288	@ 0x120
 8011582:	441c      	add	r4, r3
 8011584:	2000      	movs	r0, #0
 8011586:	2100      	movs	r1, #0
 8011588:	f1b8 0f00 	cmp.w	r8, #0
 801158c:	da09      	bge.n	80115a2 <__kernel_rem_pio2+0x5c2>
 801158e:	f1b9 0f00 	cmp.w	r9, #0
 8011592:	d002      	beq.n	801159a <__kernel_rem_pio2+0x5ba>
 8011594:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011598:	4619      	mov	r1, r3
 801159a:	9b04      	ldr	r3, [sp, #16]
 801159c:	e9c3 0100 	strd	r0, r1, [r3]
 80115a0:	e78f      	b.n	80114c2 <__kernel_rem_pio2+0x4e2>
 80115a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80115a6:	f7ee fe99 	bl	80002dc <__adddf3>
 80115aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80115ae:	e7eb      	b.n	8011588 <__kernel_rem_pio2+0x5a8>
 80115b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80115b4:	f7ee fe92 	bl	80002dc <__adddf3>
 80115b8:	3c01      	subs	r4, #1
 80115ba:	e7c1      	b.n	8011540 <__kernel_rem_pio2+0x560>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	e7c6      	b.n	8011550 <__kernel_rem_pio2+0x570>
 80115c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80115c6:	f7ee fe89 	bl	80002dc <__adddf3>
 80115ca:	3401      	adds	r4, #1
 80115cc:	e7cb      	b.n	8011566 <__kernel_rem_pio2+0x586>
 80115ce:	ed95 7b00 	vldr	d7, [r5]
 80115d2:	ed8d 7b00 	vstr	d7, [sp]
 80115d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80115da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115de:	ec53 2b17 	vmov	r2, r3, d7
 80115e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115e6:	f7ee fe79 	bl	80002dc <__adddf3>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4606      	mov	r6, r0
 80115f0:	460f      	mov	r7, r1
 80115f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115f6:	f7ee fe6f 	bl	80002d8 <__aeabi_dsub>
 80115fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115fe:	f7ee fe6d 	bl	80002dc <__adddf3>
 8011602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011606:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801160a:	e9c5 6700 	strd	r6, r7, [r5]
 801160e:	e76d      	b.n	80114ec <__kernel_rem_pio2+0x50c>
 8011610:	ed94 7b00 	vldr	d7, [r4]
 8011614:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011618:	ec51 0b17 	vmov	r0, r1, d7
 801161c:	4652      	mov	r2, sl
 801161e:	465b      	mov	r3, fp
 8011620:	ed8d 7b00 	vstr	d7, [sp]
 8011624:	f7ee fe5a 	bl	80002dc <__adddf3>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4606      	mov	r6, r0
 801162e:	460f      	mov	r7, r1
 8011630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011634:	f7ee fe50 	bl	80002d8 <__aeabi_dsub>
 8011638:	4652      	mov	r2, sl
 801163a:	465b      	mov	r3, fp
 801163c:	f7ee fe4e 	bl	80002dc <__adddf3>
 8011640:	3d01      	subs	r5, #1
 8011642:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011646:	e9c4 6700 	strd	r6, r7, [r4]
 801164a:	e755      	b.n	80114f8 <__kernel_rem_pio2+0x518>
 801164c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011650:	f7ee fe44 	bl	80002dc <__adddf3>
 8011654:	f108 38ff 	add.w	r8, r8, #4294967295
 8011658:	e758      	b.n	801150c <__kernel_rem_pio2+0x52c>
 801165a:	bf00      	nop
 801165c:	f3af 8000 	nop.w
	...
 8011668:	41700000 	.word	0x41700000
 801166c:	3e700000 	.word	0x3e700000
 8011670:	9b04      	ldr	r3, [sp, #16]
 8011672:	9a04      	ldr	r2, [sp, #16]
 8011674:	601f      	str	r7, [r3, #0]
 8011676:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801167a:	605c      	str	r4, [r3, #4]
 801167c:	609d      	str	r5, [r3, #8]
 801167e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011682:	60d3      	str	r3, [r2, #12]
 8011684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011688:	6110      	str	r0, [r2, #16]
 801168a:	6153      	str	r3, [r2, #20]
 801168c:	e719      	b.n	80114c2 <__kernel_rem_pio2+0x4e2>
 801168e:	bf00      	nop

08011690 <scalbn>:
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	ec55 4b10 	vmov	r4, r5, d0
 8011696:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801169a:	4606      	mov	r6, r0
 801169c:	462b      	mov	r3, r5
 801169e:	b991      	cbnz	r1, 80116c6 <scalbn+0x36>
 80116a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80116a4:	4323      	orrs	r3, r4
 80116a6:	d03d      	beq.n	8011724 <scalbn+0x94>
 80116a8:	4b35      	ldr	r3, [pc, #212]	@ (8011780 <scalbn+0xf0>)
 80116aa:	4620      	mov	r0, r4
 80116ac:	4629      	mov	r1, r5
 80116ae:	2200      	movs	r2, #0
 80116b0:	f7ee ffca 	bl	8000648 <__aeabi_dmul>
 80116b4:	4b33      	ldr	r3, [pc, #204]	@ (8011784 <scalbn+0xf4>)
 80116b6:	429e      	cmp	r6, r3
 80116b8:	4604      	mov	r4, r0
 80116ba:	460d      	mov	r5, r1
 80116bc:	da0f      	bge.n	80116de <scalbn+0x4e>
 80116be:	a328      	add	r3, pc, #160	@ (adr r3, 8011760 <scalbn+0xd0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	e01e      	b.n	8011704 <scalbn+0x74>
 80116c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80116ca:	4291      	cmp	r1, r2
 80116cc:	d10b      	bne.n	80116e6 <scalbn+0x56>
 80116ce:	4622      	mov	r2, r4
 80116d0:	4620      	mov	r0, r4
 80116d2:	4629      	mov	r1, r5
 80116d4:	f7ee fe02 	bl	80002dc <__adddf3>
 80116d8:	4604      	mov	r4, r0
 80116da:	460d      	mov	r5, r1
 80116dc:	e022      	b.n	8011724 <scalbn+0x94>
 80116de:	460b      	mov	r3, r1
 80116e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80116e4:	3936      	subs	r1, #54	@ 0x36
 80116e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80116ea:	4296      	cmp	r6, r2
 80116ec:	dd0d      	ble.n	801170a <scalbn+0x7a>
 80116ee:	2d00      	cmp	r5, #0
 80116f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011768 <scalbn+0xd8>)
 80116f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116f6:	da02      	bge.n	80116fe <scalbn+0x6e>
 80116f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011770 <scalbn+0xe0>)
 80116fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8011768 <scalbn+0xd8>)
 8011700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011704:	f7ee ffa0 	bl	8000648 <__aeabi_dmul>
 8011708:	e7e6      	b.n	80116d8 <scalbn+0x48>
 801170a:	1872      	adds	r2, r6, r1
 801170c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011710:	428a      	cmp	r2, r1
 8011712:	dcec      	bgt.n	80116ee <scalbn+0x5e>
 8011714:	2a00      	cmp	r2, #0
 8011716:	dd08      	ble.n	801172a <scalbn+0x9a>
 8011718:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801171c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011720:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011724:	ec45 4b10 	vmov	d0, r4, r5
 8011728:	bd70      	pop	{r4, r5, r6, pc}
 801172a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801172e:	da08      	bge.n	8011742 <scalbn+0xb2>
 8011730:	2d00      	cmp	r5, #0
 8011732:	a10b      	add	r1, pc, #44	@ (adr r1, 8011760 <scalbn+0xd0>)
 8011734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011738:	dac1      	bge.n	80116be <scalbn+0x2e>
 801173a:	a10f      	add	r1, pc, #60	@ (adr r1, 8011778 <scalbn+0xe8>)
 801173c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011740:	e7bd      	b.n	80116be <scalbn+0x2e>
 8011742:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011746:	3236      	adds	r2, #54	@ 0x36
 8011748:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801174c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011750:	4620      	mov	r0, r4
 8011752:	4b0d      	ldr	r3, [pc, #52]	@ (8011788 <scalbn+0xf8>)
 8011754:	4629      	mov	r1, r5
 8011756:	2200      	movs	r2, #0
 8011758:	e7d4      	b.n	8011704 <scalbn+0x74>
 801175a:	bf00      	nop
 801175c:	f3af 8000 	nop.w
 8011760:	c2f8f359 	.word	0xc2f8f359
 8011764:	01a56e1f 	.word	0x01a56e1f
 8011768:	8800759c 	.word	0x8800759c
 801176c:	7e37e43c 	.word	0x7e37e43c
 8011770:	8800759c 	.word	0x8800759c
 8011774:	fe37e43c 	.word	0xfe37e43c
 8011778:	c2f8f359 	.word	0xc2f8f359
 801177c:	81a56e1f 	.word	0x81a56e1f
 8011780:	43500000 	.word	0x43500000
 8011784:	ffff3cb0 	.word	0xffff3cb0
 8011788:	3c900000 	.word	0x3c900000
 801178c:	00000000 	.word	0x00000000

08011790 <floor>:
 8011790:	ec51 0b10 	vmov	r0, r1, d0
 8011794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801179c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80117a0:	2e13      	cmp	r6, #19
 80117a2:	460c      	mov	r4, r1
 80117a4:	4605      	mov	r5, r0
 80117a6:	4680      	mov	r8, r0
 80117a8:	dc34      	bgt.n	8011814 <floor+0x84>
 80117aa:	2e00      	cmp	r6, #0
 80117ac:	da17      	bge.n	80117de <floor+0x4e>
 80117ae:	a332      	add	r3, pc, #200	@ (adr r3, 8011878 <floor+0xe8>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	f7ee fd92 	bl	80002dc <__adddf3>
 80117b8:	2200      	movs	r2, #0
 80117ba:	2300      	movs	r3, #0
 80117bc:	f7ef f9d4 	bl	8000b68 <__aeabi_dcmpgt>
 80117c0:	b150      	cbz	r0, 80117d8 <floor+0x48>
 80117c2:	2c00      	cmp	r4, #0
 80117c4:	da55      	bge.n	8011872 <floor+0xe2>
 80117c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80117ca:	432c      	orrs	r4, r5
 80117cc:	2500      	movs	r5, #0
 80117ce:	42ac      	cmp	r4, r5
 80117d0:	4c2b      	ldr	r4, [pc, #172]	@ (8011880 <floor+0xf0>)
 80117d2:	bf08      	it	eq
 80117d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80117d8:	4621      	mov	r1, r4
 80117da:	4628      	mov	r0, r5
 80117dc:	e023      	b.n	8011826 <floor+0x96>
 80117de:	4f29      	ldr	r7, [pc, #164]	@ (8011884 <floor+0xf4>)
 80117e0:	4137      	asrs	r7, r6
 80117e2:	ea01 0307 	and.w	r3, r1, r7
 80117e6:	4303      	orrs	r3, r0
 80117e8:	d01d      	beq.n	8011826 <floor+0x96>
 80117ea:	a323      	add	r3, pc, #140	@ (adr r3, 8011878 <floor+0xe8>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	f7ee fd74 	bl	80002dc <__adddf3>
 80117f4:	2200      	movs	r2, #0
 80117f6:	2300      	movs	r3, #0
 80117f8:	f7ef f9b6 	bl	8000b68 <__aeabi_dcmpgt>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d0eb      	beq.n	80117d8 <floor+0x48>
 8011800:	2c00      	cmp	r4, #0
 8011802:	bfbe      	ittt	lt
 8011804:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011808:	4133      	asrlt	r3, r6
 801180a:	18e4      	addlt	r4, r4, r3
 801180c:	ea24 0407 	bic.w	r4, r4, r7
 8011810:	2500      	movs	r5, #0
 8011812:	e7e1      	b.n	80117d8 <floor+0x48>
 8011814:	2e33      	cmp	r6, #51	@ 0x33
 8011816:	dd0a      	ble.n	801182e <floor+0x9e>
 8011818:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801181c:	d103      	bne.n	8011826 <floor+0x96>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	f7ee fd5b 	bl	80002dc <__adddf3>
 8011826:	ec41 0b10 	vmov	d0, r0, r1
 801182a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801182e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011832:	f04f 37ff 	mov.w	r7, #4294967295
 8011836:	40df      	lsrs	r7, r3
 8011838:	4207      	tst	r7, r0
 801183a:	d0f4      	beq.n	8011826 <floor+0x96>
 801183c:	a30e      	add	r3, pc, #56	@ (adr r3, 8011878 <floor+0xe8>)
 801183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011842:	f7ee fd4b 	bl	80002dc <__adddf3>
 8011846:	2200      	movs	r2, #0
 8011848:	2300      	movs	r3, #0
 801184a:	f7ef f98d 	bl	8000b68 <__aeabi_dcmpgt>
 801184e:	2800      	cmp	r0, #0
 8011850:	d0c2      	beq.n	80117d8 <floor+0x48>
 8011852:	2c00      	cmp	r4, #0
 8011854:	da0a      	bge.n	801186c <floor+0xdc>
 8011856:	2e14      	cmp	r6, #20
 8011858:	d101      	bne.n	801185e <floor+0xce>
 801185a:	3401      	adds	r4, #1
 801185c:	e006      	b.n	801186c <floor+0xdc>
 801185e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011862:	2301      	movs	r3, #1
 8011864:	40b3      	lsls	r3, r6
 8011866:	441d      	add	r5, r3
 8011868:	4545      	cmp	r5, r8
 801186a:	d3f6      	bcc.n	801185a <floor+0xca>
 801186c:	ea25 0507 	bic.w	r5, r5, r7
 8011870:	e7b2      	b.n	80117d8 <floor+0x48>
 8011872:	2500      	movs	r5, #0
 8011874:	462c      	mov	r4, r5
 8011876:	e7af      	b.n	80117d8 <floor+0x48>
 8011878:	8800759c 	.word	0x8800759c
 801187c:	7e37e43c 	.word	0x7e37e43c
 8011880:	bff00000 	.word	0xbff00000
 8011884:	000fffff 	.word	0x000fffff

08011888 <_init>:
 8011888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188a:	bf00      	nop
 801188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801188e:	bc08      	pop	{r3}
 8011890:	469e      	mov	lr, r3
 8011892:	4770      	bx	lr

08011894 <_fini>:
 8011894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011896:	bf00      	nop
 8011898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801189a:	bc08      	pop	{r3}
 801189c:	469e      	mov	lr, r3
 801189e:	4770      	bx	lr
