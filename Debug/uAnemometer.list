
uAnemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800e388  0800e388  0000f388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8c8  0800e8c8  000106c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8c8  0800e8c8  0000f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8d0  0800e8d0  000106c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e8d0  0800e8d0  0000f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8d8  0800e8d8  0000f8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c0  20000000  0800e8dc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200006c0  0800ef9c  000106c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800ef9c  00010b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001205f  00000000  00000000  000106f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002437  00000000  00000000  0002274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00024b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf8  00000000  00000000  00025c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0f5  00000000  00000000  00026920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a27  00000000  00000000  00045a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7907  00000000  00000000  0005943c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c0  00000000  00000000  00120d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00127048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006c0 	.word	0x200006c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e370 	.word	0x0800e370

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006c4 	.word	0x200006c4
 800021c:	0800e370 	.word	0x0800e370

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <blinkLED>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //pin 6 are for rising edges
}

void blinkLED ()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <blinkLED+0x1c>)
 800103e:	f000 ffe3 	bl	8002008 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001042:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001046:	f000 fd3f 	bl	8001ac8 <HAL_Delay>
	return;
 800104a:	bf00      	nop
}
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	48000400 	.word	0x48000400

08001054 <scanInp>:
	printf("Entered value is %c\n\r", ch_buf);
	return ch_buf;
}*/
// using putchar and getchar
char *scanInp(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	char *ch_buf = malloc (sizeof (char) * 1);
 800105a:	2001      	movs	r0, #1
 800105c:	f004 f854 	bl	8005108 <malloc>
 8001060:	4603      	mov	r3, r0
 8001062:	607b      	str	r3, [r7, #4]
	scanf("%1s", ch_buf);
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <scanInp+0x2c>)
 8001068:	f004 fbc6 	bl	80057f8 <scanf>
	printf("you have entered %s\n\r", ch_buf);
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <scanInp+0x30>)
 8001070:	f004 fb62 	bl	8005738 <printf>

	return ch_buf;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0800e388 	.word	0x0800e388
 8001084:	0800e38c 	.word	0x0800e38c

08001088 <startSpeaker>:


void startSpeaker(bool start)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	if (start == true){
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <startSpeaker+0x24>
		  //start pwm for 25khz - freq = (fmas/psc)/period
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //start TIM4 pwm ch1 - macro expan 0x00000000U
 8001098:	2100      	movs	r1, #0
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <startSpeaker+0x38>)
 800109c:	f002 f8bc 	bl	8003218 <HAL_TIM_PWM_Start>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		  nShutdownDampHigh;
 80010a0:	2201      	movs	r2, #1
 80010a2:	2110      	movs	r1, #16
 80010a4:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <startSpeaker+0x3c>)
 80010a6:	f000 ff97 	bl	8001fd8 <HAL_GPIO_WritePin>
	}
	else {
		nShutdownDampLow;
	}
	  return;
 80010aa:	e005      	b.n	80010b8 <startSpeaker+0x30>
		nShutdownDampLow;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <startSpeaker+0x3c>)
 80010b2:	f000 ff91 	bl	8001fd8 <HAL_GPIO_WritePin>
	  return;
 80010b6:	bf00      	nop
}
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000728 	.word	0x20000728
 80010c4:	48000400 	.word	0x48000400

080010c8 <__io_putchar>:
//put char prototype for printf function
PUTCHAR_PROTOTYPE
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80010d0:	1d39      	adds	r1, r7, #4
 80010d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d6:	2201      	movs	r2, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <__io_putchar+0x20>)
 80010da:	f003 f8d1 	bl	8004280 <HAL_UART_Transmit>
  return ch;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000774 	.word	0x20000774

080010ec <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <__io_getchar+0x34>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2208      	movs	r2, #8
 80010fc:	621a      	str	r2, [r3, #32]
  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 100);
 80010fe:	1df9      	adds	r1, r7, #7
 8001100:	2364      	movs	r3, #100	@ 0x64
 8001102:	2201      	movs	r2, #1
 8001104:	4806      	ldr	r0, [pc, #24]	@ (8001120 <__io_getchar+0x34>)
 8001106:	f003 f949 	bl	800439c <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 800110a:	1df9      	adds	r1, r7, #7
 800110c:	2364      	movs	r3, #100	@ 0x64
 800110e:	2201      	movs	r2, #1
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <__io_getchar+0x34>)
 8001112:	f003 f8b5 	bl	8004280 <HAL_UART_Transmit>
  return ch;
 8001116:	79fb      	ldrb	r3, [r7, #7]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000774 	.word	0x20000774

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 char uart_buf[50];
 int uart_buf_len;
 uint16_t timer_val;
 enum State {IDLE = 0, START = 1, STOP = 2};
 char State = IDLE;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 char inp;
 setvbuf(stdin, NULL, _IONBF, 0);
 8001130:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <main+0xfc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6858      	ldr	r0, [r3, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	2202      	movs	r2, #2
 800113a:	2100      	movs	r1, #0
 800113c:	f004 fb6e 	bl	800581c <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fc51 	bl	80019e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f87c 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 f9e0 	bl	800150c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114c:	f000 f992 	bl	8001474 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001150:	f000 f916 	bl	8001380 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001154:	f000 f8c0 	bl	80012d8 <MX_TIM1_Init>

  //scan user input for statemachine
  //inp = *scanInp();

  //start timer
  HAL_TIM_Base_Start(&htim1);
 8001158:	4832      	ldr	r0, [pc, #200]	@ (8001224 <main+0x100>)
 800115a:	f001 ff99 	bl	8003090 <HAL_TIM_Base_Start>
  printf("timer 1 value is %ld \n", TIM1->CCR1);
 800115e:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <main+0x104>)
 8001160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001162:	4619      	mov	r1, r3
 8001164:	4831      	ldr	r0, [pc, #196]	@ (800122c <main+0x108>)
 8001166:	f004 fae7 	bl	8005738 <printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blinkLED();  //call the blinkled function
 800116a:	f7ff ff63 	bl	8001034 <blinkLED>
	  //get current time in ms
	  timer_val = __HAL_TIM_GET_COUNTER(&htim1);  //this is too slow, we need to use the timer ticks (TIM1->CNT to find out how many ticks away from each other
 800116e:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <main+0x100>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001174:	86bb      	strh	r3, [r7, #52]	@ 0x34

	  //get time elapsed
	  timer_val = __HAL_TIM_GET_COUNTER(&htim1) - timer_val;
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <main+0x100>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117c:	b29a      	uxth	r2, r3
 800117e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	86bb      	strh	r3, [r7, #52]	@ 0x34

	  //scan for user inpt for the state machine
	 inp = *scanInp();
 8001184:	f7ff ff66 	bl	8001054 <scanInp>
 8001188:	4603      	mov	r3, r0
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  //wait again so we don't flood the serial terminal
	  //HAL_Delay(100);

	  if (inp == 'i')
 8001190:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001194:	2b69      	cmp	r3, #105	@ 0x69
 8001196:	d103      	bne.n	80011a0 <main+0x7c>
	  {
		  State = IDLE;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800119e:	e00e      	b.n	80011be <main+0x9a>
	  }
	  else if (inp == 's')
 80011a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011a4:	2b73      	cmp	r3, #115	@ 0x73
 80011a6:	d103      	bne.n	80011b0 <main+0x8c>
	  {
		  State = START;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80011ae:	e006      	b.n	80011be <main+0x9a>
	  }
	  else if (inp == 't')
 80011b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011b4:	2b74      	cmp	r3, #116	@ 0x74
 80011b6:	d102      	bne.n	80011be <main+0x9a>
	  {
		  State = STOP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  } else {};

	  //State Machine starts here
	  switch (State)
 80011be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d01a      	beq.n	80011fc <main+0xd8>
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	dc22      	bgt.n	8001210 <main+0xec>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <main+0xb0>
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d00a      	beq.n	80011e8 <main+0xc4>
 80011d2:	e01d      	b.n	8001210 <main+0xec>
	  {
	  case IDLE:
		 // uart_buf_len = sprintf(uart_buf, "In IDLE state\r\n");
		  printf("In IDLE State\r\n");
 80011d4:	4816      	ldr	r0, [pc, #88]	@ (8001230 <main+0x10c>)
 80011d6:	f004 fb07 	bl	80057e8 <puts>
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); /// disable nShutdown pin for digital amp
		  startSpeaker(0); //turn off speaker
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff ff54 	bl	8001088 <startSpeaker>
		  HAL_Delay(100);
 80011e0:	2064      	movs	r0, #100	@ 0x64
 80011e2:	f000 fc71 	bl	8001ac8 <HAL_Delay>

		  break;
 80011e6:	e01a      	b.n	800121e <main+0xfa>

	  case START:
		  //nShutdownDamp = 1; // start digital amplifier
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		  startSpeaker(1);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ff4d 	bl	8001088 <startSpeaker>
		  //uart_buf_len = sprintf(uart_buf, "In Start State\r\n");
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  printf("In START State\r\n"); // print status in terminal
 80011ee:	4811      	ldr	r0, [pc, #68]	@ (8001234 <main+0x110>)
 80011f0:	f004 fafa 	bl	80057e8 <puts>
		  HAL_Delay(100);  //wait 100ms
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f000 fc67 	bl	8001ac8 <HAL_Delay>

		  break;
 80011fa:	e010      	b.n	800121e <main+0xfa>

	  case STOP:
		  //nShutdownDamp = 0; //stop digital amplifier
		  startSpeaker(0);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ff43 	bl	8001088 <startSpeaker>
		  printf("In STOP State\r\n"); // print status in terminal
 8001202:	480d      	ldr	r0, [pc, #52]	@ (8001238 <main+0x114>)
 8001204:	f004 faf0 	bl	80057e8 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f000 fc5d 	bl	8001ac8 <HAL_Delay>
		  break;
 800120e:	e006      	b.n	800121e <main+0xfa>

	  default:
		  /*uart_buf_len = sprintf(uart_buf, "In Default State\r\n");
  		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
		  printf("In DEFAULT State\r\n"); // print status in terminal
 8001210:	480a      	ldr	r0, [pc, #40]	@ (800123c <main+0x118>)
 8001212:	f004 fae9 	bl	80057e8 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001216:	2064      	movs	r0, #100	@ 0x64
 8001218:	f000 fc56 	bl	8001ac8 <HAL_Delay>
		  break;
 800121c:	bf00      	nop
	  blinkLED();  //call the blinkled function
 800121e:	e7a4      	b.n	800116a <main+0x46>
 8001220:	20000428 	.word	0x20000428
 8001224:	200006dc 	.word	0x200006dc
 8001228:	40012c00 	.word	0x40012c00
 800122c:	0800e3a4 	.word	0x0800e3a4
 8001230:	0800e3bc 	.word	0x0800e3bc
 8001234:	0800e3cc 	.word	0x0800e3cc
 8001238:	0800e3dc 	.word	0x0800e3dc
 800123c:	0800e3ec 	.word	0x0800e3ec

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	@ 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0318 	add.w	r3, r7, #24
 800124a:	2238      	movs	r2, #56	@ 0x38
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fbe1 	bl	8005a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001262:	2000      	movs	r0, #0
 8001264:	f000 feea 	bl	800203c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001272:	2340      	movs	r3, #64	@ 0x40
 8001274:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800127e:	2304      	movs	r3, #4
 8001280:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001282:	2355      	movs	r3, #85	@ 0x55
 8001284:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f000 ff84 	bl	80021a4 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012a2:	f000 f981 	bl	80015a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2104      	movs	r1, #4
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fa82 	bl	80027c8 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012ca:	f000 f96d 	bl	80015a8 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	@ 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_TIM1_Init+0xa0>)
 80012f8:	4a20      	ldr	r2, [pc, #128]	@ (800137c <MX_TIM1_Init+0xa4>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_TIM1_Init+0xa0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_TIM1_Init+0xa0>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <MX_TIM1_Init+0xa0>)
 800130a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_TIM1_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_TIM1_Init+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_TIM1_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001322:	4815      	ldr	r0, [pc, #84]	@ (8001378 <MX_TIM1_Init+0xa0>)
 8001324:	f001 fe5c 	bl	8002fe0 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800132e:	f000 f93b 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480e      	ldr	r0, [pc, #56]	@ (8001378 <MX_TIM1_Init+0xa0>)
 8001340:	f002 f97e 	bl	8003640 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800134a:	f000 f92d 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <MX_TIM1_Init+0xa0>)
 8001360:	f002 febc 	bl	80040dc <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800136a:	f000 f91d 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200006dc 	.word	0x200006dc
 800137c:	40012c00 	.word	0x40012c00

08001380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	@ 0x38
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  //6800-1  , this gives 25khz, f_pwm = fclk/(psc*(arr-1))
  //arr/2-1 = 6800/2-1
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <MX_TIM4_Init+0xec>)
 80013b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001470 <MX_TIM4_Init+0xf0>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 68-1;
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <MX_TIM4_Init+0xec>)
 80013ba:	2243      	movs	r2, #67	@ 0x43
 80013bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <MX_TIM4_Init+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;  //100-1  , this gives 25khz
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <MX_TIM4_Init+0xec>)
 80013c6:	2263      	movs	r2, #99	@ 0x63
 80013c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <MX_TIM4_Init+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <MX_TIM4_Init+0xec>)
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d6:	4825      	ldr	r0, [pc, #148]	@ (800146c <MX_TIM4_Init+0xec>)
 80013d8:	f001 fe02 	bl	8002fe0 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013e2:	f000 f8e1 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f0:	4619      	mov	r1, r3
 80013f2:	481e      	ldr	r0, [pc, #120]	@ (800146c <MX_TIM4_Init+0xec>)
 80013f4:	f002 f924 	bl	8003640 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013fe:	f000 f8d3 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001402:	481a      	ldr	r0, [pc, #104]	@ (800146c <MX_TIM4_Init+0xec>)
 8001404:	f001 fea6 	bl	8003154 <HAL_TIM_PWM_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800140e:	f000 f8cb 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4812      	ldr	r0, [pc, #72]	@ (800146c <MX_TIM4_Init+0xec>)
 8001422:	f002 fe5b 	bl	80040dc <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800142c:	f000 f8bc 	bl	80015a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001430:	2360      	movs	r3, #96	@ 0x60
 8001432:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = htim4.Init.Period/2-1; //arr/2-1 = 6800/2-1
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <MX_TIM4_Init+0xec>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	3b01      	subs	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4807      	ldr	r0, [pc, #28]	@ (800146c <MX_TIM4_Init+0xec>)
 800144e:	f001 ffe3 	bl	8003418 <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001458:	f000 f8a6 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <MX_TIM4_Init+0xec>)
 800145e:	f000 f901 	bl	8001664 <HAL_TIM_MspPostInit>

}
 8001462:	bf00      	nop
 8001464:	3738      	adds	r7, #56	@ 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000728 	.word	0x20000728
 8001470:	40000800 	.word	0x40000800

08001474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 800147a:	4a23      	ldr	r2, [pc, #140]	@ (8001508 <MX_USART2_UART_Init+0x94>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014bc:	4811      	ldr	r0, [pc, #68]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014be:	f002 fe8f 	bl	80041e0 <HAL_UART_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014c8:	f000 f86e 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	480d      	ldr	r0, [pc, #52]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014d0:	f003 fd50 	bl	8004f74 <HAL_UARTEx_SetTxFifoThreshold>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014da:	f000 f865 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4808      	ldr	r0, [pc, #32]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014e2:	f003 fd85 	bl	8004ff0 <HAL_UARTEx_SetRxFifoThreshold>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014ec:	f000 f85c 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_USART2_UART_Init+0x90>)
 80014f2:	f003 fd06 	bl	8004f02 <HAL_UARTEx_DisableFifoMode>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014fc:	f000 f854 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000774 	.word	0x20000774
 8001508:	40004400 	.word	0x40004400

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <MX_GPIO_Init+0x94>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <MX_GPIO_Init+0x94>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_GPIO_Init+0x94>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_GPIO_Init+0x94>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <MX_GPIO_Init+0x94>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <MX_GPIO_Init+0x94>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001558:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <MX_GPIO_Init+0x98>)
 800155a:	f000 fd3d 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 800155e:	2361      	movs	r3, #97	@ 0x61
 8001560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f000 fbae 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001578:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800157c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4619      	mov	r1, r3
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_GPIO_Init+0x98>)
 8001592:	f000 fb9f 	bl	8001cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <Error_Handler+0x8>

080015b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_MspInit+0x44>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	4a0e      	ldr	r2, [pc, #56]	@ (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_MspInit+0x44>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_MspInit+0x44>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_MspInit+0x44>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ea:	f000 fdcb 	bl	8002184 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <HAL_TIM_Base_MspInit+0x5c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10c      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160e:	4b13      	ldr	r3, [pc, #76]	@ (800165c <HAL_TIM_Base_MspInit+0x60>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001612:	4a12      	ldr	r2, [pc, #72]	@ (800165c <HAL_TIM_Base_MspInit+0x60>)
 8001614:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001618:	6613      	str	r3, [r2, #96]	@ 0x60
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_TIM_Base_MspInit+0x60>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001626:	e010      	b.n	800164a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_TIM_Base_MspInit+0x64>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10b      	bne.n	800164a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_TIM_Base_MspInit+0x60>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <HAL_TIM_Base_MspInit+0x60>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6593      	str	r3, [r2, #88]	@ 0x58
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <HAL_TIM_Base_MspInit+0x60>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40000800 	.word	0x40000800

08001664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_TIM_MspPostInit+0x64>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d11b      	bne.n	80016be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a10      	ldr	r2, [pc, #64]	@ (80016cc <HAL_TIM_MspPostInit+0x68>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800169e:	2340      	movs	r3, #64	@ 0x40
 80016a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <HAL_TIM_MspPostInit+0x6c>)
 80016ba:	f000 fb0b 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000800 	.word	0x40000800
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b09a      	sub	sp, #104	@ 0x68
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	2244      	movs	r2, #68	@ 0x44
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 f98e 	bl	8005a16 <memset>
  if(huart->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_UART_MspInit+0xa8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d136      	bne.n	8001772 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fa75 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800171c:	f7ff ff44 	bl	80015a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001720:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <HAL_UART_MspInit+0xac>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <HAL_UART_MspInit+0xac>)
 8001726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172a:	6593      	str	r3, [r2, #88]	@ 0x58
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <HAL_UART_MspInit+0xac>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_UART_MspInit+0xac>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <HAL_UART_MspInit+0xac>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_UART_MspInit+0xac>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001750:	230c      	movs	r3, #12
 8001752:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001760:	2307      	movs	r3, #7
 8001762:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176e:	f000 fab1 	bl	8001cd4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001772:	bf00      	nop
 8001774:	3768      	adds	r7, #104	@ 0x68
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004400 	.word	0x40004400
 8001780:	40021000 	.word	0x40021000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <NMI_Handler+0x4>

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <MemManage_Handler+0x4>

0800179c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <UsageFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 f957 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  return 1;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_kill>:

int _kill(int pid, int sig)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017fc:	f004 f96a 	bl	8005ad4 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	2216      	movs	r2, #22
 8001804:	601a      	str	r2, [r3, #0]
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_exit>:

void _exit (int status)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800181a:	f04f 31ff 	mov.w	r1, #4294967295
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffe7 	bl	80017f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <_exit+0x12>

08001828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e00a      	b.n	8001850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183a:	f7ff fc57 	bl	80010ec <__io_getchar>
 800183e:	4601      	mov	r1, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf0      	blt.n	800183a <_read+0x12>
  }

  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e009      	b.n	8001888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc23 	bl	80010c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf1      	blt.n	8001874 <_write+0x12>
  }
  return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_close>:

int _close(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c2:	605a      	str	r2, [r3, #4]
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_isatty>:

int _isatty(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f004 f8ce 	bl	8005ad4 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20008000 	.word	0x20008000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000808 	.word	0x20000808
 800196c:	20000b20 	.word	0x20000b20

08001970 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001994:	480d      	ldr	r0, [pc, #52]	@ (80019cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001996:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopForever+0xe>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopForever+0x16>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f004 f88d 	bl	8005ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019c6:	f7ff fbad 	bl	8001124 <main>

080019ca <LoopForever>:

LoopForever:
    b LoopForever
 80019ca:	e7fe      	b.n	80019ca <LoopForever>
  ldr   r0, =_estack
 80019cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 80019d8:	0800e8dc 	.word	0x0800e8dc
  ldr r2, =_sbss
 80019dc:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 80019e0:	20000b1c 	.word	0x20000b1c

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>

080019e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f93d 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f80e 	bl	8001a18 <HAL_InitTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	e001      	b.n	8001a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a08:	f7ff fdd4 	bl	80015b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_InitTick+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d022      	beq.n	8001a72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_InitTick+0x6c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_InitTick+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f93a 	bl	8001cba <HAL_SYSTICK_Config>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10f      	bne.n	8001a6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	d809      	bhi.n	8001a66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a52:	2200      	movs	r2, #0
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5a:	f000 f914 	bl	8001c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <HAL_InitTick+0x70>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e004      	b.n	8001a76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_IncTick+0x1c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_IncTick+0x20>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <HAL_IncTick+0x1c>)
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	2000080c 	.word	0x2000080c
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2000080c 	.word	0x2000080c

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d004      	beq.n	8001aec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_Delay+0x40>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aec:	bf00      	nop
 8001aee:	f7ff ffdf 	bl	8001ab0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8f7      	bhi.n	8001aee <HAL_Delay+0x26>
  {
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000008 	.word	0x20000008

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	@ (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff8e 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff47 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff5e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5f 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffb2 	bl	8001c2c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ce2:	e15a      	b.n	8001f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 814c 	beq.w	8001f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d005      	beq.n	8001d14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d130      	bne.n	8001d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	f003 0201 	and.w	r2, r3, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d017      	beq.n	8001db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d123      	bne.n	8001e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a6 	beq.w	8001f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e48:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb8 <HAL_GPIO_Init+0x2e4>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb8 <HAL_GPIO_Init+0x2e4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e54:	4b58      	ldr	r3, [pc, #352]	@ (8001fb8 <HAL_GPIO_Init+0x2e4>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e60:	4a56      	ldr	r2, [pc, #344]	@ (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e8a:	d01f      	beq.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d019      	beq.n	8001ec8 <HAL_GPIO_Init+0x1f4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_GPIO_Init+0x1f0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc8 <HAL_GPIO_Init+0x2f4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_GPIO_Init+0x1ec>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a49      	ldr	r2, [pc, #292]	@ (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x1e8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a48      	ldr	r2, [pc, #288]	@ (8001fd0 <HAL_GPIO_Init+0x2fc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_Init+0x1e4>
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	e00a      	b.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001eb8:	2306      	movs	r3, #6
 8001eba:	e008      	b.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e006      	b.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1fa>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ede:	4937      	ldr	r1, [pc, #220]	@ (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eec:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f10:	4a30      	ldr	r2, [pc, #192]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f16:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f3a:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f64:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_GPIO_Init+0x300>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f ae9d 	bne.w	8001ce4 <HAL_GPIO_Init+0x10>
  }
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	48000400 	.word	0x48000400
 8001fc4:	48000800 	.word	0x48000800
 8001fc8:	48000c00 	.word	0x48000c00
 8001fcc:	48001000 	.word	0x48001000
 8001fd0:	48001400 	.word	0x48001400
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43d9      	mvns	r1, r3
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	400b      	ands	r3, r1
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d141      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204a:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002056:	d131      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a46      	ldr	r2, [pc, #280]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002070:	4a41      	ldr	r2, [pc, #260]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002078:	4b40      	ldr	r3, [pc, #256]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2232      	movs	r2, #50	@ 0x32
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a3f      	ldr	r2, [pc, #252]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	e002      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a2:	d102      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b33      	ldr	r3, [pc, #204]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d158      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e057      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020cc:	e04d      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d4:	d141      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d131      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ea:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2232      	movs	r2, #50	@ 0x32
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	e002      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3b01      	subs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212e:	d102      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002142:	d112      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e011      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002158:	e007      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40007000 	.word	0x40007000
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83

08002184 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800218e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e2fe      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d075      	beq.n	80022ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	4b97      	ldr	r3, [pc, #604]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	4b94      	ldr	r3, [pc, #592]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3e>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_OscConfig+0x44>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d10b      	bne.n	8002200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d05b      	beq.n	80022ac <HAL_RCC_OscConfig+0x108>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d157      	bne.n	80022ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e2d9      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002208:	d106      	bne.n	8002218 <HAL_RCC_OscConfig+0x74>
 800220a:	4b85      	ldr	r3, [pc, #532]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a84      	ldr	r2, [pc, #528]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7e      	ldr	r2, [pc, #504]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b7c      	ldr	r3, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7b      	ldr	r2, [pc, #492]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 800223c:	4b78      	ldr	r3, [pc, #480]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a77      	ldr	r2, [pc, #476]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b75      	ldr	r3, [pc, #468]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a74      	ldr	r2, [pc, #464]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fc28 	bl	8001ab0 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fc24 	bl	8001ab0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e29e      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	4b6a      	ldr	r3, [pc, #424]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xc0>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff fc14 	bl	8001ab0 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fc10 	bl	8001ab0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e28a      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	4b60      	ldr	r3, [pc, #384]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0xe8>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4b56      	ldr	r3, [pc, #344]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0x136>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_OscConfig+0x13c>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11f      	bne.n	8002320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x154>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e25d      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b49      	ldr	r3, [pc, #292]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4946      	ldr	r1, [pc, #280]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800230c:	4b45      	ldr	r3, [pc, #276]	@ (8002424 <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fb81 	bl	8001a18 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d043      	beq.n	80023a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e249      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d023      	beq.n	8002370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3c      	ldr	r2, [pc, #240]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fbbc 	bl	8001ab0 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fbb8 	bl	8001ab0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e232      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	492d      	ldr	r1, [pc, #180]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e01a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2a      	ldr	r2, [pc, #168]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002376:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fb98 	bl	8001ab0 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fb94 	bl	8001ab0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e20e      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e0>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d041      	beq.n	8002436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023c0:	4a17      	ldr	r2, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff fb71 	bl	8001ab0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d2:	f7ff fb6d 	bl	8001ab0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1e7      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ef      	beq.n	80023d2 <HAL_RCC_OscConfig+0x22e>
 80023f2:	e020      	b.n	8002436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff fb54 	bl	8001ab0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240a:	e00d      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fb50 	bl	8001ab0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d906      	bls.n	8002428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1ca      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	4b8c      	ldr	r3, [pc, #560]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ea      	bne.n	800240c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a6 	beq.w	8002590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002448:	4b84      	ldr	r3, [pc, #528]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x2b4>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x2b6>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b7f      	ldr	r3, [pc, #508]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a7e      	ldr	r2, [pc, #504]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247a:	4b79      	ldr	r3, [pc, #484]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002486:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fb0d 	bl	8001ab0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fb09 	bl	8001ab0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e183      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_RCC_OscConfig+0x32e>
 80024c0:	4b66      	ldr	r3, [pc, #408]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	4a65      	ldr	r2, [pc, #404]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d0:	e024      	b.n	800251c <HAL_RCC_OscConfig+0x378>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d110      	bne.n	80024fc <HAL_RCC_OscConfig+0x358>
 80024da:	4b60      	ldr	r3, [pc, #384]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e0:	4a5e      	ldr	r2, [pc, #376]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f0:	4a5a      	ldr	r2, [pc, #360]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024fa:	e00f      	b.n	800251c <HAL_RCC_OscConfig+0x378>
 80024fc:	4b57      	ldr	r3, [pc, #348]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	4a56      	ldr	r2, [pc, #344]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800250c:	4b53      	ldr	r3, [pc, #332]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a52      	ldr	r2, [pc, #328]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7ff fac4 	bl	8001ab0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7ff fac0 	bl	8001ab0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e138      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ed      	beq.n	800252c <HAL_RCC_OscConfig+0x388>
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff faad 	bl	8001ab0 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff faa9 	bl	8001ab0 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e121      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ed      	bne.n	800255a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b35      	ldr	r3, [pc, #212]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	4a34      	ldr	r2, [pc, #208]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03c      	beq.n	8002616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025a4:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025aa:	4a2c      	ldr	r2, [pc, #176]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa7c 	bl	8001ab0 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7ff fa78 	bl	8001ab0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0f2      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	4b23      	ldr	r3, [pc, #140]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x418>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025de:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e4:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff fa5f 	bl	8001ab0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f6:	f7ff fa5b 	bl	8001ab0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0d5      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80c9 	beq.w	80027b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002620:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f000 8083 	beq.w	8002734 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d15e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff fa35 	bl	8001ab0 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	e00c      	b.n	8002664 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff fa31 	bl	8001ab0 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d905      	bls.n	8002664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0ab      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002664:	4b55      	ldr	r3, [pc, #340]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ec      	bne.n	800264a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b52      	ldr	r3, [pc, #328]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4b52      	ldr	r3, [pc, #328]	@ (80027c0 <HAL_RCC_OscConfig+0x61c>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6a11      	ldr	r1, [r2, #32]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002680:	3a01      	subs	r2, #1
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	4311      	orrs	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800268a:	0212      	lsls	r2, r2, #8
 800268c:	4311      	orrs	r1, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	0552      	lsls	r2, r2, #21
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0652      	lsls	r2, r2, #25
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026aa:	06d2      	lsls	r2, r2, #27
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4943      	ldr	r1, [pc, #268]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a40      	ldr	r2, [pc, #256]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c0:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f9f0 	bl	8001ab0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f7ff f9ec 	bl	8001ab0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e066      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b35      	ldr	r3, [pc, #212]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x530>
 80026f2:	e05e      	b.n	80027b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a30      	ldr	r2, [pc, #192]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff f9d6 	bl	8001ab0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff f9d2 	bl	8001ab0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e04c      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002726:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4924      	ldr	r1, [pc, #144]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 800272c:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <HAL_RCC_OscConfig+0x620>)
 800272e:	4013      	ands	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
 8002732:	e03e      	b.n	80027b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e039      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002740:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	429a      	cmp	r2, r3
 8002752:	d12c      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d123      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d11b      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d113      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d109      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	019f800c 	.word	0x019f800c
 80027c4:	feeefffc 	.word	0xfeeefffc

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e11e      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b91      	ldr	r3, [pc, #580]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d910      	bls.n	8002810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 020f 	bic.w	r2, r3, #15
 80027f6:	498c      	ldr	r1, [pc, #560]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e106      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d073      	beq.n	8002904 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d129      	bne.n	8002878 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002824:	4b81      	ldr	r3, [pc, #516]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0f4      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002834:	f000 f99e 	bl	8002b74 <RCC_GetSysClockFreqFromPLLSource>
 8002838:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4a7c      	ldr	r2, [pc, #496]	@ (8002a30 <HAL_RCC_ClockConfig+0x268>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d93f      	bls.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002842:	4b7a      	ldr	r3, [pc, #488]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	d033      	beq.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12f      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002862:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800286a:	4a70      	ldr	r2, [pc, #448]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800286c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002870:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e024      	b.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d107      	bne.n	8002890 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002880:	4b6a      	ldr	r3, [pc, #424]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0c6      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002890:	4b66      	ldr	r3, [pc, #408]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0be      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028a0:	f000 f8ce 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4a61      	ldr	r2, [pc, #388]	@ (8002a30 <HAL_RCC_ClockConfig+0x268>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d909      	bls.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ae:	4b5f      	ldr	r3, [pc, #380]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028b6:	4a5d      	ldr	r2, [pc, #372]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4957      	ldr	r1, [pc, #348]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7ff f8ec 	bl	8001ab0 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7ff f8e8 	bl	8001ab0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e095      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b4e      	ldr	r3, [pc, #312]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a42      	ldr	r2, [pc, #264]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002926:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002934:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800293c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800293e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4936      	ldr	r1, [pc, #216]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
 8002956:	e008      	b.n	800296a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b80      	cmp	r3, #128	@ 0x80
 800295c:	d105      	bne.n	800296a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800295e:	4b33      	ldr	r3, [pc, #204]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a32      	ldr	r2, [pc, #200]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002968:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d21d      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 020f 	bic.w	r2, r3, #15
 8002980:	4929      	ldr	r1, [pc, #164]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002988:	f7ff f892 	bl	8001ab0 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7ff f88e 	bl	8001ab0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e03b      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1ed      	bne.n	8002990 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4917      	ldr	r1, [pc, #92]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490f      	ldr	r1, [pc, #60]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f2:	f000 f825 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490c      	ldr	r1, [pc, #48]	@ (8002a34 <HAL_RCC_ClockConfig+0x26c>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fffe 	bl	8001a18 <HAL_InitTick>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	04c4b400 	.word	0x04c4b400
 8002a34:	0800e400 	.word	0x0800e400
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e047      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a58:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a64:	4b26      	ldr	r3, [pc, #152]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e03e      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a6a:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d136      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a94:	4a1a      	ldr	r2, [pc, #104]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	4a16      	ldr	r2, [pc, #88]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9e:	68d2      	ldr	r2, [r2, #12]
 8002aa0:	0a12      	lsrs	r2, r2, #8
 8002aa2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
      break;
 8002aac:	e00c      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aae:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	0a12      	lsrs	r2, r2, #8
 8002abc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
      break;
 8002ac6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0e5b      	lsrs	r3, r3, #25
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e001      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ae8:	693b      	ldr	r3, [r7, #16]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	007a1200 	.word	0x007a1200

08002b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	0800e410 	.word	0x0800e410

08002b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b4c:	f7ff ffda 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0adb      	lsrs	r3, r3, #11
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	0800e410 	.word	0x0800e410

08002b74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d10c      	bne.n	8002bb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b98:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba2:	68d2      	ldr	r2, [r2, #12]
 8002ba4:	0a12      	lsrs	r2, r2, #8
 8002ba6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
    break;
 8002bb0:	e00c      	b.n	8002bcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	0a12      	lsrs	r2, r2, #8
 8002bc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    break;
 8002bca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0e5b      	lsrs	r3, r3, #25
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	007a1200 	.word	0x007a1200
 8002bfc:	00f42400 	.word	0x00f42400

08002c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8098 	beq.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	4a3f      	ldr	r2, [pc, #252]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a39      	ldr	r2, [pc, #228]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c56:	f7fe ff2b 	bl	8001ab0 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe ff27 	bl	8001ab0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d902      	bls.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	74fb      	strb	r3, [r7, #19]
        break;
 8002c70:	e005      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c72:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ef      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d159      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c84:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01e      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca0:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002caa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ccc:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fee7 	bl	8001ab0 <HAL_GetTick>
 8002ce2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fee3 	bl	8001ab0 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d902      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	74fb      	strb	r3, [r7, #19]
            break;
 8002cfc:	e006      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ec      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	4903      	ldr	r1, [pc, #12]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	74bb      	strb	r3, [r7, #18]
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3c:	7c7b      	ldrb	r3, [r7, #17]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d42:	4ba6      	ldr	r3, [pc, #664]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	4aa5      	ldr	r2, [pc, #660]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d5a:	4ba0      	ldr	r3, [pc, #640]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	499c      	ldr	r1, [pc, #624]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7c:	4b97      	ldr	r3, [pc, #604]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	f023 020c 	bic.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4994      	ldr	r1, [pc, #592]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	498b      	ldr	r1, [pc, #556]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc0:	4b86      	ldr	r3, [pc, #536]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	4983      	ldr	r1, [pc, #524]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002de2:	4b7e      	ldr	r3, [pc, #504]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	497a      	ldr	r1, [pc, #488]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e04:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4972      	ldr	r1, [pc, #456]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e26:	4b6d      	ldr	r3, [pc, #436]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4969      	ldr	r1, [pc, #420]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e48:	4b64      	ldr	r3, [pc, #400]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4961      	ldr	r1, [pc, #388]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	4958      	ldr	r1, [pc, #352]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e8c:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	4950      	ldr	r1, [pc, #320]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eac:	4b4b      	ldr	r3, [pc, #300]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec4:	4b45      	ldr	r3, [pc, #276]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	4942      	ldr	r1, [pc, #264]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002efc:	4b37      	ldr	r3, [pc, #220]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4934      	ldr	r1, [pc, #208]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a2e      	ldr	r2, [pc, #184]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f34:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f42:	4926      	ldr	r1, [pc, #152]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f52:	d105      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f54:	4b21      	ldr	r3, [pc, #132]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4a20      	ldr	r2, [pc, #128]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	4918      	ldr	r1, [pc, #96]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8c:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a12      	ldr	r2, [pc, #72]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb2:	490a      	ldr	r1, [pc, #40]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e049      	b.n	8003086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe faf8 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f000 fc08 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d001      	beq.n	80030a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e042      	b.n	800312e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a21      	ldr	r2, [pc, #132]	@ (800313c <HAL_TIM_Base_Start+0xac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_TIM_Base_Start+0x5c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c2:	d013      	beq.n	80030ec <HAL_TIM_Base_Start+0x5c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <HAL_TIM_Base_Start+0xb0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIM_Base_Start+0x5c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <HAL_TIM_Base_Start+0xb4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_TIM_Base_Start+0x5c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_TIM_Base_Start+0xb8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_Base_Start+0x5c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_TIM_Base_Start+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d115      	bne.n	8003118 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <HAL_TIM_Base_Start+0xc0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d015      	beq.n	800312a <HAL_TIM_Base_Start+0x9a>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003104:	d011      	beq.n	800312a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	e008      	b.n	800312a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e000      	b.n	800312c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40013400 	.word	0x40013400
 800314c:	40014000 	.word	0x40014000
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e049      	b.n	80031fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f841 	bl	8003202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 fb4e 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start+0x24>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e03c      	b.n	80032b6 <HAL_TIM_PWM_Start+0x9e>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d109      	bne.n	8003256 <HAL_TIM_PWM_Start+0x3e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e02f      	b.n	80032b6 <HAL_TIM_PWM_Start+0x9e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d109      	bne.n	8003270 <HAL_TIM_PWM_Start+0x58>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e022      	b.n	80032b6 <HAL_TIM_PWM_Start+0x9e>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d109      	bne.n	800328a <HAL_TIM_PWM_Start+0x72>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e015      	b.n	80032b6 <HAL_TIM_PWM_Start+0x9e>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b10      	cmp	r3, #16
 800328e:	d109      	bne.n	80032a4 <HAL_TIM_PWM_Start+0x8c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e008      	b.n	80032b6 <HAL_TIM_PWM_Start+0x9e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e097      	b.n	80033ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_PWM_Start+0xb6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032cc:	e023      	b.n	8003316 <HAL_TIM_PWM_Start+0xfe>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d104      	bne.n	80032de <HAL_TIM_PWM_Start+0xc6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032dc:	e01b      	b.n	8003316 <HAL_TIM_PWM_Start+0xfe>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0xd6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ec:	e013      	b.n	8003316 <HAL_TIM_PWM_Start+0xfe>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0xe6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_PWM_Start+0xfe>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b10      	cmp	r3, #16
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0xf6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	e003      	b.n	8003316 <HAL_TIM_PWM_Start+0xfe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 feb6 	bl	8004090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a33      	ldr	r2, [pc, #204]	@ (80033f8 <HAL_TIM_PWM_Start+0x1e0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_TIM_PWM_Start+0x13e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a32      	ldr	r2, [pc, #200]	@ (80033fc <HAL_TIM_PWM_Start+0x1e4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_TIM_PWM_Start+0x13e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a30      	ldr	r2, [pc, #192]	@ (8003400 <HAL_TIM_PWM_Start+0x1e8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_TIM_PWM_Start+0x13e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2f      	ldr	r2, [pc, #188]	@ (8003404 <HAL_TIM_PWM_Start+0x1ec>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_TIM_PWM_Start+0x13e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2d      	ldr	r2, [pc, #180]	@ (8003408 <HAL_TIM_PWM_Start+0x1f0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_TIM_PWM_Start+0x142>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_TIM_PWM_Start+0x144>
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a20      	ldr	r2, [pc, #128]	@ (80033f8 <HAL_TIM_PWM_Start+0x1e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_TIM_PWM_Start+0x194>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003382:	d013      	beq.n	80033ac <HAL_TIM_PWM_Start+0x194>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a20      	ldr	r2, [pc, #128]	@ (800340c <HAL_TIM_PWM_Start+0x1f4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_TIM_PWM_Start+0x194>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <HAL_TIM_PWM_Start+0x1f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIM_PWM_Start+0x194>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_TIM_PWM_Start+0x1e4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_PWM_Start+0x194>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <HAL_TIM_PWM_Start+0x1e8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d115      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <HAL_TIM_PWM_Start+0x1fc>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d015      	beq.n	80033ea <HAL_TIM_PWM_Start+0x1d2>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c4:	d011      	beq.n	80033ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	e008      	b.n	80033ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e000      	b.n	80033ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	00010007 	.word	0x00010007

08003418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0ff      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b14      	cmp	r3, #20
 8003442:	f200 80f0 	bhi.w	8003626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003446:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	080034a1 	.word	0x080034a1
 8003450:	08003627 	.word	0x08003627
 8003454:	08003627 	.word	0x08003627
 8003458:	08003627 	.word	0x08003627
 800345c:	080034e1 	.word	0x080034e1
 8003460:	08003627 	.word	0x08003627
 8003464:	08003627 	.word	0x08003627
 8003468:	08003627 	.word	0x08003627
 800346c:	08003523 	.word	0x08003523
 8003470:	08003627 	.word	0x08003627
 8003474:	08003627 	.word	0x08003627
 8003478:	08003627 	.word	0x08003627
 800347c:	08003563 	.word	0x08003563
 8003480:	08003627 	.word	0x08003627
 8003484:	08003627 	.word	0x08003627
 8003488:	08003627 	.word	0x08003627
 800348c:	080035a5 	.word	0x080035a5
 8003490:	08003627 	.word	0x08003627
 8003494:	08003627 	.word	0x08003627
 8003498:	08003627 	.word	0x08003627
 800349c:	080035e5 	.word	0x080035e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fa60 	bl	800396c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6999      	ldr	r1, [r3, #24]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	619a      	str	r2, [r3, #24]
      break;
 80034de:	e0a5      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fad0 	bl	8003a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6999      	ldr	r1, [r3, #24]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	021a      	lsls	r2, r3, #8
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	619a      	str	r2, [r3, #24]
      break;
 8003520:	e084      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fb39 	bl	8003ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0208 	orr.w	r2, r2, #8
 800353c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0204 	bic.w	r2, r2, #4
 800354c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69d9      	ldr	r1, [r3, #28]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	61da      	str	r2, [r3, #28]
      break;
 8003560:	e064      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fba1 	bl	8003cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	021a      	lsls	r2, r3, #8
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	61da      	str	r2, [r3, #28]
      break;
 80035a2:	e043      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fc0a 	bl	8003dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0208 	orr.w	r2, r2, #8
 80035be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80035e2:	e023      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fc4e 	bl	8003e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	021a      	lsls	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003624:	e002      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
      break;
 800362a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIM_ConfigClockSource+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e0de      	b.n	800381a <HAL_TIM_ConfigClockSource+0x1da>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800367a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800367e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a63      	ldr	r2, [pc, #396]	@ (8003824 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	f000 80a9 	beq.w	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 800369c:	4a61      	ldr	r2, [pc, #388]	@ (8003824 <HAL_TIM_ConfigClockSource+0x1e4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f200 80ae 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 80036a4:	4a60      	ldr	r2, [pc, #384]	@ (8003828 <HAL_TIM_ConfigClockSource+0x1e8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f000 80a1 	beq.w	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 80036ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003828 <HAL_TIM_ConfigClockSource+0x1e8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f200 80a6 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 80036b4:	4a5d      	ldr	r2, [pc, #372]	@ (800382c <HAL_TIM_ConfigClockSource+0x1ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	f000 8099 	beq.w	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 80036bc:	4a5b      	ldr	r2, [pc, #364]	@ (800382c <HAL_TIM_ConfigClockSource+0x1ec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	f200 809e 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 80036c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003830 <HAL_TIM_ConfigClockSource+0x1f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f000 8091 	beq.w	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 80036cc:	4a58      	ldr	r2, [pc, #352]	@ (8003830 <HAL_TIM_ConfigClockSource+0x1f0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f200 8096 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 80036d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036d8:	f000 8089 	beq.w	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 80036dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036e0:	f200 808e 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e8:	d03e      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0x128>
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ee:	f200 8087 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f6:	f000 8086 	beq.w	8003806 <HAL_TIM_ConfigClockSource+0x1c6>
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fe:	d87f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003700:	2b70      	cmp	r3, #112	@ 0x70
 8003702:	d01a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xfa>
 8003704:	2b70      	cmp	r3, #112	@ 0x70
 8003706:	d87b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003708:	2b60      	cmp	r3, #96	@ 0x60
 800370a:	d050      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
 800370c:	2b60      	cmp	r3, #96	@ 0x60
 800370e:	d877      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003710:	2b50      	cmp	r3, #80	@ 0x50
 8003712:	d03c      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x14e>
 8003714:	2b50      	cmp	r3, #80	@ 0x50
 8003716:	d873      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d058      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x18e>
 800371c:	2b40      	cmp	r3, #64	@ 0x40
 800371e:	d86f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003720:	2b30      	cmp	r3, #48	@ 0x30
 8003722:	d064      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 8003724:	2b30      	cmp	r3, #48	@ 0x30
 8003726:	d86b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003728:	2b20      	cmp	r3, #32
 800372a:	d060      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d867      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05c      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 8003734:	2b10      	cmp	r3, #16
 8003736:	d05a      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x1ae>
 8003738:	e062      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	f000 fc81 	bl	8004050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800375c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	609a      	str	r2, [r3, #8]
      break;
 8003766:	e04f      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	f000 fc6a 	bl	8004050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800378a:	609a      	str	r2, [r3, #8]
      break;
 800378c:	e03c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fbdc 	bl	8003f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2150      	movs	r1, #80	@ 0x50
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fc35 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e02c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fbfb 	bl	8003fb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2160      	movs	r1, #96	@ 0x60
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fc25 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e01c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 fbbc 	bl	8003f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2140      	movs	r1, #64	@ 0x40
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fc15 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 80037ec:	e00c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f000 fc0c 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 80037fe:	e003      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e000      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	00100070 	.word	0x00100070
 8003828:	00100040 	.word	0x00100040
 800382c:	00100030 	.word	0x00100030
 8003830:	00100020 	.word	0x00100020

08003834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <TIM_Base_SetConfig+0x11c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00f      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003852:	d00b      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3f      	ldr	r2, [pc, #252]	@ (8003954 <TIM_Base_SetConfig+0x120>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3e      	ldr	r2, [pc, #248]	@ (8003958 <TIM_Base_SetConfig+0x124>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_Base_SetConfig+0x38>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	@ (800395c <TIM_Base_SetConfig+0x128>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <TIM_Base_SetConfig+0x11c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01b      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388c:	d017      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a30      	ldr	r2, [pc, #192]	@ (8003954 <TIM_Base_SetConfig+0x120>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	@ (8003958 <TIM_Base_SetConfig+0x124>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00f      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2e      	ldr	r2, [pc, #184]	@ (800395c <TIM_Base_SetConfig+0x128>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003960 <TIM_Base_SetConfig+0x12c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003964 <TIM_Base_SetConfig+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003968 <TIM_Base_SetConfig+0x134>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a16      	ldr	r2, [pc, #88]	@ (8003950 <TIM_Base_SetConfig+0x11c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0xe8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <TIM_Base_SetConfig+0x128>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0xe8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a16      	ldr	r2, [pc, #88]	@ (8003960 <TIM_Base_SetConfig+0x12c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0xe8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <TIM_Base_SetConfig+0x130>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0xe8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <TIM_Base_SetConfig+0x134>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]
  }
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40013400 	.word	0x40013400
 8003960:	40014000 	.word	0x40014000
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800

0800396c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 0201 	bic.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <TIM_OC1_SetConfig+0x10c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00f      	beq.n	80039ec <TIM_OC1_SetConfig+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a2b      	ldr	r2, [pc, #172]	@ (8003a7c <TIM_OC1_SetConfig+0x110>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_OC1_SetConfig+0x80>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <TIM_OC1_SetConfig+0x114>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_OC1_SetConfig+0x80>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <TIM_OC1_SetConfig+0x118>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC1_SetConfig+0x80>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a28      	ldr	r2, [pc, #160]	@ (8003a88 <TIM_OC1_SetConfig+0x11c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10c      	bne.n	8003a06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0308 	bic.w	r3, r3, #8
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1b      	ldr	r2, [pc, #108]	@ (8003a78 <TIM_OC1_SetConfig+0x10c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_OC1_SetConfig+0xc2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1a      	ldr	r2, [pc, #104]	@ (8003a7c <TIM_OC1_SetConfig+0x110>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_OC1_SetConfig+0xc2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <TIM_OC1_SetConfig+0x114>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_OC1_SetConfig+0xc2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <TIM_OC1_SetConfig+0x118>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_OC1_SetConfig+0xc2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a17      	ldr	r2, [pc, #92]	@ (8003a88 <TIM_OC1_SetConfig+0x11c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40013400 	.word	0x40013400
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400
 8003a88:	40014800 	.word	0x40014800

08003a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f023 0210 	bic.w	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a28      	ldr	r2, [pc, #160]	@ (8003b8c <TIM_OC2_SetConfig+0x100>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC2_SetConfig+0x6c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <TIM_OC2_SetConfig+0x104>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10d      	bne.n	8003b14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <TIM_OC2_SetConfig+0x100>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00f      	beq.n	8003b3c <TIM_OC2_SetConfig+0xb0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b90 <TIM_OC2_SetConfig+0x104>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_OC2_SetConfig+0xb0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	@ (8003b94 <TIM_OC2_SetConfig+0x108>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_OC2_SetConfig+0xb0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b98 <TIM_OC2_SetConfig+0x10c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_OC2_SetConfig+0xb0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <TIM_OC2_SetConfig+0x110>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d113      	bne.n	8003b64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800

08003ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a27      	ldr	r2, [pc, #156]	@ (8003c9c <TIM_OC3_SetConfig+0xfc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_OC3_SetConfig+0x6a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <TIM_OC3_SetConfig+0x100>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10d      	bne.n	8003c26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	@ (8003c9c <TIM_OC3_SetConfig+0xfc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00f      	beq.n	8003c4e <TIM_OC3_SetConfig+0xae>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca0 <TIM_OC3_SetConfig+0x100>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_OC3_SetConfig+0xae>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca4 <TIM_OC3_SetConfig+0x104>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_OC3_SetConfig+0xae>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a19      	ldr	r2, [pc, #100]	@ (8003ca8 <TIM_OC3_SetConfig+0x108>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_OC3_SetConfig+0xae>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <TIM_OC3_SetConfig+0x10c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d113      	bne.n	8003c76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40013400 	.word	0x40013400
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800

08003cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	031b      	lsls	r3, r3, #12
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a28      	ldr	r2, [pc, #160]	@ (8003db0 <TIM_OC4_SetConfig+0x100>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC4_SetConfig+0x6c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <TIM_OC4_SetConfig+0x104>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	031b      	lsls	r3, r3, #12
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <TIM_OC4_SetConfig+0x100>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_OC4_SetConfig+0xb0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <TIM_OC4_SetConfig+0x104>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_OC4_SetConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <TIM_OC4_SetConfig+0x108>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_OC4_SetConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	@ (8003dbc <TIM_OC4_SetConfig+0x10c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_OC4_SetConfig+0xb0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	@ (8003dc0 <TIM_OC4_SetConfig+0x110>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d113      	bne.n	8003d88 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40013400 	.word	0x40013400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800

08003dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <TIM_OC5_SetConfig+0xb4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00f      	beq.n	8003e3e <TIM_OC5_SetConfig+0x7a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a16      	ldr	r2, [pc, #88]	@ (8003e7c <TIM_OC5_SetConfig+0xb8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_OC5_SetConfig+0x7a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a15      	ldr	r2, [pc, #84]	@ (8003e80 <TIM_OC5_SetConfig+0xbc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_OC5_SetConfig+0x7a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a14      	ldr	r2, [pc, #80]	@ (8003e84 <TIM_OC5_SetConfig+0xc0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_OC5_SetConfig+0x7a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <TIM_OC5_SetConfig+0xc4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d109      	bne.n	8003e52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800

08003e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	051b      	lsls	r3, r3, #20
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <TIM_OC6_SetConfig+0xb8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <TIM_OC6_SetConfig+0x7c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <TIM_OC6_SetConfig+0xbc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_OC6_SetConfig+0x7c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a16      	ldr	r2, [pc, #88]	@ (8003f4c <TIM_OC6_SetConfig+0xc0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_OC6_SetConfig+0x7c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <TIM_OC6_SetConfig+0xc4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC6_SetConfig+0x7c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <TIM_OC6_SetConfig+0xc8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	029b      	lsls	r3, r3, #10
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 030a 	bic.w	r3, r3, #10
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f023 0210 	bic.w	r2, r3, #16
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800402c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 0307 	orr.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800406a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	021a      	lsls	r2, r3, #8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	431a      	orrs	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2201      	movs	r2, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e065      	b.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2b      	ldr	r2, [pc, #172]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d108      	bne.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800412e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416a:	d013      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a12      	ldr	r2, [pc, #72]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10c      	bne.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e042      	b.n	8004278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fd fa65 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	@ 0x24
 800420e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fc4a 	bl	8004ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f97b 	bl	800452c <UART_SetConfig>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e01b      	b.n	8004278 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800424e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800425e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fcc9 	bl	8004c08 <UART_CheckIdleState>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	@ 0x28
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	2b20      	cmp	r3, #32
 8004298:	d17b      	bne.n	8004392 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_UART_Transmit+0x26>
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e074      	b.n	8004394 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2221      	movs	r2, #33	@ 0x21
 80042b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ba:	f7fd fbf9 	bl	8001ab0 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d8:	d108      	bne.n	80042ec <HAL_UART_Transmit+0x6c>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f4:	e030      	b.n	8004358 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	@ 0x80
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fd2b 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e03d      	b.n	8004394 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	3302      	adds	r3, #2
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e007      	b.n	8004346 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1c8      	bne.n	80042f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	2140      	movs	r1, #64	@ 0x40
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fcf4 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e006      	b.n	8004394 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	@ 0x28
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	f040 80b5 	bne.w	8004522 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_UART_Receive+0x28>
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0ad      	b.n	8004524 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2222      	movs	r2, #34	@ 0x22
 80043d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043de:	f7fd fb67 	bl	8001ab0 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fc:	d10e      	bne.n	800441c <HAL_UART_Receive+0x80>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d105      	bne.n	8004412 <HAL_UART_Receive+0x76>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800440c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004410:	e02d      	b.n	800446e <HAL_UART_Receive+0xd2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	22ff      	movs	r2, #255	@ 0xff
 8004416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800441a:	e028      	b.n	800446e <HAL_UART_Receive+0xd2>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <HAL_UART_Receive+0xa4>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <HAL_UART_Receive+0x9a>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	22ff      	movs	r2, #255	@ 0xff
 8004430:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004434:	e01b      	b.n	800446e <HAL_UART_Receive+0xd2>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	227f      	movs	r2, #127	@ 0x7f
 800443a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800443e:	e016      	b.n	800446e <HAL_UART_Receive+0xd2>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004448:	d10d      	bne.n	8004466 <HAL_UART_Receive+0xca>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Receive+0xc0>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	227f      	movs	r2, #127	@ 0x7f
 8004456:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800445a:	e008      	b.n	800446e <HAL_UART_Receive+0xd2>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	223f      	movs	r2, #63	@ 0x3f
 8004460:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004464:	e003      	b.n	800446e <HAL_UART_Receive+0xd2>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004474:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447e:	d108      	bne.n	8004492 <HAL_UART_Receive+0xf6>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	e003      	b.n	800449a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800449a:	e036      	b.n	800450a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2120      	movs	r1, #32
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fc58 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e032      	b.n	8004524 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10c      	bne.n	80044de <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	8a7b      	ldrh	r3, [r7, #18]
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3302      	adds	r3, #2
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	e00c      	b.n	80044f8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	8a7b      	ldrh	r3, [r7, #18]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4013      	ands	r3, r2
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1c2      	bne.n	800449c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b08c      	sub	sp, #48	@ 0x30
 8004532:	af00      	add	r7, sp, #0
 8004534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	431a      	orrs	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4bab      	ldr	r3, [pc, #684]	@ (8004808 <UART_SetConfig+0x2dc>)
 800455c:	4013      	ands	r3, r2
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004564:	430b      	orrs	r3, r1
 8004566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4aa0      	ldr	r2, [pc, #640]	@ (800480c <UART_SetConfig+0x2e0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004594:	4313      	orrs	r3, r2
 8004596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80045a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	f023 010f 	bic.w	r1, r3, #15
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a91      	ldr	r2, [pc, #580]	@ (8004810 <UART_SetConfig+0x2e4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d125      	bne.n	800461c <UART_SetConfig+0xf0>
 80045d0:	4b90      	ldr	r3, [pc, #576]	@ (8004814 <UART_SetConfig+0x2e8>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d81a      	bhi.n	8004614 <UART_SetConfig+0xe8>
 80045de:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <UART_SetConfig+0xb8>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	08004605 	.word	0x08004605
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460d 	.word	0x0800460d
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e0d6      	b.n	80047aa <UART_SetConfig+0x27e>
 80045fc:	2302      	movs	r3, #2
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e0d2      	b.n	80047aa <UART_SetConfig+0x27e>
 8004604:	2304      	movs	r3, #4
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460a:	e0ce      	b.n	80047aa <UART_SetConfig+0x27e>
 800460c:	2308      	movs	r3, #8
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004612:	e0ca      	b.n	80047aa <UART_SetConfig+0x27e>
 8004614:	2310      	movs	r3, #16
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461a:	e0c6      	b.n	80047aa <UART_SetConfig+0x27e>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7d      	ldr	r2, [pc, #500]	@ (8004818 <UART_SetConfig+0x2ec>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d138      	bne.n	8004698 <UART_SetConfig+0x16c>
 8004626:	4b7b      	ldr	r3, [pc, #492]	@ (8004814 <UART_SetConfig+0x2e8>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d82d      	bhi.n	8004690 <UART_SetConfig+0x164>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <UART_SetConfig+0x110>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004671 	.word	0x08004671
 8004640:	08004691 	.word	0x08004691
 8004644:	08004691 	.word	0x08004691
 8004648:	08004691 	.word	0x08004691
 800464c:	08004681 	.word	0x08004681
 8004650:	08004691 	.word	0x08004691
 8004654:	08004691 	.word	0x08004691
 8004658:	08004691 	.word	0x08004691
 800465c:	08004679 	.word	0x08004679
 8004660:	08004691 	.word	0x08004691
 8004664:	08004691 	.word	0x08004691
 8004668:	08004691 	.word	0x08004691
 800466c:	08004689 	.word	0x08004689
 8004670:	2300      	movs	r3, #0
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004676:	e098      	b.n	80047aa <UART_SetConfig+0x27e>
 8004678:	2302      	movs	r3, #2
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800467e:	e094      	b.n	80047aa <UART_SetConfig+0x27e>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004686:	e090      	b.n	80047aa <UART_SetConfig+0x27e>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800468e:	e08c      	b.n	80047aa <UART_SetConfig+0x27e>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004696:	e088      	b.n	80047aa <UART_SetConfig+0x27e>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5f      	ldr	r2, [pc, #380]	@ (800481c <UART_SetConfig+0x2f0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d125      	bne.n	80046ee <UART_SetConfig+0x1c2>
 80046a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004814 <UART_SetConfig+0x2e8>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046ac:	2b30      	cmp	r3, #48	@ 0x30
 80046ae:	d016      	beq.n	80046de <UART_SetConfig+0x1b2>
 80046b0:	2b30      	cmp	r3, #48	@ 0x30
 80046b2:	d818      	bhi.n	80046e6 <UART_SetConfig+0x1ba>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d00a      	beq.n	80046ce <UART_SetConfig+0x1a2>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d814      	bhi.n	80046e6 <UART_SetConfig+0x1ba>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <UART_SetConfig+0x19a>
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d008      	beq.n	80046d6 <UART_SetConfig+0x1aa>
 80046c4:	e00f      	b.n	80046e6 <UART_SetConfig+0x1ba>
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046cc:	e06d      	b.n	80047aa <UART_SetConfig+0x27e>
 80046ce:	2302      	movs	r3, #2
 80046d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d4:	e069      	b.n	80047aa <UART_SetConfig+0x27e>
 80046d6:	2304      	movs	r3, #4
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046dc:	e065      	b.n	80047aa <UART_SetConfig+0x27e>
 80046de:	2308      	movs	r3, #8
 80046e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e4:	e061      	b.n	80047aa <UART_SetConfig+0x27e>
 80046e6:	2310      	movs	r3, #16
 80046e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ec:	e05d      	b.n	80047aa <UART_SetConfig+0x27e>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004820 <UART_SetConfig+0x2f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d125      	bne.n	8004744 <UART_SetConfig+0x218>
 80046f8:	4b46      	ldr	r3, [pc, #280]	@ (8004814 <UART_SetConfig+0x2e8>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004702:	2bc0      	cmp	r3, #192	@ 0xc0
 8004704:	d016      	beq.n	8004734 <UART_SetConfig+0x208>
 8004706:	2bc0      	cmp	r3, #192	@ 0xc0
 8004708:	d818      	bhi.n	800473c <UART_SetConfig+0x210>
 800470a:	2b80      	cmp	r3, #128	@ 0x80
 800470c:	d00a      	beq.n	8004724 <UART_SetConfig+0x1f8>
 800470e:	2b80      	cmp	r3, #128	@ 0x80
 8004710:	d814      	bhi.n	800473c <UART_SetConfig+0x210>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <UART_SetConfig+0x1f0>
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d008      	beq.n	800472c <UART_SetConfig+0x200>
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x210>
 800471c:	2300      	movs	r3, #0
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004722:	e042      	b.n	80047aa <UART_SetConfig+0x27e>
 8004724:	2302      	movs	r3, #2
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472a:	e03e      	b.n	80047aa <UART_SetConfig+0x27e>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004732:	e03a      	b.n	80047aa <UART_SetConfig+0x27e>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473a:	e036      	b.n	80047aa <UART_SetConfig+0x27e>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004742:	e032      	b.n	80047aa <UART_SetConfig+0x27e>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a30      	ldr	r2, [pc, #192]	@ (800480c <UART_SetConfig+0x2e0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d12a      	bne.n	80047a4 <UART_SetConfig+0x278>
 800474e:	4b31      	ldr	r3, [pc, #196]	@ (8004814 <UART_SetConfig+0x2e8>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800475c:	d01a      	beq.n	8004794 <UART_SetConfig+0x268>
 800475e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004762:	d81b      	bhi.n	800479c <UART_SetConfig+0x270>
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004768:	d00c      	beq.n	8004784 <UART_SetConfig+0x258>
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476e:	d815      	bhi.n	800479c <UART_SetConfig+0x270>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <UART_SetConfig+0x250>
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004778:	d008      	beq.n	800478c <UART_SetConfig+0x260>
 800477a:	e00f      	b.n	800479c <UART_SetConfig+0x270>
 800477c:	2300      	movs	r3, #0
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004782:	e012      	b.n	80047aa <UART_SetConfig+0x27e>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800478a:	e00e      	b.n	80047aa <UART_SetConfig+0x27e>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004792:	e00a      	b.n	80047aa <UART_SetConfig+0x27e>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800479a:	e006      	b.n	80047aa <UART_SetConfig+0x27e>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a2:	e002      	b.n	80047aa <UART_SetConfig+0x27e>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a17      	ldr	r2, [pc, #92]	@ (800480c <UART_SetConfig+0x2e0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	f040 80a8 	bne.w	8004906 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d834      	bhi.n	8004828 <UART_SetConfig+0x2fc>
 80047be:	a201      	add	r2, pc, #4	@ (adr r2, 80047c4 <UART_SetConfig+0x298>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	08004829 	.word	0x08004829
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	08004829 	.word	0x08004829
 80047d4:	080047f7 	.word	0x080047f7
 80047d8:	08004829 	.word	0x08004829
 80047dc:	08004829 	.word	0x08004829
 80047e0:	08004829 	.word	0x08004829
 80047e4:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fe f998 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80047ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ee:	e021      	b.n	8004834 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <UART_SetConfig+0x2f8>)
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047f4:	e01e      	b.n	8004834 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fe f923 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80047fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047fc:	e01a      	b.n	8004834 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004804:	e016      	b.n	8004834 <UART_SetConfig+0x308>
 8004806:	bf00      	nop
 8004808:	cfff69f3 	.word	0xcfff69f3
 800480c:	40008000 	.word	0x40008000
 8004810:	40013800 	.word	0x40013800
 8004814:	40021000 	.word	0x40021000
 8004818:	40004400 	.word	0x40004400
 800481c:	40004800 	.word	0x40004800
 8004820:	40004c00 	.word	0x40004c00
 8004824:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004832:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 812a 	beq.w	8004a90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	4a9e      	ldr	r2, [pc, #632]	@ (8004abc <UART_SetConfig+0x590>)
 8004842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004846:	461a      	mov	r2, r3
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	fbb3 f3f2 	udiv	r3, r3, r2
 800484e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	429a      	cmp	r2, r3
 800485e:	d305      	bcc.n	800486c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	429a      	cmp	r2, r3
 800486a:	d903      	bls.n	8004874 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004872:	e10d      	b.n	8004a90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	2200      	movs	r2, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	60fa      	str	r2, [r7, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	4a8e      	ldr	r2, [pc, #568]	@ (8004abc <UART_SetConfig+0x590>)
 8004882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004886:	b29b      	uxth	r3, r3
 8004888:	2200      	movs	r2, #0
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004896:	f7fc fa1f 	bl	8000cd8 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	020b      	lsls	r3, r1, #8
 80048ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048b0:	0202      	lsls	r2, r0, #8
 80048b2:	6979      	ldr	r1, [r7, #20]
 80048b4:	6849      	ldr	r1, [r1, #4]
 80048b6:	0849      	lsrs	r1, r1, #1
 80048b8:	2000      	movs	r0, #0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4605      	mov	r5, r0
 80048be:	eb12 0804 	adds.w	r8, r2, r4
 80048c2:	eb43 0905 	adc.w	r9, r3, r5
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	469a      	mov	sl, r3
 80048ce:	4693      	mov	fp, r2
 80048d0:	4652      	mov	r2, sl
 80048d2:	465b      	mov	r3, fp
 80048d4:	4640      	mov	r0, r8
 80048d6:	4649      	mov	r1, r9
 80048d8:	f7fc f9fe 	bl	8000cd8 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ea:	d308      	bcc.n	80048fe <UART_SetConfig+0x3d2>
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f2:	d204      	bcs.n	80048fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a3a      	ldr	r2, [r7, #32]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e0c8      	b.n	8004a90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004904:	e0c4      	b.n	8004a90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800490e:	d167      	bne.n	80049e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004910:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004914:	2b08      	cmp	r3, #8
 8004916:	d828      	bhi.n	800496a <UART_SetConfig+0x43e>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <UART_SetConfig+0x3f4>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe f8ea 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800494a:	e014      	b.n	8004976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe f8fc 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8004950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac0 <UART_SetConfig+0x594>)
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fe f871 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 800495e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004968:	e005      	b.n	8004976 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8089 	beq.w	8004a90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	4a4e      	ldr	r2, [pc, #312]	@ (8004abc <UART_SetConfig+0x590>)
 8004984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004988:	461a      	mov	r2, r3
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004990:	005a      	lsls	r2, r3, #1
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	441a      	add	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	d916      	bls.n	80049d8 <UART_SetConfig+0x4ac>
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b0:	d212      	bcs.n	80049d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f023 030f 	bic.w	r3, r3, #15
 80049ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	8bfb      	ldrh	r3, [r7, #30]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	8bfa      	ldrh	r2, [r7, #30]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e05b      	b.n	8004a90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049de:	e057      	b.n	8004a90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d828      	bhi.n	8004a3a <UART_SetConfig+0x50e>
 80049e8:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <UART_SetConfig+0x4c4>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004a3b 	.word	0x08004a3b
 8004a00:	08004a2b 	.word	0x08004a2b
 8004a04:	08004a3b 	.word	0x08004a3b
 8004a08:	08004a3b 	.word	0x08004a3b
 8004a0c:	08004a3b 	.word	0x08004a3b
 8004a10:	08004a33 	.word	0x08004a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fe f882 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a1a:	e014      	b.n	8004a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7fe f894 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a22:	e010      	b.n	8004a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a24:	4b26      	ldr	r3, [pc, #152]	@ (8004ac0 <UART_SetConfig+0x594>)
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a28:	e00d      	b.n	8004a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fe f809 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8004a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a30:	e009      	b.n	8004a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a38:	e005      	b.n	8004a46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a44:	bf00      	nop
    }

    if (pclk != 0U)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d021      	beq.n	8004a90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	4a1a      	ldr	r2, [pc, #104]	@ (8004abc <UART_SetConfig+0x590>)
 8004a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a56:	461a      	mov	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	441a      	add	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2b0f      	cmp	r3, #15
 8004a74:	d909      	bls.n	8004a8a <UART_SetConfig+0x55e>
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a7c:	d205      	bcs.n	8004a8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	e002      	b.n	8004a90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004aac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3730      	adds	r7, #48	@ 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aba:	bf00      	nop
 8004abc:	0800e418 	.word	0x0800e418
 8004ac0:	00f42400 	.word	0x00f42400

08004ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01a      	beq.n	8004bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc2:	d10a      	bne.n	8004bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b098      	sub	sp, #96	@ 0x60
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c18:	f7fc ff4a 	bl	8001ab0 <HAL_GetTick>
 8004c1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d12f      	bne.n	8004c8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f88e 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d022      	beq.n	8004c8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e063      	b.n	8004d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d149      	bne.n	8004d2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f857 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d03c      	beq.n	8004d2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e6      	bne.n	8004cb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3308      	adds	r3, #8
 8004cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3308      	adds	r3, #8
 8004d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d06:	61fa      	str	r2, [r7, #28]
 8004d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	69b9      	ldr	r1, [r7, #24]
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	617b      	str	r3, [r7, #20]
   return(result);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e5      	bne.n	8004ce6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e012      	b.n	8004d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3758      	adds	r7, #88	@ 0x58
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6c:	e04f      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d04b      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fc fe9b 	bl	8001ab0 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e04e      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d037      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b80      	cmp	r3, #128	@ 0x80
 8004da2:	d034      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b40      	cmp	r3, #64	@ 0x40
 8004da8:	d031      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d110      	bne.n	8004dda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f838 	bl	8004e36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e029      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de8:	d111      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f81e 	bl	8004e36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e00f      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4013      	ands	r3, r2
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d0a0      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b095      	sub	sp, #84	@ 0x54
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e6      	bne.n	8004e3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e3      	bne.n	8004e70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d118      	bne.n	8004ee2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f023 0310 	bic.w	r3, r3, #16
 8004ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6979      	ldr	r1, [r7, #20]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	613b      	str	r3, [r7, #16]
   return(result);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e6      	bne.n	8004eb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ef6:	bf00      	nop
 8004ef8:	3754      	adds	r7, #84	@ 0x54
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e027      	b.n	8004f68 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2224      	movs	r2, #36	@ 0x24
 8004f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004f46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e02d      	b.n	8004fe8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	@ 0x24
 8004f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f84f 	bl	800506c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e02d      	b.n	8005064 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	@ 0x24
 8005014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f811 	bl	800506c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005078:	2b00      	cmp	r3, #0
 800507a:	d108      	bne.n	800508e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800508c:	e031      	b.n	80050f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800508e:	2308      	movs	r3, #8
 8005090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005092:	2308      	movs	r3, #8
 8005094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	0e5b      	lsrs	r3, r3, #25
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	0f5b      	lsrs	r3, r3, #29
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050b6:	7bbb      	ldrb	r3, [r7, #14]
 80050b8:	7b3a      	ldrb	r2, [r7, #12]
 80050ba:	4911      	ldr	r1, [pc, #68]	@ (8005100 <UARTEx_SetNbDataToProcess+0x94>)
 80050bc:	5c8a      	ldrb	r2, [r1, r2]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050c2:	7b3a      	ldrb	r2, [r7, #12]
 80050c4:	490f      	ldr	r1, [pc, #60]	@ (8005104 <UARTEx_SetNbDataToProcess+0x98>)
 80050c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	7b7a      	ldrb	r2, [r7, #13]
 80050d8:	4909      	ldr	r1, [pc, #36]	@ (8005100 <UARTEx_SetNbDataToProcess+0x94>)
 80050da:	5c8a      	ldrb	r2, [r1, r2]
 80050dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050e0:	7b7a      	ldrb	r2, [r7, #13]
 80050e2:	4908      	ldr	r1, [pc, #32]	@ (8005104 <UARTEx_SetNbDataToProcess+0x98>)
 80050e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	0800e430 	.word	0x0800e430
 8005104:	0800e438 	.word	0x0800e438

08005108 <malloc>:
 8005108:	4b02      	ldr	r3, [pc, #8]	@ (8005114 <malloc+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f000 b80b 	b.w	8005128 <_malloc_r>
 8005112:	bf00      	nop
 8005114:	20000428 	.word	0x20000428

08005118 <free>:
 8005118:	4b02      	ldr	r3, [pc, #8]	@ (8005124 <free+0xc>)
 800511a:	4601      	mov	r1, r0
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f000 bd79 	b.w	8005c14 <_free_r>
 8005122:	bf00      	nop
 8005124:	20000428 	.word	0x20000428

08005128 <_malloc_r>:
 8005128:	f101 030b 	add.w	r3, r1, #11
 800512c:	2b16      	cmp	r3, #22
 800512e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005132:	4605      	mov	r5, r0
 8005134:	d906      	bls.n	8005144 <_malloc_r+0x1c>
 8005136:	f033 0707 	bics.w	r7, r3, #7
 800513a:	d504      	bpl.n	8005146 <_malloc_r+0x1e>
 800513c:	230c      	movs	r3, #12
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	2400      	movs	r4, #0
 8005142:	e1a3      	b.n	800548c <_malloc_r+0x364>
 8005144:	2710      	movs	r7, #16
 8005146:	42b9      	cmp	r1, r7
 8005148:	d8f8      	bhi.n	800513c <_malloc_r+0x14>
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fa26 	bl	800559c <__malloc_lock>
 8005150:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8005154:	4eaf      	ldr	r6, [pc, #700]	@ (8005414 <_malloc_r+0x2ec>)
 8005156:	d237      	bcs.n	80051c8 <_malloc_r+0xa0>
 8005158:	f107 0208 	add.w	r2, r7, #8
 800515c:	4432      	add	r2, r6
 800515e:	f1a2 0108 	sub.w	r1, r2, #8
 8005162:	6854      	ldr	r4, [r2, #4]
 8005164:	428c      	cmp	r4, r1
 8005166:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800516a:	d102      	bne.n	8005172 <_malloc_r+0x4a>
 800516c:	68d4      	ldr	r4, [r2, #12]
 800516e:	42a2      	cmp	r2, r4
 8005170:	d010      	beq.n	8005194 <_malloc_r+0x6c>
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005178:	f023 0303 	bic.w	r3, r3, #3
 800517c:	60ca      	str	r2, [r1, #12]
 800517e:	4423      	add	r3, r4
 8005180:	6091      	str	r1, [r2, #8]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fa0c 	bl	80055a8 <__malloc_unlock>
 8005190:	3408      	adds	r4, #8
 8005192:	e17b      	b.n	800548c <_malloc_r+0x364>
 8005194:	3302      	adds	r3, #2
 8005196:	6934      	ldr	r4, [r6, #16]
 8005198:	499f      	ldr	r1, [pc, #636]	@ (8005418 <_malloc_r+0x2f0>)
 800519a:	428c      	cmp	r4, r1
 800519c:	d077      	beq.n	800528e <_malloc_r+0x166>
 800519e:	6862      	ldr	r2, [r4, #4]
 80051a0:	f022 0c03 	bic.w	ip, r2, #3
 80051a4:	ebac 0007 	sub.w	r0, ip, r7
 80051a8:	280f      	cmp	r0, #15
 80051aa:	dd48      	ble.n	800523e <_malloc_r+0x116>
 80051ac:	19e2      	adds	r2, r4, r7
 80051ae:	f040 0301 	orr.w	r3, r0, #1
 80051b2:	f047 0701 	orr.w	r7, r7, #1
 80051b6:	6067      	str	r7, [r4, #4]
 80051b8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80051bc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80051c0:	6053      	str	r3, [r2, #4]
 80051c2:	f844 000c 	str.w	r0, [r4, ip]
 80051c6:	e7e0      	b.n	800518a <_malloc_r+0x62>
 80051c8:	0a7b      	lsrs	r3, r7, #9
 80051ca:	d02a      	beq.n	8005222 <_malloc_r+0xfa>
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d812      	bhi.n	80051f6 <_malloc_r+0xce>
 80051d0:	09bb      	lsrs	r3, r7, #6
 80051d2:	3338      	adds	r3, #56	@ 0x38
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80051da:	f1a2 0c08 	sub.w	ip, r2, #8
 80051de:	6854      	ldr	r4, [r2, #4]
 80051e0:	4564      	cmp	r4, ip
 80051e2:	d006      	beq.n	80051f2 <_malloc_r+0xca>
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	f022 0203 	bic.w	r2, r2, #3
 80051ea:	1bd0      	subs	r0, r2, r7
 80051ec:	280f      	cmp	r0, #15
 80051ee:	dd1c      	ble.n	800522a <_malloc_r+0x102>
 80051f0:	3b01      	subs	r3, #1
 80051f2:	3301      	adds	r3, #1
 80051f4:	e7cf      	b.n	8005196 <_malloc_r+0x6e>
 80051f6:	2b14      	cmp	r3, #20
 80051f8:	d801      	bhi.n	80051fe <_malloc_r+0xd6>
 80051fa:	335b      	adds	r3, #91	@ 0x5b
 80051fc:	e7ea      	b.n	80051d4 <_malloc_r+0xac>
 80051fe:	2b54      	cmp	r3, #84	@ 0x54
 8005200:	d802      	bhi.n	8005208 <_malloc_r+0xe0>
 8005202:	0b3b      	lsrs	r3, r7, #12
 8005204:	336e      	adds	r3, #110	@ 0x6e
 8005206:	e7e5      	b.n	80051d4 <_malloc_r+0xac>
 8005208:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800520c:	d802      	bhi.n	8005214 <_malloc_r+0xec>
 800520e:	0bfb      	lsrs	r3, r7, #15
 8005210:	3377      	adds	r3, #119	@ 0x77
 8005212:	e7df      	b.n	80051d4 <_malloc_r+0xac>
 8005214:	f240 5254 	movw	r2, #1364	@ 0x554
 8005218:	4293      	cmp	r3, r2
 800521a:	d804      	bhi.n	8005226 <_malloc_r+0xfe>
 800521c:	0cbb      	lsrs	r3, r7, #18
 800521e:	337c      	adds	r3, #124	@ 0x7c
 8005220:	e7d8      	b.n	80051d4 <_malloc_r+0xac>
 8005222:	233f      	movs	r3, #63	@ 0x3f
 8005224:	e7d6      	b.n	80051d4 <_malloc_r+0xac>
 8005226:	237e      	movs	r3, #126	@ 0x7e
 8005228:	e7d4      	b.n	80051d4 <_malloc_r+0xac>
 800522a:	2800      	cmp	r0, #0
 800522c:	68e1      	ldr	r1, [r4, #12]
 800522e:	db04      	blt.n	800523a <_malloc_r+0x112>
 8005230:	68a3      	ldr	r3, [r4, #8]
 8005232:	60d9      	str	r1, [r3, #12]
 8005234:	608b      	str	r3, [r1, #8]
 8005236:	18a3      	adds	r3, r4, r2
 8005238:	e7a3      	b.n	8005182 <_malloc_r+0x5a>
 800523a:	460c      	mov	r4, r1
 800523c:	e7d0      	b.n	80051e0 <_malloc_r+0xb8>
 800523e:	2800      	cmp	r0, #0
 8005240:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8005244:	db07      	blt.n	8005256 <_malloc_r+0x12e>
 8005246:	44a4      	add	ip, r4
 8005248:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	f8cc 3004 	str.w	r3, [ip, #4]
 8005254:	e799      	b.n	800518a <_malloc_r+0x62>
 8005256:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800525a:	6870      	ldr	r0, [r6, #4]
 800525c:	f080 8095 	bcs.w	800538a <_malloc_r+0x262>
 8005260:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8005264:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8005268:	f04f 0c01 	mov.w	ip, #1
 800526c:	3201      	adds	r2, #1
 800526e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005272:	ea4c 0000 	orr.w	r0, ip, r0
 8005276:	6070      	str	r0, [r6, #4]
 8005278:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800527c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8005280:	3808      	subs	r0, #8
 8005282:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8005286:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800528a:	f8cc 400c 	str.w	r4, [ip, #12]
 800528e:	1098      	asrs	r0, r3, #2
 8005290:	2201      	movs	r2, #1
 8005292:	4082      	lsls	r2, r0
 8005294:	6870      	ldr	r0, [r6, #4]
 8005296:	4290      	cmp	r0, r2
 8005298:	d326      	bcc.n	80052e8 <_malloc_r+0x1c0>
 800529a:	4210      	tst	r0, r2
 800529c:	d106      	bne.n	80052ac <_malloc_r+0x184>
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	0052      	lsls	r2, r2, #1
 80052a4:	4210      	tst	r0, r2
 80052a6:	f103 0304 	add.w	r3, r3, #4
 80052aa:	d0fa      	beq.n	80052a2 <_malloc_r+0x17a>
 80052ac:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80052b0:	46c1      	mov	r9, r8
 80052b2:	469e      	mov	lr, r3
 80052b4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80052b8:	454c      	cmp	r4, r9
 80052ba:	f040 80b9 	bne.w	8005430 <_malloc_r+0x308>
 80052be:	f10e 0e01 	add.w	lr, lr, #1
 80052c2:	f01e 0f03 	tst.w	lr, #3
 80052c6:	f109 0908 	add.w	r9, r9, #8
 80052ca:	d1f3      	bne.n	80052b4 <_malloc_r+0x18c>
 80052cc:	0798      	lsls	r0, r3, #30
 80052ce:	f040 80e3 	bne.w	8005498 <_malloc_r+0x370>
 80052d2:	6873      	ldr	r3, [r6, #4]
 80052d4:	ea23 0302 	bic.w	r3, r3, r2
 80052d8:	6073      	str	r3, [r6, #4]
 80052da:	6870      	ldr	r0, [r6, #4]
 80052dc:	0052      	lsls	r2, r2, #1
 80052de:	4290      	cmp	r0, r2
 80052e0:	d302      	bcc.n	80052e8 <_malloc_r+0x1c0>
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	f040 80e5 	bne.w	80054b2 <_malloc_r+0x38a>
 80052e8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80052ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80052f0:	f023 0903 	bic.w	r9, r3, #3
 80052f4:	45b9      	cmp	r9, r7
 80052f6:	d304      	bcc.n	8005302 <_malloc_r+0x1da>
 80052f8:	eba9 0207 	sub.w	r2, r9, r7
 80052fc:	2a0f      	cmp	r2, #15
 80052fe:	f300 8141 	bgt.w	8005584 <_malloc_r+0x45c>
 8005302:	4b46      	ldr	r3, [pc, #280]	@ (800541c <_malloc_r+0x2f4>)
 8005304:	6819      	ldr	r1, [r3, #0]
 8005306:	3110      	adds	r1, #16
 8005308:	4439      	add	r1, r7
 800530a:	2008      	movs	r0, #8
 800530c:	9101      	str	r1, [sp, #4]
 800530e:	f000 fc0f 	bl	8005b30 <sysconf>
 8005312:	4a43      	ldr	r2, [pc, #268]	@ (8005420 <_malloc_r+0x2f8>)
 8005314:	9901      	ldr	r1, [sp, #4]
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	bf1f      	itttt	ne
 800531c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8005320:	1809      	addne	r1, r1, r0
 8005322:	4243      	negne	r3, r0
 8005324:	4019      	andne	r1, r3
 8005326:	4680      	mov	r8, r0
 8005328:	4628      	mov	r0, r5
 800532a:	9101      	str	r1, [sp, #4]
 800532c:	f000 fbb0 	bl	8005a90 <_sbrk_r>
 8005330:	1c42      	adds	r2, r0, #1
 8005332:	eb0a 0b09 	add.w	fp, sl, r9
 8005336:	4604      	mov	r4, r0
 8005338:	f000 80f7 	beq.w	800552a <_malloc_r+0x402>
 800533c:	4583      	cmp	fp, r0
 800533e:	9901      	ldr	r1, [sp, #4]
 8005340:	4a37      	ldr	r2, [pc, #220]	@ (8005420 <_malloc_r+0x2f8>)
 8005342:	d902      	bls.n	800534a <_malloc_r+0x222>
 8005344:	45b2      	cmp	sl, r6
 8005346:	f040 80f0 	bne.w	800552a <_malloc_r+0x402>
 800534a:	4b36      	ldr	r3, [pc, #216]	@ (8005424 <_malloc_r+0x2fc>)
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	45a3      	cmp	fp, r4
 8005350:	eb00 0e01 	add.w	lr, r0, r1
 8005354:	f8c3 e000 	str.w	lr, [r3]
 8005358:	f108 3cff 	add.w	ip, r8, #4294967295
 800535c:	f040 80ab 	bne.w	80054b6 <_malloc_r+0x38e>
 8005360:	ea1b 0f0c 	tst.w	fp, ip
 8005364:	f040 80a7 	bne.w	80054b6 <_malloc_r+0x38e>
 8005368:	68b2      	ldr	r2, [r6, #8]
 800536a:	4449      	add	r1, r9
 800536c:	f041 0101 	orr.w	r1, r1, #1
 8005370:	6051      	str	r1, [r2, #4]
 8005372:	4a2d      	ldr	r2, [pc, #180]	@ (8005428 <_malloc_r+0x300>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6811      	ldr	r1, [r2, #0]
 8005378:	428b      	cmp	r3, r1
 800537a:	bf88      	it	hi
 800537c:	6013      	strhi	r3, [r2, #0]
 800537e:	4a2b      	ldr	r2, [pc, #172]	@ (800542c <_malloc_r+0x304>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	428b      	cmp	r3, r1
 8005384:	bf88      	it	hi
 8005386:	6013      	strhi	r3, [r2, #0]
 8005388:	e0cf      	b.n	800552a <_malloc_r+0x402>
 800538a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800538e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8005392:	d218      	bcs.n	80053c6 <_malloc_r+0x29e>
 8005394:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8005398:	3238      	adds	r2, #56	@ 0x38
 800539a:	f102 0e01 	add.w	lr, r2, #1
 800539e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80053a2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80053a6:	45f0      	cmp	r8, lr
 80053a8:	d12b      	bne.n	8005402 <_malloc_r+0x2da>
 80053aa:	1092      	asrs	r2, r2, #2
 80053ac:	f04f 0c01 	mov.w	ip, #1
 80053b0:	fa0c f202 	lsl.w	r2, ip, r2
 80053b4:	4302      	orrs	r2, r0
 80053b6:	6072      	str	r2, [r6, #4]
 80053b8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80053bc:	f8c8 4008 	str.w	r4, [r8, #8]
 80053c0:	f8ce 400c 	str.w	r4, [lr, #12]
 80053c4:	e763      	b.n	800528e <_malloc_r+0x166>
 80053c6:	2a14      	cmp	r2, #20
 80053c8:	d801      	bhi.n	80053ce <_malloc_r+0x2a6>
 80053ca:	325b      	adds	r2, #91	@ 0x5b
 80053cc:	e7e5      	b.n	800539a <_malloc_r+0x272>
 80053ce:	2a54      	cmp	r2, #84	@ 0x54
 80053d0:	d803      	bhi.n	80053da <_malloc_r+0x2b2>
 80053d2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80053d6:	326e      	adds	r2, #110	@ 0x6e
 80053d8:	e7df      	b.n	800539a <_malloc_r+0x272>
 80053da:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80053de:	d803      	bhi.n	80053e8 <_malloc_r+0x2c0>
 80053e0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80053e4:	3277      	adds	r2, #119	@ 0x77
 80053e6:	e7d8      	b.n	800539a <_malloc_r+0x272>
 80053e8:	f240 5e54 	movw	lr, #1364	@ 0x554
 80053ec:	4572      	cmp	r2, lr
 80053ee:	bf9a      	itte	ls
 80053f0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80053f4:	327c      	addls	r2, #124	@ 0x7c
 80053f6:	227e      	movhi	r2, #126	@ 0x7e
 80053f8:	e7cf      	b.n	800539a <_malloc_r+0x272>
 80053fa:	f8de e008 	ldr.w	lr, [lr, #8]
 80053fe:	45f0      	cmp	r8, lr
 8005400:	d005      	beq.n	800540e <_malloc_r+0x2e6>
 8005402:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005406:	f022 0203 	bic.w	r2, r2, #3
 800540a:	4562      	cmp	r2, ip
 800540c:	d8f5      	bhi.n	80053fa <_malloc_r+0x2d2>
 800540e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8005412:	e7d1      	b.n	80053b8 <_malloc_r+0x290>
 8005414:	20000014 	.word	0x20000014
 8005418:	2000001c 	.word	0x2000001c
 800541c:	20000840 	.word	0x20000840
 8005420:	2000000c 	.word	0x2000000c
 8005424:	20000810 	.word	0x20000810
 8005428:	2000083c 	.word	0x2000083c
 800542c:	20000838 	.word	0x20000838
 8005430:	6860      	ldr	r0, [r4, #4]
 8005432:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8005436:	f020 0003 	bic.w	r0, r0, #3
 800543a:	eba0 0a07 	sub.w	sl, r0, r7
 800543e:	f1ba 0f0f 	cmp.w	sl, #15
 8005442:	dd12      	ble.n	800546a <_malloc_r+0x342>
 8005444:	68a3      	ldr	r3, [r4, #8]
 8005446:	19e2      	adds	r2, r4, r7
 8005448:	f047 0701 	orr.w	r7, r7, #1
 800544c:	6067      	str	r7, [r4, #4]
 800544e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005452:	f8cc 3008 	str.w	r3, [ip, #8]
 8005456:	f04a 0301 	orr.w	r3, sl, #1
 800545a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800545e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8005462:	6053      	str	r3, [r2, #4]
 8005464:	f844 a000 	str.w	sl, [r4, r0]
 8005468:	e68f      	b.n	800518a <_malloc_r+0x62>
 800546a:	f1ba 0f00 	cmp.w	sl, #0
 800546e:	db11      	blt.n	8005494 <_malloc_r+0x36c>
 8005470:	4420      	add	r0, r4
 8005472:	6843      	ldr	r3, [r0, #4]
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6043      	str	r3, [r0, #4]
 800547a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800547e:	4628      	mov	r0, r5
 8005480:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005484:	f8cc 3008 	str.w	r3, [ip, #8]
 8005488:	f000 f88e 	bl	80055a8 <__malloc_unlock>
 800548c:	4620      	mov	r0, r4
 800548e:	b003      	add	sp, #12
 8005490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005494:	4664      	mov	r4, ip
 8005496:	e70f      	b.n	80052b8 <_malloc_r+0x190>
 8005498:	f858 0908 	ldr.w	r0, [r8], #-8
 800549c:	4540      	cmp	r0, r8
 800549e:	f103 33ff 	add.w	r3, r3, #4294967295
 80054a2:	f43f af13 	beq.w	80052cc <_malloc_r+0x1a4>
 80054a6:	e718      	b.n	80052da <_malloc_r+0x1b2>
 80054a8:	3304      	adds	r3, #4
 80054aa:	0052      	lsls	r2, r2, #1
 80054ac:	4210      	tst	r0, r2
 80054ae:	d0fb      	beq.n	80054a8 <_malloc_r+0x380>
 80054b0:	e6fc      	b.n	80052ac <_malloc_r+0x184>
 80054b2:	4673      	mov	r3, lr
 80054b4:	e7fa      	b.n	80054ac <_malloc_r+0x384>
 80054b6:	6810      	ldr	r0, [r2, #0]
 80054b8:	3001      	adds	r0, #1
 80054ba:	bf1b      	ittet	ne
 80054bc:	eba4 0b0b 	subne.w	fp, r4, fp
 80054c0:	eb0b 020e 	addne.w	r2, fp, lr
 80054c4:	6014      	streq	r4, [r2, #0]
 80054c6:	601a      	strne	r2, [r3, #0]
 80054c8:	f014 0b07 	ands.w	fp, r4, #7
 80054cc:	bf1a      	itte	ne
 80054ce:	f1cb 0008 	rsbne	r0, fp, #8
 80054d2:	1824      	addne	r4, r4, r0
 80054d4:	4658      	moveq	r0, fp
 80054d6:	1862      	adds	r2, r4, r1
 80054d8:	ea02 010c 	and.w	r1, r2, ip
 80054dc:	4480      	add	r8, r0
 80054de:	eba8 0801 	sub.w	r8, r8, r1
 80054e2:	ea08 080c 	and.w	r8, r8, ip
 80054e6:	4641      	mov	r1, r8
 80054e8:	4628      	mov	r0, r5
 80054ea:	9201      	str	r2, [sp, #4]
 80054ec:	f000 fad0 	bl	8005a90 <_sbrk_r>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	9a01      	ldr	r2, [sp, #4]
 80054f4:	4b28      	ldr	r3, [pc, #160]	@ (8005598 <_malloc_r+0x470>)
 80054f6:	d107      	bne.n	8005508 <_malloc_r+0x3e0>
 80054f8:	f1bb 0f00 	cmp.w	fp, #0
 80054fc:	d023      	beq.n	8005546 <_malloc_r+0x41e>
 80054fe:	f1ab 0008 	sub.w	r0, fp, #8
 8005502:	4410      	add	r0, r2
 8005504:	f04f 0800 	mov.w	r8, #0
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	60b4      	str	r4, [r6, #8]
 800550c:	1b00      	subs	r0, r0, r4
 800550e:	4440      	add	r0, r8
 8005510:	4442      	add	r2, r8
 8005512:	f040 0001 	orr.w	r0, r0, #1
 8005516:	45b2      	cmp	sl, r6
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	6060      	str	r0, [r4, #4]
 800551c:	f43f af29 	beq.w	8005372 <_malloc_r+0x24a>
 8005520:	f1b9 0f0f 	cmp.w	r9, #15
 8005524:	d812      	bhi.n	800554c <_malloc_r+0x424>
 8005526:	2301      	movs	r3, #1
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	68b3      	ldr	r3, [r6, #8]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	42bb      	cmp	r3, r7
 8005534:	eba3 0207 	sub.w	r2, r3, r7
 8005538:	d301      	bcc.n	800553e <_malloc_r+0x416>
 800553a:	2a0f      	cmp	r2, #15
 800553c:	dc22      	bgt.n	8005584 <_malloc_r+0x45c>
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f832 	bl	80055a8 <__malloc_unlock>
 8005544:	e5fc      	b.n	8005140 <_malloc_r+0x18>
 8005546:	4610      	mov	r0, r2
 8005548:	46d8      	mov	r8, fp
 800554a:	e7dd      	b.n	8005508 <_malloc_r+0x3e0>
 800554c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005550:	f1a9 090c 	sub.w	r9, r9, #12
 8005554:	f029 0907 	bic.w	r9, r9, #7
 8005558:	f002 0201 	and.w	r2, r2, #1
 800555c:	ea42 0209 	orr.w	r2, r2, r9
 8005560:	f8ca 2004 	str.w	r2, [sl, #4]
 8005564:	2105      	movs	r1, #5
 8005566:	eb0a 0209 	add.w	r2, sl, r9
 800556a:	f1b9 0f0f 	cmp.w	r9, #15
 800556e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8005572:	f67f aefe 	bls.w	8005372 <_malloc_r+0x24a>
 8005576:	f10a 0108 	add.w	r1, sl, #8
 800557a:	4628      	mov	r0, r5
 800557c:	f000 fb4a 	bl	8005c14 <_free_r>
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <_malloc_r+0x470>)
 8005582:	e6f6      	b.n	8005372 <_malloc_r+0x24a>
 8005584:	68b4      	ldr	r4, [r6, #8]
 8005586:	f047 0301 	orr.w	r3, r7, #1
 800558a:	4427      	add	r7, r4
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	60b7      	str	r7, [r6, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	e5f8      	b.n	800518a <_malloc_r+0x62>
 8005598:	20000810 	.word	0x20000810

0800559c <__malloc_lock>:
 800559c:	4801      	ldr	r0, [pc, #4]	@ (80055a4 <__malloc_lock+0x8>)
 800559e:	f000 bac5 	b.w	8005b2c <__retarget_lock_acquire_recursive>
 80055a2:	bf00      	nop
 80055a4:	20000984 	.word	0x20000984

080055a8 <__malloc_unlock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	@ (80055b0 <__malloc_unlock+0x8>)
 80055aa:	f000 bac0 	b.w	8005b2e <__retarget_lock_release_recursive>
 80055ae:	bf00      	nop
 80055b0:	20000984 	.word	0x20000984

080055b4 <std>:
 80055b4:	2300      	movs	r3, #0
 80055b6:	b510      	push	{r4, lr}
 80055b8:	4604      	mov	r4, r0
 80055ba:	e9c0 3300 	strd	r3, r3, [r0]
 80055be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055c2:	6083      	str	r3, [r0, #8]
 80055c4:	8181      	strh	r1, [r0, #12]
 80055c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80055c8:	81c2      	strh	r2, [r0, #14]
 80055ca:	6183      	str	r3, [r0, #24]
 80055cc:	4619      	mov	r1, r3
 80055ce:	2208      	movs	r2, #8
 80055d0:	305c      	adds	r0, #92	@ 0x5c
 80055d2:	f000 fa20 	bl	8005a16 <memset>
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <std+0x58>)
 80055d8:	6223      	str	r3, [r4, #32]
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <std+0x5c>)
 80055dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <std+0x60>)
 80055e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <std+0x64>)
 80055e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <std+0x68>)
 80055e8:	61e4      	str	r4, [r4, #28]
 80055ea:	429c      	cmp	r4, r3
 80055ec:	d006      	beq.n	80055fc <std+0x48>
 80055ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055f2:	4294      	cmp	r4, r2
 80055f4:	d002      	beq.n	80055fc <std+0x48>
 80055f6:	33d0      	adds	r3, #208	@ 0xd0
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d105      	bne.n	8005608 <std+0x54>
 80055fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005604:	f000 ba90 	b.w	8005b28 <__retarget_lock_init_recursive>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	bf00      	nop
 800560c:	08005991 	.word	0x08005991
 8005610:	080059b3 	.word	0x080059b3
 8005614:	080059eb 	.word	0x080059eb
 8005618:	08005a0f 	.word	0x08005a0f
 800561c:	20000844 	.word	0x20000844

08005620 <stdio_exit_handler>:
 8005620:	4a02      	ldr	r2, [pc, #8]	@ (800562c <stdio_exit_handler+0xc>)
 8005622:	4903      	ldr	r1, [pc, #12]	@ (8005630 <stdio_exit_handler+0x10>)
 8005624:	4803      	ldr	r0, [pc, #12]	@ (8005634 <stdio_exit_handler+0x14>)
 8005626:	f000 b869 	b.w	80056fc <_fwalk_sglue>
 800562a:	bf00      	nop
 800562c:	2000041c 	.word	0x2000041c
 8005630:	08008f93 	.word	0x08008f93
 8005634:	20000430 	.word	0x20000430

08005638 <cleanup_stdio>:
 8005638:	6841      	ldr	r1, [r0, #4]
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <cleanup_stdio+0x34>)
 800563c:	4299      	cmp	r1, r3
 800563e:	b510      	push	{r4, lr}
 8005640:	4604      	mov	r4, r0
 8005642:	d001      	beq.n	8005648 <cleanup_stdio+0x10>
 8005644:	f003 fca5 	bl	8008f92 <_fclose_r>
 8005648:	68a1      	ldr	r1, [r4, #8]
 800564a:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <cleanup_stdio+0x38>)
 800564c:	4299      	cmp	r1, r3
 800564e:	d002      	beq.n	8005656 <cleanup_stdio+0x1e>
 8005650:	4620      	mov	r0, r4
 8005652:	f003 fc9e 	bl	8008f92 <_fclose_r>
 8005656:	68e1      	ldr	r1, [r4, #12]
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <cleanup_stdio+0x3c>)
 800565a:	4299      	cmp	r1, r3
 800565c:	d004      	beq.n	8005668 <cleanup_stdio+0x30>
 800565e:	4620      	mov	r0, r4
 8005660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005664:	f003 bc95 	b.w	8008f92 <_fclose_r>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	bf00      	nop
 800566c:	20000844 	.word	0x20000844
 8005670:	200008ac 	.word	0x200008ac
 8005674:	20000914 	.word	0x20000914

08005678 <global_stdio_init.part.0>:
 8005678:	b510      	push	{r4, lr}
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <global_stdio_init.part.0+0x30>)
 800567c:	4c0b      	ldr	r4, [pc, #44]	@ (80056ac <global_stdio_init.part.0+0x34>)
 800567e:	4a0c      	ldr	r2, [pc, #48]	@ (80056b0 <global_stdio_init.part.0+0x38>)
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	4620      	mov	r0, r4
 8005684:	2200      	movs	r2, #0
 8005686:	2104      	movs	r1, #4
 8005688:	f7ff ff94 	bl	80055b4 <std>
 800568c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005690:	2201      	movs	r2, #1
 8005692:	2109      	movs	r1, #9
 8005694:	f7ff ff8e 	bl	80055b4 <std>
 8005698:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800569c:	2202      	movs	r2, #2
 800569e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a2:	2112      	movs	r1, #18
 80056a4:	f7ff bf86 	b.w	80055b4 <std>
 80056a8:	2000097c 	.word	0x2000097c
 80056ac:	20000844 	.word	0x20000844
 80056b0:	08005621 	.word	0x08005621

080056b4 <__sfp_lock_acquire>:
 80056b4:	4801      	ldr	r0, [pc, #4]	@ (80056bc <__sfp_lock_acquire+0x8>)
 80056b6:	f000 ba39 	b.w	8005b2c <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	20000986 	.word	0x20000986

080056c0 <__sfp_lock_release>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__sfp_lock_release+0x8>)
 80056c2:	f000 ba34 	b.w	8005b2e <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	20000986 	.word	0x20000986

080056cc <__sinit>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	4604      	mov	r4, r0
 80056d0:	f7ff fff0 	bl	80056b4 <__sfp_lock_acquire>
 80056d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056d6:	b11b      	cbz	r3, 80056e0 <__sinit+0x14>
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	f7ff bff0 	b.w	80056c0 <__sfp_lock_release>
 80056e0:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <__sinit+0x28>)
 80056e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80056e4:	4b04      	ldr	r3, [pc, #16]	@ (80056f8 <__sinit+0x2c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f5      	bne.n	80056d8 <__sinit+0xc>
 80056ec:	f7ff ffc4 	bl	8005678 <global_stdio_init.part.0>
 80056f0:	e7f2      	b.n	80056d8 <__sinit+0xc>
 80056f2:	bf00      	nop
 80056f4:	08005639 	.word	0x08005639
 80056f8:	2000097c 	.word	0x2000097c

080056fc <_fwalk_sglue>:
 80056fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005700:	4607      	mov	r7, r0
 8005702:	4688      	mov	r8, r1
 8005704:	4614      	mov	r4, r2
 8005706:	2600      	movs	r6, #0
 8005708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800570c:	f1b9 0901 	subs.w	r9, r9, #1
 8005710:	d505      	bpl.n	800571e <_fwalk_sglue+0x22>
 8005712:	6824      	ldr	r4, [r4, #0]
 8005714:	2c00      	cmp	r4, #0
 8005716:	d1f7      	bne.n	8005708 <_fwalk_sglue+0xc>
 8005718:	4630      	mov	r0, r6
 800571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d907      	bls.n	8005734 <_fwalk_sglue+0x38>
 8005724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005728:	3301      	adds	r3, #1
 800572a:	d003      	beq.n	8005734 <_fwalk_sglue+0x38>
 800572c:	4629      	mov	r1, r5
 800572e:	4638      	mov	r0, r7
 8005730:	47c0      	blx	r8
 8005732:	4306      	orrs	r6, r0
 8005734:	3568      	adds	r5, #104	@ 0x68
 8005736:	e7e9      	b.n	800570c <_fwalk_sglue+0x10>

08005738 <printf>:
 8005738:	b40f      	push	{r0, r1, r2, r3}
 800573a:	b507      	push	{r0, r1, r2, lr}
 800573c:	4906      	ldr	r1, [pc, #24]	@ (8005758 <printf+0x20>)
 800573e:	ab04      	add	r3, sp, #16
 8005740:	6808      	ldr	r0, [r1, #0]
 8005742:	f853 2b04 	ldr.w	r2, [r3], #4
 8005746:	6881      	ldr	r1, [r0, #8]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	f000 fb25 	bl	8005d98 <_vfprintf_r>
 800574e:	b003      	add	sp, #12
 8005750:	f85d eb04 	ldr.w	lr, [sp], #4
 8005754:	b004      	add	sp, #16
 8005756:	4770      	bx	lr
 8005758:	20000428 	.word	0x20000428

0800575c <_puts_r>:
 800575c:	b530      	push	{r4, r5, lr}
 800575e:	4605      	mov	r5, r0
 8005760:	b089      	sub	sp, #36	@ 0x24
 8005762:	4608      	mov	r0, r1
 8005764:	460c      	mov	r4, r1
 8005766:	f7fa fd5b 	bl	8000220 <strlen>
 800576a:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <_puts_r+0x88>)
 800576c:	9306      	str	r3, [sp, #24]
 800576e:	2301      	movs	r3, #1
 8005770:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8005774:	9307      	str	r3, [sp, #28]
 8005776:	4418      	add	r0, r3
 8005778:	ab04      	add	r3, sp, #16
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	2302      	movs	r3, #2
 800577e:	9302      	str	r3, [sp, #8]
 8005780:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005782:	68ac      	ldr	r4, [r5, #8]
 8005784:	9003      	str	r0, [sp, #12]
 8005786:	b913      	cbnz	r3, 800578e <_puts_r+0x32>
 8005788:	4628      	mov	r0, r5
 800578a:	f7ff ff9f 	bl	80056cc <__sinit>
 800578e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005790:	07db      	lsls	r3, r3, #31
 8005792:	d405      	bmi.n	80057a0 <_puts_r+0x44>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	0598      	lsls	r0, r3, #22
 8005798:	d402      	bmi.n	80057a0 <_puts_r+0x44>
 800579a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800579c:	f000 f9c6 	bl	8005b2c <__retarget_lock_acquire_recursive>
 80057a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a4:	0499      	lsls	r1, r3, #18
 80057a6:	d406      	bmi.n	80057b6 <_puts_r+0x5a>
 80057a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057b4:	6663      	str	r3, [r4, #100]	@ 0x64
 80057b6:	4628      	mov	r0, r5
 80057b8:	aa01      	add	r2, sp, #4
 80057ba:	4621      	mov	r1, r4
 80057bc:	f003 fd54 	bl	8009268 <__sfvwrite_r>
 80057c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057c2:	2800      	cmp	r0, #0
 80057c4:	bf0c      	ite	eq
 80057c6:	250a      	moveq	r5, #10
 80057c8:	f04f 35ff 	movne.w	r5, #4294967295
 80057cc:	07da      	lsls	r2, r3, #31
 80057ce:	d405      	bmi.n	80057dc <_puts_r+0x80>
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	059b      	lsls	r3, r3, #22
 80057d4:	d402      	bmi.n	80057dc <_puts_r+0x80>
 80057d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057d8:	f000 f9a9 	bl	8005b2e <__retarget_lock_release_recursive>
 80057dc:	4628      	mov	r0, r5
 80057de:	b009      	add	sp, #36	@ 0x24
 80057e0:	bd30      	pop	{r4, r5, pc}
 80057e2:	bf00      	nop
 80057e4:	0800e863 	.word	0x0800e863

080057e8 <puts>:
 80057e8:	4b02      	ldr	r3, [pc, #8]	@ (80057f4 <puts+0xc>)
 80057ea:	4601      	mov	r1, r0
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	f7ff bfb5 	b.w	800575c <_puts_r>
 80057f2:	bf00      	nop
 80057f4:	20000428 	.word	0x20000428

080057f8 <scanf>:
 80057f8:	b40f      	push	{r0, r1, r2, r3}
 80057fa:	b507      	push	{r0, r1, r2, lr}
 80057fc:	4906      	ldr	r1, [pc, #24]	@ (8005818 <scanf+0x20>)
 80057fe:	ab04      	add	r3, sp, #16
 8005800:	6808      	ldr	r0, [r1, #0]
 8005802:	f853 2b04 	ldr.w	r2, [r3], #4
 8005806:	6841      	ldr	r1, [r0, #4]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f003 fbaf 	bl	8008f6c <_vfscanf_r>
 800580e:	b003      	add	sp, #12
 8005810:	f85d eb04 	ldr.w	lr, [sp], #4
 8005814:	b004      	add	sp, #16
 8005816:	4770      	bx	lr
 8005818:	20000428 	.word	0x20000428

0800581c <setvbuf>:
 800581c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005820:	461d      	mov	r5, r3
 8005822:	4b5a      	ldr	r3, [pc, #360]	@ (800598c <setvbuf+0x170>)
 8005824:	681f      	ldr	r7, [r3, #0]
 8005826:	4604      	mov	r4, r0
 8005828:	460e      	mov	r6, r1
 800582a:	4690      	mov	r8, r2
 800582c:	b127      	cbz	r7, 8005838 <setvbuf+0x1c>
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	b913      	cbnz	r3, 8005838 <setvbuf+0x1c>
 8005832:	4638      	mov	r0, r7
 8005834:	f7ff ff4a 	bl	80056cc <__sinit>
 8005838:	f1b8 0f02 	cmp.w	r8, #2
 800583c:	d006      	beq.n	800584c <setvbuf+0x30>
 800583e:	f1b8 0f01 	cmp.w	r8, #1
 8005842:	f200 80a0 	bhi.w	8005986 <setvbuf+0x16a>
 8005846:	2d00      	cmp	r5, #0
 8005848:	f2c0 809d 	blt.w	8005986 <setvbuf+0x16a>
 800584c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d405      	bmi.n	800585e <setvbuf+0x42>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	059a      	lsls	r2, r3, #22
 8005856:	d402      	bmi.n	800585e <setvbuf+0x42>
 8005858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800585a:	f000 f967 	bl	8005b2c <__retarget_lock_acquire_recursive>
 800585e:	4621      	mov	r1, r4
 8005860:	4638      	mov	r0, r7
 8005862:	f003 fc73 	bl	800914c <_fflush_r>
 8005866:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005868:	b141      	cbz	r1, 800587c <setvbuf+0x60>
 800586a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800586e:	4299      	cmp	r1, r3
 8005870:	d002      	beq.n	8005878 <setvbuf+0x5c>
 8005872:	4638      	mov	r0, r7
 8005874:	f000 f9ce 	bl	8005c14 <_free_r>
 8005878:	2300      	movs	r3, #0
 800587a:	6323      	str	r3, [r4, #48]	@ 0x30
 800587c:	2300      	movs	r3, #0
 800587e:	61a3      	str	r3, [r4, #24]
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	d503      	bpl.n	8005890 <setvbuf+0x74>
 8005888:	6921      	ldr	r1, [r4, #16]
 800588a:	4638      	mov	r0, r7
 800588c:	f000 f9c2 	bl	8005c14 <_free_r>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	f1b8 0f02 	cmp.w	r8, #2
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	d067      	beq.n	8005972 <setvbuf+0x156>
 80058a2:	ab01      	add	r3, sp, #4
 80058a4:	466a      	mov	r2, sp
 80058a6:	4621      	mov	r1, r4
 80058a8:	4638      	mov	r0, r7
 80058aa:	f003 fe29 	bl	8009500 <__swhatbuf_r>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	4318      	orrs	r0, r3
 80058b2:	81a0      	strh	r0, [r4, #12]
 80058b4:	bb2d      	cbnz	r5, 8005902 <setvbuf+0xe6>
 80058b6:	9d00      	ldr	r5, [sp, #0]
 80058b8:	4628      	mov	r0, r5
 80058ba:	f7ff fc25 	bl	8005108 <malloc>
 80058be:	4606      	mov	r6, r0
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d158      	bne.n	8005976 <setvbuf+0x15a>
 80058c4:	f8dd 9000 	ldr.w	r9, [sp]
 80058c8:	45a9      	cmp	r9, r5
 80058ca:	d146      	bne.n	800595a <setvbuf+0x13e>
 80058cc:	f04f 35ff 	mov.w	r5, #4294967295
 80058d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d4:	f043 0202 	orr.w	r2, r3, #2
 80058d8:	81a2      	strh	r2, [r4, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	60a2      	str	r2, [r4, #8]
 80058de:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058e2:	6022      	str	r2, [r4, #0]
 80058e4:	6122      	str	r2, [r4, #16]
 80058e6:	2201      	movs	r2, #1
 80058e8:	6162      	str	r2, [r4, #20]
 80058ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058ec:	07d6      	lsls	r6, r2, #31
 80058ee:	d404      	bmi.n	80058fa <setvbuf+0xde>
 80058f0:	0598      	lsls	r0, r3, #22
 80058f2:	d402      	bmi.n	80058fa <setvbuf+0xde>
 80058f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058f6:	f000 f91a 	bl	8005b2e <__retarget_lock_release_recursive>
 80058fa:	4628      	mov	r0, r5
 80058fc:	b003      	add	sp, #12
 80058fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005902:	2e00      	cmp	r6, #0
 8005904:	d0d8      	beq.n	80058b8 <setvbuf+0x9c>
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005908:	b913      	cbnz	r3, 8005910 <setvbuf+0xf4>
 800590a:	4638      	mov	r0, r7
 800590c:	f7ff fede 	bl	80056cc <__sinit>
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	6026      	str	r6, [r4, #0]
 8005914:	42ab      	cmp	r3, r5
 8005916:	bf1e      	ittt	ne
 8005918:	89a3      	ldrhne	r3, [r4, #12]
 800591a:	f443 6300 	orrne.w	r3, r3, #2048	@ 0x800
 800591e:	81a3      	strhne	r3, [r4, #12]
 8005920:	f1b8 0f01 	cmp.w	r8, #1
 8005924:	bf02      	ittt	eq
 8005926:	89a3      	ldrheq	r3, [r4, #12]
 8005928:	f043 0301 	orreq.w	r3, r3, #1
 800592c:	81a3      	strheq	r3, [r4, #12]
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	f013 0208 	ands.w	r2, r3, #8
 8005936:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800593a:	d01e      	beq.n	800597a <setvbuf+0x15e>
 800593c:	07d9      	lsls	r1, r3, #31
 800593e:	bf41      	itttt	mi
 8005940:	2200      	movmi	r2, #0
 8005942:	426d      	negmi	r5, r5
 8005944:	60a2      	strmi	r2, [r4, #8]
 8005946:	61a5      	strmi	r5, [r4, #24]
 8005948:	bf58      	it	pl
 800594a:	60a5      	strpl	r5, [r4, #8]
 800594c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800594e:	07d2      	lsls	r2, r2, #31
 8005950:	d401      	bmi.n	8005956 <setvbuf+0x13a>
 8005952:	059b      	lsls	r3, r3, #22
 8005954:	d513      	bpl.n	800597e <setvbuf+0x162>
 8005956:	2500      	movs	r5, #0
 8005958:	e7cf      	b.n	80058fa <setvbuf+0xde>
 800595a:	4648      	mov	r0, r9
 800595c:	f7ff fbd4 	bl	8005108 <malloc>
 8005960:	4606      	mov	r6, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	d0b2      	beq.n	80058cc <setvbuf+0xb0>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	464d      	mov	r5, r9
 8005970:	e7c9      	b.n	8005906 <setvbuf+0xea>
 8005972:	2500      	movs	r5, #0
 8005974:	e7ac      	b.n	80058d0 <setvbuf+0xb4>
 8005976:	46a9      	mov	r9, r5
 8005978:	e7f5      	b.n	8005966 <setvbuf+0x14a>
 800597a:	60a2      	str	r2, [r4, #8]
 800597c:	e7e6      	b.n	800594c <setvbuf+0x130>
 800597e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005980:	f000 f8d5 	bl	8005b2e <__retarget_lock_release_recursive>
 8005984:	e7e7      	b.n	8005956 <setvbuf+0x13a>
 8005986:	f04f 35ff 	mov.w	r5, #4294967295
 800598a:	e7b6      	b.n	80058fa <setvbuf+0xde>
 800598c:	20000428 	.word	0x20000428

08005990 <__sread>:
 8005990:	b510      	push	{r4, lr}
 8005992:	460c      	mov	r4, r1
 8005994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005998:	f000 f868 	bl	8005a6c <_read_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	bfab      	itete	ge
 80059a0:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80059a2:	89a3      	ldrhlt	r3, [r4, #12]
 80059a4:	181b      	addge	r3, r3, r0
 80059a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059aa:	bfac      	ite	ge
 80059ac:	6523      	strge	r3, [r4, #80]	@ 0x50
 80059ae:	81a3      	strhlt	r3, [r4, #12]
 80059b0:	bd10      	pop	{r4, pc}

080059b2 <__swrite>:
 80059b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b6:	461f      	mov	r7, r3
 80059b8:	898b      	ldrh	r3, [r1, #12]
 80059ba:	05db      	lsls	r3, r3, #23
 80059bc:	4605      	mov	r5, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	4616      	mov	r6, r2
 80059c2:	d505      	bpl.n	80059d0 <__swrite+0x1e>
 80059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c8:	2302      	movs	r3, #2
 80059ca:	2200      	movs	r2, #0
 80059cc:	f000 f83c 	bl	8005a48 <_lseek_r>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	4632      	mov	r2, r6
 80059de:	463b      	mov	r3, r7
 80059e0:	4628      	mov	r0, r5
 80059e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e6:	f000 b863 	b.w	8005ab0 <_write_r>

080059ea <__sseek>:
 80059ea:	b510      	push	{r4, lr}
 80059ec:	460c      	mov	r4, r1
 80059ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f2:	f000 f829 	bl	8005a48 <_lseek_r>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	bf15      	itete	ne
 80059fc:	6520      	strne	r0, [r4, #80]	@ 0x50
 80059fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a06:	81a3      	strheq	r3, [r4, #12]
 8005a08:	bf18      	it	ne
 8005a0a:	81a3      	strhne	r3, [r4, #12]
 8005a0c:	bd10      	pop	{r4, pc}

08005a0e <__sclose>:
 8005a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a12:	f000 b809 	b.w	8005a28 <_close_r>

08005a16 <memset>:
 8005a16:	4402      	add	r2, r0
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d100      	bne.n	8005a20 <memset+0xa>
 8005a1e:	4770      	bx	lr
 8005a20:	f803 1b01 	strb.w	r1, [r3], #1
 8005a24:	e7f9      	b.n	8005a1a <memset+0x4>
	...

08005a28 <_close_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d06      	ldr	r5, [pc, #24]	@ (8005a44 <_close_r+0x1c>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4604      	mov	r4, r0
 8005a30:	4608      	mov	r0, r1
 8005a32:	602b      	str	r3, [r5, #0]
 8005a34:	f7fb ff31 	bl	800189a <_close>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_close_r+0x1a>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_close_r+0x1a>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000980 	.word	0x20000980

08005a48 <_lseek_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d07      	ldr	r5, [pc, #28]	@ (8005a68 <_lseek_r+0x20>)
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	4608      	mov	r0, r1
 8005a50:	4611      	mov	r1, r2
 8005a52:	2200      	movs	r2, #0
 8005a54:	602a      	str	r2, [r5, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f7fb ff46 	bl	80018e8 <_lseek>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_lseek_r+0x1e>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_lseek_r+0x1e>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	20000980 	.word	0x20000980

08005a6c <_read_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d07      	ldr	r5, [pc, #28]	@ (8005a8c <_read_r+0x20>)
 8005a70:	4604      	mov	r4, r0
 8005a72:	4608      	mov	r0, r1
 8005a74:	4611      	mov	r1, r2
 8005a76:	2200      	movs	r2, #0
 8005a78:	602a      	str	r2, [r5, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f7fb fed4 	bl	8001828 <_read>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_read_r+0x1e>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_read_r+0x1e>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000980 	.word	0x20000980

08005a90 <_sbrk_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4d06      	ldr	r5, [pc, #24]	@ (8005aac <_sbrk_r+0x1c>)
 8005a94:	2300      	movs	r3, #0
 8005a96:	4604      	mov	r4, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	f7fb ff32 	bl	8001904 <_sbrk>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_sbrk_r+0x1a>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_sbrk_r+0x1a>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20000980 	.word	0x20000980

08005ab0 <_write_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	@ (8005ad0 <_write_r+0x20>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4611      	mov	r1, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7fb fecf 	bl	8001862 <_write>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_write_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_write_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000980 	.word	0x20000980

08005ad4 <__errno>:
 8005ad4:	4b01      	ldr	r3, [pc, #4]	@ (8005adc <__errno+0x8>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000428 	.word	0x20000428

08005ae0 <__libc_init_array>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b18 <__libc_init_array+0x38>)
 8005ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b1c <__libc_init_array+0x3c>)
 8005ae6:	1b64      	subs	r4, r4, r5
 8005ae8:	10a4      	asrs	r4, r4, #2
 8005aea:	2600      	movs	r6, #0
 8005aec:	42a6      	cmp	r6, r4
 8005aee:	d109      	bne.n	8005b04 <__libc_init_array+0x24>
 8005af0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b20 <__libc_init_array+0x40>)
 8005af2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b24 <__libc_init_array+0x44>)
 8005af4:	f008 fc3c 	bl	800e370 <_init>
 8005af8:	1b64      	subs	r4, r4, r5
 8005afa:	10a4      	asrs	r4, r4, #2
 8005afc:	2600      	movs	r6, #0
 8005afe:	42a6      	cmp	r6, r4
 8005b00:	d105      	bne.n	8005b0e <__libc_init_array+0x2e>
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b08:	4798      	blx	r3
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	e7ee      	b.n	8005aec <__libc_init_array+0xc>
 8005b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b12:	4798      	blx	r3
 8005b14:	3601      	adds	r6, #1
 8005b16:	e7f2      	b.n	8005afe <__libc_init_array+0x1e>
 8005b18:	0800e8d0 	.word	0x0800e8d0
 8005b1c:	0800e8d0 	.word	0x0800e8d0
 8005b20:	0800e8d0 	.word	0x0800e8d0
 8005b24:	0800e8d8 	.word	0x0800e8d8

08005b28 <__retarget_lock_init_recursive>:
 8005b28:	4770      	bx	lr

08005b2a <__retarget_lock_close_recursive>:
 8005b2a:	4770      	bx	lr

08005b2c <__retarget_lock_acquire_recursive>:
 8005b2c:	4770      	bx	lr

08005b2e <__retarget_lock_release_recursive>:
 8005b2e:	4770      	bx	lr

08005b30 <sysconf>:
 8005b30:	2808      	cmp	r0, #8
 8005b32:	b508      	push	{r3, lr}
 8005b34:	d006      	beq.n	8005b44 <sysconf+0x14>
 8005b36:	f7ff ffcd 	bl	8005ad4 <__errno>
 8005b3a:	2316      	movs	r3, #22
 8005b3c:	6003      	str	r3, [r0, #0]
 8005b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b42:	bd08      	pop	{r3, pc}
 8005b44:	2080      	movs	r0, #128	@ 0x80
 8005b46:	e7fc      	b.n	8005b42 <sysconf+0x12>

08005b48 <register_fini>:
 8005b48:	4b02      	ldr	r3, [pc, #8]	@ (8005b54 <register_fini+0xc>)
 8005b4a:	b113      	cbz	r3, 8005b52 <register_fini+0xa>
 8005b4c:	4802      	ldr	r0, [pc, #8]	@ (8005b58 <register_fini+0x10>)
 8005b4e:	f000 b805 	b.w	8005b5c <atexit>
 8005b52:	4770      	bx	lr
 8005b54:	00000000 	.word	0x00000000
 8005b58:	08009b51 	.word	0x08009b51

08005b5c <atexit>:
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4601      	mov	r1, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	4618      	mov	r0, r3
 8005b64:	f004 b852 	b.w	8009c0c <__register_exitproc>

08005b68 <_malloc_trim_r>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	2008      	movs	r0, #8
 8005b70:	4689      	mov	r9, r1
 8005b72:	f7ff ffdd 	bl	8005b30 <sysconf>
 8005b76:	4f24      	ldr	r7, [pc, #144]	@ (8005c08 <_malloc_trim_r+0xa0>)
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff fd0e 	bl	800559c <__malloc_lock>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	685d      	ldr	r5, [r3, #4]
 8005b84:	f025 0503 	bic.w	r5, r5, #3
 8005b88:	f1a5 0411 	sub.w	r4, r5, #17
 8005b8c:	eba4 0409 	sub.w	r4, r4, r9
 8005b90:	4444      	add	r4, r8
 8005b92:	fbb4 f4f8 	udiv	r4, r4, r8
 8005b96:	3c01      	subs	r4, #1
 8005b98:	fb08 f404 	mul.w	r4, r8, r4
 8005b9c:	45a0      	cmp	r8, r4
 8005b9e:	dd05      	ble.n	8005bac <_malloc_trim_r+0x44>
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff fd01 	bl	80055a8 <__malloc_unlock>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bac:	2100      	movs	r1, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ff6e 	bl	8005a90 <_sbrk_r>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	442b      	add	r3, r5
 8005bb8:	4298      	cmp	r0, r3
 8005bba:	d1f1      	bne.n	8005ba0 <_malloc_trim_r+0x38>
 8005bbc:	4261      	negs	r1, r4
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7ff ff66 	bl	8005a90 <_sbrk_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d110      	bne.n	8005bea <_malloc_trim_r+0x82>
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff ff60 	bl	8005a90 <_sbrk_r>
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	1a83      	subs	r3, r0, r2
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	dde3      	ble.n	8005ba0 <_malloc_trim_r+0x38>
 8005bd8:	490c      	ldr	r1, [pc, #48]	@ (8005c0c <_malloc_trim_r+0xa4>)
 8005bda:	6809      	ldr	r1, [r1, #0]
 8005bdc:	1a40      	subs	r0, r0, r1
 8005bde:	490c      	ldr	r1, [pc, #48]	@ (8005c10 <_malloc_trim_r+0xa8>)
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	6008      	str	r0, [r1, #0]
 8005be6:	6053      	str	r3, [r2, #4]
 8005be8:	e7da      	b.n	8005ba0 <_malloc_trim_r+0x38>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4a08      	ldr	r2, [pc, #32]	@ (8005c10 <_malloc_trim_r+0xa8>)
 8005bee:	1b2d      	subs	r5, r5, r4
 8005bf0:	f045 0501 	orr.w	r5, r5, #1
 8005bf4:	605d      	str	r5, [r3, #4]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	1b1b      	subs	r3, r3, r4
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	f7ff fcd3 	bl	80055a8 <__malloc_unlock>
 8005c02:	2001      	movs	r0, #1
 8005c04:	e7d0      	b.n	8005ba8 <_malloc_trim_r+0x40>
 8005c06:	bf00      	nop
 8005c08:	20000014 	.word	0x20000014
 8005c0c:	2000000c 	.word	0x2000000c
 8005c10:	20000810 	.word	0x20000810

08005c14 <_free_r>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	4604      	mov	r4, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	f000 80b1 	beq.w	8005d82 <_free_r+0x16e>
 8005c20:	f7ff fcbc 	bl	800559c <__malloc_lock>
 8005c24:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005c28:	4d56      	ldr	r5, [pc, #344]	@ (8005d84 <_free_r+0x170>)
 8005c2a:	f022 0001 	bic.w	r0, r2, #1
 8005c2e:	f1a7 0308 	sub.w	r3, r7, #8
 8005c32:	eb03 0c00 	add.w	ip, r3, r0
 8005c36:	68a9      	ldr	r1, [r5, #8]
 8005c38:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005c3c:	4561      	cmp	r1, ip
 8005c3e:	f026 0603 	bic.w	r6, r6, #3
 8005c42:	f002 0201 	and.w	r2, r2, #1
 8005c46:	d11b      	bne.n	8005c80 <_free_r+0x6c>
 8005c48:	4406      	add	r6, r0
 8005c4a:	b93a      	cbnz	r2, 8005c5c <_free_r+0x48>
 8005c4c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	4416      	add	r6, r2
 8005c54:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8005c58:	60ca      	str	r2, [r1, #12]
 8005c5a:	6091      	str	r1, [r2, #8]
 8005c5c:	f046 0201 	orr.w	r2, r6, #1
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	60ab      	str	r3, [r5, #8]
 8005c64:	4b48      	ldr	r3, [pc, #288]	@ (8005d88 <_free_r+0x174>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	42b3      	cmp	r3, r6
 8005c6a:	d804      	bhi.n	8005c76 <_free_r+0x62>
 8005c6c:	4b47      	ldr	r3, [pc, #284]	@ (8005d8c <_free_r+0x178>)
 8005c6e:	4620      	mov	r0, r4
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	f7ff ff79 	bl	8005b68 <_malloc_trim_r>
 8005c76:	4620      	mov	r0, r4
 8005c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c7c:	f7ff bc94 	b.w	80055a8 <__malloc_unlock>
 8005c80:	f8cc 6004 	str.w	r6, [ip, #4]
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d138      	bne.n	8005cfa <_free_r+0xe6>
 8005c88:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8005c8c:	1a5b      	subs	r3, r3, r1
 8005c8e:	4408      	add	r0, r1
 8005c90:	6899      	ldr	r1, [r3, #8]
 8005c92:	f105 0708 	add.w	r7, r5, #8
 8005c96:	42b9      	cmp	r1, r7
 8005c98:	d031      	beq.n	8005cfe <_free_r+0xea>
 8005c9a:	68df      	ldr	r7, [r3, #12]
 8005c9c:	60cf      	str	r7, [r1, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	eb0c 0106 	add.w	r1, ip, r6
 8005ca4:	6849      	ldr	r1, [r1, #4]
 8005ca6:	07c9      	lsls	r1, r1, #31
 8005ca8:	d40b      	bmi.n	8005cc2 <_free_r+0xae>
 8005caa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005cae:	4430      	add	r0, r6
 8005cb0:	bb3a      	cbnz	r2, 8005d02 <_free_r+0xee>
 8005cb2:	4e37      	ldr	r6, [pc, #220]	@ (8005d90 <_free_r+0x17c>)
 8005cb4:	42b1      	cmp	r1, r6
 8005cb6:	d124      	bne.n	8005d02 <_free_r+0xee>
 8005cb8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8005cbc:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f040 0101 	orr.w	r1, r0, #1
 8005cc6:	6059      	str	r1, [r3, #4]
 8005cc8:	5018      	str	r0, [r3, r0]
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d1d3      	bne.n	8005c76 <_free_r+0x62>
 8005cce:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005cd2:	d21b      	bcs.n	8005d0c <_free_r+0xf8>
 8005cd4:	08c2      	lsrs	r2, r0, #3
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	0940      	lsrs	r0, r0, #5
 8005cda:	4081      	lsls	r1, r0
 8005cdc:	6868      	ldr	r0, [r5, #4]
 8005cde:	3201      	adds	r2, #1
 8005ce0:	4301      	orrs	r1, r0
 8005ce2:	6069      	str	r1, [r5, #4]
 8005ce4:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8005ce8:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8005cec:	3908      	subs	r1, #8
 8005cee:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005cf2:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8005cf6:	60c3      	str	r3, [r0, #12]
 8005cf8:	e7bd      	b.n	8005c76 <_free_r+0x62>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	e7d0      	b.n	8005ca0 <_free_r+0x8c>
 8005cfe:	2201      	movs	r2, #1
 8005d00:	e7ce      	b.n	8005ca0 <_free_r+0x8c>
 8005d02:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8005d06:	60ce      	str	r6, [r1, #12]
 8005d08:	60b1      	str	r1, [r6, #8]
 8005d0a:	e7da      	b.n	8005cc2 <_free_r+0xae>
 8005d0c:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8005d10:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8005d14:	d214      	bcs.n	8005d40 <_free_r+0x12c>
 8005d16:	0982      	lsrs	r2, r0, #6
 8005d18:	3238      	adds	r2, #56	@ 0x38
 8005d1a:	1c51      	adds	r1, r2, #1
 8005d1c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005d20:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005d24:	428e      	cmp	r6, r1
 8005d26:	d125      	bne.n	8005d74 <_free_r+0x160>
 8005d28:	2001      	movs	r0, #1
 8005d2a:	1092      	asrs	r2, r2, #2
 8005d2c:	fa00 f202 	lsl.w	r2, r0, r2
 8005d30:	6868      	ldr	r0, [r5, #4]
 8005d32:	4302      	orrs	r2, r0
 8005d34:	606a      	str	r2, [r5, #4]
 8005d36:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8005d3a:	60b3      	str	r3, [r6, #8]
 8005d3c:	60cb      	str	r3, [r1, #12]
 8005d3e:	e79a      	b.n	8005c76 <_free_r+0x62>
 8005d40:	2a14      	cmp	r2, #20
 8005d42:	d801      	bhi.n	8005d48 <_free_r+0x134>
 8005d44:	325b      	adds	r2, #91	@ 0x5b
 8005d46:	e7e8      	b.n	8005d1a <_free_r+0x106>
 8005d48:	2a54      	cmp	r2, #84	@ 0x54
 8005d4a:	d802      	bhi.n	8005d52 <_free_r+0x13e>
 8005d4c:	0b02      	lsrs	r2, r0, #12
 8005d4e:	326e      	adds	r2, #110	@ 0x6e
 8005d50:	e7e3      	b.n	8005d1a <_free_r+0x106>
 8005d52:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8005d56:	d802      	bhi.n	8005d5e <_free_r+0x14a>
 8005d58:	0bc2      	lsrs	r2, r0, #15
 8005d5a:	3277      	adds	r2, #119	@ 0x77
 8005d5c:	e7dd      	b.n	8005d1a <_free_r+0x106>
 8005d5e:	f240 5154 	movw	r1, #1364	@ 0x554
 8005d62:	428a      	cmp	r2, r1
 8005d64:	bf9a      	itte	ls
 8005d66:	0c82      	lsrls	r2, r0, #18
 8005d68:	327c      	addls	r2, #124	@ 0x7c
 8005d6a:	227e      	movhi	r2, #126	@ 0x7e
 8005d6c:	e7d5      	b.n	8005d1a <_free_r+0x106>
 8005d6e:	6889      	ldr	r1, [r1, #8]
 8005d70:	428e      	cmp	r6, r1
 8005d72:	d004      	beq.n	8005d7e <_free_r+0x16a>
 8005d74:	684a      	ldr	r2, [r1, #4]
 8005d76:	f022 0203 	bic.w	r2, r2, #3
 8005d7a:	4282      	cmp	r2, r0
 8005d7c:	d8f7      	bhi.n	8005d6e <_free_r+0x15a>
 8005d7e:	68ce      	ldr	r6, [r1, #12]
 8005d80:	e7d9      	b.n	8005d36 <_free_r+0x122>
 8005d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d84:	20000014 	.word	0x20000014
 8005d88:	20000010 	.word	0x20000010
 8005d8c:	20000840 	.word	0x20000840
 8005d90:	2000001c 	.word	0x2000001c
 8005d94:	00000000 	.word	0x00000000

08005d98 <_vfprintf_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	b0d3      	sub	sp, #332	@ 0x14c
 8005d9e:	468b      	mov	fp, r1
 8005da0:	4690      	mov	r8, r2
 8005da2:	461c      	mov	r4, r3
 8005da4:	461e      	mov	r6, r3
 8005da6:	9003      	str	r0, [sp, #12]
 8005da8:	f003 feac 	bl	8009b04 <_localeconv_r>
 8005dac:	6803      	ldr	r3, [r0, #0]
 8005dae:	9316      	str	r3, [sp, #88]	@ 0x58
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fa fa35 	bl	8000220 <strlen>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	900d      	str	r0, [sp, #52]	@ 0x34
 8005dba:	b123      	cbz	r3, 8005dc6 <_vfprintf_r+0x2e>
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbe:	b913      	cbnz	r3, 8005dc6 <_vfprintf_r+0x2e>
 8005dc0:	9803      	ldr	r0, [sp, #12]
 8005dc2:	f7ff fc83 	bl	80056cc <__sinit>
 8005dc6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8005dca:	07da      	lsls	r2, r3, #31
 8005dcc:	d407      	bmi.n	8005dde <_vfprintf_r+0x46>
 8005dce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005dd2:	059b      	lsls	r3, r3, #22
 8005dd4:	d403      	bmi.n	8005dde <_vfprintf_r+0x46>
 8005dd6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8005dda:	f7ff fea7 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8005dde:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8005de2:	049f      	lsls	r7, r3, #18
 8005de4:	d409      	bmi.n	8005dfa <_vfprintf_r+0x62>
 8005de6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005dea:	f8ab 300c 	strh.w	r3, [fp, #12]
 8005dee:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8005df2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005df6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 8005dfa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005dfe:	071d      	lsls	r5, r3, #28
 8005e00:	d502      	bpl.n	8005e08 <_vfprintf_r+0x70>
 8005e02:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005e06:	b9c3      	cbnz	r3, 8005e3a <_vfprintf_r+0xa2>
 8005e08:	9803      	ldr	r0, [sp, #12]
 8005e0a:	4659      	mov	r1, fp
 8005e0c:	f003 fd86 	bl	800991c <__swsetup_r>
 8005e10:	b198      	cbz	r0, 8005e3a <_vfprintf_r+0xa2>
 8005e12:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8005e16:	07d8      	lsls	r0, r3, #31
 8005e18:	d506      	bpl.n	8005e28 <_vfprintf_r+0x90>
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e20:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005e22:	b053      	add	sp, #332	@ 0x14c
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005e2c:	0599      	lsls	r1, r3, #22
 8005e2e:	d4f4      	bmi.n	8005e1a <_vfprintf_r+0x82>
 8005e30:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8005e34:	f7ff fe7b 	bl	8005b2e <__retarget_lock_release_recursive>
 8005e38:	e7ef      	b.n	8005e1a <_vfprintf_r+0x82>
 8005e3a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8005e3e:	f003 021a 	and.w	r2, r3, #26
 8005e42:	2a0a      	cmp	r2, #10
 8005e44:	d116      	bne.n	8005e74 <_vfprintf_r+0xdc>
 8005e46:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	db12      	blt.n	8005e74 <_vfprintf_r+0xdc>
 8005e4e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8005e52:	07d2      	lsls	r2, r2, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfprintf_r+0xca>
 8005e56:	059b      	lsls	r3, r3, #22
 8005e58:	d403      	bmi.n	8005e62 <_vfprintf_r+0xca>
 8005e5a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8005e5e:	f7ff fe66 	bl	8005b2e <__retarget_lock_release_recursive>
 8005e62:	9803      	ldr	r0, [sp, #12]
 8005e64:	4623      	mov	r3, r4
 8005e66:	4642      	mov	r2, r8
 8005e68:	4659      	mov	r1, fp
 8005e6a:	b053      	add	sp, #332	@ 0x14c
 8005e6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	f001 b9be 	b.w	80071f0 <__sbprintf>
 8005e74:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 80060c0 <_vfprintf_r+0x328>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8005e7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005e82:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8005e86:	ac29      	add	r4, sp, #164	@ 0xa4
 8005e88:	9426      	str	r4, [sp, #152]	@ 0x98
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e90:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005e92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e94:	4643      	mov	r3, r8
 8005e96:	461d      	mov	r5, r3
 8005e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9c:	b10a      	cbz	r2, 8005ea2 <_vfprintf_r+0x10a>
 8005e9e:	2a25      	cmp	r2, #37	@ 0x25
 8005ea0:	d1f9      	bne.n	8005e96 <_vfprintf_r+0xfe>
 8005ea2:	ebb5 0708 	subs.w	r7, r5, r8
 8005ea6:	d00d      	beq.n	8005ec4 <_vfprintf_r+0x12c>
 8005ea8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005eaa:	443b      	add	r3, r7
 8005eac:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005eae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	2b07      	cmp	r3, #7
 8005eb4:	e9c4 8700 	strd	r8, r7, [r4]
 8005eb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005eba:	dc75      	bgt.n	8005fa8 <_vfprintf_r+0x210>
 8005ebc:	3408      	adds	r4, #8
 8005ebe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ec0:	443b      	add	r3, r7
 8005ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ec4:	782b      	ldrb	r3, [r5, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f001 814f 	beq.w	800716a <_vfprintf_r+0x13d2>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	1c6b      	adds	r3, r5, #1
 8005ed0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8005ed4:	f04f 39ff 	mov.w	r9, #4294967295
 8005ed8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eda:	4615      	mov	r5, r2
 8005edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee0:	9206      	str	r2, [sp, #24]
 8005ee2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ee4:	9b06      	ldr	r3, [sp, #24]
 8005ee6:	3b20      	subs	r3, #32
 8005ee8:	2b5a      	cmp	r3, #90	@ 0x5a
 8005eea:	f200 85aa 	bhi.w	8006a42 <_vfprintf_r+0xcaa>
 8005eee:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ef2:	009d      	.short	0x009d
 8005ef4:	05a805a8 	.word	0x05a805a8
 8005ef8:	05a800a5 	.word	0x05a800a5
 8005efc:	05a805a8 	.word	0x05a805a8
 8005f00:	05a80085 	.word	0x05a80085
 8005f04:	00a805a8 	.word	0x00a805a8
 8005f08:	05a800b2 	.word	0x05a800b2
 8005f0c:	00b400af 	.word	0x00b400af
 8005f10:	00ce05a8 	.word	0x00ce05a8
 8005f14:	00d100d1 	.word	0x00d100d1
 8005f18:	00d100d1 	.word	0x00d100d1
 8005f1c:	00d100d1 	.word	0x00d100d1
 8005f20:	00d100d1 	.word	0x00d100d1
 8005f24:	05a800d1 	.word	0x05a800d1
 8005f28:	05a805a8 	.word	0x05a805a8
 8005f2c:	05a805a8 	.word	0x05a805a8
 8005f30:	05a805a8 	.word	0x05a805a8
 8005f34:	05a80146 	.word	0x05a80146
 8005f38:	011a0107 	.word	0x011a0107
 8005f3c:	01460146 	.word	0x01460146
 8005f40:	05a80146 	.word	0x05a80146
 8005f44:	05a805a8 	.word	0x05a805a8
 8005f48:	00e205a8 	.word	0x00e205a8
 8005f4c:	05a805a8 	.word	0x05a805a8
 8005f50:	05a804a3 	.word	0x05a804a3
 8005f54:	05a805a8 	.word	0x05a805a8
 8005f58:	05a804ed 	.word	0x05a804ed
 8005f5c:	05a8050e 	.word	0x05a8050e
 8005f60:	053005a8 	.word	0x053005a8
 8005f64:	05a805a8 	.word	0x05a805a8
 8005f68:	05a805a8 	.word	0x05a805a8
 8005f6c:	05a805a8 	.word	0x05a805a8
 8005f70:	05a805a8 	.word	0x05a805a8
 8005f74:	05a80146 	.word	0x05a80146
 8005f78:	011c0107 	.word	0x011c0107
 8005f7c:	01460146 	.word	0x01460146
 8005f80:	00ed0146 	.word	0x00ed0146
 8005f84:	0101011c 	.word	0x0101011c
 8005f88:	00fa05a8 	.word	0x00fa05a8
 8005f8c:	048705a8 	.word	0x048705a8
 8005f90:	04dc04a5 	.word	0x04dc04a5
 8005f94:	05a80101 	.word	0x05a80101
 8005f98:	009b04ed 	.word	0x009b04ed
 8005f9c:	05a80510 	.word	0x05a80510
 8005fa0:	006505a8 	.word	0x006505a8
 8005fa4:	009b05a8 	.word	0x009b05a8
 8005fa8:	9803      	ldr	r0, [sp, #12]
 8005faa:	aa26      	add	r2, sp, #152	@ 0x98
 8005fac:	4659      	mov	r1, fp
 8005fae:	f001 f95f 	bl	8007270 <__sprint_r>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f040 814d 	bne.w	8006252 <_vfprintf_r+0x4ba>
 8005fb8:	ac29      	add	r4, sp, #164	@ 0xa4
 8005fba:	e780      	b.n	8005ebe <_vfprintf_r+0x126>
 8005fbc:	4b42      	ldr	r3, [pc, #264]	@ (80060c8 <_vfprintf_r+0x330>)
 8005fbe:	9319      	str	r3, [sp, #100]	@ 0x64
 8005fc0:	f015 0320 	ands.w	r3, r5, #32
 8005fc4:	f000 84c8 	beq.w	8006958 <_vfprintf_r+0xbc0>
 8005fc8:	3607      	adds	r6, #7
 8005fca:	f026 0307 	bic.w	r3, r6, #7
 8005fce:	461a      	mov	r2, r3
 8005fd0:	685f      	ldr	r7, [r3, #4]
 8005fd2:	f852 6b08 	ldr.w	r6, [r2], #8
 8005fd6:	9207      	str	r2, [sp, #28]
 8005fd8:	07eb      	lsls	r3, r5, #31
 8005fda:	d50a      	bpl.n	8005ff2 <_vfprintf_r+0x25a>
 8005fdc:	ea56 0307 	orrs.w	r3, r6, r7
 8005fe0:	d007      	beq.n	8005ff2 <_vfprintf_r+0x25a>
 8005fe2:	2330      	movs	r3, #48	@ 0x30
 8005fe4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8005fe8:	9b06      	ldr	r3, [sp, #24]
 8005fea:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8005fee:	f045 0502 	orr.w	r5, r5, #2
 8005ff2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	f000 bc2e 	b.w	8006858 <_vfprintf_r+0xac0>
 8005ffc:	9803      	ldr	r0, [sp, #12]
 8005ffe:	f003 fd81 	bl	8009b04 <_localeconv_r>
 8006002:	6843      	ldr	r3, [r0, #4]
 8006004:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006006:	4618      	mov	r0, r3
 8006008:	f7fa f90a 	bl	8000220 <strlen>
 800600c:	9012      	str	r0, [sp, #72]	@ 0x48
 800600e:	9803      	ldr	r0, [sp, #12]
 8006010:	f003 fd78 	bl	8009b04 <_localeconv_r>
 8006014:	6883      	ldr	r3, [r0, #8]
 8006016:	9309      	str	r3, [sp, #36]	@ 0x24
 8006018:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800601a:	b12b      	cbz	r3, 8006028 <_vfprintf_r+0x290>
 800601c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601e:	b11b      	cbz	r3, 8006028 <_vfprintf_r+0x290>
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b10b      	cbz	r3, 8006028 <_vfprintf_r+0x290>
 8006024:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8006028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800602a:	e757      	b.n	8005edc <_vfprintf_r+0x144>
 800602c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f9      	bne.n	8006028 <_vfprintf_r+0x290>
 8006034:	2320      	movs	r3, #32
 8006036:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800603a:	e7f5      	b.n	8006028 <_vfprintf_r+0x290>
 800603c:	f045 0501 	orr.w	r5, r5, #1
 8006040:	e7f2      	b.n	8006028 <_vfprintf_r+0x290>
 8006042:	f856 3b04 	ldr.w	r3, [r6], #4
 8006046:	930e      	str	r3, [sp, #56]	@ 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	daed      	bge.n	8006028 <_vfprintf_r+0x290>
 800604c:	425b      	negs	r3, r3
 800604e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006050:	f045 0504 	orr.w	r5, r5, #4
 8006054:	e7e8      	b.n	8006028 <_vfprintf_r+0x290>
 8006056:	232b      	movs	r3, #43	@ 0x2b
 8006058:	e7ed      	b.n	8006036 <_vfprintf_r+0x29e>
 800605a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800605c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006060:	9206      	str	r2, [sp, #24]
 8006062:	2a2a      	cmp	r2, #42	@ 0x2a
 8006064:	d10f      	bne.n	8006086 <_vfprintf_r+0x2ee>
 8006066:	f856 2b04 	ldr.w	r2, [r6], #4
 800606a:	930c      	str	r3, [sp, #48]	@ 0x30
 800606c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8006070:	e7da      	b.n	8006028 <_vfprintf_r+0x290>
 8006072:	fb01 2909 	mla	r9, r1, r9, r2
 8006076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	9a06      	ldr	r2, [sp, #24]
 800607e:	3a30      	subs	r2, #48	@ 0x30
 8006080:	2a09      	cmp	r2, #9
 8006082:	d9f6      	bls.n	8006072 <_vfprintf_r+0x2da>
 8006084:	e72d      	b.n	8005ee2 <_vfprintf_r+0x14a>
 8006086:	f04f 0900 	mov.w	r9, #0
 800608a:	210a      	movs	r1, #10
 800608c:	e7f6      	b.n	800607c <_vfprintf_r+0x2e4>
 800608e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8006092:	e7c9      	b.n	8006028 <_vfprintf_r+0x290>
 8006094:	2200      	movs	r2, #0
 8006096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006098:	920e      	str	r2, [sp, #56]	@ 0x38
 800609a:	210a      	movs	r1, #10
 800609c:	9a06      	ldr	r2, [sp, #24]
 800609e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80060a0:	3a30      	subs	r2, #48	@ 0x30
 80060a2:	fb01 2200 	mla	r2, r1, r0, r2
 80060a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80060a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ac:	9206      	str	r2, [sp, #24]
 80060ae:	3a30      	subs	r2, #48	@ 0x30
 80060b0:	2a09      	cmp	r2, #9
 80060b2:	d9f3      	bls.n	800609c <_vfprintf_r+0x304>
 80060b4:	e715      	b.n	8005ee2 <_vfprintf_r+0x14a>
 80060b6:	f045 0508 	orr.w	r5, r5, #8
 80060ba:	e7b5      	b.n	8006028 <_vfprintf_r+0x290>
 80060bc:	f3af 8000 	nop.w
	...
 80060c8:	0800e450 	.word	0x0800e450
 80060cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b68      	cmp	r3, #104	@ 0x68
 80060d2:	bf01      	itttt	eq
 80060d4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80060d6:	3301      	addeq	r3, #1
 80060d8:	930c      	streq	r3, [sp, #48]	@ 0x30
 80060da:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80060de:	bf18      	it	ne
 80060e0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80060e4:	e7a0      	b.n	8006028 <_vfprintf_r+0x290>
 80060e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b6c      	cmp	r3, #108	@ 0x6c
 80060ec:	d105      	bne.n	80060fa <_vfprintf_r+0x362>
 80060ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060f0:	3301      	adds	r3, #1
 80060f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80060f4:	f045 0520 	orr.w	r5, r5, #32
 80060f8:	e796      	b.n	8006028 <_vfprintf_r+0x290>
 80060fa:	f045 0510 	orr.w	r5, r5, #16
 80060fe:	e793      	b.n	8006028 <_vfprintf_r+0x290>
 8006100:	4632      	mov	r2, r6
 8006102:	f852 3b04 	ldr.w	r3, [r2], #4
 8006106:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800610a:	2300      	movs	r3, #0
 800610c:	9207      	str	r2, [sp, #28]
 800610e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006112:	469a      	mov	sl, r3
 8006114:	f04f 0901 	mov.w	r9, #1
 8006118:	9310      	str	r3, [sp, #64]	@ 0x40
 800611a:	461f      	mov	r7, r3
 800611c:	9308      	str	r3, [sp, #32]
 800611e:	461e      	mov	r6, r3
 8006120:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8006124:	e1da      	b.n	80064dc <_vfprintf_r+0x744>
 8006126:	f045 0510 	orr.w	r5, r5, #16
 800612a:	06af      	lsls	r7, r5, #26
 800612c:	d512      	bpl.n	8006154 <_vfprintf_r+0x3bc>
 800612e:	3607      	adds	r6, #7
 8006130:	f026 0307 	bic.w	r3, r6, #7
 8006134:	461a      	mov	r2, r3
 8006136:	685f      	ldr	r7, [r3, #4]
 8006138:	f852 6b08 	ldr.w	r6, [r2], #8
 800613c:	9207      	str	r2, [sp, #28]
 800613e:	2f00      	cmp	r7, #0
 8006140:	da06      	bge.n	8006150 <_vfprintf_r+0x3b8>
 8006142:	4276      	negs	r6, r6
 8006144:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8006148:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800614c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006150:	2301      	movs	r3, #1
 8006152:	e384      	b.n	800685e <_vfprintf_r+0xac6>
 8006154:	4633      	mov	r3, r6
 8006156:	06ee      	lsls	r6, r5, #27
 8006158:	f853 7b04 	ldr.w	r7, [r3], #4
 800615c:	9307      	str	r3, [sp, #28]
 800615e:	d502      	bpl.n	8006166 <_vfprintf_r+0x3ce>
 8006160:	463e      	mov	r6, r7
 8006162:	17ff      	asrs	r7, r7, #31
 8006164:	e7eb      	b.n	800613e <_vfprintf_r+0x3a6>
 8006166:	0668      	lsls	r0, r5, #25
 8006168:	d503      	bpl.n	8006172 <_vfprintf_r+0x3da>
 800616a:	b23e      	sxth	r6, r7
 800616c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8006170:	e7e5      	b.n	800613e <_vfprintf_r+0x3a6>
 8006172:	05a9      	lsls	r1, r5, #22
 8006174:	d5f4      	bpl.n	8006160 <_vfprintf_r+0x3c8>
 8006176:	b27e      	sxtb	r6, r7
 8006178:	f347 17c0 	sbfx	r7, r7, #7, #1
 800617c:	e7df      	b.n	800613e <_vfprintf_r+0x3a6>
 800617e:	3607      	adds	r6, #7
 8006180:	f026 0307 	bic.w	r3, r6, #7
 8006184:	ecb3 7b02 	vldmia	r3!, {d7}
 8006188:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800618c:	9307      	str	r3, [sp, #28]
 800618e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006190:	931a      	str	r3, [sp, #104]	@ 0x68
 8006192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006194:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006198:	931b      	str	r3, [sp, #108]	@ 0x6c
 800619a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800619e:	4b85      	ldr	r3, [pc, #532]	@ (80063b4 <_vfprintf_r+0x61c>)
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	f7fa fcea 	bl	8000b7c <__aeabi_dcmpun>
 80061a8:	bb10      	cbnz	r0, 80061f0 <_vfprintf_r+0x458>
 80061aa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80061ae:	4b81      	ldr	r3, [pc, #516]	@ (80063b4 <_vfprintf_r+0x61c>)
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	f7fa fcc4 	bl	8000b40 <__aeabi_dcmple>
 80061b8:	b9d0      	cbnz	r0, 80061f0 <_vfprintf_r+0x458>
 80061ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80061be:	2200      	movs	r2, #0
 80061c0:	2300      	movs	r3, #0
 80061c2:	f7fa fcb3 	bl	8000b2c <__aeabi_dcmplt>
 80061c6:	b110      	cbz	r0, 80061ce <_vfprintf_r+0x436>
 80061c8:	232d      	movs	r3, #45	@ 0x2d
 80061ca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80061ce:	4a7a      	ldr	r2, [pc, #488]	@ (80063b8 <_vfprintf_r+0x620>)
 80061d0:	4b7a      	ldr	r3, [pc, #488]	@ (80063bc <_vfprintf_r+0x624>)
 80061d2:	9906      	ldr	r1, [sp, #24]
 80061d4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80061d8:	2947      	cmp	r1, #71	@ 0x47
 80061da:	bfd4      	ite	le
 80061dc:	4690      	movle	r8, r2
 80061de:	4698      	movgt	r8, r3
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	f04f 0903 	mov.w	r9, #3
 80061e8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80061ec:	f000 bff8 	b.w	80071e0 <_vfprintf_r+0x1448>
 80061f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	f7fa fcc0 	bl	8000b7c <__aeabi_dcmpun>
 80061fc:	4682      	mov	sl, r0
 80061fe:	b140      	cbz	r0, 8006212 <_vfprintf_r+0x47a>
 8006200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006202:	4a6f      	ldr	r2, [pc, #444]	@ (80063c0 <_vfprintf_r+0x628>)
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfbc      	itt	lt
 8006208:	232d      	movlt	r3, #45	@ 0x2d
 800620a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800620e:	4b6d      	ldr	r3, [pc, #436]	@ (80063c4 <_vfprintf_r+0x62c>)
 8006210:	e7df      	b.n	80061d2 <_vfprintf_r+0x43a>
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	2b61      	cmp	r3, #97	@ 0x61
 8006216:	d02e      	beq.n	8006276 <_vfprintf_r+0x4de>
 8006218:	2b41      	cmp	r3, #65	@ 0x41
 800621a:	d12e      	bne.n	800627a <_vfprintf_r+0x4e2>
 800621c:	2358      	movs	r3, #88	@ 0x58
 800621e:	2230      	movs	r2, #48	@ 0x30
 8006220:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8006224:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8006228:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800622c:	f045 0502 	orr.w	r5, r5, #2
 8006230:	f340 80ae 	ble.w	8006390 <_vfprintf_r+0x5f8>
 8006234:	9803      	ldr	r0, [sp, #12]
 8006236:	f109 0101 	add.w	r1, r9, #1
 800623a:	f7fe ff75 	bl	8005128 <_malloc_r>
 800623e:	4680      	mov	r8, r0
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 80aa 	bne.w	800639a <_vfprintf_r+0x602>
 8006246:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800624a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8006252:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8006256:	07d9      	lsls	r1, r3, #31
 8006258:	d407      	bmi.n	800626a <_vfprintf_r+0x4d2>
 800625a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800625e:	059a      	lsls	r2, r3, #22
 8006260:	d403      	bmi.n	800626a <_vfprintf_r+0x4d2>
 8006262:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8006266:	f7ff fc62 	bl	8005b2e <__retarget_lock_release_recursive>
 800626a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800626e:	065b      	lsls	r3, r3, #25
 8006270:	f57f add6 	bpl.w	8005e20 <_vfprintf_r+0x88>
 8006274:	e5d1      	b.n	8005e1a <_vfprintf_r+0x82>
 8006276:	2378      	movs	r3, #120	@ 0x78
 8006278:	e7d1      	b.n	800621e <_vfprintf_r+0x486>
 800627a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800627e:	f000 808e 	beq.w	800639e <_vfprintf_r+0x606>
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	f023 0320 	bic.w	r3, r3, #32
 8006288:	2b47      	cmp	r3, #71	@ 0x47
 800628a:	d105      	bne.n	8006298 <_vfprintf_r+0x500>
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	d102      	bne.n	8006298 <_vfprintf_r+0x500>
 8006292:	46ca      	mov	sl, r9
 8006294:	f04f 0901 	mov.w	r9, #1
 8006298:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800629c:	9311      	str	r3, [sp, #68]	@ 0x44
 800629e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da7f      	bge.n	80063a4 <_vfprintf_r+0x60c>
 80062a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062a6:	9314      	str	r3, [sp, #80]	@ 0x50
 80062a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80062ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80062b0:	232d      	movs	r3, #45	@ 0x2d
 80062b2:	931c      	str	r3, [sp, #112]	@ 0x70
 80062b4:	9b06      	ldr	r3, [sp, #24]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	2b41      	cmp	r3, #65	@ 0x41
 80062bc:	9308      	str	r3, [sp, #32]
 80062be:	f040 81e7 	bne.w	8006690 <_vfprintf_r+0x8f8>
 80062c2:	a820      	add	r0, sp, #128	@ 0x80
 80062c4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80062c8:	f003 fc6a 	bl	8009ba0 <frexp>
 80062cc:	2200      	movs	r2, #0
 80062ce:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80062d2:	ec51 0b10 	vmov	r0, r1, d0
 80062d6:	f7fa f9b7 	bl	8000648 <__aeabi_dmul>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2300      	movs	r3, #0
 80062e6:	f7fa fc17 	bl	8000b18 <__aeabi_dcmpeq>
 80062ea:	b108      	cbz	r0, 80062f0 <_vfprintf_r+0x558>
 80062ec:	2301      	movs	r3, #1
 80062ee:	9320      	str	r3, [sp, #128]	@ 0x80
 80062f0:	4a35      	ldr	r2, [pc, #212]	@ (80063c8 <_vfprintf_r+0x630>)
 80062f2:	4b36      	ldr	r3, [pc, #216]	@ (80063cc <_vfprintf_r+0x634>)
 80062f4:	9906      	ldr	r1, [sp, #24]
 80062f6:	2961      	cmp	r1, #97	@ 0x61
 80062f8:	bf18      	it	ne
 80062fa:	461a      	movne	r2, r3
 80062fc:	9210      	str	r2, [sp, #64]	@ 0x40
 80062fe:	f109 37ff 	add.w	r7, r9, #4294967295
 8006302:	4646      	mov	r6, r8
 8006304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006308:	4b31      	ldr	r3, [pc, #196]	@ (80063d0 <_vfprintf_r+0x638>)
 800630a:	2200      	movs	r2, #0
 800630c:	f7fa f99c 	bl	8000648 <__aeabi_dmul>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006318:	f7fa fc46 	bl	8000ba8 <__aeabi_d2iz>
 800631c:	9013      	str	r0, [sp, #76]	@ 0x4c
 800631e:	f7fa f929 	bl	8000574 <__aeabi_i2d>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800632a:	f7f9 ffd5 	bl	80002d8 <__aeabi_dsub>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006336:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006338:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800633a:	5c9b      	ldrb	r3, [r3, r2]
 800633c:	f806 3b01 	strb.w	r3, [r6], #1
 8006340:	1c7a      	adds	r2, r7, #1
 8006342:	d006      	beq.n	8006352 <_vfprintf_r+0x5ba>
 8006344:	1e7b      	subs	r3, r7, #1
 8006346:	931d      	str	r3, [sp, #116]	@ 0x74
 8006348:	2200      	movs	r2, #0
 800634a:	2300      	movs	r3, #0
 800634c:	f7fa fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 8006350:	b370      	cbz	r0, 80063b0 <_vfprintf_r+0x618>
 8006352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006356:	4b1f      	ldr	r3, [pc, #124]	@ (80063d4 <_vfprintf_r+0x63c>)
 8006358:	2200      	movs	r2, #0
 800635a:	f7fa fc05 	bl	8000b68 <__aeabi_dcmpgt>
 800635e:	2800      	cmp	r0, #0
 8006360:	d13a      	bne.n	80063d8 <_vfprintf_r+0x640>
 8006362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006366:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <_vfprintf_r+0x63c>)
 8006368:	2200      	movs	r2, #0
 800636a:	f7fa fbd5 	bl	8000b18 <__aeabi_dcmpeq>
 800636e:	b110      	cbz	r0, 8006376 <_vfprintf_r+0x5de>
 8006370:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006372:	07db      	lsls	r3, r3, #31
 8006374:	d430      	bmi.n	80063d8 <_vfprintf_r+0x640>
 8006376:	4633      	mov	r3, r6
 8006378:	19f1      	adds	r1, r6, r7
 800637a:	2030      	movs	r0, #48	@ 0x30
 800637c:	1aca      	subs	r2, r1, r3
 800637e:	2a00      	cmp	r2, #0
 8006380:	f280 8183 	bge.w	800668a <_vfprintf_r+0x8f2>
 8006384:	1c7b      	adds	r3, r7, #1
 8006386:	3701      	adds	r7, #1
 8006388:	bfb8      	it	lt
 800638a:	2300      	movlt	r3, #0
 800638c:	441e      	add	r6, r3
 800638e:	e037      	b.n	8006400 <_vfprintf_r+0x668>
 8006390:	f04f 0a00 	mov.w	sl, #0
 8006394:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8006398:	e77e      	b.n	8006298 <_vfprintf_r+0x500>
 800639a:	4682      	mov	sl, r0
 800639c:	e77c      	b.n	8006298 <_vfprintf_r+0x500>
 800639e:	f04f 0906 	mov.w	r9, #6
 80063a2:	e779      	b.n	8006298 <_vfprintf_r+0x500>
 80063a4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80063a8:	2300      	movs	r3, #0
 80063aa:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80063ae:	e780      	b.n	80062b2 <_vfprintf_r+0x51a>
 80063b0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80063b2:	e7a7      	b.n	8006304 <_vfprintf_r+0x56c>
 80063b4:	7fefffff 	.word	0x7fefffff
 80063b8:	0800e440 	.word	0x0800e440
 80063bc:	0800e444 	.word	0x0800e444
 80063c0:	0800e448 	.word	0x0800e448
 80063c4:	0800e44c 	.word	0x0800e44c
 80063c8:	0800e450 	.word	0x0800e450
 80063cc:	0800e461 	.word	0x0800e461
 80063d0:	40300000 	.word	0x40300000
 80063d4:	3fe00000 	.word	0x3fe00000
 80063d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063da:	9624      	str	r6, [sp, #144]	@ 0x90
 80063dc:	7bd9      	ldrb	r1, [r3, #15]
 80063de:	2030      	movs	r0, #48	@ 0x30
 80063e0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80063e2:	1e53      	subs	r3, r2, #1
 80063e4:	9324      	str	r3, [sp, #144]	@ 0x90
 80063e6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80063ea:	428b      	cmp	r3, r1
 80063ec:	f000 814a 	beq.w	8006684 <_vfprintf_r+0x8ec>
 80063f0:	2b39      	cmp	r3, #57	@ 0x39
 80063f2:	bf0b      	itete	eq
 80063f4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80063f6:	3301      	addne	r3, #1
 80063f8:	7a9b      	ldrbeq	r3, [r3, #10]
 80063fa:	b2db      	uxtbne	r3, r3
 80063fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006400:	eba6 0308 	sub.w	r3, r6, r8
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	9b08      	ldr	r3, [sp, #32]
 8006408:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800640a:	2b47      	cmp	r3, #71	@ 0x47
 800640c:	f040 8189 	bne.w	8006722 <_vfprintf_r+0x98a>
 8006410:	1cf1      	adds	r1, r6, #3
 8006412:	db02      	blt.n	800641a <_vfprintf_r+0x682>
 8006414:	45b1      	cmp	r9, r6
 8006416:	f280 81a7 	bge.w	8006768 <_vfprintf_r+0x9d0>
 800641a:	9b06      	ldr	r3, [sp, #24]
 800641c:	3b02      	subs	r3, #2
 800641e:	9306      	str	r3, [sp, #24]
 8006420:	9906      	ldr	r1, [sp, #24]
 8006422:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006426:	f021 0120 	bic.w	r1, r1, #32
 800642a:	2941      	cmp	r1, #65	@ 0x41
 800642c:	bf08      	it	eq
 800642e:	320f      	addeq	r2, #15
 8006430:	f106 33ff 	add.w	r3, r6, #4294967295
 8006434:	bf06      	itte	eq
 8006436:	b2d2      	uxtbeq	r2, r2
 8006438:	2101      	moveq	r1, #1
 800643a:	2100      	movne	r1, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	9320      	str	r3, [sp, #128]	@ 0x80
 8006440:	bfb8      	it	lt
 8006442:	f1c6 0301 	rsblt	r3, r6, #1
 8006446:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800644a:	bfb4      	ite	lt
 800644c:	222d      	movlt	r2, #45	@ 0x2d
 800644e:	222b      	movge	r2, #43	@ 0x2b
 8006450:	2b09      	cmp	r3, #9
 8006452:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8006456:	f340 817a 	ble.w	800674e <_vfprintf_r+0x9b6>
 800645a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800645e:	270a      	movs	r7, #10
 8006460:	4602      	mov	r2, r0
 8006462:	fbb3 f6f7 	udiv	r6, r3, r7
 8006466:	fb07 3116 	mls	r1, r7, r6, r3
 800646a:	3130      	adds	r1, #48	@ 0x30
 800646c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006470:	4619      	mov	r1, r3
 8006472:	2963      	cmp	r1, #99	@ 0x63
 8006474:	f100 30ff 	add.w	r0, r0, #4294967295
 8006478:	4633      	mov	r3, r6
 800647a:	dcf1      	bgt.n	8006460 <_vfprintf_r+0x6c8>
 800647c:	3330      	adds	r3, #48	@ 0x30
 800647e:	1e91      	subs	r1, r2, #2
 8006480:	f800 3c01 	strb.w	r3, [r0, #-1]
 8006484:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8006488:	460b      	mov	r3, r1
 800648a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800648e:	4283      	cmp	r3, r0
 8006490:	f0c0 8158 	bcc.w	8006744 <_vfprintf_r+0x9ac>
 8006494:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	4281      	cmp	r1, r0
 800649c:	bf88      	it	hi
 800649e:	2300      	movhi	r3, #0
 80064a0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80064a4:	441a      	add	r2, r3
 80064a6:	ab22      	add	r3, sp, #136	@ 0x88
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	9a04      	ldr	r2, [sp, #16]
 80064ac:	9318      	str	r3, [sp, #96]	@ 0x60
 80064ae:	2a01      	cmp	r2, #1
 80064b0:	eb03 0902 	add.w	r9, r3, r2
 80064b4:	dc01      	bgt.n	80064ba <_vfprintf_r+0x722>
 80064b6:	07ea      	lsls	r2, r5, #31
 80064b8:	d501      	bpl.n	80064be <_vfprintf_r+0x726>
 80064ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064bc:	4499      	add	r9, r3
 80064be:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80064c2:	2700      	movs	r7, #0
 80064c4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80064c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80064ca:	9708      	str	r7, [sp, #32]
 80064cc:	463e      	mov	r6, r7
 80064ce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f040 8191 	bne.w	80067f8 <_vfprintf_r+0xa60>
 80064d6:	2300      	movs	r3, #0
 80064d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80064da:	9310      	str	r3, [sp, #64]	@ 0x40
 80064dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064de:	454b      	cmp	r3, r9
 80064e0:	bfb8      	it	lt
 80064e2:	464b      	movlt	r3, r9
 80064e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80064e6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80064ea:	b113      	cbz	r3, 80064f2 <_vfprintf_r+0x75a>
 80064ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064ee:	3301      	adds	r3, #1
 80064f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80064f2:	f015 0302 	ands.w	r3, r5, #2
 80064f6:	931c      	str	r3, [sp, #112]	@ 0x70
 80064f8:	bf1e      	ittt	ne
 80064fa:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80064fc:	3302      	addne	r3, #2
 80064fe:	9311      	strne	r3, [sp, #68]	@ 0x44
 8006500:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8006504:	931d      	str	r3, [sp, #116]	@ 0x74
 8006506:	d122      	bne.n	800654e <_vfprintf_r+0x7b6>
 8006508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800650a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006512:	dd1c      	ble.n	800654e <_vfprintf_r+0x7b6>
 8006514:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8006516:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800651a:	2810      	cmp	r0, #16
 800651c:	489f      	ldr	r0, [pc, #636]	@ (800679c <_vfprintf_r+0xa04>)
 800651e:	6020      	str	r0, [r4, #0]
 8006520:	f102 0201 	add.w	r2, r2, #1
 8006524:	f104 0108 	add.w	r1, r4, #8
 8006528:	f300 8297 	bgt.w	8006a5a <_vfprintf_r+0xcc2>
 800652c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800652e:	6060      	str	r0, [r4, #4]
 8006530:	4403      	add	r3, r0
 8006532:	2a07      	cmp	r2, #7
 8006534:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006538:	f340 82a4 	ble.w	8006a84 <_vfprintf_r+0xcec>
 800653c:	9803      	ldr	r0, [sp, #12]
 800653e:	aa26      	add	r2, sp, #152	@ 0x98
 8006540:	4659      	mov	r1, fp
 8006542:	f000 fe95 	bl	8007270 <__sprint_r>
 8006546:	2800      	cmp	r0, #0
 8006548:	f040 85ed 	bne.w	8007126 <_vfprintf_r+0x138e>
 800654c:	ac29      	add	r4, sp, #164	@ 0xa4
 800654e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8006552:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006554:	b16a      	cbz	r2, 8006572 <_vfprintf_r+0x7da>
 8006556:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	2201      	movs	r2, #1
 800655e:	4413      	add	r3, r2
 8006560:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006562:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006564:	6062      	str	r2, [r4, #4]
 8006566:	4413      	add	r3, r2
 8006568:	2b07      	cmp	r3, #7
 800656a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800656c:	f300 828c 	bgt.w	8006a88 <_vfprintf_r+0xcf0>
 8006570:	3408      	adds	r4, #8
 8006572:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006574:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006576:	b162      	cbz	r2, 8006592 <_vfprintf_r+0x7fa>
 8006578:	aa1f      	add	r2, sp, #124	@ 0x7c
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	2202      	movs	r2, #2
 800657e:	4413      	add	r3, r2
 8006580:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006582:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006584:	6062      	str	r2, [r4, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	2b07      	cmp	r3, #7
 800658a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800658c:	f300 8286 	bgt.w	8006a9c <_vfprintf_r+0xd04>
 8006590:	3408      	adds	r4, #8
 8006592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006594:	2b80      	cmp	r3, #128	@ 0x80
 8006596:	d122      	bne.n	80065de <_vfprintf_r+0x846>
 8006598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800659a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065a2:	dd1c      	ble.n	80065de <_vfprintf_r+0x846>
 80065a4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80065a6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80065aa:	2810      	cmp	r0, #16
 80065ac:	487c      	ldr	r0, [pc, #496]	@ (80067a0 <_vfprintf_r+0xa08>)
 80065ae:	6020      	str	r0, [r4, #0]
 80065b0:	f102 0201 	add.w	r2, r2, #1
 80065b4:	f104 0108 	add.w	r1, r4, #8
 80065b8:	f300 827a 	bgt.w	8006ab0 <_vfprintf_r+0xd18>
 80065bc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80065be:	6060      	str	r0, [r4, #4]
 80065c0:	4403      	add	r3, r0
 80065c2:	2a07      	cmp	r2, #7
 80065c4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80065c8:	f340 8287 	ble.w	8006ada <_vfprintf_r+0xd42>
 80065cc:	9803      	ldr	r0, [sp, #12]
 80065ce:	aa26      	add	r2, sp, #152	@ 0x98
 80065d0:	4659      	mov	r1, fp
 80065d2:	f000 fe4d 	bl	8007270 <__sprint_r>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 85a5 	bne.w	8007126 <_vfprintf_r+0x138e>
 80065dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80065de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065e0:	eba3 0309 	sub.w	r3, r3, r9
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80065e8:	dd1c      	ble.n	8006624 <_vfprintf_r+0x88c>
 80065ea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80065ec:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80065f0:	2810      	cmp	r0, #16
 80065f2:	486b      	ldr	r0, [pc, #428]	@ (80067a0 <_vfprintf_r+0xa08>)
 80065f4:	6020      	str	r0, [r4, #0]
 80065f6:	f102 0201 	add.w	r2, r2, #1
 80065fa:	f104 0108 	add.w	r1, r4, #8
 80065fe:	f300 826e 	bgt.w	8006ade <_vfprintf_r+0xd46>
 8006602:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006604:	6060      	str	r0, [r4, #4]
 8006606:	4403      	add	r3, r0
 8006608:	2a07      	cmp	r2, #7
 800660a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800660e:	f340 827b 	ble.w	8006b08 <_vfprintf_r+0xd70>
 8006612:	9803      	ldr	r0, [sp, #12]
 8006614:	aa26      	add	r2, sp, #152	@ 0x98
 8006616:	4659      	mov	r1, fp
 8006618:	f000 fe2a 	bl	8007270 <__sprint_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 8582 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006622:	ac29      	add	r4, sp, #164	@ 0xa4
 8006624:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006626:	9310      	str	r3, [sp, #64]	@ 0x40
 8006628:	05e8      	lsls	r0, r5, #23
 800662a:	f100 8273 	bmi.w	8006b14 <_vfprintf_r+0xd7c>
 800662e:	444b      	add	r3, r9
 8006630:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006632:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006634:	3301      	adds	r3, #1
 8006636:	2b07      	cmp	r3, #7
 8006638:	e9c4 8900 	strd	r8, r9, [r4]
 800663c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800663e:	f300 82af 	bgt.w	8006ba0 <_vfprintf_r+0xe08>
 8006642:	3408      	adds	r4, #8
 8006644:	0768      	lsls	r0, r5, #29
 8006646:	f100 8550 	bmi.w	80070ea <_vfprintf_r+0x1352>
 800664a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800664e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006650:	428a      	cmp	r2, r1
 8006652:	bfac      	ite	ge
 8006654:	189b      	addge	r3, r3, r2
 8006656:	185b      	addlt	r3, r3, r1
 8006658:	930f      	str	r3, [sp, #60]	@ 0x3c
 800665a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800665c:	b13b      	cbz	r3, 800666e <_vfprintf_r+0x8d6>
 800665e:	9803      	ldr	r0, [sp, #12]
 8006660:	aa26      	add	r2, sp, #152	@ 0x98
 8006662:	4659      	mov	r1, fp
 8006664:	f000 fe04 	bl	8007270 <__sprint_r>
 8006668:	2800      	cmp	r0, #0
 800666a:	f040 855c 	bne.w	8007126 <_vfprintf_r+0x138e>
 800666e:	2300      	movs	r3, #0
 8006670:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006672:	f1ba 0f00 	cmp.w	sl, #0
 8006676:	f040 8572 	bne.w	800715e <_vfprintf_r+0x13c6>
 800667a:	9e07      	ldr	r6, [sp, #28]
 800667c:	ac29      	add	r4, sp, #164	@ 0xa4
 800667e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8006682:	e407      	b.n	8005e94 <_vfprintf_r+0xfc>
 8006684:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006688:	e6aa      	b.n	80063e0 <_vfprintf_r+0x648>
 800668a:	f803 0b01 	strb.w	r0, [r3], #1
 800668e:	e675      	b.n	800637c <_vfprintf_r+0x5e4>
 8006690:	9b08      	ldr	r3, [sp, #32]
 8006692:	2b46      	cmp	r3, #70	@ 0x46
 8006694:	d005      	beq.n	80066a2 <_vfprintf_r+0x90a>
 8006696:	2b45      	cmp	r3, #69	@ 0x45
 8006698:	d11a      	bne.n	80066d0 <_vfprintf_r+0x938>
 800669a:	f109 0601 	add.w	r6, r9, #1
 800669e:	2102      	movs	r1, #2
 80066a0:	e001      	b.n	80066a6 <_vfprintf_r+0x90e>
 80066a2:	464e      	mov	r6, r9
 80066a4:	2103      	movs	r1, #3
 80066a6:	ab24      	add	r3, sp, #144	@ 0x90
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	ab21      	add	r3, sp, #132	@ 0x84
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80066b2:	ab20      	add	r3, sp, #128	@ 0x80
 80066b4:	9803      	ldr	r0, [sp, #12]
 80066b6:	4632      	mov	r2, r6
 80066b8:	f003 fb72 	bl	8009da0 <_dtoa_r>
 80066bc:	9b08      	ldr	r3, [sp, #32]
 80066be:	2b47      	cmp	r3, #71	@ 0x47
 80066c0:	4680      	mov	r8, r0
 80066c2:	d119      	bne.n	80066f8 <_vfprintf_r+0x960>
 80066c4:	07e8      	lsls	r0, r5, #31
 80066c6:	d405      	bmi.n	80066d4 <_vfprintf_r+0x93c>
 80066c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ca:	eba3 0308 	sub.w	r3, r3, r8
 80066ce:	e699      	b.n	8006404 <_vfprintf_r+0x66c>
 80066d0:	464e      	mov	r6, r9
 80066d2:	e7e4      	b.n	800669e <_vfprintf_r+0x906>
 80066d4:	eb08 0706 	add.w	r7, r8, r6
 80066d8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	f7fa fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 80066e4:	b100      	cbz	r0, 80066e8 <_vfprintf_r+0x950>
 80066e6:	9724      	str	r7, [sp, #144]	@ 0x90
 80066e8:	2230      	movs	r2, #48	@ 0x30
 80066ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ec:	429f      	cmp	r7, r3
 80066ee:	d9eb      	bls.n	80066c8 <_vfprintf_r+0x930>
 80066f0:	1c59      	adds	r1, r3, #1
 80066f2:	9124      	str	r1, [sp, #144]	@ 0x90
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e7f8      	b.n	80066ea <_vfprintf_r+0x952>
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	2b46      	cmp	r3, #70	@ 0x46
 80066fc:	eb00 0706 	add.w	r7, r0, r6
 8006700:	d1ea      	bne.n	80066d8 <_vfprintf_r+0x940>
 8006702:	7803      	ldrb	r3, [r0, #0]
 8006704:	2b30      	cmp	r3, #48	@ 0x30
 8006706:	d109      	bne.n	800671c <_vfprintf_r+0x984>
 8006708:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	f7fa fa02 	bl	8000b18 <__aeabi_dcmpeq>
 8006714:	b910      	cbnz	r0, 800671c <_vfprintf_r+0x984>
 8006716:	f1c6 0601 	rsb	r6, r6, #1
 800671a:	9620      	str	r6, [sp, #128]	@ 0x80
 800671c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800671e:	441f      	add	r7, r3
 8006720:	e7da      	b.n	80066d8 <_vfprintf_r+0x940>
 8006722:	9b08      	ldr	r3, [sp, #32]
 8006724:	2b46      	cmp	r3, #70	@ 0x46
 8006726:	f47f ae7b 	bne.w	8006420 <_vfprintf_r+0x688>
 800672a:	f005 0301 	and.w	r3, r5, #1
 800672e:	2e00      	cmp	r6, #0
 8006730:	ea43 0309 	orr.w	r3, r3, r9
 8006734:	dd25      	ble.n	8006782 <_vfprintf_r+0x9ea>
 8006736:	b37b      	cbz	r3, 8006798 <_vfprintf_r+0xa00>
 8006738:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800673a:	18f3      	adds	r3, r6, r3
 800673c:	4499      	add	r9, r3
 800673e:	2366      	movs	r3, #102	@ 0x66
 8006740:	9306      	str	r3, [sp, #24]
 8006742:	e033      	b.n	80067ac <_vfprintf_r+0xa14>
 8006744:	f813 7b01 	ldrb.w	r7, [r3], #1
 8006748:	f806 7f01 	strb.w	r7, [r6, #1]!
 800674c:	e69f      	b.n	800648e <_vfprintf_r+0x6f6>
 800674e:	b941      	cbnz	r1, 8006762 <_vfprintf_r+0x9ca>
 8006750:	2230      	movs	r2, #48	@ 0x30
 8006752:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8006756:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800675a:	3330      	adds	r3, #48	@ 0x30
 800675c:	f802 3b01 	strb.w	r3, [r2], #1
 8006760:	e6a1      	b.n	80064a6 <_vfprintf_r+0x70e>
 8006762:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8006766:	e7f8      	b.n	800675a <_vfprintf_r+0x9c2>
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	42b3      	cmp	r3, r6
 800676c:	dd0d      	ble.n	800678a <_vfprintf_r+0x9f2>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006772:	2e00      	cmp	r6, #0
 8006774:	eb03 0902 	add.w	r9, r3, r2
 8006778:	dc0c      	bgt.n	8006794 <_vfprintf_r+0x9fc>
 800677a:	f1c6 0301 	rsb	r3, r6, #1
 800677e:	4499      	add	r9, r3
 8006780:	e008      	b.n	8006794 <_vfprintf_r+0x9fc>
 8006782:	b17b      	cbz	r3, 80067a4 <_vfprintf_r+0xa0c>
 8006784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006786:	3301      	adds	r3, #1
 8006788:	e7d8      	b.n	800673c <_vfprintf_r+0x9a4>
 800678a:	07eb      	lsls	r3, r5, #31
 800678c:	d521      	bpl.n	80067d2 <_vfprintf_r+0xa3a>
 800678e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006790:	eb06 0903 	add.w	r9, r6, r3
 8006794:	2367      	movs	r3, #103	@ 0x67
 8006796:	e7d3      	b.n	8006740 <_vfprintf_r+0x9a8>
 8006798:	46b1      	mov	r9, r6
 800679a:	e7d0      	b.n	800673e <_vfprintf_r+0x9a6>
 800679c:	0800e484 	.word	0x0800e484
 80067a0:	0800e474 	.word	0x0800e474
 80067a4:	2366      	movs	r3, #102	@ 0x66
 80067a6:	9306      	str	r3, [sp, #24]
 80067a8:	f04f 0901 	mov.w	r9, #1
 80067ac:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80067b0:	9308      	str	r3, [sp, #32]
 80067b2:	d01f      	beq.n	80067f4 <_vfprintf_r+0xa5c>
 80067b4:	2700      	movs	r7, #0
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	9708      	str	r7, [sp, #32]
 80067ba:	f77f ae88 	ble.w	80064ce <_vfprintf_r+0x736>
 80067be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2bff      	cmp	r3, #255	@ 0xff
 80067c4:	d107      	bne.n	80067d6 <_vfprintf_r+0xa3e>
 80067c6:	9b08      	ldr	r3, [sp, #32]
 80067c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067ca:	443b      	add	r3, r7
 80067cc:	fb02 9903 	mla	r9, r2, r3, r9
 80067d0:	e67d      	b.n	80064ce <_vfprintf_r+0x736>
 80067d2:	46b1      	mov	r9, r6
 80067d4:	e7de      	b.n	8006794 <_vfprintf_r+0x9fc>
 80067d6:	42b3      	cmp	r3, r6
 80067d8:	daf5      	bge.n	80067c6 <_vfprintf_r+0xa2e>
 80067da:	1af6      	subs	r6, r6, r3
 80067dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	b133      	cbz	r3, 80067f0 <_vfprintf_r+0xa58>
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	3301      	adds	r3, #1
 80067e6:	9308      	str	r3, [sp, #32]
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	3301      	adds	r3, #1
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	e7e6      	b.n	80067be <_vfprintf_r+0xa26>
 80067f0:	3701      	adds	r7, #1
 80067f2:	e7e4      	b.n	80067be <_vfprintf_r+0xa26>
 80067f4:	9f08      	ldr	r7, [sp, #32]
 80067f6:	e66a      	b.n	80064ce <_vfprintf_r+0x736>
 80067f8:	232d      	movs	r3, #45	@ 0x2d
 80067fa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80067fe:	e66a      	b.n	80064d6 <_vfprintf_r+0x73e>
 8006800:	06af      	lsls	r7, r5, #26
 8006802:	d507      	bpl.n	8006814 <_vfprintf_r+0xa7c>
 8006804:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006806:	6833      	ldr	r3, [r6, #0]
 8006808:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800680a:	17d2      	asrs	r2, r2, #31
 800680c:	e9c3 1200 	strd	r1, r2, [r3]
 8006810:	3604      	adds	r6, #4
 8006812:	e734      	b.n	800667e <_vfprintf_r+0x8e6>
 8006814:	06e8      	lsls	r0, r5, #27
 8006816:	d503      	bpl.n	8006820 <_vfprintf_r+0xa88>
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e7f7      	b.n	8006810 <_vfprintf_r+0xa78>
 8006820:	0669      	lsls	r1, r5, #25
 8006822:	d503      	bpl.n	800682c <_vfprintf_r+0xa94>
 8006824:	6833      	ldr	r3, [r6, #0]
 8006826:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e7f1      	b.n	8006810 <_vfprintf_r+0xa78>
 800682c:	05aa      	lsls	r2, r5, #22
 800682e:	d5f3      	bpl.n	8006818 <_vfprintf_r+0xa80>
 8006830:	6833      	ldr	r3, [r6, #0]
 8006832:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e7eb      	b.n	8006810 <_vfprintf_r+0xa78>
 8006838:	f045 0510 	orr.w	r5, r5, #16
 800683c:	f015 0320 	ands.w	r3, r5, #32
 8006840:	d020      	beq.n	8006884 <_vfprintf_r+0xaec>
 8006842:	3607      	adds	r6, #7
 8006844:	f026 0307 	bic.w	r3, r6, #7
 8006848:	461a      	mov	r2, r3
 800684a:	685f      	ldr	r7, [r3, #4]
 800684c:	f852 6b08 	ldr.w	r6, [r2], #8
 8006850:	9207      	str	r2, [sp, #28]
 8006852:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8006856:	2300      	movs	r3, #0
 8006858:	2200      	movs	r2, #0
 800685a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800685e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006862:	f000 8491 	beq.w	8007188 <_vfprintf_r+0x13f0>
 8006866:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800686a:	9208      	str	r2, [sp, #32]
 800686c:	ea56 0207 	orrs.w	r2, r6, r7
 8006870:	f040 848f 	bne.w	8007192 <_vfprintf_r+0x13fa>
 8006874:	f1b9 0f00 	cmp.w	r9, #0
 8006878:	f000 80db 	beq.w	8006a32 <_vfprintf_r+0xc9a>
 800687c:	2b01      	cmp	r3, #1
 800687e:	f040 848b 	bne.w	8007198 <_vfprintf_r+0x1400>
 8006882:	e083      	b.n	800698c <_vfprintf_r+0xbf4>
 8006884:	4632      	mov	r2, r6
 8006886:	f015 0710 	ands.w	r7, r5, #16
 800688a:	f852 6b04 	ldr.w	r6, [r2], #4
 800688e:	9207      	str	r2, [sp, #28]
 8006890:	d001      	beq.n	8006896 <_vfprintf_r+0xafe>
 8006892:	461f      	mov	r7, r3
 8006894:	e7dd      	b.n	8006852 <_vfprintf_r+0xaba>
 8006896:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800689a:	d001      	beq.n	80068a0 <_vfprintf_r+0xb08>
 800689c:	b2b6      	uxth	r6, r6
 800689e:	e7d8      	b.n	8006852 <_vfprintf_r+0xaba>
 80068a0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80068a4:	d0d5      	beq.n	8006852 <_vfprintf_r+0xaba>
 80068a6:	b2f6      	uxtb	r6, r6
 80068a8:	e7f3      	b.n	8006892 <_vfprintf_r+0xafa>
 80068aa:	4633      	mov	r3, r6
 80068ac:	2278      	movs	r2, #120	@ 0x78
 80068ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80068b2:	9307      	str	r3, [sp, #28]
 80068b4:	f647 0330 	movw	r3, #30768	@ 0x7830
 80068b8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80068bc:	4b93      	ldr	r3, [pc, #588]	@ (8006b0c <_vfprintf_r+0xd74>)
 80068be:	9319      	str	r3, [sp, #100]	@ 0x64
 80068c0:	2700      	movs	r7, #0
 80068c2:	f045 0502 	orr.w	r5, r5, #2
 80068c6:	2302      	movs	r3, #2
 80068c8:	9206      	str	r2, [sp, #24]
 80068ca:	e7c5      	b.n	8006858 <_vfprintf_r+0xac0>
 80068cc:	4633      	mov	r3, r6
 80068ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 80068d2:	f853 8b04 	ldr.w	r8, [r3], #4
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	f04f 0600 	mov.w	r6, #0
 80068dc:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 80068e0:	d00f      	beq.n	8006902 <_vfprintf_r+0xb6a>
 80068e2:	464a      	mov	r2, r9
 80068e4:	4631      	mov	r1, r6
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7f9 fca2 	bl	8000230 <memchr>
 80068ec:	4682      	mov	sl, r0
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f43f ac7a 	beq.w	80061e8 <_vfprintf_r+0x450>
 80068f4:	eba0 0908 	sub.w	r9, r0, r8
 80068f8:	46b2      	mov	sl, r6
 80068fa:	9610      	str	r6, [sp, #64]	@ 0x40
 80068fc:	4637      	mov	r7, r6
 80068fe:	9608      	str	r6, [sp, #32]
 8006900:	e5ec      	b.n	80064dc <_vfprintf_r+0x744>
 8006902:	4640      	mov	r0, r8
 8006904:	f7f9 fc8c 	bl	8000220 <strlen>
 8006908:	46b2      	mov	sl, r6
 800690a:	4681      	mov	r9, r0
 800690c:	e46c      	b.n	80061e8 <_vfprintf_r+0x450>
 800690e:	f045 0510 	orr.w	r5, r5, #16
 8006912:	f015 0320 	ands.w	r3, r5, #32
 8006916:	d009      	beq.n	800692c <_vfprintf_r+0xb94>
 8006918:	3607      	adds	r6, #7
 800691a:	f026 0307 	bic.w	r3, r6, #7
 800691e:	461a      	mov	r2, r3
 8006920:	685f      	ldr	r7, [r3, #4]
 8006922:	f852 6b08 	ldr.w	r6, [r2], #8
 8006926:	9207      	str	r2, [sp, #28]
 8006928:	2301      	movs	r3, #1
 800692a:	e795      	b.n	8006858 <_vfprintf_r+0xac0>
 800692c:	4632      	mov	r2, r6
 800692e:	f015 0710 	ands.w	r7, r5, #16
 8006932:	f852 6b04 	ldr.w	r6, [r2], #4
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	d001      	beq.n	800693e <_vfprintf_r+0xba6>
 800693a:	461f      	mov	r7, r3
 800693c:	e7f4      	b.n	8006928 <_vfprintf_r+0xb90>
 800693e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8006942:	d001      	beq.n	8006948 <_vfprintf_r+0xbb0>
 8006944:	b2b6      	uxth	r6, r6
 8006946:	e7ef      	b.n	8006928 <_vfprintf_r+0xb90>
 8006948:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800694c:	d0ec      	beq.n	8006928 <_vfprintf_r+0xb90>
 800694e:	b2f6      	uxtb	r6, r6
 8006950:	e7f3      	b.n	800693a <_vfprintf_r+0xba2>
 8006952:	4b6f      	ldr	r3, [pc, #444]	@ (8006b10 <_vfprintf_r+0xd78>)
 8006954:	f7ff bb33 	b.w	8005fbe <_vfprintf_r+0x226>
 8006958:	4632      	mov	r2, r6
 800695a:	f015 0710 	ands.w	r7, r5, #16
 800695e:	f852 6b04 	ldr.w	r6, [r2], #4
 8006962:	9207      	str	r2, [sp, #28]
 8006964:	d002      	beq.n	800696c <_vfprintf_r+0xbd4>
 8006966:	461f      	mov	r7, r3
 8006968:	f7ff bb36 	b.w	8005fd8 <_vfprintf_r+0x240>
 800696c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8006970:	d002      	beq.n	8006978 <_vfprintf_r+0xbe0>
 8006972:	b2b6      	uxth	r6, r6
 8006974:	f7ff bb30 	b.w	8005fd8 <_vfprintf_r+0x240>
 8006978:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800697c:	f43f ab2c 	beq.w	8005fd8 <_vfprintf_r+0x240>
 8006980:	b2f6      	uxtb	r6, r6
 8006982:	e7f0      	b.n	8006966 <_vfprintf_r+0xbce>
 8006984:	2e0a      	cmp	r6, #10
 8006986:	f177 0300 	sbcs.w	r3, r7, #0
 800698a:	d207      	bcs.n	800699c <_vfprintf_r+0xc04>
 800698c:	3630      	adds	r6, #48	@ 0x30
 800698e:	b2f6      	uxtb	r6, r6
 8006990:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8006994:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8006998:	f000 bc1a 	b.w	80071d0 <_vfprintf_r+0x1438>
 800699c:	2300      	movs	r3, #0
 800699e:	9304      	str	r3, [sp, #16]
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a6:	ad52      	add	r5, sp, #328	@ 0x148
 80069a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80069aa:	220a      	movs	r2, #10
 80069ac:	2300      	movs	r3, #0
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7fa f991 	bl	8000cd8 <__aeabi_uldivmod>
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	9011      	str	r0, [sp, #68]	@ 0x44
 80069ba:	3301      	adds	r3, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069c0:	3230      	adds	r2, #48	@ 0x30
 80069c2:	468a      	mov	sl, r1
 80069c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80069c8:	f805 2c01 	strb.w	r2, [r5, #-1]
 80069cc:	b1d3      	cbz	r3, 8006a04 <_vfprintf_r+0xc6c>
 80069ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d0:	9a04      	ldr	r2, [sp, #16]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d115      	bne.n	8006a04 <_vfprintf_r+0xc6c>
 80069d8:	2aff      	cmp	r2, #255	@ 0xff
 80069da:	d013      	beq.n	8006a04 <_vfprintf_r+0xc6c>
 80069dc:	2e0a      	cmp	r6, #10
 80069de:	f177 0300 	sbcs.w	r3, r7, #0
 80069e2:	d30f      	bcc.n	8006a04 <_vfprintf_r+0xc6c>
 80069e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80069e8:	eba8 0803 	sub.w	r8, r8, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	4640      	mov	r0, r8
 80069f0:	f003 f86e 	bl	8009ad0 <strncpy>
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	b11b      	cbz	r3, 8006a02 <_vfprintf_r+0xc6a>
 80069fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fc:	3301      	adds	r3, #1
 80069fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a00:	2300      	movs	r3, #0
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	2e0a      	cmp	r6, #10
 8006a06:	f177 0700 	sbcs.w	r7, r7, #0
 8006a0a:	f0c0 83e1 	bcc.w	80071d0 <_vfprintf_r+0x1438>
 8006a0e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006a10:	4657      	mov	r7, sl
 8006a12:	4645      	mov	r5, r8
 8006a14:	e7c9      	b.n	80069aa <_vfprintf_r+0xc12>
 8006a16:	f006 030f 	and.w	r3, r6, #15
 8006a1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a1c:	0936      	lsrs	r6, r6, #4
 8006a1e:	5cd3      	ldrb	r3, [r2, r3]
 8006a20:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006a24:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8006a28:	093f      	lsrs	r7, r7, #4
 8006a2a:	ea56 0307 	orrs.w	r3, r6, r7
 8006a2e:	d1f2      	bne.n	8006a16 <_vfprintf_r+0xc7e>
 8006a30:	e3ce      	b.n	80071d0 <_vfprintf_r+0x1438>
 8006a32:	b91b      	cbnz	r3, 8006a3c <_vfprintf_r+0xca4>
 8006a34:	07ed      	lsls	r5, r5, #31
 8006a36:	d501      	bpl.n	8006a3c <_vfprintf_r+0xca4>
 8006a38:	2630      	movs	r6, #48	@ 0x30
 8006a3a:	e7a9      	b.n	8006990 <_vfprintf_r+0xbf8>
 8006a3c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8006a40:	e3c6      	b.n	80071d0 <_vfprintf_r+0x1438>
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8390 	beq.w	800716a <_vfprintf_r+0x13d2>
 8006a4a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006a54:	9607      	str	r6, [sp, #28]
 8006a56:	f7ff bb5c 	b.w	8006112 <_vfprintf_r+0x37a>
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	4403      	add	r3, r0
 8006a5e:	2a07      	cmp	r2, #7
 8006a60:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006a64:	6060      	str	r0, [r4, #4]
 8006a66:	dd08      	ble.n	8006a7a <_vfprintf_r+0xce2>
 8006a68:	9803      	ldr	r0, [sp, #12]
 8006a6a:	aa26      	add	r2, sp, #152	@ 0x98
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	f000 fbff 	bl	8007270 <__sprint_r>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f040 8357 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006a78:	a929      	add	r1, sp, #164	@ 0xa4
 8006a7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a7c:	3b10      	subs	r3, #16
 8006a7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a80:	460c      	mov	r4, r1
 8006a82:	e547      	b.n	8006514 <_vfprintf_r+0x77c>
 8006a84:	460c      	mov	r4, r1
 8006a86:	e562      	b.n	800654e <_vfprintf_r+0x7b6>
 8006a88:	9803      	ldr	r0, [sp, #12]
 8006a8a:	aa26      	add	r2, sp, #152	@ 0x98
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	f000 fbef 	bl	8007270 <__sprint_r>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 8347 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006a98:	ac29      	add	r4, sp, #164	@ 0xa4
 8006a9a:	e56a      	b.n	8006572 <_vfprintf_r+0x7da>
 8006a9c:	9803      	ldr	r0, [sp, #12]
 8006a9e:	aa26      	add	r2, sp, #152	@ 0x98
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	f000 fbe5 	bl	8007270 <__sprint_r>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f040 833d 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006aac:	ac29      	add	r4, sp, #164	@ 0xa4
 8006aae:	e570      	b.n	8006592 <_vfprintf_r+0x7fa>
 8006ab0:	2010      	movs	r0, #16
 8006ab2:	4403      	add	r3, r0
 8006ab4:	2a07      	cmp	r2, #7
 8006ab6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006aba:	6060      	str	r0, [r4, #4]
 8006abc:	dd08      	ble.n	8006ad0 <_vfprintf_r+0xd38>
 8006abe:	9803      	ldr	r0, [sp, #12]
 8006ac0:	aa26      	add	r2, sp, #152	@ 0x98
 8006ac2:	4659      	mov	r1, fp
 8006ac4:	f000 fbd4 	bl	8007270 <__sprint_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f040 832c 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006ace:	a929      	add	r1, sp, #164	@ 0xa4
 8006ad0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ad2:	3b10      	subs	r3, #16
 8006ad4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	e564      	b.n	80065a4 <_vfprintf_r+0x80c>
 8006ada:	460c      	mov	r4, r1
 8006adc:	e57f      	b.n	80065de <_vfprintf_r+0x846>
 8006ade:	2010      	movs	r0, #16
 8006ae0:	4403      	add	r3, r0
 8006ae2:	2a07      	cmp	r2, #7
 8006ae4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006ae8:	6060      	str	r0, [r4, #4]
 8006aea:	dd08      	ble.n	8006afe <_vfprintf_r+0xd66>
 8006aec:	9803      	ldr	r0, [sp, #12]
 8006aee:	aa26      	add	r2, sp, #152	@ 0x98
 8006af0:	4659      	mov	r1, fp
 8006af2:	f000 fbbd 	bl	8007270 <__sprint_r>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f040 8315 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006afc:	a929      	add	r1, sp, #164	@ 0xa4
 8006afe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b00:	3b10      	subs	r3, #16
 8006b02:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b04:	460c      	mov	r4, r1
 8006b06:	e570      	b.n	80065ea <_vfprintf_r+0x852>
 8006b08:	460c      	mov	r4, r1
 8006b0a:	e58b      	b.n	8006624 <_vfprintf_r+0x88c>
 8006b0c:	0800e450 	.word	0x0800e450
 8006b10:	0800e461 	.word	0x0800e461
 8006b14:	9b06      	ldr	r3, [sp, #24]
 8006b16:	2b65      	cmp	r3, #101	@ 0x65
 8006b18:	f340 8245 	ble.w	8006fa6 <_vfprintf_r+0x120e>
 8006b1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b20:	2200      	movs	r2, #0
 8006b22:	2300      	movs	r3, #0
 8006b24:	f7f9 fff8 	bl	8000b18 <__aeabi_dcmpeq>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d06a      	beq.n	8006c02 <_vfprintf_r+0xe6a>
 8006b2c:	4b73      	ldr	r3, [pc, #460]	@ (8006cfc <_vfprintf_r+0xf64>)
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	2301      	movs	r3, #1
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b36:	3301      	adds	r3, #1
 8006b38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006b3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	2b07      	cmp	r3, #7
 8006b40:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006b42:	dc37      	bgt.n	8006bb4 <_vfprintf_r+0xe1c>
 8006b44:	3408      	adds	r4, #8
 8006b46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b48:	9a04      	ldr	r2, [sp, #16]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	db02      	blt.n	8006b54 <_vfprintf_r+0xdbc>
 8006b4e:	07e9      	lsls	r1, r5, #31
 8006b50:	f57f ad78 	bpl.w	8006644 <_vfprintf_r+0x8ac>
 8006b54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006b60:	4413      	add	r3, r2
 8006b62:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006b64:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006b66:	3301      	adds	r3, #1
 8006b68:	2b07      	cmp	r3, #7
 8006b6a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006b6c:	dc2c      	bgt.n	8006bc8 <_vfprintf_r+0xe30>
 8006b6e:	3408      	adds	r4, #8
 8006b70:	9b04      	ldr	r3, [sp, #16]
 8006b72:	1e5e      	subs	r6, r3, #1
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	f77f ad65 	ble.w	8006644 <_vfprintf_r+0x8ac>
 8006b7a:	4f61      	ldr	r7, [pc, #388]	@ (8006d00 <_vfprintf_r+0xf68>)
 8006b7c:	f04f 0810 	mov.w	r8, #16
 8006b80:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006b84:	2e10      	cmp	r6, #16
 8006b86:	f103 0301 	add.w	r3, r3, #1
 8006b8a:	f104 0108 	add.w	r1, r4, #8
 8006b8e:	6027      	str	r7, [r4, #0]
 8006b90:	dc24      	bgt.n	8006bdc <_vfprintf_r+0xe44>
 8006b92:	6066      	str	r6, [r4, #4]
 8006b94:	2b07      	cmp	r3, #7
 8006b96:	4416      	add	r6, r2
 8006b98:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8006b9c:	f340 82a2 	ble.w	80070e4 <_vfprintf_r+0x134c>
 8006ba0:	9803      	ldr	r0, [sp, #12]
 8006ba2:	aa26      	add	r2, sp, #152	@ 0x98
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	f000 fb63 	bl	8007270 <__sprint_r>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f040 82bb 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006bb0:	ac29      	add	r4, sp, #164	@ 0xa4
 8006bb2:	e547      	b.n	8006644 <_vfprintf_r+0x8ac>
 8006bb4:	9803      	ldr	r0, [sp, #12]
 8006bb6:	aa26      	add	r2, sp, #152	@ 0x98
 8006bb8:	4659      	mov	r1, fp
 8006bba:	f000 fb59 	bl	8007270 <__sprint_r>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f040 82b1 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006bc4:	ac29      	add	r4, sp, #164	@ 0xa4
 8006bc6:	e7be      	b.n	8006b46 <_vfprintf_r+0xdae>
 8006bc8:	9803      	ldr	r0, [sp, #12]
 8006bca:	aa26      	add	r2, sp, #152	@ 0x98
 8006bcc:	4659      	mov	r1, fp
 8006bce:	f000 fb4f 	bl	8007270 <__sprint_r>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f040 82a7 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006bd8:	ac29      	add	r4, sp, #164	@ 0xa4
 8006bda:	e7c9      	b.n	8006b70 <_vfprintf_r+0xdd8>
 8006bdc:	3210      	adds	r2, #16
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006be4:	f8c4 8004 	str.w	r8, [r4, #4]
 8006be8:	dd08      	ble.n	8006bfc <_vfprintf_r+0xe64>
 8006bea:	9803      	ldr	r0, [sp, #12]
 8006bec:	aa26      	add	r2, sp, #152	@ 0x98
 8006bee:	4659      	mov	r1, fp
 8006bf0:	f000 fb3e 	bl	8007270 <__sprint_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 8296 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006bfa:	a929      	add	r1, sp, #164	@ 0xa4
 8006bfc:	3e10      	subs	r6, #16
 8006bfe:	460c      	mov	r4, r1
 8006c00:	e7be      	b.n	8006b80 <_vfprintf_r+0xde8>
 8006c02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dc7d      	bgt.n	8006d04 <_vfprintf_r+0xf6c>
 8006c08:	4b3c      	ldr	r3, [pc, #240]	@ (8006cfc <_vfprintf_r+0xf64>)
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	6063      	str	r3, [r4, #4]
 8006c10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c12:	3301      	adds	r3, #1
 8006c14:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006c16:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006c18:	3301      	adds	r3, #1
 8006c1a:	2b07      	cmp	r3, #7
 8006c1c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006c1e:	dc46      	bgt.n	8006cae <_vfprintf_r+0xf16>
 8006c20:	3408      	adds	r4, #8
 8006c22:	9904      	ldr	r1, [sp, #16]
 8006c24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c26:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	f005 0101 	and.w	r1, r5, #1
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	f43f ad08 	beq.w	8006644 <_vfprintf_r+0x8ac>
 8006c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006c40:	9228      	str	r2, [sp, #160]	@ 0xa0
 8006c42:	3301      	adds	r3, #1
 8006c44:	2b07      	cmp	r3, #7
 8006c46:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006c48:	dc3b      	bgt.n	8006cc2 <_vfprintf_r+0xf2a>
 8006c4a:	f104 0308 	add.w	r3, r4, #8
 8006c4e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	da1b      	bge.n	8006c8c <_vfprintf_r+0xef4>
 8006c54:	4f2a      	ldr	r7, [pc, #168]	@ (8006d00 <_vfprintf_r+0xf68>)
 8006c56:	4276      	negs	r6, r6
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2410      	movs	r4, #16
 8006c5c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8006c60:	2e10      	cmp	r6, #16
 8006c62:	f101 0101 	add.w	r1, r1, #1
 8006c66:	f103 0308 	add.w	r3, r3, #8
 8006c6a:	6017      	str	r7, [r2, #0]
 8006c6c:	dc33      	bgt.n	8006cd6 <_vfprintf_r+0xf3e>
 8006c6e:	6056      	str	r6, [r2, #4]
 8006c70:	2907      	cmp	r1, #7
 8006c72:	4406      	add	r6, r0
 8006c74:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8006c78:	dd08      	ble.n	8006c8c <_vfprintf_r+0xef4>
 8006c7a:	9803      	ldr	r0, [sp, #12]
 8006c7c:	aa26      	add	r2, sp, #152	@ 0x98
 8006c7e:	4659      	mov	r1, fp
 8006c80:	f000 faf6 	bl	8007270 <__sprint_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f040 824e 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006c8a:	ab29      	add	r3, sp, #164	@ 0xa4
 8006c8c:	9a04      	ldr	r2, [sp, #16]
 8006c8e:	9904      	ldr	r1, [sp, #16]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8006c94:	f8c3 8000 	str.w	r8, [r3]
 8006c98:	440a      	add	r2, r1
 8006c9a:	9228      	str	r2, [sp, #160]	@ 0xa0
 8006c9c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006c9e:	3201      	adds	r2, #1
 8006ca0:	2a07      	cmp	r2, #7
 8006ca2:	9227      	str	r2, [sp, #156]	@ 0x9c
 8006ca4:	f73f af7c 	bgt.w	8006ba0 <_vfprintf_r+0xe08>
 8006ca8:	f103 0408 	add.w	r4, r3, #8
 8006cac:	e4ca      	b.n	8006644 <_vfprintf_r+0x8ac>
 8006cae:	9803      	ldr	r0, [sp, #12]
 8006cb0:	aa26      	add	r2, sp, #152	@ 0x98
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	f000 fadc 	bl	8007270 <__sprint_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f040 8234 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006cbe:	ac29      	add	r4, sp, #164	@ 0xa4
 8006cc0:	e7af      	b.n	8006c22 <_vfprintf_r+0xe8a>
 8006cc2:	9803      	ldr	r0, [sp, #12]
 8006cc4:	aa26      	add	r2, sp, #152	@ 0x98
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	f000 fad2 	bl	8007270 <__sprint_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	f040 822a 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006cd2:	ab29      	add	r3, sp, #164	@ 0xa4
 8006cd4:	e7bb      	b.n	8006c4e <_vfprintf_r+0xeb6>
 8006cd6:	3010      	adds	r0, #16
 8006cd8:	2907      	cmp	r1, #7
 8006cda:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8006cde:	6054      	str	r4, [r2, #4]
 8006ce0:	dd08      	ble.n	8006cf4 <_vfprintf_r+0xf5c>
 8006ce2:	9803      	ldr	r0, [sp, #12]
 8006ce4:	aa26      	add	r2, sp, #152	@ 0x98
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	f000 fac2 	bl	8007270 <__sprint_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f040 821a 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006cf2:	ab29      	add	r3, sp, #164	@ 0xa4
 8006cf4:	3e10      	subs	r6, #16
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	e7b0      	b.n	8006c5c <_vfprintf_r+0xec4>
 8006cfa:	bf00      	nop
 8006cfc:	0800e472 	.word	0x0800e472
 8006d00:	0800e474 	.word	0x0800e474
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	4443      	add	r3, r8
 8006d08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	42b3      	cmp	r3, r6
 8006d0e:	bfa8      	it	ge
 8006d10:	4633      	movge	r3, r6
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	4699      	mov	r9, r3
 8006d16:	dd0b      	ble.n	8006d30 <_vfprintf_r+0xf98>
 8006d18:	e9c4 8300 	strd	r8, r3, [r4]
 8006d1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d1e:	444b      	add	r3, r9
 8006d20:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006d22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006d24:	3301      	adds	r3, #1
 8006d26:	2b07      	cmp	r3, #7
 8006d28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006d2a:	f300 8089 	bgt.w	8006e40 <_vfprintf_r+0x10a8>
 8006d2e:	3408      	adds	r4, #8
 8006d30:	f1b9 0f00 	cmp.w	r9, #0
 8006d34:	bfac      	ite	ge
 8006d36:	eba6 0309 	subge.w	r3, r6, r9
 8006d3a:	4633      	movlt	r3, r6
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	9306      	str	r3, [sp, #24]
 8006d40:	dd1c      	ble.n	8006d7c <_vfprintf_r+0xfe4>
 8006d42:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 80070a8 <_vfprintf_r+0x1310>
 8006d46:	9806      	ldr	r0, [sp, #24]
 8006d48:	f8c4 9000 	str.w	r9, [r4]
 8006d4c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8006d50:	2810      	cmp	r0, #16
 8006d52:	f102 0201 	add.w	r2, r2, #1
 8006d56:	f104 0108 	add.w	r1, r4, #8
 8006d5a:	dc7b      	bgt.n	8006e54 <_vfprintf_r+0x10bc>
 8006d5c:	4403      	add	r3, r0
 8006d5e:	2a07      	cmp	r2, #7
 8006d60:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006d64:	6060      	str	r0, [r4, #4]
 8006d66:	f340 808a 	ble.w	8006e7e <_vfprintf_r+0x10e6>
 8006d6a:	9803      	ldr	r0, [sp, #12]
 8006d6c:	aa26      	add	r2, sp, #152	@ 0x98
 8006d6e:	4659      	mov	r1, fp
 8006d70:	f000 fa7e 	bl	8007270 <__sprint_r>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f040 81d6 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006d7a:	ac29      	add	r4, sp, #164	@ 0xa4
 8006d7c:	056a      	lsls	r2, r5, #21
 8006d7e:	44b0      	add	r8, r6
 8006d80:	d508      	bpl.n	8006d94 <_vfprintf_r+0xffc>
 8006d82:	9b08      	ldr	r3, [sp, #32]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d17c      	bne.n	8006e82 <_vfprintf_r+0x10ea>
 8006d88:	2f00      	cmp	r7, #0
 8006d8a:	d17c      	bne.n	8006e86 <_vfprintf_r+0x10ee>
 8006d8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d8e:	4598      	cmp	r8, r3
 8006d90:	bf28      	it	cs
 8006d92:	4698      	movcs	r8, r3
 8006d94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d96:	9a04      	ldr	r2, [sp, #16]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	db01      	blt.n	8006da0 <_vfprintf_r+0x1008>
 8006d9c:	07eb      	lsls	r3, r5, #31
 8006d9e:	d50e      	bpl.n	8006dbe <_vfprintf_r+0x1026>
 8006da0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006dac:	4413      	add	r3, r2
 8006dae:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006db0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006db2:	3301      	adds	r3, #1
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006db8:	f300 80e1 	bgt.w	8006f7e <_vfprintf_r+0x11e6>
 8006dbc:	3408      	adds	r4, #8
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8006dc2:	1bdf      	subs	r7, r3, r7
 8006dc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dc6:	eba3 0308 	sub.w	r3, r3, r8
 8006dca:	429f      	cmp	r7, r3
 8006dcc:	bfa8      	it	ge
 8006dce:	461f      	movge	r7, r3
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006dd4:	dd0a      	ble.n	8006dec <_vfprintf_r+0x1054>
 8006dd6:	443b      	add	r3, r7
 8006dd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006dda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006ddc:	3301      	adds	r3, #1
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	e9c4 8700 	strd	r8, r7, [r4]
 8006de4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006de6:	f300 80d4 	bgt.w	8006f92 <_vfprintf_r+0x11fa>
 8006dea:	3408      	adds	r4, #8
 8006dec:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	eba3 0606 	sub.w	r6, r3, r6
 8006df6:	bfa8      	it	ge
 8006df8:	1bf6      	subge	r6, r6, r7
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	f77f ac22 	ble.w	8006644 <_vfprintf_r+0x8ac>
 8006e00:	4fa9      	ldr	r7, [pc, #676]	@ (80070a8 <_vfprintf_r+0x1310>)
 8006e02:	f04f 0810 	mov.w	r8, #16
 8006e06:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006e0a:	2e10      	cmp	r6, #16
 8006e0c:	f103 0301 	add.w	r3, r3, #1
 8006e10:	f104 0108 	add.w	r1, r4, #8
 8006e14:	6027      	str	r7, [r4, #0]
 8006e16:	f77f aebc 	ble.w	8006b92 <_vfprintf_r+0xdfa>
 8006e1a:	3210      	adds	r2, #16
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006e22:	f8c4 8004 	str.w	r8, [r4, #4]
 8006e26:	dd08      	ble.n	8006e3a <_vfprintf_r+0x10a2>
 8006e28:	9803      	ldr	r0, [sp, #12]
 8006e2a:	aa26      	add	r2, sp, #152	@ 0x98
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f000 fa1f 	bl	8007270 <__sprint_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f040 8177 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006e38:	a929      	add	r1, sp, #164	@ 0xa4
 8006e3a:	3e10      	subs	r6, #16
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	e7e2      	b.n	8006e06 <_vfprintf_r+0x106e>
 8006e40:	9803      	ldr	r0, [sp, #12]
 8006e42:	aa26      	add	r2, sp, #152	@ 0x98
 8006e44:	4659      	mov	r1, fp
 8006e46:	f000 fa13 	bl	8007270 <__sprint_r>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f040 816b 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006e50:	ac29      	add	r4, sp, #164	@ 0xa4
 8006e52:	e76d      	b.n	8006d30 <_vfprintf_r+0xf98>
 8006e54:	2010      	movs	r0, #16
 8006e56:	4403      	add	r3, r0
 8006e58:	2a07      	cmp	r2, #7
 8006e5a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006e5e:	6060      	str	r0, [r4, #4]
 8006e60:	dd08      	ble.n	8006e74 <_vfprintf_r+0x10dc>
 8006e62:	9803      	ldr	r0, [sp, #12]
 8006e64:	aa26      	add	r2, sp, #152	@ 0x98
 8006e66:	4659      	mov	r1, fp
 8006e68:	f000 fa02 	bl	8007270 <__sprint_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 815a 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006e72:	a929      	add	r1, sp, #164	@ 0xa4
 8006e74:	9b06      	ldr	r3, [sp, #24]
 8006e76:	3b10      	subs	r3, #16
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	e763      	b.n	8006d46 <_vfprintf_r+0xfae>
 8006e7e:	460c      	mov	r4, r1
 8006e80:	e77c      	b.n	8006d7c <_vfprintf_r+0xfe4>
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	d04b      	beq.n	8006f1e <_vfprintf_r+0x1186>
 8006e86:	3f01      	subs	r7, #1
 8006e88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e8e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e90:	6063      	str	r3, [r4, #4]
 8006e92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006e94:	4413      	add	r3, r2
 8006e96:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006e98:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	2b07      	cmp	r3, #7
 8006e9e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006ea0:	dc44      	bgt.n	8006f2c <_vfprintf_r+0x1194>
 8006ea2:	3408      	adds	r4, #8
 8006ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea6:	f893 9000 	ldrb.w	r9, [r3]
 8006eaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006eac:	eba3 0308 	sub.w	r3, r3, r8
 8006eb0:	4599      	cmp	r9, r3
 8006eb2:	bfa8      	it	ge
 8006eb4:	4699      	movge	r9, r3
 8006eb6:	f1b9 0f00 	cmp.w	r9, #0
 8006eba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006ebc:	dd09      	ble.n	8006ed2 <_vfprintf_r+0x113a>
 8006ebe:	444b      	add	r3, r9
 8006ec0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006ec2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	2b07      	cmp	r3, #7
 8006ec8:	e9c4 8900 	strd	r8, r9, [r4]
 8006ecc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006ece:	dc37      	bgt.n	8006f40 <_vfprintf_r+0x11a8>
 8006ed0:	3408      	adds	r4, #8
 8006ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed4:	781e      	ldrb	r6, [r3, #0]
 8006ed6:	f1b9 0f00 	cmp.w	r9, #0
 8006eda:	bfa8      	it	ge
 8006edc:	eba6 0609 	subge.w	r6, r6, r9
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	dd18      	ble.n	8006f16 <_vfprintf_r+0x117e>
 8006ee4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006ee8:	486f      	ldr	r0, [pc, #444]	@ (80070a8 <_vfprintf_r+0x1310>)
 8006eea:	6020      	str	r0, [r4, #0]
 8006eec:	2e10      	cmp	r6, #16
 8006eee:	f103 0301 	add.w	r3, r3, #1
 8006ef2:	f104 0108 	add.w	r1, r4, #8
 8006ef6:	dc2d      	bgt.n	8006f54 <_vfprintf_r+0x11bc>
 8006ef8:	6066      	str	r6, [r4, #4]
 8006efa:	2b07      	cmp	r3, #7
 8006efc:	4416      	add	r6, r2
 8006efe:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8006f02:	dd3a      	ble.n	8006f7a <_vfprintf_r+0x11e2>
 8006f04:	9803      	ldr	r0, [sp, #12]
 8006f06:	aa26      	add	r2, sp, #152	@ 0x98
 8006f08:	4659      	mov	r1, fp
 8006f0a:	f000 f9b1 	bl	8007270 <__sprint_r>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f040 8109 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006f14:	ac29      	add	r4, sp, #164	@ 0xa4
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4498      	add	r8, r3
 8006f1c:	e731      	b.n	8006d82 <_vfprintf_r+0xfea>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f20:	3b01      	subs	r3, #1
 8006f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f24:	9b08      	ldr	r3, [sp, #32]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	9308      	str	r3, [sp, #32]
 8006f2a:	e7ad      	b.n	8006e88 <_vfprintf_r+0x10f0>
 8006f2c:	9803      	ldr	r0, [sp, #12]
 8006f2e:	aa26      	add	r2, sp, #152	@ 0x98
 8006f30:	4659      	mov	r1, fp
 8006f32:	f000 f99d 	bl	8007270 <__sprint_r>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f040 80f5 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006f3c:	ac29      	add	r4, sp, #164	@ 0xa4
 8006f3e:	e7b1      	b.n	8006ea4 <_vfprintf_r+0x110c>
 8006f40:	9803      	ldr	r0, [sp, #12]
 8006f42:	aa26      	add	r2, sp, #152	@ 0x98
 8006f44:	4659      	mov	r1, fp
 8006f46:	f000 f993 	bl	8007270 <__sprint_r>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f040 80eb 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006f50:	ac29      	add	r4, sp, #164	@ 0xa4
 8006f52:	e7be      	b.n	8006ed2 <_vfprintf_r+0x113a>
 8006f54:	2010      	movs	r0, #16
 8006f56:	4402      	add	r2, r0
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006f5e:	6060      	str	r0, [r4, #4]
 8006f60:	dd08      	ble.n	8006f74 <_vfprintf_r+0x11dc>
 8006f62:	9803      	ldr	r0, [sp, #12]
 8006f64:	aa26      	add	r2, sp, #152	@ 0x98
 8006f66:	4659      	mov	r1, fp
 8006f68:	f000 f982 	bl	8007270 <__sprint_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f040 80da 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006f72:	a929      	add	r1, sp, #164	@ 0xa4
 8006f74:	3e10      	subs	r6, #16
 8006f76:	460c      	mov	r4, r1
 8006f78:	e7b4      	b.n	8006ee4 <_vfprintf_r+0x114c>
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	e7cb      	b.n	8006f16 <_vfprintf_r+0x117e>
 8006f7e:	9803      	ldr	r0, [sp, #12]
 8006f80:	aa26      	add	r2, sp, #152	@ 0x98
 8006f82:	4659      	mov	r1, fp
 8006f84:	f000 f974 	bl	8007270 <__sprint_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f040 80cc 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006f8e:	ac29      	add	r4, sp, #164	@ 0xa4
 8006f90:	e715      	b.n	8006dbe <_vfprintf_r+0x1026>
 8006f92:	9803      	ldr	r0, [sp, #12]
 8006f94:	aa26      	add	r2, sp, #152	@ 0x98
 8006f96:	4659      	mov	r1, fp
 8006f98:	f000 f96a 	bl	8007270 <__sprint_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f040 80c2 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006fa2:	ac29      	add	r4, sp, #164	@ 0xa4
 8006fa4:	e722      	b.n	8006dec <_vfprintf_r+0x1054>
 8006fa6:	9904      	ldr	r1, [sp, #16]
 8006fa8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006faa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006fac:	2901      	cmp	r1, #1
 8006fae:	f103 0301 	add.w	r3, r3, #1
 8006fb2:	f102 0201 	add.w	r2, r2, #1
 8006fb6:	f104 0608 	add.w	r6, r4, #8
 8006fba:	dc02      	bgt.n	8006fc2 <_vfprintf_r+0x122a>
 8006fbc:	07ef      	lsls	r7, r5, #31
 8006fbe:	f140 8086 	bpl.w	80070ce <_vfprintf_r+0x1336>
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	2a07      	cmp	r2, #7
 8006fc6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006fca:	f8c4 8000 	str.w	r8, [r4]
 8006fce:	6061      	str	r1, [r4, #4]
 8006fd0:	dd08      	ble.n	8006fe4 <_vfprintf_r+0x124c>
 8006fd2:	9803      	ldr	r0, [sp, #12]
 8006fd4:	aa26      	add	r2, sp, #152	@ 0x98
 8006fd6:	4659      	mov	r1, fp
 8006fd8:	f000 f94a 	bl	8007270 <__sprint_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f040 80a2 	bne.w	8007126 <_vfprintf_r+0x138e>
 8006fe2:	ae29      	add	r6, sp, #164	@ 0xa4
 8006fe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fe6:	6033      	str	r3, [r6, #0]
 8006fe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fec:	6073      	str	r3, [r6, #4]
 8006fee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006ff0:	4413      	add	r3, r2
 8006ff2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006ff4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	2b07      	cmp	r3, #7
 8006ffa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006ffc:	dc33      	bgt.n	8007066 <_vfprintf_r+0x12ce>
 8006ffe:	3608      	adds	r6, #8
 8007000:	9b04      	ldr	r3, [sp, #16]
 8007002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007006:	1e5c      	subs	r4, r3, #1
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8007010:	f7f9 fd82 	bl	8000b18 <__aeabi_dcmpeq>
 8007014:	2800      	cmp	r0, #0
 8007016:	d12f      	bne.n	8007078 <_vfprintf_r+0x12e0>
 8007018:	f108 0201 	add.w	r2, r8, #1
 800701c:	e9c6 2400 	strd	r2, r4, [r6]
 8007020:	9a04      	ldr	r2, [sp, #16]
 8007022:	f109 0301 	add.w	r3, r9, #1
 8007026:	3f01      	subs	r7, #1
 8007028:	4417      	add	r7, r2
 800702a:	2b07      	cmp	r3, #7
 800702c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8007030:	dd56      	ble.n	80070e0 <_vfprintf_r+0x1348>
 8007032:	9803      	ldr	r0, [sp, #12]
 8007034:	aa26      	add	r2, sp, #152	@ 0x98
 8007036:	4659      	mov	r1, fp
 8007038:	f000 f91a 	bl	8007270 <__sprint_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	d172      	bne.n	8007126 <_vfprintf_r+0x138e>
 8007040:	ae29      	add	r6, sp, #164	@ 0xa4
 8007042:	ab22      	add	r3, sp, #136	@ 0x88
 8007044:	6033      	str	r3, [r6, #0]
 8007046:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007048:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800704a:	6073      	str	r3, [r6, #4]
 800704c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800704e:	4413      	add	r3, r2
 8007050:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007052:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007054:	3301      	adds	r3, #1
 8007056:	2b07      	cmp	r3, #7
 8007058:	9327      	str	r3, [sp, #156]	@ 0x9c
 800705a:	f73f ada1 	bgt.w	8006ba0 <_vfprintf_r+0xe08>
 800705e:	f106 0408 	add.w	r4, r6, #8
 8007062:	f7ff baef 	b.w	8006644 <_vfprintf_r+0x8ac>
 8007066:	9803      	ldr	r0, [sp, #12]
 8007068:	aa26      	add	r2, sp, #152	@ 0x98
 800706a:	4659      	mov	r1, fp
 800706c:	f000 f900 	bl	8007270 <__sprint_r>
 8007070:	2800      	cmp	r0, #0
 8007072:	d158      	bne.n	8007126 <_vfprintf_r+0x138e>
 8007074:	ae29      	add	r6, sp, #164	@ 0xa4
 8007076:	e7c3      	b.n	8007000 <_vfprintf_r+0x1268>
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	2b01      	cmp	r3, #1
 800707c:	dde1      	ble.n	8007042 <_vfprintf_r+0x12aa>
 800707e:	4f0a      	ldr	r7, [pc, #40]	@ (80070a8 <_vfprintf_r+0x1310>)
 8007080:	f04f 0810 	mov.w	r8, #16
 8007084:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8007088:	2c10      	cmp	r4, #16
 800708a:	f103 0301 	add.w	r3, r3, #1
 800708e:	f106 0108 	add.w	r1, r6, #8
 8007092:	6037      	str	r7, [r6, #0]
 8007094:	dc0a      	bgt.n	80070ac <_vfprintf_r+0x1314>
 8007096:	6074      	str	r4, [r6, #4]
 8007098:	2b07      	cmp	r3, #7
 800709a:	4414      	add	r4, r2
 800709c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80070a0:	dcc7      	bgt.n	8007032 <_vfprintf_r+0x129a>
 80070a2:	460e      	mov	r6, r1
 80070a4:	e7cd      	b.n	8007042 <_vfprintf_r+0x12aa>
 80070a6:	bf00      	nop
 80070a8:	0800e474 	.word	0x0800e474
 80070ac:	3210      	adds	r2, #16
 80070ae:	2b07      	cmp	r3, #7
 80070b0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80070b4:	f8c6 8004 	str.w	r8, [r6, #4]
 80070b8:	dd06      	ble.n	80070c8 <_vfprintf_r+0x1330>
 80070ba:	9803      	ldr	r0, [sp, #12]
 80070bc:	aa26      	add	r2, sp, #152	@ 0x98
 80070be:	4659      	mov	r1, fp
 80070c0:	f000 f8d6 	bl	8007270 <__sprint_r>
 80070c4:	bb78      	cbnz	r0, 8007126 <_vfprintf_r+0x138e>
 80070c6:	a929      	add	r1, sp, #164	@ 0xa4
 80070c8:	3c10      	subs	r4, #16
 80070ca:	460e      	mov	r6, r1
 80070cc:	e7da      	b.n	8007084 <_vfprintf_r+0x12ec>
 80070ce:	2101      	movs	r1, #1
 80070d0:	2a07      	cmp	r2, #7
 80070d2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80070d6:	f8c4 8000 	str.w	r8, [r4]
 80070da:	6061      	str	r1, [r4, #4]
 80070dc:	ddb1      	ble.n	8007042 <_vfprintf_r+0x12aa>
 80070de:	e7a8      	b.n	8007032 <_vfprintf_r+0x129a>
 80070e0:	3608      	adds	r6, #8
 80070e2:	e7ae      	b.n	8007042 <_vfprintf_r+0x12aa>
 80070e4:	460c      	mov	r4, r1
 80070e6:	f7ff baad 	b.w	8006644 <_vfprintf_r+0x8ac>
 80070ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070ee:	1a9d      	subs	r5, r3, r2
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	f77f aaaa 	ble.w	800664a <_vfprintf_r+0x8b2>
 80070f6:	4e3d      	ldr	r6, [pc, #244]	@ (80071ec <_vfprintf_r+0x1454>)
 80070f8:	2710      	movs	r7, #16
 80070fa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80070fe:	2d10      	cmp	r5, #16
 8007100:	f103 0301 	add.w	r3, r3, #1
 8007104:	6026      	str	r6, [r4, #0]
 8007106:	dc18      	bgt.n	800713a <_vfprintf_r+0x13a2>
 8007108:	6065      	str	r5, [r4, #4]
 800710a:	2b07      	cmp	r3, #7
 800710c:	4415      	add	r5, r2
 800710e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8007112:	f77f aa9a 	ble.w	800664a <_vfprintf_r+0x8b2>
 8007116:	9803      	ldr	r0, [sp, #12]
 8007118:	aa26      	add	r2, sp, #152	@ 0x98
 800711a:	4659      	mov	r1, fp
 800711c:	f000 f8a8 	bl	8007270 <__sprint_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	f43f aa92 	beq.w	800664a <_vfprintf_r+0x8b2>
 8007126:	f1ba 0f00 	cmp.w	sl, #0
 800712a:	f43f a892 	beq.w	8006252 <_vfprintf_r+0x4ba>
 800712e:	9803      	ldr	r0, [sp, #12]
 8007130:	4651      	mov	r1, sl
 8007132:	f7fe fd6f 	bl	8005c14 <_free_r>
 8007136:	f7ff b88c 	b.w	8006252 <_vfprintf_r+0x4ba>
 800713a:	3210      	adds	r2, #16
 800713c:	2b07      	cmp	r3, #7
 800713e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8007142:	6067      	str	r7, [r4, #4]
 8007144:	dc02      	bgt.n	800714c <_vfprintf_r+0x13b4>
 8007146:	3408      	adds	r4, #8
 8007148:	3d10      	subs	r5, #16
 800714a:	e7d6      	b.n	80070fa <_vfprintf_r+0x1362>
 800714c:	9803      	ldr	r0, [sp, #12]
 800714e:	aa26      	add	r2, sp, #152	@ 0x98
 8007150:	4659      	mov	r1, fp
 8007152:	f000 f88d 	bl	8007270 <__sprint_r>
 8007156:	2800      	cmp	r0, #0
 8007158:	d1e5      	bne.n	8007126 <_vfprintf_r+0x138e>
 800715a:	ac29      	add	r4, sp, #164	@ 0xa4
 800715c:	e7f4      	b.n	8007148 <_vfprintf_r+0x13b0>
 800715e:	9803      	ldr	r0, [sp, #12]
 8007160:	4651      	mov	r1, sl
 8007162:	f7fe fd57 	bl	8005c14 <_free_r>
 8007166:	f7ff ba88 	b.w	800667a <_vfprintf_r+0x8e2>
 800716a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800716c:	b91b      	cbnz	r3, 8007176 <_vfprintf_r+0x13de>
 800716e:	2300      	movs	r3, #0
 8007170:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007172:	f7ff b86e 	b.w	8006252 <_vfprintf_r+0x4ba>
 8007176:	9803      	ldr	r0, [sp, #12]
 8007178:	aa26      	add	r2, sp, #152	@ 0x98
 800717a:	4659      	mov	r1, fp
 800717c:	f000 f878 	bl	8007270 <__sprint_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d0f4      	beq.n	800716e <_vfprintf_r+0x13d6>
 8007184:	f7ff b865 	b.w	8006252 <_vfprintf_r+0x4ba>
 8007188:	ea56 0207 	orrs.w	r2, r6, r7
 800718c:	9508      	str	r5, [sp, #32]
 800718e:	f43f ab75 	beq.w	800687c <_vfprintf_r+0xae4>
 8007192:	2b01      	cmp	r3, #1
 8007194:	f43f abf6 	beq.w	8006984 <_vfprintf_r+0xbec>
 8007198:	2b02      	cmp	r3, #2
 800719a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 800719e:	f43f ac3a 	beq.w	8006a16 <_vfprintf_r+0xc7e>
 80071a2:	f006 0307 	and.w	r3, r6, #7
 80071a6:	08f6      	lsrs	r6, r6, #3
 80071a8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80071ac:	08ff      	lsrs	r7, r7, #3
 80071ae:	3330      	adds	r3, #48	@ 0x30
 80071b0:	ea56 0107 	orrs.w	r1, r6, r7
 80071b4:	4642      	mov	r2, r8
 80071b6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80071ba:	d1f2      	bne.n	80071a2 <_vfprintf_r+0x140a>
 80071bc:	9908      	ldr	r1, [sp, #32]
 80071be:	07ce      	lsls	r6, r1, #31
 80071c0:	d506      	bpl.n	80071d0 <_vfprintf_r+0x1438>
 80071c2:	2b30      	cmp	r3, #48	@ 0x30
 80071c4:	d004      	beq.n	80071d0 <_vfprintf_r+0x1438>
 80071c6:	2330      	movs	r3, #48	@ 0x30
 80071c8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80071cc:	f1a2 0802 	sub.w	r8, r2, #2
 80071d0:	ab52      	add	r3, sp, #328	@ 0x148
 80071d2:	9d08      	ldr	r5, [sp, #32]
 80071d4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 80071d8:	f04f 0a00 	mov.w	sl, #0
 80071dc:	eba3 0908 	sub.w	r9, r3, r8
 80071e0:	4657      	mov	r7, sl
 80071e2:	f8cd a020 	str.w	sl, [sp, #32]
 80071e6:	4656      	mov	r6, sl
 80071e8:	f7ff b978 	b.w	80064dc <_vfprintf_r+0x744>
 80071ec:	0800e484 	.word	0x0800e484

080071f0 <__sbprintf>:
 80071f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f2:	461f      	mov	r7, r3
 80071f4:	898b      	ldrh	r3, [r1, #12]
 80071f6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80071fa:	f023 0302 	bic.w	r3, r3, #2
 80071fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007202:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007204:	9319      	str	r3, [sp, #100]	@ 0x64
 8007206:	89cb      	ldrh	r3, [r1, #14]
 8007208:	f8ad 300e 	strh.w	r3, [sp, #14]
 800720c:	69cb      	ldr	r3, [r1, #28]
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007212:	9309      	str	r3, [sp, #36]	@ 0x24
 8007214:	ab1a      	add	r3, sp, #104	@ 0x68
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800721e:	4615      	mov	r5, r2
 8007220:	4606      	mov	r6, r0
 8007222:	9302      	str	r3, [sp, #8]
 8007224:	9305      	str	r3, [sp, #20]
 8007226:	a816      	add	r0, sp, #88	@ 0x58
 8007228:	2300      	movs	r3, #0
 800722a:	460c      	mov	r4, r1
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	f7fe fc7b 	bl	8005b28 <__retarget_lock_init_recursive>
 8007232:	462a      	mov	r2, r5
 8007234:	463b      	mov	r3, r7
 8007236:	4669      	mov	r1, sp
 8007238:	4630      	mov	r0, r6
 800723a:	f7fe fdad 	bl	8005d98 <_vfprintf_r>
 800723e:	1e05      	subs	r5, r0, #0
 8007240:	db07      	blt.n	8007252 <__sbprintf+0x62>
 8007242:	4669      	mov	r1, sp
 8007244:	4630      	mov	r0, r6
 8007246:	f001 ff81 	bl	800914c <_fflush_r>
 800724a:	2800      	cmp	r0, #0
 800724c:	bf18      	it	ne
 800724e:	f04f 35ff 	movne.w	r5, #4294967295
 8007252:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007256:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007258:	065b      	lsls	r3, r3, #25
 800725a:	bf42      	ittt	mi
 800725c:	89a3      	ldrhmi	r3, [r4, #12]
 800725e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8007262:	81a3      	strhmi	r3, [r4, #12]
 8007264:	f7fe fc61 	bl	8005b2a <__retarget_lock_close_recursive>
 8007268:	4628      	mov	r0, r5
 800726a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007270 <__sprint_r>:
 8007270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	6893      	ldr	r3, [r2, #8]
 8007276:	4680      	mov	r8, r0
 8007278:	460e      	mov	r6, r1
 800727a:	4614      	mov	r4, r2
 800727c:	b343      	cbz	r3, 80072d0 <__sprint_r+0x60>
 800727e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007280:	049d      	lsls	r5, r3, #18
 8007282:	d522      	bpl.n	80072ca <__sprint_r+0x5a>
 8007284:	6815      	ldr	r5, [r2, #0]
 8007286:	68a0      	ldr	r0, [r4, #8]
 8007288:	3508      	adds	r5, #8
 800728a:	b928      	cbnz	r0, 8007298 <__sprint_r+0x28>
 800728c:	2300      	movs	r3, #0
 800728e:	60a3      	str	r3, [r4, #8]
 8007290:	2300      	movs	r3, #0
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800729c:	f04f 0900 	mov.w	r9, #0
 80072a0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80072a4:	45ca      	cmp	sl, r9
 80072a6:	dc05      	bgt.n	80072b4 <__sprint_r+0x44>
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	f027 0703 	bic.w	r7, r7, #3
 80072ae:	1bdb      	subs	r3, r3, r7
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	e7e8      	b.n	8007286 <__sprint_r+0x16>
 80072b4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80072b8:	4632      	mov	r2, r6
 80072ba:	4640      	mov	r0, r8
 80072bc:	f002 fbc5 	bl	8009a4a <_fputwc_r>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d0e3      	beq.n	800728c <__sprint_r+0x1c>
 80072c4:	f109 0901 	add.w	r9, r9, #1
 80072c8:	e7ec      	b.n	80072a4 <__sprint_r+0x34>
 80072ca:	f001 ffcd 	bl	8009268 <__sfvwrite_r>
 80072ce:	e7dd      	b.n	800728c <__sprint_r+0x1c>
 80072d0:	4618      	mov	r0, r3
 80072d2:	e7dd      	b.n	8007290 <__sprint_r+0x20>

080072d4 <_vfiprintf_r>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	b0bb      	sub	sp, #236	@ 0xec
 80072da:	460f      	mov	r7, r1
 80072dc:	4693      	mov	fp, r2
 80072de:	461c      	mov	r4, r3
 80072e0:	461d      	mov	r5, r3
 80072e2:	9000      	str	r0, [sp, #0]
 80072e4:	b118      	cbz	r0, 80072ee <_vfiprintf_r+0x1a>
 80072e6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80072e8:	b90b      	cbnz	r3, 80072ee <_vfiprintf_r+0x1a>
 80072ea:	f7fe f9ef 	bl	80056cc <__sinit>
 80072ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d405      	bmi.n	8007300 <_vfiprintf_r+0x2c>
 80072f4:	89bb      	ldrh	r3, [r7, #12]
 80072f6:	059e      	lsls	r6, r3, #22
 80072f8:	d402      	bmi.n	8007300 <_vfiprintf_r+0x2c>
 80072fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80072fc:	f7fe fc16 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8007300:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007304:	0498      	lsls	r0, r3, #18
 8007306:	d406      	bmi.n	8007316 <_vfiprintf_r+0x42>
 8007308:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800730c:	81bb      	strh	r3, [r7, #12]
 800730e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007310:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007314:	667b      	str	r3, [r7, #100]	@ 0x64
 8007316:	89bb      	ldrh	r3, [r7, #12]
 8007318:	0719      	lsls	r1, r3, #28
 800731a:	d501      	bpl.n	8007320 <_vfiprintf_r+0x4c>
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	b9ab      	cbnz	r3, 800734c <_vfiprintf_r+0x78>
 8007320:	9800      	ldr	r0, [sp, #0]
 8007322:	4639      	mov	r1, r7
 8007324:	f002 fafa 	bl	800991c <__swsetup_r>
 8007328:	b180      	cbz	r0, 800734c <_vfiprintf_r+0x78>
 800732a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800732c:	07da      	lsls	r2, r3, #31
 800732e:	d506      	bpl.n	800733e <_vfiprintf_r+0x6a>
 8007330:	f04f 33ff 	mov.w	r3, #4294967295
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	9803      	ldr	r0, [sp, #12]
 8007338:	b03b      	add	sp, #236	@ 0xec
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	89bb      	ldrh	r3, [r7, #12]
 8007340:	059b      	lsls	r3, r3, #22
 8007342:	d4f5      	bmi.n	8007330 <_vfiprintf_r+0x5c>
 8007344:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007346:	f7fe fbf2 	bl	8005b2e <__retarget_lock_release_recursive>
 800734a:	e7f1      	b.n	8007330 <_vfiprintf_r+0x5c>
 800734c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007350:	f003 021a 	and.w	r2, r3, #26
 8007354:	2a0a      	cmp	r2, #10
 8007356:	d114      	bne.n	8007382 <_vfiprintf_r+0xae>
 8007358:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800735c:	2a00      	cmp	r2, #0
 800735e:	db10      	blt.n	8007382 <_vfiprintf_r+0xae>
 8007360:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007362:	07d6      	lsls	r6, r2, #31
 8007364:	d404      	bmi.n	8007370 <_vfiprintf_r+0x9c>
 8007366:	059d      	lsls	r5, r3, #22
 8007368:	d402      	bmi.n	8007370 <_vfiprintf_r+0x9c>
 800736a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800736c:	f7fe fbdf 	bl	8005b2e <__retarget_lock_release_recursive>
 8007370:	9800      	ldr	r0, [sp, #0]
 8007372:	4623      	mov	r3, r4
 8007374:	465a      	mov	r2, fp
 8007376:	4639      	mov	r1, r7
 8007378:	b03b      	add	sp, #236	@ 0xec
 800737a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737e:	f000 bc31 	b.w	8007be4 <__sbprintf>
 8007382:	2300      	movs	r3, #0
 8007384:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8007388:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800738c:	ae11      	add	r6, sp, #68	@ 0x44
 800738e:	960e      	str	r6, [sp, #56]	@ 0x38
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	9309      	str	r3, [sp, #36]	@ 0x24
 8007394:	9303      	str	r3, [sp, #12]
 8007396:	465b      	mov	r3, fp
 8007398:	461c      	mov	r4, r3
 800739a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800739e:	b10a      	cbz	r2, 80073a4 <_vfiprintf_r+0xd0>
 80073a0:	2a25      	cmp	r2, #37	@ 0x25
 80073a2:	d1f9      	bne.n	8007398 <_vfiprintf_r+0xc4>
 80073a4:	ebb4 080b 	subs.w	r8, r4, fp
 80073a8:	d00d      	beq.n	80073c6 <_vfiprintf_r+0xf2>
 80073aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073ac:	4443      	add	r3, r8
 80073ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80073b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b2:	3301      	adds	r3, #1
 80073b4:	2b07      	cmp	r3, #7
 80073b6:	e9c6 b800 	strd	fp, r8, [r6]
 80073ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073bc:	dc75      	bgt.n	80074aa <_vfiprintf_r+0x1d6>
 80073be:	3608      	adds	r6, #8
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	4443      	add	r3, r8
 80073c4:	9303      	str	r3, [sp, #12]
 80073c6:	7823      	ldrb	r3, [r4, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 83cd 	beq.w	8007b68 <_vfiprintf_r+0x894>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295
 80073d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80073d8:	3401      	adds	r4, #1
 80073da:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80073de:	469a      	mov	sl, r3
 80073e0:	46a3      	mov	fp, r4
 80073e2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80073e6:	f1a3 0220 	sub.w	r2, r3, #32
 80073ea:	2a5a      	cmp	r2, #90	@ 0x5a
 80073ec:	f200 8316 	bhi.w	8007a1c <_vfiprintf_r+0x748>
 80073f0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80073f4:	0314009a 	.word	0x0314009a
 80073f8:	00a20314 	.word	0x00a20314
 80073fc:	03140314 	.word	0x03140314
 8007400:	00820314 	.word	0x00820314
 8007404:	03140314 	.word	0x03140314
 8007408:	00af00a5 	.word	0x00af00a5
 800740c:	00ac0314 	.word	0x00ac0314
 8007410:	031400b1 	.word	0x031400b1
 8007414:	00d000cd 	.word	0x00d000cd
 8007418:	00d000d0 	.word	0x00d000d0
 800741c:	00d000d0 	.word	0x00d000d0
 8007420:	00d000d0 	.word	0x00d000d0
 8007424:	00d000d0 	.word	0x00d000d0
 8007428:	03140314 	.word	0x03140314
 800742c:	03140314 	.word	0x03140314
 8007430:	03140314 	.word	0x03140314
 8007434:	03140314 	.word	0x03140314
 8007438:	00f70314 	.word	0x00f70314
 800743c:	03140104 	.word	0x03140104
 8007440:	03140314 	.word	0x03140314
 8007444:	03140314 	.word	0x03140314
 8007448:	03140314 	.word	0x03140314
 800744c:	03140314 	.word	0x03140314
 8007450:	01520314 	.word	0x01520314
 8007454:	03140314 	.word	0x03140314
 8007458:	019a0314 	.word	0x019a0314
 800745c:	027a0314 	.word	0x027a0314
 8007460:	03140314 	.word	0x03140314
 8007464:	0314029a 	.word	0x0314029a
 8007468:	03140314 	.word	0x03140314
 800746c:	03140314 	.word	0x03140314
 8007470:	03140314 	.word	0x03140314
 8007474:	03140314 	.word	0x03140314
 8007478:	00f70314 	.word	0x00f70314
 800747c:	03140106 	.word	0x03140106
 8007480:	03140314 	.word	0x03140314
 8007484:	010600e0 	.word	0x010600e0
 8007488:	031400f1 	.word	0x031400f1
 800748c:	031400eb 	.word	0x031400eb
 8007490:	01540132 	.word	0x01540132
 8007494:	00f10189 	.word	0x00f10189
 8007498:	019a0314 	.word	0x019a0314
 800749c:	027c0098 	.word	0x027c0098
 80074a0:	03140314 	.word	0x03140314
 80074a4:	03140065 	.word	0x03140065
 80074a8:	0098      	.short	0x0098
 80074aa:	9800      	ldr	r0, [sp, #0]
 80074ac:	aa0e      	add	r2, sp, #56	@ 0x38
 80074ae:	4639      	mov	r1, r7
 80074b0:	f7ff fede 	bl	8007270 <__sprint_r>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f040 8336 	bne.w	8007b26 <_vfiprintf_r+0x852>
 80074ba:	ae11      	add	r6, sp, #68	@ 0x44
 80074bc:	e780      	b.n	80073c0 <_vfiprintf_r+0xec>
 80074be:	4a99      	ldr	r2, [pc, #612]	@ (8007724 <_vfiprintf_r+0x450>)
 80074c0:	9205      	str	r2, [sp, #20]
 80074c2:	f01a 0220 	ands.w	r2, sl, #32
 80074c6:	f000 8231 	beq.w	800792c <_vfiprintf_r+0x658>
 80074ca:	3507      	adds	r5, #7
 80074cc:	f025 0507 	bic.w	r5, r5, #7
 80074d0:	46a8      	mov	r8, r5
 80074d2:	686d      	ldr	r5, [r5, #4]
 80074d4:	f858 4b08 	ldr.w	r4, [r8], #8
 80074d8:	f01a 0f01 	tst.w	sl, #1
 80074dc:	d009      	beq.n	80074f2 <_vfiprintf_r+0x21e>
 80074de:	ea54 0205 	orrs.w	r2, r4, r5
 80074e2:	bf1f      	itttt	ne
 80074e4:	2230      	movne	r2, #48	@ 0x30
 80074e6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80074ea:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80074ee:	f04a 0a02 	orrne.w	sl, sl, #2
 80074f2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80074f6:	e112      	b.n	800771e <_vfiprintf_r+0x44a>
 80074f8:	9800      	ldr	r0, [sp, #0]
 80074fa:	f002 fb03 	bl	8009b04 <_localeconv_r>
 80074fe:	6843      	ldr	r3, [r0, #4]
 8007500:	9309      	str	r3, [sp, #36]	@ 0x24
 8007502:	4618      	mov	r0, r3
 8007504:	f7f8 fe8c 	bl	8000220 <strlen>
 8007508:	9007      	str	r0, [sp, #28]
 800750a:	9800      	ldr	r0, [sp, #0]
 800750c:	f002 fafa 	bl	8009b04 <_localeconv_r>
 8007510:	6883      	ldr	r3, [r0, #8]
 8007512:	9306      	str	r3, [sp, #24]
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	b12b      	cbz	r3, 8007524 <_vfiprintf_r+0x250>
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	b11b      	cbz	r3, 8007524 <_vfiprintf_r+0x250>
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b10b      	cbz	r3, 8007524 <_vfiprintf_r+0x250>
 8007520:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8007524:	465c      	mov	r4, fp
 8007526:	e75b      	b.n	80073e0 <_vfiprintf_r+0x10c>
 8007528:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f9      	bne.n	8007524 <_vfiprintf_r+0x250>
 8007530:	2320      	movs	r3, #32
 8007532:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8007536:	e7f5      	b.n	8007524 <_vfiprintf_r+0x250>
 8007538:	f04a 0a01 	orr.w	sl, sl, #1
 800753c:	e7f2      	b.n	8007524 <_vfiprintf_r+0x250>
 800753e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	daed      	bge.n	8007524 <_vfiprintf_r+0x250>
 8007548:	425b      	negs	r3, r3
 800754a:	9302      	str	r3, [sp, #8]
 800754c:	f04a 0a04 	orr.w	sl, sl, #4
 8007550:	e7e8      	b.n	8007524 <_vfiprintf_r+0x250>
 8007552:	232b      	movs	r3, #43	@ 0x2b
 8007554:	e7ed      	b.n	8007532 <_vfiprintf_r+0x25e>
 8007556:	465a      	mov	r2, fp
 8007558:	f812 3b01 	ldrb.w	r3, [r2], #1
 800755c:	2b2a      	cmp	r3, #42	@ 0x2a
 800755e:	d112      	bne.n	8007586 <_vfiprintf_r+0x2b2>
 8007560:	f855 3b04 	ldr.w	r3, [r5], #4
 8007564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	4693      	mov	fp, r2
 800756c:	e7da      	b.n	8007524 <_vfiprintf_r+0x250>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	fb00 1303 	mla	r3, r0, r3, r1
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	f812 3b01 	ldrb.w	r3, [r2], #1
 800757a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800757e:	2909      	cmp	r1, #9
 8007580:	d9f5      	bls.n	800756e <_vfiprintf_r+0x29a>
 8007582:	4693      	mov	fp, r2
 8007584:	e72f      	b.n	80073e6 <_vfiprintf_r+0x112>
 8007586:	2100      	movs	r1, #0
 8007588:	9101      	str	r1, [sp, #4]
 800758a:	200a      	movs	r0, #10
 800758c:	e7f5      	b.n	800757a <_vfiprintf_r+0x2a6>
 800758e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8007592:	e7c7      	b.n	8007524 <_vfiprintf_r+0x250>
 8007594:	2100      	movs	r1, #0
 8007596:	465a      	mov	r2, fp
 8007598:	9102      	str	r1, [sp, #8]
 800759a:	200a      	movs	r0, #10
 800759c:	9902      	ldr	r1, [sp, #8]
 800759e:	3b30      	subs	r3, #48	@ 0x30
 80075a0:	fb00 3301 	mla	r3, r0, r1, r3
 80075a4:	9302      	str	r3, [sp, #8]
 80075a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80075aa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80075ae:	2909      	cmp	r1, #9
 80075b0:	d9f4      	bls.n	800759c <_vfiprintf_r+0x2c8>
 80075b2:	e7e6      	b.n	8007582 <_vfiprintf_r+0x2ae>
 80075b4:	f89b 3000 	ldrb.w	r3, [fp]
 80075b8:	2b68      	cmp	r3, #104	@ 0x68
 80075ba:	bf06      	itte	eq
 80075bc:	f10b 0b01 	addeq.w	fp, fp, #1
 80075c0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 80075c4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 80075c8:	e7ac      	b.n	8007524 <_vfiprintf_r+0x250>
 80075ca:	f89b 3000 	ldrb.w	r3, [fp]
 80075ce:	2b6c      	cmp	r3, #108	@ 0x6c
 80075d0:	d104      	bne.n	80075dc <_vfiprintf_r+0x308>
 80075d2:	f10b 0b01 	add.w	fp, fp, #1
 80075d6:	f04a 0a20 	orr.w	sl, sl, #32
 80075da:	e7a3      	b.n	8007524 <_vfiprintf_r+0x250>
 80075dc:	f04a 0a10 	orr.w	sl, sl, #16
 80075e0:	e7a0      	b.n	8007524 <_vfiprintf_r+0x250>
 80075e2:	46a8      	mov	r8, r5
 80075e4:	2400      	movs	r4, #0
 80075e6:	f858 3b04 	ldr.w	r3, [r8], #4
 80075ea:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80075ee:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80075f2:	2301      	movs	r3, #1
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80075fa:	e0ab      	b.n	8007754 <_vfiprintf_r+0x480>
 80075fc:	f04a 0a10 	orr.w	sl, sl, #16
 8007600:	f01a 0f20 	tst.w	sl, #32
 8007604:	d011      	beq.n	800762a <_vfiprintf_r+0x356>
 8007606:	3507      	adds	r5, #7
 8007608:	f025 0507 	bic.w	r5, r5, #7
 800760c:	46a8      	mov	r8, r5
 800760e:	686d      	ldr	r5, [r5, #4]
 8007610:	f858 4b08 	ldr.w	r4, [r8], #8
 8007614:	2d00      	cmp	r5, #0
 8007616:	da06      	bge.n	8007626 <_vfiprintf_r+0x352>
 8007618:	4264      	negs	r4, r4
 800761a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800761e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007622:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8007626:	2301      	movs	r3, #1
 8007628:	e048      	b.n	80076bc <_vfiprintf_r+0x3e8>
 800762a:	46a8      	mov	r8, r5
 800762c:	f01a 0f10 	tst.w	sl, #16
 8007630:	f858 5b04 	ldr.w	r5, [r8], #4
 8007634:	d002      	beq.n	800763c <_vfiprintf_r+0x368>
 8007636:	462c      	mov	r4, r5
 8007638:	17ed      	asrs	r5, r5, #31
 800763a:	e7eb      	b.n	8007614 <_vfiprintf_r+0x340>
 800763c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8007640:	d003      	beq.n	800764a <_vfiprintf_r+0x376>
 8007642:	b22c      	sxth	r4, r5
 8007644:	f345 35c0 	sbfx	r5, r5, #15, #1
 8007648:	e7e4      	b.n	8007614 <_vfiprintf_r+0x340>
 800764a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800764e:	d0f2      	beq.n	8007636 <_vfiprintf_r+0x362>
 8007650:	b26c      	sxtb	r4, r5
 8007652:	f345 15c0 	sbfx	r5, r5, #7, #1
 8007656:	e7dd      	b.n	8007614 <_vfiprintf_r+0x340>
 8007658:	f01a 0f20 	tst.w	sl, #32
 800765c:	d007      	beq.n	800766e <_vfiprintf_r+0x39a>
 800765e:	9a03      	ldr	r2, [sp, #12]
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	9903      	ldr	r1, [sp, #12]
 8007664:	17d2      	asrs	r2, r2, #31
 8007666:	e9c3 1200 	strd	r1, r2, [r3]
 800766a:	3504      	adds	r5, #4
 800766c:	e693      	b.n	8007396 <_vfiprintf_r+0xc2>
 800766e:	f01a 0f10 	tst.w	sl, #16
 8007672:	d003      	beq.n	800767c <_vfiprintf_r+0x3a8>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	9a03      	ldr	r2, [sp, #12]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e7f6      	b.n	800766a <_vfiprintf_r+0x396>
 800767c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8007680:	d003      	beq.n	800768a <_vfiprintf_r+0x3b6>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	9a03      	ldr	r2, [sp, #12]
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e7ef      	b.n	800766a <_vfiprintf_r+0x396>
 800768a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800768e:	d0f1      	beq.n	8007674 <_vfiprintf_r+0x3a0>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	9a03      	ldr	r2, [sp, #12]
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e7e8      	b.n	800766a <_vfiprintf_r+0x396>
 8007698:	f04a 0a10 	orr.w	sl, sl, #16
 800769c:	f01a 0320 	ands.w	r3, sl, #32
 80076a0:	d01f      	beq.n	80076e2 <_vfiprintf_r+0x40e>
 80076a2:	3507      	adds	r5, #7
 80076a4:	f025 0507 	bic.w	r5, r5, #7
 80076a8:	46a8      	mov	r8, r5
 80076aa:	686d      	ldr	r5, [r5, #4]
 80076ac:	f858 4b08 	ldr.w	r4, [r8], #8
 80076b0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80076b4:	2300      	movs	r3, #0
 80076b6:	2200      	movs	r2, #0
 80076b8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80076bc:	9a01      	ldr	r2, [sp, #4]
 80076be:	3201      	adds	r2, #1
 80076c0:	f000 825f 	beq.w	8007b82 <_vfiprintf_r+0x8ae>
 80076c4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 80076c8:	9204      	str	r2, [sp, #16]
 80076ca:	ea54 0205 	orrs.w	r2, r4, r5
 80076ce:	f040 825e 	bne.w	8007b8e <_vfiprintf_r+0x8ba>
 80076d2:	9a01      	ldr	r2, [sp, #4]
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	f000 8198 	beq.w	8007a0a <_vfiprintf_r+0x736>
 80076da:	2b01      	cmp	r3, #1
 80076dc:	f040 825a 	bne.w	8007b94 <_vfiprintf_r+0x8c0>
 80076e0:	e13b      	b.n	800795a <_vfiprintf_r+0x686>
 80076e2:	46a8      	mov	r8, r5
 80076e4:	f01a 0510 	ands.w	r5, sl, #16
 80076e8:	f858 4b04 	ldr.w	r4, [r8], #4
 80076ec:	d001      	beq.n	80076f2 <_vfiprintf_r+0x41e>
 80076ee:	461d      	mov	r5, r3
 80076f0:	e7de      	b.n	80076b0 <_vfiprintf_r+0x3dc>
 80076f2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80076f6:	d001      	beq.n	80076fc <_vfiprintf_r+0x428>
 80076f8:	b2a4      	uxth	r4, r4
 80076fa:	e7d9      	b.n	80076b0 <_vfiprintf_r+0x3dc>
 80076fc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8007700:	d0d6      	beq.n	80076b0 <_vfiprintf_r+0x3dc>
 8007702:	b2e4      	uxtb	r4, r4
 8007704:	e7f3      	b.n	80076ee <_vfiprintf_r+0x41a>
 8007706:	46a8      	mov	r8, r5
 8007708:	f647 0330 	movw	r3, #30768	@ 0x7830
 800770c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007710:	f858 4b04 	ldr.w	r4, [r8], #4
 8007714:	4b03      	ldr	r3, [pc, #12]	@ (8007724 <_vfiprintf_r+0x450>)
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	2500      	movs	r5, #0
 800771a:	f04a 0a02 	orr.w	sl, sl, #2
 800771e:	2302      	movs	r3, #2
 8007720:	e7c9      	b.n	80076b6 <_vfiprintf_r+0x3e2>
 8007722:	bf00      	nop
 8007724:	0800e450 	.word	0x0800e450
 8007728:	9b01      	ldr	r3, [sp, #4]
 800772a:	46a8      	mov	r8, r5
 800772c:	1c5c      	adds	r4, r3, #1
 800772e:	f04f 0500 	mov.w	r5, #0
 8007732:	f858 9b04 	ldr.w	r9, [r8], #4
 8007736:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800773a:	f000 80d0 	beq.w	80078de <_vfiprintf_r+0x60a>
 800773e:	461a      	mov	r2, r3
 8007740:	4629      	mov	r1, r5
 8007742:	4648      	mov	r0, r9
 8007744:	f7f8 fd74 	bl	8000230 <memchr>
 8007748:	4604      	mov	r4, r0
 800774a:	b118      	cbz	r0, 8007754 <_vfiprintf_r+0x480>
 800774c:	eba0 0309 	sub.w	r3, r0, r9
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	462c      	mov	r4, r5
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	42a3      	cmp	r3, r4
 8007758:	bfb8      	it	lt
 800775a:	4623      	movlt	r3, r4
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007762:	b113      	cbz	r3, 800776a <_vfiprintf_r+0x496>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	3301      	adds	r3, #1
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	f01a 0302 	ands.w	r3, sl, #2
 800776e:	9308      	str	r3, [sp, #32]
 8007770:	bf1e      	ittt	ne
 8007772:	9b04      	ldrne	r3, [sp, #16]
 8007774:	3302      	addne	r3, #2
 8007776:	9304      	strne	r3, [sp, #16]
 8007778:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800777c:	930a      	str	r3, [sp, #40]	@ 0x28
 800777e:	d11f      	bne.n	80077c0 <_vfiprintf_r+0x4ec>
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	9a04      	ldr	r2, [sp, #16]
 8007784:	1a9d      	subs	r5, r3, r2
 8007786:	2d00      	cmp	r5, #0
 8007788:	dd1a      	ble.n	80077c0 <_vfiprintf_r+0x4ec>
 800778a:	4ba9      	ldr	r3, [pc, #676]	@ (8007a30 <_vfiprintf_r+0x75c>)
 800778c:	6033      	str	r3, [r6, #0]
 800778e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8007792:	2d10      	cmp	r5, #16
 8007794:	f102 0201 	add.w	r2, r2, #1
 8007798:	f106 0008 	add.w	r0, r6, #8
 800779c:	f300 814e 	bgt.w	8007a3c <_vfiprintf_r+0x768>
 80077a0:	6075      	str	r5, [r6, #4]
 80077a2:	2a07      	cmp	r2, #7
 80077a4:	4465      	add	r5, ip
 80077a6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80077aa:	f340 815a 	ble.w	8007a62 <_vfiprintf_r+0x78e>
 80077ae:	9800      	ldr	r0, [sp, #0]
 80077b0:	aa0e      	add	r2, sp, #56	@ 0x38
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7ff fd5c 	bl	8007270 <__sprint_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f040 81b4 	bne.w	8007b26 <_vfiprintf_r+0x852>
 80077be:	ae11      	add	r6, sp, #68	@ 0x44
 80077c0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 80077c4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80077c8:	b161      	cbz	r1, 80077e4 <_vfiprintf_r+0x510>
 80077ca:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 80077ce:	3301      	adds	r3, #1
 80077d0:	6031      	str	r1, [r6, #0]
 80077d2:	2101      	movs	r1, #1
 80077d4:	440a      	add	r2, r1
 80077d6:	2b07      	cmp	r3, #7
 80077d8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80077dc:	6071      	str	r1, [r6, #4]
 80077de:	f300 8142 	bgt.w	8007a66 <_vfiprintf_r+0x792>
 80077e2:	3608      	adds	r6, #8
 80077e4:	9908      	ldr	r1, [sp, #32]
 80077e6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80077ea:	b159      	cbz	r1, 8007804 <_vfiprintf_r+0x530>
 80077ec:	a90d      	add	r1, sp, #52	@ 0x34
 80077ee:	3301      	adds	r3, #1
 80077f0:	6031      	str	r1, [r6, #0]
 80077f2:	2102      	movs	r1, #2
 80077f4:	440a      	add	r2, r1
 80077f6:	2b07      	cmp	r3, #7
 80077f8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80077fc:	6071      	str	r1, [r6, #4]
 80077fe:	f300 813b 	bgt.w	8007a78 <_vfiprintf_r+0x7a4>
 8007802:	3608      	adds	r6, #8
 8007804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	d11f      	bne.n	800784a <_vfiprintf_r+0x576>
 800780a:	9b02      	ldr	r3, [sp, #8]
 800780c:	9a04      	ldr	r2, [sp, #16]
 800780e:	1a9d      	subs	r5, r3, r2
 8007810:	2d00      	cmp	r5, #0
 8007812:	dd1a      	ble.n	800784a <_vfiprintf_r+0x576>
 8007814:	4b87      	ldr	r3, [pc, #540]	@ (8007a34 <_vfiprintf_r+0x760>)
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800781c:	2d10      	cmp	r5, #16
 800781e:	f102 0201 	add.w	r2, r2, #1
 8007822:	f106 0008 	add.w	r0, r6, #8
 8007826:	f300 8130 	bgt.w	8007a8a <_vfiprintf_r+0x7b6>
 800782a:	6075      	str	r5, [r6, #4]
 800782c:	2a07      	cmp	r2, #7
 800782e:	4465      	add	r5, ip
 8007830:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8007834:	f340 813c 	ble.w	8007ab0 <_vfiprintf_r+0x7dc>
 8007838:	9800      	ldr	r0, [sp, #0]
 800783a:	aa0e      	add	r2, sp, #56	@ 0x38
 800783c:	4639      	mov	r1, r7
 800783e:	f7ff fd17 	bl	8007270 <__sprint_r>
 8007842:	2800      	cmp	r0, #0
 8007844:	f040 816f 	bne.w	8007b26 <_vfiprintf_r+0x852>
 8007848:	ae11      	add	r6, sp, #68	@ 0x44
 800784a:	9b01      	ldr	r3, [sp, #4]
 800784c:	1ae4      	subs	r4, r4, r3
 800784e:	2c00      	cmp	r4, #0
 8007850:	dd1a      	ble.n	8007888 <_vfiprintf_r+0x5b4>
 8007852:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007856:	4877      	ldr	r0, [pc, #476]	@ (8007a34 <_vfiprintf_r+0x760>)
 8007858:	6030      	str	r0, [r6, #0]
 800785a:	2c10      	cmp	r4, #16
 800785c:	f103 0301 	add.w	r3, r3, #1
 8007860:	f106 0108 	add.w	r1, r6, #8
 8007864:	f300 8126 	bgt.w	8007ab4 <_vfiprintf_r+0x7e0>
 8007868:	6074      	str	r4, [r6, #4]
 800786a:	2b07      	cmp	r3, #7
 800786c:	4414      	add	r4, r2
 800786e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8007872:	f340 8130 	ble.w	8007ad6 <_vfiprintf_r+0x802>
 8007876:	9800      	ldr	r0, [sp, #0]
 8007878:	aa0e      	add	r2, sp, #56	@ 0x38
 800787a:	4639      	mov	r1, r7
 800787c:	f7ff fcf8 	bl	8007270 <__sprint_r>
 8007880:	2800      	cmp	r0, #0
 8007882:	f040 8150 	bne.w	8007b26 <_vfiprintf_r+0x852>
 8007886:	ae11      	add	r6, sp, #68	@ 0x44
 8007888:	9b01      	ldr	r3, [sp, #4]
 800788a:	9a01      	ldr	r2, [sp, #4]
 800788c:	6073      	str	r3, [r6, #4]
 800788e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007890:	f8c6 9000 	str.w	r9, [r6]
 8007894:	4413      	add	r3, r2
 8007896:	9310      	str	r3, [sp, #64]	@ 0x40
 8007898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800789a:	3301      	adds	r3, #1
 800789c:	2b07      	cmp	r3, #7
 800789e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078a0:	f300 811b 	bgt.w	8007ada <_vfiprintf_r+0x806>
 80078a4:	f106 0308 	add.w	r3, r6, #8
 80078a8:	f01a 0f04 	tst.w	sl, #4
 80078ac:	f040 811d 	bne.w	8007aea <_vfiprintf_r+0x816>
 80078b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078b4:	9904      	ldr	r1, [sp, #16]
 80078b6:	428a      	cmp	r2, r1
 80078b8:	bfac      	ite	ge
 80078ba:	189b      	addge	r3, r3, r2
 80078bc:	185b      	addlt	r3, r3, r1
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078c2:	b13b      	cbz	r3, 80078d4 <_vfiprintf_r+0x600>
 80078c4:	9800      	ldr	r0, [sp, #0]
 80078c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7ff fcd1 	bl	8007270 <__sprint_r>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f040 8129 	bne.w	8007b26 <_vfiprintf_r+0x852>
 80078d4:	2300      	movs	r3, #0
 80078d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078d8:	4645      	mov	r5, r8
 80078da:	ae11      	add	r6, sp, #68	@ 0x44
 80078dc:	e55b      	b.n	8007396 <_vfiprintf_r+0xc2>
 80078de:	4648      	mov	r0, r9
 80078e0:	f7f8 fc9e 	bl	8000220 <strlen>
 80078e4:	9001      	str	r0, [sp, #4]
 80078e6:	e734      	b.n	8007752 <_vfiprintf_r+0x47e>
 80078e8:	f04a 0a10 	orr.w	sl, sl, #16
 80078ec:	f01a 0320 	ands.w	r3, sl, #32
 80078f0:	d008      	beq.n	8007904 <_vfiprintf_r+0x630>
 80078f2:	3507      	adds	r5, #7
 80078f4:	f025 0507 	bic.w	r5, r5, #7
 80078f8:	46a8      	mov	r8, r5
 80078fa:	686d      	ldr	r5, [r5, #4]
 80078fc:	f858 4b08 	ldr.w	r4, [r8], #8
 8007900:	2301      	movs	r3, #1
 8007902:	e6d8      	b.n	80076b6 <_vfiprintf_r+0x3e2>
 8007904:	46a8      	mov	r8, r5
 8007906:	f01a 0510 	ands.w	r5, sl, #16
 800790a:	f858 4b04 	ldr.w	r4, [r8], #4
 800790e:	d001      	beq.n	8007914 <_vfiprintf_r+0x640>
 8007910:	461d      	mov	r5, r3
 8007912:	e7f5      	b.n	8007900 <_vfiprintf_r+0x62c>
 8007914:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8007918:	d001      	beq.n	800791e <_vfiprintf_r+0x64a>
 800791a:	b2a4      	uxth	r4, r4
 800791c:	e7f0      	b.n	8007900 <_vfiprintf_r+0x62c>
 800791e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8007922:	d0ed      	beq.n	8007900 <_vfiprintf_r+0x62c>
 8007924:	b2e4      	uxtb	r4, r4
 8007926:	e7f3      	b.n	8007910 <_vfiprintf_r+0x63c>
 8007928:	4a43      	ldr	r2, [pc, #268]	@ (8007a38 <_vfiprintf_r+0x764>)
 800792a:	e5c9      	b.n	80074c0 <_vfiprintf_r+0x1ec>
 800792c:	46a8      	mov	r8, r5
 800792e:	f01a 0510 	ands.w	r5, sl, #16
 8007932:	f858 4b04 	ldr.w	r4, [r8], #4
 8007936:	d001      	beq.n	800793c <_vfiprintf_r+0x668>
 8007938:	4615      	mov	r5, r2
 800793a:	e5cd      	b.n	80074d8 <_vfiprintf_r+0x204>
 800793c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8007940:	d001      	beq.n	8007946 <_vfiprintf_r+0x672>
 8007942:	b2a4      	uxth	r4, r4
 8007944:	e5c8      	b.n	80074d8 <_vfiprintf_r+0x204>
 8007946:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800794a:	f43f adc5 	beq.w	80074d8 <_vfiprintf_r+0x204>
 800794e:	b2e4      	uxtb	r4, r4
 8007950:	e7f2      	b.n	8007938 <_vfiprintf_r+0x664>
 8007952:	2c0a      	cmp	r4, #10
 8007954:	f175 0300 	sbcs.w	r3, r5, #0
 8007958:	d206      	bcs.n	8007968 <_vfiprintf_r+0x694>
 800795a:	3430      	adds	r4, #48	@ 0x30
 800795c:	b2e4      	uxtb	r4, r4
 800795e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8007962:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8007966:	e131      	b.n	8007bcc <_vfiprintf_r+0x8f8>
 8007968:	ab3a      	add	r3, sp, #232	@ 0xe8
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	9b04      	ldr	r3, [sp, #16]
 800796e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007972:	f04f 0a00 	mov.w	sl, #0
 8007976:	930a      	str	r3, [sp, #40]	@ 0x28
 8007978:	220a      	movs	r2, #10
 800797a:	2300      	movs	r3, #0
 800797c:	4620      	mov	r0, r4
 800797e:	4629      	mov	r1, r5
 8007980:	f7f9 f9aa 	bl	8000cd8 <__aeabi_uldivmod>
 8007984:	460b      	mov	r3, r1
 8007986:	9908      	ldr	r1, [sp, #32]
 8007988:	900b      	str	r0, [sp, #44]	@ 0x2c
 800798a:	3230      	adds	r2, #48	@ 0x30
 800798c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8007990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007992:	f101 39ff 	add.w	r9, r1, #4294967295
 8007996:	f10a 0a01 	add.w	sl, sl, #1
 800799a:	b1e2      	cbz	r2, 80079d6 <_vfiprintf_r+0x702>
 800799c:	9a06      	ldr	r2, [sp, #24]
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	4552      	cmp	r2, sl
 80079a2:	d118      	bne.n	80079d6 <_vfiprintf_r+0x702>
 80079a4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80079a8:	d015      	beq.n	80079d6 <_vfiprintf_r+0x702>
 80079aa:	2c0a      	cmp	r4, #10
 80079ac:	f175 0200 	sbcs.w	r2, r5, #0
 80079b0:	d311      	bcc.n	80079d6 <_vfiprintf_r+0x702>
 80079b2:	9308      	str	r3, [sp, #32]
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079b8:	eba9 0903 	sub.w	r9, r9, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	4648      	mov	r0, r9
 80079c0:	f002 f886 	bl	8009ad0 <strncpy>
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	785a      	ldrb	r2, [r3, #1]
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	b172      	cbz	r2, 80079ea <_vfiprintf_r+0x716>
 80079cc:	9a06      	ldr	r2, [sp, #24]
 80079ce:	3201      	adds	r2, #1
 80079d0:	9206      	str	r2, [sp, #24]
 80079d2:	f04f 0a00 	mov.w	sl, #0
 80079d6:	2c0a      	cmp	r4, #10
 80079d8:	f175 0500 	sbcs.w	r5, r5, #0
 80079dc:	f0c0 80f6 	bcc.w	8007bcc <_vfiprintf_r+0x8f8>
 80079e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80079e2:	f8cd 9020 	str.w	r9, [sp, #32]
 80079e6:	461d      	mov	r5, r3
 80079e8:	e7c6      	b.n	8007978 <_vfiprintf_r+0x6a4>
 80079ea:	4692      	mov	sl, r2
 80079ec:	e7f3      	b.n	80079d6 <_vfiprintf_r+0x702>
 80079ee:	f004 030f 	and.w	r3, r4, #15
 80079f2:	9a05      	ldr	r2, [sp, #20]
 80079f4:	0924      	lsrs	r4, r4, #4
 80079f6:	5cd3      	ldrb	r3, [r2, r3]
 80079f8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80079fc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8007a00:	092d      	lsrs	r5, r5, #4
 8007a02:	ea54 0305 	orrs.w	r3, r4, r5
 8007a06:	d1f2      	bne.n	80079ee <_vfiprintf_r+0x71a>
 8007a08:	e0e0      	b.n	8007bcc <_vfiprintf_r+0x8f8>
 8007a0a:	b923      	cbnz	r3, 8007a16 <_vfiprintf_r+0x742>
 8007a0c:	f01a 0f01 	tst.w	sl, #1
 8007a10:	d001      	beq.n	8007a16 <_vfiprintf_r+0x742>
 8007a12:	2430      	movs	r4, #48	@ 0x30
 8007a14:	e7a3      	b.n	800795e <_vfiprintf_r+0x68a>
 8007a16:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8007a1a:	e0d7      	b.n	8007bcc <_vfiprintf_r+0x8f8>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80a3 	beq.w	8007b68 <_vfiprintf_r+0x894>
 8007a22:	2400      	movs	r4, #0
 8007a24:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8007a28:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8007a2c:	46a8      	mov	r8, r5
 8007a2e:	e5e0      	b.n	80075f2 <_vfiprintf_r+0x31e>
 8007a30:	0800e4a4 	.word	0x0800e4a4
 8007a34:	0800e494 	.word	0x0800e494
 8007a38:	0800e461 	.word	0x0800e461
 8007a3c:	2110      	movs	r1, #16
 8007a3e:	6071      	str	r1, [r6, #4]
 8007a40:	2a07      	cmp	r2, #7
 8007a42:	4461      	add	r1, ip
 8007a44:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007a48:	dd08      	ble.n	8007a5c <_vfiprintf_r+0x788>
 8007a4a:	9800      	ldr	r0, [sp, #0]
 8007a4c:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7ff fc0e 	bl	8007270 <__sprint_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d166      	bne.n	8007b26 <_vfiprintf_r+0x852>
 8007a58:	4b60      	ldr	r3, [pc, #384]	@ (8007bdc <_vfiprintf_r+0x908>)
 8007a5a:	a811      	add	r0, sp, #68	@ 0x44
 8007a5c:	3d10      	subs	r5, #16
 8007a5e:	4606      	mov	r6, r0
 8007a60:	e694      	b.n	800778c <_vfiprintf_r+0x4b8>
 8007a62:	4606      	mov	r6, r0
 8007a64:	e6ac      	b.n	80077c0 <_vfiprintf_r+0x4ec>
 8007a66:	9800      	ldr	r0, [sp, #0]
 8007a68:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a6a:	4639      	mov	r1, r7
 8007a6c:	f7ff fc00 	bl	8007270 <__sprint_r>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d158      	bne.n	8007b26 <_vfiprintf_r+0x852>
 8007a74:	ae11      	add	r6, sp, #68	@ 0x44
 8007a76:	e6b5      	b.n	80077e4 <_vfiprintf_r+0x510>
 8007a78:	9800      	ldr	r0, [sp, #0]
 8007a7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7ff fbf7 	bl	8007270 <__sprint_r>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d14f      	bne.n	8007b26 <_vfiprintf_r+0x852>
 8007a86:	ae11      	add	r6, sp, #68	@ 0x44
 8007a88:	e6bc      	b.n	8007804 <_vfiprintf_r+0x530>
 8007a8a:	2110      	movs	r1, #16
 8007a8c:	6071      	str	r1, [r6, #4]
 8007a8e:	2a07      	cmp	r2, #7
 8007a90:	4461      	add	r1, ip
 8007a92:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007a96:	dd08      	ble.n	8007aaa <_vfiprintf_r+0x7d6>
 8007a98:	9800      	ldr	r0, [sp, #0]
 8007a9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	f7ff fbe7 	bl	8007270 <__sprint_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d13f      	bne.n	8007b26 <_vfiprintf_r+0x852>
 8007aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8007be0 <_vfiprintf_r+0x90c>)
 8007aa8:	a811      	add	r0, sp, #68	@ 0x44
 8007aaa:	3d10      	subs	r5, #16
 8007aac:	4606      	mov	r6, r0
 8007aae:	e6b2      	b.n	8007816 <_vfiprintf_r+0x542>
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	e6ca      	b.n	800784a <_vfiprintf_r+0x576>
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	4402      	add	r2, r0
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007abe:	6070      	str	r0, [r6, #4]
 8007ac0:	dd06      	ble.n	8007ad0 <_vfiprintf_r+0x7fc>
 8007ac2:	9800      	ldr	r0, [sp, #0]
 8007ac4:	aa0e      	add	r2, sp, #56	@ 0x38
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	f7ff fbd2 	bl	8007270 <__sprint_r>
 8007acc:	bb58      	cbnz	r0, 8007b26 <_vfiprintf_r+0x852>
 8007ace:	a911      	add	r1, sp, #68	@ 0x44
 8007ad0:	3c10      	subs	r4, #16
 8007ad2:	460e      	mov	r6, r1
 8007ad4:	e6bd      	b.n	8007852 <_vfiprintf_r+0x57e>
 8007ad6:	460e      	mov	r6, r1
 8007ad8:	e6d6      	b.n	8007888 <_vfiprintf_r+0x5b4>
 8007ada:	9800      	ldr	r0, [sp, #0]
 8007adc:	aa0e      	add	r2, sp, #56	@ 0x38
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7ff fbc6 	bl	8007270 <__sprint_r>
 8007ae4:	b9f8      	cbnz	r0, 8007b26 <_vfiprintf_r+0x852>
 8007ae6:	ab11      	add	r3, sp, #68	@ 0x44
 8007ae8:	e6de      	b.n	80078a8 <_vfiprintf_r+0x5d4>
 8007aea:	9a02      	ldr	r2, [sp, #8]
 8007aec:	9904      	ldr	r1, [sp, #16]
 8007aee:	1a54      	subs	r4, r2, r1
 8007af0:	2c00      	cmp	r4, #0
 8007af2:	f77f aedd 	ble.w	80078b0 <_vfiprintf_r+0x5dc>
 8007af6:	4d39      	ldr	r5, [pc, #228]	@ (8007bdc <_vfiprintf_r+0x908>)
 8007af8:	2610      	movs	r6, #16
 8007afa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8007afe:	2c10      	cmp	r4, #16
 8007b00:	f102 0201 	add.w	r2, r2, #1
 8007b04:	601d      	str	r5, [r3, #0]
 8007b06:	dc1d      	bgt.n	8007b44 <_vfiprintf_r+0x870>
 8007b08:	605c      	str	r4, [r3, #4]
 8007b0a:	2a07      	cmp	r2, #7
 8007b0c:	440c      	add	r4, r1
 8007b0e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8007b12:	f77f aecd 	ble.w	80078b0 <_vfiprintf_r+0x5dc>
 8007b16:	9800      	ldr	r0, [sp, #0]
 8007b18:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	f7ff fba8 	bl	8007270 <__sprint_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f43f aec5 	beq.w	80078b0 <_vfiprintf_r+0x5dc>
 8007b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b28:	07d9      	lsls	r1, r3, #31
 8007b2a:	d405      	bmi.n	8007b38 <_vfiprintf_r+0x864>
 8007b2c:	89bb      	ldrh	r3, [r7, #12]
 8007b2e:	059a      	lsls	r2, r3, #22
 8007b30:	d402      	bmi.n	8007b38 <_vfiprintf_r+0x864>
 8007b32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007b34:	f7fd fffb 	bl	8005b2e <__retarget_lock_release_recursive>
 8007b38:	89bb      	ldrh	r3, [r7, #12]
 8007b3a:	065b      	lsls	r3, r3, #25
 8007b3c:	f57f abfb 	bpl.w	8007336 <_vfiprintf_r+0x62>
 8007b40:	f7ff bbf6 	b.w	8007330 <_vfiprintf_r+0x5c>
 8007b44:	3110      	adds	r1, #16
 8007b46:	2a07      	cmp	r2, #7
 8007b48:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007b4c:	605e      	str	r6, [r3, #4]
 8007b4e:	dc02      	bgt.n	8007b56 <_vfiprintf_r+0x882>
 8007b50:	3308      	adds	r3, #8
 8007b52:	3c10      	subs	r4, #16
 8007b54:	e7d1      	b.n	8007afa <_vfiprintf_r+0x826>
 8007b56:	9800      	ldr	r0, [sp, #0]
 8007b58:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	f7ff fb88 	bl	8007270 <__sprint_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d1e0      	bne.n	8007b26 <_vfiprintf_r+0x852>
 8007b64:	ab11      	add	r3, sp, #68	@ 0x44
 8007b66:	e7f4      	b.n	8007b52 <_vfiprintf_r+0x87e>
 8007b68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b6a:	b913      	cbnz	r3, 8007b72 <_vfiprintf_r+0x89e>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b70:	e7d9      	b.n	8007b26 <_vfiprintf_r+0x852>
 8007b72:	9800      	ldr	r0, [sp, #0]
 8007b74:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7ff fb7a 	bl	8007270 <__sprint_r>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0f5      	beq.n	8007b6c <_vfiprintf_r+0x898>
 8007b80:	e7d1      	b.n	8007b26 <_vfiprintf_r+0x852>
 8007b82:	ea54 0205 	orrs.w	r2, r4, r5
 8007b86:	f8cd a010 	str.w	sl, [sp, #16]
 8007b8a:	f43f ada6 	beq.w	80076da <_vfiprintf_r+0x406>
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	f43f aedf 	beq.w	8007952 <_vfiprintf_r+0x67e>
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8007b9a:	f43f af28 	beq.w	80079ee <_vfiprintf_r+0x71a>
 8007b9e:	f004 0307 	and.w	r3, r4, #7
 8007ba2:	08e4      	lsrs	r4, r4, #3
 8007ba4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8007ba8:	08ed      	lsrs	r5, r5, #3
 8007baa:	3330      	adds	r3, #48	@ 0x30
 8007bac:	ea54 0105 	orrs.w	r1, r4, r5
 8007bb0:	464a      	mov	r2, r9
 8007bb2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007bb6:	d1f2      	bne.n	8007b9e <_vfiprintf_r+0x8ca>
 8007bb8:	9904      	ldr	r1, [sp, #16]
 8007bba:	07c8      	lsls	r0, r1, #31
 8007bbc:	d506      	bpl.n	8007bcc <_vfiprintf_r+0x8f8>
 8007bbe:	2b30      	cmp	r3, #48	@ 0x30
 8007bc0:	d004      	beq.n	8007bcc <_vfiprintf_r+0x8f8>
 8007bc2:	2330      	movs	r3, #48	@ 0x30
 8007bc4:	f809 3c01 	strb.w	r3, [r9, #-1]
 8007bc8:	f1a2 0902 	sub.w	r9, r2, #2
 8007bcc:	ab3a      	add	r3, sp, #232	@ 0xe8
 8007bce:	eba3 0309 	sub.w	r3, r3, r9
 8007bd2:	9c01      	ldr	r4, [sp, #4]
 8007bd4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	e5bb      	b.n	8007754 <_vfiprintf_r+0x480>
 8007bdc:	0800e4a4 	.word	0x0800e4a4
 8007be0:	0800e494 	.word	0x0800e494

08007be4 <__sbprintf>:
 8007be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be6:	461f      	mov	r7, r3
 8007be8:	898b      	ldrh	r3, [r1, #12]
 8007bea:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8007bee:	f023 0302 	bic.w	r3, r3, #2
 8007bf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007bf6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007bf8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007bfa:	89cb      	ldrh	r3, [r1, #14]
 8007bfc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007c00:	69cb      	ldr	r3, [r1, #28]
 8007c02:	9307      	str	r3, [sp, #28]
 8007c04:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c08:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c12:	4615      	mov	r5, r2
 8007c14:	4606      	mov	r6, r0
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	a816      	add	r0, sp, #88	@ 0x58
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	9306      	str	r3, [sp, #24]
 8007c22:	f7fd ff81 	bl	8005b28 <__retarget_lock_init_recursive>
 8007c26:	462a      	mov	r2, r5
 8007c28:	463b      	mov	r3, r7
 8007c2a:	4669      	mov	r1, sp
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f7ff fb51 	bl	80072d4 <_vfiprintf_r>
 8007c32:	1e05      	subs	r5, r0, #0
 8007c34:	db07      	blt.n	8007c46 <__sbprintf+0x62>
 8007c36:	4669      	mov	r1, sp
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f001 fa87 	bl	800914c <_fflush_r>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	bf18      	it	ne
 8007c42:	f04f 35ff 	movne.w	r5, #4294967295
 8007c46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007c4a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007c4c:	065b      	lsls	r3, r3, #25
 8007c4e:	bf42      	ittt	mi
 8007c50:	89a3      	ldrhmi	r3, [r4, #12]
 8007c52:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8007c56:	81a3      	strhmi	r3, [r4, #12]
 8007c58:	f7fd ff67 	bl	8005b2a <__retarget_lock_close_recursive>
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8007c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c64 <__svfscanf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8007c6c:	461d      	mov	r5, r3
 8007c6e:	af02      	add	r7, sp, #8
 8007c70:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007c72:	617a      	str	r2, [r7, #20]
 8007c74:	07da      	lsls	r2, r3, #31
 8007c76:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007c78:	460c      	mov	r4, r1
 8007c7a:	d405      	bmi.n	8007c88 <__svfscanf_r+0x24>
 8007c7c:	898b      	ldrh	r3, [r1, #12]
 8007c7e:	059b      	lsls	r3, r3, #22
 8007c80:	d402      	bmi.n	8007c88 <__svfscanf_r+0x24>
 8007c82:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8007c84:	f7fd ff52 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8007c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8c:	049e      	lsls	r6, r3, #18
 8007c8e:	d406      	bmi.n	8007c9e <__svfscanf_r+0x3a>
 8007c90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c9c:	6663      	str	r3, [r4, #100]	@ 0x64
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cac:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007cb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80d3 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 8007cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8007ef8 <__svfscanf_r+0x294>)
 8007cbe:	5cd6      	ldrb	r6, [r2, r3]
 8007cc0:	f016 0608 	ands.w	r6, r6, #8
 8007cc4:	d01b      	beq.n	8007cfe <__svfscanf_r+0x9a>
 8007cc6:	6863      	ldr	r3, [r4, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dd08      	ble.n	8007cde <__svfscanf_r+0x7a>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	498a      	ldr	r1, [pc, #552]	@ (8007ef8 <__svfscanf_r+0x294>)
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	5c8a      	ldrb	r2, [r1, r2]
 8007cd4:	0710      	lsls	r0, r2, #28
 8007cd6:	d409      	bmi.n	8007cec <__svfscanf_r+0x88>
 8007cd8:	f8c7 8014 	str.w	r8, [r7, #20]
 8007cdc:	e7e6      	b.n	8007cac <__svfscanf_r+0x48>
 8007cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f001 fc7f 	bl	80095e4 <__srefill_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0f0      	beq.n	8007ccc <__svfscanf_r+0x68>
 8007cea:	e7f5      	b.n	8007cd8 <__svfscanf_r+0x74>
 8007cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cee:	3201      	adds	r2, #1
 8007cf0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cf2:	6862      	ldr	r2, [r4, #4]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	3a01      	subs	r2, #1
 8007cf8:	6062      	str	r2, [r4, #4]
 8007cfa:	6023      	str	r3, [r4, #0]
 8007cfc:	e7e3      	b.n	8007cc6 <__svfscanf_r+0x62>
 8007cfe:	2b25      	cmp	r3, #37	@ 0x25
 8007d00:	d163      	bne.n	8007dca <__svfscanf_r+0x166>
 8007d02:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8007d04:	4642      	mov	r2, r8
 8007d06:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007d0a:	617a      	str	r2, [r7, #20]
 8007d0c:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 8007d10:	2a55      	cmp	r2, #85	@ 0x55
 8007d12:	f200 80a6 	bhi.w	8007e62 <__svfscanf_r+0x1fe>
 8007d16:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007d1a:	0056      	.short	0x0056
 8007d1c:	00a400a4 	.word	0x00a400a4
 8007d20:	00a400a4 	.word	0x00a400a4
 8007d24:	00a4007d 	.word	0x00a4007d
 8007d28:	00a400a4 	.word	0x00a400a4
 8007d2c:	00a400a4 	.word	0x00a400a4
 8007d30:	00ce00ce 	.word	0x00ce00ce
 8007d34:	00ce00ce 	.word	0x00ce00ce
 8007d38:	00ce00ce 	.word	0x00ce00ce
 8007d3c:	00ce00ce 	.word	0x00ce00ce
 8007d40:	00ce00ce 	.word	0x00ce00ce
 8007d44:	00a400a4 	.word	0x00a400a4
 8007d48:	00a400a4 	.word	0x00a400a4
 8007d4c:	00a400a4 	.word	0x00a400a4
 8007d50:	00f500a4 	.word	0x00f500a4
 8007d54:	011f00a4 	.word	0x011f00a4
 8007d58:	00f500d8 	.word	0x00f500d8
 8007d5c:	00f500f5 	.word	0x00f500f5
 8007d60:	00a400a4 	.word	0x00a400a4
 8007d64:	00a400a4 	.word	0x00a400a4
 8007d68:	00a400a2 	.word	0x00a400a2
 8007d6c:	00dc00a4 	.word	0x00dc00a4
 8007d70:	00a400a4 	.word	0x00a400a4
 8007d74:	010f00a4 	.word	0x010f00a4
 8007d78:	00a400a4 	.word	0x00a400a4
 8007d7c:	00a400a4 	.word	0x00a400a4
 8007d80:	00a400e9 	.word	0x00a400e9
 8007d84:	011400a4 	.word	0x011400a4
 8007d88:	00a400a4 	.word	0x00a400a4
 8007d8c:	00a400a4 	.word	0x00a400a4
 8007d90:	00f500a4 	.word	0x00f500a4
 8007d94:	012100a4 	.word	0x012100a4
 8007d98:	00f500da 	.word	0x00f500da
 8007d9c:	00f500f5 	.word	0x00f500f5
 8007da0:	01450094 	.word	0x01450094
 8007da4:	00a400a2 	.word	0x00a400a2
 8007da8:	00c10085 	.word	0x00c10085
 8007dac:	00de0129 	.word	0x00de0129
 8007db0:	00a40126 	.word	0x00a40126
 8007db4:	011100a4 	.word	0x011100a4
 8007db8:	00e500be 	.word	0x00e500be
 8007dbc:	00a400a4 	.word	0x00a400a4
 8007dc0:	00a400e9 	.word	0x00a400e9
 8007dc4:	00be      	.short	0x00be
 8007dc6:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd0e      	ble.n	8007dee <__svfscanf_r+0x18a>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007dd6:	7819      	ldrb	r1, [r3, #0]
 8007dd8:	4291      	cmp	r1, r2
 8007dda:	d142      	bne.n	8007e62 <__svfscanf_r+0x1fe>
 8007ddc:	3301      	adds	r3, #1
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	3a01      	subs	r2, #1
 8007de6:	3301      	adds	r3, #1
 8007de8:	6062      	str	r2, [r4, #4]
 8007dea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dec:	e774      	b.n	8007cd8 <__svfscanf_r+0x74>
 8007dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007df0:	4621      	mov	r1, r4
 8007df2:	f001 fbf7 	bl	80095e4 <__srefill_r>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d0ea      	beq.n	8007dd0 <__svfscanf_r+0x16c>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 810a 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	bf18      	it	ne
 8007e0c:	f04f 33ff 	movne.w	r3, #4294967295
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e12:	e026      	b.n	8007e62 <__svfscanf_r+0x1fe>
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	4333      	orrs	r3, r6
 8007e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e1a:	d122      	bne.n	8007e62 <__svfscanf_r+0x1fe>
 8007e1c:	2610      	movs	r6, #16
 8007e1e:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007e22:	e76f      	b.n	8007d04 <__svfscanf_r+0xa0>
 8007e24:	0731      	lsls	r1, r6, #28
 8007e26:	d11c      	bne.n	8007e62 <__svfscanf_r+0x1fe>
 8007e28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e2c:	2b6c      	cmp	r3, #108	@ 0x6c
 8007e2e:	d105      	bne.n	8007e3c <__svfscanf_r+0x1d8>
 8007e30:	f108 0302 	add.w	r3, r8, #2
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	f046 0602 	orr.w	r6, r6, #2
 8007e3a:	e7f0      	b.n	8007e1e <__svfscanf_r+0x1ba>
 8007e3c:	f046 0601 	orr.w	r6, r6, #1
 8007e40:	e7ed      	b.n	8007e1e <__svfscanf_r+0x1ba>
 8007e42:	0732      	lsls	r2, r6, #28
 8007e44:	d10d      	bne.n	8007e62 <__svfscanf_r+0x1fe>
 8007e46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e4a:	2b68      	cmp	r3, #104	@ 0x68
 8007e4c:	bf03      	ittte	eq
 8007e4e:	f108 0302 	addeq.w	r3, r8, #2
 8007e52:	617b      	streq	r3, [r7, #20]
 8007e54:	f046 0608 	orreq.w	r6, r6, #8
 8007e58:	f046 0604 	orrne.w	r6, r6, #4
 8007e5c:	e7df      	b.n	8007e1e <__svfscanf_r+0x1ba>
 8007e5e:	0733      	lsls	r3, r6, #28
 8007e60:	d0e9      	beq.n	8007e36 <__svfscanf_r+0x1d2>
 8007e62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e64:	07da      	lsls	r2, r3, #31
 8007e66:	d405      	bmi.n	8007e74 <__svfscanf_r+0x210>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	059b      	lsls	r3, r3, #22
 8007e6c:	d402      	bmi.n	8007e74 <__svfscanf_r+0x210>
 8007e6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e70:	f7fd fe5d 	bl	8005b2e <__retarget_lock_release_recursive>
 8007e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e76:	b143      	cbz	r3, 8007e8a <__svfscanf_r+0x226>
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f001 8067 	beq.w	8008f4e <__svfscanf_r+0x12ea>
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f041 8065 	bne.w	8008f54 <__svfscanf_r+0x12f0>
 8007e8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e8c:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8007e90:	46bd      	mov	sp, r7
 8007e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e96:	0730      	lsls	r0, r6, #28
 8007e98:	d0c1      	beq.n	8007e1e <__svfscanf_r+0x1ba>
 8007e9a:	e7e2      	b.n	8007e62 <__svfscanf_r+0x1fe>
 8007e9c:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8007ea0:	d1df      	bne.n	8007e62 <__svfscanf_r+0x1fe>
 8007ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ea4:	b922      	cbnz	r2, 8007eb0 <__svfscanf_r+0x24c>
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	aa02      	add	r2, sp, #8
 8007eaa:	e9c2 3300 	strd	r3, r3, [r2]
 8007eae:	637a      	str	r2, [r7, #52]	@ 0x34
 8007eb0:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8007eb4:	e7b3      	b.n	8007e1e <__svfscanf_r+0x1ba>
 8007eb6:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8007eba:	d1d2      	bne.n	8007e62 <__svfscanf_r+0x1fe>
 8007ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	fb02 3301 	mla	r3, r2, r1, r3
 8007ec4:	3b30      	subs	r3, #48	@ 0x30
 8007ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec8:	e7a9      	b.n	8007e1e <__svfscanf_r+0x1ba>
 8007eca:	f046 0601 	orr.w	r6, r6, #1
 8007ece:	4b0b      	ldr	r3, [pc, #44]	@ (8007efc <__svfscanf_r+0x298>)
 8007ed0:	e009      	b.n	8007ee6 <__svfscanf_r+0x282>
 8007ed2:	f046 0601 	orr.w	r6, r6, #1
 8007ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f00 <__svfscanf_r+0x29c>)
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	2308      	movs	r3, #8
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	f04f 0803 	mov.w	r8, #3
 8007ee2:	e011      	b.n	8007f08 <__svfscanf_r+0x2a4>
 8007ee4:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <__svfscanf_r+0x29c>)
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	230a      	movs	r3, #10
 8007eea:	e7f7      	b.n	8007edc <__svfscanf_r+0x278>
 8007eec:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8007ef0:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <__svfscanf_r+0x29c>)
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	e7f1      	b.n	8007edc <__svfscanf_r+0x278>
 8007ef8:	0800e709 	.word	0x0800e709
 8007efc:	0800c249 	.word	0x0800c249
 8007f00:	0800c329 	.word	0x0800c329
 8007f04:	f04f 0804 	mov.w	r8, #4
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dd4e      	ble.n	8007fac <__svfscanf_r+0x348>
 8007f0e:	0673      	lsls	r3, r6, #25
 8007f10:	d407      	bmi.n	8007f22 <__svfscanf_r+0x2be>
 8007f12:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 80081ec <__svfscanf_r+0x588>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	f819 2002 	ldrb.w	r2, [r9, r2]
 8007f1e:	0710      	lsls	r0, r2, #28
 8007f20:	d44b      	bmi.n	8007fba <__svfscanf_r+0x356>
 8007f22:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f26:	f1b8 0f03 	cmp.w	r8, #3
 8007f2a:	d858      	bhi.n	8007fde <__svfscanf_r+0x37a>
 8007f2c:	e8df f018 	tbh	[pc, r8, lsl #1]
 8007f30:	036a01af 	.word	0x036a01af
 8007f34:	05e50506 	.word	0x05e50506
 8007f38:	f046 0601 	orr.w	r6, r6, #1
 8007f3c:	f04f 0802 	mov.w	r8, #2
 8007f40:	e7e2      	b.n	8007f08 <__svfscanf_r+0x2a4>
 8007f42:	6979      	ldr	r1, [r7, #20]
 8007f44:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8007f48:	f001 fbca 	bl	80096e0 <__sccl>
 8007f4c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8007f50:	6178      	str	r0, [r7, #20]
 8007f52:	f04f 0801 	mov.w	r8, #1
 8007f56:	e7d7      	b.n	8007f08 <__svfscanf_r+0x2a4>
 8007f58:	f046 0601 	orr.w	r6, r6, #1
 8007f5c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8007f60:	f04f 0800 	mov.w	r8, #0
 8007f64:	e7d0      	b.n	8007f08 <__svfscanf_r+0x2a4>
 8007f66:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8007f6a:	e7c1      	b.n	8007ef0 <__svfscanf_r+0x28c>
 8007f6c:	06f1      	lsls	r1, r6, #27
 8007f6e:	f53f ae9d 	bmi.w	8007cac <__svfscanf_r+0x48>
 8007f72:	0732      	lsls	r2, r6, #28
 8007f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f78:	d502      	bpl.n	8007f80 <__svfscanf_r+0x31c>
 8007f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e695      	b.n	8007cac <__svfscanf_r+0x48>
 8007f80:	0770      	lsls	r0, r6, #29
 8007f82:	d502      	bpl.n	8007f8a <__svfscanf_r+0x326>
 8007f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	e690      	b.n	8007cac <__svfscanf_r+0x48>
 8007f8a:	07f1      	lsls	r1, r6, #31
 8007f8c:	d502      	bpl.n	8007f94 <__svfscanf_r+0x330>
 8007f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e68b      	b.n	8007cac <__svfscanf_r+0x48>
 8007f94:	07b2      	lsls	r2, r6, #30
 8007f96:	d5fa      	bpl.n	8007f8e <__svfscanf_r+0x32a>
 8007f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f9c:	17d2      	asrs	r2, r2, #31
 8007f9e:	e9c3 1200 	strd	r1, r2, [r3]
 8007fa2:	e683      	b.n	8007cac <__svfscanf_r+0x48>
 8007fa4:	4b90      	ldr	r3, [pc, #576]	@ (80081e8 <__svfscanf_r+0x584>)
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e797      	b.n	8007edc <__svfscanf_r+0x278>
 8007fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fae:	4621      	mov	r1, r4
 8007fb0:	f001 fb18 	bl	80095e4 <__srefill_r>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d0aa      	beq.n	8007f0e <__svfscanf_r+0x2aa>
 8007fb8:	e71f      	b.n	8007dfa <__svfscanf_r+0x196>
 8007fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fbc:	3201      	adds	r2, #1
 8007fbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	3a01      	subs	r2, #1
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	6062      	str	r2, [r4, #4]
 8007fc8:	dd02      	ble.n	8007fd0 <__svfscanf_r+0x36c>
 8007fca:	3301      	adds	r3, #1
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	e7a2      	b.n	8007f16 <__svfscanf_r+0x2b2>
 8007fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	f001 fb06 	bl	80095e4 <__srefill_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d09c      	beq.n	8007f16 <__svfscanf_r+0x2b2>
 8007fdc:	e70d      	b.n	8007dfa <__svfscanf_r+0x196>
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	bf38      	it	cc
 8007fe4:	2301      	movcc	r3, #1
 8007fe6:	4698      	mov	r8, r3
 8007fe8:	f016 0301 	ands.w	r3, r6, #1
 8007fec:	f006 0b10 	and.w	fp, r6, #16
 8007ff0:	f000 80d8 	beq.w	80081a4 <__svfscanf_r+0x540>
 8007ff4:	f1bb 0f00 	cmp.w	fp, #0
 8007ff8:	d172      	bne.n	80080e0 <__svfscanf_r+0x47c>
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	0631      	lsls	r1, r6, #24
 8007ffe:	f853 5b04 	ldr.w	r5, [r3], #4
 8008002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008004:	d573      	bpl.n	80080ee <__svfscanf_r+0x48a>
 8008006:	2d00      	cmp	r5, #0
 8008008:	f43f af2b 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 800800c:	2080      	movs	r0, #128	@ 0x80
 800800e:	f7fd f87b 	bl	8005108 <malloc>
 8008012:	4606      	mov	r6, r0
 8008014:	b910      	cbnz	r0, 800801c <__svfscanf_r+0x3b8>
 8008016:	f04f 33ff 	mov.w	r3, #4294967295
 800801a:	e6f9      	b.n	8007e10 <__svfscanf_r+0x1ac>
 800801c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801e:	6028      	str	r0, [r5, #0]
 8008020:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008024:	889b      	ldrh	r3, [r3, #4]
 8008026:	4599      	cmp	r9, r3
 8008028:	d312      	bcc.n	8008050 <__svfscanf_r+0x3ec>
 800802a:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800802e:	4293      	cmp	r3, r2
 8008030:	d8f1      	bhi.n	8008016 <__svfscanf_r+0x3b2>
 8008032:	3308      	adds	r3, #8
 8008034:	fa1f fa83 	uxth.w	sl, r3
 8008038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803a:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	f003 f8d0 	bl	800b1e4 <realloc>
 8008044:	2800      	cmp	r0, #0
 8008046:	d0e6      	beq.n	8008016 <__svfscanf_r+0x3b2>
 8008048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804a:	6018      	str	r0, [r3, #0]
 800804c:	f8a3 a004 	strh.w	sl, [r3, #4]
 8008050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008052:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f109 0201 	add.w	r2, r9, #1
 800805a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800805e:	46aa      	mov	sl, r5
 8008060:	80ca      	strh	r2, [r1, #6]
 8008062:	4635      	mov	r5, r6
 8008064:	f04f 0920 	mov.w	r9, #32
 8008068:	2200      	movs	r2, #0
 800806a:	613a      	str	r2, [r7, #16]
 800806c:	f001 fd44 	bl	8009af8 <__locale_mb_cur_max>
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4290      	cmp	r0, r2
 8008074:	f43f aec1 	beq.w	8007dfa <__svfscanf_r+0x196>
 8008078:	6821      	ldr	r1, [r4, #0]
 800807a:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 800807e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008082:	f80c 0002 	strb.w	r0, [ip, r2]
 8008086:	1c53      	adds	r3, r2, #1
 8008088:	6862      	ldr	r2, [r4, #4]
 800808a:	3a01      	subs	r2, #1
 800808c:	e9c4 1200 	strd	r1, r2, [r4]
 8008090:	6a3a      	ldr	r2, [r7, #32]
 8008092:	2a03      	cmp	r2, #3
 8008094:	d102      	bne.n	800809c <__svfscanf_r+0x438>
 8008096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008098:	2a04      	cmp	r2, #4
 800809a:	d007      	beq.n	80080ac <__svfscanf_r+0x448>
 800809c:	2208      	movs	r2, #8
 800809e:	2100      	movs	r1, #0
 80080a0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80080a4:	623b      	str	r3, [r7, #32]
 80080a6:	f7fd fcb6 	bl	8005a16 <memset>
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80080b0:	9200      	str	r2, [sp, #0]
 80080b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80080ba:	4629      	mov	r1, r5
 80080bc:	f004 fa6c 	bl	800c598 <_mbrtowc_r>
 80080c0:	1c42      	adds	r2, r0, #1
 80080c2:	6238      	str	r0, [r7, #32]
 80080c4:	f43f ae99 	beq.w	8007dfa <__svfscanf_r+0x196>
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	b9b8      	cbnz	r0, 80080fc <__svfscanf_r+0x498>
 80080cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ce:	441a      	add	r2, r3
 80080d0:	4613      	mov	r3, r2
 80080d2:	f1bb 0f00 	cmp.w	fp, #0
 80080d6:	d00e      	beq.n	80080f6 <__svfscanf_r+0x492>
 80080d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080da:	f108 38ff 	add.w	r8, r8, #4294967295
 80080de:	e019      	b.n	8008114 <__svfscanf_r+0x4b0>
 80080e0:	f04f 0900 	mov.w	r9, #0
 80080e4:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80080e6:	464e      	mov	r6, r9
 80080e8:	46ca      	mov	sl, r9
 80080ea:	464d      	mov	r5, r9
 80080ec:	e7bc      	b.n	8008068 <__svfscanf_r+0x404>
 80080ee:	46d9      	mov	r9, fp
 80080f0:	465e      	mov	r6, fp
 80080f2:	46da      	mov	sl, fp
 80080f4:	e7b8      	b.n	8008068 <__svfscanf_r+0x404>
 80080f6:	f8c5 b000 	str.w	fp, [r5]
 80080fa:	e7ed      	b.n	80080d8 <__svfscanf_r+0x474>
 80080fc:	6a3a      	ldr	r2, [r7, #32]
 80080fe:	3202      	adds	r2, #2
 8008100:	d025      	beq.n	800814e <__svfscanf_r+0x4ea>
 8008102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008104:	441a      	add	r2, r3
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	633a      	str	r2, [r7, #48]	@ 0x30
 800810a:	2b03      	cmp	r3, #3
 800810c:	d1e5      	bne.n	80080da <__svfscanf_r+0x476>
 800810e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008110:	2b04      	cmp	r3, #4
 8008112:	d1e2      	bne.n	80080da <__svfscanf_r+0x476>
 8008114:	f1bb 0f00 	cmp.w	fp, #0
 8008118:	d117      	bne.n	800814a <__svfscanf_r+0x4e6>
 800811a:	f1ba 0f00 	cmp.w	sl, #0
 800811e:	d013      	beq.n	8008148 <__svfscanf_r+0x4e4>
 8008120:	1bab      	subs	r3, r5, r6
 8008122:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008126:	d80f      	bhi.n	8008148 <__svfscanf_r+0x4e4>
 8008128:	4630      	mov	r0, r6
 800812a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	f003 f858 	bl	800b1e4 <realloc>
 8008134:	4606      	mov	r6, r0
 8008136:	2800      	cmp	r0, #0
 8008138:	f43f af6d 	beq.w	8008016 <__svfscanf_r+0x3b2>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f8ca 0000 	str.w	r0, [sl]
 8008142:	18c5      	adds	r5, r0, r3
 8008144:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008148:	3504      	adds	r5, #4
 800814a:	2200      	movs	r2, #0
 800814c:	e000      	b.n	8008150 <__svfscanf_r+0x4ec>
 800814e:	461a      	mov	r2, r3
 8008150:	6863      	ldr	r3, [r4, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc14      	bgt.n	8008180 <__svfscanf_r+0x51c>
 8008156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008158:	613a      	str	r2, [r7, #16]
 800815a:	4621      	mov	r1, r4
 800815c:	f001 fa42 	bl	80095e4 <__srefill_r>
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	b168      	cbz	r0, 8008180 <__svfscanf_r+0x51c>
 8008164:	2a00      	cmp	r2, #0
 8008166:	f47f ae48 	bne.w	8007dfa <__svfscanf_r+0x196>
 800816a:	f1ba 0f00 	cmp.w	sl, #0
 800816e:	d10c      	bne.n	800818a <__svfscanf_r+0x526>
 8008170:	f1bb 0f00 	cmp.w	fp, #0
 8008174:	d102      	bne.n	800817c <__svfscanf_r+0x518>
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	3301      	adds	r3, #1
 800817a:	627b      	str	r3, [r7, #36]	@ 0x24
 800817c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800817e:	e595      	b.n	8007cac <__svfscanf_r+0x48>
 8008180:	f1b8 0f00 	cmp.w	r8, #0
 8008184:	f47f af71 	bne.w	800806a <__svfscanf_r+0x406>
 8008188:	e7ef      	b.n	800816a <__svfscanf_r+0x506>
 800818a:	1ba9      	subs	r1, r5, r6
 800818c:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8008190:	d9ee      	bls.n	8008170 <__svfscanf_r+0x50c>
 8008192:	f8da 0000 	ldr.w	r0, [sl]
 8008196:	f003 f825 	bl	800b1e4 <realloc>
 800819a:	2800      	cmp	r0, #0
 800819c:	d0e8      	beq.n	8008170 <__svfscanf_r+0x50c>
 800819e:	f8ca 0000 	str.w	r0, [sl]
 80081a2:	e7e5      	b.n	8008170 <__svfscanf_r+0x50c>
 80081a4:	f1bb 0f00 	cmp.w	fp, #0
 80081a8:	d022      	beq.n	80081f0 <__svfscanf_r+0x58c>
 80081aa:	461e      	mov	r6, r3
 80081ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081b0:	4598      	cmp	r8, r3
 80081b2:	dd11      	ble.n	80081d8 <__svfscanf_r+0x574>
 80081b4:	441a      	add	r2, r3
 80081b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b8:	6022      	str	r2, [r4, #0]
 80081ba:	4621      	mov	r1, r4
 80081bc:	441e      	add	r6, r3
 80081be:	eba8 0803 	sub.w	r8, r8, r3
 80081c2:	f001 fa0f 	bl	80095e4 <__srefill_r>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d0f0      	beq.n	80081ac <__svfscanf_r+0x548>
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	f43f ae15 	beq.w	8007dfa <__svfscanf_r+0x196>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	4433      	add	r3, r6
 80081d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081d6:	e569      	b.n	8007cac <__svfscanf_r+0x48>
 80081d8:	eba3 0308 	sub.w	r3, r3, r8
 80081dc:	4442      	add	r2, r8
 80081de:	4446      	add	r6, r8
 80081e0:	6063      	str	r3, [r4, #4]
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	e7f4      	b.n	80081d0 <__svfscanf_r+0x56c>
 80081e6:	bf00      	nop
 80081e8:	0800c249 	.word	0x0800c249
 80081ec:	0800e709 	.word	0x0800e709
 80081f0:	46a9      	mov	r9, r5
 80081f2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80081f6:	f859 5b04 	ldr.w	r5, [r9], #4
 80081fa:	d02c      	beq.n	8008256 <__svfscanf_r+0x5f2>
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	f43f ae30 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 8008202:	4640      	mov	r0, r8
 8008204:	f7fc ff80 	bl	8005108 <malloc>
 8008208:	4682      	mov	sl, r0
 800820a:	2800      	cmp	r0, #0
 800820c:	f43f af03 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8008210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008212:	6028      	str	r0, [r5, #0]
 8008214:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8008218:	889e      	ldrh	r6, [r3, #4]
 800821a:	45b3      	cmp	fp, r6
 800821c:	d311      	bcc.n	8008242 <__svfscanf_r+0x5de>
 800821e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8008222:	429e      	cmp	r6, r3
 8008224:	f63f aef7 	bhi.w	8008016 <__svfscanf_r+0x3b2>
 8008228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822a:	3608      	adds	r6, #8
 800822c:	b2b6      	uxth	r6, r6
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	00b1      	lsls	r1, r6, #2
 8008232:	f002 ffd7 	bl	800b1e4 <realloc>
 8008236:	2800      	cmp	r0, #0
 8008238:	f43f aeed 	beq.w	8008016 <__svfscanf_r+0x3b2>
 800823c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823e:	6018      	str	r0, [r3, #0]
 8008240:	809e      	strh	r6, [r3, #4]
 8008242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008244:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f10b 0201 	add.w	r2, fp, #1
 800824c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008250:	462e      	mov	r6, r5
 8008252:	80ca      	strh	r2, [r1, #6]
 8008254:	4655      	mov	r5, sl
 8008256:	9400      	str	r4, [sp, #0]
 8008258:	4629      	mov	r1, r5
 800825a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800825c:	4643      	mov	r3, r8
 800825e:	2201      	movs	r2, #1
 8008260:	f000 ff99 	bl	8009196 <_fread_r>
 8008264:	4605      	mov	r5, r0
 8008266:	2800      	cmp	r0, #0
 8008268:	f43f adc7 	beq.w	8007dfa <__svfscanf_r+0x196>
 800826c:	b13e      	cbz	r6, 800827e <__svfscanf_r+0x61a>
 800826e:	4580      	cmp	r8, r0
 8008270:	d905      	bls.n	800827e <__svfscanf_r+0x61a>
 8008272:	4601      	mov	r1, r0
 8008274:	6830      	ldr	r0, [r6, #0]
 8008276:	f002 ffb5 	bl	800b1e4 <realloc>
 800827a:	b100      	cbz	r0, 800827e <__svfscanf_r+0x61a>
 800827c:	6030      	str	r0, [r6, #0]
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	442b      	add	r3, r5
 8008282:	633b      	str	r3, [r7, #48]	@ 0x30
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	3301      	adds	r3, #1
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
 800828a:	464d      	mov	r5, r9
 800828c:	e50e      	b.n	8007cac <__svfscanf_r+0x48>
 800828e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf08      	it	eq
 8008294:	f04f 33ff 	moveq.w	r3, #4294967295
 8008298:	f016 0801 	ands.w	r8, r6, #1
 800829c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800829e:	f006 0a10 	and.w	sl, r6, #16
 80082a2:	f000 8101 	beq.w	80084a8 <__svfscanf_r+0x844>
 80082a6:	f1ba 0f00 	cmp.w	sl, #0
 80082aa:	f040 80a4 	bne.w	80083f6 <__svfscanf_r+0x792>
 80082ae:	462b      	mov	r3, r5
 80082b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	0633      	lsls	r3, r6, #24
 80082b8:	f140 80a5 	bpl.w	8008406 <__svfscanf_r+0x7a2>
 80082bc:	2d00      	cmp	r5, #0
 80082be:	f43f add0 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 80082c2:	2080      	movs	r0, #128	@ 0x80
 80082c4:	f7fc ff20 	bl	8005108 <malloc>
 80082c8:	4680      	mov	r8, r0
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f aea3 	beq.w	8008016 <__svfscanf_r+0x3b2>
 80082d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d2:	6028      	str	r0, [r5, #0]
 80082d4:	88de      	ldrh	r6, [r3, #6]
 80082d6:	889b      	ldrh	r3, [r3, #4]
 80082d8:	429e      	cmp	r6, r3
 80082da:	d314      	bcc.n	8008306 <__svfscanf_r+0x6a2>
 80082dc:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80082e0:	4293      	cmp	r3, r2
 80082e2:	f63f ae98 	bhi.w	8008016 <__svfscanf_r+0x3b2>
 80082e6:	3308      	adds	r3, #8
 80082e8:	fa1f f983 	uxth.w	r9, r3
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	f002 ff76 	bl	800b1e4 <realloc>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f43f ae8c 	beq.w	8008016 <__svfscanf_r+0x3b2>
 80082fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008300:	6018      	str	r0, [r3, #0]
 8008302:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	1c72      	adds	r2, r6, #1
 800830e:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8008312:	46ab      	mov	fp, r5
 8008314:	80ca      	strh	r2, [r1, #6]
 8008316:	4645      	mov	r5, r8
 8008318:	f04f 0920 	mov.w	r9, #32
 800831c:	2600      	movs	r6, #0
 800831e:	f001 fbeb 	bl	8009af8 <__locale_mb_cur_max>
 8008322:	42b0      	cmp	r0, r6
 8008324:	f43f ad69 	beq.w	8007dfa <__svfscanf_r+0x196>
 8008328:	1c73      	adds	r3, r6, #1
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008336:	558a      	strb	r2, [r1, r6]
 8008338:	6862      	ldr	r2, [r4, #4]
 800833a:	3a01      	subs	r2, #1
 800833c:	e9c4 3200 	strd	r3, r2, [r4]
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	2b03      	cmp	r3, #3
 8008344:	d102      	bne.n	800834c <__svfscanf_r+0x6e8>
 8008346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008348:	2b04      	cmp	r3, #4
 800834a:	d005      	beq.n	8008358 <__svfscanf_r+0x6f4>
 800834c:	2208      	movs	r2, #8
 800834e:	2100      	movs	r1, #0
 8008350:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8008354:	f7fd fb5f 	bl	8005a16 <memset>
 8008358:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008362:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8008366:	4629      	mov	r1, r5
 8008368:	f004 f916 	bl	800c598 <_mbrtowc_r>
 800836c:	1c46      	adds	r6, r0, #1
 800836e:	6238      	str	r0, [r7, #32]
 8008370:	f43f ad43 	beq.w	8007dfa <__svfscanf_r+0x196>
 8008374:	2800      	cmp	r0, #0
 8008376:	d14a      	bne.n	800840e <__svfscanf_r+0x7aa>
 8008378:	6028      	str	r0, [r5, #0]
 800837a:	682e      	ldr	r6, [r5, #0]
 800837c:	1c70      	adds	r0, r6, #1
 800837e:	d056      	beq.n	800842e <__svfscanf_r+0x7ca>
 8008380:	2208      	movs	r2, #8
 8008382:	2100      	movs	r1, #0
 8008384:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8008388:	f7fd fb45 	bl	8005a16 <memset>
 800838c:	4b9c      	ldr	r3, [pc, #624]	@ (8008600 <__svfscanf_r+0x99c>)
 800838e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	4632      	mov	r2, r6
 8008398:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800839c:	68be      	ldr	r6, [r7, #8]
 800839e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80083a2:	47b0      	blx	r6
 80083a4:	2801      	cmp	r0, #1
 80083a6:	d144      	bne.n	8008432 <__svfscanf_r+0x7ce>
 80083a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80083ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80083b0:	5c9b      	ldrb	r3, [r3, r2]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d148      	bne.n	8008448 <__svfscanf_r+0x7e4>
 80083b6:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d13a      	bne.n	8008436 <__svfscanf_r+0x7d2>
 80083c0:	f1ba 0f00 	cmp.w	sl, #0
 80083c4:	d115      	bne.n	80083f2 <__svfscanf_r+0x78e>
 80083c6:	f8c5 a000 	str.w	sl, [r5]
 80083ca:	f1bb 0f00 	cmp.w	fp, #0
 80083ce:	d00d      	beq.n	80083ec <__svfscanf_r+0x788>
 80083d0:	eba5 0108 	sub.w	r1, r5, r8
 80083d4:	108b      	asrs	r3, r1, #2
 80083d6:	3301      	adds	r3, #1
 80083d8:	4599      	cmp	r9, r3
 80083da:	d907      	bls.n	80083ec <__svfscanf_r+0x788>
 80083dc:	f8db 0000 	ldr.w	r0, [fp]
 80083e0:	3104      	adds	r1, #4
 80083e2:	f002 feff 	bl	800b1e4 <realloc>
 80083e6:	b108      	cbz	r0, 80083ec <__svfscanf_r+0x788>
 80083e8:	f8cb 0000 	str.w	r0, [fp]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	3301      	adds	r3, #1
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f2:	68fd      	ldr	r5, [r7, #12]
 80083f4:	e45a      	b.n	8007cac <__svfscanf_r+0x48>
 80083f6:	f04f 0900 	mov.w	r9, #0
 80083fa:	60fd      	str	r5, [r7, #12]
 80083fc:	46c8      	mov	r8, r9
 80083fe:	46cb      	mov	fp, r9
 8008400:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8008404:	e78a      	b.n	800831c <__svfscanf_r+0x6b8>
 8008406:	46d1      	mov	r9, sl
 8008408:	46d0      	mov	r8, sl
 800840a:	46d3      	mov	fp, sl
 800840c:	e786      	b.n	800831c <__svfscanf_r+0x6b8>
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	3302      	adds	r3, #2
 8008412:	d1b2      	bne.n	800837a <__svfscanf_r+0x716>
 8008414:	693e      	ldr	r6, [r7, #16]
 8008416:	6863      	ldr	r3, [r4, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc40      	bgt.n	800849e <__svfscanf_r+0x83a>
 800841c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800841e:	4621      	mov	r1, r4
 8008420:	f001 f8e0 	bl	80095e4 <__srefill_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	d03a      	beq.n	800849e <__svfscanf_r+0x83a>
 8008428:	2e00      	cmp	r6, #0
 800842a:	d0c9      	beq.n	80083c0 <__svfscanf_r+0x75c>
 800842c:	e4e5      	b.n	8007dfa <__svfscanf_r+0x196>
 800842e:	4632      	mov	r2, r6
 8008430:	e7bc      	b.n	80083ac <__svfscanf_r+0x748>
 8008432:	2200      	movs	r2, #0
 8008434:	e7ba      	b.n	80083ac <__svfscanf_r+0x748>
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800843a:	3b01      	subs	r3, #1
 800843c:	4622      	mov	r2, r4
 800843e:	5cf1      	ldrb	r1, [r6, r3]
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	f001 f9e1 	bl	8009808 <_ungetc_r>
 8008446:	e7b8      	b.n	80083ba <__svfscanf_r+0x756>
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4413      	add	r3, r2
 800844e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d102      	bne.n	800845c <__svfscanf_r+0x7f8>
 8008456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008458:	2b04      	cmp	r3, #4
 800845a:	d002      	beq.n	8008462 <__svfscanf_r+0x7fe>
 800845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845e:	3b01      	subs	r3, #1
 8008460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008462:	f1ba 0f00 	cmp.w	sl, #0
 8008466:	d118      	bne.n	800849a <__svfscanf_r+0x836>
 8008468:	3504      	adds	r5, #4
 800846a:	f1bb 0f00 	cmp.w	fp, #0
 800846e:	d014      	beq.n	800849a <__svfscanf_r+0x836>
 8008470:	eba5 0608 	sub.w	r6, r5, r8
 8008474:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8008478:	d80d      	bhi.n	8008496 <__svfscanf_r+0x832>
 800847a:	4640      	mov	r0, r8
 800847c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008480:	f002 feb0 	bl	800b1e4 <realloc>
 8008484:	4680      	mov	r8, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	f43f adc5 	beq.w	8008016 <__svfscanf_r+0x3b2>
 800848c:	1985      	adds	r5, r0, r6
 800848e:	f8cb 0000 	str.w	r0, [fp]
 8008492:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008496:	4656      	mov	r6, sl
 8008498:	e7bd      	b.n	8008416 <__svfscanf_r+0x7b2>
 800849a:	2600      	movs	r6, #0
 800849c:	e7bb      	b.n	8008416 <__svfscanf_r+0x7b2>
 800849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f47f af3c 	bne.w	800831e <__svfscanf_r+0x6ba>
 80084a6:	e78b      	b.n	80083c0 <__svfscanf_r+0x75c>
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	d01e      	beq.n	80084ec <__svfscanf_r+0x888>
 80084ae:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	5cb2      	ldrb	r2, [r6, r2]
 80084b8:	b91a      	cbnz	r2, 80084c2 <__svfscanf_r+0x85e>
 80084ba:	f1b8 0f00 	cmp.w	r8, #0
 80084be:	d112      	bne.n	80084e6 <__svfscanf_r+0x882>
 80084c0:	e4cf      	b.n	8007e62 <__svfscanf_r+0x1fe>
 80084c2:	3301      	adds	r3, #1
 80084c4:	6862      	ldr	r2, [r4, #4]
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	f108 0801 	add.w	r8, r8, #1
 80084ce:	3a01      	subs	r2, #1
 80084d0:	4543      	cmp	r3, r8
 80084d2:	6062      	str	r2, [r4, #4]
 80084d4:	d007      	beq.n	80084e6 <__svfscanf_r+0x882>
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	dceb      	bgt.n	80084b2 <__svfscanf_r+0x84e>
 80084da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084dc:	4621      	mov	r1, r4
 80084de:	f001 f881 	bl	80095e4 <__srefill_r>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d0e5      	beq.n	80084b2 <__svfscanf_r+0x84e>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	4443      	add	r3, r8
 80084ea:	e673      	b.n	80081d4 <__svfscanf_r+0x570>
 80084ec:	46a9      	mov	r9, r5
 80084ee:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80084f2:	f859 8b04 	ldr.w	r8, [r9], #4
 80084f6:	f000 8081 	beq.w	80085fc <__svfscanf_r+0x998>
 80084fa:	f1b8 0f00 	cmp.w	r8, #0
 80084fe:	f43f acb0 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 8008502:	2020      	movs	r0, #32
 8008504:	f7fc fe00 	bl	8005108 <malloc>
 8008508:	4606      	mov	r6, r0
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f ad83 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8008510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008512:	f8c8 0000 	str.w	r0, [r8]
 8008516:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800851a:	889d      	ldrh	r5, [r3, #4]
 800851c:	45aa      	cmp	sl, r5
 800851e:	d311      	bcc.n	8008544 <__svfscanf_r+0x8e0>
 8008520:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8008524:	429d      	cmp	r5, r3
 8008526:	f63f ad76 	bhi.w	8008016 <__svfscanf_r+0x3b2>
 800852a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852c:	3508      	adds	r5, #8
 800852e:	b2ad      	uxth	r5, r5
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	00a9      	lsls	r1, r5, #2
 8008534:	f002 fe56 	bl	800b1e4 <realloc>
 8008538:	2800      	cmp	r0, #0
 800853a:	f43f ad6c 	beq.w	8008016 <__svfscanf_r+0x3b2>
 800853e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008540:	6018      	str	r0, [r3, #0]
 8008542:	809d      	strh	r5, [r3, #4]
 8008544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008546:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f10a 0201 	add.w	r2, sl, #1
 800854e:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8008552:	46c3      	mov	fp, r8
 8008554:	80ca      	strh	r2, [r1, #6]
 8008556:	46b0      	mov	r8, r6
 8008558:	2620      	movs	r6, #32
 800855a:	4645      	mov	r5, r8
 800855c:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8008568:	b36a      	cbz	r2, 80085c6 <__svfscanf_r+0x962>
 800856a:	6862      	ldr	r2, [r4, #4]
 800856c:	3a01      	subs	r2, #1
 800856e:	6062      	str	r2, [r4, #4]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	6022      	str	r2, [r4, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	f808 3b01 	strb.w	r3, [r8], #1
 800857a:	f1bb 0f00 	cmp.w	fp, #0
 800857e:	d012      	beq.n	80085a6 <__svfscanf_r+0x942>
 8008580:	eba8 0305 	sub.w	r3, r8, r5
 8008584:	42b3      	cmp	r3, r6
 8008586:	d30e      	bcc.n	80085a6 <__svfscanf_r+0x942>
 8008588:	0076      	lsls	r6, r6, #1
 800858a:	4628      	mov	r0, r5
 800858c:	4631      	mov	r1, r6
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	f002 fe28 	bl	800b1e4 <realloc>
 8008594:	4605      	mov	r5, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f ad3d 	beq.w	8008016 <__svfscanf_r+0x3b2>
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f8cb 0000 	str.w	r0, [fp]
 80085a2:	eb00 0803 	add.w	r8, r0, r3
 80085a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a8:	3b01      	subs	r3, #1
 80085aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085ac:	d00b      	beq.n	80085c6 <__svfscanf_r+0x962>
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dcd5      	bgt.n	8008560 <__svfscanf_r+0x8fc>
 80085b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b6:	4621      	mov	r1, r4
 80085b8:	f001 f814 	bl	80095e4 <__srefill_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d0cf      	beq.n	8008560 <__svfscanf_r+0x8fc>
 80085c0:	45a8      	cmp	r8, r5
 80085c2:	f43f ac1a 	beq.w	8007dfa <__svfscanf_r+0x196>
 80085c6:	ebb8 0505 	subs.w	r5, r8, r5
 80085ca:	f43f ac4a 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 80085ce:	2300      	movs	r3, #0
 80085d0:	f888 3000 	strb.w	r3, [r8]
 80085d4:	f1bb 0f00 	cmp.w	fp, #0
 80085d8:	d009      	beq.n	80085ee <__svfscanf_r+0x98a>
 80085da:	1c69      	adds	r1, r5, #1
 80085dc:	428e      	cmp	r6, r1
 80085de:	d906      	bls.n	80085ee <__svfscanf_r+0x98a>
 80085e0:	f8db 0000 	ldr.w	r0, [fp]
 80085e4:	f002 fdfe 	bl	800b1e4 <realloc>
 80085e8:	b108      	cbz	r0, 80085ee <__svfscanf_r+0x98a>
 80085ea:	f8cb 0000 	str.w	r0, [fp]
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	3301      	adds	r3, #1
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f6:	442b      	add	r3, r5
 80085f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085fa:	e646      	b.n	800828a <__svfscanf_r+0x626>
 80085fc:	46b3      	mov	fp, r6
 80085fe:	e7ac      	b.n	800855a <__svfscanf_r+0x8f6>
 8008600:	20000554 	.word	0x20000554
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	bf08      	it	eq
 800860a:	f04f 33ff 	moveq.w	r3, #4294967295
 800860e:	f016 0901 	ands.w	r9, r6, #1
 8008612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008614:	f006 0810 	and.w	r8, r6, #16
 8008618:	f000 80ef 	beq.w	80087fa <__svfscanf_r+0xb96>
 800861c:	f1b8 0f00 	cmp.w	r8, #0
 8008620:	f040 8098 	bne.w	8008754 <__svfscanf_r+0xaf0>
 8008624:	462b      	mov	r3, r5
 8008626:	0631      	lsls	r1, r6, #24
 8008628:	f853 5b04 	ldr.w	r5, [r3], #4
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	f140 8099 	bpl.w	8008764 <__svfscanf_r+0xb00>
 8008632:	2d00      	cmp	r5, #0
 8008634:	f43f ac15 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 8008638:	2080      	movs	r0, #128	@ 0x80
 800863a:	f7fc fd65 	bl	8005108 <malloc>
 800863e:	4606      	mov	r6, r0
 8008640:	2800      	cmp	r0, #0
 8008642:	f43f ace8 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8008646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008648:	6028      	str	r0, [r5, #0]
 800864a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800864e:	889b      	ldrh	r3, [r3, #4]
 8008650:	4599      	cmp	r9, r3
 8008652:	d314      	bcc.n	800867e <__svfscanf_r+0xa1a>
 8008654:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8008658:	4293      	cmp	r3, r2
 800865a:	f63f acdc 	bhi.w	8008016 <__svfscanf_r+0x3b2>
 800865e:	3308      	adds	r3, #8
 8008660:	fa1f fa83 	uxth.w	sl, r3
 8008664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008666:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	f002 fdba 	bl	800b1e4 <realloc>
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f acd0 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8008676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	f8a3 a004 	strh.w	sl, [r3, #4]
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f109 0201 	add.w	r2, r9, #1
 8008688:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800868c:	46aa      	mov	sl, r5
 800868e:	80ca      	strh	r2, [r1, #6]
 8008690:	4635      	mov	r5, r6
 8008692:	f04f 0920 	mov.w	r9, #32
 8008696:	2300      	movs	r3, #0
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	49a7      	ldr	r1, [pc, #668]	@ (8008938 <__svfscanf_r+0xcd4>)
 800869c:	7812      	ldrb	r2, [r2, #0]
 800869e:	5c8a      	ldrb	r2, [r1, r2]
 80086a0:	0710      	lsls	r0, r2, #28
 80086a2:	d43c      	bmi.n	800871e <__svfscanf_r+0xaba>
 80086a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d039      	beq.n	800871e <__svfscanf_r+0xaba>
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	f001 fa24 	bl	8009af8 <__locale_mb_cur_max>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4298      	cmp	r0, r3
 80086b4:	f43f aba1 	beq.w	8007dfa <__svfscanf_r+0x196>
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80086be:	f812 0b01 	ldrb.w	r0, [r2], #1
 80086c2:	54c8      	strb	r0, [r1, r3]
 80086c4:	f103 0b01 	add.w	fp, r3, #1
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	e9c4 2300 	strd	r2, r3, [r4]
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d102      	bne.n	80086dc <__svfscanf_r+0xa78>
 80086d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d005      	beq.n	80086e8 <__svfscanf_r+0xa84>
 80086dc:	2208      	movs	r2, #8
 80086de:	2100      	movs	r1, #0
 80086e0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80086e4:	f7fd f997 	bl	8005a16 <memset>
 80086e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80086f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f4:	465b      	mov	r3, fp
 80086f6:	4629      	mov	r1, r5
 80086f8:	f003 ff4e 	bl	800c598 <_mbrtowc_r>
 80086fc:	1c42      	adds	r2, r0, #1
 80086fe:	6238      	str	r0, [r7, #32]
 8008700:	f43f ab7b 	beq.w	8007dfa <__svfscanf_r+0x196>
 8008704:	bb90      	cbnz	r0, 800876c <__svfscanf_r+0xb08>
 8008706:	6028      	str	r0, [r5, #0]
 8008708:	6828      	ldr	r0, [r5, #0]
 800870a:	f003 ff75 	bl	800c5f8 <iswspace>
 800870e:	4603      	mov	r3, r0
 8008710:	2800      	cmp	r0, #0
 8008712:	d047      	beq.n	80087a4 <__svfscanf_r+0xb40>
 8008714:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008718:	f1bb 0f00 	cmp.w	fp, #0
 800871c:	d139      	bne.n	8008792 <__svfscanf_r+0xb2e>
 800871e:	f1b8 0f00 	cmp.w	r8, #0
 8008722:	d114      	bne.n	800874e <__svfscanf_r+0xaea>
 8008724:	f8c5 8000 	str.w	r8, [r5]
 8008728:	f1ba 0f00 	cmp.w	sl, #0
 800872c:	d00c      	beq.n	8008748 <__svfscanf_r+0xae4>
 800872e:	1ba9      	subs	r1, r5, r6
 8008730:	108b      	asrs	r3, r1, #2
 8008732:	3301      	adds	r3, #1
 8008734:	4599      	cmp	r9, r3
 8008736:	d907      	bls.n	8008748 <__svfscanf_r+0xae4>
 8008738:	f8da 0000 	ldr.w	r0, [sl]
 800873c:	3104      	adds	r1, #4
 800873e:	f002 fd51 	bl	800b1e4 <realloc>
 8008742:	b108      	cbz	r0, 8008748 <__svfscanf_r+0xae4>
 8008744:	f8ca 0000 	str.w	r0, [sl]
 8008748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874a:	3301      	adds	r3, #1
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
 800874e:	693d      	ldr	r5, [r7, #16]
 8008750:	f7ff baac 	b.w	8007cac <__svfscanf_r+0x48>
 8008754:	f04f 0900 	mov.w	r9, #0
 8008758:	613d      	str	r5, [r7, #16]
 800875a:	464e      	mov	r6, r9
 800875c:	46ca      	mov	sl, r9
 800875e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8008762:	e798      	b.n	8008696 <__svfscanf_r+0xa32>
 8008764:	46c1      	mov	r9, r8
 8008766:	4646      	mov	r6, r8
 8008768:	46c2      	mov	sl, r8
 800876a:	e794      	b.n	8008696 <__svfscanf_r+0xa32>
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	3302      	adds	r3, #2
 8008770:	d1ca      	bne.n	8008708 <__svfscanf_r+0xaa4>
 8008772:	465b      	mov	r3, fp
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	2a00      	cmp	r2, #0
 8008778:	dc8e      	bgt.n	8008698 <__svfscanf_r+0xa34>
 800877a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	4621      	mov	r1, r4
 8008780:	f000 ff30 	bl	80095e4 <__srefill_r>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2800      	cmp	r0, #0
 8008788:	d086      	beq.n	8008698 <__svfscanf_r+0xa34>
 800878a:	2b00      	cmp	r3, #0
 800878c:	f47f ab35 	bne.w	8007dfa <__svfscanf_r+0x196>
 8008790:	e7c5      	b.n	800871e <__svfscanf_r+0xaba>
 8008792:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008798:	f813 100b 	ldrb.w	r1, [r3, fp]
 800879c:	4622      	mov	r2, r4
 800879e:	f001 f833 	bl	8009808 <_ungetc_r>
 80087a2:	e7b7      	b.n	8008714 <__svfscanf_r+0xab0>
 80087a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a6:	445a      	add	r2, fp
 80087a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80087aa:	6a3a      	ldr	r2, [r7, #32]
 80087ac:	2a03      	cmp	r2, #3
 80087ae:	d102      	bne.n	80087b6 <__svfscanf_r+0xb52>
 80087b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087b2:	2a04      	cmp	r2, #4
 80087b4:	d002      	beq.n	80087bc <__svfscanf_r+0xb58>
 80087b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b8:	3a01      	subs	r2, #1
 80087ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087bc:	f1b8 0f00 	cmp.w	r8, #0
 80087c0:	d1d8      	bne.n	8008774 <__svfscanf_r+0xb10>
 80087c2:	3504      	adds	r5, #4
 80087c4:	f1ba 0f00 	cmp.w	sl, #0
 80087c8:	d015      	beq.n	80087f6 <__svfscanf_r+0xb92>
 80087ca:	eba5 0b06 	sub.w	fp, r5, r6
 80087ce:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 80087d2:	d80e      	bhi.n	80087f2 <__svfscanf_r+0xb8e>
 80087d4:	4630      	mov	r0, r6
 80087d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087da:	f002 fd03 	bl	800b1e4 <realloc>
 80087de:	4606      	mov	r6, r0
 80087e0:	2800      	cmp	r0, #0
 80087e2:	f43f ac18 	beq.w	8008016 <__svfscanf_r+0x3b2>
 80087e6:	eb00 050b 	add.w	r5, r0, fp
 80087ea:	f8ca 0000 	str.w	r0, [sl]
 80087ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80087f2:	4643      	mov	r3, r8
 80087f4:	e7be      	b.n	8008774 <__svfscanf_r+0xb10>
 80087f6:	4653      	mov	r3, sl
 80087f8:	e7bc      	b.n	8008774 <__svfscanf_r+0xb10>
 80087fa:	f1b8 0f00 	cmp.w	r8, #0
 80087fe:	d01a      	beq.n	8008836 <__svfscanf_r+0xbd2>
 8008800:	4e4d      	ldr	r6, [pc, #308]	@ (8008938 <__svfscanf_r+0xcd4>)
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	5cb2      	ldrb	r2, [r6, r2]
 8008808:	0711      	lsls	r1, r2, #28
 800880a:	d411      	bmi.n	8008830 <__svfscanf_r+0xbcc>
 800880c:	3301      	adds	r3, #1
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008814:	f109 0901 	add.w	r9, r9, #1
 8008818:	3a01      	subs	r2, #1
 800881a:	4599      	cmp	r9, r3
 800881c:	6062      	str	r2, [r4, #4]
 800881e:	d007      	beq.n	8008830 <__svfscanf_r+0xbcc>
 8008820:	2a00      	cmp	r2, #0
 8008822:	dcee      	bgt.n	8008802 <__svfscanf_r+0xb9e>
 8008824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008826:	4621      	mov	r1, r4
 8008828:	f000 fedc 	bl	80095e4 <__srefill_r>
 800882c:	2800      	cmp	r0, #0
 800882e:	d0e8      	beq.n	8008802 <__svfscanf_r+0xb9e>
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	444b      	add	r3, r9
 8008834:	e4ce      	b.n	80081d4 <__svfscanf_r+0x570>
 8008836:	46a8      	mov	r8, r5
 8008838:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800883c:	f858 5b04 	ldr.w	r5, [r8], #4
 8008840:	d077      	beq.n	8008932 <__svfscanf_r+0xcce>
 8008842:	2d00      	cmp	r5, #0
 8008844:	f43f ab0d 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 8008848:	2020      	movs	r0, #32
 800884a:	f7fc fc5d 	bl	8005108 <malloc>
 800884e:	4681      	mov	r9, r0
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f abe0 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8008856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008858:	6028      	str	r0, [r5, #0]
 800885a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800885e:	889e      	ldrh	r6, [r3, #4]
 8008860:	45b2      	cmp	sl, r6
 8008862:	d311      	bcc.n	8008888 <__svfscanf_r+0xc24>
 8008864:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8008868:	429e      	cmp	r6, r3
 800886a:	f63f abd4 	bhi.w	8008016 <__svfscanf_r+0x3b2>
 800886e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008870:	3608      	adds	r6, #8
 8008872:	b2b6      	uxth	r6, r6
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	00b1      	lsls	r1, r6, #2
 8008878:	f002 fcb4 	bl	800b1e4 <realloc>
 800887c:	2800      	cmp	r0, #0
 800887e:	f43f abca 	beq.w	8008016 <__svfscanf_r+0x3b2>
 8008882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008884:	6018      	str	r0, [r3, #0]
 8008886:	809e      	strh	r6, [r3, #4]
 8008888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f10a 0201 	add.w	r2, sl, #1
 8008892:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8008896:	80ca      	strh	r2, [r1, #6]
 8008898:	46aa      	mov	sl, r5
 800889a:	2620      	movs	r6, #32
 800889c:	464d      	mov	r5, r9
 800889e:	46a9      	mov	r9, r5
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	4925      	ldr	r1, [pc, #148]	@ (8008938 <__svfscanf_r+0xcd4>)
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	5c8a      	ldrb	r2, [r1, r2]
 80088a8:	0712      	lsls	r2, r2, #28
 80088aa:	d428      	bmi.n	80088fe <__svfscanf_r+0xc9a>
 80088ac:	6862      	ldr	r2, [r4, #4]
 80088ae:	3a01      	subs	r2, #1
 80088b0:	6062      	str	r2, [r4, #4]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	6022      	str	r2, [r4, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f805 3b01 	strb.w	r3, [r5], #1
 80088bc:	f1ba 0f00 	cmp.w	sl, #0
 80088c0:	d010      	beq.n	80088e4 <__svfscanf_r+0xc80>
 80088c2:	eba5 0b09 	sub.w	fp, r5, r9
 80088c6:	45b3      	cmp	fp, r6
 80088c8:	d30c      	bcc.n	80088e4 <__svfscanf_r+0xc80>
 80088ca:	0076      	lsls	r6, r6, #1
 80088cc:	4648      	mov	r0, r9
 80088ce:	4631      	mov	r1, r6
 80088d0:	f002 fc88 	bl	800b1e4 <realloc>
 80088d4:	4681      	mov	r9, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f ab9d 	beq.w	8008016 <__svfscanf_r+0x3b2>
 80088dc:	eb00 050b 	add.w	r5, r0, fp
 80088e0:	f8ca 0000 	str.w	r0, [sl]
 80088e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e6:	3b01      	subs	r3, #1
 80088e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088ea:	d008      	beq.n	80088fe <__svfscanf_r+0xc9a>
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dcd6      	bgt.n	80088a0 <__svfscanf_r+0xc3c>
 80088f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f4:	4621      	mov	r1, r4
 80088f6:	f000 fe75 	bl	80095e4 <__srefill_r>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0d0      	beq.n	80088a0 <__svfscanf_r+0xc3c>
 80088fe:	2300      	movs	r3, #0
 8008900:	702b      	strb	r3, [r5, #0]
 8008902:	eba5 0509 	sub.w	r5, r5, r9
 8008906:	f1ba 0f00 	cmp.w	sl, #0
 800890a:	d009      	beq.n	8008920 <__svfscanf_r+0xcbc>
 800890c:	1c69      	adds	r1, r5, #1
 800890e:	428e      	cmp	r6, r1
 8008910:	d906      	bls.n	8008920 <__svfscanf_r+0xcbc>
 8008912:	f8da 0000 	ldr.w	r0, [sl]
 8008916:	f002 fc65 	bl	800b1e4 <realloc>
 800891a:	b108      	cbz	r0, 8008920 <__svfscanf_r+0xcbc>
 800891c:	f8ca 0000 	str.w	r0, [sl]
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	442b      	add	r3, r5
 8008924:	633b      	str	r3, [r7, #48]	@ 0x30
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	3301      	adds	r3, #1
 800892a:	627b      	str	r3, [r7, #36]	@ 0x24
 800892c:	4645      	mov	r5, r8
 800892e:	f7ff b9bd 	b.w	8007cac <__svfscanf_r+0x48>
 8008932:	46b2      	mov	sl, r6
 8008934:	e7b3      	b.n	800889e <__svfscanf_r+0xc3a>
 8008936:	bf00      	nop
 8008938:	0800e709 	.word	0x0800e709
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	3b01      	subs	r3, #1
 8008940:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8008944:	bf81      	itttt	hi
 8008946:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8008948:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 800894c:	eb03 090c 	addhi.w	r9, r3, ip
 8008950:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008954:	bf8c      	ite	hi
 8008956:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8008958:	f04f 0900 	movls.w	r9, #0
 800895c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8008960:	f04f 0a00 	mov.w	sl, #0
 8008964:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8008968:	6822      	ldr	r2, [r4, #0]
 800896a:	7813      	ldrb	r3, [r2, #0]
 800896c:	2b39      	cmp	r3, #57	@ 0x39
 800896e:	d80f      	bhi.n	8008990 <__svfscanf_r+0xd2c>
 8008970:	2b2a      	cmp	r3, #42	@ 0x2a
 8008972:	d91a      	bls.n	80089aa <__svfscanf_r+0xd46>
 8008974:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008978:	290e      	cmp	r1, #14
 800897a:	d816      	bhi.n	80089aa <__svfscanf_r+0xd46>
 800897c:	e8df f001 	tbb	[pc, r1]
 8008980:	15781578 	.word	0x15781578
 8008984:	68683f15 	.word	0x68683f15
 8008988:	68686868 	.word	0x68686868
 800898c:	7068      	.short	0x7068
 800898e:	70          	.byte	0x70
 800898f:	00          	.byte	0x00
 8008990:	2b66      	cmp	r3, #102	@ 0x66
 8008992:	d832      	bhi.n	80089fa <__svfscanf_r+0xd96>
 8008994:	2b60      	cmp	r3, #96	@ 0x60
 8008996:	d803      	bhi.n	80089a0 <__svfscanf_r+0xd3c>
 8008998:	2b46      	cmp	r3, #70	@ 0x46
 800899a:	d804      	bhi.n	80089a6 <__svfscanf_r+0xd42>
 800899c:	2b40      	cmp	r3, #64	@ 0x40
 800899e:	d904      	bls.n	80089aa <__svfscanf_r+0xd46>
 80089a0:	69f9      	ldr	r1, [r7, #28]
 80089a2:	290a      	cmp	r1, #10
 80089a4:	e062      	b.n	8008a6c <__svfscanf_r+0xe08>
 80089a6:	2b58      	cmp	r3, #88	@ 0x58
 80089a8:	d068      	beq.n	8008a7c <__svfscanf_r+0xe18>
 80089aa:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80089ae:	d011      	beq.n	80089d4 <__svfscanf_r+0xd70>
 80089b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80089b4:	4598      	cmp	r8, r3
 80089b6:	d908      	bls.n	80089ca <__svfscanf_r+0xd66>
 80089b8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 80089bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089be:	4622      	mov	r2, r4
 80089c0:	f000 ff22 	bl	8009808 <_ungetc_r>
 80089c4:	f108 39ff 	add.w	r9, r8, #4294967295
 80089c8:	46c8      	mov	r8, r9
 80089ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80089ce:	4598      	cmp	r8, r3
 80089d0:	f43f aa47 	beq.w	8007e62 <__svfscanf_r+0x1fe>
 80089d4:	f01b 0210 	ands.w	r2, fp, #16
 80089d8:	d16c      	bne.n	8008ab4 <__svfscanf_r+0xe50>
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089de:	69be      	ldr	r6, [r7, #24]
 80089e0:	f888 2000 	strb.w	r2, [r8]
 80089e4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80089e8:	47b0      	blx	r6
 80089ea:	f01b 0f20 	tst.w	fp, #32
 80089ee:	f105 0904 	add.w	r9, r5, #4
 80089f2:	d056      	beq.n	8008aa2 <__svfscanf_r+0xe3e>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	6018      	str	r0, [r3, #0]
 80089f8:	e058      	b.n	8008aac <__svfscanf_r+0xe48>
 80089fa:	2b78      	cmp	r3, #120	@ 0x78
 80089fc:	e7d4      	b.n	80089a8 <__svfscanf_r+0xd44>
 80089fe:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8008a02:	d00a      	beq.n	8008a1a <__svfscanf_r+0xdb6>
 8008a04:	69f9      	ldr	r1, [r7, #28]
 8008a06:	b919      	cbnz	r1, 8008a10 <__svfscanf_r+0xdac>
 8008a08:	2108      	movs	r1, #8
 8008a0a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 8008a0e:	61f9      	str	r1, [r7, #28]
 8008a10:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8008a14:	d004      	beq.n	8008a20 <__svfscanf_r+0xdbc>
 8008a16:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8008a1a:	f808 3b01 	strb.w	r3, [r8], #1
 8008a1e:	e00b      	b.n	8008a38 <__svfscanf_r+0xdd4>
 8008a20:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	d004      	beq.n	8008a34 <__svfscanf_r+0xdd0>
 8008a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a34:	f10a 0a01 	add.w	sl, sl, #1
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	dd28      	ble.n	8008a94 <__svfscanf_r+0xe30>
 8008a42:	3201      	adds	r2, #1
 8008a44:	6022      	str	r2, [r4, #0]
 8008a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a4c:	d18c      	bne.n	8008968 <__svfscanf_r+0xd04>
 8008a4e:	e7ac      	b.n	80089aa <__svfscanf_r+0xd46>
 8008a50:	69f8      	ldr	r0, [r7, #28]
 8008a52:	499b      	ldr	r1, [pc, #620]	@ (8008cc0 <__svfscanf_r+0x105c>)
 8008a54:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8008a58:	61f9      	str	r1, [r7, #28]
 8008a5a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 8008a5e:	e7dc      	b.n	8008a1a <__svfscanf_r+0xdb6>
 8008a60:	69f8      	ldr	r0, [r7, #28]
 8008a62:	4997      	ldr	r1, [pc, #604]	@ (8008cc0 <__svfscanf_r+0x105c>)
 8008a64:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8008a68:	61f9      	str	r1, [r7, #28]
 8008a6a:	2908      	cmp	r1, #8
 8008a6c:	dcf5      	bgt.n	8008a5a <__svfscanf_r+0xdf6>
 8008a6e:	e79c      	b.n	80089aa <__svfscanf_r+0xd46>
 8008a70:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8008a74:	d099      	beq.n	80089aa <__svfscanf_r+0xd46>
 8008a76:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8008a7a:	e7ce      	b.n	8008a1a <__svfscanf_r+0xdb6>
 8008a7c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8008a80:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008a84:	d191      	bne.n	80089aa <__svfscanf_r+0xd46>
 8008a86:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 8008a8a:	2110      	movs	r1, #16
 8008a8c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8008a90:	61f9      	str	r1, [r7, #28]
 8008a92:	e7c2      	b.n	8008a1a <__svfscanf_r+0xdb6>
 8008a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a96:	4621      	mov	r1, r4
 8008a98:	f000 fda4 	bl	80095e4 <__srefill_r>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0d2      	beq.n	8008a46 <__svfscanf_r+0xde2>
 8008aa0:	e783      	b.n	80089aa <__svfscanf_r+0xd46>
 8008aa2:	f01b 0f08 	tst.w	fp, #8
 8008aa6:	d00b      	beq.n	8008ac0 <__svfscanf_r+0xe5c>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	7018      	strb	r0, [r3, #0]
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	3301      	adds	r3, #1
 8008ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab2:	464d      	mov	r5, r9
 8008ab4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008ab8:	eba8 0803 	sub.w	r8, r8, r3
 8008abc:	44d0      	add	r8, sl
 8008abe:	e512      	b.n	80084e6 <__svfscanf_r+0x882>
 8008ac0:	f01b 0f04 	tst.w	fp, #4
 8008ac4:	d002      	beq.n	8008acc <__svfscanf_r+0xe68>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	8018      	strh	r0, [r3, #0]
 8008aca:	e7ef      	b.n	8008aac <__svfscanf_r+0xe48>
 8008acc:	f01b 0201 	ands.w	r2, fp, #1
 8008ad0:	d190      	bne.n	80089f4 <__svfscanf_r+0xd90>
 8008ad2:	f01b 0f02 	tst.w	fp, #2
 8008ad6:	d08d      	beq.n	80089f4 <__svfscanf_r+0xd90>
 8008ad8:	4b7a      	ldr	r3, [pc, #488]	@ (8008cc4 <__svfscanf_r+0x1060>)
 8008ada:	69b9      	ldr	r1, [r7, #24]
 8008adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008ae6:	d105      	bne.n	8008af4 <__svfscanf_r+0xe90>
 8008ae8:	f003 fd54 	bl	800c594 <_strtoull_r>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	e9c3 0100 	strd	r0, r1, [r3]
 8008af2:	e7db      	b.n	8008aac <__svfscanf_r+0xe48>
 8008af4:	f003 fcb6 	bl	800c464 <_strtoll_r>
 8008af8:	e7f8      	b.n	8008aec <__svfscanf_r+0xe88>
 8008afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008afc:	f001 f802 	bl	8009b04 <_localeconv_r>
 8008b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b02:	6802      	ldr	r2, [r0, #0]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	bf88      	it	hi
 8008b10:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8008b12:	f8c7 8010 	str.w	r8, [r7, #16]
 8008b16:	e9c7 8802 	strd	r8, r8, [r7, #8]
 8008b1a:	bf81      	itttt	hi
 8008b1c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8008b20:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8008b24:	181b      	addhi	r3, r3, r0
 8008b26:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8008b28:	bf98      	it	ls
 8008b2a:	2300      	movls	r3, #0
 8008b2c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8008b30:	46c3      	mov	fp, r8
 8008b32:	46c2      	mov	sl, r8
 8008b34:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8008b38:	6821      	ldr	r1, [r4, #0]
 8008b3a:	6079      	str	r1, [r7, #4]
 8008b3c:	7808      	ldrb	r0, [r1, #0]
 8008b3e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8008b42:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8008b46:	f200 8123 	bhi.w	8008d90 <__svfscanf_r+0x112c>
 8008b4a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8008b4e:	0089      	.short	0x0089
 8008b50:	00890121 	.word	0x00890121
 8008b54:	01210121 	.word	0x01210121
 8008b58:	006f004f 	.word	0x006f004f
 8008b5c:	006f006f 	.word	0x006f006f
 8008b60:	006f006f 	.word	0x006f006f
 8008b64:	006f006f 	.word	0x006f006f
 8008b68:	006f006f 	.word	0x006f006f
 8008b6c:	01210121 	.word	0x01210121
 8008b70:	01210121 	.word	0x01210121
 8008b74:	01210121 	.word	0x01210121
 8008b78:	00af0121 	.word	0x00af0121
 8008b7c:	006d006d 	.word	0x006d006d
 8008b80:	011e006d 	.word	0x011e006d
 8008b84:	012100ed 	.word	0x012100ed
 8008b88:	00d60121 	.word	0x00d60121
 8008b8c:	01210121 	.word	0x01210121
 8008b90:	01210121 	.word	0x01210121
 8008b94:	01210090 	.word	0x01210090
 8008b98:	01210104 	.word	0x01210104
 8008b9c:	01210121 	.word	0x01210121
 8008ba0:	012100f8 	.word	0x012100f8
 8008ba4:	01210121 	.word	0x01210121
 8008ba8:	00fe0073 	.word	0x00fe0073
 8008bac:	01210121 	.word	0x01210121
 8008bb0:	01210121 	.word	0x01210121
 8008bb4:	01210121 	.word	0x01210121
 8008bb8:	00af0121 	.word	0x00af0121
 8008bbc:	006d006d 	.word	0x006d006d
 8008bc0:	011e006d 	.word	0x011e006d
 8008bc4:	012100ed 	.word	0x012100ed
 8008bc8:	00d60121 	.word	0x00d60121
 8008bcc:	01210121 	.word	0x01210121
 8008bd0:	01210121 	.word	0x01210121
 8008bd4:	01210090 	.word	0x01210090
 8008bd8:	01210104 	.word	0x01210104
 8008bdc:	01210121 	.word	0x01210121
 8008be0:	012100f8 	.word	0x012100f8
 8008be4:	01210121 	.word	0x01210121
 8008be8:	00fe0073 	.word	0x00fe0073
 8008bec:	05f1      	lsls	r1, r6, #23
 8008bee:	d51d      	bpl.n	8008c2c <__svfscanf_r+0xfc8>
 8008bf0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8008bf4:	f10a 0a01 	add.w	sl, sl, #1
 8008bf8:	b11b      	cbz	r3, 8008c02 <__svfscanf_r+0xf9e>
 8008bfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c06:	3001      	adds	r0, #1
 8008c08:	6338      	str	r0, [r7, #48]	@ 0x30
 8008c0a:	6860      	ldr	r0, [r4, #4]
 8008c0c:	3801      	subs	r0, #1
 8008c0e:	3901      	subs	r1, #1
 8008c10:	2800      	cmp	r0, #0
 8008c12:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008c14:	6060      	str	r0, [r4, #4]
 8008c16:	f340 80cc 	ble.w	8008db2 <__svfscanf_r+0x114e>
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	6021      	str	r1, [r4, #0]
 8008c20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d188      	bne.n	8008b38 <__svfscanf_r+0xed4>
 8008c26:	e052      	b.n	8008cce <__svfscanf_r+0x106a>
 8008c28:	0531      	lsls	r1, r6, #20
 8008c2a:	d550      	bpl.n	8008cce <__svfscanf_r+0x106a>
 8008c2c:	eb1b 0c08 	adds.w	ip, fp, r8
 8008c30:	d041      	beq.n	8008cb6 <__svfscanf_r+0x1052>
 8008c32:	e04c      	b.n	8008cce <__svfscanf_r+0x106a>
 8008c34:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8008c38:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8008c3c:	d147      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008c3e:	f1ba 0f01 	cmp.w	sl, #1
 8008c42:	d144      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008c44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c46:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8008c4a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8008c4e:	3901      	subs	r1, #1
 8008c50:	f809 cb01 	strb.w	ip, [r9], #1
 8008c54:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8008c58:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008c5a:	f04f 0a00 	mov.w	sl, #0
 8008c5e:	e003      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008c60:	0631      	lsls	r1, r6, #24
 8008c62:	d534      	bpl.n	8008cce <__svfscanf_r+0x106a>
 8008c64:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8008c68:	f809 0b01 	strb.w	r0, [r9], #1
 8008c6c:	e7c9      	b.n	8008c02 <__svfscanf_r+0xf9e>
 8008c6e:	f1bb 0f00 	cmp.w	fp, #0
 8008c72:	d10c      	bne.n	8008c8e <__svfscanf_r+0x102a>
 8008c74:	f1ba 0f00 	cmp.w	sl, #0
 8008c78:	d10d      	bne.n	8008c96 <__svfscanf_r+0x1032>
 8008c7a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8008c7e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8008c82:	d108      	bne.n	8008c96 <__svfscanf_r+0x1032>
 8008c84:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8008c88:	f04f 0b01 	mov.w	fp, #1
 8008c8c:	e7ec      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008c8e:	f1bb 0f02 	cmp.w	fp, #2
 8008c92:	f000 8088 	beq.w	8008da6 <__svfscanf_r+0x1142>
 8008c96:	f1b8 0f01 	cmp.w	r8, #1
 8008c9a:	d002      	beq.n	8008ca2 <__svfscanf_r+0x103e>
 8008c9c:	f1b8 0f04 	cmp.w	r8, #4
 8008ca0:	d115      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008ca2:	f108 0801 	add.w	r8, r8, #1
 8008ca6:	fa5f f888 	uxtb.w	r8, r8
 8008caa:	e7dd      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008cac:	0531      	lsls	r1, r6, #20
 8008cae:	d50b      	bpl.n	8008cc8 <__svfscanf_r+0x1064>
 8008cb0:	eb1b 0c08 	adds.w	ip, fp, r8
 8008cb4:	d108      	bne.n	8008cc8 <__svfscanf_r+0x1064>
 8008cb6:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 8008cba:	46e0      	mov	r8, ip
 8008cbc:	46e3      	mov	fp, ip
 8008cbe:	e7d3      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008cc0:	0800e4ba 	.word	0x0800e4ba
 8008cc4:	0800c329 	.word	0x0800c329
 8008cc8:	f1bb 0f01 	cmp.w	fp, #1
 8008ccc:	d06e      	beq.n	8008dac <__svfscanf_r+0x1148>
 8008cce:	f1ba 0f00 	cmp.w	sl, #0
 8008cd2:	d001      	beq.n	8008cd8 <__svfscanf_r+0x1074>
 8008cd4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8008cd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cdc:	f1bb 0f01 	cmp.w	fp, #1
 8008ce0:	d873      	bhi.n	8008dca <__svfscanf_r+0x1166>
 8008ce2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8008ce6:	45a9      	cmp	r9, r5
 8008ce8:	f67f a8bb 	bls.w	8007e62 <__svfscanf_r+0x1fe>
 8008cec:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008cf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	f000 fd88 	bl	8009808 <_ungetc_r>
 8008cf8:	e7f5      	b.n	8008ce6 <__svfscanf_r+0x1082>
 8008cfa:	f1b8 0f00 	cmp.w	r8, #0
 8008cfe:	d10d      	bne.n	8008d1c <__svfscanf_r+0x10b8>
 8008d00:	f1ba 0f00 	cmp.w	sl, #0
 8008d04:	d1e6      	bne.n	8008cd4 <__svfscanf_r+0x1070>
 8008d06:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8008d0a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8008d0e:	f040 8125 	bne.w	8008f5c <__svfscanf_r+0x12f8>
 8008d12:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8008d16:	f04f 0801 	mov.w	r8, #1
 8008d1a:	e7a5      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008d1c:	f1b8 0f03 	cmp.w	r8, #3
 8008d20:	d0bf      	beq.n	8008ca2 <__svfscanf_r+0x103e>
 8008d22:	f1b8 0f05 	cmp.w	r8, #5
 8008d26:	e7bb      	b.n	8008ca0 <__svfscanf_r+0x103c>
 8008d28:	0531      	lsls	r1, r6, #20
 8008d2a:	d502      	bpl.n	8008d32 <__svfscanf_r+0x10ce>
 8008d2c:	eb1b 0c08 	adds.w	ip, fp, r8
 8008d30:	d0c1      	beq.n	8008cb6 <__svfscanf_r+0x1052>
 8008d32:	f1b8 0f02 	cmp.w	r8, #2
 8008d36:	d1ca      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008d38:	f04f 0803 	mov.w	r8, #3
 8008d3c:	e794      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008d3e:	f1b8 0f06 	cmp.w	r8, #6
 8008d42:	d1c4      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008d44:	f04f 0807 	mov.w	r8, #7
 8008d48:	e78e      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008d4a:	f1b8 0f07 	cmp.w	r8, #7
 8008d4e:	d1be      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008d50:	f04f 0808 	mov.w	r8, #8
 8008d54:	e788      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008d56:	0531      	lsls	r1, r6, #20
 8008d58:	d5b9      	bpl.n	8008cce <__svfscanf_r+0x106a>
 8008d5a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 8008d5e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8008d62:	d005      	beq.n	8008d70 <__svfscanf_r+0x110c>
 8008d64:	0571      	lsls	r1, r6, #21
 8008d66:	d5b2      	bpl.n	8008cce <__svfscanf_r+0x106a>
 8008d68:	f1ba 0f00 	cmp.w	sl, #0
 8008d6c:	f000 80f6 	beq.w	8008f5c <__svfscanf_r+0x12f8>
 8008d70:	05b1      	lsls	r1, r6, #22
 8008d72:	bf58      	it	pl
 8008d74:	6939      	ldrpl	r1, [r7, #16]
 8008d76:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 8008d7a:	bf5c      	itt	pl
 8008d7c:	ebaa 0101 	subpl.w	r1, sl, r1
 8008d80:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8008d84:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8008d88:	e767      	b.n	8008c5a <__svfscanf_r+0xff6>
 8008d8a:	0531      	lsls	r1, r6, #20
 8008d8c:	d5e5      	bpl.n	8008d5a <__svfscanf_r+0x10f6>
 8008d8e:	e74d      	b.n	8008c2c <__svfscanf_r+0xfc8>
 8008d90:	f892 c000 	ldrb.w	ip, [r2]
 8008d94:	4584      	cmp	ip, r0
 8008d96:	d19a      	bne.n	8008cce <__svfscanf_r+0x106a>
 8008d98:	05b1      	lsls	r1, r6, #22
 8008d9a:	d598      	bpl.n	8008cce <__svfscanf_r+0x106a>
 8008d9c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8008da0:	f8c7 a010 	str.w	sl, [r7, #16]
 8008da4:	e760      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008da6:	f04f 0b03 	mov.w	fp, #3
 8008daa:	e75d      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008dac:	f04f 0b02 	mov.w	fp, #2
 8008db0:	e75a      	b.n	8008c68 <__svfscanf_r+0x1004>
 8008db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008db4:	4621      	mov	r1, r4
 8008db6:	e9c7 2300 	strd	r2, r3, [r7]
 8008dba:	f000 fc13 	bl	80095e4 <__srefill_r>
 8008dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f43f af2c 	beq.w	8008c20 <__svfscanf_r+0xfbc>
 8008dc8:	e781      	b.n	8008cce <__svfscanf_r+0x106a>
 8008dca:	f108 33ff 	add.w	r3, r8, #4294967295
 8008dce:	2b06      	cmp	r3, #6
 8008dd0:	d827      	bhi.n	8008e22 <__svfscanf_r+0x11be>
 8008dd2:	f1b8 0f02 	cmp.w	r8, #2
 8008dd6:	d834      	bhi.n	8008e42 <__svfscanf_r+0x11de>
 8008dd8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8008ddc:	45a9      	cmp	r9, r5
 8008dde:	f67f a840 	bls.w	8007e62 <__svfscanf_r+0x1fe>
 8008de2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008de6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008de8:	4622      	mov	r2, r4
 8008dea:	f000 fd0d 	bl	8009808 <_ungetc_r>
 8008dee:	e7f5      	b.n	8008ddc <__svfscanf_r+0x1178>
 8008df0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008df8:	4622      	mov	r2, r4
 8008dfa:	f000 fd05 	bl	8009808 <_ungetc_r>
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e04:	fa5f fb8b 	uxtb.w	fp, fp
 8008e08:	f1bb 0f02 	cmp.w	fp, #2
 8008e0c:	d1f0      	bne.n	8008df0 <__svfscanf_r+0x118c>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	f1a8 0803 	sub.w	r8, r8, #3
 8008e14:	fa5f f888 	uxtb.w	r8, r8
 8008e18:	eba3 0308 	sub.w	r3, r3, r8
 8008e1c:	eba9 0908 	sub.w	r9, r9, r8
 8008e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e22:	05f2      	lsls	r2, r6, #23
 8008e24:	d52d      	bpl.n	8008e82 <__svfscanf_r+0x121e>
 8008e26:	0573      	lsls	r3, r6, #21
 8008e28:	d50e      	bpl.n	8008e48 <__svfscanf_r+0x11e4>
 8008e2a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8008e2e:	45a9      	cmp	r9, r5
 8008e30:	f67f a817 	bls.w	8007e62 <__svfscanf_r+0x1fe>
 8008e34:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	f000 fce4 	bl	8009808 <_ungetc_r>
 8008e40:	e7f5      	b.n	8008e2e <__svfscanf_r+0x11ca>
 8008e42:	46c3      	mov	fp, r8
 8008e44:	464b      	mov	r3, r9
 8008e46:	e7db      	b.n	8008e00 <__svfscanf_r+0x119c>
 8008e48:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	2965      	cmp	r1, #101	@ 0x65
 8008e50:	f109 38ff 	add.w	r8, r9, #4294967295
 8008e54:	f103 3bff 	add.w	fp, r3, #4294967295
 8008e58:	d00c      	beq.n	8008e74 <__svfscanf_r+0x1210>
 8008e5a:	2945      	cmp	r1, #69	@ 0x45
 8008e5c:	d00a      	beq.n	8008e74 <__svfscanf_r+0x1210>
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e60:	4622      	mov	r2, r4
 8008e62:	f000 fcd1 	bl	8009808 <_ungetc_r>
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8008e6c:	f1a9 0802 	sub.w	r8, r9, #2
 8008e70:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e76:	4622      	mov	r2, r4
 8008e78:	f000 fcc6 	bl	8009808 <_ungetc_r>
 8008e7c:	46c1      	mov	r9, r8
 8008e7e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8008e82:	f016 0210 	ands.w	r2, r6, #16
 8008e86:	f47e af11 	bne.w	8007cac <__svfscanf_r+0x48>
 8008e8a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 8008e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e92:	f889 2000 	strb.w	r2, [r9]
 8008e96:	d119      	bne.n	8008ecc <__svfscanf_r+0x1268>
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4553      	cmp	r3, sl
 8008e9c:	eba3 020a 	sub.w	r2, r3, sl
 8008ea0:	d121      	bne.n	8008ee6 <__svfscanf_r+0x1282>
 8008ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008eaa:	f003 f94d 	bl	800c148 <_strtod_r>
 8008eae:	07f0      	lsls	r0, r6, #31
 8008eb0:	ec59 8b10 	vmov	r8, r9, d0
 8008eb4:	f105 0a04 	add.w	sl, r5, #4
 8008eb8:	d520      	bpl.n	8008efc <__svfscanf_r+0x1298>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	ed83 0b00 	vstr	d0, [r3]
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ec6:	4655      	mov	r5, sl
 8008ec8:	f7fe bef0 	b.w	8007cac <__svfscanf_r+0x48>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0e7      	beq.n	8008ea2 <__svfscanf_r+0x123e>
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed6:	230a      	movs	r3, #10
 8008ed8:	3101      	adds	r1, #1
 8008eda:	f003 f9b5 	bl	800c248 <_strtol_r>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8008ee4:	1ac2      	subs	r2, r0, r3
 8008ee6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 8008eea:	4599      	cmp	r9, r3
 8008eec:	bf28      	it	cs
 8008eee:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8008ef2:	491c      	ldr	r1, [pc, #112]	@ (8008f64 <__svfscanf_r+0x1300>)
 8008ef4:	4648      	mov	r0, r9
 8008ef6:	f000 fc2d 	bl	8009754 <sprintf>
 8008efa:	e7d2      	b.n	8008ea2 <__svfscanf_r+0x123e>
 8008efc:	07b1      	lsls	r1, r6, #30
 8008efe:	682d      	ldr	r5, [r5, #0]
 8008f00:	d502      	bpl.n	8008f08 <__svfscanf_r+0x12a4>
 8008f02:	ed85 0b00 	vstr	d0, [r5]
 8008f06:	e7db      	b.n	8008ec0 <__svfscanf_r+0x125c>
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4649      	mov	r1, r9
 8008f10:	f7f7 fe34 	bl	8000b7c <__aeabi_dcmpun>
 8008f14:	b128      	cbz	r0, 8008f22 <__svfscanf_r+0x12be>
 8008f16:	4814      	ldr	r0, [pc, #80]	@ (8008f68 <__svfscanf_r+0x1304>)
 8008f18:	f000 fe3c 	bl	8009b94 <nanf>
 8008f1c:	ed85 0a00 	vstr	s0, [r5]
 8008f20:	e7ce      	b.n	8008ec0 <__svfscanf_r+0x125c>
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 fe87 	bl	8000c38 <__aeabi_d2f>
 8008f2a:	6028      	str	r0, [r5, #0]
 8008f2c:	e7c8      	b.n	8008ec0 <__svfscanf_r+0x125c>
 8008f2e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	f7fc f8f0 	bl	8005118 <free>
 8008f38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f3c:	3401      	adds	r4, #1
 8008f3e:	601e      	str	r6, [r3, #0]
 8008f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f42:	681d      	ldr	r5, [r3, #0]
 8008f44:	88db      	ldrh	r3, [r3, #6]
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	dcf1      	bgt.n	8008f2e <__svfscanf_r+0x12ca>
 8008f4a:	f7fe bf99 	b.w	8007e80 <__svfscanf_r+0x21c>
 8008f4e:	2400      	movs	r4, #0
 8008f50:	4626      	mov	r6, r4
 8008f52:	e7f5      	b.n	8008f40 <__svfscanf_r+0x12dc>
 8008f54:	f7fc f8e0 	bl	8005118 <free>
 8008f58:	f7fe bf97 	b.w	8007e8a <__svfscanf_r+0x226>
 8008f5c:	f04f 0a00 	mov.w	sl, #0
 8008f60:	e6ba      	b.n	8008cd8 <__svfscanf_r+0x1074>
 8008f62:	bf00      	nop
 8008f64:	0800e4b4 	.word	0x0800e4b4
 8008f68:	0800e864 	.word	0x0800e864

08008f6c <_vfscanf_r>:
 8008f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	460d      	mov	r5, r1
 8008f72:	4616      	mov	r6, r2
 8008f74:	461f      	mov	r7, r3
 8008f76:	4604      	mov	r4, r0
 8008f78:	b118      	cbz	r0, 8008f82 <_vfscanf_r+0x16>
 8008f7a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f7c:	b90b      	cbnz	r3, 8008f82 <_vfscanf_r+0x16>
 8008f7e:	f7fc fba5 	bl	80056cc <__sinit>
 8008f82:	463b      	mov	r3, r7
 8008f84:	4632      	mov	r2, r6
 8008f86:	4629      	mov	r1, r5
 8008f88:	4620      	mov	r0, r4
 8008f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	f7fe be69 	b.w	8007c64 <__svfscanf_r>

08008f92 <_fclose_r>:
 8008f92:	b570      	push	{r4, r5, r6, lr}
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b1b1      	cbz	r1, 8008fc8 <_fclose_r+0x36>
 8008f9a:	b118      	cbz	r0, 8008fa4 <_fclose_r+0x12>
 8008f9c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f9e:	b90b      	cbnz	r3, 8008fa4 <_fclose_r+0x12>
 8008fa0:	f7fc fb94 	bl	80056cc <__sinit>
 8008fa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fa6:	07de      	lsls	r6, r3, #31
 8008fa8:	d405      	bmi.n	8008fb6 <_fclose_r+0x24>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	0598      	lsls	r0, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_fclose_r+0x24>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fb2:	f7fc fdbb 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8008fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fba:	b943      	cbnz	r3, 8008fce <_fclose_r+0x3c>
 8008fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fbe:	07d9      	lsls	r1, r3, #31
 8008fc0:	d402      	bmi.n	8008fc8 <_fclose_r+0x36>
 8008fc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fc4:	f7fc fdb3 	bl	8005b2e <__retarget_lock_release_recursive>
 8008fc8:	2600      	movs	r6, #0
 8008fca:	4630      	mov	r0, r6
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 f833 	bl	800903c <__sflush_r>
 8008fd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008fd8:	4606      	mov	r6, r0
 8008fda:	b133      	cbz	r3, 8008fea <_fclose_r+0x58>
 8008fdc:	69e1      	ldr	r1, [r4, #28]
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4798      	blx	r3
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	bfb8      	it	lt
 8008fe6:	f04f 36ff 	movlt.w	r6, #4294967295
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	061a      	lsls	r2, r3, #24
 8008fee:	d503      	bpl.n	8008ff8 <_fclose_r+0x66>
 8008ff0:	6921      	ldr	r1, [r4, #16]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7fc fe0e 	bl	8005c14 <_free_r>
 8008ff8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008ffa:	b141      	cbz	r1, 800900e <_fclose_r+0x7c>
 8008ffc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009000:	4299      	cmp	r1, r3
 8009002:	d002      	beq.n	800900a <_fclose_r+0x78>
 8009004:	4628      	mov	r0, r5
 8009006:	f7fc fe05 	bl	8005c14 <_free_r>
 800900a:	2300      	movs	r3, #0
 800900c:	6323      	str	r3, [r4, #48]	@ 0x30
 800900e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009010:	b121      	cbz	r1, 800901c <_fclose_r+0x8a>
 8009012:	4628      	mov	r0, r5
 8009014:	f7fc fdfe 	bl	8005c14 <_free_r>
 8009018:	2300      	movs	r3, #0
 800901a:	6463      	str	r3, [r4, #68]	@ 0x44
 800901c:	f7fc fb4a 	bl	80056b4 <__sfp_lock_acquire>
 8009020:	2300      	movs	r3, #0
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009026:	07db      	lsls	r3, r3, #31
 8009028:	d402      	bmi.n	8009030 <_fclose_r+0x9e>
 800902a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800902c:	f7fc fd7f 	bl	8005b2e <__retarget_lock_release_recursive>
 8009030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009032:	f7fc fd7a 	bl	8005b2a <__retarget_lock_close_recursive>
 8009036:	f7fc fb43 	bl	80056c0 <__sfp_lock_release>
 800903a:	e7c6      	b.n	8008fca <_fclose_r+0x38>

0800903c <__sflush_r>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	4605      	mov	r5, r0
 8009042:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8009046:	0706      	lsls	r6, r0, #28
 8009048:	460c      	mov	r4, r1
 800904a:	d457      	bmi.n	80090fc <__sflush_r+0xc0>
 800904c:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8009050:	818b      	strh	r3, [r1, #12]
 8009052:	684b      	ldr	r3, [r1, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dc02      	bgt.n	800905e <__sflush_r+0x22>
 8009058:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800905a:	2b00      	cmp	r3, #0
 800905c:	dd4c      	ble.n	80090f8 <__sflush_r+0xbc>
 800905e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009060:	2e00      	cmp	r6, #0
 8009062:	d049      	beq.n	80090f8 <__sflush_r+0xbc>
 8009064:	2300      	movs	r3, #0
 8009066:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800906a:	682f      	ldr	r7, [r5, #0]
 800906c:	69e1      	ldr	r1, [r4, #28]
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	d034      	beq.n	80090dc <__sflush_r+0xa0>
 8009072:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	0759      	lsls	r1, r3, #29
 8009078:	d505      	bpl.n	8009086 <__sflush_r+0x4a>
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	1ad2      	subs	r2, r2, r3
 800907e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009080:	b10b      	cbz	r3, 8009086 <__sflush_r+0x4a>
 8009082:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	2300      	movs	r3, #0
 8009088:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800908a:	69e1      	ldr	r1, [r4, #28]
 800908c:	4628      	mov	r0, r5
 800908e:	47b0      	blx	r6
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d106      	bne.n	80090a2 <__sflush_r+0x66>
 8009094:	682a      	ldr	r2, [r5, #0]
 8009096:	2a1d      	cmp	r2, #29
 8009098:	d848      	bhi.n	800912c <__sflush_r+0xf0>
 800909a:	4b2b      	ldr	r3, [pc, #172]	@ (8009148 <__sflush_r+0x10c>)
 800909c:	4113      	asrs	r3, r2
 800909e:	07de      	lsls	r6, r3, #31
 80090a0:	d444      	bmi.n	800912c <__sflush_r+0xf0>
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090aa:	81a2      	strh	r2, [r4, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	6062      	str	r2, [r4, #4]
 80090b0:	04d9      	lsls	r1, r3, #19
 80090b2:	6922      	ldr	r2, [r4, #16]
 80090b4:	6022      	str	r2, [r4, #0]
 80090b6:	d504      	bpl.n	80090c2 <__sflush_r+0x86>
 80090b8:	1c42      	adds	r2, r0, #1
 80090ba:	d101      	bne.n	80090c0 <__sflush_r+0x84>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b903      	cbnz	r3, 80090c2 <__sflush_r+0x86>
 80090c0:	6520      	str	r0, [r4, #80]	@ 0x50
 80090c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090c4:	602f      	str	r7, [r5, #0]
 80090c6:	b1b9      	cbz	r1, 80090f8 <__sflush_r+0xbc>
 80090c8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80090cc:	4299      	cmp	r1, r3
 80090ce:	d002      	beq.n	80090d6 <__sflush_r+0x9a>
 80090d0:	4628      	mov	r0, r5
 80090d2:	f7fc fd9f 	bl	8005c14 <_free_r>
 80090d6:	2300      	movs	r3, #0
 80090d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80090da:	e00d      	b.n	80090f8 <__sflush_r+0xbc>
 80090dc:	2301      	movs	r3, #1
 80090de:	4628      	mov	r0, r5
 80090e0:	47b0      	blx	r6
 80090e2:	4602      	mov	r2, r0
 80090e4:	1c50      	adds	r0, r2, #1
 80090e6:	d1c5      	bne.n	8009074 <__sflush_r+0x38>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0c2      	beq.n	8009074 <__sflush_r+0x38>
 80090ee:	2b1d      	cmp	r3, #29
 80090f0:	d001      	beq.n	80090f6 <__sflush_r+0xba>
 80090f2:	2b16      	cmp	r3, #22
 80090f4:	d11a      	bne.n	800912c <__sflush_r+0xf0>
 80090f6:	602f      	str	r7, [r5, #0]
 80090f8:	2000      	movs	r0, #0
 80090fa:	e01e      	b.n	800913a <__sflush_r+0xfe>
 80090fc:	690f      	ldr	r7, [r1, #16]
 80090fe:	2f00      	cmp	r7, #0
 8009100:	d0fa      	beq.n	80090f8 <__sflush_r+0xbc>
 8009102:	0783      	lsls	r3, r0, #30
 8009104:	680e      	ldr	r6, [r1, #0]
 8009106:	bf08      	it	eq
 8009108:	694b      	ldreq	r3, [r1, #20]
 800910a:	600f      	str	r7, [r1, #0]
 800910c:	bf18      	it	ne
 800910e:	2300      	movne	r3, #0
 8009110:	eba6 0807 	sub.w	r8, r6, r7
 8009114:	608b      	str	r3, [r1, #8]
 8009116:	f1b8 0f00 	cmp.w	r8, #0
 800911a:	dded      	ble.n	80090f8 <__sflush_r+0xbc>
 800911c:	69e1      	ldr	r1, [r4, #28]
 800911e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8009120:	4643      	mov	r3, r8
 8009122:	463a      	mov	r2, r7
 8009124:	4628      	mov	r0, r5
 8009126:	47b0      	blx	r6
 8009128:	2800      	cmp	r0, #0
 800912a:	dc08      	bgt.n	800913e <__sflush_r+0x102>
 800912c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913e:	4407      	add	r7, r0
 8009140:	eba8 0800 	sub.w	r8, r8, r0
 8009144:	e7e7      	b.n	8009116 <__sflush_r+0xda>
 8009146:	bf00      	nop
 8009148:	dfbffffe 	.word	0xdfbffffe

0800914c <_fflush_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	460c      	mov	r4, r1
 8009150:	4605      	mov	r5, r0
 8009152:	b118      	cbz	r0, 800915c <_fflush_r+0x10>
 8009154:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009156:	b90b      	cbnz	r3, 800915c <_fflush_r+0x10>
 8009158:	f7fc fab8 	bl	80056cc <__sinit>
 800915c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009160:	b1b8      	cbz	r0, 8009192 <_fflush_r+0x46>
 8009162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009164:	07db      	lsls	r3, r3, #31
 8009166:	d404      	bmi.n	8009172 <_fflush_r+0x26>
 8009168:	0581      	lsls	r1, r0, #22
 800916a:	d402      	bmi.n	8009172 <_fflush_r+0x26>
 800916c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800916e:	f7fc fcdd 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8009172:	4628      	mov	r0, r5
 8009174:	4621      	mov	r1, r4
 8009176:	f7ff ff61 	bl	800903c <__sflush_r>
 800917a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800917c:	07da      	lsls	r2, r3, #31
 800917e:	4605      	mov	r5, r0
 8009180:	d405      	bmi.n	800918e <_fflush_r+0x42>
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	059b      	lsls	r3, r3, #22
 8009186:	d402      	bmi.n	800918e <_fflush_r+0x42>
 8009188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800918a:	f7fc fcd0 	bl	8005b2e <__retarget_lock_release_recursive>
 800918e:	4628      	mov	r0, r5
 8009190:	bd38      	pop	{r3, r4, r5, pc}
 8009192:	4605      	mov	r5, r0
 8009194:	e7fb      	b.n	800918e <_fflush_r+0x42>

08009196 <_fread_r>:
 8009196:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919a:	4699      	mov	r9, r3
 800919c:	4693      	mov	fp, r2
 800919e:	4613      	mov	r3, r2
 80091a0:	464a      	mov	r2, r9
 80091a2:	4353      	muls	r3, r2
 80091a4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80091a6:	4682      	mov	sl, r0
 80091a8:	460f      	mov	r7, r1
 80091aa:	4698      	mov	r8, r3
 80091ac:	d051      	beq.n	8009252 <_fread_r+0xbc>
 80091ae:	b118      	cbz	r0, 80091b8 <_fread_r+0x22>
 80091b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80091b2:	b90b      	cbnz	r3, 80091b8 <_fread_r+0x22>
 80091b4:	f7fc fa8a 	bl	80056cc <__sinit>
 80091b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091ba:	07db      	lsls	r3, r3, #31
 80091bc:	d405      	bmi.n	80091ca <_fread_r+0x34>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	059e      	lsls	r6, r3, #22
 80091c2:	d402      	bmi.n	80091ca <_fread_r+0x34>
 80091c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c6:	f7fc fcb1 	bl	8005b2c <__retarget_lock_acquire_recursive>
 80091ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ce:	049d      	lsls	r5, r3, #18
 80091d0:	d406      	bmi.n	80091e0 <_fread_r+0x4a>
 80091d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091de:	6663      	str	r3, [r4, #100]	@ 0x64
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	da01      	bge.n	80091ea <_fread_r+0x54>
 80091e6:	2300      	movs	r3, #0
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	4646      	mov	r6, r8
 80091ec:	e9d4 1500 	ldrd	r1, r5, [r4]
 80091f0:	42ae      	cmp	r6, r5
 80091f2:	d811      	bhi.n	8009218 <_fread_r+0x82>
 80091f4:	4632      	mov	r2, r6
 80091f6:	4638      	mov	r0, r7
 80091f8:	f000 fcbe 	bl	8009b78 <memcpy>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	1b9b      	subs	r3, r3, r6
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	4433      	add	r3, r6
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800920a:	07da      	lsls	r2, r3, #31
 800920c:	d402      	bmi.n	8009214 <_fread_r+0x7e>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	059b      	lsls	r3, r3, #22
 8009212:	d524      	bpl.n	800925e <_fread_r+0xc8>
 8009214:	46c8      	mov	r8, r9
 8009216:	e01c      	b.n	8009252 <_fread_r+0xbc>
 8009218:	462a      	mov	r2, r5
 800921a:	4638      	mov	r0, r7
 800921c:	f000 fcac 	bl	8009b78 <memcpy>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	442b      	add	r3, r5
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	4621      	mov	r1, r4
 8009228:	1b73      	subs	r3, r6, r5
 800922a:	4650      	mov	r0, sl
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	f000 f9d9 	bl	80095e4 <__srefill_r>
 8009232:	442f      	add	r7, r5
 8009234:	9b01      	ldr	r3, [sp, #4]
 8009236:	b180      	cbz	r0, 800925a <_fread_r+0xc4>
 8009238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800923a:	07d8      	lsls	r0, r3, #31
 800923c:	d405      	bmi.n	800924a <_fread_r+0xb4>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	0599      	lsls	r1, r3, #22
 8009242:	d402      	bmi.n	800924a <_fread_r+0xb4>
 8009244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009246:	f7fc fc72 	bl	8005b2e <__retarget_lock_release_recursive>
 800924a:	4445      	add	r5, r8
 800924c:	1bad      	subs	r5, r5, r6
 800924e:	fbb5 f8fb 	udiv	r8, r5, fp
 8009252:	4640      	mov	r0, r8
 8009254:	b003      	add	sp, #12
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	461e      	mov	r6, r3
 800925c:	e7c6      	b.n	80091ec <_fread_r+0x56>
 800925e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009260:	f7fc fc65 	bl	8005b2e <__retarget_lock_release_recursive>
 8009264:	e7d6      	b.n	8009214 <_fread_r+0x7e>
	...

08009268 <__sfvwrite_r>:
 8009268:	6893      	ldr	r3, [r2, #8]
 800926a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926e:	4606      	mov	r6, r0
 8009270:	460c      	mov	r4, r1
 8009272:	4691      	mov	r9, r2
 8009274:	b91b      	cbnz	r3, 800927e <__sfvwrite_r+0x16>
 8009276:	2000      	movs	r0, #0
 8009278:	b003      	add	sp, #12
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	898b      	ldrh	r3, [r1, #12]
 8009280:	0718      	lsls	r0, r3, #28
 8009282:	d550      	bpl.n	8009326 <__sfvwrite_r+0xbe>
 8009284:	690b      	ldr	r3, [r1, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d04d      	beq.n	8009326 <__sfvwrite_r+0xbe>
 800928a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928e:	f8d9 8000 	ldr.w	r8, [r9]
 8009292:	f013 0702 	ands.w	r7, r3, #2
 8009296:	d16b      	bne.n	8009370 <__sfvwrite_r+0x108>
 8009298:	f013 0301 	ands.w	r3, r3, #1
 800929c:	f000 809c 	beq.w	80093d8 <__sfvwrite_r+0x170>
 80092a0:	4638      	mov	r0, r7
 80092a2:	46ba      	mov	sl, r7
 80092a4:	46bb      	mov	fp, r7
 80092a6:	f1bb 0f00 	cmp.w	fp, #0
 80092aa:	f000 8103 	beq.w	80094b4 <__sfvwrite_r+0x24c>
 80092ae:	b950      	cbnz	r0, 80092c6 <__sfvwrite_r+0x5e>
 80092b0:	465a      	mov	r2, fp
 80092b2:	210a      	movs	r1, #10
 80092b4:	4650      	mov	r0, sl
 80092b6:	f7f6 ffbb 	bl	8000230 <memchr>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	f000 8100 	beq.w	80094c0 <__sfvwrite_r+0x258>
 80092c0:	3001      	adds	r0, #1
 80092c2:	eba0 070a 	sub.w	r7, r0, sl
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	6921      	ldr	r1, [r4, #16]
 80092ca:	68a5      	ldr	r5, [r4, #8]
 80092cc:	6963      	ldr	r3, [r4, #20]
 80092ce:	455f      	cmp	r7, fp
 80092d0:	463a      	mov	r2, r7
 80092d2:	bf28      	it	cs
 80092d4:	465a      	movcs	r2, fp
 80092d6:	4288      	cmp	r0, r1
 80092d8:	f240 80f5 	bls.w	80094c6 <__sfvwrite_r+0x25e>
 80092dc:	441d      	add	r5, r3
 80092de:	42aa      	cmp	r2, r5
 80092e0:	f340 80f1 	ble.w	80094c6 <__sfvwrite_r+0x25e>
 80092e4:	4651      	mov	r1, sl
 80092e6:	462a      	mov	r2, r5
 80092e8:	f000 fbd8 	bl	8009a9c <memmove>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	442b      	add	r3, r5
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	4621      	mov	r1, r4
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff ff29 	bl	800914c <_fflush_r>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d167      	bne.n	80093ce <__sfvwrite_r+0x166>
 80092fe:	1b7f      	subs	r7, r7, r5
 8009300:	f040 80f9 	bne.w	80094f6 <__sfvwrite_r+0x28e>
 8009304:	4621      	mov	r1, r4
 8009306:	4630      	mov	r0, r6
 8009308:	f7ff ff20 	bl	800914c <_fflush_r>
 800930c:	2800      	cmp	r0, #0
 800930e:	d15e      	bne.n	80093ce <__sfvwrite_r+0x166>
 8009310:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009314:	1b5b      	subs	r3, r3, r5
 8009316:	44aa      	add	sl, r5
 8009318:	ebab 0b05 	sub.w	fp, fp, r5
 800931c:	f8c9 3008 	str.w	r3, [r9, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1c0      	bne.n	80092a6 <__sfvwrite_r+0x3e>
 8009324:	e7a7      	b.n	8009276 <__sfvwrite_r+0xe>
 8009326:	4621      	mov	r1, r4
 8009328:	4630      	mov	r0, r6
 800932a:	f000 faf7 	bl	800991c <__swsetup_r>
 800932e:	2800      	cmp	r0, #0
 8009330:	d0ab      	beq.n	800928a <__sfvwrite_r+0x22>
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	e79f      	b.n	8009278 <__sfvwrite_r+0x10>
 8009338:	e9d8 a500 	ldrd	sl, r5, [r8]
 800933c:	f108 0808 	add.w	r8, r8, #8
 8009340:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8009344:	69e1      	ldr	r1, [r4, #28]
 8009346:	2d00      	cmp	r5, #0
 8009348:	d0f6      	beq.n	8009338 <__sfvwrite_r+0xd0>
 800934a:	42bd      	cmp	r5, r7
 800934c:	462b      	mov	r3, r5
 800934e:	4652      	mov	r2, sl
 8009350:	bf28      	it	cs
 8009352:	463b      	movcs	r3, r7
 8009354:	4630      	mov	r0, r6
 8009356:	47d8      	blx	fp
 8009358:	2800      	cmp	r0, #0
 800935a:	dd38      	ble.n	80093ce <__sfvwrite_r+0x166>
 800935c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009360:	1a1b      	subs	r3, r3, r0
 8009362:	4482      	add	sl, r0
 8009364:	1a2d      	subs	r5, r5, r0
 8009366:	f8c9 3008 	str.w	r3, [r9, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e8      	bne.n	8009340 <__sfvwrite_r+0xd8>
 800936e:	e782      	b.n	8009276 <__sfvwrite_r+0xe>
 8009370:	f04f 0a00 	mov.w	sl, #0
 8009374:	4f61      	ldr	r7, [pc, #388]	@ (80094fc <__sfvwrite_r+0x294>)
 8009376:	4655      	mov	r5, sl
 8009378:	e7e2      	b.n	8009340 <__sfvwrite_r+0xd8>
 800937a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800937e:	f108 0808 	add.w	r8, r8, #8
 8009382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009386:	6820      	ldr	r0, [r4, #0]
 8009388:	68a2      	ldr	r2, [r4, #8]
 800938a:	f1ba 0f00 	cmp.w	sl, #0
 800938e:	d0f4      	beq.n	800937a <__sfvwrite_r+0x112>
 8009390:	0599      	lsls	r1, r3, #22
 8009392:	d563      	bpl.n	800945c <__sfvwrite_r+0x1f4>
 8009394:	4552      	cmp	r2, sl
 8009396:	d836      	bhi.n	8009406 <__sfvwrite_r+0x19e>
 8009398:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800939c:	d033      	beq.n	8009406 <__sfvwrite_r+0x19e>
 800939e:	6921      	ldr	r1, [r4, #16]
 80093a0:	6965      	ldr	r5, [r4, #20]
 80093a2:	eba0 0b01 	sub.w	fp, r0, r1
 80093a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093ae:	f10b 0201 	add.w	r2, fp, #1
 80093b2:	106d      	asrs	r5, r5, #1
 80093b4:	4452      	add	r2, sl
 80093b6:	4295      	cmp	r5, r2
 80093b8:	bf38      	it	cc
 80093ba:	4615      	movcc	r5, r2
 80093bc:	055b      	lsls	r3, r3, #21
 80093be:	d53d      	bpl.n	800943c <__sfvwrite_r+0x1d4>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7fb feb0 	bl	8005128 <_malloc_r>
 80093c8:	b948      	cbnz	r0, 80093de <__sfvwrite_r+0x176>
 80093ca:	230c      	movs	r3, #12
 80093cc:	6033      	str	r3, [r6, #0]
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	e7ac      	b.n	8009332 <__sfvwrite_r+0xca>
 80093d8:	461f      	mov	r7, r3
 80093da:	469a      	mov	sl, r3
 80093dc:	e7d1      	b.n	8009382 <__sfvwrite_r+0x11a>
 80093de:	465a      	mov	r2, fp
 80093e0:	6921      	ldr	r1, [r4, #16]
 80093e2:	9001      	str	r0, [sp, #4]
 80093e4:	f000 fbc8 	bl	8009b78 <memcpy>
 80093e8:	89a2      	ldrh	r2, [r4, #12]
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80093f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093f4:	81a2      	strh	r2, [r4, #12]
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	6165      	str	r5, [r4, #20]
 80093fa:	445b      	add	r3, fp
 80093fc:	eba5 050b 	sub.w	r5, r5, fp
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	4652      	mov	r2, sl
 8009404:	60a5      	str	r5, [r4, #8]
 8009406:	4552      	cmp	r2, sl
 8009408:	bf28      	it	cs
 800940a:	4652      	movcs	r2, sl
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	9201      	str	r2, [sp, #4]
 8009410:	4639      	mov	r1, r7
 8009412:	f000 fb43 	bl	8009a9c <memmove>
 8009416:	68a3      	ldr	r3, [r4, #8]
 8009418:	9a01      	ldr	r2, [sp, #4]
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	4413      	add	r3, r2
 8009422:	4655      	mov	r5, sl
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800942a:	1b5b      	subs	r3, r3, r5
 800942c:	442f      	add	r7, r5
 800942e:	ebaa 0a05 	sub.w	sl, sl, r5
 8009432:	f8c9 3008 	str.w	r3, [r9, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1a3      	bne.n	8009382 <__sfvwrite_r+0x11a>
 800943a:	e71c      	b.n	8009276 <__sfvwrite_r+0xe>
 800943c:	462a      	mov	r2, r5
 800943e:	4630      	mov	r0, r6
 8009440:	f001 fed8 	bl	800b1f4 <_realloc_r>
 8009444:	4603      	mov	r3, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d1d5      	bne.n	80093f6 <__sfvwrite_r+0x18e>
 800944a:	6921      	ldr	r1, [r4, #16]
 800944c:	4630      	mov	r0, r6
 800944e:	f7fc fbe1 	bl	8005c14 <_free_r>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009458:	81a3      	strh	r3, [r4, #12]
 800945a:	e7b6      	b.n	80093ca <__sfvwrite_r+0x162>
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	4283      	cmp	r3, r0
 8009460:	d302      	bcc.n	8009468 <__sfvwrite_r+0x200>
 8009462:	6961      	ldr	r1, [r4, #20]
 8009464:	4551      	cmp	r1, sl
 8009466:	d915      	bls.n	8009494 <__sfvwrite_r+0x22c>
 8009468:	4552      	cmp	r2, sl
 800946a:	bf28      	it	cs
 800946c:	4652      	movcs	r2, sl
 800946e:	4639      	mov	r1, r7
 8009470:	4615      	mov	r5, r2
 8009472:	f000 fb13 	bl	8009a9c <memmove>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	6822      	ldr	r2, [r4, #0]
 800947a:	1b5b      	subs	r3, r3, r5
 800947c:	442a      	add	r2, r5
 800947e:	60a3      	str	r3, [r4, #8]
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1cf      	bne.n	8009426 <__sfvwrite_r+0x1be>
 8009486:	4621      	mov	r1, r4
 8009488:	4630      	mov	r0, r6
 800948a:	f7ff fe5f 	bl	800914c <_fflush_r>
 800948e:	2800      	cmp	r0, #0
 8009490:	d0c9      	beq.n	8009426 <__sfvwrite_r+0x1be>
 8009492:	e79c      	b.n	80093ce <__sfvwrite_r+0x166>
 8009494:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009498:	4553      	cmp	r3, sl
 800949a:	bf28      	it	cs
 800949c:	4653      	movcs	r3, sl
 800949e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80094a0:	fb93 f3f1 	sdiv	r3, r3, r1
 80094a4:	463a      	mov	r2, r7
 80094a6:	434b      	muls	r3, r1
 80094a8:	4630      	mov	r0, r6
 80094aa:	69e1      	ldr	r1, [r4, #28]
 80094ac:	47a8      	blx	r5
 80094ae:	1e05      	subs	r5, r0, #0
 80094b0:	dcb9      	bgt.n	8009426 <__sfvwrite_r+0x1be>
 80094b2:	e78c      	b.n	80093ce <__sfvwrite_r+0x166>
 80094b4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80094b8:	2000      	movs	r0, #0
 80094ba:	f108 0808 	add.w	r8, r8, #8
 80094be:	e6f2      	b.n	80092a6 <__sfvwrite_r+0x3e>
 80094c0:	f10b 0701 	add.w	r7, fp, #1
 80094c4:	e6ff      	b.n	80092c6 <__sfvwrite_r+0x5e>
 80094c6:	4293      	cmp	r3, r2
 80094c8:	dc08      	bgt.n	80094dc <__sfvwrite_r+0x274>
 80094ca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80094cc:	69e1      	ldr	r1, [r4, #28]
 80094ce:	4652      	mov	r2, sl
 80094d0:	4630      	mov	r0, r6
 80094d2:	47a8      	blx	r5
 80094d4:	1e05      	subs	r5, r0, #0
 80094d6:	f73f af12 	bgt.w	80092fe <__sfvwrite_r+0x96>
 80094da:	e778      	b.n	80093ce <__sfvwrite_r+0x166>
 80094dc:	4651      	mov	r1, sl
 80094de:	9201      	str	r2, [sp, #4]
 80094e0:	f000 fadc 	bl	8009a9c <memmove>
 80094e4:	9a01      	ldr	r2, [sp, #4]
 80094e6:	68a3      	ldr	r3, [r4, #8]
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	60a3      	str	r3, [r4, #8]
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	4413      	add	r3, r2
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	4615      	mov	r5, r2
 80094f4:	e703      	b.n	80092fe <__sfvwrite_r+0x96>
 80094f6:	2001      	movs	r0, #1
 80094f8:	e70a      	b.n	8009310 <__sfvwrite_r+0xa8>
 80094fa:	bf00      	nop
 80094fc:	7ffffc00 	.word	0x7ffffc00

08009500 <__swhatbuf_r>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	460c      	mov	r4, r1
 8009504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009508:	2900      	cmp	r1, #0
 800950a:	b096      	sub	sp, #88	@ 0x58
 800950c:	4615      	mov	r5, r2
 800950e:	461e      	mov	r6, r3
 8009510:	da07      	bge.n	8009522 <__swhatbuf_r+0x22>
 8009512:	89a1      	ldrh	r1, [r4, #12]
 8009514:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8009518:	d117      	bne.n	800954a <__swhatbuf_r+0x4a>
 800951a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800951e:	4608      	mov	r0, r1
 8009520:	e00f      	b.n	8009542 <__swhatbuf_r+0x42>
 8009522:	466a      	mov	r2, sp
 8009524:	f000 faf2 	bl	8009b0c <_fstat_r>
 8009528:	2800      	cmp	r0, #0
 800952a:	dbf2      	blt.n	8009512 <__swhatbuf_r+0x12>
 800952c:	9901      	ldr	r1, [sp, #4]
 800952e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009536:	4259      	negs	r1, r3
 8009538:	4159      	adcs	r1, r3
 800953a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800953e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009542:	6031      	str	r1, [r6, #0]
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	b016      	add	sp, #88	@ 0x58
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	2100      	movs	r1, #0
 800954c:	2340      	movs	r3, #64	@ 0x40
 800954e:	e7e6      	b.n	800951e <__swhatbuf_r+0x1e>

08009550 <__smakebuf_r>:
 8009550:	898b      	ldrh	r3, [r1, #12]
 8009552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009554:	079d      	lsls	r5, r3, #30
 8009556:	4606      	mov	r6, r0
 8009558:	460c      	mov	r4, r1
 800955a:	d507      	bpl.n	800956c <__smakebuf_r+0x1c>
 800955c:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	6123      	str	r3, [r4, #16]
 8009564:	2301      	movs	r3, #1
 8009566:	6163      	str	r3, [r4, #20]
 8009568:	b003      	add	sp, #12
 800956a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800956c:	ab01      	add	r3, sp, #4
 800956e:	466a      	mov	r2, sp
 8009570:	f7ff ffc6 	bl	8009500 <__swhatbuf_r>
 8009574:	9f00      	ldr	r7, [sp, #0]
 8009576:	4605      	mov	r5, r0
 8009578:	4639      	mov	r1, r7
 800957a:	4630      	mov	r0, r6
 800957c:	f7fb fdd4 	bl	8005128 <_malloc_r>
 8009580:	b948      	cbnz	r0, 8009596 <__smakebuf_r+0x46>
 8009582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009586:	059a      	lsls	r2, r3, #22
 8009588:	d4ee      	bmi.n	8009568 <__smakebuf_r+0x18>
 800958a:	f023 0303 	bic.w	r3, r3, #3
 800958e:	f043 0302 	orr.w	r3, r3, #2
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	e7e2      	b.n	800955c <__smakebuf_r+0xc>
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	6020      	str	r0, [r4, #0]
 800959a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095a6:	b15b      	cbz	r3, 80095c0 <__smakebuf_r+0x70>
 80095a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 fabf 	bl	8009b30 <_isatty_r>
 80095b2:	b128      	cbz	r0, 80095c0 <__smakebuf_r+0x70>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f023 0303 	bic.w	r3, r3, #3
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	431d      	orrs	r5, r3
 80095c4:	81a5      	strh	r5, [r4, #12]
 80095c6:	e7cf      	b.n	8009568 <__smakebuf_r+0x18>

080095c8 <lflush>:
 80095c8:	898b      	ldrh	r3, [r1, #12]
 80095ca:	f003 0309 	and.w	r3, r3, #9
 80095ce:	2b09      	cmp	r3, #9
 80095d0:	d103      	bne.n	80095da <lflush+0x12>
 80095d2:	4b03      	ldr	r3, [pc, #12]	@ (80095e0 <lflush+0x18>)
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	f7ff bdb9 	b.w	800914c <_fflush_r>
 80095da:	2000      	movs	r0, #0
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20000428 	.word	0x20000428

080095e4 <__srefill_r>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	460c      	mov	r4, r1
 80095e8:	4605      	mov	r5, r0
 80095ea:	b118      	cbz	r0, 80095f4 <__srefill_r+0x10>
 80095ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80095ee:	b90b      	cbnz	r3, 80095f4 <__srefill_r+0x10>
 80095f0:	f7fc f86c 	bl	80056cc <__sinit>
 80095f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f8:	049a      	lsls	r2, r3, #18
 80095fa:	d406      	bmi.n	800960a <__srefill_r+0x26>
 80095fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009600:	81a3      	strh	r3, [r4, #12]
 8009602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009604:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009608:	6663      	str	r3, [r4, #100]	@ 0x64
 800960a:	2300      	movs	r3, #0
 800960c:	6063      	str	r3, [r4, #4]
 800960e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009612:	069e      	lsls	r6, r3, #26
 8009614:	d408      	bmi.n	8009628 <__srefill_r+0x44>
 8009616:	0758      	lsls	r0, r3, #29
 8009618:	d445      	bmi.n	80096a6 <__srefill_r+0xc2>
 800961a:	06d9      	lsls	r1, r3, #27
 800961c:	d407      	bmi.n	800962e <__srefill_r+0x4a>
 800961e:	2209      	movs	r2, #9
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	bd70      	pop	{r4, r5, r6, pc}
 800962e:	071a      	lsls	r2, r3, #28
 8009630:	d50b      	bpl.n	800964a <__srefill_r+0x66>
 8009632:	4621      	mov	r1, r4
 8009634:	4628      	mov	r0, r5
 8009636:	f7ff fd89 	bl	800914c <_fflush_r>
 800963a:	2800      	cmp	r0, #0
 800963c:	d1f4      	bne.n	8009628 <__srefill_r+0x44>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	60a0      	str	r0, [r4, #8]
 8009642:	f023 0308 	bic.w	r3, r3, #8
 8009646:	81a3      	strh	r3, [r4, #12]
 8009648:	61a0      	str	r0, [r4, #24]
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f043 0304 	orr.w	r3, r3, #4
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	b91b      	cbnz	r3, 800965e <__srefill_r+0x7a>
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f7ff ff79 	bl	8009550 <__smakebuf_r>
 800965e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8009662:	07b3      	lsls	r3, r6, #30
 8009664:	d00f      	beq.n	8009686 <__srefill_r+0xa2>
 8009666:	2301      	movs	r3, #1
 8009668:	4a1a      	ldr	r2, [pc, #104]	@ (80096d4 <__srefill_r+0xf0>)
 800966a:	491b      	ldr	r1, [pc, #108]	@ (80096d8 <__srefill_r+0xf4>)
 800966c:	481b      	ldr	r0, [pc, #108]	@ (80096dc <__srefill_r+0xf8>)
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	f7fc f844 	bl	80056fc <_fwalk_sglue>
 8009674:	81a6      	strh	r6, [r4, #12]
 8009676:	f006 0609 	and.w	r6, r6, #9
 800967a:	2e09      	cmp	r6, #9
 800967c:	d103      	bne.n	8009686 <__srefill_r+0xa2>
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f7ff fcdb 	bl	800903c <__sflush_r>
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	6a26      	ldr	r6, [r4, #32]
 800968a:	6963      	ldr	r3, [r4, #20]
 800968c:	69e1      	ldr	r1, [r4, #28]
 800968e:	6022      	str	r2, [r4, #0]
 8009690:	4628      	mov	r0, r5
 8009692:	47b0      	blx	r6
 8009694:	2800      	cmp	r0, #0
 8009696:	6060      	str	r0, [r4, #4]
 8009698:	dc17      	bgt.n	80096ca <__srefill_r+0xe6>
 800969a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800969e:	d116      	bne.n	80096ce <__srefill_r+0xea>
 80096a0:	f043 0320 	orr.w	r3, r3, #32
 80096a4:	e7bf      	b.n	8009626 <__srefill_r+0x42>
 80096a6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d0d2      	beq.n	8009652 <__srefill_r+0x6e>
 80096ac:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80096b0:	4299      	cmp	r1, r3
 80096b2:	d002      	beq.n	80096ba <__srefill_r+0xd6>
 80096b4:	4628      	mov	r0, r5
 80096b6:	f7fc faad 	bl	8005c14 <_free_r>
 80096ba:	2300      	movs	r3, #0
 80096bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80096be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0c5      	beq.n	8009652 <__srefill_r+0x6e>
 80096c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	2000      	movs	r0, #0
 80096cc:	e7ae      	b.n	800962c <__srefill_r+0x48>
 80096ce:	2200      	movs	r2, #0
 80096d0:	6062      	str	r2, [r4, #4]
 80096d2:	e7a6      	b.n	8009622 <__srefill_r+0x3e>
 80096d4:	2000041c 	.word	0x2000041c
 80096d8:	080095c9 	.word	0x080095c9
 80096dc:	20000430 	.word	0x20000430

080096e0 <__sccl>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	780b      	ldrb	r3, [r1, #0]
 80096e4:	4604      	mov	r4, r0
 80096e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80096e8:	bf0b      	itete	eq
 80096ea:	784b      	ldrbeq	r3, [r1, #1]
 80096ec:	1c4a      	addne	r2, r1, #1
 80096ee:	1c8a      	addeq	r2, r1, #2
 80096f0:	2100      	movne	r1, #0
 80096f2:	bf08      	it	eq
 80096f4:	2101      	moveq	r1, #1
 80096f6:	3801      	subs	r0, #1
 80096f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80096fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009700:	42a8      	cmp	r0, r5
 8009702:	d1fb      	bne.n	80096fc <__sccl+0x1c>
 8009704:	b90b      	cbnz	r3, 800970a <__sccl+0x2a>
 8009706:	1e50      	subs	r0, r2, #1
 8009708:	bd70      	pop	{r4, r5, r6, pc}
 800970a:	f081 0101 	eor.w	r1, r1, #1
 800970e:	54e1      	strb	r1, [r4, r3]
 8009710:	4610      	mov	r0, r2
 8009712:	4602      	mov	r2, r0
 8009714:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009718:	2d2d      	cmp	r5, #45	@ 0x2d
 800971a:	d005      	beq.n	8009728 <__sccl+0x48>
 800971c:	2d5d      	cmp	r5, #93	@ 0x5d
 800971e:	d016      	beq.n	800974e <__sccl+0x6e>
 8009720:	2d00      	cmp	r5, #0
 8009722:	d0f1      	beq.n	8009708 <__sccl+0x28>
 8009724:	462b      	mov	r3, r5
 8009726:	e7f2      	b.n	800970e <__sccl+0x2e>
 8009728:	7846      	ldrb	r6, [r0, #1]
 800972a:	2e5d      	cmp	r6, #93	@ 0x5d
 800972c:	d0fa      	beq.n	8009724 <__sccl+0x44>
 800972e:	42b3      	cmp	r3, r6
 8009730:	dcf8      	bgt.n	8009724 <__sccl+0x44>
 8009732:	3002      	adds	r0, #2
 8009734:	461a      	mov	r2, r3
 8009736:	3201      	adds	r2, #1
 8009738:	4296      	cmp	r6, r2
 800973a:	54a1      	strb	r1, [r4, r2]
 800973c:	dcfb      	bgt.n	8009736 <__sccl+0x56>
 800973e:	1af2      	subs	r2, r6, r3
 8009740:	3a01      	subs	r2, #1
 8009742:	1c5d      	adds	r5, r3, #1
 8009744:	42b3      	cmp	r3, r6
 8009746:	bfa8      	it	ge
 8009748:	2200      	movge	r2, #0
 800974a:	18ab      	adds	r3, r5, r2
 800974c:	e7e1      	b.n	8009712 <__sccl+0x32>
 800974e:	4610      	mov	r0, r2
 8009750:	e7da      	b.n	8009708 <__sccl+0x28>
	...

08009754 <sprintf>:
 8009754:	b40e      	push	{r1, r2, r3}
 8009756:	b500      	push	{lr}
 8009758:	b09c      	sub	sp, #112	@ 0x70
 800975a:	ab1d      	add	r3, sp, #116	@ 0x74
 800975c:	9002      	str	r0, [sp, #8]
 800975e:	9006      	str	r0, [sp, #24]
 8009760:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009764:	4809      	ldr	r0, [pc, #36]	@ (800978c <sprintf+0x38>)
 8009766:	9107      	str	r1, [sp, #28]
 8009768:	9104      	str	r1, [sp, #16]
 800976a:	4909      	ldr	r1, [pc, #36]	@ (8009790 <sprintf+0x3c>)
 800976c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009770:	9105      	str	r1, [sp, #20]
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	a902      	add	r1, sp, #8
 8009778:	f002 ff4e 	bl	800c618 <_svfprintf_r>
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	2200      	movs	r2, #0
 8009780:	701a      	strb	r2, [r3, #0]
 8009782:	b01c      	add	sp, #112	@ 0x70
 8009784:	f85d eb04 	ldr.w	lr, [sp], #4
 8009788:	b003      	add	sp, #12
 800978a:	4770      	bx	lr
 800978c:	20000428 	.word	0x20000428
 8009790:	ffff0208 	.word	0xffff0208

08009794 <__submore>:
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009798:	460c      	mov	r4, r1
 800979a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800979c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80097a0:	4299      	cmp	r1, r3
 80097a2:	d11d      	bne.n	80097e0 <__submore+0x4c>
 80097a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80097a8:	f7fb fcbe 	bl	8005128 <_malloc_r>
 80097ac:	b918      	cbnz	r0, 80097b6 <__submore+0x22>
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295
 80097b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80097bc:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80097c0:	6320      	str	r0, [r4, #48]	@ 0x30
 80097c2:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80097c6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80097ca:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80097ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80097d2:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80097d6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80097da:	6020      	str	r0, [r4, #0]
 80097dc:	2000      	movs	r0, #0
 80097de:	e7e8      	b.n	80097b2 <__submore+0x1e>
 80097e0:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80097e2:	0077      	lsls	r7, r6, #1
 80097e4:	463a      	mov	r2, r7
 80097e6:	f001 fd05 	bl	800b1f4 <_realloc_r>
 80097ea:	4605      	mov	r5, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d0de      	beq.n	80097ae <__submore+0x1a>
 80097f0:	eb00 0806 	add.w	r8, r0, r6
 80097f4:	4601      	mov	r1, r0
 80097f6:	4632      	mov	r2, r6
 80097f8:	4640      	mov	r0, r8
 80097fa:	f000 f9bd 	bl	8009b78 <memcpy>
 80097fe:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 8009802:	f8c4 8000 	str.w	r8, [r4]
 8009806:	e7e9      	b.n	80097dc <__submore+0x48>

08009808 <_ungetc_r>:
 8009808:	1c4b      	adds	r3, r1, #1
 800980a:	b570      	push	{r4, r5, r6, lr}
 800980c:	4606      	mov	r6, r0
 800980e:	460d      	mov	r5, r1
 8009810:	4614      	mov	r4, r2
 8009812:	d029      	beq.n	8009868 <_ungetc_r+0x60>
 8009814:	b118      	cbz	r0, 800981e <_ungetc_r+0x16>
 8009816:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009818:	b90b      	cbnz	r3, 800981e <_ungetc_r+0x16>
 800981a:	f7fb ff57 	bl	80056cc <__sinit>
 800981e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009820:	07d8      	lsls	r0, r3, #31
 8009822:	d405      	bmi.n	8009830 <_ungetc_r+0x28>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	0599      	lsls	r1, r3, #22
 8009828:	d402      	bmi.n	8009830 <_ungetc_r+0x28>
 800982a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800982c:	f7fc f97e 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8009830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009834:	049a      	lsls	r2, r3, #18
 8009836:	d406      	bmi.n	8009846 <_ungetc_r+0x3e>
 8009838:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009840:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009844:	6663      	str	r3, [r4, #100]	@ 0x64
 8009846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984a:	f023 0220 	bic.w	r2, r3, #32
 800984e:	0758      	lsls	r0, r3, #29
 8009850:	81a2      	strh	r2, [r4, #12]
 8009852:	d422      	bmi.n	800989a <_ungetc_r+0x92>
 8009854:	06d9      	lsls	r1, r3, #27
 8009856:	d40a      	bmi.n	800986e <_ungetc_r+0x66>
 8009858:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800985a:	07d2      	lsls	r2, r2, #31
 800985c:	d404      	bmi.n	8009868 <_ungetc_r+0x60>
 800985e:	0599      	lsls	r1, r3, #22
 8009860:	d402      	bmi.n	8009868 <_ungetc_r+0x60>
 8009862:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009864:	f7fc f963 	bl	8005b2e <__retarget_lock_release_recursive>
 8009868:	f04f 35ff 	mov.w	r5, #4294967295
 800986c:	e046      	b.n	80098fc <_ungetc_r+0xf4>
 800986e:	071b      	lsls	r3, r3, #28
 8009870:	d50f      	bpl.n	8009892 <_ungetc_r+0x8a>
 8009872:	4621      	mov	r1, r4
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fc69 	bl	800914c <_fflush_r>
 800987a:	b120      	cbz	r0, 8009886 <_ungetc_r+0x7e>
 800987c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800987e:	07d8      	lsls	r0, r3, #31
 8009880:	d4f2      	bmi.n	8009868 <_ungetc_r+0x60>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	e7eb      	b.n	800985e <_ungetc_r+0x56>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	60a0      	str	r0, [r4, #8]
 800988a:	f023 0308 	bic.w	r3, r3, #8
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	61a0      	str	r0, [r4, #24]
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f043 0304 	orr.w	r3, r3, #4
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800989c:	6862      	ldr	r2, [r4, #4]
 800989e:	b2ed      	uxtb	r5, r5
 80098a0:	b1d3      	cbz	r3, 80098d8 <_ungetc_r+0xd0>
 80098a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098a4:	429a      	cmp	r2, r3
 80098a6:	db05      	blt.n	80098b4 <_ungetc_r+0xac>
 80098a8:	4621      	mov	r1, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ff72 	bl	8009794 <__submore>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1e3      	bne.n	800987c <_ungetc_r+0x74>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	f803 5c01 	strb.w	r5, [r3, #-1]
 80098be:	6863      	ldr	r3, [r4, #4]
 80098c0:	3301      	adds	r3, #1
 80098c2:	6063      	str	r3, [r4, #4]
 80098c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098c6:	07da      	lsls	r2, r3, #31
 80098c8:	d418      	bmi.n	80098fc <_ungetc_r+0xf4>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	059b      	lsls	r3, r3, #22
 80098ce:	d415      	bmi.n	80098fc <_ungetc_r+0xf4>
 80098d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098d2:	f7fc f92c 	bl	8005b2e <__retarget_lock_release_recursive>
 80098d6:	e011      	b.n	80098fc <_ungetc_r+0xf4>
 80098d8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80098da:	6920      	ldr	r0, [r4, #16]
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	f001 0101 	and.w	r1, r1, #1
 80098e2:	b168      	cbz	r0, 8009900 <_ungetc_r+0xf8>
 80098e4:	4298      	cmp	r0, r3
 80098e6:	d20b      	bcs.n	8009900 <_ungetc_r+0xf8>
 80098e8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80098ec:	42a8      	cmp	r0, r5
 80098ee:	d107      	bne.n	8009900 <_ungetc_r+0xf8>
 80098f0:	3b01      	subs	r3, #1
 80098f2:	3201      	adds	r2, #1
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	6062      	str	r2, [r4, #4]
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d0e6      	beq.n	80098ca <_ungetc_r+0xc2>
 80098fc:	4628      	mov	r0, r5
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
 8009904:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009908:	6323      	str	r3, [r4, #48]	@ 0x30
 800990a:	2303      	movs	r3, #3
 800990c:	6363      	str	r3, [r4, #52]	@ 0x34
 800990e:	4623      	mov	r3, r4
 8009910:	f803 5f42 	strb.w	r5, [r3, #66]!
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	2301      	movs	r3, #1
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	e7ed      	b.n	80098f8 <_ungetc_r+0xf0>

0800991c <__swsetup_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4b29      	ldr	r3, [pc, #164]	@ (80099c4 <__swsetup_r+0xa8>)
 8009920:	4605      	mov	r5, r0
 8009922:	6818      	ldr	r0, [r3, #0]
 8009924:	460c      	mov	r4, r1
 8009926:	b118      	cbz	r0, 8009930 <__swsetup_r+0x14>
 8009928:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800992a:	b90b      	cbnz	r3, 8009930 <__swsetup_r+0x14>
 800992c:	f7fb fece 	bl	80056cc <__sinit>
 8009930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009934:	0719      	lsls	r1, r3, #28
 8009936:	d422      	bmi.n	800997e <__swsetup_r+0x62>
 8009938:	06da      	lsls	r2, r3, #27
 800993a:	d407      	bmi.n	800994c <__swsetup_r+0x30>
 800993c:	2209      	movs	r2, #9
 800993e:	602a      	str	r2, [r5, #0]
 8009940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	e033      	b.n	80099b4 <__swsetup_r+0x98>
 800994c:	0758      	lsls	r0, r3, #29
 800994e:	d512      	bpl.n	8009976 <__swsetup_r+0x5a>
 8009950:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009952:	b141      	cbz	r1, 8009966 <__swsetup_r+0x4a>
 8009954:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009958:	4299      	cmp	r1, r3
 800995a:	d002      	beq.n	8009962 <__swsetup_r+0x46>
 800995c:	4628      	mov	r0, r5
 800995e:	f7fc f959 	bl	8005c14 <_free_r>
 8009962:	2300      	movs	r3, #0
 8009964:	6323      	str	r3, [r4, #48]	@ 0x30
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	2300      	movs	r3, #0
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f043 0308 	orr.w	r3, r3, #8
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	b94b      	cbnz	r3, 8009996 <__swsetup_r+0x7a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800998c:	d003      	beq.n	8009996 <__swsetup_r+0x7a>
 800998e:	4621      	mov	r1, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f7ff fddd 	bl	8009550 <__smakebuf_r>
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	f013 0201 	ands.w	r2, r3, #1
 800999e:	d00a      	beq.n	80099b6 <__swsetup_r+0x9a>
 80099a0:	2200      	movs	r2, #0
 80099a2:	60a2      	str	r2, [r4, #8]
 80099a4:	6962      	ldr	r2, [r4, #20]
 80099a6:	4252      	negs	r2, r2
 80099a8:	61a2      	str	r2, [r4, #24]
 80099aa:	6922      	ldr	r2, [r4, #16]
 80099ac:	b942      	cbnz	r2, 80099c0 <__swsetup_r+0xa4>
 80099ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099b2:	d1c5      	bne.n	8009940 <__swsetup_r+0x24>
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	0799      	lsls	r1, r3, #30
 80099b8:	bf58      	it	pl
 80099ba:	6962      	ldrpl	r2, [r4, #20]
 80099bc:	60a2      	str	r2, [r4, #8]
 80099be:	e7f4      	b.n	80099aa <__swsetup_r+0x8e>
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7f7      	b.n	80099b4 <__swsetup_r+0x98>
 80099c4:	20000428 	.word	0x20000428

080099c8 <__fputwc>:
 80099c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4680      	mov	r8, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	4614      	mov	r4, r2
 80099d2:	f000 f891 	bl	8009af8 <__locale_mb_cur_max>
 80099d6:	2801      	cmp	r0, #1
 80099d8:	4605      	mov	r5, r0
 80099da:	d11b      	bne.n	8009a14 <__fputwc+0x4c>
 80099dc:	1e7b      	subs	r3, r7, #1
 80099de:	2bfe      	cmp	r3, #254	@ 0xfe
 80099e0:	d818      	bhi.n	8009a14 <__fputwc+0x4c>
 80099e2:	f88d 7004 	strb.w	r7, [sp, #4]
 80099e6:	2600      	movs	r6, #0
 80099e8:	f10d 0904 	add.w	r9, sp, #4
 80099ec:	42ae      	cmp	r6, r5
 80099ee:	d021      	beq.n	8009a34 <__fputwc+0x6c>
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	f816 1009 	ldrb.w	r1, [r6, r9]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	da04      	bge.n	8009a08 <__fputwc+0x40>
 80099fe:	69a2      	ldr	r2, [r4, #24]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	db1b      	blt.n	8009a3c <__fputwc+0x74>
 8009a04:	290a      	cmp	r1, #10
 8009a06:	d019      	beq.n	8009a3c <__fputwc+0x74>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	7019      	strb	r1, [r3, #0]
 8009a10:	3601      	adds	r6, #1
 8009a12:	e7eb      	b.n	80099ec <__fputwc+0x24>
 8009a14:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8009a18:	463a      	mov	r2, r7
 8009a1a:	a901      	add	r1, sp, #4
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	f002 fdd5 	bl	800c5cc <_wcrtomb_r>
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	4605      	mov	r5, r0
 8009a26:	d1de      	bne.n	80099e6 <__fputwc+0x1e>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	f04f 37ff 	mov.w	r7, #4294967295
 8009a34:	4638      	mov	r0, r7
 8009a36:	b003      	add	sp, #12
 8009a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4640      	mov	r0, r8
 8009a40:	f003 ffc8 	bl	800d9d4 <__swbuf_r>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d1e3      	bne.n	8009a10 <__fputwc+0x48>
 8009a48:	e7f2      	b.n	8009a30 <__fputwc+0x68>

08009a4a <_fputwc_r>:
 8009a4a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8009a4c:	07db      	lsls	r3, r3, #31
 8009a4e:	b570      	push	{r4, r5, r6, lr}
 8009a50:	4605      	mov	r5, r0
 8009a52:	460e      	mov	r6, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	d405      	bmi.n	8009a64 <_fputwc_r+0x1a>
 8009a58:	8993      	ldrh	r3, [r2, #12]
 8009a5a:	0598      	lsls	r0, r3, #22
 8009a5c:	d402      	bmi.n	8009a64 <_fputwc_r+0x1a>
 8009a5e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8009a60:	f7fc f864 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8009a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a68:	0499      	lsls	r1, r3, #18
 8009a6a:	d406      	bmi.n	8009a7a <_fputwc_r+0x30>
 8009a6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009a78:	6663      	str	r3, [r4, #100]	@ 0x64
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	4631      	mov	r1, r6
 8009a80:	f7ff ffa2 	bl	80099c8 <__fputwc>
 8009a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a86:	07da      	lsls	r2, r3, #31
 8009a88:	4605      	mov	r5, r0
 8009a8a:	d405      	bmi.n	8009a98 <_fputwc_r+0x4e>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	059b      	lsls	r3, r3, #22
 8009a90:	d402      	bmi.n	8009a98 <_fputwc_r+0x4e>
 8009a92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a94:	f7fc f84b 	bl	8005b2e <__retarget_lock_release_recursive>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}

08009a9c <memmove>:
 8009a9c:	4288      	cmp	r0, r1
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	eb01 0402 	add.w	r4, r1, r2
 8009aa4:	d902      	bls.n	8009aac <memmove+0x10>
 8009aa6:	4284      	cmp	r4, r0
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	d807      	bhi.n	8009abc <memmove+0x20>
 8009aac:	1e43      	subs	r3, r0, #1
 8009aae:	42a1      	cmp	r1, r4
 8009ab0:	d008      	beq.n	8009ac4 <memmove+0x28>
 8009ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aba:	e7f8      	b.n	8009aae <memmove+0x12>
 8009abc:	4402      	add	r2, r0
 8009abe:	4601      	mov	r1, r0
 8009ac0:	428a      	cmp	r2, r1
 8009ac2:	d100      	bne.n	8009ac6 <memmove+0x2a>
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ace:	e7f7      	b.n	8009ac0 <memmove+0x24>

08009ad0 <strncpy>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	3901      	subs	r1, #1
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	b132      	cbz	r2, 8009ae6 <strncpy+0x16>
 8009ad8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009adc:	f803 4b01 	strb.w	r4, [r3], #1
 8009ae0:	3a01      	subs	r2, #1
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d1f7      	bne.n	8009ad6 <strncpy+0x6>
 8009ae6:	441a      	add	r2, r3
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d100      	bne.n	8009af0 <strncpy+0x20>
 8009aee:	bd10      	pop	{r4, pc}
 8009af0:	f803 1b01 	strb.w	r1, [r3], #1
 8009af4:	e7f9      	b.n	8009aea <strncpy+0x1a>
	...

08009af8 <__locale_mb_cur_max>:
 8009af8:	4b01      	ldr	r3, [pc, #4]	@ (8009b00 <__locale_mb_cur_max+0x8>)
 8009afa:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8009afe:	4770      	bx	lr
 8009b00:	20000554 	.word	0x20000554

08009b04 <_localeconv_r>:
 8009b04:	4800      	ldr	r0, [pc, #0]	@ (8009b08 <_localeconv_r+0x4>)
 8009b06:	4770      	bx	lr
 8009b08:	20000644 	.word	0x20000644

08009b0c <_fstat_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	@ (8009b2c <_fstat_r+0x20>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	4611      	mov	r1, r2
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	f7f7 feca 	bl	80018b2 <_fstat>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d102      	bne.n	8009b28 <_fstat_r+0x1c>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b103      	cbz	r3, 8009b28 <_fstat_r+0x1c>
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000980 	.word	0x20000980

08009b30 <_isatty_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	@ (8009b4c <_isatty_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f7 fec9 	bl	80018d2 <_isatty>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_isatty_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_isatty_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20000980 	.word	0x20000980

08009b50 <__libc_fini_array>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	@ (8009b70 <__libc_fini_array+0x20>)
 8009b54:	4c07      	ldr	r4, [pc, #28]	@ (8009b74 <__libc_fini_array+0x24>)
 8009b56:	1b64      	subs	r4, r4, r5
 8009b58:	10a4      	asrs	r4, r4, #2
 8009b5a:	b91c      	cbnz	r4, 8009b64 <__libc_fini_array+0x14>
 8009b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b60:	f004 bc0c 	b.w	800e37c <_fini>
 8009b64:	3c01      	subs	r4, #1
 8009b66:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009b6a:	4798      	blx	r3
 8009b6c:	e7f5      	b.n	8009b5a <__libc_fini_array+0xa>
 8009b6e:	bf00      	nop
 8009b70:	0800e8d8 	.word	0x0800e8d8
 8009b74:	0800e8dc 	.word	0x0800e8dc

08009b78 <memcpy>:
 8009b78:	440a      	add	r2, r1
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b80:	d100      	bne.n	8009b84 <memcpy+0xc>
 8009b82:	4770      	bx	lr
 8009b84:	b510      	push	{r4, lr}
 8009b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b8e:	4291      	cmp	r1, r2
 8009b90:	d1f9      	bne.n	8009b86 <memcpy+0xe>
 8009b92:	bd10      	pop	{r4, pc}

08009b94 <nanf>:
 8009b94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009b9c <nanf+0x8>
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	7fc00000 	.word	0x7fc00000

08009ba0 <frexp>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	ec55 4b10 	vmov	r4, r5, d0
 8009ba8:	6001      	str	r1, [r0, #0]
 8009baa:	4915      	ldr	r1, [pc, #84]	@ (8009c00 <frexp+0x60>)
 8009bac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009bb0:	428a      	cmp	r2, r1
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	d820      	bhi.n	8009bfa <frexp+0x5a>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4311      	orrs	r1, r2
 8009bbc:	d01d      	beq.n	8009bfa <frexp+0x5a>
 8009bbe:	4911      	ldr	r1, [pc, #68]	@ (8009c04 <frexp+0x64>)
 8009bc0:	4029      	ands	r1, r5
 8009bc2:	b961      	cbnz	r1, 8009bde <frexp+0x3e>
 8009bc4:	4b10      	ldr	r3, [pc, #64]	@ (8009c08 <frexp+0x68>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4629      	mov	r1, r5
 8009bcc:	f7f6 fd3c 	bl	8000648 <__aeabi_dmul>
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009bd6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8009bda:	4604      	mov	r4, r0
 8009bdc:	6031      	str	r1, [r6, #0]
 8009bde:	6831      	ldr	r1, [r6, #0]
 8009be0:	1512      	asrs	r2, r2, #20
 8009be2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009be6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8009bea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009bee:	4411      	add	r1, r2
 8009bf0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009bf4:	6031      	str	r1, [r6, #0]
 8009bf6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8009bfa:	ec45 4b10 	vmov	d0, r4, r5
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	7ff00000 	.word	0x7ff00000
 8009c08:	43500000 	.word	0x43500000

08009c0c <__register_exitproc>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8009c88 <__register_exitproc+0x7c>
 8009c14:	4606      	mov	r6, r0
 8009c16:	f8da 0000 	ldr.w	r0, [sl]
 8009c1a:	4698      	mov	r8, r3
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	4691      	mov	r9, r2
 8009c20:	f7fb ff84 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8009c24:	4b16      	ldr	r3, [pc, #88]	@ (8009c80 <__register_exitproc+0x74>)
 8009c26:	681c      	ldr	r4, [r3, #0]
 8009c28:	b90c      	cbnz	r4, 8009c2e <__register_exitproc+0x22>
 8009c2a:	4c16      	ldr	r4, [pc, #88]	@ (8009c84 <__register_exitproc+0x78>)
 8009c2c:	601c      	str	r4, [r3, #0]
 8009c2e:	6865      	ldr	r5, [r4, #4]
 8009c30:	f8da 0000 	ldr.w	r0, [sl]
 8009c34:	2d1f      	cmp	r5, #31
 8009c36:	dd05      	ble.n	8009c44 <__register_exitproc+0x38>
 8009c38:	f7fb ff79 	bl	8005b2e <__retarget_lock_release_recursive>
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	b19e      	cbz	r6, 8009c6e <__register_exitproc+0x62>
 8009c46:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8009c50:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8009c54:	40aa      	lsls	r2, r5
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8009c5c:	2e02      	cmp	r6, #2
 8009c5e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8009c62:	bf02      	ittt	eq
 8009c64:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8009c68:	4313      	orreq	r3, r2
 8009c6a:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8009c6e:	1c6b      	adds	r3, r5, #1
 8009c70:	3502      	adds	r5, #2
 8009c72:	6063      	str	r3, [r4, #4]
 8009c74:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009c78:	f7fb ff59 	bl	8005b2e <__retarget_lock_release_recursive>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7df      	b.n	8009c40 <__register_exitproc+0x34>
 8009c80:	20000988 	.word	0x20000988
 8009c84:	2000098c 	.word	0x2000098c
 8009c88:	20000550 	.word	0x20000550

08009c8c <quorem>:
 8009c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	6903      	ldr	r3, [r0, #16]
 8009c92:	690c      	ldr	r4, [r1, #16]
 8009c94:	42a3      	cmp	r3, r4
 8009c96:	4607      	mov	r7, r0
 8009c98:	db7e      	blt.n	8009d98 <quorem+0x10c>
 8009c9a:	3c01      	subs	r4, #1
 8009c9c:	f101 0814 	add.w	r8, r1, #20
 8009ca0:	00a3      	lsls	r3, r4, #2
 8009ca2:	f100 0514 	add.w	r5, r0, #20
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cc2:	d32e      	bcc.n	8009d22 <quorem+0x96>
 8009cc4:	f04f 0a00 	mov.w	sl, #0
 8009cc8:	46c4      	mov	ip, r8
 8009cca:	46ae      	mov	lr, r5
 8009ccc:	46d3      	mov	fp, sl
 8009cce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cd2:	b298      	uxth	r0, r3
 8009cd4:	fb06 a000 	mla	r0, r6, r0, sl
 8009cd8:	0c02      	lsrs	r2, r0, #16
 8009cda:	0c1b      	lsrs	r3, r3, #16
 8009cdc:	fb06 2303 	mla	r3, r6, r3, r2
 8009ce0:	f8de 2000 	ldr.w	r2, [lr]
 8009ce4:	b280      	uxth	r0, r0
 8009ce6:	b292      	uxth	r2, r2
 8009ce8:	1a12      	subs	r2, r2, r0
 8009cea:	445a      	add	r2, fp
 8009cec:	f8de 0000 	ldr.w	r0, [lr]
 8009cf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009cfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009cfe:	b292      	uxth	r2, r2
 8009d00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d04:	45e1      	cmp	r9, ip
 8009d06:	f84e 2b04 	str.w	r2, [lr], #4
 8009d0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d0e:	d2de      	bcs.n	8009cce <quorem+0x42>
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	58eb      	ldr	r3, [r5, r3]
 8009d14:	b92b      	cbnz	r3, 8009d22 <quorem+0x96>
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	d32f      	bcc.n	8009d80 <quorem+0xf4>
 8009d20:	613c      	str	r4, [r7, #16]
 8009d22:	4638      	mov	r0, r7
 8009d24:	f001 f870 	bl	800ae08 <__mcmp>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	db25      	blt.n	8009d78 <quorem+0xec>
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	2000      	movs	r0, #0
 8009d30:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d34:	f8d1 c000 	ldr.w	ip, [r1]
 8009d38:	fa1f fe82 	uxth.w	lr, r2
 8009d3c:	fa1f f38c 	uxth.w	r3, ip
 8009d40:	eba3 030e 	sub.w	r3, r3, lr
 8009d44:	4403      	add	r3, r0
 8009d46:	0c12      	lsrs	r2, r2, #16
 8009d48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d56:	45c1      	cmp	r9, r8
 8009d58:	f841 3b04 	str.w	r3, [r1], #4
 8009d5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d60:	d2e6      	bcs.n	8009d30 <quorem+0xa4>
 8009d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d6a:	b922      	cbnz	r2, 8009d76 <quorem+0xea>
 8009d6c:	3b04      	subs	r3, #4
 8009d6e:	429d      	cmp	r5, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	d30b      	bcc.n	8009d8c <quorem+0x100>
 8009d74:	613c      	str	r4, [r7, #16]
 8009d76:	3601      	adds	r6, #1
 8009d78:	4630      	mov	r0, r6
 8009d7a:	b003      	add	sp, #12
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	3b04      	subs	r3, #4
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d1cb      	bne.n	8009d20 <quorem+0x94>
 8009d88:	3c01      	subs	r4, #1
 8009d8a:	e7c6      	b.n	8009d1a <quorem+0x8e>
 8009d8c:	6812      	ldr	r2, [r2, #0]
 8009d8e:	3b04      	subs	r3, #4
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	d1ef      	bne.n	8009d74 <quorem+0xe8>
 8009d94:	3c01      	subs	r4, #1
 8009d96:	e7ea      	b.n	8009d6e <quorem+0xe2>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e7ee      	b.n	8009d7a <quorem+0xee>
 8009d9c:	0000      	movs	r0, r0
	...

08009da0 <_dtoa_r>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	b099      	sub	sp, #100	@ 0x64
 8009da6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009daa:	9109      	str	r1, [sp, #36]	@ 0x24
 8009dac:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8009dae:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009db2:	ec55 4b10 	vmov	r4, r5, d0
 8009db6:	4683      	mov	fp, r0
 8009db8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dba:	b149      	cbz	r1, 8009dd0 <_dtoa_r+0x30>
 8009dbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dbe:	604a      	str	r2, [r1, #4]
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4093      	lsls	r3, r2
 8009dc4:	608b      	str	r3, [r1, #8]
 8009dc6:	f000 fdce 	bl	800a966 <_Bfree>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8009dd0:	1e2b      	subs	r3, r5, #0
 8009dd2:	bfb9      	ittee	lt
 8009dd4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009dd8:	9303      	strlt	r3, [sp, #12]
 8009dda:	2300      	movge	r3, #0
 8009ddc:	6033      	strge	r3, [r6, #0]
 8009dde:	9f03      	ldr	r7, [sp, #12]
 8009de0:	4b97      	ldr	r3, [pc, #604]	@ (800a040 <_dtoa_r+0x2a0>)
 8009de2:	bfbc      	itt	lt
 8009de4:	2201      	movlt	r2, #1
 8009de6:	6032      	strlt	r2, [r6, #0]
 8009de8:	43bb      	bics	r3, r7
 8009dea:	d114      	bne.n	8009e16 <_dtoa_r+0x76>
 8009dec:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009dee:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009df8:	4323      	orrs	r3, r4
 8009dfa:	f000 854c 	beq.w	800a896 <_dtoa_r+0xaf6>
 8009dfe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e00:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a058 <_dtoa_r+0x2b8>
 8009e04:	b11b      	cbz	r3, 8009e0e <_dtoa_r+0x6e>
 8009e06:	f10a 0303 	add.w	r3, sl, #3
 8009e0a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	4650      	mov	r0, sl
 8009e10:	b019      	add	sp, #100	@ 0x64
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	ec51 0b17 	vmov	r0, r1, d7
 8009e20:	2300      	movs	r3, #0
 8009e22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009e26:	f7f6 fe77 	bl	8000b18 <__aeabi_dcmpeq>
 8009e2a:	4680      	mov	r8, r0
 8009e2c:	b150      	cbz	r0, 8009e44 <_dtoa_r+0xa4>
 8009e2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e30:	2301      	movs	r3, #1
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e36:	b113      	cbz	r3, 8009e3e <_dtoa_r+0x9e>
 8009e38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e3a:	4b82      	ldr	r3, [pc, #520]	@ (800a044 <_dtoa_r+0x2a4>)
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800a05c <_dtoa_r+0x2bc>
 8009e42:	e7e4      	b.n	8009e0e <_dtoa_r+0x6e>
 8009e44:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009e48:	aa16      	add	r2, sp, #88	@ 0x58
 8009e4a:	a917      	add	r1, sp, #92	@ 0x5c
 8009e4c:	4658      	mov	r0, fp
 8009e4e:	f001 f8fb 	bl	800b048 <__d2b>
 8009e52:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e56:	4681      	mov	r9, r0
 8009e58:	2e00      	cmp	r6, #0
 8009e5a:	d077      	beq.n	8009f4c <_dtoa_r+0x1ac>
 8009e5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e5e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e6a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e6e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e72:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e76:	4619      	mov	r1, r3
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4b73      	ldr	r3, [pc, #460]	@ (800a048 <_dtoa_r+0x2a8>)
 8009e7c:	f7f6 fa2c 	bl	80002d8 <__aeabi_dsub>
 8009e80:	a369      	add	r3, pc, #420	@ (adr r3, 800a028 <_dtoa_r+0x288>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fbdf 	bl	8000648 <__aeabi_dmul>
 8009e8a:	a369      	add	r3, pc, #420	@ (adr r3, 800a030 <_dtoa_r+0x290>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 fa24 	bl	80002dc <__adddf3>
 8009e94:	4604      	mov	r4, r0
 8009e96:	4630      	mov	r0, r6
 8009e98:	460d      	mov	r5, r1
 8009e9a:	f7f6 fb6b 	bl	8000574 <__aeabi_i2d>
 8009e9e:	a366      	add	r3, pc, #408	@ (adr r3, 800a038 <_dtoa_r+0x298>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fbd0 	bl	8000648 <__aeabi_dmul>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fa14 	bl	80002dc <__adddf3>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	f7f6 fe76 	bl	8000ba8 <__aeabi_d2iz>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	f7f6 fe31 	bl	8000b2c <__aeabi_dcmplt>
 8009eca:	b140      	cbz	r0, 8009ede <_dtoa_r+0x13e>
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f7f6 fb51 	bl	8000574 <__aeabi_i2d>
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	f7f6 fe1f 	bl	8000b18 <__aeabi_dcmpeq>
 8009eda:	b900      	cbnz	r0, 8009ede <_dtoa_r+0x13e>
 8009edc:	3f01      	subs	r7, #1
 8009ede:	2f16      	cmp	r7, #22
 8009ee0:	d851      	bhi.n	8009f86 <_dtoa_r+0x1e6>
 8009ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800a04c <_dtoa_r+0x2ac>)
 8009ee4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ef0:	f7f6 fe1c 	bl	8000b2c <__aeabi_dcmplt>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d048      	beq.n	8009f8a <_dtoa_r+0x1ea>
 8009ef8:	3f01      	subs	r7, #1
 8009efa:	2300      	movs	r3, #0
 8009efc:	9312      	str	r3, [sp, #72]	@ 0x48
 8009efe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f00:	1b9b      	subs	r3, r3, r6
 8009f02:	1e5a      	subs	r2, r3, #1
 8009f04:	bf44      	itt	mi
 8009f06:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f0a:	2300      	movmi	r3, #0
 8009f0c:	9208      	str	r2, [sp, #32]
 8009f0e:	bf54      	ite	pl
 8009f10:	f04f 0800 	movpl.w	r8, #0
 8009f14:	9308      	strmi	r3, [sp, #32]
 8009f16:	2f00      	cmp	r7, #0
 8009f18:	db39      	blt.n	8009f8e <_dtoa_r+0x1ee>
 8009f1a:	9b08      	ldr	r3, [sp, #32]
 8009f1c:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009f1e:	443b      	add	r3, r7
 8009f20:	9308      	str	r3, [sp, #32]
 8009f22:	2300      	movs	r3, #0
 8009f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f28:	2b09      	cmp	r3, #9
 8009f2a:	d865      	bhi.n	8009ff8 <_dtoa_r+0x258>
 8009f2c:	2b05      	cmp	r3, #5
 8009f2e:	bfc4      	itt	gt
 8009f30:	3b04      	subgt	r3, #4
 8009f32:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f36:	f1a3 0302 	sub.w	r3, r3, #2
 8009f3a:	bfcc      	ite	gt
 8009f3c:	2400      	movgt	r4, #0
 8009f3e:	2401      	movle	r4, #1
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d864      	bhi.n	800a00e <_dtoa_r+0x26e>
 8009f44:	e8df f003 	tbb	[pc, r3]
 8009f48:	5635372a 	.word	0x5635372a
 8009f4c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009f50:	441e      	add	r6, r3
 8009f52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	bfc1      	itttt	gt
 8009f5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f5e:	409f      	lslgt	r7, r3
 8009f60:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f64:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f68:	bfd6      	itet	le
 8009f6a:	f1c3 0320 	rsble	r3, r3, #32
 8009f6e:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f72:	fa04 f003 	lslle.w	r0, r4, r3
 8009f76:	f7f6 faed 	bl	8000554 <__aeabi_ui2d>
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f80:	3e01      	subs	r6, #1
 8009f82:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f84:	e777      	b.n	8009e76 <_dtoa_r+0xd6>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e7b8      	b.n	8009efc <_dtoa_r+0x15c>
 8009f8a:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f8c:	e7b7      	b.n	8009efe <_dtoa_r+0x15e>
 8009f8e:	427b      	negs	r3, r7
 8009f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f92:	2300      	movs	r3, #0
 8009f94:	eba8 0807 	sub.w	r8, r8, r7
 8009f98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f9a:	e7c4      	b.n	8009f26 <_dtoa_r+0x186>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc36      	bgt.n	800a014 <_dtoa_r+0x274>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	9307      	str	r3, [sp, #28]
 8009fac:	461a      	mov	r2, r3
 8009fae:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fb0:	e00b      	b.n	8009fca <_dtoa_r+0x22a>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e7f3      	b.n	8009f9e <_dtoa_r+0x1fe>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	bfb8      	it	lt
 8009fc8:	2301      	movlt	r3, #1
 8009fca:	2100      	movs	r1, #0
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f102 0014 	add.w	r0, r2, #20
 8009fd2:	4298      	cmp	r0, r3
 8009fd4:	d922      	bls.n	800a01c <_dtoa_r+0x27c>
 8009fd6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8009fda:	4658      	mov	r0, fp
 8009fdc:	f000 fc9e 	bl	800a91c <_Balloc>
 8009fe0:	4682      	mov	sl, r0
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d13c      	bne.n	800a060 <_dtoa_r+0x2c0>
 8009fe6:	4b1a      	ldr	r3, [pc, #104]	@ (800a050 <_dtoa_r+0x2b0>)
 8009fe8:	4602      	mov	r2, r0
 8009fea:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fee:	4819      	ldr	r0, [pc, #100]	@ (800a054 <_dtoa_r+0x2b4>)
 8009ff0:	f003 fd56 	bl	800daa0 <__assert_func>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e7df      	b.n	8009fb8 <_dtoa_r+0x218>
 8009ff8:	2401      	movs	r4, #1
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ffe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a000:	f04f 33ff 	mov.w	r3, #4294967295
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	2200      	movs	r2, #0
 800a00a:	2312      	movs	r3, #18
 800a00c:	e7cf      	b.n	8009fae <_dtoa_r+0x20e>
 800a00e:	2301      	movs	r3, #1
 800a010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a012:	e7f5      	b.n	800a000 <_dtoa_r+0x260>
 800a014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	9307      	str	r3, [sp, #28]
 800a01a:	e7d6      	b.n	8009fca <_dtoa_r+0x22a>
 800a01c:	3101      	adds	r1, #1
 800a01e:	0052      	lsls	r2, r2, #1
 800a020:	e7d5      	b.n	8009fce <_dtoa_r+0x22e>
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	636f4361 	.word	0x636f4361
 800a02c:	3fd287a7 	.word	0x3fd287a7
 800a030:	8b60c8b3 	.word	0x8b60c8b3
 800a034:	3fc68a28 	.word	0x3fc68a28
 800a038:	509f79fb 	.word	0x509f79fb
 800a03c:	3fd34413 	.word	0x3fd34413
 800a040:	7ff00000 	.word	0x7ff00000
 800a044:	0800e473 	.word	0x0800e473
 800a048:	3ff80000 	.word	0x3ff80000
 800a04c:	0800e5f0 	.word	0x0800e5f0
 800a050:	0800e4f3 	.word	0x0800e4f3
 800a054:	0800e504 	.word	0x0800e504
 800a058:	0800e4ef 	.word	0x0800e4ef
 800a05c:	0800e472 	.word	0x0800e472
 800a060:	9b07      	ldr	r3, [sp, #28]
 800a062:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800a066:	2b0e      	cmp	r3, #14
 800a068:	f200 80a4 	bhi.w	800a1b4 <_dtoa_r+0x414>
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	f000 80a1 	beq.w	800a1b4 <_dtoa_r+0x414>
 800a072:	2f00      	cmp	r7, #0
 800a074:	dd33      	ble.n	800a0de <_dtoa_r+0x33e>
 800a076:	4bae      	ldr	r3, [pc, #696]	@ (800a330 <_dtoa_r+0x590>)
 800a078:	f007 020f 	and.w	r2, r7, #15
 800a07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a080:	ed93 7b00 	vldr	d7, [r3]
 800a084:	05f8      	lsls	r0, r7, #23
 800a086:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a08a:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a08e:	d516      	bpl.n	800a0be <_dtoa_r+0x31e>
 800a090:	4ba8      	ldr	r3, [pc, #672]	@ (800a334 <_dtoa_r+0x594>)
 800a092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a096:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a09a:	f7f6 fbff 	bl	800089c <__aeabi_ddiv>
 800a09e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a2:	f004 040f 	and.w	r4, r4, #15
 800a0a6:	2603      	movs	r6, #3
 800a0a8:	4da2      	ldr	r5, [pc, #648]	@ (800a334 <_dtoa_r+0x594>)
 800a0aa:	b954      	cbnz	r4, 800a0c2 <_dtoa_r+0x322>
 800a0ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b4:	f7f6 fbf2 	bl	800089c <__aeabi_ddiv>
 800a0b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0bc:	e028      	b.n	800a110 <_dtoa_r+0x370>
 800a0be:	2602      	movs	r6, #2
 800a0c0:	e7f2      	b.n	800a0a8 <_dtoa_r+0x308>
 800a0c2:	07e1      	lsls	r1, r4, #31
 800a0c4:	d508      	bpl.n	800a0d8 <_dtoa_r+0x338>
 800a0c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0ce:	f7f6 fabb 	bl	8000648 <__aeabi_dmul>
 800a0d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0d6:	3601      	adds	r6, #1
 800a0d8:	1064      	asrs	r4, r4, #1
 800a0da:	3508      	adds	r5, #8
 800a0dc:	e7e5      	b.n	800a0aa <_dtoa_r+0x30a>
 800a0de:	f000 80d2 	beq.w	800a286 <_dtoa_r+0x4e6>
 800a0e2:	427c      	negs	r4, r7
 800a0e4:	4b92      	ldr	r3, [pc, #584]	@ (800a330 <_dtoa_r+0x590>)
 800a0e6:	4d93      	ldr	r5, [pc, #588]	@ (800a334 <_dtoa_r+0x594>)
 800a0e8:	f004 020f 	and.w	r2, r4, #15
 800a0ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0f8:	f7f6 faa6 	bl	8000648 <__aeabi_dmul>
 800a0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a100:	1124      	asrs	r4, r4, #4
 800a102:	2300      	movs	r3, #0
 800a104:	2602      	movs	r6, #2
 800a106:	2c00      	cmp	r4, #0
 800a108:	f040 80b2 	bne.w	800a270 <_dtoa_r+0x4d0>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1d3      	bne.n	800a0b8 <_dtoa_r+0x318>
 800a110:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a112:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 80b7 	beq.w	800a28a <_dtoa_r+0x4ea>
 800a11c:	4b86      	ldr	r3, [pc, #536]	@ (800a338 <_dtoa_r+0x598>)
 800a11e:	2200      	movs	r2, #0
 800a120:	4620      	mov	r0, r4
 800a122:	4629      	mov	r1, r5
 800a124:	f7f6 fd02 	bl	8000b2c <__aeabi_dcmplt>
 800a128:	2800      	cmp	r0, #0
 800a12a:	f000 80ae 	beq.w	800a28a <_dtoa_r+0x4ea>
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80aa 	beq.w	800a28a <_dtoa_r+0x4ea>
 800a136:	9b00      	ldr	r3, [sp, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dd37      	ble.n	800a1ac <_dtoa_r+0x40c>
 800a13c:	1e7b      	subs	r3, r7, #1
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	4620      	mov	r0, r4
 800a142:	4b7e      	ldr	r3, [pc, #504]	@ (800a33c <_dtoa_r+0x59c>)
 800a144:	2200      	movs	r2, #0
 800a146:	4629      	mov	r1, r5
 800a148:	f7f6 fa7e 	bl	8000648 <__aeabi_dmul>
 800a14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a150:	9c00      	ldr	r4, [sp, #0]
 800a152:	3601      	adds	r6, #1
 800a154:	4630      	mov	r0, r6
 800a156:	f7f6 fa0d 	bl	8000574 <__aeabi_i2d>
 800a15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a15e:	f7f6 fa73 	bl	8000648 <__aeabi_dmul>
 800a162:	4b77      	ldr	r3, [pc, #476]	@ (800a340 <_dtoa_r+0x5a0>)
 800a164:	2200      	movs	r2, #0
 800a166:	f7f6 f8b9 	bl	80002dc <__adddf3>
 800a16a:	4605      	mov	r5, r0
 800a16c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a170:	2c00      	cmp	r4, #0
 800a172:	f040 808d 	bne.w	800a290 <_dtoa_r+0x4f0>
 800a176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a17a:	4b72      	ldr	r3, [pc, #456]	@ (800a344 <_dtoa_r+0x5a4>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	f7f6 f8ab 	bl	80002d8 <__aeabi_dsub>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a18a:	462a      	mov	r2, r5
 800a18c:	4633      	mov	r3, r6
 800a18e:	f7f6 fceb 	bl	8000b68 <__aeabi_dcmpgt>
 800a192:	2800      	cmp	r0, #0
 800a194:	f040 828c 	bne.w	800a6b0 <_dtoa_r+0x910>
 800a198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a19c:	462a      	mov	r2, r5
 800a19e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1a2:	f7f6 fcc3 	bl	8000b2c <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f040 8129 	bne.w	800a3fe <_dtoa_r+0x65e>
 800a1ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a1b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a1b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f2c0 815b 	blt.w	800a472 <_dtoa_r+0x6d2>
 800a1bc:	2f0e      	cmp	r7, #14
 800a1be:	f300 8158 	bgt.w	800a472 <_dtoa_r+0x6d2>
 800a1c2:	4b5b      	ldr	r3, [pc, #364]	@ (800a330 <_dtoa_r+0x590>)
 800a1c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1c8:	ed93 7b00 	vldr	d7, [r3]
 800a1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	ed8d 7b00 	vstr	d7, [sp]
 800a1d4:	da03      	bge.n	800a1de <_dtoa_r+0x43e>
 800a1d6:	9b07      	ldr	r3, [sp, #28]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f340 8102 	ble.w	800a3e2 <_dtoa_r+0x642>
 800a1de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1e2:	4656      	mov	r6, sl
 800a1e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	f7f6 fb56 	bl	800089c <__aeabi_ddiv>
 800a1f0:	f7f6 fcda 	bl	8000ba8 <__aeabi_d2iz>
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	f7f6 f9bd 	bl	8000574 <__aeabi_i2d>
 800a1fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1fe:	f7f6 fa23 	bl	8000648 <__aeabi_dmul>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a20e:	f7f6 f863 	bl	80002d8 <__aeabi_dsub>
 800a212:	f806 4b01 	strb.w	r4, [r6], #1
 800a216:	9d07      	ldr	r5, [sp, #28]
 800a218:	eba6 040a 	sub.w	r4, r6, sl
 800a21c:	42a5      	cmp	r5, r4
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	f040 8118 	bne.w	800a456 <_dtoa_r+0x6b6>
 800a226:	f7f6 f859 	bl	80002dc <__adddf3>
 800a22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a22e:	4604      	mov	r4, r0
 800a230:	460d      	mov	r5, r1
 800a232:	f7f6 fc99 	bl	8000b68 <__aeabi_dcmpgt>
 800a236:	2800      	cmp	r0, #0
 800a238:	f040 80fa 	bne.w	800a430 <_dtoa_r+0x690>
 800a23c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	f7f6 fc68 	bl	8000b18 <__aeabi_dcmpeq>
 800a248:	b118      	cbz	r0, 800a252 <_dtoa_r+0x4b2>
 800a24a:	f018 0f01 	tst.w	r8, #1
 800a24e:	f040 80ef 	bne.w	800a430 <_dtoa_r+0x690>
 800a252:	4649      	mov	r1, r9
 800a254:	4658      	mov	r0, fp
 800a256:	f000 fb86 	bl	800a966 <_Bfree>
 800a25a:	2300      	movs	r3, #0
 800a25c:	7033      	strb	r3, [r6, #0]
 800a25e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a260:	3701      	adds	r7, #1
 800a262:	601f      	str	r7, [r3, #0]
 800a264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a266:	2b00      	cmp	r3, #0
 800a268:	f43f add1 	beq.w	8009e0e <_dtoa_r+0x6e>
 800a26c:	601e      	str	r6, [r3, #0]
 800a26e:	e5ce      	b.n	8009e0e <_dtoa_r+0x6e>
 800a270:	07e2      	lsls	r2, r4, #31
 800a272:	d505      	bpl.n	800a280 <_dtoa_r+0x4e0>
 800a274:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a278:	f7f6 f9e6 	bl	8000648 <__aeabi_dmul>
 800a27c:	3601      	adds	r6, #1
 800a27e:	2301      	movs	r3, #1
 800a280:	1064      	asrs	r4, r4, #1
 800a282:	3508      	adds	r5, #8
 800a284:	e73f      	b.n	800a106 <_dtoa_r+0x366>
 800a286:	2602      	movs	r6, #2
 800a288:	e742      	b.n	800a110 <_dtoa_r+0x370>
 800a28a:	9c07      	ldr	r4, [sp, #28]
 800a28c:	9704      	str	r7, [sp, #16]
 800a28e:	e761      	b.n	800a154 <_dtoa_r+0x3b4>
 800a290:	4b27      	ldr	r3, [pc, #156]	@ (800a330 <_dtoa_r+0x590>)
 800a292:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a29c:	4454      	add	r4, sl
 800a29e:	2900      	cmp	r1, #0
 800a2a0:	d054      	beq.n	800a34c <_dtoa_r+0x5ac>
 800a2a2:	4929      	ldr	r1, [pc, #164]	@ (800a348 <_dtoa_r+0x5a8>)
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f7f6 faf9 	bl	800089c <__aeabi_ddiv>
 800a2aa:	4633      	mov	r3, r6
 800a2ac:	462a      	mov	r2, r5
 800a2ae:	f7f6 f813 	bl	80002d8 <__aeabi_dsub>
 800a2b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2b6:	4656      	mov	r6, sl
 800a2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2bc:	f7f6 fc74 	bl	8000ba8 <__aeabi_d2iz>
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	f7f6 f957 	bl	8000574 <__aeabi_i2d>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ce:	f7f6 f803 	bl	80002d8 <__aeabi_dsub>
 800a2d2:	3530      	adds	r5, #48	@ 0x30
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2dc:	f806 5b01 	strb.w	r5, [r6], #1
 800a2e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2e4:	f7f6 fc22 	bl	8000b2c <__aeabi_dcmplt>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d172      	bne.n	800a3d2 <_dtoa_r+0x632>
 800a2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2f0:	4911      	ldr	r1, [pc, #68]	@ (800a338 <_dtoa_r+0x598>)
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f7f5 fff0 	bl	80002d8 <__aeabi_dsub>
 800a2f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2fc:	f7f6 fc16 	bl	8000b2c <__aeabi_dcmplt>
 800a300:	2800      	cmp	r0, #0
 800a302:	f040 8096 	bne.w	800a432 <_dtoa_r+0x692>
 800a306:	42a6      	cmp	r6, r4
 800a308:	f43f af50 	beq.w	800a1ac <_dtoa_r+0x40c>
 800a30c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a310:	4b0a      	ldr	r3, [pc, #40]	@ (800a33c <_dtoa_r+0x59c>)
 800a312:	2200      	movs	r2, #0
 800a314:	f7f6 f998 	bl	8000648 <__aeabi_dmul>
 800a318:	4b08      	ldr	r3, [pc, #32]	@ (800a33c <_dtoa_r+0x59c>)
 800a31a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a31e:	2200      	movs	r2, #0
 800a320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a324:	f7f6 f990 	bl	8000648 <__aeabi_dmul>
 800a328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a32c:	e7c4      	b.n	800a2b8 <_dtoa_r+0x518>
 800a32e:	bf00      	nop
 800a330:	0800e5f0 	.word	0x0800e5f0
 800a334:	0800e5c8 	.word	0x0800e5c8
 800a338:	3ff00000 	.word	0x3ff00000
 800a33c:	40240000 	.word	0x40240000
 800a340:	401c0000 	.word	0x401c0000
 800a344:	40140000 	.word	0x40140000
 800a348:	3fe00000 	.word	0x3fe00000
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	f7f6 f97a 	bl	8000648 <__aeabi_dmul>
 800a354:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a358:	9415      	str	r4, [sp, #84]	@ 0x54
 800a35a:	4656      	mov	r6, sl
 800a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a360:	f7f6 fc22 	bl	8000ba8 <__aeabi_d2iz>
 800a364:	4605      	mov	r5, r0
 800a366:	f7f6 f905 	bl	8000574 <__aeabi_i2d>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a372:	f7f5 ffb1 	bl	80002d8 <__aeabi_dsub>
 800a376:	3530      	adds	r5, #48	@ 0x30
 800a378:	f806 5b01 	strb.w	r5, [r6], #1
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	42a6      	cmp	r6, r4
 800a382:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	d124      	bne.n	800a3d6 <_dtoa_r+0x636>
 800a38c:	4bac      	ldr	r3, [pc, #688]	@ (800a640 <_dtoa_r+0x8a0>)
 800a38e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a392:	f7f5 ffa3 	bl	80002dc <__adddf3>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a39e:	f7f6 fbe3 	bl	8000b68 <__aeabi_dcmpgt>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d145      	bne.n	800a432 <_dtoa_r+0x692>
 800a3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3aa:	49a5      	ldr	r1, [pc, #660]	@ (800a640 <_dtoa_r+0x8a0>)
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f7f5 ff93 	bl	80002d8 <__aeabi_dsub>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ba:	f7f6 fbb7 	bl	8000b2c <__aeabi_dcmplt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	f43f aef4 	beq.w	800a1ac <_dtoa_r+0x40c>
 800a3c4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a3c6:	1e73      	subs	r3, r6, #1
 800a3c8:	9315      	str	r3, [sp, #84]	@ 0x54
 800a3ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3ce:	2b30      	cmp	r3, #48	@ 0x30
 800a3d0:	d0f8      	beq.n	800a3c4 <_dtoa_r+0x624>
 800a3d2:	9f04      	ldr	r7, [sp, #16]
 800a3d4:	e73d      	b.n	800a252 <_dtoa_r+0x4b2>
 800a3d6:	4b9b      	ldr	r3, [pc, #620]	@ (800a644 <_dtoa_r+0x8a4>)
 800a3d8:	f7f6 f936 	bl	8000648 <__aeabi_dmul>
 800a3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e0:	e7bc      	b.n	800a35c <_dtoa_r+0x5bc>
 800a3e2:	d10c      	bne.n	800a3fe <_dtoa_r+0x65e>
 800a3e4:	4b98      	ldr	r3, [pc, #608]	@ (800a648 <_dtoa_r+0x8a8>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ec:	f7f6 f92c 	bl	8000648 <__aeabi_dmul>
 800a3f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3f4:	f7f6 fbae 	bl	8000b54 <__aeabi_dcmpge>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f000 8157 	beq.w	800a6ac <_dtoa_r+0x90c>
 800a3fe:	2400      	movs	r4, #0
 800a400:	4625      	mov	r5, r4
 800a402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a404:	43db      	mvns	r3, r3
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	4656      	mov	r6, sl
 800a40a:	2700      	movs	r7, #0
 800a40c:	4621      	mov	r1, r4
 800a40e:	4658      	mov	r0, fp
 800a410:	f000 faa9 	bl	800a966 <_Bfree>
 800a414:	2d00      	cmp	r5, #0
 800a416:	d0dc      	beq.n	800a3d2 <_dtoa_r+0x632>
 800a418:	b12f      	cbz	r7, 800a426 <_dtoa_r+0x686>
 800a41a:	42af      	cmp	r7, r5
 800a41c:	d003      	beq.n	800a426 <_dtoa_r+0x686>
 800a41e:	4639      	mov	r1, r7
 800a420:	4658      	mov	r0, fp
 800a422:	f000 faa0 	bl	800a966 <_Bfree>
 800a426:	4629      	mov	r1, r5
 800a428:	4658      	mov	r0, fp
 800a42a:	f000 fa9c 	bl	800a966 <_Bfree>
 800a42e:	e7d0      	b.n	800a3d2 <_dtoa_r+0x632>
 800a430:	9704      	str	r7, [sp, #16]
 800a432:	4633      	mov	r3, r6
 800a434:	461e      	mov	r6, r3
 800a436:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a43a:	2a39      	cmp	r2, #57	@ 0x39
 800a43c:	d107      	bne.n	800a44e <_dtoa_r+0x6ae>
 800a43e:	459a      	cmp	sl, r3
 800a440:	d1f8      	bne.n	800a434 <_dtoa_r+0x694>
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	3201      	adds	r2, #1
 800a446:	9204      	str	r2, [sp, #16]
 800a448:	2230      	movs	r2, #48	@ 0x30
 800a44a:	f88a 2000 	strb.w	r2, [sl]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	3201      	adds	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e7bd      	b.n	800a3d2 <_dtoa_r+0x632>
 800a456:	4b7b      	ldr	r3, [pc, #492]	@ (800a644 <_dtoa_r+0x8a4>)
 800a458:	2200      	movs	r2, #0
 800a45a:	f7f6 f8f5 	bl	8000648 <__aeabi_dmul>
 800a45e:	2200      	movs	r2, #0
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	460d      	mov	r5, r1
 800a466:	f7f6 fb57 	bl	8000b18 <__aeabi_dcmpeq>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f43f aeba 	beq.w	800a1e4 <_dtoa_r+0x444>
 800a470:	e6ef      	b.n	800a252 <_dtoa_r+0x4b2>
 800a472:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a474:	2a00      	cmp	r2, #0
 800a476:	f000 80db 	beq.w	800a630 <_dtoa_r+0x890>
 800a47a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a47c:	2a01      	cmp	r2, #1
 800a47e:	f300 80bf 	bgt.w	800a600 <_dtoa_r+0x860>
 800a482:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a484:	2a00      	cmp	r2, #0
 800a486:	f000 80b7 	beq.w	800a5f8 <_dtoa_r+0x858>
 800a48a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a48e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a490:	4646      	mov	r6, r8
 800a492:	9a08      	ldr	r2, [sp, #32]
 800a494:	2101      	movs	r1, #1
 800a496:	441a      	add	r2, r3
 800a498:	4658      	mov	r0, fp
 800a49a:	4498      	add	r8, r3
 800a49c:	9208      	str	r2, [sp, #32]
 800a49e:	f000 fb47 	bl	800ab30 <__i2b>
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	b15e      	cbz	r6, 800a4be <_dtoa_r+0x71e>
 800a4a6:	9b08      	ldr	r3, [sp, #32]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dd08      	ble.n	800a4be <_dtoa_r+0x71e>
 800a4ac:	42b3      	cmp	r3, r6
 800a4ae:	9a08      	ldr	r2, [sp, #32]
 800a4b0:	bfa8      	it	ge
 800a4b2:	4633      	movge	r3, r6
 800a4b4:	eba8 0803 	sub.w	r8, r8, r3
 800a4b8:	1af6      	subs	r6, r6, r3
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	9308      	str	r3, [sp, #32]
 800a4be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4c0:	b1f3      	cbz	r3, 800a500 <_dtoa_r+0x760>
 800a4c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 80b7 	beq.w	800a638 <_dtoa_r+0x898>
 800a4ca:	b18c      	cbz	r4, 800a4f0 <_dtoa_r+0x750>
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4658      	mov	r0, fp
 800a4d2:	f000 fbed 	bl	800acb0 <__pow5mult>
 800a4d6:	464a      	mov	r2, r9
 800a4d8:	4601      	mov	r1, r0
 800a4da:	4605      	mov	r5, r0
 800a4dc:	4658      	mov	r0, fp
 800a4de:	f000 fb3d 	bl	800ab5c <__multiply>
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	9004      	str	r0, [sp, #16]
 800a4e6:	4658      	mov	r0, fp
 800a4e8:	f000 fa3d 	bl	800a966 <_Bfree>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	4699      	mov	r9, r3
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f2:	1b1a      	subs	r2, r3, r4
 800a4f4:	d004      	beq.n	800a500 <_dtoa_r+0x760>
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4658      	mov	r0, fp
 800a4fa:	f000 fbd9 	bl	800acb0 <__pow5mult>
 800a4fe:	4681      	mov	r9, r0
 800a500:	2101      	movs	r1, #1
 800a502:	4658      	mov	r0, fp
 800a504:	f000 fb14 	bl	800ab30 <__i2b>
 800a508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a50a:	4604      	mov	r4, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 81cc 	beq.w	800a8aa <_dtoa_r+0xb0a>
 800a512:	461a      	mov	r2, r3
 800a514:	4601      	mov	r1, r0
 800a516:	4658      	mov	r0, fp
 800a518:	f000 fbca 	bl	800acb0 <__pow5mult>
 800a51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51e:	2b01      	cmp	r3, #1
 800a520:	4604      	mov	r4, r0
 800a522:	f300 8095 	bgt.w	800a650 <_dtoa_r+0x8b0>
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f040 8087 	bne.w	800a63c <_dtoa_r+0x89c>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a534:	2b00      	cmp	r3, #0
 800a536:	f040 8089 	bne.w	800a64c <_dtoa_r+0x8ac>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a540:	0d1b      	lsrs	r3, r3, #20
 800a542:	051b      	lsls	r3, r3, #20
 800a544:	b12b      	cbz	r3, 800a552 <_dtoa_r+0x7b2>
 800a546:	9b08      	ldr	r3, [sp, #32]
 800a548:	3301      	adds	r3, #1
 800a54a:	9308      	str	r3, [sp, #32]
 800a54c:	f108 0801 	add.w	r8, r8, #1
 800a550:	2301      	movs	r3, #1
 800a552:	930a      	str	r3, [sp, #40]	@ 0x28
 800a554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 81ad 	beq.w	800a8b6 <_dtoa_r+0xb16>
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a562:	6918      	ldr	r0, [r3, #16]
 800a564:	f000 fa98 	bl	800aa98 <__hi0bits>
 800a568:	f1c0 0020 	rsb	r0, r0, #32
 800a56c:	9b08      	ldr	r3, [sp, #32]
 800a56e:	4418      	add	r0, r3
 800a570:	f010 001f 	ands.w	r0, r0, #31
 800a574:	d077      	beq.n	800a666 <_dtoa_r+0x8c6>
 800a576:	f1c0 0320 	rsb	r3, r0, #32
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	dd6b      	ble.n	800a656 <_dtoa_r+0x8b6>
 800a57e:	9b08      	ldr	r3, [sp, #32]
 800a580:	f1c0 001c 	rsb	r0, r0, #28
 800a584:	4403      	add	r3, r0
 800a586:	4480      	add	r8, r0
 800a588:	4406      	add	r6, r0
 800a58a:	9308      	str	r3, [sp, #32]
 800a58c:	f1b8 0f00 	cmp.w	r8, #0
 800a590:	dd05      	ble.n	800a59e <_dtoa_r+0x7fe>
 800a592:	4649      	mov	r1, r9
 800a594:	4642      	mov	r2, r8
 800a596:	4658      	mov	r0, fp
 800a598:	f000 fbca 	bl	800ad30 <__lshift>
 800a59c:	4681      	mov	r9, r0
 800a59e:	9b08      	ldr	r3, [sp, #32]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	dd05      	ble.n	800a5b0 <_dtoa_r+0x810>
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4658      	mov	r0, fp
 800a5aa:	f000 fbc1 	bl	800ad30 <__lshift>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d059      	beq.n	800a66a <_dtoa_r+0x8ca>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4648      	mov	r0, r9
 800a5ba:	f000 fc25 	bl	800ae08 <__mcmp>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	da53      	bge.n	800a66a <_dtoa_r+0x8ca>
 800a5c2:	1e7b      	subs	r3, r7, #1
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	220a      	movs	r2, #10
 800a5cc:	4658      	mov	r0, fp
 800a5ce:	f000 f9d3 	bl	800a978 <__multadd>
 800a5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d4:	4681      	mov	r9, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 816f 	beq.w	800a8ba <_dtoa_r+0xb1a>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4629      	mov	r1, r5
 800a5e0:	220a      	movs	r2, #10
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 f9c8 	bl	800a978 <__multadd>
 800a5e8:	9b00      	ldr	r3, [sp, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	dc67      	bgt.n	800a6c0 <_dtoa_r+0x920>
 800a5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	dc41      	bgt.n	800a67a <_dtoa_r+0x8da>
 800a5f6:	e063      	b.n	800a6c0 <_dtoa_r+0x920>
 800a5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a5fa:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5fe:	e746      	b.n	800a48e <_dtoa_r+0x6ee>
 800a600:	9b07      	ldr	r3, [sp, #28]
 800a602:	1e5c      	subs	r4, r3, #1
 800a604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a606:	42a3      	cmp	r3, r4
 800a608:	bfbf      	itttt	lt
 800a60a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a60c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a60e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a610:	1ae3      	sublt	r3, r4, r3
 800a612:	bfb4      	ite	lt
 800a614:	18d2      	addlt	r2, r2, r3
 800a616:	1b1c      	subge	r4, r3, r4
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	bfbc      	itt	lt
 800a61c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a61e:	2400      	movlt	r4, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	bfb5      	itete	lt
 800a624:	eba8 0603 	sublt.w	r6, r8, r3
 800a628:	9b07      	ldrge	r3, [sp, #28]
 800a62a:	2300      	movlt	r3, #0
 800a62c:	4646      	movge	r6, r8
 800a62e:	e730      	b.n	800a492 <_dtoa_r+0x6f2>
 800a630:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a632:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a634:	4646      	mov	r6, r8
 800a636:	e735      	b.n	800a4a4 <_dtoa_r+0x704>
 800a638:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a63a:	e75c      	b.n	800a4f6 <_dtoa_r+0x756>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e788      	b.n	800a552 <_dtoa_r+0x7b2>
 800a640:	3fe00000 	.word	0x3fe00000
 800a644:	40240000 	.word	0x40240000
 800a648:	40140000 	.word	0x40140000
 800a64c:	9b02      	ldr	r3, [sp, #8]
 800a64e:	e780      	b.n	800a552 <_dtoa_r+0x7b2>
 800a650:	2300      	movs	r3, #0
 800a652:	930a      	str	r3, [sp, #40]	@ 0x28
 800a654:	e782      	b.n	800a55c <_dtoa_r+0x7bc>
 800a656:	d099      	beq.n	800a58c <_dtoa_r+0x7ec>
 800a658:	9a08      	ldr	r2, [sp, #32]
 800a65a:	331c      	adds	r3, #28
 800a65c:	441a      	add	r2, r3
 800a65e:	4498      	add	r8, r3
 800a660:	441e      	add	r6, r3
 800a662:	9208      	str	r2, [sp, #32]
 800a664:	e792      	b.n	800a58c <_dtoa_r+0x7ec>
 800a666:	4603      	mov	r3, r0
 800a668:	e7f6      	b.n	800a658 <_dtoa_r+0x8b8>
 800a66a:	9b07      	ldr	r3, [sp, #28]
 800a66c:	9704      	str	r7, [sp, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dc20      	bgt.n	800a6b4 <_dtoa_r+0x914>
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a676:	2b02      	cmp	r3, #2
 800a678:	dd1e      	ble.n	800a6b8 <_dtoa_r+0x918>
 800a67a:	9b00      	ldr	r3, [sp, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f47f aec0 	bne.w	800a402 <_dtoa_r+0x662>
 800a682:	4621      	mov	r1, r4
 800a684:	2205      	movs	r2, #5
 800a686:	4658      	mov	r0, fp
 800a688:	f000 f976 	bl	800a978 <__multadd>
 800a68c:	4601      	mov	r1, r0
 800a68e:	4604      	mov	r4, r0
 800a690:	4648      	mov	r0, r9
 800a692:	f000 fbb9 	bl	800ae08 <__mcmp>
 800a696:	2800      	cmp	r0, #0
 800a698:	f77f aeb3 	ble.w	800a402 <_dtoa_r+0x662>
 800a69c:	4656      	mov	r6, sl
 800a69e:	2331      	movs	r3, #49	@ 0x31
 800a6a0:	f806 3b01 	strb.w	r3, [r6], #1
 800a6a4:	9b04      	ldr	r3, [sp, #16]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	9304      	str	r3, [sp, #16]
 800a6aa:	e6ae      	b.n	800a40a <_dtoa_r+0x66a>
 800a6ac:	9c07      	ldr	r4, [sp, #28]
 800a6ae:	9704      	str	r7, [sp, #16]
 800a6b0:	4625      	mov	r5, r4
 800a6b2:	e7f3      	b.n	800a69c <_dtoa_r+0x8fc>
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8101 	beq.w	800a8c2 <_dtoa_r+0xb22>
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	dd05      	ble.n	800a6d0 <_dtoa_r+0x930>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	4658      	mov	r0, fp
 800a6ca:	f000 fb31 	bl	800ad30 <__lshift>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d059      	beq.n	800a78a <_dtoa_r+0x9ea>
 800a6d6:	6869      	ldr	r1, [r5, #4]
 800a6d8:	4658      	mov	r0, fp
 800a6da:	f000 f91f 	bl	800a91c <_Balloc>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	b920      	cbnz	r0, 800a6ec <_dtoa_r+0x94c>
 800a6e2:	4b83      	ldr	r3, [pc, #524]	@ (800a8f0 <_dtoa_r+0xb50>)
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6ea:	e480      	b.n	8009fee <_dtoa_r+0x24e>
 800a6ec:	692a      	ldr	r2, [r5, #16]
 800a6ee:	3202      	adds	r2, #2
 800a6f0:	0092      	lsls	r2, r2, #2
 800a6f2:	f105 010c 	add.w	r1, r5, #12
 800a6f6:	300c      	adds	r0, #12
 800a6f8:	f7ff fa3e 	bl	8009b78 <memcpy>
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4631      	mov	r1, r6
 800a700:	4658      	mov	r0, fp
 800a702:	f000 fb15 	bl	800ad30 <__lshift>
 800a706:	f10a 0301 	add.w	r3, sl, #1
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	4453      	add	r3, sl
 800a710:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a712:	9b02      	ldr	r3, [sp, #8]
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	462f      	mov	r7, r5
 800a71a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a71c:	4605      	mov	r5, r0
 800a71e:	9b07      	ldr	r3, [sp, #28]
 800a720:	4621      	mov	r1, r4
 800a722:	3b01      	subs	r3, #1
 800a724:	4648      	mov	r0, r9
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	f7ff fab0 	bl	8009c8c <quorem>
 800a72c:	4639      	mov	r1, r7
 800a72e:	9002      	str	r0, [sp, #8]
 800a730:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a734:	4648      	mov	r0, r9
 800a736:	f000 fb67 	bl	800ae08 <__mcmp>
 800a73a:	462a      	mov	r2, r5
 800a73c:	9008      	str	r0, [sp, #32]
 800a73e:	4621      	mov	r1, r4
 800a740:	4658      	mov	r0, fp
 800a742:	f000 fb7d 	bl	800ae40 <__mdiff>
 800a746:	68c2      	ldr	r2, [r0, #12]
 800a748:	4606      	mov	r6, r0
 800a74a:	bb02      	cbnz	r2, 800a78e <_dtoa_r+0x9ee>
 800a74c:	4601      	mov	r1, r0
 800a74e:	4648      	mov	r0, r9
 800a750:	f000 fb5a 	bl	800ae08 <__mcmp>
 800a754:	4602      	mov	r2, r0
 800a756:	4631      	mov	r1, r6
 800a758:	4658      	mov	r0, fp
 800a75a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a75c:	f000 f903 	bl	800a966 <_Bfree>
 800a760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a764:	9e07      	ldr	r6, [sp, #28]
 800a766:	ea43 0102 	orr.w	r1, r3, r2
 800a76a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a76c:	4319      	orrs	r1, r3
 800a76e:	d110      	bne.n	800a792 <_dtoa_r+0x9f2>
 800a770:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a774:	d029      	beq.n	800a7ca <_dtoa_r+0xa2a>
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	dd02      	ble.n	800a782 <_dtoa_r+0x9e2>
 800a77c:	9b02      	ldr	r3, [sp, #8]
 800a77e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	f883 8000 	strb.w	r8, [r3]
 800a788:	e640      	b.n	800a40c <_dtoa_r+0x66c>
 800a78a:	4628      	mov	r0, r5
 800a78c:	e7bb      	b.n	800a706 <_dtoa_r+0x966>
 800a78e:	2201      	movs	r2, #1
 800a790:	e7e1      	b.n	800a756 <_dtoa_r+0x9b6>
 800a792:	9b08      	ldr	r3, [sp, #32]
 800a794:	2b00      	cmp	r3, #0
 800a796:	db04      	blt.n	800a7a2 <_dtoa_r+0xa02>
 800a798:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a79a:	430b      	orrs	r3, r1
 800a79c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	d120      	bne.n	800a7e4 <_dtoa_r+0xa44>
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	dded      	ble.n	800a782 <_dtoa_r+0x9e2>
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	4658      	mov	r0, fp
 800a7ac:	f000 fac0 	bl	800ad30 <__lshift>
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	4681      	mov	r9, r0
 800a7b4:	f000 fb28 	bl	800ae08 <__mcmp>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	dc03      	bgt.n	800a7c4 <_dtoa_r+0xa24>
 800a7bc:	d1e1      	bne.n	800a782 <_dtoa_r+0x9e2>
 800a7be:	f018 0f01 	tst.w	r8, #1
 800a7c2:	d0de      	beq.n	800a782 <_dtoa_r+0x9e2>
 800a7c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7c8:	d1d8      	bne.n	800a77c <_dtoa_r+0x9dc>
 800a7ca:	9a00      	ldr	r2, [sp, #0]
 800a7cc:	2339      	movs	r3, #57	@ 0x39
 800a7ce:	7013      	strb	r3, [r2, #0]
 800a7d0:	4633      	mov	r3, r6
 800a7d2:	461e      	mov	r6, r3
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7da:	2a39      	cmp	r2, #57	@ 0x39
 800a7dc:	d052      	beq.n	800a884 <_dtoa_r+0xae4>
 800a7de:	3201      	adds	r2, #1
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	e613      	b.n	800a40c <_dtoa_r+0x66c>
 800a7e4:	2a00      	cmp	r2, #0
 800a7e6:	dd07      	ble.n	800a7f8 <_dtoa_r+0xa58>
 800a7e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7ec:	d0ed      	beq.n	800a7ca <_dtoa_r+0xa2a>
 800a7ee:	9a00      	ldr	r2, [sp, #0]
 800a7f0:	f108 0301 	add.w	r3, r8, #1
 800a7f4:	7013      	strb	r3, [r2, #0]
 800a7f6:	e609      	b.n	800a40c <_dtoa_r+0x66c>
 800a7f8:	9b07      	ldr	r3, [sp, #28]
 800a7fa:	9a07      	ldr	r2, [sp, #28]
 800a7fc:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a800:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a802:	4293      	cmp	r3, r2
 800a804:	d028      	beq.n	800a858 <_dtoa_r+0xab8>
 800a806:	4649      	mov	r1, r9
 800a808:	2300      	movs	r3, #0
 800a80a:	220a      	movs	r2, #10
 800a80c:	4658      	mov	r0, fp
 800a80e:	f000 f8b3 	bl	800a978 <__multadd>
 800a812:	42af      	cmp	r7, r5
 800a814:	4681      	mov	r9, r0
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	f04f 020a 	mov.w	r2, #10
 800a81e:	4639      	mov	r1, r7
 800a820:	4658      	mov	r0, fp
 800a822:	d107      	bne.n	800a834 <_dtoa_r+0xa94>
 800a824:	f000 f8a8 	bl	800a978 <__multadd>
 800a828:	4607      	mov	r7, r0
 800a82a:	4605      	mov	r5, r0
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	3301      	adds	r3, #1
 800a830:	9307      	str	r3, [sp, #28]
 800a832:	e774      	b.n	800a71e <_dtoa_r+0x97e>
 800a834:	f000 f8a0 	bl	800a978 <__multadd>
 800a838:	4629      	mov	r1, r5
 800a83a:	4607      	mov	r7, r0
 800a83c:	2300      	movs	r3, #0
 800a83e:	220a      	movs	r2, #10
 800a840:	4658      	mov	r0, fp
 800a842:	f000 f899 	bl	800a978 <__multadd>
 800a846:	4605      	mov	r5, r0
 800a848:	e7f0      	b.n	800a82c <_dtoa_r+0xa8c>
 800a84a:	9b00      	ldr	r3, [sp, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	bfcc      	ite	gt
 800a850:	461e      	movgt	r6, r3
 800a852:	2601      	movle	r6, #1
 800a854:	4456      	add	r6, sl
 800a856:	2700      	movs	r7, #0
 800a858:	4649      	mov	r1, r9
 800a85a:	2201      	movs	r2, #1
 800a85c:	4658      	mov	r0, fp
 800a85e:	f000 fa67 	bl	800ad30 <__lshift>
 800a862:	4621      	mov	r1, r4
 800a864:	4681      	mov	r9, r0
 800a866:	f000 facf 	bl	800ae08 <__mcmp>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	dcb0      	bgt.n	800a7d0 <_dtoa_r+0xa30>
 800a86e:	d102      	bne.n	800a876 <_dtoa_r+0xad6>
 800a870:	f018 0f01 	tst.w	r8, #1
 800a874:	d1ac      	bne.n	800a7d0 <_dtoa_r+0xa30>
 800a876:	4633      	mov	r3, r6
 800a878:	461e      	mov	r6, r3
 800a87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a87e:	2a30      	cmp	r2, #48	@ 0x30
 800a880:	d0fa      	beq.n	800a878 <_dtoa_r+0xad8>
 800a882:	e5c3      	b.n	800a40c <_dtoa_r+0x66c>
 800a884:	459a      	cmp	sl, r3
 800a886:	d1a4      	bne.n	800a7d2 <_dtoa_r+0xa32>
 800a888:	9b04      	ldr	r3, [sp, #16]
 800a88a:	3301      	adds	r3, #1
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	2331      	movs	r3, #49	@ 0x31
 800a890:	f88a 3000 	strb.w	r3, [sl]
 800a894:	e5ba      	b.n	800a40c <_dtoa_r+0x66c>
 800a896:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a898:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a8f4 <_dtoa_r+0xb54>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f43f aab6 	beq.w	8009e0e <_dtoa_r+0x6e>
 800a8a2:	f10a 0308 	add.w	r3, sl, #8
 800a8a6:	f7ff bab0 	b.w	8009e0a <_dtoa_r+0x6a>
 800a8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	f77f ae3a 	ble.w	800a526 <_dtoa_r+0x786>
 800a8b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e658      	b.n	800a56c <_dtoa_r+0x7cc>
 800a8ba:	9b00      	ldr	r3, [sp, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f77f aed9 	ble.w	800a674 <_dtoa_r+0x8d4>
 800a8c2:	4656      	mov	r6, sl
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4648      	mov	r0, r9
 800a8c8:	f7ff f9e0 	bl	8009c8c <quorem>
 800a8cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8d0:	f806 8b01 	strb.w	r8, [r6], #1
 800a8d4:	9b00      	ldr	r3, [sp, #0]
 800a8d6:	eba6 020a 	sub.w	r2, r6, sl
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	ddb5      	ble.n	800a84a <_dtoa_r+0xaaa>
 800a8de:	4649      	mov	r1, r9
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	220a      	movs	r2, #10
 800a8e4:	4658      	mov	r0, fp
 800a8e6:	f000 f847 	bl	800a978 <__multadd>
 800a8ea:	4681      	mov	r9, r0
 800a8ec:	e7ea      	b.n	800a8c4 <_dtoa_r+0xb24>
 800a8ee:	bf00      	nop
 800a8f0:	0800e4f3 	.word	0x0800e4f3
 800a8f4:	0800e4e6 	.word	0x0800e4e6

0800a8f8 <__ascii_mbtowc>:
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	b901      	cbnz	r1, 800a8fe <__ascii_mbtowc+0x6>
 800a8fc:	a901      	add	r1, sp, #4
 800a8fe:	b142      	cbz	r2, 800a912 <__ascii_mbtowc+0x1a>
 800a900:	b14b      	cbz	r3, 800a916 <__ascii_mbtowc+0x1e>
 800a902:	7813      	ldrb	r3, [r2, #0]
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	1e10      	subs	r0, r2, #0
 800a90a:	bf18      	it	ne
 800a90c:	2001      	movne	r0, #1
 800a90e:	b002      	add	sp, #8
 800a910:	4770      	bx	lr
 800a912:	4610      	mov	r0, r2
 800a914:	e7fb      	b.n	800a90e <__ascii_mbtowc+0x16>
 800a916:	f06f 0001 	mvn.w	r0, #1
 800a91a:	e7f8      	b.n	800a90e <__ascii_mbtowc+0x16>

0800a91c <_Balloc>:
 800a91c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a91e:	b570      	push	{r4, r5, r6, lr}
 800a920:	4605      	mov	r5, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b17b      	cbz	r3, 800a946 <_Balloc+0x2a>
 800a926:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800a928:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a92c:	b9a0      	cbnz	r0, 800a958 <_Balloc+0x3c>
 800a92e:	2101      	movs	r1, #1
 800a930:	fa01 f604 	lsl.w	r6, r1, r4
 800a934:	1d72      	adds	r2, r6, #5
 800a936:	0092      	lsls	r2, r2, #2
 800a938:	4628      	mov	r0, r5
 800a93a:	f003 f8cf 	bl	800dadc <_calloc_r>
 800a93e:	b148      	cbz	r0, 800a954 <_Balloc+0x38>
 800a940:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a944:	e00b      	b.n	800a95e <_Balloc+0x42>
 800a946:	2221      	movs	r2, #33	@ 0x21
 800a948:	2104      	movs	r1, #4
 800a94a:	f003 f8c7 	bl	800dadc <_calloc_r>
 800a94e:	6468      	str	r0, [r5, #68]	@ 0x44
 800a950:	2800      	cmp	r0, #0
 800a952:	d1e8      	bne.n	800a926 <_Balloc+0xa>
 800a954:	2000      	movs	r0, #0
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	6802      	ldr	r2, [r0, #0]
 800a95a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a95e:	2300      	movs	r3, #0
 800a960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a964:	e7f7      	b.n	800a956 <_Balloc+0x3a>

0800a966 <_Bfree>:
 800a966:	b131      	cbz	r1, 800a976 <_Bfree+0x10>
 800a968:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a96a:	684a      	ldr	r2, [r1, #4]
 800a96c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a970:	6008      	str	r0, [r1, #0]
 800a972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a976:	4770      	bx	lr

0800a978 <__multadd>:
 800a978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a97c:	690d      	ldr	r5, [r1, #16]
 800a97e:	4607      	mov	r7, r0
 800a980:	460c      	mov	r4, r1
 800a982:	461e      	mov	r6, r3
 800a984:	f101 0c14 	add.w	ip, r1, #20
 800a988:	2000      	movs	r0, #0
 800a98a:	f8dc 3000 	ldr.w	r3, [ip]
 800a98e:	b299      	uxth	r1, r3
 800a990:	fb02 6101 	mla	r1, r2, r1, r6
 800a994:	0c1e      	lsrs	r6, r3, #16
 800a996:	0c0b      	lsrs	r3, r1, #16
 800a998:	fb02 3306 	mla	r3, r2, r6, r3
 800a99c:	b289      	uxth	r1, r1
 800a99e:	3001      	adds	r0, #1
 800a9a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9a4:	4285      	cmp	r5, r0
 800a9a6:	f84c 1b04 	str.w	r1, [ip], #4
 800a9aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9ae:	dcec      	bgt.n	800a98a <__multadd+0x12>
 800a9b0:	b30e      	cbz	r6, 800a9f6 <__multadd+0x7e>
 800a9b2:	68a3      	ldr	r3, [r4, #8]
 800a9b4:	42ab      	cmp	r3, r5
 800a9b6:	dc19      	bgt.n	800a9ec <__multadd+0x74>
 800a9b8:	6861      	ldr	r1, [r4, #4]
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	3101      	adds	r1, #1
 800a9be:	f7ff ffad 	bl	800a91c <_Balloc>
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	b928      	cbnz	r0, 800a9d2 <__multadd+0x5a>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a9fc <__multadd+0x84>)
 800a9ca:	480d      	ldr	r0, [pc, #52]	@ (800aa00 <__multadd+0x88>)
 800a9cc:	21ba      	movs	r1, #186	@ 0xba
 800a9ce:	f003 f867 	bl	800daa0 <__assert_func>
 800a9d2:	6922      	ldr	r2, [r4, #16]
 800a9d4:	3202      	adds	r2, #2
 800a9d6:	f104 010c 	add.w	r1, r4, #12
 800a9da:	0092      	lsls	r2, r2, #2
 800a9dc:	300c      	adds	r0, #12
 800a9de:	f7ff f8cb 	bl	8009b78 <memcpy>
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	4638      	mov	r0, r7
 800a9e6:	f7ff ffbe 	bl	800a966 <_Bfree>
 800a9ea:	4644      	mov	r4, r8
 800a9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	615e      	str	r6, [r3, #20]
 800a9f4:	6125      	str	r5, [r4, #16]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fc:	0800e4f3 	.word	0x0800e4f3
 800aa00:	0800e55c 	.word	0x0800e55c

0800aa04 <__s2b>:
 800aa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa08:	460c      	mov	r4, r1
 800aa0a:	4615      	mov	r5, r2
 800aa0c:	461f      	mov	r7, r3
 800aa0e:	2209      	movs	r2, #9
 800aa10:	3308      	adds	r3, #8
 800aa12:	4606      	mov	r6, r0
 800aa14:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	db09      	blt.n	800aa34 <__s2b+0x30>
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff ff7b 	bl	800a91c <_Balloc>
 800aa26:	b940      	cbnz	r0, 800aa3a <__s2b+0x36>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	4b19      	ldr	r3, [pc, #100]	@ (800aa90 <__s2b+0x8c>)
 800aa2c:	4819      	ldr	r0, [pc, #100]	@ (800aa94 <__s2b+0x90>)
 800aa2e:	21d3      	movs	r1, #211	@ 0xd3
 800aa30:	f003 f836 	bl	800daa0 <__assert_func>
 800aa34:	0052      	lsls	r2, r2, #1
 800aa36:	3101      	adds	r1, #1
 800aa38:	e7f0      	b.n	800aa1c <__s2b+0x18>
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	6143      	str	r3, [r0, #20]
 800aa3e:	2d09      	cmp	r5, #9
 800aa40:	f04f 0301 	mov.w	r3, #1
 800aa44:	6103      	str	r3, [r0, #16]
 800aa46:	dd16      	ble.n	800aa76 <__s2b+0x72>
 800aa48:	f104 0909 	add.w	r9, r4, #9
 800aa4c:	46c8      	mov	r8, r9
 800aa4e:	442c      	add	r4, r5
 800aa50:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa54:	4601      	mov	r1, r0
 800aa56:	3b30      	subs	r3, #48	@ 0x30
 800aa58:	220a      	movs	r2, #10
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ff8c 	bl	800a978 <__multadd>
 800aa60:	45a0      	cmp	r8, r4
 800aa62:	d1f5      	bne.n	800aa50 <__s2b+0x4c>
 800aa64:	f1a5 0408 	sub.w	r4, r5, #8
 800aa68:	444c      	add	r4, r9
 800aa6a:	1b2d      	subs	r5, r5, r4
 800aa6c:	1963      	adds	r3, r4, r5
 800aa6e:	42bb      	cmp	r3, r7
 800aa70:	db04      	blt.n	800aa7c <__s2b+0x78>
 800aa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa76:	340a      	adds	r4, #10
 800aa78:	2509      	movs	r5, #9
 800aa7a:	e7f6      	b.n	800aa6a <__s2b+0x66>
 800aa7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa80:	4601      	mov	r1, r0
 800aa82:	3b30      	subs	r3, #48	@ 0x30
 800aa84:	220a      	movs	r2, #10
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ff76 	bl	800a978 <__multadd>
 800aa8c:	e7ee      	b.n	800aa6c <__s2b+0x68>
 800aa8e:	bf00      	nop
 800aa90:	0800e4f3 	.word	0x0800e4f3
 800aa94:	0800e55c 	.word	0x0800e55c

0800aa98 <__hi0bits>:
 800aa98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	bf36      	itet	cc
 800aaa0:	0403      	lslcc	r3, r0, #16
 800aaa2:	2000      	movcs	r0, #0
 800aaa4:	2010      	movcc	r0, #16
 800aaa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaaa:	bf3c      	itt	cc
 800aaac:	021b      	lslcc	r3, r3, #8
 800aaae:	3008      	addcc	r0, #8
 800aab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aab4:	bf3c      	itt	cc
 800aab6:	011b      	lslcc	r3, r3, #4
 800aab8:	3004      	addcc	r0, #4
 800aaba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aabe:	bf3c      	itt	cc
 800aac0:	009b      	lslcc	r3, r3, #2
 800aac2:	3002      	addcc	r0, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	db05      	blt.n	800aad4 <__hi0bits+0x3c>
 800aac8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aacc:	f100 0001 	add.w	r0, r0, #1
 800aad0:	bf08      	it	eq
 800aad2:	2020      	moveq	r0, #32
 800aad4:	4770      	bx	lr

0800aad6 <__lo0bits>:
 800aad6:	6803      	ldr	r3, [r0, #0]
 800aad8:	4602      	mov	r2, r0
 800aada:	f013 0007 	ands.w	r0, r3, #7
 800aade:	d00b      	beq.n	800aaf8 <__lo0bits+0x22>
 800aae0:	07d9      	lsls	r1, r3, #31
 800aae2:	d421      	bmi.n	800ab28 <__lo0bits+0x52>
 800aae4:	0798      	lsls	r0, r3, #30
 800aae6:	bf49      	itett	mi
 800aae8:	085b      	lsrmi	r3, r3, #1
 800aaea:	089b      	lsrpl	r3, r3, #2
 800aaec:	2001      	movmi	r0, #1
 800aaee:	6013      	strmi	r3, [r2, #0]
 800aaf0:	bf5c      	itt	pl
 800aaf2:	6013      	strpl	r3, [r2, #0]
 800aaf4:	2002      	movpl	r0, #2
 800aaf6:	4770      	bx	lr
 800aaf8:	b299      	uxth	r1, r3
 800aafa:	b909      	cbnz	r1, 800ab00 <__lo0bits+0x2a>
 800aafc:	0c1b      	lsrs	r3, r3, #16
 800aafe:	2010      	movs	r0, #16
 800ab00:	b2d9      	uxtb	r1, r3
 800ab02:	b909      	cbnz	r1, 800ab08 <__lo0bits+0x32>
 800ab04:	3008      	adds	r0, #8
 800ab06:	0a1b      	lsrs	r3, r3, #8
 800ab08:	0719      	lsls	r1, r3, #28
 800ab0a:	bf04      	itt	eq
 800ab0c:	091b      	lsreq	r3, r3, #4
 800ab0e:	3004      	addeq	r0, #4
 800ab10:	0799      	lsls	r1, r3, #30
 800ab12:	bf04      	itt	eq
 800ab14:	089b      	lsreq	r3, r3, #2
 800ab16:	3002      	addeq	r0, #2
 800ab18:	07d9      	lsls	r1, r3, #31
 800ab1a:	d403      	bmi.n	800ab24 <__lo0bits+0x4e>
 800ab1c:	085b      	lsrs	r3, r3, #1
 800ab1e:	f100 0001 	add.w	r0, r0, #1
 800ab22:	d003      	beq.n	800ab2c <__lo0bits+0x56>
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	4770      	bx	lr
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4770      	bx	lr
 800ab2c:	2020      	movs	r0, #32
 800ab2e:	4770      	bx	lr

0800ab30 <__i2b>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	460c      	mov	r4, r1
 800ab34:	2101      	movs	r1, #1
 800ab36:	f7ff fef1 	bl	800a91c <_Balloc>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	b928      	cbnz	r0, 800ab4a <__i2b+0x1a>
 800ab3e:	4b05      	ldr	r3, [pc, #20]	@ (800ab54 <__i2b+0x24>)
 800ab40:	4805      	ldr	r0, [pc, #20]	@ (800ab58 <__i2b+0x28>)
 800ab42:	f240 1145 	movw	r1, #325	@ 0x145
 800ab46:	f002 ffab 	bl	800daa0 <__assert_func>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	6144      	str	r4, [r0, #20]
 800ab4e:	6103      	str	r3, [r0, #16]
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	bf00      	nop
 800ab54:	0800e4f3 	.word	0x0800e4f3
 800ab58:	0800e55c 	.word	0x0800e55c

0800ab5c <__multiply>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	4614      	mov	r4, r2
 800ab62:	690a      	ldr	r2, [r1, #16]
 800ab64:	6923      	ldr	r3, [r4, #16]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	bfa8      	it	ge
 800ab6a:	4623      	movge	r3, r4
 800ab6c:	460f      	mov	r7, r1
 800ab6e:	bfa4      	itt	ge
 800ab70:	460c      	movge	r4, r1
 800ab72:	461f      	movge	r7, r3
 800ab74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab7c:	68a3      	ldr	r3, [r4, #8]
 800ab7e:	6861      	ldr	r1, [r4, #4]
 800ab80:	eb0a 0609 	add.w	r6, sl, r9
 800ab84:	42b3      	cmp	r3, r6
 800ab86:	b085      	sub	sp, #20
 800ab88:	bfb8      	it	lt
 800ab8a:	3101      	addlt	r1, #1
 800ab8c:	f7ff fec6 	bl	800a91c <_Balloc>
 800ab90:	b930      	cbnz	r0, 800aba0 <__multiply+0x44>
 800ab92:	4602      	mov	r2, r0
 800ab94:	4b44      	ldr	r3, [pc, #272]	@ (800aca8 <__multiply+0x14c>)
 800ab96:	4845      	ldr	r0, [pc, #276]	@ (800acac <__multiply+0x150>)
 800ab98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab9c:	f002 ff80 	bl	800daa0 <__assert_func>
 800aba0:	f100 0514 	add.w	r5, r0, #20
 800aba4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aba8:	462b      	mov	r3, r5
 800abaa:	2200      	movs	r2, #0
 800abac:	4543      	cmp	r3, r8
 800abae:	d321      	bcc.n	800abf4 <__multiply+0x98>
 800abb0:	f107 0114 	add.w	r1, r7, #20
 800abb4:	f104 0214 	add.w	r2, r4, #20
 800abb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	1b13      	subs	r3, r2, r4
 800abc4:	3b15      	subs	r3, #21
 800abc6:	f023 0303 	bic.w	r3, r3, #3
 800abca:	3304      	adds	r3, #4
 800abcc:	f104 0715 	add.w	r7, r4, #21
 800abd0:	42ba      	cmp	r2, r7
 800abd2:	bf38      	it	cc
 800abd4:	2304      	movcc	r3, #4
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	9b02      	ldr	r3, [sp, #8]
 800abda:	9103      	str	r1, [sp, #12]
 800abdc:	428b      	cmp	r3, r1
 800abde:	d80c      	bhi.n	800abfa <__multiply+0x9e>
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	dd03      	ble.n	800abec <__multiply+0x90>
 800abe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05b      	beq.n	800aca4 <__multiply+0x148>
 800abec:	6106      	str	r6, [r0, #16]
 800abee:	b005      	add	sp, #20
 800abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf4:	f843 2b04 	str.w	r2, [r3], #4
 800abf8:	e7d8      	b.n	800abac <__multiply+0x50>
 800abfa:	f8b1 a000 	ldrh.w	sl, [r1]
 800abfe:	f1ba 0f00 	cmp.w	sl, #0
 800ac02:	d024      	beq.n	800ac4e <__multiply+0xf2>
 800ac04:	f104 0e14 	add.w	lr, r4, #20
 800ac08:	46a9      	mov	r9, r5
 800ac0a:	f04f 0c00 	mov.w	ip, #0
 800ac0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac12:	f8d9 3000 	ldr.w	r3, [r9]
 800ac16:	fa1f fb87 	uxth.w	fp, r7
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ac24:	f8d9 7000 	ldr.w	r7, [r9]
 800ac28:	4463      	add	r3, ip
 800ac2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac2e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ac32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac3c:	4572      	cmp	r2, lr
 800ac3e:	f849 3b04 	str.w	r3, [r9], #4
 800ac42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac46:	d8e2      	bhi.n	800ac0e <__multiply+0xb2>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	f845 c003 	str.w	ip, [r5, r3]
 800ac4e:	9b03      	ldr	r3, [sp, #12]
 800ac50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac54:	3104      	adds	r1, #4
 800ac56:	f1b9 0f00 	cmp.w	r9, #0
 800ac5a:	d021      	beq.n	800aca0 <__multiply+0x144>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	f104 0c14 	add.w	ip, r4, #20
 800ac62:	46ae      	mov	lr, r5
 800ac64:	f04f 0a00 	mov.w	sl, #0
 800ac68:	f8bc b000 	ldrh.w	fp, [ip]
 800ac6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac70:	fb09 770b 	mla	r7, r9, fp, r7
 800ac74:	4457      	add	r7, sl
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac7c:	f84e 3b04 	str.w	r3, [lr], #4
 800ac80:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac88:	f8be 3000 	ldrh.w	r3, [lr]
 800ac8c:	fb09 330a 	mla	r3, r9, sl, r3
 800ac90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac94:	4562      	cmp	r2, ip
 800ac96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac9a:	d8e5      	bhi.n	800ac68 <__multiply+0x10c>
 800ac9c:	9f01      	ldr	r7, [sp, #4]
 800ac9e:	51eb      	str	r3, [r5, r7]
 800aca0:	3504      	adds	r5, #4
 800aca2:	e799      	b.n	800abd8 <__multiply+0x7c>
 800aca4:	3e01      	subs	r6, #1
 800aca6:	e79b      	b.n	800abe0 <__multiply+0x84>
 800aca8:	0800e4f3 	.word	0x0800e4f3
 800acac:	0800e55c 	.word	0x0800e55c

0800acb0 <__pow5mult>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4615      	mov	r5, r2
 800acb6:	f012 0203 	ands.w	r2, r2, #3
 800acba:	4607      	mov	r7, r0
 800acbc:	460e      	mov	r6, r1
 800acbe:	d007      	beq.n	800acd0 <__pow5mult+0x20>
 800acc0:	4c1a      	ldr	r4, [pc, #104]	@ (800ad2c <__pow5mult+0x7c>)
 800acc2:	3a01      	subs	r2, #1
 800acc4:	2300      	movs	r3, #0
 800acc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acca:	f7ff fe55 	bl	800a978 <__multadd>
 800acce:	4606      	mov	r6, r0
 800acd0:	10ad      	asrs	r5, r5, #2
 800acd2:	d027      	beq.n	800ad24 <__pow5mult+0x74>
 800acd4:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800acd6:	b944      	cbnz	r4, 800acea <__pow5mult+0x3a>
 800acd8:	f240 2171 	movw	r1, #625	@ 0x271
 800acdc:	4638      	mov	r0, r7
 800acde:	f7ff ff27 	bl	800ab30 <__i2b>
 800ace2:	2300      	movs	r3, #0
 800ace4:	6438      	str	r0, [r7, #64]	@ 0x40
 800ace6:	4604      	mov	r4, r0
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	07eb      	lsls	r3, r5, #31
 800acf0:	d50a      	bpl.n	800ad08 <__pow5mult+0x58>
 800acf2:	4631      	mov	r1, r6
 800acf4:	4622      	mov	r2, r4
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff ff30 	bl	800ab5c <__multiply>
 800acfc:	4631      	mov	r1, r6
 800acfe:	4680      	mov	r8, r0
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7ff fe30 	bl	800a966 <_Bfree>
 800ad06:	4646      	mov	r6, r8
 800ad08:	106d      	asrs	r5, r5, #1
 800ad0a:	d00b      	beq.n	800ad24 <__pow5mult+0x74>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	b938      	cbnz	r0, 800ad20 <__pow5mult+0x70>
 800ad10:	4622      	mov	r2, r4
 800ad12:	4621      	mov	r1, r4
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff ff21 	bl	800ab5c <__multiply>
 800ad1a:	6020      	str	r0, [r4, #0]
 800ad1c:	f8c0 9000 	str.w	r9, [r0]
 800ad20:	4604      	mov	r4, r0
 800ad22:	e7e4      	b.n	800acee <__pow5mult+0x3e>
 800ad24:	4630      	mov	r0, r6
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800e5b8 	.word	0x0800e5b8

0800ad30 <__lshift>:
 800ad30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad34:	460c      	mov	r4, r1
 800ad36:	6849      	ldr	r1, [r1, #4]
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad3e:	68a3      	ldr	r3, [r4, #8]
 800ad40:	4607      	mov	r7, r0
 800ad42:	4691      	mov	r9, r2
 800ad44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad48:	f108 0601 	add.w	r6, r8, #1
 800ad4c:	42b3      	cmp	r3, r6
 800ad4e:	db0b      	blt.n	800ad68 <__lshift+0x38>
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff fde3 	bl	800a91c <_Balloc>
 800ad56:	4605      	mov	r5, r0
 800ad58:	b948      	cbnz	r0, 800ad6e <__lshift+0x3e>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	4b28      	ldr	r3, [pc, #160]	@ (800ae00 <__lshift+0xd0>)
 800ad5e:	4829      	ldr	r0, [pc, #164]	@ (800ae04 <__lshift+0xd4>)
 800ad60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad64:	f002 fe9c 	bl	800daa0 <__assert_func>
 800ad68:	3101      	adds	r1, #1
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	e7ee      	b.n	800ad4c <__lshift+0x1c>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f100 0114 	add.w	r1, r0, #20
 800ad74:	f100 0210 	add.w	r2, r0, #16
 800ad78:	4618      	mov	r0, r3
 800ad7a:	4553      	cmp	r3, sl
 800ad7c:	db33      	blt.n	800ade6 <__lshift+0xb6>
 800ad7e:	6920      	ldr	r0, [r4, #16]
 800ad80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad84:	f104 0314 	add.w	r3, r4, #20
 800ad88:	f019 091f 	ands.w	r9, r9, #31
 800ad8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad94:	d02b      	beq.n	800adee <__lshift+0xbe>
 800ad96:	f1c9 0e20 	rsb	lr, r9, #32
 800ad9a:	468a      	mov	sl, r1
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	fa00 f009 	lsl.w	r0, r0, r9
 800ada4:	4310      	orrs	r0, r2
 800ada6:	f84a 0b04 	str.w	r0, [sl], #4
 800adaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adae:	459c      	cmp	ip, r3
 800adb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800adb4:	d8f3      	bhi.n	800ad9e <__lshift+0x6e>
 800adb6:	ebac 0304 	sub.w	r3, ip, r4
 800adba:	3b15      	subs	r3, #21
 800adbc:	f023 0303 	bic.w	r3, r3, #3
 800adc0:	3304      	adds	r3, #4
 800adc2:	f104 0015 	add.w	r0, r4, #21
 800adc6:	4584      	cmp	ip, r0
 800adc8:	bf38      	it	cc
 800adca:	2304      	movcc	r3, #4
 800adcc:	50ca      	str	r2, [r1, r3]
 800adce:	b10a      	cbz	r2, 800add4 <__lshift+0xa4>
 800add0:	f108 0602 	add.w	r6, r8, #2
 800add4:	3e01      	subs	r6, #1
 800add6:	4638      	mov	r0, r7
 800add8:	612e      	str	r6, [r5, #16]
 800adda:	4621      	mov	r1, r4
 800addc:	f7ff fdc3 	bl	800a966 <_Bfree>
 800ade0:	4628      	mov	r0, r5
 800ade2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade6:	f842 0f04 	str.w	r0, [r2, #4]!
 800adea:	3301      	adds	r3, #1
 800adec:	e7c5      	b.n	800ad7a <__lshift+0x4a>
 800adee:	3904      	subs	r1, #4
 800adf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800adf8:	459c      	cmp	ip, r3
 800adfa:	d8f9      	bhi.n	800adf0 <__lshift+0xc0>
 800adfc:	e7ea      	b.n	800add4 <__lshift+0xa4>
 800adfe:	bf00      	nop
 800ae00:	0800e4f3 	.word	0x0800e4f3
 800ae04:	0800e55c 	.word	0x0800e55c

0800ae08 <__mcmp>:
 800ae08:	690a      	ldr	r2, [r1, #16]
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	6900      	ldr	r0, [r0, #16]
 800ae0e:	1a80      	subs	r0, r0, r2
 800ae10:	b530      	push	{r4, r5, lr}
 800ae12:	d10e      	bne.n	800ae32 <__mcmp+0x2a>
 800ae14:	3314      	adds	r3, #20
 800ae16:	3114      	adds	r1, #20
 800ae18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae28:	4295      	cmp	r5, r2
 800ae2a:	d003      	beq.n	800ae34 <__mcmp+0x2c>
 800ae2c:	d205      	bcs.n	800ae3a <__mcmp+0x32>
 800ae2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae32:	bd30      	pop	{r4, r5, pc}
 800ae34:	42a3      	cmp	r3, r4
 800ae36:	d3f3      	bcc.n	800ae20 <__mcmp+0x18>
 800ae38:	e7fb      	b.n	800ae32 <__mcmp+0x2a>
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	e7f9      	b.n	800ae32 <__mcmp+0x2a>
	...

0800ae40 <__mdiff>:
 800ae40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	4689      	mov	r9, r1
 800ae46:	4606      	mov	r6, r0
 800ae48:	4611      	mov	r1, r2
 800ae4a:	4648      	mov	r0, r9
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	f7ff ffdb 	bl	800ae08 <__mcmp>
 800ae52:	1e05      	subs	r5, r0, #0
 800ae54:	d112      	bne.n	800ae7c <__mdiff+0x3c>
 800ae56:	4629      	mov	r1, r5
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff fd5f 	bl	800a91c <_Balloc>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	b928      	cbnz	r0, 800ae6e <__mdiff+0x2e>
 800ae62:	4b3f      	ldr	r3, [pc, #252]	@ (800af60 <__mdiff+0x120>)
 800ae64:	f240 2137 	movw	r1, #567	@ 0x237
 800ae68:	483e      	ldr	r0, [pc, #248]	@ (800af64 <__mdiff+0x124>)
 800ae6a:	f002 fe19 	bl	800daa0 <__assert_func>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae74:	4610      	mov	r0, r2
 800ae76:	b003      	add	sp, #12
 800ae78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7c:	bfbc      	itt	lt
 800ae7e:	464b      	movlt	r3, r9
 800ae80:	46a1      	movlt	r9, r4
 800ae82:	4630      	mov	r0, r6
 800ae84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae88:	bfba      	itte	lt
 800ae8a:	461c      	movlt	r4, r3
 800ae8c:	2501      	movlt	r5, #1
 800ae8e:	2500      	movge	r5, #0
 800ae90:	f7ff fd44 	bl	800a91c <_Balloc>
 800ae94:	4602      	mov	r2, r0
 800ae96:	b918      	cbnz	r0, 800aea0 <__mdiff+0x60>
 800ae98:	4b31      	ldr	r3, [pc, #196]	@ (800af60 <__mdiff+0x120>)
 800ae9a:	f240 2145 	movw	r1, #581	@ 0x245
 800ae9e:	e7e3      	b.n	800ae68 <__mdiff+0x28>
 800aea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aea4:	6926      	ldr	r6, [r4, #16]
 800aea6:	60c5      	str	r5, [r0, #12]
 800aea8:	f109 0310 	add.w	r3, r9, #16
 800aeac:	f109 0514 	add.w	r5, r9, #20
 800aeb0:	f104 0e14 	add.w	lr, r4, #20
 800aeb4:	f100 0b14 	add.w	fp, r0, #20
 800aeb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aebc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	46d9      	mov	r9, fp
 800aec4:	f04f 0c00 	mov.w	ip, #0
 800aec8:	9b01      	ldr	r3, [sp, #4]
 800aeca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aece:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	fa1f f38a 	uxth.w	r3, sl
 800aed8:	4619      	mov	r1, r3
 800aeda:	b283      	uxth	r3, r0
 800aedc:	1acb      	subs	r3, r1, r3
 800aede:	0c00      	lsrs	r0, r0, #16
 800aee0:	4463      	add	r3, ip
 800aee2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aee6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aef0:	4576      	cmp	r6, lr
 800aef2:	f849 3b04 	str.w	r3, [r9], #4
 800aef6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aefa:	d8e5      	bhi.n	800aec8 <__mdiff+0x88>
 800aefc:	1b33      	subs	r3, r6, r4
 800aefe:	3b15      	subs	r3, #21
 800af00:	f023 0303 	bic.w	r3, r3, #3
 800af04:	3415      	adds	r4, #21
 800af06:	3304      	adds	r3, #4
 800af08:	42a6      	cmp	r6, r4
 800af0a:	bf38      	it	cc
 800af0c:	2304      	movcc	r3, #4
 800af0e:	441d      	add	r5, r3
 800af10:	445b      	add	r3, fp
 800af12:	461e      	mov	r6, r3
 800af14:	462c      	mov	r4, r5
 800af16:	4544      	cmp	r4, r8
 800af18:	d30e      	bcc.n	800af38 <__mdiff+0xf8>
 800af1a:	f108 0103 	add.w	r1, r8, #3
 800af1e:	1b49      	subs	r1, r1, r5
 800af20:	f021 0103 	bic.w	r1, r1, #3
 800af24:	3d03      	subs	r5, #3
 800af26:	45a8      	cmp	r8, r5
 800af28:	bf38      	it	cc
 800af2a:	2100      	movcc	r1, #0
 800af2c:	440b      	add	r3, r1
 800af2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af32:	b191      	cbz	r1, 800af5a <__mdiff+0x11a>
 800af34:	6117      	str	r7, [r2, #16]
 800af36:	e79d      	b.n	800ae74 <__mdiff+0x34>
 800af38:	f854 1b04 	ldr.w	r1, [r4], #4
 800af3c:	46e6      	mov	lr, ip
 800af3e:	0c08      	lsrs	r0, r1, #16
 800af40:	fa1c fc81 	uxtah	ip, ip, r1
 800af44:	4471      	add	r1, lr
 800af46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af4a:	b289      	uxth	r1, r1
 800af4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af50:	f846 1b04 	str.w	r1, [r6], #4
 800af54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af58:	e7dd      	b.n	800af16 <__mdiff+0xd6>
 800af5a:	3f01      	subs	r7, #1
 800af5c:	e7e7      	b.n	800af2e <__mdiff+0xee>
 800af5e:	bf00      	nop
 800af60:	0800e4f3 	.word	0x0800e4f3
 800af64:	0800e55c 	.word	0x0800e55c

0800af68 <__ulp>:
 800af68:	b082      	sub	sp, #8
 800af6a:	ed8d 0b00 	vstr	d0, [sp]
 800af6e:	9a01      	ldr	r2, [sp, #4]
 800af70:	4b0f      	ldr	r3, [pc, #60]	@ (800afb0 <__ulp+0x48>)
 800af72:	4013      	ands	r3, r2
 800af74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	dc08      	bgt.n	800af8e <__ulp+0x26>
 800af7c:	425b      	negs	r3, r3
 800af7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800af82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af86:	da04      	bge.n	800af92 <__ulp+0x2a>
 800af88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800af8c:	4113      	asrs	r3, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	e008      	b.n	800afa4 <__ulp+0x3c>
 800af92:	f1a2 0314 	sub.w	r3, r2, #20
 800af96:	2b1e      	cmp	r3, #30
 800af98:	bfda      	itte	le
 800af9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800af9e:	40da      	lsrle	r2, r3
 800afa0:	2201      	movgt	r2, #1
 800afa2:	2300      	movs	r3, #0
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	ec41 0b10 	vmov	d0, r0, r1
 800afac:	b002      	add	sp, #8
 800afae:	4770      	bx	lr
 800afb0:	7ff00000 	.word	0x7ff00000

0800afb4 <__b2d>:
 800afb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb8:	6906      	ldr	r6, [r0, #16]
 800afba:	f100 0814 	add.w	r8, r0, #20
 800afbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800afc2:	1f37      	subs	r7, r6, #4
 800afc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800afc8:	4610      	mov	r0, r2
 800afca:	f7ff fd65 	bl	800aa98 <__hi0bits>
 800afce:	f1c0 0320 	rsb	r3, r0, #32
 800afd2:	280a      	cmp	r0, #10
 800afd4:	600b      	str	r3, [r1, #0]
 800afd6:	491b      	ldr	r1, [pc, #108]	@ (800b044 <__b2d+0x90>)
 800afd8:	dc15      	bgt.n	800b006 <__b2d+0x52>
 800afda:	f1c0 0c0b 	rsb	ip, r0, #11
 800afde:	fa22 f30c 	lsr.w	r3, r2, ip
 800afe2:	45b8      	cmp	r8, r7
 800afe4:	ea43 0501 	orr.w	r5, r3, r1
 800afe8:	bf34      	ite	cc
 800afea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800afee:	2300      	movcs	r3, #0
 800aff0:	3015      	adds	r0, #21
 800aff2:	fa02 f000 	lsl.w	r0, r2, r0
 800aff6:	fa23 f30c 	lsr.w	r3, r3, ip
 800affa:	4303      	orrs	r3, r0
 800affc:	461c      	mov	r4, r3
 800affe:	ec45 4b10 	vmov	d0, r4, r5
 800b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b006:	45b8      	cmp	r8, r7
 800b008:	bf3a      	itte	cc
 800b00a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b00e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b012:	2300      	movcs	r3, #0
 800b014:	380b      	subs	r0, #11
 800b016:	d012      	beq.n	800b03e <__b2d+0x8a>
 800b018:	f1c0 0120 	rsb	r1, r0, #32
 800b01c:	fa23 f401 	lsr.w	r4, r3, r1
 800b020:	4082      	lsls	r2, r0
 800b022:	4322      	orrs	r2, r4
 800b024:	4547      	cmp	r7, r8
 800b026:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b02a:	bf8c      	ite	hi
 800b02c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b030:	2200      	movls	r2, #0
 800b032:	4083      	lsls	r3, r0
 800b034:	40ca      	lsrs	r2, r1
 800b036:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b03a:	4313      	orrs	r3, r2
 800b03c:	e7de      	b.n	800affc <__b2d+0x48>
 800b03e:	ea42 0501 	orr.w	r5, r2, r1
 800b042:	e7db      	b.n	800affc <__b2d+0x48>
 800b044:	3ff00000 	.word	0x3ff00000

0800b048 <__d2b>:
 800b048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b04c:	460f      	mov	r7, r1
 800b04e:	2101      	movs	r1, #1
 800b050:	ec59 8b10 	vmov	r8, r9, d0
 800b054:	4616      	mov	r6, r2
 800b056:	f7ff fc61 	bl	800a91c <_Balloc>
 800b05a:	4604      	mov	r4, r0
 800b05c:	b930      	cbnz	r0, 800b06c <__d2b+0x24>
 800b05e:	4602      	mov	r2, r0
 800b060:	4b23      	ldr	r3, [pc, #140]	@ (800b0f0 <__d2b+0xa8>)
 800b062:	4824      	ldr	r0, [pc, #144]	@ (800b0f4 <__d2b+0xac>)
 800b064:	f240 310f 	movw	r1, #783	@ 0x30f
 800b068:	f002 fd1a 	bl	800daa0 <__assert_func>
 800b06c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b074:	b10d      	cbz	r5, 800b07a <__d2b+0x32>
 800b076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	f1b8 0300 	subs.w	r3, r8, #0
 800b080:	d023      	beq.n	800b0ca <__d2b+0x82>
 800b082:	4668      	mov	r0, sp
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	f7ff fd26 	bl	800aad6 <__lo0bits>
 800b08a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b08e:	b1d0      	cbz	r0, 800b0c6 <__d2b+0x7e>
 800b090:	f1c0 0320 	rsb	r3, r0, #32
 800b094:	fa02 f303 	lsl.w	r3, r2, r3
 800b098:	430b      	orrs	r3, r1
 800b09a:	40c2      	lsrs	r2, r0
 800b09c:	6163      	str	r3, [r4, #20]
 800b09e:	9201      	str	r2, [sp, #4]
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	61a3      	str	r3, [r4, #24]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bf0c      	ite	eq
 800b0a8:	2201      	moveq	r2, #1
 800b0aa:	2202      	movne	r2, #2
 800b0ac:	6122      	str	r2, [r4, #16]
 800b0ae:	b1a5      	cbz	r5, 800b0da <__d2b+0x92>
 800b0b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0b4:	4405      	add	r5, r0
 800b0b6:	603d      	str	r5, [r7, #0]
 800b0b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0bc:	6030      	str	r0, [r6, #0]
 800b0be:	4620      	mov	r0, r4
 800b0c0:	b003      	add	sp, #12
 800b0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0c6:	6161      	str	r1, [r4, #20]
 800b0c8:	e7ea      	b.n	800b0a0 <__d2b+0x58>
 800b0ca:	a801      	add	r0, sp, #4
 800b0cc:	f7ff fd03 	bl	800aad6 <__lo0bits>
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	6163      	str	r3, [r4, #20]
 800b0d4:	3020      	adds	r0, #32
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	e7e8      	b.n	800b0ac <__d2b+0x64>
 800b0da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0e2:	6038      	str	r0, [r7, #0]
 800b0e4:	6918      	ldr	r0, [r3, #16]
 800b0e6:	f7ff fcd7 	bl	800aa98 <__hi0bits>
 800b0ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0ee:	e7e5      	b.n	800b0bc <__d2b+0x74>
 800b0f0:	0800e4f3 	.word	0x0800e4f3
 800b0f4:	0800e55c 	.word	0x0800e55c

0800b0f8 <__ratio>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	e9cd 1000 	strd	r1, r0, [sp]
 800b102:	a902      	add	r1, sp, #8
 800b104:	f7ff ff56 	bl	800afb4 <__b2d>
 800b108:	9800      	ldr	r0, [sp, #0]
 800b10a:	a903      	add	r1, sp, #12
 800b10c:	ec55 4b10 	vmov	r4, r5, d0
 800b110:	f7ff ff50 	bl	800afb4 <__b2d>
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	6919      	ldr	r1, [r3, #16]
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	1ac9      	subs	r1, r1, r3
 800b11e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b122:	1a9b      	subs	r3, r3, r2
 800b124:	ec5b ab10 	vmov	sl, fp, d0
 800b128:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	bfce      	itee	gt
 800b130:	462a      	movgt	r2, r5
 800b132:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b136:	465a      	movle	r2, fp
 800b138:	462f      	mov	r7, r5
 800b13a:	46d9      	mov	r9, fp
 800b13c:	bfcc      	ite	gt
 800b13e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b142:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b146:	464b      	mov	r3, r9
 800b148:	4652      	mov	r2, sl
 800b14a:	4620      	mov	r0, r4
 800b14c:	4639      	mov	r1, r7
 800b14e:	f7f5 fba5 	bl	800089c <__aeabi_ddiv>
 800b152:	ec41 0b10 	vmov	d0, r0, r1
 800b156:	b005      	add	sp, #20
 800b158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b15c <__copybits>:
 800b15c:	3901      	subs	r1, #1
 800b15e:	b570      	push	{r4, r5, r6, lr}
 800b160:	1149      	asrs	r1, r1, #5
 800b162:	6914      	ldr	r4, [r2, #16]
 800b164:	3101      	adds	r1, #1
 800b166:	f102 0314 	add.w	r3, r2, #20
 800b16a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b16e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b172:	1f05      	subs	r5, r0, #4
 800b174:	42a3      	cmp	r3, r4
 800b176:	d30c      	bcc.n	800b192 <__copybits+0x36>
 800b178:	1aa3      	subs	r3, r4, r2
 800b17a:	3b11      	subs	r3, #17
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	3211      	adds	r2, #17
 800b182:	42a2      	cmp	r2, r4
 800b184:	bf88      	it	hi
 800b186:	2300      	movhi	r3, #0
 800b188:	4418      	add	r0, r3
 800b18a:	2300      	movs	r3, #0
 800b18c:	4288      	cmp	r0, r1
 800b18e:	d305      	bcc.n	800b19c <__copybits+0x40>
 800b190:	bd70      	pop	{r4, r5, r6, pc}
 800b192:	f853 6b04 	ldr.w	r6, [r3], #4
 800b196:	f845 6f04 	str.w	r6, [r5, #4]!
 800b19a:	e7eb      	b.n	800b174 <__copybits+0x18>
 800b19c:	f840 3b04 	str.w	r3, [r0], #4
 800b1a0:	e7f4      	b.n	800b18c <__copybits+0x30>

0800b1a2 <__any_on>:
 800b1a2:	f100 0214 	add.w	r2, r0, #20
 800b1a6:	6900      	ldr	r0, [r0, #16]
 800b1a8:	114b      	asrs	r3, r1, #5
 800b1aa:	4298      	cmp	r0, r3
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	db11      	blt.n	800b1d4 <__any_on+0x32>
 800b1b0:	dd0a      	ble.n	800b1c8 <__any_on+0x26>
 800b1b2:	f011 011f 	ands.w	r1, r1, #31
 800b1b6:	d007      	beq.n	800b1c8 <__any_on+0x26>
 800b1b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1bc:	fa24 f001 	lsr.w	r0, r4, r1
 800b1c0:	fa00 f101 	lsl.w	r1, r0, r1
 800b1c4:	428c      	cmp	r4, r1
 800b1c6:	d10b      	bne.n	800b1e0 <__any_on+0x3e>
 800b1c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d803      	bhi.n	800b1d8 <__any_on+0x36>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	bd10      	pop	{r4, pc}
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	e7f7      	b.n	800b1c8 <__any_on+0x26>
 800b1d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	d0f5      	beq.n	800b1cc <__any_on+0x2a>
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	e7f6      	b.n	800b1d2 <__any_on+0x30>

0800b1e4 <realloc>:
 800b1e4:	4b02      	ldr	r3, [pc, #8]	@ (800b1f0 <realloc+0xc>)
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	4601      	mov	r1, r0
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	f000 b802 	b.w	800b1f4 <_realloc_r>
 800b1f0:	20000428 	.word	0x20000428

0800b1f4 <_realloc_r>:
 800b1f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	4693      	mov	fp, r2
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	b929      	cbnz	r1, 800b20c <_realloc_r+0x18>
 800b200:	4611      	mov	r1, r2
 800b202:	b003      	add	sp, #12
 800b204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	f7f9 bf8e 	b.w	8005128 <_malloc_r>
 800b20c:	f7fa f9c6 	bl	800559c <__malloc_lock>
 800b210:	f10b 080b 	add.w	r8, fp, #11
 800b214:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b218:	f1b8 0f16 	cmp.w	r8, #22
 800b21c:	f1a4 0908 	sub.w	r9, r4, #8
 800b220:	f025 0603 	bic.w	r6, r5, #3
 800b224:	d908      	bls.n	800b238 <_realloc_r+0x44>
 800b226:	f038 0807 	bics.w	r8, r8, #7
 800b22a:	d507      	bpl.n	800b23c <_realloc_r+0x48>
 800b22c:	230c      	movs	r3, #12
 800b22e:	f8ca 3000 	str.w	r3, [sl]
 800b232:	f04f 0b00 	mov.w	fp, #0
 800b236:	e032      	b.n	800b29e <_realloc_r+0xaa>
 800b238:	f04f 0810 	mov.w	r8, #16
 800b23c:	45c3      	cmp	fp, r8
 800b23e:	d8f5      	bhi.n	800b22c <_realloc_r+0x38>
 800b240:	4546      	cmp	r6, r8
 800b242:	f280 8174 	bge.w	800b52e <_realloc_r+0x33a>
 800b246:	4b9e      	ldr	r3, [pc, #632]	@ (800b4c0 <_realloc_r+0x2cc>)
 800b248:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800b24c:	eb09 0106 	add.w	r1, r9, r6
 800b250:	458c      	cmp	ip, r1
 800b252:	6848      	ldr	r0, [r1, #4]
 800b254:	d005      	beq.n	800b262 <_realloc_r+0x6e>
 800b256:	f020 0201 	bic.w	r2, r0, #1
 800b25a:	440a      	add	r2, r1
 800b25c:	6852      	ldr	r2, [r2, #4]
 800b25e:	07d7      	lsls	r7, r2, #31
 800b260:	d449      	bmi.n	800b2f6 <_realloc_r+0x102>
 800b262:	f020 0003 	bic.w	r0, r0, #3
 800b266:	458c      	cmp	ip, r1
 800b268:	eb06 0700 	add.w	r7, r6, r0
 800b26c:	d11b      	bne.n	800b2a6 <_realloc_r+0xb2>
 800b26e:	f108 0210 	add.w	r2, r8, #16
 800b272:	42ba      	cmp	r2, r7
 800b274:	dc41      	bgt.n	800b2fa <_realloc_r+0x106>
 800b276:	eb09 0208 	add.w	r2, r9, r8
 800b27a:	eba7 0708 	sub.w	r7, r7, r8
 800b27e:	f047 0701 	orr.w	r7, r7, #1
 800b282:	609a      	str	r2, [r3, #8]
 800b284:	6057      	str	r7, [r2, #4]
 800b286:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	ea43 0308 	orr.w	r3, r3, r8
 800b292:	f844 3c04 	str.w	r3, [r4, #-4]
 800b296:	4650      	mov	r0, sl
 800b298:	f7fa f986 	bl	80055a8 <__malloc_unlock>
 800b29c:	46a3      	mov	fp, r4
 800b29e:	4658      	mov	r0, fp
 800b2a0:	b003      	add	sp, #12
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	45b8      	cmp	r8, r7
 800b2a8:	dc27      	bgt.n	800b2fa <_realloc_r+0x106>
 800b2aa:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800b2ae:	60d3      	str	r3, [r2, #12]
 800b2b0:	609a      	str	r2, [r3, #8]
 800b2b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b2b6:	eba7 0008 	sub.w	r0, r7, r8
 800b2ba:	280f      	cmp	r0, #15
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	eb09 0207 	add.w	r2, r9, r7
 800b2c4:	f240 8135 	bls.w	800b532 <_realloc_r+0x33e>
 800b2c8:	eb09 0108 	add.w	r1, r9, r8
 800b2cc:	ea48 0303 	orr.w	r3, r8, r3
 800b2d0:	f040 0001 	orr.w	r0, r0, #1
 800b2d4:	f8c9 3004 	str.w	r3, [r9, #4]
 800b2d8:	6048      	str	r0, [r1, #4]
 800b2da:	6853      	ldr	r3, [r2, #4]
 800b2dc:	f043 0301 	orr.w	r3, r3, #1
 800b2e0:	6053      	str	r3, [r2, #4]
 800b2e2:	3108      	adds	r1, #8
 800b2e4:	4650      	mov	r0, sl
 800b2e6:	f7fa fc95 	bl	8005c14 <_free_r>
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f7fa f95c 	bl	80055a8 <__malloc_unlock>
 800b2f0:	f109 0b08 	add.w	fp, r9, #8
 800b2f4:	e7d3      	b.n	800b29e <_realloc_r+0xaa>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	07ea      	lsls	r2, r5, #31
 800b2fc:	f100 80c7 	bmi.w	800b48e <_realloc_r+0x29a>
 800b300:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b304:	eba9 0505 	sub.w	r5, r9, r5
 800b308:	686a      	ldr	r2, [r5, #4]
 800b30a:	f022 0203 	bic.w	r2, r2, #3
 800b30e:	4432      	add	r2, r6
 800b310:	9201      	str	r2, [sp, #4]
 800b312:	2900      	cmp	r1, #0
 800b314:	f000 8086 	beq.w	800b424 <_realloc_r+0x230>
 800b318:	458c      	cmp	ip, r1
 800b31a:	eb00 0702 	add.w	r7, r0, r2
 800b31e:	d149      	bne.n	800b3b4 <_realloc_r+0x1c0>
 800b320:	f108 0210 	add.w	r2, r8, #16
 800b324:	42ba      	cmp	r2, r7
 800b326:	dc7d      	bgt.n	800b424 <_realloc_r+0x230>
 800b328:	46ab      	mov	fp, r5
 800b32a:	68ea      	ldr	r2, [r5, #12]
 800b32c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800b330:	60ca      	str	r2, [r1, #12]
 800b332:	6091      	str	r1, [r2, #8]
 800b334:	1f32      	subs	r2, r6, #4
 800b336:	2a24      	cmp	r2, #36	@ 0x24
 800b338:	d836      	bhi.n	800b3a8 <_realloc_r+0x1b4>
 800b33a:	2a13      	cmp	r2, #19
 800b33c:	d932      	bls.n	800b3a4 <_realloc_r+0x1b0>
 800b33e:	6821      	ldr	r1, [r4, #0]
 800b340:	60a9      	str	r1, [r5, #8]
 800b342:	6861      	ldr	r1, [r4, #4]
 800b344:	60e9      	str	r1, [r5, #12]
 800b346:	2a1b      	cmp	r2, #27
 800b348:	d81a      	bhi.n	800b380 <_realloc_r+0x18c>
 800b34a:	3408      	adds	r4, #8
 800b34c:	f105 0210 	add.w	r2, r5, #16
 800b350:	6821      	ldr	r1, [r4, #0]
 800b352:	6011      	str	r1, [r2, #0]
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	6051      	str	r1, [r2, #4]
 800b358:	68a1      	ldr	r1, [r4, #8]
 800b35a:	6091      	str	r1, [r2, #8]
 800b35c:	eb05 0208 	add.w	r2, r5, r8
 800b360:	eba7 0708 	sub.w	r7, r7, r8
 800b364:	f047 0701 	orr.w	r7, r7, #1
 800b368:	609a      	str	r2, [r3, #8]
 800b36a:	6057      	str	r7, [r2, #4]
 800b36c:	686b      	ldr	r3, [r5, #4]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	ea43 0308 	orr.w	r3, r3, r8
 800b376:	606b      	str	r3, [r5, #4]
 800b378:	4650      	mov	r0, sl
 800b37a:	f7fa f915 	bl	80055a8 <__malloc_unlock>
 800b37e:	e78e      	b.n	800b29e <_realloc_r+0xaa>
 800b380:	68a1      	ldr	r1, [r4, #8]
 800b382:	6129      	str	r1, [r5, #16]
 800b384:	68e1      	ldr	r1, [r4, #12]
 800b386:	6169      	str	r1, [r5, #20]
 800b388:	2a24      	cmp	r2, #36	@ 0x24
 800b38a:	bf01      	itttt	eq
 800b38c:	6922      	ldreq	r2, [r4, #16]
 800b38e:	61aa      	streq	r2, [r5, #24]
 800b390:	6961      	ldreq	r1, [r4, #20]
 800b392:	61e9      	streq	r1, [r5, #28]
 800b394:	bf19      	ittee	ne
 800b396:	3410      	addne	r4, #16
 800b398:	f105 0218 	addne.w	r2, r5, #24
 800b39c:	f105 0220 	addeq.w	r2, r5, #32
 800b3a0:	3418      	addeq	r4, #24
 800b3a2:	e7d5      	b.n	800b350 <_realloc_r+0x15c>
 800b3a4:	465a      	mov	r2, fp
 800b3a6:	e7d3      	b.n	800b350 <_realloc_r+0x15c>
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f7fe fb76 	bl	8009a9c <memmove>
 800b3b0:	4b43      	ldr	r3, [pc, #268]	@ (800b4c0 <_realloc_r+0x2cc>)
 800b3b2:	e7d3      	b.n	800b35c <_realloc_r+0x168>
 800b3b4:	45b8      	cmp	r8, r7
 800b3b6:	dc35      	bgt.n	800b424 <_realloc_r+0x230>
 800b3b8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800b3bc:	4628      	mov	r0, r5
 800b3be:	60d3      	str	r3, [r2, #12]
 800b3c0:	609a      	str	r2, [r3, #8]
 800b3c2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b3c6:	68eb      	ldr	r3, [r5, #12]
 800b3c8:	60d3      	str	r3, [r2, #12]
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	1f32      	subs	r2, r6, #4
 800b3ce:	2a24      	cmp	r2, #36	@ 0x24
 800b3d0:	d824      	bhi.n	800b41c <_realloc_r+0x228>
 800b3d2:	2a13      	cmp	r2, #19
 800b3d4:	d908      	bls.n	800b3e8 <_realloc_r+0x1f4>
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	60ab      	str	r3, [r5, #8]
 800b3da:	6863      	ldr	r3, [r4, #4]
 800b3dc:	60eb      	str	r3, [r5, #12]
 800b3de:	2a1b      	cmp	r2, #27
 800b3e0:	d80a      	bhi.n	800b3f8 <_realloc_r+0x204>
 800b3e2:	3408      	adds	r4, #8
 800b3e4:	f105 0010 	add.w	r0, r5, #16
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	6003      	str	r3, [r0, #0]
 800b3ec:	6863      	ldr	r3, [r4, #4]
 800b3ee:	6043      	str	r3, [r0, #4]
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	6083      	str	r3, [r0, #8]
 800b3f4:	46a9      	mov	r9, r5
 800b3f6:	e75c      	b.n	800b2b2 <_realloc_r+0xbe>
 800b3f8:	68a3      	ldr	r3, [r4, #8]
 800b3fa:	612b      	str	r3, [r5, #16]
 800b3fc:	68e3      	ldr	r3, [r4, #12]
 800b3fe:	616b      	str	r3, [r5, #20]
 800b400:	2a24      	cmp	r2, #36	@ 0x24
 800b402:	bf01      	itttt	eq
 800b404:	6923      	ldreq	r3, [r4, #16]
 800b406:	61ab      	streq	r3, [r5, #24]
 800b408:	6963      	ldreq	r3, [r4, #20]
 800b40a:	61eb      	streq	r3, [r5, #28]
 800b40c:	bf19      	ittee	ne
 800b40e:	3410      	addne	r4, #16
 800b410:	f105 0018 	addne.w	r0, r5, #24
 800b414:	f105 0020 	addeq.w	r0, r5, #32
 800b418:	3418      	addeq	r4, #24
 800b41a:	e7e5      	b.n	800b3e8 <_realloc_r+0x1f4>
 800b41c:	4621      	mov	r1, r4
 800b41e:	f7fe fb3d 	bl	8009a9c <memmove>
 800b422:	e7e7      	b.n	800b3f4 <_realloc_r+0x200>
 800b424:	9b01      	ldr	r3, [sp, #4]
 800b426:	4598      	cmp	r8, r3
 800b428:	dc31      	bgt.n	800b48e <_realloc_r+0x29a>
 800b42a:	4628      	mov	r0, r5
 800b42c:	68eb      	ldr	r3, [r5, #12]
 800b42e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b432:	60d3      	str	r3, [r2, #12]
 800b434:	609a      	str	r2, [r3, #8]
 800b436:	1f32      	subs	r2, r6, #4
 800b438:	2a24      	cmp	r2, #36	@ 0x24
 800b43a:	d824      	bhi.n	800b486 <_realloc_r+0x292>
 800b43c:	2a13      	cmp	r2, #19
 800b43e:	d908      	bls.n	800b452 <_realloc_r+0x25e>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	60ab      	str	r3, [r5, #8]
 800b444:	6863      	ldr	r3, [r4, #4]
 800b446:	60eb      	str	r3, [r5, #12]
 800b448:	2a1b      	cmp	r2, #27
 800b44a:	d80a      	bhi.n	800b462 <_realloc_r+0x26e>
 800b44c:	3408      	adds	r4, #8
 800b44e:	f105 0010 	add.w	r0, r5, #16
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	6003      	str	r3, [r0, #0]
 800b456:	6863      	ldr	r3, [r4, #4]
 800b458:	6043      	str	r3, [r0, #4]
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	6083      	str	r3, [r0, #8]
 800b45e:	9f01      	ldr	r7, [sp, #4]
 800b460:	e7c8      	b.n	800b3f4 <_realloc_r+0x200>
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	612b      	str	r3, [r5, #16]
 800b466:	68e3      	ldr	r3, [r4, #12]
 800b468:	616b      	str	r3, [r5, #20]
 800b46a:	2a24      	cmp	r2, #36	@ 0x24
 800b46c:	bf01      	itttt	eq
 800b46e:	6923      	ldreq	r3, [r4, #16]
 800b470:	61ab      	streq	r3, [r5, #24]
 800b472:	6963      	ldreq	r3, [r4, #20]
 800b474:	61eb      	streq	r3, [r5, #28]
 800b476:	bf19      	ittee	ne
 800b478:	3410      	addne	r4, #16
 800b47a:	f105 0018 	addne.w	r0, r5, #24
 800b47e:	f105 0020 	addeq.w	r0, r5, #32
 800b482:	3418      	addeq	r4, #24
 800b484:	e7e5      	b.n	800b452 <_realloc_r+0x25e>
 800b486:	4621      	mov	r1, r4
 800b488:	f7fe fb08 	bl	8009a9c <memmove>
 800b48c:	e7e7      	b.n	800b45e <_realloc_r+0x26a>
 800b48e:	4659      	mov	r1, fp
 800b490:	4650      	mov	r0, sl
 800b492:	f7f9 fe49 	bl	8005128 <_malloc_r>
 800b496:	4683      	mov	fp, r0
 800b498:	b918      	cbnz	r0, 800b4a2 <_realloc_r+0x2ae>
 800b49a:	4650      	mov	r0, sl
 800b49c:	f7fa f884 	bl	80055a8 <__malloc_unlock>
 800b4a0:	e6c7      	b.n	800b232 <_realloc_r+0x3e>
 800b4a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b4a6:	f023 0301 	bic.w	r3, r3, #1
 800b4aa:	444b      	add	r3, r9
 800b4ac:	f1a0 0208 	sub.w	r2, r0, #8
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d107      	bne.n	800b4c4 <_realloc_r+0x2d0>
 800b4b4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b4b8:	f027 0703 	bic.w	r7, r7, #3
 800b4bc:	4437      	add	r7, r6
 800b4be:	e6f8      	b.n	800b2b2 <_realloc_r+0xbe>
 800b4c0:	20000014 	.word	0x20000014
 800b4c4:	1f32      	subs	r2, r6, #4
 800b4c6:	2a24      	cmp	r2, #36	@ 0x24
 800b4c8:	d82d      	bhi.n	800b526 <_realloc_r+0x332>
 800b4ca:	2a13      	cmp	r2, #19
 800b4cc:	d928      	bls.n	800b520 <_realloc_r+0x32c>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	6003      	str	r3, [r0, #0]
 800b4d2:	6863      	ldr	r3, [r4, #4]
 800b4d4:	6043      	str	r3, [r0, #4]
 800b4d6:	2a1b      	cmp	r2, #27
 800b4d8:	d80e      	bhi.n	800b4f8 <_realloc_r+0x304>
 800b4da:	f104 0208 	add.w	r2, r4, #8
 800b4de:	f100 0308 	add.w	r3, r0, #8
 800b4e2:	6811      	ldr	r1, [r2, #0]
 800b4e4:	6019      	str	r1, [r3, #0]
 800b4e6:	6851      	ldr	r1, [r2, #4]
 800b4e8:	6059      	str	r1, [r3, #4]
 800b4ea:	6892      	ldr	r2, [r2, #8]
 800b4ec:	609a      	str	r2, [r3, #8]
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	f7fa fb8f 	bl	8005c14 <_free_r>
 800b4f6:	e73f      	b.n	800b378 <_realloc_r+0x184>
 800b4f8:	68a3      	ldr	r3, [r4, #8]
 800b4fa:	6083      	str	r3, [r0, #8]
 800b4fc:	68e3      	ldr	r3, [r4, #12]
 800b4fe:	60c3      	str	r3, [r0, #12]
 800b500:	2a24      	cmp	r2, #36	@ 0x24
 800b502:	bf01      	itttt	eq
 800b504:	6923      	ldreq	r3, [r4, #16]
 800b506:	6103      	streq	r3, [r0, #16]
 800b508:	6961      	ldreq	r1, [r4, #20]
 800b50a:	6141      	streq	r1, [r0, #20]
 800b50c:	bf19      	ittee	ne
 800b50e:	f104 0210 	addne.w	r2, r4, #16
 800b512:	f100 0310 	addne.w	r3, r0, #16
 800b516:	f104 0218 	addeq.w	r2, r4, #24
 800b51a:	f100 0318 	addeq.w	r3, r0, #24
 800b51e:	e7e0      	b.n	800b4e2 <_realloc_r+0x2ee>
 800b520:	4603      	mov	r3, r0
 800b522:	4622      	mov	r2, r4
 800b524:	e7dd      	b.n	800b4e2 <_realloc_r+0x2ee>
 800b526:	4621      	mov	r1, r4
 800b528:	f7fe fab8 	bl	8009a9c <memmove>
 800b52c:	e7df      	b.n	800b4ee <_realloc_r+0x2fa>
 800b52e:	4637      	mov	r7, r6
 800b530:	e6bf      	b.n	800b2b2 <_realloc_r+0xbe>
 800b532:	431f      	orrs	r7, r3
 800b534:	f8c9 7004 	str.w	r7, [r9, #4]
 800b538:	6853      	ldr	r3, [r2, #4]
 800b53a:	f043 0301 	orr.w	r3, r3, #1
 800b53e:	6053      	str	r3, [r2, #4]
 800b540:	e6d3      	b.n	800b2ea <_realloc_r+0xf6>
 800b542:	bf00      	nop

0800b544 <sulp>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	ec45 4b10 	vmov	d0, r4, r5
 800b54e:	4616      	mov	r6, r2
 800b550:	f7ff fd0a 	bl	800af68 <__ulp>
 800b554:	ec51 0b10 	vmov	r0, r1, d0
 800b558:	b17e      	cbz	r6, 800b57a <sulp+0x36>
 800b55a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b55e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b562:	2b00      	cmp	r3, #0
 800b564:	dd09      	ble.n	800b57a <sulp+0x36>
 800b566:	051b      	lsls	r3, r3, #20
 800b568:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b56c:	2400      	movs	r4, #0
 800b56e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b572:	4622      	mov	r2, r4
 800b574:	462b      	mov	r3, r5
 800b576:	f7f5 f867 	bl	8000648 <__aeabi_dmul>
 800b57a:	ec41 0b10 	vmov	d0, r0, r1
 800b57e:	bd70      	pop	{r4, r5, r6, pc}

0800b580 <_strtod_l>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	b09f      	sub	sp, #124	@ 0x7c
 800b586:	460c      	mov	r4, r1
 800b588:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b58a:	2200      	movs	r2, #0
 800b58c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b58e:	9005      	str	r0, [sp, #20]
 800b590:	f04f 0a00 	mov.w	sl, #0
 800b594:	f04f 0b00 	mov.w	fp, #0
 800b598:	460a      	mov	r2, r1
 800b59a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b59c:	7811      	ldrb	r1, [r2, #0]
 800b59e:	292b      	cmp	r1, #43	@ 0x2b
 800b5a0:	d04a      	beq.n	800b638 <_strtod_l+0xb8>
 800b5a2:	d838      	bhi.n	800b616 <_strtod_l+0x96>
 800b5a4:	290d      	cmp	r1, #13
 800b5a6:	d832      	bhi.n	800b60e <_strtod_l+0x8e>
 800b5a8:	2908      	cmp	r1, #8
 800b5aa:	d832      	bhi.n	800b612 <_strtod_l+0x92>
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	d03b      	beq.n	800b628 <_strtod_l+0xa8>
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b5b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b5b6:	782a      	ldrb	r2, [r5, #0]
 800b5b8:	2a30      	cmp	r2, #48	@ 0x30
 800b5ba:	f040 80b3 	bne.w	800b724 <_strtod_l+0x1a4>
 800b5be:	786a      	ldrb	r2, [r5, #1]
 800b5c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5c4:	2a58      	cmp	r2, #88	@ 0x58
 800b5c6:	d16e      	bne.n	800b6a6 <_strtod_l+0x126>
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	4a8e      	ldr	r2, [pc, #568]	@ (800b80c <_strtod_l+0x28c>)
 800b5d4:	9805      	ldr	r0, [sp, #20]
 800b5d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b5d8:	a919      	add	r1, sp, #100	@ 0x64
 800b5da:	f002 fb1b 	bl	800dc14 <__gethex>
 800b5de:	f010 060f 	ands.w	r6, r0, #15
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	d005      	beq.n	800b5f2 <_strtod_l+0x72>
 800b5e6:	2e06      	cmp	r6, #6
 800b5e8:	d128      	bne.n	800b63c <_strtod_l+0xbc>
 800b5ea:	3501      	adds	r5, #1
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800b5f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 858e 	bne.w	800c116 <_strtod_l+0xb96>
 800b5fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5fc:	b1cb      	cbz	r3, 800b632 <_strtod_l+0xb2>
 800b5fe:	4652      	mov	r2, sl
 800b600:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b604:	ec43 2b10 	vmov	d0, r2, r3
 800b608:	b01f      	add	sp, #124	@ 0x7c
 800b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60e:	2920      	cmp	r1, #32
 800b610:	d1ce      	bne.n	800b5b0 <_strtod_l+0x30>
 800b612:	3201      	adds	r2, #1
 800b614:	e7c1      	b.n	800b59a <_strtod_l+0x1a>
 800b616:	292d      	cmp	r1, #45	@ 0x2d
 800b618:	d1ca      	bne.n	800b5b0 <_strtod_l+0x30>
 800b61a:	2101      	movs	r1, #1
 800b61c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b61e:	1c51      	adds	r1, r2, #1
 800b620:	9119      	str	r1, [sp, #100]	@ 0x64
 800b622:	7852      	ldrb	r2, [r2, #1]
 800b624:	2a00      	cmp	r2, #0
 800b626:	d1c5      	bne.n	800b5b4 <_strtod_l+0x34>
 800b628:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b62a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f040 8570 	bne.w	800c112 <_strtod_l+0xb92>
 800b632:	4652      	mov	r2, sl
 800b634:	465b      	mov	r3, fp
 800b636:	e7e5      	b.n	800b604 <_strtod_l+0x84>
 800b638:	2100      	movs	r1, #0
 800b63a:	e7ef      	b.n	800b61c <_strtod_l+0x9c>
 800b63c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b63e:	b13a      	cbz	r2, 800b650 <_strtod_l+0xd0>
 800b640:	2135      	movs	r1, #53	@ 0x35
 800b642:	a81c      	add	r0, sp, #112	@ 0x70
 800b644:	f7ff fd8a 	bl	800b15c <__copybits>
 800b648:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b64a:	9805      	ldr	r0, [sp, #20]
 800b64c:	f7ff f98b 	bl	800a966 <_Bfree>
 800b650:	3e01      	subs	r6, #1
 800b652:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b654:	2e04      	cmp	r6, #4
 800b656:	d806      	bhi.n	800b666 <_strtod_l+0xe6>
 800b658:	e8df f006 	tbb	[pc, r6]
 800b65c:	201d0314 	.word	0x201d0314
 800b660:	14          	.byte	0x14
 800b661:	00          	.byte	0x00
 800b662:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b666:	05e1      	lsls	r1, r4, #23
 800b668:	bf48      	it	mi
 800b66a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b66e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b672:	0d1b      	lsrs	r3, r3, #20
 800b674:	051b      	lsls	r3, r3, #20
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1bb      	bne.n	800b5f2 <_strtod_l+0x72>
 800b67a:	f7fa fa2b 	bl	8005ad4 <__errno>
 800b67e:	2322      	movs	r3, #34	@ 0x22
 800b680:	6003      	str	r3, [r0, #0]
 800b682:	e7b6      	b.n	800b5f2 <_strtod_l+0x72>
 800b684:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b688:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b68c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b690:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b694:	e7e7      	b.n	800b666 <_strtod_l+0xe6>
 800b696:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b814 <_strtod_l+0x294>
 800b69a:	e7e4      	b.n	800b666 <_strtod_l+0xe6>
 800b69c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b6a0:	f04f 3aff 	mov.w	sl, #4294967295
 800b6a4:	e7df      	b.n	800b666 <_strtod_l+0xe6>
 800b6a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6ac:	785b      	ldrb	r3, [r3, #1]
 800b6ae:	2b30      	cmp	r3, #48	@ 0x30
 800b6b0:	d0f9      	beq.n	800b6a6 <_strtod_l+0x126>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d09d      	beq.n	800b5f2 <_strtod_l+0x72>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6be:	2300      	movs	r3, #0
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6c4:	461f      	mov	r7, r3
 800b6c6:	220a      	movs	r2, #10
 800b6c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b6ca:	7805      	ldrb	r5, [r0, #0]
 800b6cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b6d0:	b2d9      	uxtb	r1, r3
 800b6d2:	2909      	cmp	r1, #9
 800b6d4:	d928      	bls.n	800b728 <_strtod_l+0x1a8>
 800b6d6:	494e      	ldr	r1, [pc, #312]	@ (800b810 <_strtod_l+0x290>)
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f002 f9c4 	bl	800da66 <strncmp>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d032      	beq.n	800b748 <_strtod_l+0x1c8>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	4681      	mov	r9, r0
 800b6e8:	463d      	mov	r5, r7
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2a65      	cmp	r2, #101	@ 0x65
 800b6ee:	d001      	beq.n	800b6f4 <_strtod_l+0x174>
 800b6f0:	2a45      	cmp	r2, #69	@ 0x45
 800b6f2:	d114      	bne.n	800b71e <_strtod_l+0x19e>
 800b6f4:	b91d      	cbnz	r5, 800b6fe <_strtod_l+0x17e>
 800b6f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6f8:	4302      	orrs	r2, r0
 800b6fa:	d095      	beq.n	800b628 <_strtod_l+0xa8>
 800b6fc:	2500      	movs	r5, #0
 800b6fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b700:	1c62      	adds	r2, r4, #1
 800b702:	9219      	str	r2, [sp, #100]	@ 0x64
 800b704:	7862      	ldrb	r2, [r4, #1]
 800b706:	2a2b      	cmp	r2, #43	@ 0x2b
 800b708:	d077      	beq.n	800b7fa <_strtod_l+0x27a>
 800b70a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b70c:	d07b      	beq.n	800b806 <_strtod_l+0x286>
 800b70e:	f04f 0c00 	mov.w	ip, #0
 800b712:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b716:	2909      	cmp	r1, #9
 800b718:	f240 8082 	bls.w	800b820 <_strtod_l+0x2a0>
 800b71c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b71e:	f04f 0800 	mov.w	r8, #0
 800b722:	e0a2      	b.n	800b86a <_strtod_l+0x2ea>
 800b724:	2300      	movs	r3, #0
 800b726:	e7c7      	b.n	800b6b8 <_strtod_l+0x138>
 800b728:	2f08      	cmp	r7, #8
 800b72a:	bfd5      	itete	le
 800b72c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b72e:	9908      	ldrgt	r1, [sp, #32]
 800b730:	fb02 3301 	mlale	r3, r2, r1, r3
 800b734:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b738:	f100 0001 	add.w	r0, r0, #1
 800b73c:	bfd4      	ite	le
 800b73e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b740:	9308      	strgt	r3, [sp, #32]
 800b742:	3701      	adds	r7, #1
 800b744:	9019      	str	r0, [sp, #100]	@ 0x64
 800b746:	e7bf      	b.n	800b6c8 <_strtod_l+0x148>
 800b748:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b74e:	785a      	ldrb	r2, [r3, #1]
 800b750:	b37f      	cbz	r7, 800b7b2 <_strtod_l+0x232>
 800b752:	4681      	mov	r9, r0
 800b754:	463d      	mov	r5, r7
 800b756:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b75a:	2b09      	cmp	r3, #9
 800b75c:	d912      	bls.n	800b784 <_strtod_l+0x204>
 800b75e:	2301      	movs	r3, #1
 800b760:	e7c4      	b.n	800b6ec <_strtod_l+0x16c>
 800b762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b764:	1c5a      	adds	r2, r3, #1
 800b766:	9219      	str	r2, [sp, #100]	@ 0x64
 800b768:	785a      	ldrb	r2, [r3, #1]
 800b76a:	3001      	adds	r0, #1
 800b76c:	2a30      	cmp	r2, #48	@ 0x30
 800b76e:	d0f8      	beq.n	800b762 <_strtod_l+0x1e2>
 800b770:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b774:	2b08      	cmp	r3, #8
 800b776:	f200 84d3 	bhi.w	800c120 <_strtod_l+0xba0>
 800b77a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b77c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b77e:	4681      	mov	r9, r0
 800b780:	2000      	movs	r0, #0
 800b782:	4605      	mov	r5, r0
 800b784:	3a30      	subs	r2, #48	@ 0x30
 800b786:	f100 0301 	add.w	r3, r0, #1
 800b78a:	d02a      	beq.n	800b7e2 <_strtod_l+0x262>
 800b78c:	4499      	add	r9, r3
 800b78e:	eb00 0c05 	add.w	ip, r0, r5
 800b792:	462b      	mov	r3, r5
 800b794:	210a      	movs	r1, #10
 800b796:	4563      	cmp	r3, ip
 800b798:	d10d      	bne.n	800b7b6 <_strtod_l+0x236>
 800b79a:	1c69      	adds	r1, r5, #1
 800b79c:	4401      	add	r1, r0
 800b79e:	4428      	add	r0, r5
 800b7a0:	2808      	cmp	r0, #8
 800b7a2:	dc16      	bgt.n	800b7d2 <_strtod_l+0x252>
 800b7a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7a6:	230a      	movs	r3, #10
 800b7a8:	fb03 2300 	mla	r3, r3, r0, r2
 800b7ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e018      	b.n	800b7e4 <_strtod_l+0x264>
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	e7da      	b.n	800b76c <_strtod_l+0x1ec>
 800b7b6:	2b08      	cmp	r3, #8
 800b7b8:	f103 0301 	add.w	r3, r3, #1
 800b7bc:	dc03      	bgt.n	800b7c6 <_strtod_l+0x246>
 800b7be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b7c0:	434e      	muls	r6, r1
 800b7c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b7c4:	e7e7      	b.n	800b796 <_strtod_l+0x216>
 800b7c6:	2b10      	cmp	r3, #16
 800b7c8:	bfde      	ittt	le
 800b7ca:	9e08      	ldrle	r6, [sp, #32]
 800b7cc:	434e      	mulle	r6, r1
 800b7ce:	9608      	strle	r6, [sp, #32]
 800b7d0:	e7e1      	b.n	800b796 <_strtod_l+0x216>
 800b7d2:	280f      	cmp	r0, #15
 800b7d4:	dceb      	bgt.n	800b7ae <_strtod_l+0x22e>
 800b7d6:	9808      	ldr	r0, [sp, #32]
 800b7d8:	230a      	movs	r3, #10
 800b7da:	fb03 2300 	mla	r3, r3, r0, r2
 800b7de:	9308      	str	r3, [sp, #32]
 800b7e0:	e7e5      	b.n	800b7ae <_strtod_l+0x22e>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7e6:	1c50      	adds	r0, r2, #1
 800b7e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7ea:	7852      	ldrb	r2, [r2, #1]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	e7b1      	b.n	800b756 <_strtod_l+0x1d6>
 800b7f2:	f04f 0900 	mov.w	r9, #0
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e77d      	b.n	800b6f6 <_strtod_l+0x176>
 800b7fa:	f04f 0c00 	mov.w	ip, #0
 800b7fe:	1ca2      	adds	r2, r4, #2
 800b800:	9219      	str	r2, [sp, #100]	@ 0x64
 800b802:	78a2      	ldrb	r2, [r4, #2]
 800b804:	e785      	b.n	800b712 <_strtod_l+0x192>
 800b806:	f04f 0c01 	mov.w	ip, #1
 800b80a:	e7f8      	b.n	800b7fe <_strtod_l+0x27e>
 800b80c:	0800e6cc 	.word	0x0800e6cc
 800b810:	0800e4e4 	.word	0x0800e4e4
 800b814:	7ff00000 	.word	0x7ff00000
 800b818:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b81a:	1c51      	adds	r1, r2, #1
 800b81c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b81e:	7852      	ldrb	r2, [r2, #1]
 800b820:	2a30      	cmp	r2, #48	@ 0x30
 800b822:	d0f9      	beq.n	800b818 <_strtod_l+0x298>
 800b824:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b828:	2908      	cmp	r1, #8
 800b82a:	f63f af78 	bhi.w	800b71e <_strtod_l+0x19e>
 800b82e:	3a30      	subs	r2, #48	@ 0x30
 800b830:	920e      	str	r2, [sp, #56]	@ 0x38
 800b832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b834:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b836:	f04f 080a 	mov.w	r8, #10
 800b83a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b83c:	1c56      	adds	r6, r2, #1
 800b83e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b840:	7852      	ldrb	r2, [r2, #1]
 800b842:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b846:	f1be 0f09 	cmp.w	lr, #9
 800b84a:	d939      	bls.n	800b8c0 <_strtod_l+0x340>
 800b84c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b84e:	1a76      	subs	r6, r6, r1
 800b850:	2e08      	cmp	r6, #8
 800b852:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b856:	dc03      	bgt.n	800b860 <_strtod_l+0x2e0>
 800b858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b85a:	4588      	cmp	r8, r1
 800b85c:	bfa8      	it	ge
 800b85e:	4688      	movge	r8, r1
 800b860:	f1bc 0f00 	cmp.w	ip, #0
 800b864:	d001      	beq.n	800b86a <_strtod_l+0x2ea>
 800b866:	f1c8 0800 	rsb	r8, r8, #0
 800b86a:	2d00      	cmp	r5, #0
 800b86c:	d14e      	bne.n	800b90c <_strtod_l+0x38c>
 800b86e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b870:	4308      	orrs	r0, r1
 800b872:	f47f aebe 	bne.w	800b5f2 <_strtod_l+0x72>
 800b876:	2b00      	cmp	r3, #0
 800b878:	f47f aed6 	bne.w	800b628 <_strtod_l+0xa8>
 800b87c:	2a69      	cmp	r2, #105	@ 0x69
 800b87e:	d028      	beq.n	800b8d2 <_strtod_l+0x352>
 800b880:	dc25      	bgt.n	800b8ce <_strtod_l+0x34e>
 800b882:	2a49      	cmp	r2, #73	@ 0x49
 800b884:	d025      	beq.n	800b8d2 <_strtod_l+0x352>
 800b886:	2a4e      	cmp	r2, #78	@ 0x4e
 800b888:	f47f aece 	bne.w	800b628 <_strtod_l+0xa8>
 800b88c:	499b      	ldr	r1, [pc, #620]	@ (800bafc <_strtod_l+0x57c>)
 800b88e:	a819      	add	r0, sp, #100	@ 0x64
 800b890:	f002 fbe2 	bl	800e058 <__match>
 800b894:	2800      	cmp	r0, #0
 800b896:	f43f aec7 	beq.w	800b628 <_strtod_l+0xa8>
 800b89a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b28      	cmp	r3, #40	@ 0x28
 800b8a0:	d12e      	bne.n	800b900 <_strtod_l+0x380>
 800b8a2:	4997      	ldr	r1, [pc, #604]	@ (800bb00 <_strtod_l+0x580>)
 800b8a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8a6:	a819      	add	r0, sp, #100	@ 0x64
 800b8a8:	f002 fbea 	bl	800e080 <__hexnan>
 800b8ac:	2805      	cmp	r0, #5
 800b8ae:	d127      	bne.n	800b900 <_strtod_l+0x380>
 800b8b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b8b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b8ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b8be:	e698      	b.n	800b5f2 <_strtod_l+0x72>
 800b8c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8c2:	fb08 2101 	mla	r1, r8, r1, r2
 800b8c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b8ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8cc:	e7b5      	b.n	800b83a <_strtod_l+0x2ba>
 800b8ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800b8d0:	e7da      	b.n	800b888 <_strtod_l+0x308>
 800b8d2:	498c      	ldr	r1, [pc, #560]	@ (800bb04 <_strtod_l+0x584>)
 800b8d4:	a819      	add	r0, sp, #100	@ 0x64
 800b8d6:	f002 fbbf 	bl	800e058 <__match>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f43f aea4 	beq.w	800b628 <_strtod_l+0xa8>
 800b8e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8e2:	4989      	ldr	r1, [pc, #548]	@ (800bb08 <_strtod_l+0x588>)
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	a819      	add	r0, sp, #100	@ 0x64
 800b8e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8ea:	f002 fbb5 	bl	800e058 <__match>
 800b8ee:	b910      	cbnz	r0, 800b8f6 <_strtod_l+0x376>
 800b8f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bb18 <_strtod_l+0x598>
 800b8fa:	f04f 0a00 	mov.w	sl, #0
 800b8fe:	e678      	b.n	800b5f2 <_strtod_l+0x72>
 800b900:	4882      	ldr	r0, [pc, #520]	@ (800bb0c <_strtod_l+0x58c>)
 800b902:	f002 f8c5 	bl	800da90 <nan>
 800b906:	ec5b ab10 	vmov	sl, fp, d0
 800b90a:	e672      	b.n	800b5f2 <_strtod_l+0x72>
 800b90c:	eba8 0309 	sub.w	r3, r8, r9
 800b910:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b912:	9309      	str	r3, [sp, #36]	@ 0x24
 800b914:	2f00      	cmp	r7, #0
 800b916:	bf08      	it	eq
 800b918:	462f      	moveq	r7, r5
 800b91a:	2d10      	cmp	r5, #16
 800b91c:	462c      	mov	r4, r5
 800b91e:	bfa8      	it	ge
 800b920:	2410      	movge	r4, #16
 800b922:	f7f4 fe17 	bl	8000554 <__aeabi_ui2d>
 800b926:	2d09      	cmp	r5, #9
 800b928:	4682      	mov	sl, r0
 800b92a:	468b      	mov	fp, r1
 800b92c:	dc13      	bgt.n	800b956 <_strtod_l+0x3d6>
 800b92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b930:	2b00      	cmp	r3, #0
 800b932:	f43f ae5e 	beq.w	800b5f2 <_strtod_l+0x72>
 800b936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b938:	dd78      	ble.n	800ba2c <_strtod_l+0x4ac>
 800b93a:	2b16      	cmp	r3, #22
 800b93c:	dc5f      	bgt.n	800b9fe <_strtod_l+0x47e>
 800b93e:	4974      	ldr	r1, [pc, #464]	@ (800bb10 <_strtod_l+0x590>)
 800b940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b948:	4652      	mov	r2, sl
 800b94a:	465b      	mov	r3, fp
 800b94c:	f7f4 fe7c 	bl	8000648 <__aeabi_dmul>
 800b950:	4682      	mov	sl, r0
 800b952:	468b      	mov	fp, r1
 800b954:	e64d      	b.n	800b5f2 <_strtod_l+0x72>
 800b956:	4b6e      	ldr	r3, [pc, #440]	@ (800bb10 <_strtod_l+0x590>)
 800b958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b95c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b960:	f7f4 fe72 	bl	8000648 <__aeabi_dmul>
 800b964:	4682      	mov	sl, r0
 800b966:	9808      	ldr	r0, [sp, #32]
 800b968:	468b      	mov	fp, r1
 800b96a:	f7f4 fdf3 	bl	8000554 <__aeabi_ui2d>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4650      	mov	r0, sl
 800b974:	4659      	mov	r1, fp
 800b976:	f7f4 fcb1 	bl	80002dc <__adddf3>
 800b97a:	2d0f      	cmp	r5, #15
 800b97c:	4682      	mov	sl, r0
 800b97e:	468b      	mov	fp, r1
 800b980:	ddd5      	ble.n	800b92e <_strtod_l+0x3ae>
 800b982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b984:	1b2c      	subs	r4, r5, r4
 800b986:	441c      	add	r4, r3
 800b988:	2c00      	cmp	r4, #0
 800b98a:	f340 8096 	ble.w	800baba <_strtod_l+0x53a>
 800b98e:	f014 030f 	ands.w	r3, r4, #15
 800b992:	d00a      	beq.n	800b9aa <_strtod_l+0x42a>
 800b994:	495e      	ldr	r1, [pc, #376]	@ (800bb10 <_strtod_l+0x590>)
 800b996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b99a:	4652      	mov	r2, sl
 800b99c:	465b      	mov	r3, fp
 800b99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a2:	f7f4 fe51 	bl	8000648 <__aeabi_dmul>
 800b9a6:	4682      	mov	sl, r0
 800b9a8:	468b      	mov	fp, r1
 800b9aa:	f034 040f 	bics.w	r4, r4, #15
 800b9ae:	d073      	beq.n	800ba98 <_strtod_l+0x518>
 800b9b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b9b4:	dd48      	ble.n	800ba48 <_strtod_l+0x4c8>
 800b9b6:	2400      	movs	r4, #0
 800b9b8:	46a0      	mov	r8, r4
 800b9ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9bc:	46a1      	mov	r9, r4
 800b9be:	9a05      	ldr	r2, [sp, #20]
 800b9c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb18 <_strtod_l+0x598>
 800b9c4:	2322      	movs	r3, #34	@ 0x22
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	f04f 0a00 	mov.w	sl, #0
 800b9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f43f ae0f 	beq.w	800b5f2 <_strtod_l+0x72>
 800b9d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9d6:	9805      	ldr	r0, [sp, #20]
 800b9d8:	f7fe ffc5 	bl	800a966 <_Bfree>
 800b9dc:	9805      	ldr	r0, [sp, #20]
 800b9de:	4649      	mov	r1, r9
 800b9e0:	f7fe ffc1 	bl	800a966 <_Bfree>
 800b9e4:	9805      	ldr	r0, [sp, #20]
 800b9e6:	4641      	mov	r1, r8
 800b9e8:	f7fe ffbd 	bl	800a966 <_Bfree>
 800b9ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9ee:	9805      	ldr	r0, [sp, #20]
 800b9f0:	f7fe ffb9 	bl	800a966 <_Bfree>
 800b9f4:	9805      	ldr	r0, [sp, #20]
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	f7fe ffb5 	bl	800a966 <_Bfree>
 800b9fc:	e5f9      	b.n	800b5f2 <_strtod_l+0x72>
 800b9fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba04:	4293      	cmp	r3, r2
 800ba06:	dbbc      	blt.n	800b982 <_strtod_l+0x402>
 800ba08:	4c41      	ldr	r4, [pc, #260]	@ (800bb10 <_strtod_l+0x590>)
 800ba0a:	f1c5 050f 	rsb	r5, r5, #15
 800ba0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba12:	4652      	mov	r2, sl
 800ba14:	465b      	mov	r3, fp
 800ba16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba1a:	f7f4 fe15 	bl	8000648 <__aeabi_dmul>
 800ba1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba20:	1b5d      	subs	r5, r3, r5
 800ba22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba2a:	e78f      	b.n	800b94c <_strtod_l+0x3cc>
 800ba2c:	3316      	adds	r3, #22
 800ba2e:	dba8      	blt.n	800b982 <_strtod_l+0x402>
 800ba30:	4b37      	ldr	r3, [pc, #220]	@ (800bb10 <_strtod_l+0x590>)
 800ba32:	eba9 0808 	sub.w	r8, r9, r8
 800ba36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba3e:	4650      	mov	r0, sl
 800ba40:	4659      	mov	r1, fp
 800ba42:	f7f4 ff2b 	bl	800089c <__aeabi_ddiv>
 800ba46:	e783      	b.n	800b950 <_strtod_l+0x3d0>
 800ba48:	4b32      	ldr	r3, [pc, #200]	@ (800bb14 <_strtod_l+0x594>)
 800ba4a:	9308      	str	r3, [sp, #32]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	1124      	asrs	r4, r4, #4
 800ba50:	4650      	mov	r0, sl
 800ba52:	4659      	mov	r1, fp
 800ba54:	461e      	mov	r6, r3
 800ba56:	2c01      	cmp	r4, #1
 800ba58:	dc21      	bgt.n	800ba9e <_strtod_l+0x51e>
 800ba5a:	b10b      	cbz	r3, 800ba60 <_strtod_l+0x4e0>
 800ba5c:	4682      	mov	sl, r0
 800ba5e:	468b      	mov	fp, r1
 800ba60:	492c      	ldr	r1, [pc, #176]	@ (800bb14 <_strtod_l+0x594>)
 800ba62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba72:	f7f4 fde9 	bl	8000648 <__aeabi_dmul>
 800ba76:	4b28      	ldr	r3, [pc, #160]	@ (800bb18 <_strtod_l+0x598>)
 800ba78:	460a      	mov	r2, r1
 800ba7a:	400b      	ands	r3, r1
 800ba7c:	4927      	ldr	r1, [pc, #156]	@ (800bb1c <_strtod_l+0x59c>)
 800ba7e:	428b      	cmp	r3, r1
 800ba80:	4682      	mov	sl, r0
 800ba82:	d898      	bhi.n	800b9b6 <_strtod_l+0x436>
 800ba84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba88:	428b      	cmp	r3, r1
 800ba8a:	bf86      	itte	hi
 800ba8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bb20 <_strtod_l+0x5a0>
 800ba90:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9308      	str	r3, [sp, #32]
 800ba9c:	e07a      	b.n	800bb94 <_strtod_l+0x614>
 800ba9e:	07e2      	lsls	r2, r4, #31
 800baa0:	d505      	bpl.n	800baae <_strtod_l+0x52e>
 800baa2:	9b08      	ldr	r3, [sp, #32]
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f7f4 fdce 	bl	8000648 <__aeabi_dmul>
 800baac:	2301      	movs	r3, #1
 800baae:	9a08      	ldr	r2, [sp, #32]
 800bab0:	3208      	adds	r2, #8
 800bab2:	3601      	adds	r6, #1
 800bab4:	1064      	asrs	r4, r4, #1
 800bab6:	9208      	str	r2, [sp, #32]
 800bab8:	e7cd      	b.n	800ba56 <_strtod_l+0x4d6>
 800baba:	d0ed      	beq.n	800ba98 <_strtod_l+0x518>
 800babc:	4264      	negs	r4, r4
 800babe:	f014 020f 	ands.w	r2, r4, #15
 800bac2:	d00a      	beq.n	800bada <_strtod_l+0x55a>
 800bac4:	4b12      	ldr	r3, [pc, #72]	@ (800bb10 <_strtod_l+0x590>)
 800bac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baca:	4650      	mov	r0, sl
 800bacc:	4659      	mov	r1, fp
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	f7f4 fee3 	bl	800089c <__aeabi_ddiv>
 800bad6:	4682      	mov	sl, r0
 800bad8:	468b      	mov	fp, r1
 800bada:	1124      	asrs	r4, r4, #4
 800badc:	d0dc      	beq.n	800ba98 <_strtod_l+0x518>
 800bade:	2c1f      	cmp	r4, #31
 800bae0:	dd20      	ble.n	800bb24 <_strtod_l+0x5a4>
 800bae2:	2400      	movs	r4, #0
 800bae4:	46a0      	mov	r8, r4
 800bae6:	940a      	str	r4, [sp, #40]	@ 0x28
 800bae8:	46a1      	mov	r9, r4
 800baea:	9a05      	ldr	r2, [sp, #20]
 800baec:	2322      	movs	r3, #34	@ 0x22
 800baee:	f04f 0a00 	mov.w	sl, #0
 800baf2:	f04f 0b00 	mov.w	fp, #0
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	e768      	b.n	800b9cc <_strtod_l+0x44c>
 800bafa:	bf00      	nop
 800bafc:	0800e44d 	.word	0x0800e44d
 800bb00:	0800e6b8 	.word	0x0800e6b8
 800bb04:	0800e445 	.word	0x0800e445
 800bb08:	0800e4e9 	.word	0x0800e4e9
 800bb0c:	0800e864 	.word	0x0800e864
 800bb10:	0800e5f0 	.word	0x0800e5f0
 800bb14:	0800e5c8 	.word	0x0800e5c8
 800bb18:	7ff00000 	.word	0x7ff00000
 800bb1c:	7ca00000 	.word	0x7ca00000
 800bb20:	7fefffff 	.word	0x7fefffff
 800bb24:	f014 0310 	ands.w	r3, r4, #16
 800bb28:	bf18      	it	ne
 800bb2a:	236a      	movne	r3, #106	@ 0x6a
 800bb2c:	4ea9      	ldr	r6, [pc, #676]	@ (800bdd4 <_strtod_l+0x854>)
 800bb2e:	9308      	str	r3, [sp, #32]
 800bb30:	4650      	mov	r0, sl
 800bb32:	4659      	mov	r1, fp
 800bb34:	2300      	movs	r3, #0
 800bb36:	07e2      	lsls	r2, r4, #31
 800bb38:	d504      	bpl.n	800bb44 <_strtod_l+0x5c4>
 800bb3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb3e:	f7f4 fd83 	bl	8000648 <__aeabi_dmul>
 800bb42:	2301      	movs	r3, #1
 800bb44:	1064      	asrs	r4, r4, #1
 800bb46:	f106 0608 	add.w	r6, r6, #8
 800bb4a:	d1f4      	bne.n	800bb36 <_strtod_l+0x5b6>
 800bb4c:	b10b      	cbz	r3, 800bb52 <_strtod_l+0x5d2>
 800bb4e:	4682      	mov	sl, r0
 800bb50:	468b      	mov	fp, r1
 800bb52:	9b08      	ldr	r3, [sp, #32]
 800bb54:	b1b3      	cbz	r3, 800bb84 <_strtod_l+0x604>
 800bb56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	4659      	mov	r1, fp
 800bb62:	dd0f      	ble.n	800bb84 <_strtod_l+0x604>
 800bb64:	2b1f      	cmp	r3, #31
 800bb66:	dd55      	ble.n	800bc14 <_strtod_l+0x694>
 800bb68:	2b34      	cmp	r3, #52	@ 0x34
 800bb6a:	bfde      	ittt	le
 800bb6c:	f04f 33ff 	movle.w	r3, #4294967295
 800bb70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb74:	4093      	lslle	r3, r2
 800bb76:	f04f 0a00 	mov.w	sl, #0
 800bb7a:	bfcc      	ite	gt
 800bb7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb80:	ea03 0b01 	andle.w	fp, r3, r1
 800bb84:	2200      	movs	r2, #0
 800bb86:	2300      	movs	r3, #0
 800bb88:	4650      	mov	r0, sl
 800bb8a:	4659      	mov	r1, fp
 800bb8c:	f7f4 ffc4 	bl	8000b18 <__aeabi_dcmpeq>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d1a6      	bne.n	800bae2 <_strtod_l+0x562>
 800bb94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb9a:	9805      	ldr	r0, [sp, #20]
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	463a      	mov	r2, r7
 800bba0:	f7fe ff30 	bl	800aa04 <__s2b>
 800bba4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f43f af05 	beq.w	800b9b6 <_strtod_l+0x436>
 800bbac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	eba9 0308 	sub.w	r3, r9, r8
 800bbb4:	bfa8      	it	ge
 800bbb6:	2300      	movge	r3, #0
 800bbb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbba:	2400      	movs	r4, #0
 800bbbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bbc0:	9316      	str	r3, [sp, #88]	@ 0x58
 800bbc2:	46a0      	mov	r8, r4
 800bbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbc6:	9805      	ldr	r0, [sp, #20]
 800bbc8:	6859      	ldr	r1, [r3, #4]
 800bbca:	f7fe fea7 	bl	800a91c <_Balloc>
 800bbce:	4681      	mov	r9, r0
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	f43f aef4 	beq.w	800b9be <_strtod_l+0x43e>
 800bbd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbd8:	691a      	ldr	r2, [r3, #16]
 800bbda:	3202      	adds	r2, #2
 800bbdc:	f103 010c 	add.w	r1, r3, #12
 800bbe0:	0092      	lsls	r2, r2, #2
 800bbe2:	300c      	adds	r0, #12
 800bbe4:	f7fd ffc8 	bl	8009b78 <memcpy>
 800bbe8:	ec4b ab10 	vmov	d0, sl, fp
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbf0:	a91b      	add	r1, sp, #108	@ 0x6c
 800bbf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bbf6:	f7ff fa27 	bl	800b048 <__d2b>
 800bbfa:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f43f aede 	beq.w	800b9be <_strtod_l+0x43e>
 800bc02:	9805      	ldr	r0, [sp, #20]
 800bc04:	2101      	movs	r1, #1
 800bc06:	f7fe ff93 	bl	800ab30 <__i2b>
 800bc0a:	4680      	mov	r8, r0
 800bc0c:	b948      	cbnz	r0, 800bc22 <_strtod_l+0x6a2>
 800bc0e:	f04f 0800 	mov.w	r8, #0
 800bc12:	e6d4      	b.n	800b9be <_strtod_l+0x43e>
 800bc14:	f04f 32ff 	mov.w	r2, #4294967295
 800bc18:	fa02 f303 	lsl.w	r3, r2, r3
 800bc1c:	ea03 0a0a 	and.w	sl, r3, sl
 800bc20:	e7b0      	b.n	800bb84 <_strtod_l+0x604>
 800bc22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc26:	2d00      	cmp	r5, #0
 800bc28:	bfab      	itete	ge
 800bc2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bc2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bc2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bc30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bc32:	bfac      	ite	ge
 800bc34:	18ef      	addge	r7, r5, r3
 800bc36:	1b5e      	sublt	r6, r3, r5
 800bc38:	9b08      	ldr	r3, [sp, #32]
 800bc3a:	1aed      	subs	r5, r5, r3
 800bc3c:	4415      	add	r5, r2
 800bc3e:	4b66      	ldr	r3, [pc, #408]	@ (800bdd8 <_strtod_l+0x858>)
 800bc40:	3d01      	subs	r5, #1
 800bc42:	429d      	cmp	r5, r3
 800bc44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc48:	da50      	bge.n	800bcec <_strtod_l+0x76c>
 800bc4a:	1b5b      	subs	r3, r3, r5
 800bc4c:	2b1f      	cmp	r3, #31
 800bc4e:	eba2 0203 	sub.w	r2, r2, r3
 800bc52:	f04f 0101 	mov.w	r1, #1
 800bc56:	dc3d      	bgt.n	800bcd4 <_strtod_l+0x754>
 800bc58:	fa01 f303 	lsl.w	r3, r1, r3
 800bc5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc5e:	2300      	movs	r3, #0
 800bc60:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc62:	18bd      	adds	r5, r7, r2
 800bc64:	9b08      	ldr	r3, [sp, #32]
 800bc66:	42af      	cmp	r7, r5
 800bc68:	4416      	add	r6, r2
 800bc6a:	441e      	add	r6, r3
 800bc6c:	463b      	mov	r3, r7
 800bc6e:	bfa8      	it	ge
 800bc70:	462b      	movge	r3, r5
 800bc72:	42b3      	cmp	r3, r6
 800bc74:	bfa8      	it	ge
 800bc76:	4633      	movge	r3, r6
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bfc2      	ittt	gt
 800bc7c:	1aed      	subgt	r5, r5, r3
 800bc7e:	1af6      	subgt	r6, r6, r3
 800bc80:	1aff      	subgt	r7, r7, r3
 800bc82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dd16      	ble.n	800bcb6 <_strtod_l+0x736>
 800bc88:	4641      	mov	r1, r8
 800bc8a:	9805      	ldr	r0, [sp, #20]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	f7ff f80f 	bl	800acb0 <__pow5mult>
 800bc92:	4680      	mov	r8, r0
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d0ba      	beq.n	800bc0e <_strtod_l+0x68e>
 800bc98:	4601      	mov	r1, r0
 800bc9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc9c:	9805      	ldr	r0, [sp, #20]
 800bc9e:	f7fe ff5d 	bl	800ab5c <__multiply>
 800bca2:	900e      	str	r0, [sp, #56]	@ 0x38
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f43f ae8a 	beq.w	800b9be <_strtod_l+0x43e>
 800bcaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcac:	9805      	ldr	r0, [sp, #20]
 800bcae:	f7fe fe5a 	bl	800a966 <_Bfree>
 800bcb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcb6:	2d00      	cmp	r5, #0
 800bcb8:	dc1d      	bgt.n	800bcf6 <_strtod_l+0x776>
 800bcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dd23      	ble.n	800bd08 <_strtod_l+0x788>
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bcc4:	9805      	ldr	r0, [sp, #20]
 800bcc6:	f7fe fff3 	bl	800acb0 <__pow5mult>
 800bcca:	4681      	mov	r9, r0
 800bccc:	b9e0      	cbnz	r0, 800bd08 <_strtod_l+0x788>
 800bcce:	f04f 0900 	mov.w	r9, #0
 800bcd2:	e674      	b.n	800b9be <_strtod_l+0x43e>
 800bcd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bcd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bcdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bce0:	35e2      	adds	r5, #226	@ 0xe2
 800bce2:	fa01 f305 	lsl.w	r3, r1, r5
 800bce6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bce8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bcea:	e7ba      	b.n	800bc62 <_strtod_l+0x6e2>
 800bcec:	2300      	movs	r3, #0
 800bcee:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcf4:	e7b5      	b.n	800bc62 <_strtod_l+0x6e2>
 800bcf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcf8:	9805      	ldr	r0, [sp, #20]
 800bcfa:	462a      	mov	r2, r5
 800bcfc:	f7ff f818 	bl	800ad30 <__lshift>
 800bd00:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d1d9      	bne.n	800bcba <_strtod_l+0x73a>
 800bd06:	e65a      	b.n	800b9be <_strtod_l+0x43e>
 800bd08:	2e00      	cmp	r6, #0
 800bd0a:	dd07      	ble.n	800bd1c <_strtod_l+0x79c>
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	9805      	ldr	r0, [sp, #20]
 800bd10:	4632      	mov	r2, r6
 800bd12:	f7ff f80d 	bl	800ad30 <__lshift>
 800bd16:	4681      	mov	r9, r0
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d0d8      	beq.n	800bcce <_strtod_l+0x74e>
 800bd1c:	2f00      	cmp	r7, #0
 800bd1e:	dd08      	ble.n	800bd32 <_strtod_l+0x7b2>
 800bd20:	4641      	mov	r1, r8
 800bd22:	9805      	ldr	r0, [sp, #20]
 800bd24:	463a      	mov	r2, r7
 800bd26:	f7ff f803 	bl	800ad30 <__lshift>
 800bd2a:	4680      	mov	r8, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f43f ae46 	beq.w	800b9be <_strtod_l+0x43e>
 800bd32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd34:	9805      	ldr	r0, [sp, #20]
 800bd36:	464a      	mov	r2, r9
 800bd38:	f7ff f882 	bl	800ae40 <__mdiff>
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f ae3d 	beq.w	800b9be <_strtod_l+0x43e>
 800bd44:	68c3      	ldr	r3, [r0, #12]
 800bd46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60c3      	str	r3, [r0, #12]
 800bd4c:	4641      	mov	r1, r8
 800bd4e:	f7ff f85b 	bl	800ae08 <__mcmp>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	da46      	bge.n	800bde4 <_strtod_l+0x864>
 800bd56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd58:	ea53 030a 	orrs.w	r3, r3, sl
 800bd5c:	d16c      	bne.n	800be38 <_strtod_l+0x8b8>
 800bd5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d168      	bne.n	800be38 <_strtod_l+0x8b8>
 800bd66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd6a:	0d1b      	lsrs	r3, r3, #20
 800bd6c:	051b      	lsls	r3, r3, #20
 800bd6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd72:	d961      	bls.n	800be38 <_strtod_l+0x8b8>
 800bd74:	6963      	ldr	r3, [r4, #20]
 800bd76:	b913      	cbnz	r3, 800bd7e <_strtod_l+0x7fe>
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	dd5c      	ble.n	800be38 <_strtod_l+0x8b8>
 800bd7e:	4621      	mov	r1, r4
 800bd80:	2201      	movs	r2, #1
 800bd82:	9805      	ldr	r0, [sp, #20]
 800bd84:	f7fe ffd4 	bl	800ad30 <__lshift>
 800bd88:	4641      	mov	r1, r8
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	f7ff f83c 	bl	800ae08 <__mcmp>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	dd51      	ble.n	800be38 <_strtod_l+0x8b8>
 800bd94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd98:	9a08      	ldr	r2, [sp, #32]
 800bd9a:	0d1b      	lsrs	r3, r3, #20
 800bd9c:	051b      	lsls	r3, r3, #20
 800bd9e:	2a00      	cmp	r2, #0
 800bda0:	d06b      	beq.n	800be7a <_strtod_l+0x8fa>
 800bda2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bda6:	d868      	bhi.n	800be7a <_strtod_l+0x8fa>
 800bda8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bdac:	f67f ae9d 	bls.w	800baea <_strtod_l+0x56a>
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bddc <_strtod_l+0x85c>)
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f7f4 fc46 	bl	8000648 <__aeabi_dmul>
 800bdbc:	4b08      	ldr	r3, [pc, #32]	@ (800bde0 <_strtod_l+0x860>)
 800bdbe:	400b      	ands	r3, r1
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	468b      	mov	fp, r1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f47f ae05 	bne.w	800b9d4 <_strtod_l+0x454>
 800bdca:	9a05      	ldr	r2, [sp, #20]
 800bdcc:	2322      	movs	r3, #34	@ 0x22
 800bdce:	6013      	str	r3, [r2, #0]
 800bdd0:	e600      	b.n	800b9d4 <_strtod_l+0x454>
 800bdd2:	bf00      	nop
 800bdd4:	0800e6e0 	.word	0x0800e6e0
 800bdd8:	fffffc02 	.word	0xfffffc02
 800bddc:	39500000 	.word	0x39500000
 800bde0:	7ff00000 	.word	0x7ff00000
 800bde4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bde8:	d165      	bne.n	800beb6 <_strtod_l+0x936>
 800bdea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bdec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdf0:	b35a      	cbz	r2, 800be4a <_strtod_l+0x8ca>
 800bdf2:	4a9f      	ldr	r2, [pc, #636]	@ (800c070 <_strtod_l+0xaf0>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d12b      	bne.n	800be50 <_strtod_l+0x8d0>
 800bdf8:	9b08      	ldr	r3, [sp, #32]
 800bdfa:	4651      	mov	r1, sl
 800bdfc:	b303      	cbz	r3, 800be40 <_strtod_l+0x8c0>
 800bdfe:	4b9d      	ldr	r3, [pc, #628]	@ (800c074 <_strtod_l+0xaf4>)
 800be00:	465a      	mov	r2, fp
 800be02:	4013      	ands	r3, r2
 800be04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be08:	f04f 32ff 	mov.w	r2, #4294967295
 800be0c:	d81b      	bhi.n	800be46 <_strtod_l+0x8c6>
 800be0e:	0d1b      	lsrs	r3, r3, #20
 800be10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be14:	fa02 f303 	lsl.w	r3, r2, r3
 800be18:	4299      	cmp	r1, r3
 800be1a:	d119      	bne.n	800be50 <_strtod_l+0x8d0>
 800be1c:	4b96      	ldr	r3, [pc, #600]	@ (800c078 <_strtod_l+0xaf8>)
 800be1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be20:	429a      	cmp	r2, r3
 800be22:	d102      	bne.n	800be2a <_strtod_l+0x8aa>
 800be24:	3101      	adds	r1, #1
 800be26:	f43f adca 	beq.w	800b9be <_strtod_l+0x43e>
 800be2a:	4b92      	ldr	r3, [pc, #584]	@ (800c074 <_strtod_l+0xaf4>)
 800be2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be2e:	401a      	ands	r2, r3
 800be30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800be34:	f04f 0a00 	mov.w	sl, #0
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1b8      	bne.n	800bdb0 <_strtod_l+0x830>
 800be3e:	e5c9      	b.n	800b9d4 <_strtod_l+0x454>
 800be40:	f04f 33ff 	mov.w	r3, #4294967295
 800be44:	e7e8      	b.n	800be18 <_strtod_l+0x898>
 800be46:	4613      	mov	r3, r2
 800be48:	e7e6      	b.n	800be18 <_strtod_l+0x898>
 800be4a:	ea53 030a 	orrs.w	r3, r3, sl
 800be4e:	d0a1      	beq.n	800bd94 <_strtod_l+0x814>
 800be50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be52:	b1db      	cbz	r3, 800be8c <_strtod_l+0x90c>
 800be54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be56:	4213      	tst	r3, r2
 800be58:	d0ee      	beq.n	800be38 <_strtod_l+0x8b8>
 800be5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5c:	9a08      	ldr	r2, [sp, #32]
 800be5e:	4650      	mov	r0, sl
 800be60:	4659      	mov	r1, fp
 800be62:	b1bb      	cbz	r3, 800be94 <_strtod_l+0x914>
 800be64:	f7ff fb6e 	bl	800b544 <sulp>
 800be68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be6c:	ec53 2b10 	vmov	r2, r3, d0
 800be70:	f7f4 fa34 	bl	80002dc <__adddf3>
 800be74:	4682      	mov	sl, r0
 800be76:	468b      	mov	fp, r1
 800be78:	e7de      	b.n	800be38 <_strtod_l+0x8b8>
 800be7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be86:	f04f 3aff 	mov.w	sl, #4294967295
 800be8a:	e7d5      	b.n	800be38 <_strtod_l+0x8b8>
 800be8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be8e:	ea13 0f0a 	tst.w	r3, sl
 800be92:	e7e1      	b.n	800be58 <_strtod_l+0x8d8>
 800be94:	f7ff fb56 	bl	800b544 <sulp>
 800be98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be9c:	ec53 2b10 	vmov	r2, r3, d0
 800bea0:	f7f4 fa1a 	bl	80002d8 <__aeabi_dsub>
 800bea4:	2200      	movs	r2, #0
 800bea6:	2300      	movs	r3, #0
 800bea8:	4682      	mov	sl, r0
 800beaa:	468b      	mov	fp, r1
 800beac:	f7f4 fe34 	bl	8000b18 <__aeabi_dcmpeq>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d0c1      	beq.n	800be38 <_strtod_l+0x8b8>
 800beb4:	e619      	b.n	800baea <_strtod_l+0x56a>
 800beb6:	4641      	mov	r1, r8
 800beb8:	4620      	mov	r0, r4
 800beba:	f7ff f91d 	bl	800b0f8 <__ratio>
 800bebe:	ec57 6b10 	vmov	r6, r7, d0
 800bec2:	2200      	movs	r2, #0
 800bec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bec8:	4630      	mov	r0, r6
 800beca:	4639      	mov	r1, r7
 800becc:	f7f4 fe38 	bl	8000b40 <__aeabi_dcmple>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d06f      	beq.n	800bfb4 <_strtod_l+0xa34>
 800bed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d17a      	bne.n	800bfd0 <_strtod_l+0xa50>
 800beda:	f1ba 0f00 	cmp.w	sl, #0
 800bede:	d158      	bne.n	800bf92 <_strtod_l+0xa12>
 800bee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d15a      	bne.n	800bfa0 <_strtod_l+0xa20>
 800beea:	4b64      	ldr	r3, [pc, #400]	@ (800c07c <_strtod_l+0xafc>)
 800beec:	2200      	movs	r2, #0
 800beee:	4630      	mov	r0, r6
 800bef0:	4639      	mov	r1, r7
 800bef2:	f7f4 fe1b 	bl	8000b2c <__aeabi_dcmplt>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d159      	bne.n	800bfae <_strtod_l+0xa2e>
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	4b60      	ldr	r3, [pc, #384]	@ (800c080 <_strtod_l+0xb00>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	f7f4 fba1 	bl	8000648 <__aeabi_dmul>
 800bf06:	4606      	mov	r6, r0
 800bf08:	460f      	mov	r7, r1
 800bf0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf0e:	9606      	str	r6, [sp, #24]
 800bf10:	9307      	str	r3, [sp, #28]
 800bf12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf16:	4d57      	ldr	r5, [pc, #348]	@ (800c074 <_strtod_l+0xaf4>)
 800bf18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf1e:	401d      	ands	r5, r3
 800bf20:	4b58      	ldr	r3, [pc, #352]	@ (800c084 <_strtod_l+0xb04>)
 800bf22:	429d      	cmp	r5, r3
 800bf24:	f040 80b2 	bne.w	800c08c <_strtod_l+0xb0c>
 800bf28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bf2e:	ec4b ab10 	vmov	d0, sl, fp
 800bf32:	f7ff f819 	bl	800af68 <__ulp>
 800bf36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf3a:	ec51 0b10 	vmov	r0, r1, d0
 800bf3e:	f7f4 fb83 	bl	8000648 <__aeabi_dmul>
 800bf42:	4652      	mov	r2, sl
 800bf44:	465b      	mov	r3, fp
 800bf46:	f7f4 f9c9 	bl	80002dc <__adddf3>
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4949      	ldr	r1, [pc, #292]	@ (800c074 <_strtod_l+0xaf4>)
 800bf4e:	4a4e      	ldr	r2, [pc, #312]	@ (800c088 <_strtod_l+0xb08>)
 800bf50:	4019      	ands	r1, r3
 800bf52:	4291      	cmp	r1, r2
 800bf54:	4682      	mov	sl, r0
 800bf56:	d942      	bls.n	800bfde <_strtod_l+0xa5e>
 800bf58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf5a:	4b47      	ldr	r3, [pc, #284]	@ (800c078 <_strtod_l+0xaf8>)
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d103      	bne.n	800bf68 <_strtod_l+0x9e8>
 800bf60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf62:	3301      	adds	r3, #1
 800bf64:	f43f ad2b 	beq.w	800b9be <_strtod_l+0x43e>
 800bf68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c078 <_strtod_l+0xaf8>
 800bf6c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf72:	9805      	ldr	r0, [sp, #20]
 800bf74:	f7fe fcf7 	bl	800a966 <_Bfree>
 800bf78:	9805      	ldr	r0, [sp, #20]
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7fe fcf3 	bl	800a966 <_Bfree>
 800bf80:	9805      	ldr	r0, [sp, #20]
 800bf82:	4641      	mov	r1, r8
 800bf84:	f7fe fcef 	bl	800a966 <_Bfree>
 800bf88:	9805      	ldr	r0, [sp, #20]
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	f7fe fceb 	bl	800a966 <_Bfree>
 800bf90:	e618      	b.n	800bbc4 <_strtod_l+0x644>
 800bf92:	f1ba 0f01 	cmp.w	sl, #1
 800bf96:	d103      	bne.n	800bfa0 <_strtod_l+0xa20>
 800bf98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f43f ada5 	beq.w	800baea <_strtod_l+0x56a>
 800bfa0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c050 <_strtod_l+0xad0>
 800bfa4:	4f35      	ldr	r7, [pc, #212]	@ (800c07c <_strtod_l+0xafc>)
 800bfa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfaa:	2600      	movs	r6, #0
 800bfac:	e7b1      	b.n	800bf12 <_strtod_l+0x992>
 800bfae:	4f34      	ldr	r7, [pc, #208]	@ (800c080 <_strtod_l+0xb00>)
 800bfb0:	2600      	movs	r6, #0
 800bfb2:	e7aa      	b.n	800bf0a <_strtod_l+0x98a>
 800bfb4:	4b32      	ldr	r3, [pc, #200]	@ (800c080 <_strtod_l+0xb00>)
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f7f4 fb44 	bl	8000648 <__aeabi_dmul>
 800bfc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	460f      	mov	r7, r1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d09f      	beq.n	800bf0a <_strtod_l+0x98a>
 800bfca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bfce:	e7a0      	b.n	800bf12 <_strtod_l+0x992>
 800bfd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c058 <_strtod_l+0xad8>
 800bfd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfd8:	ec57 6b17 	vmov	r6, r7, d7
 800bfdc:	e799      	b.n	800bf12 <_strtod_l+0x992>
 800bfde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bfe2:	9b08      	ldr	r3, [sp, #32]
 800bfe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1c1      	bne.n	800bf70 <_strtod_l+0x9f0>
 800bfec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bff0:	0d1b      	lsrs	r3, r3, #20
 800bff2:	051b      	lsls	r3, r3, #20
 800bff4:	429d      	cmp	r5, r3
 800bff6:	d1bb      	bne.n	800bf70 <_strtod_l+0x9f0>
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 fe84 	bl	8000d08 <__aeabi_d2lz>
 800c000:	f7f4 faf4 	bl	80005ec <__aeabi_l2d>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 f964 	bl	80002d8 <__aeabi_dsub>
 800c010:	460b      	mov	r3, r1
 800c012:	4602      	mov	r2, r0
 800c014:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c018:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c01e:	ea46 060a 	orr.w	r6, r6, sl
 800c022:	431e      	orrs	r6, r3
 800c024:	d06f      	beq.n	800c106 <_strtod_l+0xb86>
 800c026:	a30e      	add	r3, pc, #56	@ (adr r3, 800c060 <_strtod_l+0xae0>)
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	f7f4 fd7e 	bl	8000b2c <__aeabi_dcmplt>
 800c030:	2800      	cmp	r0, #0
 800c032:	f47f accf 	bne.w	800b9d4 <_strtod_l+0x454>
 800c036:	a30c      	add	r3, pc, #48	@ (adr r3, 800c068 <_strtod_l+0xae8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c040:	f7f4 fd92 	bl	8000b68 <__aeabi_dcmpgt>
 800c044:	2800      	cmp	r0, #0
 800c046:	d093      	beq.n	800bf70 <_strtod_l+0x9f0>
 800c048:	e4c4      	b.n	800b9d4 <_strtod_l+0x454>
 800c04a:	bf00      	nop
 800c04c:	f3af 8000 	nop.w
 800c050:	00000000 	.word	0x00000000
 800c054:	bff00000 	.word	0xbff00000
 800c058:	00000000 	.word	0x00000000
 800c05c:	3ff00000 	.word	0x3ff00000
 800c060:	94a03595 	.word	0x94a03595
 800c064:	3fdfffff 	.word	0x3fdfffff
 800c068:	35afe535 	.word	0x35afe535
 800c06c:	3fe00000 	.word	0x3fe00000
 800c070:	000fffff 	.word	0x000fffff
 800c074:	7ff00000 	.word	0x7ff00000
 800c078:	7fefffff 	.word	0x7fefffff
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	3fe00000 	.word	0x3fe00000
 800c084:	7fe00000 	.word	0x7fe00000
 800c088:	7c9fffff 	.word	0x7c9fffff
 800c08c:	9b08      	ldr	r3, [sp, #32]
 800c08e:	b323      	cbz	r3, 800c0da <_strtod_l+0xb5a>
 800c090:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c094:	d821      	bhi.n	800c0da <_strtod_l+0xb5a>
 800c096:	a328      	add	r3, pc, #160	@ (adr r3, 800c138 <_strtod_l+0xbb8>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	4630      	mov	r0, r6
 800c09e:	4639      	mov	r1, r7
 800c0a0:	f7f4 fd4e 	bl	8000b40 <__aeabi_dcmple>
 800c0a4:	b1a0      	cbz	r0, 800c0d0 <_strtod_l+0xb50>
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f7f4 fda5 	bl	8000bf8 <__aeabi_d2uiz>
 800c0ae:	2801      	cmp	r0, #1
 800c0b0:	bf38      	it	cc
 800c0b2:	2001      	movcc	r0, #1
 800c0b4:	f7f4 fa4e 	bl	8000554 <__aeabi_ui2d>
 800c0b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	b9fb      	cbnz	r3, 800c100 <_strtod_l+0xb80>
 800c0c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c0c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c0cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c0d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c0d6:	1b5b      	subs	r3, r3, r5
 800c0d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c0e2:	f7fe ff41 	bl	800af68 <__ulp>
 800c0e6:	4650      	mov	r0, sl
 800c0e8:	ec53 2b10 	vmov	r2, r3, d0
 800c0ec:	4659      	mov	r1, fp
 800c0ee:	f7f4 faab 	bl	8000648 <__aeabi_dmul>
 800c0f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0f6:	f7f4 f8f1 	bl	80002dc <__adddf3>
 800c0fa:	4682      	mov	sl, r0
 800c0fc:	468b      	mov	fp, r1
 800c0fe:	e770      	b.n	800bfe2 <_strtod_l+0xa62>
 800c100:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c104:	e7e0      	b.n	800c0c8 <_strtod_l+0xb48>
 800c106:	a30e      	add	r3, pc, #56	@ (adr r3, 800c140 <_strtod_l+0xbc0>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 fd0e 	bl	8000b2c <__aeabi_dcmplt>
 800c110:	e798      	b.n	800c044 <_strtod_l+0xac4>
 800c112:	2300      	movs	r3, #0
 800c114:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c116:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c11a:	6013      	str	r3, [r2, #0]
 800c11c:	f7ff ba6d 	b.w	800b5fa <_strtod_l+0x7a>
 800c120:	2a65      	cmp	r2, #101	@ 0x65
 800c122:	f43f ab66 	beq.w	800b7f2 <_strtod_l+0x272>
 800c126:	2a45      	cmp	r2, #69	@ 0x45
 800c128:	f43f ab63 	beq.w	800b7f2 <_strtod_l+0x272>
 800c12c:	2301      	movs	r3, #1
 800c12e:	f7ff bb9e 	b.w	800b86e <_strtod_l+0x2ee>
 800c132:	bf00      	nop
 800c134:	f3af 8000 	nop.w
 800c138:	ffc00000 	.word	0xffc00000
 800c13c:	41dfffff 	.word	0x41dfffff
 800c140:	94a03595 	.word	0x94a03595
 800c144:	3fcfffff 	.word	0x3fcfffff

0800c148 <_strtod_r>:
 800c148:	4b01      	ldr	r3, [pc, #4]	@ (800c150 <_strtod_r+0x8>)
 800c14a:	f7ff ba19 	b.w	800b580 <_strtod_l>
 800c14e:	bf00      	nop
 800c150:	20000554 	.word	0x20000554

0800c154 <_strtol_l.constprop.0>:
 800c154:	2b24      	cmp	r3, #36	@ 0x24
 800c156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c15a:	4686      	mov	lr, r0
 800c15c:	4690      	mov	r8, r2
 800c15e:	d801      	bhi.n	800c164 <_strtol_l.constprop.0+0x10>
 800c160:	2b01      	cmp	r3, #1
 800c162:	d106      	bne.n	800c172 <_strtol_l.constprop.0+0x1e>
 800c164:	f7f9 fcb6 	bl	8005ad4 <__errno>
 800c168:	2316      	movs	r3, #22
 800c16a:	6003      	str	r3, [r0, #0]
 800c16c:	2000      	movs	r0, #0
 800c16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c172:	4834      	ldr	r0, [pc, #208]	@ (800c244 <_strtol_l.constprop.0+0xf0>)
 800c174:	460d      	mov	r5, r1
 800c176:	462a      	mov	r2, r5
 800c178:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c17c:	5d06      	ldrb	r6, [r0, r4]
 800c17e:	f016 0608 	ands.w	r6, r6, #8
 800c182:	d1f8      	bne.n	800c176 <_strtol_l.constprop.0+0x22>
 800c184:	2c2d      	cmp	r4, #45	@ 0x2d
 800c186:	d12d      	bne.n	800c1e4 <_strtol_l.constprop.0+0x90>
 800c188:	782c      	ldrb	r4, [r5, #0]
 800c18a:	2601      	movs	r6, #1
 800c18c:	1c95      	adds	r5, r2, #2
 800c18e:	f033 0210 	bics.w	r2, r3, #16
 800c192:	d109      	bne.n	800c1a8 <_strtol_l.constprop.0+0x54>
 800c194:	2c30      	cmp	r4, #48	@ 0x30
 800c196:	d12a      	bne.n	800c1ee <_strtol_l.constprop.0+0x9a>
 800c198:	782a      	ldrb	r2, [r5, #0]
 800c19a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c19e:	2a58      	cmp	r2, #88	@ 0x58
 800c1a0:	d125      	bne.n	800c1ee <_strtol_l.constprop.0+0x9a>
 800c1a2:	786c      	ldrb	r4, [r5, #1]
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	3502      	adds	r5, #2
 800c1a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c1ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	fbbc f9f3 	udiv	r9, ip, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c1bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c1c0:	2f09      	cmp	r7, #9
 800c1c2:	d81b      	bhi.n	800c1fc <_strtol_l.constprop.0+0xa8>
 800c1c4:	463c      	mov	r4, r7
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	dd27      	ble.n	800c21a <_strtol_l.constprop.0+0xc6>
 800c1ca:	1c57      	adds	r7, r2, #1
 800c1cc:	d007      	beq.n	800c1de <_strtol_l.constprop.0+0x8a>
 800c1ce:	4581      	cmp	r9, r0
 800c1d0:	d320      	bcc.n	800c214 <_strtol_l.constprop.0+0xc0>
 800c1d2:	d101      	bne.n	800c1d8 <_strtol_l.constprop.0+0x84>
 800c1d4:	45a2      	cmp	sl, r4
 800c1d6:	db1d      	blt.n	800c214 <_strtol_l.constprop.0+0xc0>
 800c1d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1e2:	e7eb      	b.n	800c1bc <_strtol_l.constprop.0+0x68>
 800c1e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c1e6:	bf04      	itt	eq
 800c1e8:	782c      	ldrbeq	r4, [r5, #0]
 800c1ea:	1c95      	addeq	r5, r2, #2
 800c1ec:	e7cf      	b.n	800c18e <_strtol_l.constprop.0+0x3a>
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1da      	bne.n	800c1a8 <_strtol_l.constprop.0+0x54>
 800c1f2:	2c30      	cmp	r4, #48	@ 0x30
 800c1f4:	bf0c      	ite	eq
 800c1f6:	2308      	moveq	r3, #8
 800c1f8:	230a      	movne	r3, #10
 800c1fa:	e7d5      	b.n	800c1a8 <_strtol_l.constprop.0+0x54>
 800c1fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c200:	2f19      	cmp	r7, #25
 800c202:	d801      	bhi.n	800c208 <_strtol_l.constprop.0+0xb4>
 800c204:	3c37      	subs	r4, #55	@ 0x37
 800c206:	e7de      	b.n	800c1c6 <_strtol_l.constprop.0+0x72>
 800c208:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c20c:	2f19      	cmp	r7, #25
 800c20e:	d804      	bhi.n	800c21a <_strtol_l.constprop.0+0xc6>
 800c210:	3c57      	subs	r4, #87	@ 0x57
 800c212:	e7d8      	b.n	800c1c6 <_strtol_l.constprop.0+0x72>
 800c214:	f04f 32ff 	mov.w	r2, #4294967295
 800c218:	e7e1      	b.n	800c1de <_strtol_l.constprop.0+0x8a>
 800c21a:	1c53      	adds	r3, r2, #1
 800c21c:	d108      	bne.n	800c230 <_strtol_l.constprop.0+0xdc>
 800c21e:	2322      	movs	r3, #34	@ 0x22
 800c220:	f8ce 3000 	str.w	r3, [lr]
 800c224:	4660      	mov	r0, ip
 800c226:	f1b8 0f00 	cmp.w	r8, #0
 800c22a:	d0a0      	beq.n	800c16e <_strtol_l.constprop.0+0x1a>
 800c22c:	1e69      	subs	r1, r5, #1
 800c22e:	e006      	b.n	800c23e <_strtol_l.constprop.0+0xea>
 800c230:	b106      	cbz	r6, 800c234 <_strtol_l.constprop.0+0xe0>
 800c232:	4240      	negs	r0, r0
 800c234:	f1b8 0f00 	cmp.w	r8, #0
 800c238:	d099      	beq.n	800c16e <_strtol_l.constprop.0+0x1a>
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	d1f6      	bne.n	800c22c <_strtol_l.constprop.0+0xd8>
 800c23e:	f8c8 1000 	str.w	r1, [r8]
 800c242:	e794      	b.n	800c16e <_strtol_l.constprop.0+0x1a>
 800c244:	0800e709 	.word	0x0800e709

0800c248 <_strtol_r>:
 800c248:	f7ff bf84 	b.w	800c154 <_strtol_l.constprop.0>

0800c24c <_strtoul_l.constprop.0>:
 800c24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c250:	4e34      	ldr	r6, [pc, #208]	@ (800c324 <_strtoul_l.constprop.0+0xd8>)
 800c252:	4686      	mov	lr, r0
 800c254:	460d      	mov	r5, r1
 800c256:	4628      	mov	r0, r5
 800c258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c25c:	5d37      	ldrb	r7, [r6, r4]
 800c25e:	f017 0708 	ands.w	r7, r7, #8
 800c262:	d1f8      	bne.n	800c256 <_strtoul_l.constprop.0+0xa>
 800c264:	2c2d      	cmp	r4, #45	@ 0x2d
 800c266:	d12f      	bne.n	800c2c8 <_strtoul_l.constprop.0+0x7c>
 800c268:	782c      	ldrb	r4, [r5, #0]
 800c26a:	2701      	movs	r7, #1
 800c26c:	1c85      	adds	r5, r0, #2
 800c26e:	f033 0010 	bics.w	r0, r3, #16
 800c272:	d109      	bne.n	800c288 <_strtoul_l.constprop.0+0x3c>
 800c274:	2c30      	cmp	r4, #48	@ 0x30
 800c276:	d12c      	bne.n	800c2d2 <_strtoul_l.constprop.0+0x86>
 800c278:	7828      	ldrb	r0, [r5, #0]
 800c27a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c27e:	2858      	cmp	r0, #88	@ 0x58
 800c280:	d127      	bne.n	800c2d2 <_strtoul_l.constprop.0+0x86>
 800c282:	786c      	ldrb	r4, [r5, #1]
 800c284:	2310      	movs	r3, #16
 800c286:	3502      	adds	r5, #2
 800c288:	f04f 38ff 	mov.w	r8, #4294967295
 800c28c:	2600      	movs	r6, #0
 800c28e:	fbb8 f8f3 	udiv	r8, r8, r3
 800c292:	fb03 f908 	mul.w	r9, r3, r8
 800c296:	ea6f 0909 	mvn.w	r9, r9
 800c29a:	4630      	mov	r0, r6
 800c29c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c2a0:	f1bc 0f09 	cmp.w	ip, #9
 800c2a4:	d81c      	bhi.n	800c2e0 <_strtoul_l.constprop.0+0x94>
 800c2a6:	4664      	mov	r4, ip
 800c2a8:	42a3      	cmp	r3, r4
 800c2aa:	dd2a      	ble.n	800c302 <_strtoul_l.constprop.0+0xb6>
 800c2ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c2b0:	d007      	beq.n	800c2c2 <_strtoul_l.constprop.0+0x76>
 800c2b2:	4580      	cmp	r8, r0
 800c2b4:	d322      	bcc.n	800c2fc <_strtoul_l.constprop.0+0xb0>
 800c2b6:	d101      	bne.n	800c2bc <_strtoul_l.constprop.0+0x70>
 800c2b8:	45a1      	cmp	r9, r4
 800c2ba:	db1f      	blt.n	800c2fc <_strtoul_l.constprop.0+0xb0>
 800c2bc:	fb00 4003 	mla	r0, r0, r3, r4
 800c2c0:	2601      	movs	r6, #1
 800c2c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2c6:	e7e9      	b.n	800c29c <_strtoul_l.constprop.0+0x50>
 800c2c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800c2ca:	bf04      	itt	eq
 800c2cc:	782c      	ldrbeq	r4, [r5, #0]
 800c2ce:	1c85      	addeq	r5, r0, #2
 800c2d0:	e7cd      	b.n	800c26e <_strtoul_l.constprop.0+0x22>
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1d8      	bne.n	800c288 <_strtoul_l.constprop.0+0x3c>
 800c2d6:	2c30      	cmp	r4, #48	@ 0x30
 800c2d8:	bf0c      	ite	eq
 800c2da:	2308      	moveq	r3, #8
 800c2dc:	230a      	movne	r3, #10
 800c2de:	e7d3      	b.n	800c288 <_strtoul_l.constprop.0+0x3c>
 800c2e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c2e4:	f1bc 0f19 	cmp.w	ip, #25
 800c2e8:	d801      	bhi.n	800c2ee <_strtoul_l.constprop.0+0xa2>
 800c2ea:	3c37      	subs	r4, #55	@ 0x37
 800c2ec:	e7dc      	b.n	800c2a8 <_strtoul_l.constprop.0+0x5c>
 800c2ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c2f2:	f1bc 0f19 	cmp.w	ip, #25
 800c2f6:	d804      	bhi.n	800c302 <_strtoul_l.constprop.0+0xb6>
 800c2f8:	3c57      	subs	r4, #87	@ 0x57
 800c2fa:	e7d5      	b.n	800c2a8 <_strtoul_l.constprop.0+0x5c>
 800c2fc:	f04f 36ff 	mov.w	r6, #4294967295
 800c300:	e7df      	b.n	800c2c2 <_strtoul_l.constprop.0+0x76>
 800c302:	1c73      	adds	r3, r6, #1
 800c304:	d106      	bne.n	800c314 <_strtoul_l.constprop.0+0xc8>
 800c306:	2322      	movs	r3, #34	@ 0x22
 800c308:	f8ce 3000 	str.w	r3, [lr]
 800c30c:	4630      	mov	r0, r6
 800c30e:	b932      	cbnz	r2, 800c31e <_strtoul_l.constprop.0+0xd2>
 800c310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c314:	b107      	cbz	r7, 800c318 <_strtoul_l.constprop.0+0xcc>
 800c316:	4240      	negs	r0, r0
 800c318:	2a00      	cmp	r2, #0
 800c31a:	d0f9      	beq.n	800c310 <_strtoul_l.constprop.0+0xc4>
 800c31c:	b106      	cbz	r6, 800c320 <_strtoul_l.constprop.0+0xd4>
 800c31e:	1e69      	subs	r1, r5, #1
 800c320:	6011      	str	r1, [r2, #0]
 800c322:	e7f5      	b.n	800c310 <_strtoul_l.constprop.0+0xc4>
 800c324:	0800e709 	.word	0x0800e709

0800c328 <_strtoul_r>:
 800c328:	f7ff bf90 	b.w	800c24c <_strtoul_l.constprop.0>

0800c32c <__ascii_wctomb>:
 800c32c:	4603      	mov	r3, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	b141      	cbz	r1, 800c344 <__ascii_wctomb+0x18>
 800c332:	2aff      	cmp	r2, #255	@ 0xff
 800c334:	d904      	bls.n	800c340 <__ascii_wctomb+0x14>
 800c336:	228a      	movs	r2, #138	@ 0x8a
 800c338:	601a      	str	r2, [r3, #0]
 800c33a:	f04f 30ff 	mov.w	r0, #4294967295
 800c33e:	4770      	bx	lr
 800c340:	700a      	strb	r2, [r1, #0]
 800c342:	2001      	movs	r0, #1
 800c344:	4770      	bx	lr
	...

0800c348 <_strtoll_l.constprop.0>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	b085      	sub	sp, #20
 800c34e:	4690      	mov	r8, r2
 800c350:	4a43      	ldr	r2, [pc, #268]	@ (800c460 <_strtoll_l.constprop.0+0x118>)
 800c352:	9002      	str	r0, [sp, #8]
 800c354:	4689      	mov	r9, r1
 800c356:	461e      	mov	r6, r3
 800c358:	460d      	mov	r5, r1
 800c35a:	462b      	mov	r3, r5
 800c35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c360:	5d17      	ldrb	r7, [r2, r4]
 800c362:	f017 0708 	ands.w	r7, r7, #8
 800c366:	d1f8      	bne.n	800c35a <_strtoll_l.constprop.0+0x12>
 800c368:	2c2d      	cmp	r4, #45	@ 0x2d
 800c36a:	d149      	bne.n	800c400 <_strtoll_l.constprop.0+0xb8>
 800c36c:	782c      	ldrb	r4, [r5, #0]
 800c36e:	2701      	movs	r7, #1
 800c370:	1c9d      	adds	r5, r3, #2
 800c372:	f036 0310 	bics.w	r3, r6, #16
 800c376:	d109      	bne.n	800c38c <_strtoll_l.constprop.0+0x44>
 800c378:	2c30      	cmp	r4, #48	@ 0x30
 800c37a:	d146      	bne.n	800c40a <_strtoll_l.constprop.0+0xc2>
 800c37c:	782b      	ldrb	r3, [r5, #0]
 800c37e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c382:	2b58      	cmp	r3, #88	@ 0x58
 800c384:	d141      	bne.n	800c40a <_strtoll_l.constprop.0+0xc2>
 800c386:	786c      	ldrb	r4, [r5, #1]
 800c388:	2610      	movs	r6, #16
 800c38a:	3502      	adds	r5, #2
 800c38c:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800c390:	f107 3bff 	add.w	fp, r7, #4294967295
 800c394:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c398:	17f3      	asrs	r3, r6, #31
 800c39a:	4632      	mov	r2, r6
 800c39c:	4658      	mov	r0, fp
 800c39e:	4651      	mov	r1, sl
 800c3a0:	9303      	str	r3, [sp, #12]
 800c3a2:	f7f4 fc99 	bl	8000cd8 <__aeabi_uldivmod>
 800c3a6:	9201      	str	r2, [sp, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	468e      	mov	lr, r1
 800c3ac:	4684      	mov	ip, r0
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c3b6:	2b09      	cmp	r3, #9
 800c3b8:	d905      	bls.n	800c3c6 <_strtoll_l.constprop.0+0x7e>
 800c3ba:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800c3be:	2b19      	cmp	r3, #25
 800c3c0:	d82a      	bhi.n	800c418 <_strtoll_l.constprop.0+0xd0>
 800c3c2:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800c3c6:	429e      	cmp	r6, r3
 800c3c8:	dd30      	ble.n	800c42c <_strtoll_l.constprop.0+0xe4>
 800c3ca:	1c54      	adds	r4, r2, #1
 800c3cc:	d015      	beq.n	800c3fa <_strtoll_l.constprop.0+0xb2>
 800c3ce:	4584      	cmp	ip, r0
 800c3d0:	eb7e 0201 	sbcs.w	r2, lr, r1
 800c3d4:	d327      	bcc.n	800c426 <_strtoll_l.constprop.0+0xde>
 800c3d6:	458e      	cmp	lr, r1
 800c3d8:	bf08      	it	eq
 800c3da:	4584      	cmpeq	ip, r0
 800c3dc:	d102      	bne.n	800c3e4 <_strtoll_l.constprop.0+0x9c>
 800c3de:	9a01      	ldr	r2, [sp, #4]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	db20      	blt.n	800c426 <_strtoll_l.constprop.0+0xde>
 800c3e4:	9a03      	ldr	r2, [sp, #12]
 800c3e6:	4371      	muls	r1, r6
 800c3e8:	fb00 1102 	mla	r1, r0, r2, r1
 800c3ec:	fba6 0200 	umull	r0, r2, r6, r0
 800c3f0:	440a      	add	r2, r1
 800c3f2:	1818      	adds	r0, r3, r0
 800c3f4:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3fe:	e7d8      	b.n	800c3b2 <_strtoll_l.constprop.0+0x6a>
 800c400:	2c2b      	cmp	r4, #43	@ 0x2b
 800c402:	bf04      	itt	eq
 800c404:	782c      	ldrbeq	r4, [r5, #0]
 800c406:	1c9d      	addeq	r5, r3, #2
 800c408:	e7b3      	b.n	800c372 <_strtoll_l.constprop.0+0x2a>
 800c40a:	2e00      	cmp	r6, #0
 800c40c:	d1be      	bne.n	800c38c <_strtoll_l.constprop.0+0x44>
 800c40e:	2c30      	cmp	r4, #48	@ 0x30
 800c410:	bf0c      	ite	eq
 800c412:	2608      	moveq	r6, #8
 800c414:	260a      	movne	r6, #10
 800c416:	e7b9      	b.n	800c38c <_strtoll_l.constprop.0+0x44>
 800c418:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800c41c:	2b19      	cmp	r3, #25
 800c41e:	d805      	bhi.n	800c42c <_strtoll_l.constprop.0+0xe4>
 800c420:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800c424:	e7cf      	b.n	800c3c6 <_strtoll_l.constprop.0+0x7e>
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e7e6      	b.n	800c3fa <_strtoll_l.constprop.0+0xb2>
 800c42c:	1c53      	adds	r3, r2, #1
 800c42e:	d10a      	bne.n	800c446 <_strtoll_l.constprop.0+0xfe>
 800c430:	9a02      	ldr	r2, [sp, #8]
 800c432:	2322      	movs	r3, #34	@ 0x22
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	4658      	mov	r0, fp
 800c438:	4651      	mov	r1, sl
 800c43a:	f1b8 0f00 	cmp.w	r8, #0
 800c43e:	d10a      	bne.n	800c456 <_strtoll_l.constprop.0+0x10e>
 800c440:	b005      	add	sp, #20
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c446:	b117      	cbz	r7, 800c44e <_strtoll_l.constprop.0+0x106>
 800c448:	4240      	negs	r0, r0
 800c44a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c44e:	f1b8 0f00 	cmp.w	r8, #0
 800c452:	d0f5      	beq.n	800c440 <_strtoll_l.constprop.0+0xf8>
 800c454:	b10a      	cbz	r2, 800c45a <_strtoll_l.constprop.0+0x112>
 800c456:	f105 39ff 	add.w	r9, r5, #4294967295
 800c45a:	f8c8 9000 	str.w	r9, [r8]
 800c45e:	e7ef      	b.n	800c440 <_strtoll_l.constprop.0+0xf8>
 800c460:	0800e709 	.word	0x0800e709

0800c464 <_strtoll_r>:
 800c464:	f7ff bf70 	b.w	800c348 <_strtoll_l.constprop.0>

0800c468 <_strtoull_l.constprop.0>:
 800c468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	4691      	mov	r9, r2
 800c46e:	4a48      	ldr	r2, [pc, #288]	@ (800c590 <_strtoull_l.constprop.0+0x128>)
 800c470:	9001      	str	r0, [sp, #4]
 800c472:	468a      	mov	sl, r1
 800c474:	461e      	mov	r6, r3
 800c476:	460d      	mov	r5, r1
 800c478:	462b      	mov	r3, r5
 800c47a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c47e:	5d17      	ldrb	r7, [r2, r4]
 800c480:	f017 0708 	ands.w	r7, r7, #8
 800c484:	d1f8      	bne.n	800c478 <_strtoull_l.constprop.0+0x10>
 800c486:	2c2d      	cmp	r4, #45	@ 0x2d
 800c488:	d14a      	bne.n	800c520 <_strtoull_l.constprop.0+0xb8>
 800c48a:	782c      	ldrb	r4, [r5, #0]
 800c48c:	2701      	movs	r7, #1
 800c48e:	1c9d      	adds	r5, r3, #2
 800c490:	f036 0310 	bics.w	r3, r6, #16
 800c494:	d109      	bne.n	800c4aa <_strtoull_l.constprop.0+0x42>
 800c496:	2c30      	cmp	r4, #48	@ 0x30
 800c498:	d147      	bne.n	800c52a <_strtoull_l.constprop.0+0xc2>
 800c49a:	782b      	ldrb	r3, [r5, #0]
 800c49c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c4a0:	2b58      	cmp	r3, #88	@ 0x58
 800c4a2:	d142      	bne.n	800c52a <_strtoull_l.constprop.0+0xc2>
 800c4a4:	786c      	ldrb	r4, [r5, #1]
 800c4a6:	2610      	movs	r6, #16
 800c4a8:	3502      	adds	r5, #2
 800c4aa:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800c4ae:	4632      	mov	r2, r6
 800c4b0:	465b      	mov	r3, fp
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b6:	f04f 31ff 	mov.w	r1, #4294967295
 800c4ba:	f7f4 fc0d 	bl	8000cd8 <__aeabi_uldivmod>
 800c4be:	4632      	mov	r2, r6
 800c4c0:	9000      	str	r0, [sp, #0]
 800c4c2:	4688      	mov	r8, r1
 800c4c4:	465b      	mov	r3, fp
 800c4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ca:	f04f 31ff 	mov.w	r1, #4294967295
 800c4ce:	f7f4 fc03 	bl	8000cd8 <__aeabi_uldivmod>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c4dc:	f1bc 0f09 	cmp.w	ip, #9
 800c4e0:	d82a      	bhi.n	800c538 <_strtoull_l.constprop.0+0xd0>
 800c4e2:	4664      	mov	r4, ip
 800c4e4:	42a6      	cmp	r6, r4
 800c4e6:	dd38      	ble.n	800c55a <_strtoull_l.constprop.0+0xf2>
 800c4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ec:	d015      	beq.n	800c51a <_strtoull_l.constprop.0+0xb2>
 800c4ee:	9b00      	ldr	r3, [sp, #0]
 800c4f0:	4283      	cmp	r3, r0
 800c4f2:	eb78 0301 	sbcs.w	r3, r8, r1
 800c4f6:	d32d      	bcc.n	800c554 <_strtoull_l.constprop.0+0xec>
 800c4f8:	9b00      	ldr	r3, [sp, #0]
 800c4fa:	4588      	cmp	r8, r1
 800c4fc:	bf08      	it	eq
 800c4fe:	4283      	cmpeq	r3, r0
 800c500:	d101      	bne.n	800c506 <_strtoull_l.constprop.0+0x9e>
 800c502:	42a2      	cmp	r2, r4
 800c504:	db26      	blt.n	800c554 <_strtoull_l.constprop.0+0xec>
 800c506:	4371      	muls	r1, r6
 800c508:	fb00 110b 	mla	r1, r0, fp, r1
 800c50c:	fba6 0300 	umull	r0, r3, r6, r0
 800c510:	4419      	add	r1, r3
 800c512:	1820      	adds	r0, r4, r0
 800c514:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800c518:	2301      	movs	r3, #1
 800c51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c51e:	e7db      	b.n	800c4d8 <_strtoull_l.constprop.0+0x70>
 800c520:	2c2b      	cmp	r4, #43	@ 0x2b
 800c522:	bf04      	itt	eq
 800c524:	782c      	ldrbeq	r4, [r5, #0]
 800c526:	1c9d      	addeq	r5, r3, #2
 800c528:	e7b2      	b.n	800c490 <_strtoull_l.constprop.0+0x28>
 800c52a:	2e00      	cmp	r6, #0
 800c52c:	d1bd      	bne.n	800c4aa <_strtoull_l.constprop.0+0x42>
 800c52e:	2c30      	cmp	r4, #48	@ 0x30
 800c530:	bf0c      	ite	eq
 800c532:	2608      	moveq	r6, #8
 800c534:	260a      	movne	r6, #10
 800c536:	e7b8      	b.n	800c4aa <_strtoull_l.constprop.0+0x42>
 800c538:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c53c:	f1bc 0f19 	cmp.w	ip, #25
 800c540:	d801      	bhi.n	800c546 <_strtoull_l.constprop.0+0xde>
 800c542:	3c37      	subs	r4, #55	@ 0x37
 800c544:	e7ce      	b.n	800c4e4 <_strtoull_l.constprop.0+0x7c>
 800c546:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c54a:	f1bc 0f19 	cmp.w	ip, #25
 800c54e:	d804      	bhi.n	800c55a <_strtoull_l.constprop.0+0xf2>
 800c550:	3c57      	subs	r4, #87	@ 0x57
 800c552:	e7c7      	b.n	800c4e4 <_strtoull_l.constprop.0+0x7c>
 800c554:	f04f 33ff 	mov.w	r3, #4294967295
 800c558:	e7df      	b.n	800c51a <_strtoull_l.constprop.0+0xb2>
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	d10a      	bne.n	800c574 <_strtoull_l.constprop.0+0x10c>
 800c55e:	9901      	ldr	r1, [sp, #4]
 800c560:	2222      	movs	r2, #34	@ 0x22
 800c562:	600a      	str	r2, [r1, #0]
 800c564:	4618      	mov	r0, r3
 800c566:	4619      	mov	r1, r3
 800c568:	f1b9 0f00 	cmp.w	r9, #0
 800c56c:	d10a      	bne.n	800c584 <_strtoull_l.constprop.0+0x11c>
 800c56e:	b003      	add	sp, #12
 800c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c574:	b117      	cbz	r7, 800c57c <_strtoull_l.constprop.0+0x114>
 800c576:	4240      	negs	r0, r0
 800c578:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c57c:	f1b9 0f00 	cmp.w	r9, #0
 800c580:	d0f5      	beq.n	800c56e <_strtoull_l.constprop.0+0x106>
 800c582:	b10b      	cbz	r3, 800c588 <_strtoull_l.constprop.0+0x120>
 800c584:	f105 3aff 	add.w	sl, r5, #4294967295
 800c588:	f8c9 a000 	str.w	sl, [r9]
 800c58c:	e7ef      	b.n	800c56e <_strtoull_l.constprop.0+0x106>
 800c58e:	bf00      	nop
 800c590:	0800e709 	.word	0x0800e709

0800c594 <_strtoull_r>:
 800c594:	f7ff bf68 	b.w	800c468 <_strtoull_l.constprop.0>

0800c598 <_mbrtowc_r>:
 800c598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c59a:	4c0a      	ldr	r4, [pc, #40]	@ (800c5c4 <_mbrtowc_r+0x2c>)
 800c59c:	9e08      	ldr	r6, [sp, #32]
 800c59e:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 800c5a2:	9600      	str	r6, [sp, #0]
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	4614      	mov	r4, r2
 800c5a8:	b912      	cbnz	r2, 800c5b0 <_mbrtowc_r+0x18>
 800c5aa:	4a07      	ldr	r2, [pc, #28]	@ (800c5c8 <_mbrtowc_r+0x30>)
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	47b8      	blx	r7
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	bf01      	itttt	eq
 800c5b6:	2300      	moveq	r3, #0
 800c5b8:	6033      	streq	r3, [r6, #0]
 800c5ba:	238a      	moveq	r3, #138	@ 0x8a
 800c5bc:	602b      	streq	r3, [r5, #0]
 800c5be:	b003      	add	sp, #12
 800c5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20000554 	.word	0x20000554
 800c5c8:	0800e864 	.word	0x0800e864

0800c5cc <_wcrtomb_r>:
 800c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ce:	4c09      	ldr	r4, [pc, #36]	@ (800c5f4 <_wcrtomb_r+0x28>)
 800c5d0:	b085      	sub	sp, #20
 800c5d2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	461e      	mov	r6, r3
 800c5da:	b909      	cbnz	r1, 800c5e0 <_wcrtomb_r+0x14>
 800c5dc:	460a      	mov	r2, r1
 800c5de:	a901      	add	r1, sp, #4
 800c5e0:	47b8      	blx	r7
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	bf01      	itttt	eq
 800c5e6:	2300      	moveq	r3, #0
 800c5e8:	6033      	streq	r3, [r6, #0]
 800c5ea:	238a      	moveq	r3, #138	@ 0x8a
 800c5ec:	602b      	streq	r3, [r5, #0]
 800c5ee:	b005      	add	sp, #20
 800c5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000554 	.word	0x20000554

0800c5f8 <iswspace>:
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	f000 b801 	b.w	800c600 <iswspace_l>
	...

0800c600 <iswspace_l>:
 800c600:	28ff      	cmp	r0, #255	@ 0xff
 800c602:	bf9d      	ittte	ls
 800c604:	4b02      	ldrls	r3, [pc, #8]	@ (800c610 <iswspace_l+0x10>)
 800c606:	5c18      	ldrbls	r0, [r3, r0]
 800c608:	f000 0008 	andls.w	r0, r0, #8
 800c60c:	2000      	movhi	r0, #0
 800c60e:	4770      	bx	lr
 800c610:	0800e709 	.word	0x0800e709
 800c614:	00000000 	.word	0x00000000

0800c618 <_svfprintf_r>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b0d3      	sub	sp, #332	@ 0x14c
 800c61e:	468b      	mov	fp, r1
 800c620:	4691      	mov	r9, r2
 800c622:	461e      	mov	r6, r3
 800c624:	9003      	str	r0, [sp, #12]
 800c626:	f7fd fa6d 	bl	8009b04 <_localeconv_r>
 800c62a:	6803      	ldr	r3, [r0, #0]
 800c62c:	9316      	str	r3, [sp, #88]	@ 0x58
 800c62e:	4618      	mov	r0, r3
 800c630:	f7f3 fdf6 	bl	8000220 <strlen>
 800c634:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c638:	900d      	str	r0, [sp, #52]	@ 0x34
 800c63a:	061b      	lsls	r3, r3, #24
 800c63c:	d515      	bpl.n	800c66a <_svfprintf_r+0x52>
 800c63e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c642:	b993      	cbnz	r3, 800c66a <_svfprintf_r+0x52>
 800c644:	9803      	ldr	r0, [sp, #12]
 800c646:	2140      	movs	r1, #64	@ 0x40
 800c648:	f7f8 fd6e 	bl	8005128 <_malloc_r>
 800c64c:	f8cb 0000 	str.w	r0, [fp]
 800c650:	f8cb 0010 	str.w	r0, [fp, #16]
 800c654:	b930      	cbnz	r0, 800c664 <_svfprintf_r+0x4c>
 800c656:	9a03      	ldr	r2, [sp, #12]
 800c658:	230c      	movs	r3, #12
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	f04f 33ff 	mov.w	r3, #4294967295
 800c660:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c662:	e1f7      	b.n	800ca54 <_svfprintf_r+0x43c>
 800c664:	2340      	movs	r3, #64	@ 0x40
 800c666:	f8cb 3014 	str.w	r3, [fp, #20]
 800c66a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800c8b8 <_svfprintf_r+0x2a0>
 800c66e:	2300      	movs	r3, #0
 800c670:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800c674:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c678:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800c67c:	ac29      	add	r4, sp, #164	@ 0xa4
 800c67e:	9426      	str	r4, [sp, #152]	@ 0x98
 800c680:	9304      	str	r3, [sp, #16]
 800c682:	9309      	str	r3, [sp, #36]	@ 0x24
 800c684:	9312      	str	r3, [sp, #72]	@ 0x48
 800c686:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c688:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c68a:	464b      	mov	r3, r9
 800c68c:	461d      	mov	r5, r3
 800c68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c692:	b10a      	cbz	r2, 800c698 <_svfprintf_r+0x80>
 800c694:	2a25      	cmp	r2, #37	@ 0x25
 800c696:	d1f9      	bne.n	800c68c <_svfprintf_r+0x74>
 800c698:	ebb5 0709 	subs.w	r7, r5, r9
 800c69c:	d00d      	beq.n	800c6ba <_svfprintf_r+0xa2>
 800c69e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c6a0:	443b      	add	r3, r7
 800c6a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c6a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	2b07      	cmp	r3, #7
 800c6aa:	e9c4 9700 	strd	r9, r7, [r4]
 800c6ae:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c6b0:	dc75      	bgt.n	800c79e <_svfprintf_r+0x186>
 800c6b2:	3408      	adds	r4, #8
 800c6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6b6:	443b      	add	r3, r7
 800c6b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6ba:	782b      	ldrb	r3, [r5, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f001 8148 	beq.w	800d952 <_svfprintf_r+0x133a>
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	1c6b      	adds	r3, r5, #1
 800c6c6:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800c6ca:	f04f 38ff 	mov.w	r8, #4294967295
 800c6ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6d0:	4615      	mov	r5, r2
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	9206      	str	r2, [sp, #24]
 800c6d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	3b20      	subs	r3, #32
 800c6de:	2b5a      	cmp	r3, #90	@ 0x5a
 800c6e0:	f200 85a4 	bhi.w	800d22c <_svfprintf_r+0xc14>
 800c6e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c6e8:	05a2009d 	.word	0x05a2009d
 800c6ec:	00a505a2 	.word	0x00a505a2
 800c6f0:	05a205a2 	.word	0x05a205a2
 800c6f4:	008505a2 	.word	0x008505a2
 800c6f8:	05a205a2 	.word	0x05a205a2
 800c6fc:	00b200a8 	.word	0x00b200a8
 800c700:	00af05a2 	.word	0x00af05a2
 800c704:	05a200b4 	.word	0x05a200b4
 800c708:	00d100ce 	.word	0x00d100ce
 800c70c:	00d100d1 	.word	0x00d100d1
 800c710:	00d100d1 	.word	0x00d100d1
 800c714:	00d100d1 	.word	0x00d100d1
 800c718:	00d100d1 	.word	0x00d100d1
 800c71c:	05a205a2 	.word	0x05a205a2
 800c720:	05a205a2 	.word	0x05a205a2
 800c724:	05a205a2 	.word	0x05a205a2
 800c728:	014705a2 	.word	0x014705a2
 800c72c:	010805a2 	.word	0x010805a2
 800c730:	0147011b 	.word	0x0147011b
 800c734:	01470147 	.word	0x01470147
 800c738:	05a205a2 	.word	0x05a205a2
 800c73c:	05a205a2 	.word	0x05a205a2
 800c740:	05a200e2 	.word	0x05a200e2
 800c744:	049d05a2 	.word	0x049d05a2
 800c748:	05a205a2 	.word	0x05a205a2
 800c74c:	04e705a2 	.word	0x04e705a2
 800c750:	050805a2 	.word	0x050805a2
 800c754:	05a205a2 	.word	0x05a205a2
 800c758:	05a2052a 	.word	0x05a2052a
 800c75c:	05a205a2 	.word	0x05a205a2
 800c760:	05a205a2 	.word	0x05a205a2
 800c764:	05a205a2 	.word	0x05a205a2
 800c768:	014705a2 	.word	0x014705a2
 800c76c:	010805a2 	.word	0x010805a2
 800c770:	0147011d 	.word	0x0147011d
 800c774:	01470147 	.word	0x01470147
 800c778:	011d00ee 	.word	0x011d00ee
 800c77c:	05a20102 	.word	0x05a20102
 800c780:	05a200fb 	.word	0x05a200fb
 800c784:	049f047e 	.word	0x049f047e
 800c788:	010204d6 	.word	0x010204d6
 800c78c:	04e705a2 	.word	0x04e705a2
 800c790:	050a009b 	.word	0x050a009b
 800c794:	05a205a2 	.word	0x05a205a2
 800c798:	05a20065 	.word	0x05a20065
 800c79c:	009b      	.short	0x009b
 800c79e:	9803      	ldr	r0, [sp, #12]
 800c7a0:	aa26      	add	r2, sp, #152	@ 0x98
 800c7a2:	4659      	mov	r1, fp
 800c7a4:	f001 fd1a 	bl	800e1dc <__ssprint_r>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	f040 814e 	bne.w	800ca4a <_svfprintf_r+0x432>
 800c7ae:	ac29      	add	r4, sp, #164	@ 0xa4
 800c7b0:	e780      	b.n	800c6b4 <_svfprintf_r+0x9c>
 800c7b2:	4b43      	ldr	r3, [pc, #268]	@ (800c8c0 <_svfprintf_r+0x2a8>)
 800c7b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c7b6:	f015 0320 	ands.w	r3, r5, #32
 800c7ba:	f000 84c2 	beq.w	800d142 <_svfprintf_r+0xb2a>
 800c7be:	3607      	adds	r6, #7
 800c7c0:	f026 0307 	bic.w	r3, r6, #7
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	685f      	ldr	r7, [r3, #4]
 800c7c8:	f852 6b08 	ldr.w	r6, [r2], #8
 800c7cc:	9207      	str	r2, [sp, #28]
 800c7ce:	07eb      	lsls	r3, r5, #31
 800c7d0:	d50a      	bpl.n	800c7e8 <_svfprintf_r+0x1d0>
 800c7d2:	ea56 0307 	orrs.w	r3, r6, r7
 800c7d6:	d007      	beq.n	800c7e8 <_svfprintf_r+0x1d0>
 800c7d8:	2330      	movs	r3, #48	@ 0x30
 800c7da:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800c7de:	9b06      	ldr	r3, [sp, #24]
 800c7e0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800c7e4:	f045 0502 	orr.w	r5, r5, #2
 800c7e8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	f000 bc28 	b.w	800d042 <_svfprintf_r+0xa2a>
 800c7f2:	9803      	ldr	r0, [sp, #12]
 800c7f4:	f7fd f986 	bl	8009b04 <_localeconv_r>
 800c7f8:	6843      	ldr	r3, [r0, #4]
 800c7fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f3 fd0f 	bl	8000220 <strlen>
 800c802:	9012      	str	r0, [sp, #72]	@ 0x48
 800c804:	9803      	ldr	r0, [sp, #12]
 800c806:	f7fd f97d 	bl	8009b04 <_localeconv_r>
 800c80a:	6883      	ldr	r3, [r0, #8]
 800c80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c810:	b12b      	cbz	r3, 800c81e <_svfprintf_r+0x206>
 800c812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c814:	b11b      	cbz	r3, 800c81e <_svfprintf_r+0x206>
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	b10b      	cbz	r3, 800c81e <_svfprintf_r+0x206>
 800c81a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800c81e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c820:	e757      	b.n	800c6d2 <_svfprintf_r+0xba>
 800c822:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1f9      	bne.n	800c81e <_svfprintf_r+0x206>
 800c82a:	2320      	movs	r3, #32
 800c82c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800c830:	e7f5      	b.n	800c81e <_svfprintf_r+0x206>
 800c832:	f045 0501 	orr.w	r5, r5, #1
 800c836:	e7f2      	b.n	800c81e <_svfprintf_r+0x206>
 800c838:	f856 3b04 	ldr.w	r3, [r6], #4
 800c83c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c83e:	2b00      	cmp	r3, #0
 800c840:	daed      	bge.n	800c81e <_svfprintf_r+0x206>
 800c842:	425b      	negs	r3, r3
 800c844:	930e      	str	r3, [sp, #56]	@ 0x38
 800c846:	f045 0504 	orr.w	r5, r5, #4
 800c84a:	e7e8      	b.n	800c81e <_svfprintf_r+0x206>
 800c84c:	232b      	movs	r3, #43	@ 0x2b
 800c84e:	e7ed      	b.n	800c82c <_svfprintf_r+0x214>
 800c850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c856:	9206      	str	r2, [sp, #24]
 800c858:	2a2a      	cmp	r2, #42	@ 0x2a
 800c85a:	d10f      	bne.n	800c87c <_svfprintf_r+0x264>
 800c85c:	f856 2b04 	ldr.w	r2, [r6], #4
 800c860:	930c      	str	r3, [sp, #48]	@ 0x30
 800c862:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800c866:	e7da      	b.n	800c81e <_svfprintf_r+0x206>
 800c868:	fb01 2808 	mla	r8, r1, r8, r2
 800c86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c870:	9206      	str	r2, [sp, #24]
 800c872:	9a06      	ldr	r2, [sp, #24]
 800c874:	3a30      	subs	r2, #48	@ 0x30
 800c876:	2a09      	cmp	r2, #9
 800c878:	d9f6      	bls.n	800c868 <_svfprintf_r+0x250>
 800c87a:	e72d      	b.n	800c6d8 <_svfprintf_r+0xc0>
 800c87c:	f04f 0800 	mov.w	r8, #0
 800c880:	210a      	movs	r1, #10
 800c882:	e7f6      	b.n	800c872 <_svfprintf_r+0x25a>
 800c884:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800c888:	e7c9      	b.n	800c81e <_svfprintf_r+0x206>
 800c88a:	2200      	movs	r2, #0
 800c88c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c88e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c890:	210a      	movs	r1, #10
 800c892:	9a06      	ldr	r2, [sp, #24]
 800c894:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c896:	3a30      	subs	r2, #48	@ 0x30
 800c898:	fb01 2200 	mla	r2, r1, r0, r2
 800c89c:	920e      	str	r2, [sp, #56]	@ 0x38
 800c89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a2:	9206      	str	r2, [sp, #24]
 800c8a4:	3a30      	subs	r2, #48	@ 0x30
 800c8a6:	2a09      	cmp	r2, #9
 800c8a8:	d9f3      	bls.n	800c892 <_svfprintf_r+0x27a>
 800c8aa:	e715      	b.n	800c6d8 <_svfprintf_r+0xc0>
 800c8ac:	f045 0508 	orr.w	r5, r5, #8
 800c8b0:	e7b5      	b.n	800c81e <_svfprintf_r+0x206>
 800c8b2:	bf00      	nop
 800c8b4:	f3af 8000 	nop.w
	...
 800c8c0:	0800e450 	.word	0x0800e450
 800c8c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b68      	cmp	r3, #104	@ 0x68
 800c8ca:	bf01      	itttt	eq
 800c8cc:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800c8ce:	3301      	addeq	r3, #1
 800c8d0:	930c      	streq	r3, [sp, #48]	@ 0x30
 800c8d2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800c8d6:	bf18      	it	ne
 800c8d8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800c8dc:	e79f      	b.n	800c81e <_svfprintf_r+0x206>
 800c8de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2b6c      	cmp	r3, #108	@ 0x6c
 800c8e4:	d105      	bne.n	800c8f2 <_svfprintf_r+0x2da>
 800c8e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	930c      	str	r3, [sp, #48]	@ 0x30
 800c8ec:	f045 0520 	orr.w	r5, r5, #32
 800c8f0:	e795      	b.n	800c81e <_svfprintf_r+0x206>
 800c8f2:	f045 0510 	orr.w	r5, r5, #16
 800c8f6:	e792      	b.n	800c81e <_svfprintf_r+0x206>
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	f852 3b04 	ldr.w	r3, [r2], #4
 800c8fe:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800c902:	2300      	movs	r3, #0
 800c904:	9207      	str	r2, [sp, #28]
 800c906:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800c90a:	469a      	mov	sl, r3
 800c90c:	f04f 0801 	mov.w	r8, #1
 800c910:	9310      	str	r3, [sp, #64]	@ 0x40
 800c912:	461f      	mov	r7, r3
 800c914:	9308      	str	r3, [sp, #32]
 800c916:	461e      	mov	r6, r3
 800c918:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800c91c:	e1d2      	b.n	800ccc4 <_svfprintf_r+0x6ac>
 800c91e:	f045 0510 	orr.w	r5, r5, #16
 800c922:	06af      	lsls	r7, r5, #26
 800c924:	d512      	bpl.n	800c94c <_svfprintf_r+0x334>
 800c926:	3607      	adds	r6, #7
 800c928:	f026 0307 	bic.w	r3, r6, #7
 800c92c:	461a      	mov	r2, r3
 800c92e:	685f      	ldr	r7, [r3, #4]
 800c930:	f852 6b08 	ldr.w	r6, [r2], #8
 800c934:	9207      	str	r2, [sp, #28]
 800c936:	2f00      	cmp	r7, #0
 800c938:	da06      	bge.n	800c948 <_svfprintf_r+0x330>
 800c93a:	4276      	negs	r6, r6
 800c93c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800c940:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800c944:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800c948:	2301      	movs	r3, #1
 800c94a:	e37d      	b.n	800d048 <_svfprintf_r+0xa30>
 800c94c:	4633      	mov	r3, r6
 800c94e:	06ee      	lsls	r6, r5, #27
 800c950:	f853 7b04 	ldr.w	r7, [r3], #4
 800c954:	9307      	str	r3, [sp, #28]
 800c956:	d502      	bpl.n	800c95e <_svfprintf_r+0x346>
 800c958:	463e      	mov	r6, r7
 800c95a:	17ff      	asrs	r7, r7, #31
 800c95c:	e7eb      	b.n	800c936 <_svfprintf_r+0x31e>
 800c95e:	0668      	lsls	r0, r5, #25
 800c960:	d503      	bpl.n	800c96a <_svfprintf_r+0x352>
 800c962:	b23e      	sxth	r6, r7
 800c964:	f347 37c0 	sbfx	r7, r7, #15, #1
 800c968:	e7e5      	b.n	800c936 <_svfprintf_r+0x31e>
 800c96a:	05a9      	lsls	r1, r5, #22
 800c96c:	d5f4      	bpl.n	800c958 <_svfprintf_r+0x340>
 800c96e:	b27e      	sxtb	r6, r7
 800c970:	f347 17c0 	sbfx	r7, r7, #7, #1
 800c974:	e7df      	b.n	800c936 <_svfprintf_r+0x31e>
 800c976:	3607      	adds	r6, #7
 800c978:	f026 0307 	bic.w	r3, r6, #7
 800c97c:	ecb3 7b02 	vldmia	r3!, {d7}
 800c980:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c984:	9307      	str	r3, [sp, #28]
 800c986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c988:	931a      	str	r3, [sp, #104]	@ 0x68
 800c98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c98c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c990:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c992:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800c996:	4b81      	ldr	r3, [pc, #516]	@ (800cb9c <_svfprintf_r+0x584>)
 800c998:	f04f 32ff 	mov.w	r2, #4294967295
 800c99c:	f7f4 f8ee 	bl	8000b7c <__aeabi_dcmpun>
 800c9a0:	bb10      	cbnz	r0, 800c9e8 <_svfprintf_r+0x3d0>
 800c9a2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800c9a6:	4b7d      	ldr	r3, [pc, #500]	@ (800cb9c <_svfprintf_r+0x584>)
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ac:	f7f4 f8c8 	bl	8000b40 <__aeabi_dcmple>
 800c9b0:	b9d0      	cbnz	r0, 800c9e8 <_svfprintf_r+0x3d0>
 800c9b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f7f4 f8b7 	bl	8000b2c <__aeabi_dcmplt>
 800c9be:	b110      	cbz	r0, 800c9c6 <_svfprintf_r+0x3ae>
 800c9c0:	232d      	movs	r3, #45	@ 0x2d
 800c9c2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800c9c6:	4a76      	ldr	r2, [pc, #472]	@ (800cba0 <_svfprintf_r+0x588>)
 800c9c8:	4b76      	ldr	r3, [pc, #472]	@ (800cba4 <_svfprintf_r+0x58c>)
 800c9ca:	9906      	ldr	r1, [sp, #24]
 800c9cc:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800c9d0:	2947      	cmp	r1, #71	@ 0x47
 800c9d2:	bfd4      	ite	le
 800c9d4:	4691      	movle	r9, r2
 800c9d6:	4699      	movgt	r9, r3
 800c9d8:	f04f 0a00 	mov.w	sl, #0
 800c9dc:	f04f 0803 	mov.w	r8, #3
 800c9e0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800c9e4:	f000 bfec 	b.w	800d9c0 <_svfprintf_r+0x13a8>
 800c9e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f7f4 f8c4 	bl	8000b7c <__aeabi_dcmpun>
 800c9f4:	4682      	mov	sl, r0
 800c9f6:	b140      	cbz	r0, 800ca0a <_svfprintf_r+0x3f2>
 800c9f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9fa:	4a6b      	ldr	r2, [pc, #428]	@ (800cba8 <_svfprintf_r+0x590>)
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bfbc      	itt	lt
 800ca00:	232d      	movlt	r3, #45	@ 0x2d
 800ca02:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800ca06:	4b69      	ldr	r3, [pc, #420]	@ (800cbac <_svfprintf_r+0x594>)
 800ca08:	e7df      	b.n	800c9ca <_svfprintf_r+0x3b2>
 800ca0a:	9b06      	ldr	r3, [sp, #24]
 800ca0c:	2b61      	cmp	r3, #97	@ 0x61
 800ca0e:	d025      	beq.n	800ca5c <_svfprintf_r+0x444>
 800ca10:	2b41      	cmp	r3, #65	@ 0x41
 800ca12:	d125      	bne.n	800ca60 <_svfprintf_r+0x448>
 800ca14:	2358      	movs	r3, #88	@ 0x58
 800ca16:	2230      	movs	r2, #48	@ 0x30
 800ca18:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800ca1c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800ca20:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800ca24:	f045 0502 	orr.w	r5, r5, #2
 800ca28:	f340 80a5 	ble.w	800cb76 <_svfprintf_r+0x55e>
 800ca2c:	9803      	ldr	r0, [sp, #12]
 800ca2e:	f108 0101 	add.w	r1, r8, #1
 800ca32:	f7f8 fb79 	bl	8005128 <_malloc_r>
 800ca36:	4681      	mov	r9, r0
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	f040 80a1 	bne.w	800cb80 <_svfprintf_r+0x568>
 800ca3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ca42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca46:	f8ab 300c 	strh.w	r3, [fp, #12]
 800ca4a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ca4e:	065b      	lsls	r3, r3, #25
 800ca50:	f53f ae04 	bmi.w	800c65c <_svfprintf_r+0x44>
 800ca54:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ca56:	b053      	add	sp, #332	@ 0x14c
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	2378      	movs	r3, #120	@ 0x78
 800ca5e:	e7da      	b.n	800ca16 <_svfprintf_r+0x3fe>
 800ca60:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ca64:	f000 808e 	beq.w	800cb84 <_svfprintf_r+0x56c>
 800ca68:	9b06      	ldr	r3, [sp, #24]
 800ca6a:	f023 0320 	bic.w	r3, r3, #32
 800ca6e:	2b47      	cmp	r3, #71	@ 0x47
 800ca70:	d105      	bne.n	800ca7e <_svfprintf_r+0x466>
 800ca72:	f1b8 0f00 	cmp.w	r8, #0
 800ca76:	d102      	bne.n	800ca7e <_svfprintf_r+0x466>
 800ca78:	46c2      	mov	sl, r8
 800ca7a:	f04f 0801 	mov.w	r8, #1
 800ca7e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800ca82:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	da7f      	bge.n	800cb8a <_svfprintf_r+0x572>
 800ca8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca8c:	9314      	str	r3, [sp, #80]	@ 0x50
 800ca8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ca94:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca96:	232d      	movs	r3, #45	@ 0x2d
 800ca98:	931c      	str	r3, [sp, #112]	@ 0x70
 800ca9a:	9b06      	ldr	r3, [sp, #24]
 800ca9c:	f023 0320 	bic.w	r3, r3, #32
 800caa0:	2b41      	cmp	r3, #65	@ 0x41
 800caa2:	9308      	str	r3, [sp, #32]
 800caa4:	f040 81e6 	bne.w	800ce74 <_svfprintf_r+0x85c>
 800caa8:	a820      	add	r0, sp, #128	@ 0x80
 800caaa:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800caae:	f7fd f877 	bl	8009ba0 <frexp>
 800cab2:	2200      	movs	r2, #0
 800cab4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800cab8:	ec51 0b10 	vmov	r0, r1, d0
 800cabc:	f7f3 fdc4 	bl	8000648 <__aeabi_dmul>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cac8:	2200      	movs	r2, #0
 800caca:	2300      	movs	r3, #0
 800cacc:	f7f4 f824 	bl	8000b18 <__aeabi_dcmpeq>
 800cad0:	b108      	cbz	r0, 800cad6 <_svfprintf_r+0x4be>
 800cad2:	2301      	movs	r3, #1
 800cad4:	9320      	str	r3, [sp, #128]	@ 0x80
 800cad6:	4a36      	ldr	r2, [pc, #216]	@ (800cbb0 <_svfprintf_r+0x598>)
 800cad8:	4b36      	ldr	r3, [pc, #216]	@ (800cbb4 <_svfprintf_r+0x59c>)
 800cada:	9906      	ldr	r1, [sp, #24]
 800cadc:	2961      	cmp	r1, #97	@ 0x61
 800cade:	bf18      	it	ne
 800cae0:	461a      	movne	r2, r3
 800cae2:	9210      	str	r2, [sp, #64]	@ 0x40
 800cae4:	f108 37ff 	add.w	r7, r8, #4294967295
 800cae8:	464e      	mov	r6, r9
 800caea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caee:	4b32      	ldr	r3, [pc, #200]	@ (800cbb8 <_svfprintf_r+0x5a0>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	f7f3 fda9 	bl	8000648 <__aeabi_dmul>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cafe:	f7f4 f853 	bl	8000ba8 <__aeabi_d2iz>
 800cb02:	9013      	str	r0, [sp, #76]	@ 0x4c
 800cb04:	f7f3 fd36 	bl	8000574 <__aeabi_i2d>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb10:	f7f3 fbe2 	bl	80002d8 <__aeabi_dsub>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb1c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb20:	5c9b      	ldrb	r3, [r3, r2]
 800cb22:	f806 3b01 	strb.w	r3, [r6], #1
 800cb26:	1c7a      	adds	r2, r7, #1
 800cb28:	d006      	beq.n	800cb38 <_svfprintf_r+0x520>
 800cb2a:	1e7b      	subs	r3, r7, #1
 800cb2c:	931d      	str	r3, [sp, #116]	@ 0x74
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2300      	movs	r3, #0
 800cb32:	f7f3 fff1 	bl	8000b18 <__aeabi_dcmpeq>
 800cb36:	b370      	cbz	r0, 800cb96 <_svfprintf_r+0x57e>
 800cb38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb3c:	4b1f      	ldr	r3, [pc, #124]	@ (800cbbc <_svfprintf_r+0x5a4>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f7f4 f812 	bl	8000b68 <__aeabi_dcmpgt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d13b      	bne.n	800cbc0 <_svfprintf_r+0x5a8>
 800cb48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb4c:	4b1b      	ldr	r3, [pc, #108]	@ (800cbbc <_svfprintf_r+0x5a4>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f7f3 ffe2 	bl	8000b18 <__aeabi_dcmpeq>
 800cb54:	b110      	cbz	r0, 800cb5c <_svfprintf_r+0x544>
 800cb56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb58:	07db      	lsls	r3, r3, #31
 800cb5a:	d431      	bmi.n	800cbc0 <_svfprintf_r+0x5a8>
 800cb5c:	4633      	mov	r3, r6
 800cb5e:	19f1      	adds	r1, r6, r7
 800cb60:	2030      	movs	r0, #48	@ 0x30
 800cb62:	1aca      	subs	r2, r1, r3
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	f280 8182 	bge.w	800ce6e <_svfprintf_r+0x856>
 800cb6a:	1c7b      	adds	r3, r7, #1
 800cb6c:	3701      	adds	r7, #1
 800cb6e:	bfb8      	it	lt
 800cb70:	2300      	movlt	r3, #0
 800cb72:	441e      	add	r6, r3
 800cb74:	e038      	b.n	800cbe8 <_svfprintf_r+0x5d0>
 800cb76:	f04f 0a00 	mov.w	sl, #0
 800cb7a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800cb7e:	e77e      	b.n	800ca7e <_svfprintf_r+0x466>
 800cb80:	4682      	mov	sl, r0
 800cb82:	e77c      	b.n	800ca7e <_svfprintf_r+0x466>
 800cb84:	f04f 0806 	mov.w	r8, #6
 800cb88:	e779      	b.n	800ca7e <_svfprintf_r+0x466>
 800cb8a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800cb8e:	2300      	movs	r3, #0
 800cb90:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800cb94:	e780      	b.n	800ca98 <_svfprintf_r+0x480>
 800cb96:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800cb98:	e7a7      	b.n	800caea <_svfprintf_r+0x4d2>
 800cb9a:	bf00      	nop
 800cb9c:	7fefffff 	.word	0x7fefffff
 800cba0:	0800e440 	.word	0x0800e440
 800cba4:	0800e444 	.word	0x0800e444
 800cba8:	0800e448 	.word	0x0800e448
 800cbac:	0800e44c 	.word	0x0800e44c
 800cbb0:	0800e450 	.word	0x0800e450
 800cbb4:	0800e461 	.word	0x0800e461
 800cbb8:	40300000 	.word	0x40300000
 800cbbc:	3fe00000 	.word	0x3fe00000
 800cbc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbc2:	9624      	str	r6, [sp, #144]	@ 0x90
 800cbc4:	7bd9      	ldrb	r1, [r3, #15]
 800cbc6:	2030      	movs	r0, #48	@ 0x30
 800cbc8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cbca:	1e53      	subs	r3, r2, #1
 800cbcc:	9324      	str	r3, [sp, #144]	@ 0x90
 800cbce:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800cbd2:	428b      	cmp	r3, r1
 800cbd4:	f000 8148 	beq.w	800ce68 <_svfprintf_r+0x850>
 800cbd8:	2b39      	cmp	r3, #57	@ 0x39
 800cbda:	bf0b      	itete	eq
 800cbdc:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800cbde:	3301      	addne	r3, #1
 800cbe0:	7a9b      	ldrbeq	r3, [r3, #10]
 800cbe2:	b2db      	uxtbne	r3, r3
 800cbe4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cbe8:	eba6 0309 	sub.w	r3, r6, r9
 800cbec:	9304      	str	r3, [sp, #16]
 800cbee:	9b08      	ldr	r3, [sp, #32]
 800cbf0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cbf2:	2b47      	cmp	r3, #71	@ 0x47
 800cbf4:	f040 8187 	bne.w	800cf06 <_svfprintf_r+0x8ee>
 800cbf8:	1cf1      	adds	r1, r6, #3
 800cbfa:	db02      	blt.n	800cc02 <_svfprintf_r+0x5ea>
 800cbfc:	4546      	cmp	r6, r8
 800cbfe:	f340 81a5 	ble.w	800cf4c <_svfprintf_r+0x934>
 800cc02:	9b06      	ldr	r3, [sp, #24]
 800cc04:	3b02      	subs	r3, #2
 800cc06:	9306      	str	r3, [sp, #24]
 800cc08:	9906      	ldr	r1, [sp, #24]
 800cc0a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800cc0e:	f021 0120 	bic.w	r1, r1, #32
 800cc12:	2941      	cmp	r1, #65	@ 0x41
 800cc14:	bf08      	it	eq
 800cc16:	320f      	addeq	r2, #15
 800cc18:	f106 33ff 	add.w	r3, r6, #4294967295
 800cc1c:	bf06      	itte	eq
 800cc1e:	b2d2      	uxtbeq	r2, r2
 800cc20:	2101      	moveq	r1, #1
 800cc22:	2100      	movne	r1, #0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	9320      	str	r3, [sp, #128]	@ 0x80
 800cc28:	bfb8      	it	lt
 800cc2a:	f1c6 0301 	rsblt	r3, r6, #1
 800cc2e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800cc32:	bfb4      	ite	lt
 800cc34:	222d      	movlt	r2, #45	@ 0x2d
 800cc36:	222b      	movge	r2, #43	@ 0x2b
 800cc38:	2b09      	cmp	r3, #9
 800cc3a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800cc3e:	f340 8178 	ble.w	800cf32 <_svfprintf_r+0x91a>
 800cc42:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800cc46:	270a      	movs	r7, #10
 800cc48:	4602      	mov	r2, r0
 800cc4a:	fbb3 f6f7 	udiv	r6, r3, r7
 800cc4e:	fb07 3116 	mls	r1, r7, r6, r3
 800cc52:	3130      	adds	r1, #48	@ 0x30
 800cc54:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	2963      	cmp	r1, #99	@ 0x63
 800cc5c:	f100 30ff 	add.w	r0, r0, #4294967295
 800cc60:	4633      	mov	r3, r6
 800cc62:	dcf1      	bgt.n	800cc48 <_svfprintf_r+0x630>
 800cc64:	3330      	adds	r3, #48	@ 0x30
 800cc66:	1e91      	subs	r1, r2, #2
 800cc68:	f800 3c01 	strb.w	r3, [r0, #-1]
 800cc6c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800cc70:	460b      	mov	r3, r1
 800cc72:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800cc76:	4283      	cmp	r3, r0
 800cc78:	f0c0 8156 	bcc.w	800cf28 <_svfprintf_r+0x910>
 800cc7c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800cc80:	1a9b      	subs	r3, r3, r2
 800cc82:	4281      	cmp	r1, r0
 800cc84:	bf88      	it	hi
 800cc86:	2300      	movhi	r3, #0
 800cc88:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800cc8c:	441a      	add	r2, r3
 800cc8e:	ab22      	add	r3, sp, #136	@ 0x88
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	9a04      	ldr	r2, [sp, #16]
 800cc94:	9318      	str	r3, [sp, #96]	@ 0x60
 800cc96:	2a01      	cmp	r2, #1
 800cc98:	eb03 0802 	add.w	r8, r3, r2
 800cc9c:	dc01      	bgt.n	800cca2 <_svfprintf_r+0x68a>
 800cc9e:	07ea      	lsls	r2, r5, #31
 800cca0:	d501      	bpl.n	800cca6 <_svfprintf_r+0x68e>
 800cca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cca4:	4498      	add	r8, r3
 800cca6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ccaa:	2700      	movs	r7, #0
 800ccac:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800ccb0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccb2:	9708      	str	r7, [sp, #32]
 800ccb4:	463e      	mov	r6, r7
 800ccb6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f040 818f 	bne.w	800cfdc <_svfprintf_r+0x9c4>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ccc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800ccc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ccc6:	4543      	cmp	r3, r8
 800ccc8:	bfb8      	it	lt
 800ccca:	4643      	movlt	r3, r8
 800cccc:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccce:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800ccd2:	b113      	cbz	r3, 800ccda <_svfprintf_r+0x6c2>
 800ccd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccda:	f015 0302 	ands.w	r3, r5, #2
 800ccde:	931c      	str	r3, [sp, #112]	@ 0x70
 800cce0:	bf1e      	ittt	ne
 800cce2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800cce4:	3302      	addne	r3, #2
 800cce6:	9311      	strne	r3, [sp, #68]	@ 0x44
 800cce8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800ccec:	931d      	str	r3, [sp, #116]	@ 0x74
 800ccee:	d122      	bne.n	800cd36 <_svfprintf_r+0x71e>
 800ccf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccf2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ccf4:	1a9b      	subs	r3, r3, r2
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccfa:	dd1c      	ble.n	800cd36 <_svfprintf_r+0x71e>
 800ccfc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ccfe:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800cd02:	2810      	cmp	r0, #16
 800cd04:	489e      	ldr	r0, [pc, #632]	@ (800cf80 <_svfprintf_r+0x968>)
 800cd06:	6020      	str	r0, [r4, #0]
 800cd08:	f102 0201 	add.w	r2, r2, #1
 800cd0c:	f104 0108 	add.w	r1, r4, #8
 800cd10:	f300 8298 	bgt.w	800d244 <_svfprintf_r+0xc2c>
 800cd14:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cd16:	6060      	str	r0, [r4, #4]
 800cd18:	4403      	add	r3, r0
 800cd1a:	2a07      	cmp	r2, #7
 800cd1c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cd20:	f340 82a5 	ble.w	800d26e <_svfprintf_r+0xc56>
 800cd24:	9803      	ldr	r0, [sp, #12]
 800cd26:	aa26      	add	r2, sp, #152	@ 0x98
 800cd28:	4659      	mov	r1, fp
 800cd2a:	f001 fa57 	bl	800e1dc <__ssprint_r>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f040 85ed 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800cd34:	ac29      	add	r4, sp, #164	@ 0xa4
 800cd36:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800cd3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cd3c:	b16a      	cbz	r2, 800cd5a <_svfprintf_r+0x742>
 800cd3e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800cd42:	6022      	str	r2, [r4, #0]
 800cd44:	2201      	movs	r2, #1
 800cd46:	4413      	add	r3, r2
 800cd48:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cd4a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cd4c:	6062      	str	r2, [r4, #4]
 800cd4e:	4413      	add	r3, r2
 800cd50:	2b07      	cmp	r3, #7
 800cd52:	9327      	str	r3, [sp, #156]	@ 0x9c
 800cd54:	f300 828d 	bgt.w	800d272 <_svfprintf_r+0xc5a>
 800cd58:	3408      	adds	r4, #8
 800cd5a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cd5c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cd5e:	b162      	cbz	r2, 800cd7a <_svfprintf_r+0x762>
 800cd60:	aa1f      	add	r2, sp, #124	@ 0x7c
 800cd62:	6022      	str	r2, [r4, #0]
 800cd64:	2202      	movs	r2, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cd6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cd6c:	6062      	str	r2, [r4, #4]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	2b07      	cmp	r3, #7
 800cd72:	9327      	str	r3, [sp, #156]	@ 0x9c
 800cd74:	f300 8287 	bgt.w	800d286 <_svfprintf_r+0xc6e>
 800cd78:	3408      	adds	r4, #8
 800cd7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd7c:	2b80      	cmp	r3, #128	@ 0x80
 800cd7e:	d122      	bne.n	800cdc6 <_svfprintf_r+0x7ae>
 800cd80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd82:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd84:	1a9b      	subs	r3, r3, r2
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd8a:	dd1c      	ble.n	800cdc6 <_svfprintf_r+0x7ae>
 800cd8c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cd8e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800cd92:	2810      	cmp	r0, #16
 800cd94:	487b      	ldr	r0, [pc, #492]	@ (800cf84 <_svfprintf_r+0x96c>)
 800cd96:	6020      	str	r0, [r4, #0]
 800cd98:	f102 0201 	add.w	r2, r2, #1
 800cd9c:	f104 0108 	add.w	r1, r4, #8
 800cda0:	f300 827b 	bgt.w	800d29a <_svfprintf_r+0xc82>
 800cda4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cda6:	6060      	str	r0, [r4, #4]
 800cda8:	4403      	add	r3, r0
 800cdaa:	2a07      	cmp	r2, #7
 800cdac:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cdb0:	f340 8288 	ble.w	800d2c4 <_svfprintf_r+0xcac>
 800cdb4:	9803      	ldr	r0, [sp, #12]
 800cdb6:	aa26      	add	r2, sp, #152	@ 0x98
 800cdb8:	4659      	mov	r1, fp
 800cdba:	f001 fa0f 	bl	800e1dc <__ssprint_r>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f040 85a5 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800cdc4:	ac29      	add	r4, sp, #164	@ 0xa4
 800cdc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdc8:	eba3 0308 	sub.w	r3, r3, r8
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdd0:	dd1c      	ble.n	800ce0c <_svfprintf_r+0x7f4>
 800cdd2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cdd4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800cdd8:	2810      	cmp	r0, #16
 800cdda:	486a      	ldr	r0, [pc, #424]	@ (800cf84 <_svfprintf_r+0x96c>)
 800cddc:	6020      	str	r0, [r4, #0]
 800cdde:	f102 0201 	add.w	r2, r2, #1
 800cde2:	f104 0108 	add.w	r1, r4, #8
 800cde6:	f300 826f 	bgt.w	800d2c8 <_svfprintf_r+0xcb0>
 800cdea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cdec:	6060      	str	r0, [r4, #4]
 800cdee:	4403      	add	r3, r0
 800cdf0:	2a07      	cmp	r2, #7
 800cdf2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cdf6:	f340 827c 	ble.w	800d2f2 <_svfprintf_r+0xcda>
 800cdfa:	9803      	ldr	r0, [sp, #12]
 800cdfc:	aa26      	add	r2, sp, #152	@ 0x98
 800cdfe:	4659      	mov	r1, fp
 800ce00:	f001 f9ec 	bl	800e1dc <__ssprint_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f040 8582 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800ce0a:	ac29      	add	r4, sp, #164	@ 0xa4
 800ce0c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ce0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce10:	05ea      	lsls	r2, r5, #23
 800ce12:	f100 8275 	bmi.w	800d300 <_svfprintf_r+0xce8>
 800ce16:	4443      	add	r3, r8
 800ce18:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ce1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	2b07      	cmp	r3, #7
 800ce20:	e9c4 9800 	strd	r9, r8, [r4]
 800ce24:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ce26:	f300 82b1 	bgt.w	800d38c <_svfprintf_r+0xd74>
 800ce2a:	3408      	adds	r4, #8
 800ce2c:	076a      	lsls	r2, r5, #29
 800ce2e:	f100 8550 	bmi.w	800d8d2 <_svfprintf_r+0x12ba>
 800ce32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ce36:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce38:	428a      	cmp	r2, r1
 800ce3a:	bfac      	ite	ge
 800ce3c:	189b      	addge	r3, r3, r2
 800ce3e:	185b      	addlt	r3, r3, r1
 800ce40:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce42:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ce44:	b13b      	cbz	r3, 800ce56 <_svfprintf_r+0x83e>
 800ce46:	9803      	ldr	r0, [sp, #12]
 800ce48:	aa26      	add	r2, sp, #152	@ 0x98
 800ce4a:	4659      	mov	r1, fp
 800ce4c:	f001 f9c6 	bl	800e1dc <__ssprint_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	f040 855c 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800ce56:	2300      	movs	r3, #0
 800ce58:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ce5a:	f1ba 0f00 	cmp.w	sl, #0
 800ce5e:	f040 8572 	bne.w	800d946 <_svfprintf_r+0x132e>
 800ce62:	9e07      	ldr	r6, [sp, #28]
 800ce64:	ac29      	add	r4, sp, #164	@ 0xa4
 800ce66:	e0c6      	b.n	800cff6 <_svfprintf_r+0x9de>
 800ce68:	f802 0c01 	strb.w	r0, [r2, #-1]
 800ce6c:	e6ac      	b.n	800cbc8 <_svfprintf_r+0x5b0>
 800ce6e:	f803 0b01 	strb.w	r0, [r3], #1
 800ce72:	e676      	b.n	800cb62 <_svfprintf_r+0x54a>
 800ce74:	9b08      	ldr	r3, [sp, #32]
 800ce76:	2b46      	cmp	r3, #70	@ 0x46
 800ce78:	d005      	beq.n	800ce86 <_svfprintf_r+0x86e>
 800ce7a:	2b45      	cmp	r3, #69	@ 0x45
 800ce7c:	d11a      	bne.n	800ceb4 <_svfprintf_r+0x89c>
 800ce7e:	f108 0601 	add.w	r6, r8, #1
 800ce82:	2102      	movs	r1, #2
 800ce84:	e001      	b.n	800ce8a <_svfprintf_r+0x872>
 800ce86:	4646      	mov	r6, r8
 800ce88:	2103      	movs	r1, #3
 800ce8a:	ab24      	add	r3, sp, #144	@ 0x90
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	ab21      	add	r3, sp, #132	@ 0x84
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800ce96:	ab20      	add	r3, sp, #128	@ 0x80
 800ce98:	9803      	ldr	r0, [sp, #12]
 800ce9a:	4632      	mov	r2, r6
 800ce9c:	f7fc ff80 	bl	8009da0 <_dtoa_r>
 800cea0:	9b08      	ldr	r3, [sp, #32]
 800cea2:	2b47      	cmp	r3, #71	@ 0x47
 800cea4:	4681      	mov	r9, r0
 800cea6:	d119      	bne.n	800cedc <_svfprintf_r+0x8c4>
 800cea8:	07e8      	lsls	r0, r5, #31
 800ceaa:	d405      	bmi.n	800ceb8 <_svfprintf_r+0x8a0>
 800ceac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ceae:	eba3 0309 	sub.w	r3, r3, r9
 800ceb2:	e69b      	b.n	800cbec <_svfprintf_r+0x5d4>
 800ceb4:	4646      	mov	r6, r8
 800ceb6:	e7e4      	b.n	800ce82 <_svfprintf_r+0x86a>
 800ceb8:	eb09 0706 	add.w	r7, r9, r6
 800cebc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800cec0:	2200      	movs	r2, #0
 800cec2:	2300      	movs	r3, #0
 800cec4:	f7f3 fe28 	bl	8000b18 <__aeabi_dcmpeq>
 800cec8:	b100      	cbz	r0, 800cecc <_svfprintf_r+0x8b4>
 800ceca:	9724      	str	r7, [sp, #144]	@ 0x90
 800cecc:	2230      	movs	r2, #48	@ 0x30
 800cece:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ced0:	429f      	cmp	r7, r3
 800ced2:	d9eb      	bls.n	800ceac <_svfprintf_r+0x894>
 800ced4:	1c59      	adds	r1, r3, #1
 800ced6:	9124      	str	r1, [sp, #144]	@ 0x90
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	e7f8      	b.n	800cece <_svfprintf_r+0x8b6>
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	2b46      	cmp	r3, #70	@ 0x46
 800cee0:	eb00 0706 	add.w	r7, r0, r6
 800cee4:	d1ea      	bne.n	800cebc <_svfprintf_r+0x8a4>
 800cee6:	7803      	ldrb	r3, [r0, #0]
 800cee8:	2b30      	cmp	r3, #48	@ 0x30
 800ceea:	d109      	bne.n	800cf00 <_svfprintf_r+0x8e8>
 800ceec:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800cef0:	2200      	movs	r2, #0
 800cef2:	2300      	movs	r3, #0
 800cef4:	f7f3 fe10 	bl	8000b18 <__aeabi_dcmpeq>
 800cef8:	b910      	cbnz	r0, 800cf00 <_svfprintf_r+0x8e8>
 800cefa:	f1c6 0601 	rsb	r6, r6, #1
 800cefe:	9620      	str	r6, [sp, #128]	@ 0x80
 800cf00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf02:	441f      	add	r7, r3
 800cf04:	e7da      	b.n	800cebc <_svfprintf_r+0x8a4>
 800cf06:	9b08      	ldr	r3, [sp, #32]
 800cf08:	2b46      	cmp	r3, #70	@ 0x46
 800cf0a:	f47f ae7d 	bne.w	800cc08 <_svfprintf_r+0x5f0>
 800cf0e:	f005 0301 	and.w	r3, r5, #1
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	ea43 0308 	orr.w	r3, r3, r8
 800cf18:	dd25      	ble.n	800cf66 <_svfprintf_r+0x94e>
 800cf1a:	b37b      	cbz	r3, 800cf7c <_svfprintf_r+0x964>
 800cf1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf1e:	18f3      	adds	r3, r6, r3
 800cf20:	4498      	add	r8, r3
 800cf22:	2366      	movs	r3, #102	@ 0x66
 800cf24:	9306      	str	r3, [sp, #24]
 800cf26:	e033      	b.n	800cf90 <_svfprintf_r+0x978>
 800cf28:	f813 7b01 	ldrb.w	r7, [r3], #1
 800cf2c:	f806 7f01 	strb.w	r7, [r6, #1]!
 800cf30:	e6a1      	b.n	800cc76 <_svfprintf_r+0x65e>
 800cf32:	b941      	cbnz	r1, 800cf46 <_svfprintf_r+0x92e>
 800cf34:	2230      	movs	r2, #48	@ 0x30
 800cf36:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800cf3a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800cf3e:	3330      	adds	r3, #48	@ 0x30
 800cf40:	f802 3b01 	strb.w	r3, [r2], #1
 800cf44:	e6a3      	b.n	800cc8e <_svfprintf_r+0x676>
 800cf46:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800cf4a:	e7f8      	b.n	800cf3e <_svfprintf_r+0x926>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	429e      	cmp	r6, r3
 800cf50:	da0d      	bge.n	800cf6e <_svfprintf_r+0x956>
 800cf52:	9b04      	ldr	r3, [sp, #16]
 800cf54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	eb03 0802 	add.w	r8, r3, r2
 800cf5c:	dc0c      	bgt.n	800cf78 <_svfprintf_r+0x960>
 800cf5e:	f1c6 0301 	rsb	r3, r6, #1
 800cf62:	4498      	add	r8, r3
 800cf64:	e008      	b.n	800cf78 <_svfprintf_r+0x960>
 800cf66:	b17b      	cbz	r3, 800cf88 <_svfprintf_r+0x970>
 800cf68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	e7d8      	b.n	800cf20 <_svfprintf_r+0x908>
 800cf6e:	07eb      	lsls	r3, r5, #31
 800cf70:	d521      	bpl.n	800cfb6 <_svfprintf_r+0x99e>
 800cf72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf74:	eb06 0803 	add.w	r8, r6, r3
 800cf78:	2367      	movs	r3, #103	@ 0x67
 800cf7a:	e7d3      	b.n	800cf24 <_svfprintf_r+0x90c>
 800cf7c:	46b0      	mov	r8, r6
 800cf7e:	e7d0      	b.n	800cf22 <_svfprintf_r+0x90a>
 800cf80:	0800e819 	.word	0x0800e819
 800cf84:	0800e809 	.word	0x0800e809
 800cf88:	2366      	movs	r3, #102	@ 0x66
 800cf8a:	9306      	str	r3, [sp, #24]
 800cf8c:	f04f 0801 	mov.w	r8, #1
 800cf90:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800cf94:	9308      	str	r3, [sp, #32]
 800cf96:	d01f      	beq.n	800cfd8 <_svfprintf_r+0x9c0>
 800cf98:	2700      	movs	r7, #0
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	9708      	str	r7, [sp, #32]
 800cf9e:	f77f ae8a 	ble.w	800ccb6 <_svfprintf_r+0x69e>
 800cfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2bff      	cmp	r3, #255	@ 0xff
 800cfa8:	d107      	bne.n	800cfba <_svfprintf_r+0x9a2>
 800cfaa:	9b08      	ldr	r3, [sp, #32]
 800cfac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cfae:	443b      	add	r3, r7
 800cfb0:	fb02 8803 	mla	r8, r2, r3, r8
 800cfb4:	e67f      	b.n	800ccb6 <_svfprintf_r+0x69e>
 800cfb6:	46b0      	mov	r8, r6
 800cfb8:	e7de      	b.n	800cf78 <_svfprintf_r+0x960>
 800cfba:	42b3      	cmp	r3, r6
 800cfbc:	daf5      	bge.n	800cfaa <_svfprintf_r+0x992>
 800cfbe:	1af6      	subs	r6, r6, r3
 800cfc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfc2:	785b      	ldrb	r3, [r3, #1]
 800cfc4:	b133      	cbz	r3, 800cfd4 <_svfprintf_r+0x9bc>
 800cfc6:	9b08      	ldr	r3, [sp, #32]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	9308      	str	r3, [sp, #32]
 800cfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfce:	3301      	adds	r3, #1
 800cfd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd2:	e7e6      	b.n	800cfa2 <_svfprintf_r+0x98a>
 800cfd4:	3701      	adds	r7, #1
 800cfd6:	e7e4      	b.n	800cfa2 <_svfprintf_r+0x98a>
 800cfd8:	9f08      	ldr	r7, [sp, #32]
 800cfda:	e66c      	b.n	800ccb6 <_svfprintf_r+0x69e>
 800cfdc:	232d      	movs	r3, #45	@ 0x2d
 800cfde:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800cfe2:	e66c      	b.n	800ccbe <_svfprintf_r+0x6a6>
 800cfe4:	06af      	lsls	r7, r5, #26
 800cfe6:	d50a      	bpl.n	800cffe <_svfprintf_r+0x9e6>
 800cfe8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cfea:	6833      	ldr	r3, [r6, #0]
 800cfec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cfee:	17d2      	asrs	r2, r2, #31
 800cff0:	e9c3 1200 	strd	r1, r2, [r3]
 800cff4:	3604      	adds	r6, #4
 800cff6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800cffa:	f7ff bb46 	b.w	800c68a <_svfprintf_r+0x72>
 800cffe:	06e8      	lsls	r0, r5, #27
 800d000:	d503      	bpl.n	800d00a <_svfprintf_r+0x9f2>
 800d002:	6833      	ldr	r3, [r6, #0]
 800d004:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	e7f4      	b.n	800cff4 <_svfprintf_r+0x9dc>
 800d00a:	0669      	lsls	r1, r5, #25
 800d00c:	d503      	bpl.n	800d016 <_svfprintf_r+0x9fe>
 800d00e:	6833      	ldr	r3, [r6, #0]
 800d010:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d012:	801a      	strh	r2, [r3, #0]
 800d014:	e7ee      	b.n	800cff4 <_svfprintf_r+0x9dc>
 800d016:	05aa      	lsls	r2, r5, #22
 800d018:	d5f3      	bpl.n	800d002 <_svfprintf_r+0x9ea>
 800d01a:	6833      	ldr	r3, [r6, #0]
 800d01c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d01e:	701a      	strb	r2, [r3, #0]
 800d020:	e7e8      	b.n	800cff4 <_svfprintf_r+0x9dc>
 800d022:	f045 0510 	orr.w	r5, r5, #16
 800d026:	f015 0320 	ands.w	r3, r5, #32
 800d02a:	d020      	beq.n	800d06e <_svfprintf_r+0xa56>
 800d02c:	3607      	adds	r6, #7
 800d02e:	f026 0307 	bic.w	r3, r6, #7
 800d032:	461a      	mov	r2, r3
 800d034:	685f      	ldr	r7, [r3, #4]
 800d036:	f852 6b08 	ldr.w	r6, [r2], #8
 800d03a:	9207      	str	r2, [sp, #28]
 800d03c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800d040:	2300      	movs	r3, #0
 800d042:	2200      	movs	r2, #0
 800d044:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800d048:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d04c:	f000 848c 	beq.w	800d968 <_svfprintf_r+0x1350>
 800d050:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800d054:	9208      	str	r2, [sp, #32]
 800d056:	ea56 0207 	orrs.w	r2, r6, r7
 800d05a:	f040 848a 	bne.w	800d972 <_svfprintf_r+0x135a>
 800d05e:	f1b8 0f00 	cmp.w	r8, #0
 800d062:	f000 80db 	beq.w	800d21c <_svfprintf_r+0xc04>
 800d066:	2b01      	cmp	r3, #1
 800d068:	f040 8486 	bne.w	800d978 <_svfprintf_r+0x1360>
 800d06c:	e083      	b.n	800d176 <_svfprintf_r+0xb5e>
 800d06e:	4632      	mov	r2, r6
 800d070:	f015 0710 	ands.w	r7, r5, #16
 800d074:	f852 6b04 	ldr.w	r6, [r2], #4
 800d078:	9207      	str	r2, [sp, #28]
 800d07a:	d001      	beq.n	800d080 <_svfprintf_r+0xa68>
 800d07c:	461f      	mov	r7, r3
 800d07e:	e7dd      	b.n	800d03c <_svfprintf_r+0xa24>
 800d080:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800d084:	d001      	beq.n	800d08a <_svfprintf_r+0xa72>
 800d086:	b2b6      	uxth	r6, r6
 800d088:	e7d8      	b.n	800d03c <_svfprintf_r+0xa24>
 800d08a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800d08e:	d0d5      	beq.n	800d03c <_svfprintf_r+0xa24>
 800d090:	b2f6      	uxtb	r6, r6
 800d092:	e7f3      	b.n	800d07c <_svfprintf_r+0xa64>
 800d094:	4633      	mov	r3, r6
 800d096:	2278      	movs	r2, #120	@ 0x78
 800d098:	f853 6b04 	ldr.w	r6, [r3], #4
 800d09c:	9307      	str	r3, [sp, #28]
 800d09e:	f647 0330 	movw	r3, #30768	@ 0x7830
 800d0a2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800d0a6:	4b94      	ldr	r3, [pc, #592]	@ (800d2f8 <_svfprintf_r+0xce0>)
 800d0a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0aa:	2700      	movs	r7, #0
 800d0ac:	f045 0502 	orr.w	r5, r5, #2
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	9206      	str	r2, [sp, #24]
 800d0b4:	e7c5      	b.n	800d042 <_svfprintf_r+0xa2a>
 800d0b6:	4633      	mov	r3, r6
 800d0b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d0bc:	f853 9b04 	ldr.w	r9, [r3], #4
 800d0c0:	9307      	str	r3, [sp, #28]
 800d0c2:	f04f 0600 	mov.w	r6, #0
 800d0c6:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800d0ca:	d00f      	beq.n	800d0ec <_svfprintf_r+0xad4>
 800d0cc:	4642      	mov	r2, r8
 800d0ce:	4631      	mov	r1, r6
 800d0d0:	4648      	mov	r0, r9
 800d0d2:	f7f3 f8ad 	bl	8000230 <memchr>
 800d0d6:	4682      	mov	sl, r0
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	f43f ac81 	beq.w	800c9e0 <_svfprintf_r+0x3c8>
 800d0de:	eba0 0809 	sub.w	r8, r0, r9
 800d0e2:	46b2      	mov	sl, r6
 800d0e4:	9610      	str	r6, [sp, #64]	@ 0x40
 800d0e6:	4637      	mov	r7, r6
 800d0e8:	9608      	str	r6, [sp, #32]
 800d0ea:	e5eb      	b.n	800ccc4 <_svfprintf_r+0x6ac>
 800d0ec:	4648      	mov	r0, r9
 800d0ee:	f7f3 f897 	bl	8000220 <strlen>
 800d0f2:	46b2      	mov	sl, r6
 800d0f4:	4680      	mov	r8, r0
 800d0f6:	e473      	b.n	800c9e0 <_svfprintf_r+0x3c8>
 800d0f8:	f045 0510 	orr.w	r5, r5, #16
 800d0fc:	f015 0320 	ands.w	r3, r5, #32
 800d100:	d009      	beq.n	800d116 <_svfprintf_r+0xafe>
 800d102:	3607      	adds	r6, #7
 800d104:	f026 0307 	bic.w	r3, r6, #7
 800d108:	461a      	mov	r2, r3
 800d10a:	685f      	ldr	r7, [r3, #4]
 800d10c:	f852 6b08 	ldr.w	r6, [r2], #8
 800d110:	9207      	str	r2, [sp, #28]
 800d112:	2301      	movs	r3, #1
 800d114:	e795      	b.n	800d042 <_svfprintf_r+0xa2a>
 800d116:	4632      	mov	r2, r6
 800d118:	f015 0710 	ands.w	r7, r5, #16
 800d11c:	f852 6b04 	ldr.w	r6, [r2], #4
 800d120:	9207      	str	r2, [sp, #28]
 800d122:	d001      	beq.n	800d128 <_svfprintf_r+0xb10>
 800d124:	461f      	mov	r7, r3
 800d126:	e7f4      	b.n	800d112 <_svfprintf_r+0xafa>
 800d128:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800d12c:	d001      	beq.n	800d132 <_svfprintf_r+0xb1a>
 800d12e:	b2b6      	uxth	r6, r6
 800d130:	e7ef      	b.n	800d112 <_svfprintf_r+0xafa>
 800d132:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800d136:	d0ec      	beq.n	800d112 <_svfprintf_r+0xafa>
 800d138:	b2f6      	uxtb	r6, r6
 800d13a:	e7f3      	b.n	800d124 <_svfprintf_r+0xb0c>
 800d13c:	4b6f      	ldr	r3, [pc, #444]	@ (800d2fc <_svfprintf_r+0xce4>)
 800d13e:	f7ff bb39 	b.w	800c7b4 <_svfprintf_r+0x19c>
 800d142:	4632      	mov	r2, r6
 800d144:	f015 0710 	ands.w	r7, r5, #16
 800d148:	f852 6b04 	ldr.w	r6, [r2], #4
 800d14c:	9207      	str	r2, [sp, #28]
 800d14e:	d002      	beq.n	800d156 <_svfprintf_r+0xb3e>
 800d150:	461f      	mov	r7, r3
 800d152:	f7ff bb3c 	b.w	800c7ce <_svfprintf_r+0x1b6>
 800d156:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800d15a:	d002      	beq.n	800d162 <_svfprintf_r+0xb4a>
 800d15c:	b2b6      	uxth	r6, r6
 800d15e:	f7ff bb36 	b.w	800c7ce <_svfprintf_r+0x1b6>
 800d162:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800d166:	f43f ab32 	beq.w	800c7ce <_svfprintf_r+0x1b6>
 800d16a:	b2f6      	uxtb	r6, r6
 800d16c:	e7f0      	b.n	800d150 <_svfprintf_r+0xb38>
 800d16e:	2e0a      	cmp	r6, #10
 800d170:	f177 0300 	sbcs.w	r3, r7, #0
 800d174:	d207      	bcs.n	800d186 <_svfprintf_r+0xb6e>
 800d176:	3630      	adds	r6, #48	@ 0x30
 800d178:	b2f6      	uxtb	r6, r6
 800d17a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800d17e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800d182:	f000 bc15 	b.w	800d9b0 <_svfprintf_r+0x1398>
 800d186:	2300      	movs	r3, #0
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d190:	ad52      	add	r5, sp, #328	@ 0x148
 800d192:	9310      	str	r3, [sp, #64]	@ 0x40
 800d194:	220a      	movs	r2, #10
 800d196:	2300      	movs	r3, #0
 800d198:	4630      	mov	r0, r6
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 fd9c 	bl	8000cd8 <__aeabi_uldivmod>
 800d1a0:	9b04      	ldr	r3, [sp, #16]
 800d1a2:	9011      	str	r0, [sp, #68]	@ 0x44
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	9304      	str	r3, [sp, #16]
 800d1a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1aa:	3230      	adds	r2, #48	@ 0x30
 800d1ac:	468a      	mov	sl, r1
 800d1ae:	f105 39ff 	add.w	r9, r5, #4294967295
 800d1b2:	f805 2c01 	strb.w	r2, [r5, #-1]
 800d1b6:	b1d3      	cbz	r3, 800d1ee <_svfprintf_r+0xbd6>
 800d1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ba:	9a04      	ldr	r2, [sp, #16]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d115      	bne.n	800d1ee <_svfprintf_r+0xbd6>
 800d1c2:	2aff      	cmp	r2, #255	@ 0xff
 800d1c4:	d013      	beq.n	800d1ee <_svfprintf_r+0xbd6>
 800d1c6:	2e0a      	cmp	r6, #10
 800d1c8:	f177 0300 	sbcs.w	r3, r7, #0
 800d1cc:	d30f      	bcc.n	800d1ee <_svfprintf_r+0xbd6>
 800d1ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1d0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d1d2:	eba9 0903 	sub.w	r9, r9, r3
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4648      	mov	r0, r9
 800d1da:	f7fc fc79 	bl	8009ad0 <strncpy>
 800d1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1e0:	785b      	ldrb	r3, [r3, #1]
 800d1e2:	b11b      	cbz	r3, 800d1ec <_svfprintf_r+0xbd4>
 800d1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	2e0a      	cmp	r6, #10
 800d1f0:	f177 0700 	sbcs.w	r7, r7, #0
 800d1f4:	f0c0 83dc 	bcc.w	800d9b0 <_svfprintf_r+0x1398>
 800d1f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d1fa:	4657      	mov	r7, sl
 800d1fc:	464d      	mov	r5, r9
 800d1fe:	e7c9      	b.n	800d194 <_svfprintf_r+0xb7c>
 800d200:	f006 030f 	and.w	r3, r6, #15
 800d204:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d206:	0936      	lsrs	r6, r6, #4
 800d208:	5cd3      	ldrb	r3, [r2, r3]
 800d20a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d20e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800d212:	093f      	lsrs	r7, r7, #4
 800d214:	ea56 0307 	orrs.w	r3, r6, r7
 800d218:	d1f2      	bne.n	800d200 <_svfprintf_r+0xbe8>
 800d21a:	e3c9      	b.n	800d9b0 <_svfprintf_r+0x1398>
 800d21c:	b91b      	cbnz	r3, 800d226 <_svfprintf_r+0xc0e>
 800d21e:	07e9      	lsls	r1, r5, #31
 800d220:	d501      	bpl.n	800d226 <_svfprintf_r+0xc0e>
 800d222:	2630      	movs	r6, #48	@ 0x30
 800d224:	e7a9      	b.n	800d17a <_svfprintf_r+0xb62>
 800d226:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800d22a:	e3c1      	b.n	800d9b0 <_svfprintf_r+0x1398>
 800d22c:	9b06      	ldr	r3, [sp, #24]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 838f 	beq.w	800d952 <_svfprintf_r+0x133a>
 800d234:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800d238:	2300      	movs	r3, #0
 800d23a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800d23e:	9607      	str	r6, [sp, #28]
 800d240:	f7ff bb63 	b.w	800c90a <_svfprintf_r+0x2f2>
 800d244:	2010      	movs	r0, #16
 800d246:	4403      	add	r3, r0
 800d248:	2a07      	cmp	r2, #7
 800d24a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d24e:	6060      	str	r0, [r4, #4]
 800d250:	dd08      	ble.n	800d264 <_svfprintf_r+0xc4c>
 800d252:	9803      	ldr	r0, [sp, #12]
 800d254:	aa26      	add	r2, sp, #152	@ 0x98
 800d256:	4659      	mov	r1, fp
 800d258:	f000 ffc0 	bl	800e1dc <__ssprint_r>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	f040 8356 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d262:	a929      	add	r1, sp, #164	@ 0xa4
 800d264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d266:	3b10      	subs	r3, #16
 800d268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d26a:	460c      	mov	r4, r1
 800d26c:	e546      	b.n	800ccfc <_svfprintf_r+0x6e4>
 800d26e:	460c      	mov	r4, r1
 800d270:	e561      	b.n	800cd36 <_svfprintf_r+0x71e>
 800d272:	9803      	ldr	r0, [sp, #12]
 800d274:	aa26      	add	r2, sp, #152	@ 0x98
 800d276:	4659      	mov	r1, fp
 800d278:	f000 ffb0 	bl	800e1dc <__ssprint_r>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f040 8346 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d282:	ac29      	add	r4, sp, #164	@ 0xa4
 800d284:	e569      	b.n	800cd5a <_svfprintf_r+0x742>
 800d286:	9803      	ldr	r0, [sp, #12]
 800d288:	aa26      	add	r2, sp, #152	@ 0x98
 800d28a:	4659      	mov	r1, fp
 800d28c:	f000 ffa6 	bl	800e1dc <__ssprint_r>
 800d290:	2800      	cmp	r0, #0
 800d292:	f040 833c 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d296:	ac29      	add	r4, sp, #164	@ 0xa4
 800d298:	e56f      	b.n	800cd7a <_svfprintf_r+0x762>
 800d29a:	2010      	movs	r0, #16
 800d29c:	4403      	add	r3, r0
 800d29e:	2a07      	cmp	r2, #7
 800d2a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d2a4:	6060      	str	r0, [r4, #4]
 800d2a6:	dd08      	ble.n	800d2ba <_svfprintf_r+0xca2>
 800d2a8:	9803      	ldr	r0, [sp, #12]
 800d2aa:	aa26      	add	r2, sp, #152	@ 0x98
 800d2ac:	4659      	mov	r1, fp
 800d2ae:	f000 ff95 	bl	800e1dc <__ssprint_r>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	f040 832b 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d2b8:	a929      	add	r1, sp, #164	@ 0xa4
 800d2ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2bc:	3b10      	subs	r3, #16
 800d2be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	e563      	b.n	800cd8c <_svfprintf_r+0x774>
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	e57e      	b.n	800cdc6 <_svfprintf_r+0x7ae>
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	4403      	add	r3, r0
 800d2cc:	2a07      	cmp	r2, #7
 800d2ce:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d2d2:	6060      	str	r0, [r4, #4]
 800d2d4:	dd08      	ble.n	800d2e8 <_svfprintf_r+0xcd0>
 800d2d6:	9803      	ldr	r0, [sp, #12]
 800d2d8:	aa26      	add	r2, sp, #152	@ 0x98
 800d2da:	4659      	mov	r1, fp
 800d2dc:	f000 ff7e 	bl	800e1dc <__ssprint_r>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	f040 8314 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d2e6:	a929      	add	r1, sp, #164	@ 0xa4
 800d2e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2ea:	3b10      	subs	r3, #16
 800d2ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	e56f      	b.n	800cdd2 <_svfprintf_r+0x7ba>
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	e58a      	b.n	800ce0c <_svfprintf_r+0x7f4>
 800d2f6:	bf00      	nop
 800d2f8:	0800e450 	.word	0x0800e450
 800d2fc:	0800e461 	.word	0x0800e461
 800d300:	9b06      	ldr	r3, [sp, #24]
 800d302:	2b65      	cmp	r3, #101	@ 0x65
 800d304:	f340 8246 	ble.w	800d794 <_svfprintf_r+0x117c>
 800d308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d30c:	2200      	movs	r2, #0
 800d30e:	2300      	movs	r3, #0
 800d310:	f7f3 fc02 	bl	8000b18 <__aeabi_dcmpeq>
 800d314:	2800      	cmp	r0, #0
 800d316:	d06a      	beq.n	800d3ee <_svfprintf_r+0xdd6>
 800d318:	4b73      	ldr	r3, [pc, #460]	@ (800d4e8 <_svfprintf_r+0xed0>)
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	2301      	movs	r3, #1
 800d31e:	6063      	str	r3, [r4, #4]
 800d320:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d322:	3301      	adds	r3, #1
 800d324:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d326:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d328:	3301      	adds	r3, #1
 800d32a:	2b07      	cmp	r3, #7
 800d32c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d32e:	dc37      	bgt.n	800d3a0 <_svfprintf_r+0xd88>
 800d330:	3408      	adds	r4, #8
 800d332:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d334:	9a04      	ldr	r2, [sp, #16]
 800d336:	4293      	cmp	r3, r2
 800d338:	db02      	blt.n	800d340 <_svfprintf_r+0xd28>
 800d33a:	07ef      	lsls	r7, r5, #31
 800d33c:	f57f ad76 	bpl.w	800ce2c <_svfprintf_r+0x814>
 800d340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d342:	6023      	str	r3, [r4, #0]
 800d344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d346:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d348:	6063      	str	r3, [r4, #4]
 800d34a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d34c:	4413      	add	r3, r2
 800d34e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d350:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d352:	3301      	adds	r3, #1
 800d354:	2b07      	cmp	r3, #7
 800d356:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d358:	dc2c      	bgt.n	800d3b4 <_svfprintf_r+0xd9c>
 800d35a:	3408      	adds	r4, #8
 800d35c:	9b04      	ldr	r3, [sp, #16]
 800d35e:	1e5e      	subs	r6, r3, #1
 800d360:	2e00      	cmp	r6, #0
 800d362:	f77f ad63 	ble.w	800ce2c <_svfprintf_r+0x814>
 800d366:	4f61      	ldr	r7, [pc, #388]	@ (800d4ec <_svfprintf_r+0xed4>)
 800d368:	f04f 0810 	mov.w	r8, #16
 800d36c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d370:	2e10      	cmp	r6, #16
 800d372:	f103 0301 	add.w	r3, r3, #1
 800d376:	f104 0108 	add.w	r1, r4, #8
 800d37a:	6027      	str	r7, [r4, #0]
 800d37c:	dc24      	bgt.n	800d3c8 <_svfprintf_r+0xdb0>
 800d37e:	6066      	str	r6, [r4, #4]
 800d380:	2b07      	cmp	r3, #7
 800d382:	4416      	add	r6, r2
 800d384:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800d388:	f340 82a0 	ble.w	800d8cc <_svfprintf_r+0x12b4>
 800d38c:	9803      	ldr	r0, [sp, #12]
 800d38e:	aa26      	add	r2, sp, #152	@ 0x98
 800d390:	4659      	mov	r1, fp
 800d392:	f000 ff23 	bl	800e1dc <__ssprint_r>
 800d396:	2800      	cmp	r0, #0
 800d398:	f040 82b9 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d39c:	ac29      	add	r4, sp, #164	@ 0xa4
 800d39e:	e545      	b.n	800ce2c <_svfprintf_r+0x814>
 800d3a0:	9803      	ldr	r0, [sp, #12]
 800d3a2:	aa26      	add	r2, sp, #152	@ 0x98
 800d3a4:	4659      	mov	r1, fp
 800d3a6:	f000 ff19 	bl	800e1dc <__ssprint_r>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	f040 82af 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d3b0:	ac29      	add	r4, sp, #164	@ 0xa4
 800d3b2:	e7be      	b.n	800d332 <_svfprintf_r+0xd1a>
 800d3b4:	9803      	ldr	r0, [sp, #12]
 800d3b6:	aa26      	add	r2, sp, #152	@ 0x98
 800d3b8:	4659      	mov	r1, fp
 800d3ba:	f000 ff0f 	bl	800e1dc <__ssprint_r>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f040 82a5 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d3c4:	ac29      	add	r4, sp, #164	@ 0xa4
 800d3c6:	e7c9      	b.n	800d35c <_svfprintf_r+0xd44>
 800d3c8:	3210      	adds	r2, #16
 800d3ca:	2b07      	cmp	r3, #7
 800d3cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d3d0:	f8c4 8004 	str.w	r8, [r4, #4]
 800d3d4:	dd08      	ble.n	800d3e8 <_svfprintf_r+0xdd0>
 800d3d6:	9803      	ldr	r0, [sp, #12]
 800d3d8:	aa26      	add	r2, sp, #152	@ 0x98
 800d3da:	4659      	mov	r1, fp
 800d3dc:	f000 fefe 	bl	800e1dc <__ssprint_r>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f040 8294 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d3e6:	a929      	add	r1, sp, #164	@ 0xa4
 800d3e8:	3e10      	subs	r6, #16
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	e7be      	b.n	800d36c <_svfprintf_r+0xd54>
 800d3ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	dc7d      	bgt.n	800d4f0 <_svfprintf_r+0xed8>
 800d3f4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4e8 <_svfprintf_r+0xed0>)
 800d3f6:	6023      	str	r3, [r4, #0]
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	6063      	str	r3, [r4, #4]
 800d3fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3fe:	3301      	adds	r3, #1
 800d400:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d402:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d404:	3301      	adds	r3, #1
 800d406:	2b07      	cmp	r3, #7
 800d408:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d40a:	dc46      	bgt.n	800d49a <_svfprintf_r+0xe82>
 800d40c:	3408      	adds	r4, #8
 800d40e:	9904      	ldr	r1, [sp, #16]
 800d410:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d412:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800d414:	430b      	orrs	r3, r1
 800d416:	f005 0101 	and.w	r1, r5, #1
 800d41a:	430b      	orrs	r3, r1
 800d41c:	f43f ad06 	beq.w	800ce2c <_svfprintf_r+0x814>
 800d420:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d422:	6023      	str	r3, [r4, #0]
 800d424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d426:	6063      	str	r3, [r4, #4]
 800d428:	441a      	add	r2, r3
 800d42a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d42c:	9228      	str	r2, [sp, #160]	@ 0xa0
 800d42e:	3301      	adds	r3, #1
 800d430:	2b07      	cmp	r3, #7
 800d432:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d434:	dc3b      	bgt.n	800d4ae <_svfprintf_r+0xe96>
 800d436:	f104 0308 	add.w	r3, r4, #8
 800d43a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d43c:	2e00      	cmp	r6, #0
 800d43e:	da1b      	bge.n	800d478 <_svfprintf_r+0xe60>
 800d440:	4f2a      	ldr	r7, [pc, #168]	@ (800d4ec <_svfprintf_r+0xed4>)
 800d442:	4276      	negs	r6, r6
 800d444:	461a      	mov	r2, r3
 800d446:	2410      	movs	r4, #16
 800d448:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800d44c:	2e10      	cmp	r6, #16
 800d44e:	f101 0101 	add.w	r1, r1, #1
 800d452:	f103 0308 	add.w	r3, r3, #8
 800d456:	6017      	str	r7, [r2, #0]
 800d458:	dc33      	bgt.n	800d4c2 <_svfprintf_r+0xeaa>
 800d45a:	6056      	str	r6, [r2, #4]
 800d45c:	2907      	cmp	r1, #7
 800d45e:	4406      	add	r6, r0
 800d460:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800d464:	dd08      	ble.n	800d478 <_svfprintf_r+0xe60>
 800d466:	9803      	ldr	r0, [sp, #12]
 800d468:	aa26      	add	r2, sp, #152	@ 0x98
 800d46a:	4659      	mov	r1, fp
 800d46c:	f000 feb6 	bl	800e1dc <__ssprint_r>
 800d470:	2800      	cmp	r0, #0
 800d472:	f040 824c 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d476:	ab29      	add	r3, sp, #164	@ 0xa4
 800d478:	9a04      	ldr	r2, [sp, #16]
 800d47a:	9904      	ldr	r1, [sp, #16]
 800d47c:	605a      	str	r2, [r3, #4]
 800d47e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800d480:	f8c3 9000 	str.w	r9, [r3]
 800d484:	440a      	add	r2, r1
 800d486:	9228      	str	r2, [sp, #160]	@ 0xa0
 800d488:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800d48a:	3201      	adds	r2, #1
 800d48c:	2a07      	cmp	r2, #7
 800d48e:	9227      	str	r2, [sp, #156]	@ 0x9c
 800d490:	f73f af7c 	bgt.w	800d38c <_svfprintf_r+0xd74>
 800d494:	f103 0408 	add.w	r4, r3, #8
 800d498:	e4c8      	b.n	800ce2c <_svfprintf_r+0x814>
 800d49a:	9803      	ldr	r0, [sp, #12]
 800d49c:	aa26      	add	r2, sp, #152	@ 0x98
 800d49e:	4659      	mov	r1, fp
 800d4a0:	f000 fe9c 	bl	800e1dc <__ssprint_r>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	f040 8232 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d4aa:	ac29      	add	r4, sp, #164	@ 0xa4
 800d4ac:	e7af      	b.n	800d40e <_svfprintf_r+0xdf6>
 800d4ae:	9803      	ldr	r0, [sp, #12]
 800d4b0:	aa26      	add	r2, sp, #152	@ 0x98
 800d4b2:	4659      	mov	r1, fp
 800d4b4:	f000 fe92 	bl	800e1dc <__ssprint_r>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	f040 8228 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d4be:	ab29      	add	r3, sp, #164	@ 0xa4
 800d4c0:	e7bb      	b.n	800d43a <_svfprintf_r+0xe22>
 800d4c2:	3010      	adds	r0, #16
 800d4c4:	2907      	cmp	r1, #7
 800d4c6:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800d4ca:	6054      	str	r4, [r2, #4]
 800d4cc:	dd08      	ble.n	800d4e0 <_svfprintf_r+0xec8>
 800d4ce:	9803      	ldr	r0, [sp, #12]
 800d4d0:	aa26      	add	r2, sp, #152	@ 0x98
 800d4d2:	4659      	mov	r1, fp
 800d4d4:	f000 fe82 	bl	800e1dc <__ssprint_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f040 8218 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d4de:	ab29      	add	r3, sp, #164	@ 0xa4
 800d4e0:	3e10      	subs	r6, #16
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	e7b0      	b.n	800d448 <_svfprintf_r+0xe30>
 800d4e6:	bf00      	nop
 800d4e8:	0800e472 	.word	0x0800e472
 800d4ec:	0800e809 	.word	0x0800e809
 800d4f0:	9b04      	ldr	r3, [sp, #16]
 800d4f2:	444b      	add	r3, r9
 800d4f4:	9306      	str	r3, [sp, #24]
 800d4f6:	9b04      	ldr	r3, [sp, #16]
 800d4f8:	42b3      	cmp	r3, r6
 800d4fa:	bfa8      	it	ge
 800d4fc:	4633      	movge	r3, r6
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	4698      	mov	r8, r3
 800d502:	dd0b      	ble.n	800d51c <_svfprintf_r+0xf04>
 800d504:	e9c4 9300 	strd	r9, r3, [r4]
 800d508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d50a:	4443      	add	r3, r8
 800d50c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d50e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d510:	3301      	adds	r3, #1
 800d512:	2b07      	cmp	r3, #7
 800d514:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d516:	f300 8089 	bgt.w	800d62c <_svfprintf_r+0x1014>
 800d51a:	3408      	adds	r4, #8
 800d51c:	4643      	mov	r3, r8
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bfac      	ite	ge
 800d522:	eba6 0808 	subge.w	r8, r6, r8
 800d526:	46b0      	movlt	r8, r6
 800d528:	f1b8 0f00 	cmp.w	r8, #0
 800d52c:	dd1b      	ble.n	800d566 <_svfprintf_r+0xf4e>
 800d52e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800d532:	4897      	ldr	r0, [pc, #604]	@ (800d790 <_svfprintf_r+0x1178>)
 800d534:	6020      	str	r0, [r4, #0]
 800d536:	f1b8 0f10 	cmp.w	r8, #16
 800d53a:	f102 0201 	add.w	r2, r2, #1
 800d53e:	f104 0108 	add.w	r1, r4, #8
 800d542:	dc7d      	bgt.n	800d640 <_svfprintf_r+0x1028>
 800d544:	4443      	add	r3, r8
 800d546:	2a07      	cmp	r2, #7
 800d548:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d54c:	f8c4 8004 	str.w	r8, [r4, #4]
 800d550:	f340 808a 	ble.w	800d668 <_svfprintf_r+0x1050>
 800d554:	9803      	ldr	r0, [sp, #12]
 800d556:	aa26      	add	r2, sp, #152	@ 0x98
 800d558:	4659      	mov	r1, fp
 800d55a:	f000 fe3f 	bl	800e1dc <__ssprint_r>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f040 81d5 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d564:	ac29      	add	r4, sp, #164	@ 0xa4
 800d566:	eb09 0806 	add.w	r8, r9, r6
 800d56a:	056e      	lsls	r6, r5, #21
 800d56c:	d508      	bpl.n	800d580 <_svfprintf_r+0xf68>
 800d56e:	9b08      	ldr	r3, [sp, #32]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d17b      	bne.n	800d66c <_svfprintf_r+0x1054>
 800d574:	2f00      	cmp	r7, #0
 800d576:	d17b      	bne.n	800d670 <_svfprintf_r+0x1058>
 800d578:	9b06      	ldr	r3, [sp, #24]
 800d57a:	4598      	cmp	r8, r3
 800d57c:	bf28      	it	cs
 800d57e:	4698      	movcs	r8, r3
 800d580:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d582:	9a04      	ldr	r2, [sp, #16]
 800d584:	4293      	cmp	r3, r2
 800d586:	db01      	blt.n	800d58c <_svfprintf_r+0xf74>
 800d588:	07e8      	lsls	r0, r5, #31
 800d58a:	d50e      	bpl.n	800d5aa <_svfprintf_r+0xf92>
 800d58c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d592:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d594:	6063      	str	r3, [r4, #4]
 800d596:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d598:	4413      	add	r3, r2
 800d59a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d59c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d59e:	3301      	adds	r3, #1
 800d5a0:	2b07      	cmp	r3, #7
 800d5a2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d5a4:	f300 80df 	bgt.w	800d766 <_svfprintf_r+0x114e>
 800d5a8:	3408      	adds	r4, #8
 800d5aa:	9b04      	ldr	r3, [sp, #16]
 800d5ac:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800d5ae:	1bdf      	subs	r7, r3, r7
 800d5b0:	9b06      	ldr	r3, [sp, #24]
 800d5b2:	eba3 0308 	sub.w	r3, r3, r8
 800d5b6:	429f      	cmp	r7, r3
 800d5b8:	bfa8      	it	ge
 800d5ba:	461f      	movge	r7, r3
 800d5bc:	2f00      	cmp	r7, #0
 800d5be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d5c0:	dd0a      	ble.n	800d5d8 <_svfprintf_r+0xfc0>
 800d5c2:	443b      	add	r3, r7
 800d5c4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d5c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	2b07      	cmp	r3, #7
 800d5cc:	e9c4 8700 	strd	r8, r7, [r4]
 800d5d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d5d2:	f300 80d2 	bgt.w	800d77a <_svfprintf_r+0x1162>
 800d5d6:	3408      	adds	r4, #8
 800d5d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d5da:	9b04      	ldr	r3, [sp, #16]
 800d5dc:	2f00      	cmp	r7, #0
 800d5de:	eba3 0606 	sub.w	r6, r3, r6
 800d5e2:	bfa8      	it	ge
 800d5e4:	1bf6      	subge	r6, r6, r7
 800d5e6:	2e00      	cmp	r6, #0
 800d5e8:	f77f ac20 	ble.w	800ce2c <_svfprintf_r+0x814>
 800d5ec:	4f68      	ldr	r7, [pc, #416]	@ (800d790 <_svfprintf_r+0x1178>)
 800d5ee:	f04f 0810 	mov.w	r8, #16
 800d5f2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d5f6:	2e10      	cmp	r6, #16
 800d5f8:	f103 0301 	add.w	r3, r3, #1
 800d5fc:	f104 0108 	add.w	r1, r4, #8
 800d600:	6027      	str	r7, [r4, #0]
 800d602:	f77f aebc 	ble.w	800d37e <_svfprintf_r+0xd66>
 800d606:	3210      	adds	r2, #16
 800d608:	2b07      	cmp	r3, #7
 800d60a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d60e:	f8c4 8004 	str.w	r8, [r4, #4]
 800d612:	dd08      	ble.n	800d626 <_svfprintf_r+0x100e>
 800d614:	9803      	ldr	r0, [sp, #12]
 800d616:	aa26      	add	r2, sp, #152	@ 0x98
 800d618:	4659      	mov	r1, fp
 800d61a:	f000 fddf 	bl	800e1dc <__ssprint_r>
 800d61e:	2800      	cmp	r0, #0
 800d620:	f040 8175 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d624:	a929      	add	r1, sp, #164	@ 0xa4
 800d626:	3e10      	subs	r6, #16
 800d628:	460c      	mov	r4, r1
 800d62a:	e7e2      	b.n	800d5f2 <_svfprintf_r+0xfda>
 800d62c:	9803      	ldr	r0, [sp, #12]
 800d62e:	aa26      	add	r2, sp, #152	@ 0x98
 800d630:	4659      	mov	r1, fp
 800d632:	f000 fdd3 	bl	800e1dc <__ssprint_r>
 800d636:	2800      	cmp	r0, #0
 800d638:	f040 8169 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d63c:	ac29      	add	r4, sp, #164	@ 0xa4
 800d63e:	e76d      	b.n	800d51c <_svfprintf_r+0xf04>
 800d640:	2010      	movs	r0, #16
 800d642:	4403      	add	r3, r0
 800d644:	2a07      	cmp	r2, #7
 800d646:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d64a:	6060      	str	r0, [r4, #4]
 800d64c:	dd08      	ble.n	800d660 <_svfprintf_r+0x1048>
 800d64e:	9803      	ldr	r0, [sp, #12]
 800d650:	aa26      	add	r2, sp, #152	@ 0x98
 800d652:	4659      	mov	r1, fp
 800d654:	f000 fdc2 	bl	800e1dc <__ssprint_r>
 800d658:	2800      	cmp	r0, #0
 800d65a:	f040 8158 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d65e:	a929      	add	r1, sp, #164	@ 0xa4
 800d660:	f1a8 0810 	sub.w	r8, r8, #16
 800d664:	460c      	mov	r4, r1
 800d666:	e762      	b.n	800d52e <_svfprintf_r+0xf16>
 800d668:	460c      	mov	r4, r1
 800d66a:	e77c      	b.n	800d566 <_svfprintf_r+0xf4e>
 800d66c:	2f00      	cmp	r7, #0
 800d66e:	d04a      	beq.n	800d706 <_svfprintf_r+0x10ee>
 800d670:	3f01      	subs	r7, #1
 800d672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d678:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d67a:	6063      	str	r3, [r4, #4]
 800d67c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d67e:	4413      	add	r3, r2
 800d680:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d682:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d684:	3301      	adds	r3, #1
 800d686:	2b07      	cmp	r3, #7
 800d688:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d68a:	dc43      	bgt.n	800d714 <_svfprintf_r+0x10fc>
 800d68c:	3408      	adds	r4, #8
 800d68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d690:	781a      	ldrb	r2, [r3, #0]
 800d692:	9b06      	ldr	r3, [sp, #24]
 800d694:	eba3 0308 	sub.w	r3, r3, r8
 800d698:	429a      	cmp	r2, r3
 800d69a:	bfa8      	it	ge
 800d69c:	461a      	movge	r2, r3
 800d69e:	2a00      	cmp	r2, #0
 800d6a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d6a2:	4691      	mov	r9, r2
 800d6a4:	dd09      	ble.n	800d6ba <_svfprintf_r+0x10a2>
 800d6a6:	4413      	add	r3, r2
 800d6a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d6aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	2b07      	cmp	r3, #7
 800d6b0:	e9c4 8200 	strd	r8, r2, [r4]
 800d6b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d6b6:	dc37      	bgt.n	800d728 <_svfprintf_r+0x1110>
 800d6b8:	3408      	adds	r4, #8
 800d6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6bc:	781e      	ldrb	r6, [r3, #0]
 800d6be:	f1b9 0f00 	cmp.w	r9, #0
 800d6c2:	bfa8      	it	ge
 800d6c4:	eba6 0609 	subge.w	r6, r6, r9
 800d6c8:	2e00      	cmp	r6, #0
 800d6ca:	dd18      	ble.n	800d6fe <_svfprintf_r+0x10e6>
 800d6cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d6d0:	482f      	ldr	r0, [pc, #188]	@ (800d790 <_svfprintf_r+0x1178>)
 800d6d2:	6020      	str	r0, [r4, #0]
 800d6d4:	2e10      	cmp	r6, #16
 800d6d6:	f103 0301 	add.w	r3, r3, #1
 800d6da:	f104 0108 	add.w	r1, r4, #8
 800d6de:	dc2d      	bgt.n	800d73c <_svfprintf_r+0x1124>
 800d6e0:	6066      	str	r6, [r4, #4]
 800d6e2:	2b07      	cmp	r3, #7
 800d6e4:	4416      	add	r6, r2
 800d6e6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800d6ea:	dd3a      	ble.n	800d762 <_svfprintf_r+0x114a>
 800d6ec:	9803      	ldr	r0, [sp, #12]
 800d6ee:	aa26      	add	r2, sp, #152	@ 0x98
 800d6f0:	4659      	mov	r1, fp
 800d6f2:	f000 fd73 	bl	800e1dc <__ssprint_r>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f040 8109 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d6fc:	ac29      	add	r4, sp, #164	@ 0xa4
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	4498      	add	r8, r3
 800d704:	e733      	b.n	800d56e <_svfprintf_r+0xf56>
 800d706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d708:	3b01      	subs	r3, #1
 800d70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d70c:	9b08      	ldr	r3, [sp, #32]
 800d70e:	3b01      	subs	r3, #1
 800d710:	9308      	str	r3, [sp, #32]
 800d712:	e7ae      	b.n	800d672 <_svfprintf_r+0x105a>
 800d714:	9803      	ldr	r0, [sp, #12]
 800d716:	aa26      	add	r2, sp, #152	@ 0x98
 800d718:	4659      	mov	r1, fp
 800d71a:	f000 fd5f 	bl	800e1dc <__ssprint_r>
 800d71e:	2800      	cmp	r0, #0
 800d720:	f040 80f5 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d724:	ac29      	add	r4, sp, #164	@ 0xa4
 800d726:	e7b2      	b.n	800d68e <_svfprintf_r+0x1076>
 800d728:	9803      	ldr	r0, [sp, #12]
 800d72a:	aa26      	add	r2, sp, #152	@ 0x98
 800d72c:	4659      	mov	r1, fp
 800d72e:	f000 fd55 	bl	800e1dc <__ssprint_r>
 800d732:	2800      	cmp	r0, #0
 800d734:	f040 80eb 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d738:	ac29      	add	r4, sp, #164	@ 0xa4
 800d73a:	e7be      	b.n	800d6ba <_svfprintf_r+0x10a2>
 800d73c:	2010      	movs	r0, #16
 800d73e:	4402      	add	r2, r0
 800d740:	2b07      	cmp	r3, #7
 800d742:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d746:	6060      	str	r0, [r4, #4]
 800d748:	dd08      	ble.n	800d75c <_svfprintf_r+0x1144>
 800d74a:	9803      	ldr	r0, [sp, #12]
 800d74c:	aa26      	add	r2, sp, #152	@ 0x98
 800d74e:	4659      	mov	r1, fp
 800d750:	f000 fd44 	bl	800e1dc <__ssprint_r>
 800d754:	2800      	cmp	r0, #0
 800d756:	f040 80da 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d75a:	a929      	add	r1, sp, #164	@ 0xa4
 800d75c:	3e10      	subs	r6, #16
 800d75e:	460c      	mov	r4, r1
 800d760:	e7b4      	b.n	800d6cc <_svfprintf_r+0x10b4>
 800d762:	460c      	mov	r4, r1
 800d764:	e7cb      	b.n	800d6fe <_svfprintf_r+0x10e6>
 800d766:	9803      	ldr	r0, [sp, #12]
 800d768:	aa26      	add	r2, sp, #152	@ 0x98
 800d76a:	4659      	mov	r1, fp
 800d76c:	f000 fd36 	bl	800e1dc <__ssprint_r>
 800d770:	2800      	cmp	r0, #0
 800d772:	f040 80cc 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d776:	ac29      	add	r4, sp, #164	@ 0xa4
 800d778:	e717      	b.n	800d5aa <_svfprintf_r+0xf92>
 800d77a:	9803      	ldr	r0, [sp, #12]
 800d77c:	aa26      	add	r2, sp, #152	@ 0x98
 800d77e:	4659      	mov	r1, fp
 800d780:	f000 fd2c 	bl	800e1dc <__ssprint_r>
 800d784:	2800      	cmp	r0, #0
 800d786:	f040 80c2 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d78a:	ac29      	add	r4, sp, #164	@ 0xa4
 800d78c:	e724      	b.n	800d5d8 <_svfprintf_r+0xfc0>
 800d78e:	bf00      	nop
 800d790:	0800e809 	.word	0x0800e809
 800d794:	9904      	ldr	r1, [sp, #16]
 800d796:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d798:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800d79a:	2901      	cmp	r1, #1
 800d79c:	f103 0301 	add.w	r3, r3, #1
 800d7a0:	f102 0201 	add.w	r2, r2, #1
 800d7a4:	f104 0608 	add.w	r6, r4, #8
 800d7a8:	dc02      	bgt.n	800d7b0 <_svfprintf_r+0x1198>
 800d7aa:	07e9      	lsls	r1, r5, #31
 800d7ac:	f140 8083 	bpl.w	800d8b6 <_svfprintf_r+0x129e>
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	2a07      	cmp	r2, #7
 800d7b4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d7b8:	f8c4 9000 	str.w	r9, [r4]
 800d7bc:	6061      	str	r1, [r4, #4]
 800d7be:	dd08      	ble.n	800d7d2 <_svfprintf_r+0x11ba>
 800d7c0:	9803      	ldr	r0, [sp, #12]
 800d7c2:	aa26      	add	r2, sp, #152	@ 0x98
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	f000 fd09 	bl	800e1dc <__ssprint_r>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	f040 809f 	bne.w	800d90e <_svfprintf_r+0x12f6>
 800d7d0:	ae29      	add	r6, sp, #164	@ 0xa4
 800d7d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d7d4:	6033      	str	r3, [r6, #0]
 800d7d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d7da:	6073      	str	r3, [r6, #4]
 800d7dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d7de:	4413      	add	r3, r2
 800d7e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d7e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	2b07      	cmp	r3, #7
 800d7e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d7ea:	dc33      	bgt.n	800d854 <_svfprintf_r+0x123c>
 800d7ec:	3608      	adds	r6, #8
 800d7ee:	9b04      	ldr	r3, [sp, #16]
 800d7f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d7f4:	1e5c      	subs	r4, r3, #1
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800d7fe:	f7f3 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 800d802:	2800      	cmp	r0, #0
 800d804:	d12f      	bne.n	800d866 <_svfprintf_r+0x124e>
 800d806:	f109 0201 	add.w	r2, r9, #1
 800d80a:	e9c6 2400 	strd	r2, r4, [r6]
 800d80e:	9a04      	ldr	r2, [sp, #16]
 800d810:	f108 0301 	add.w	r3, r8, #1
 800d814:	3f01      	subs	r7, #1
 800d816:	4417      	add	r7, r2
 800d818:	2b07      	cmp	r3, #7
 800d81a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800d81e:	dd53      	ble.n	800d8c8 <_svfprintf_r+0x12b0>
 800d820:	9803      	ldr	r0, [sp, #12]
 800d822:	aa26      	add	r2, sp, #152	@ 0x98
 800d824:	4659      	mov	r1, fp
 800d826:	f000 fcd9 	bl	800e1dc <__ssprint_r>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d16f      	bne.n	800d90e <_svfprintf_r+0x12f6>
 800d82e:	ae29      	add	r6, sp, #164	@ 0xa4
 800d830:	ab22      	add	r3, sp, #136	@ 0x88
 800d832:	6033      	str	r3, [r6, #0]
 800d834:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d836:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d838:	6073      	str	r3, [r6, #4]
 800d83a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d83c:	4413      	add	r3, r2
 800d83e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800d840:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800d842:	3301      	adds	r3, #1
 800d844:	2b07      	cmp	r3, #7
 800d846:	9327      	str	r3, [sp, #156]	@ 0x9c
 800d848:	f73f ada0 	bgt.w	800d38c <_svfprintf_r+0xd74>
 800d84c:	f106 0408 	add.w	r4, r6, #8
 800d850:	f7ff baec 	b.w	800ce2c <_svfprintf_r+0x814>
 800d854:	9803      	ldr	r0, [sp, #12]
 800d856:	aa26      	add	r2, sp, #152	@ 0x98
 800d858:	4659      	mov	r1, fp
 800d85a:	f000 fcbf 	bl	800e1dc <__ssprint_r>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d155      	bne.n	800d90e <_svfprintf_r+0x12f6>
 800d862:	ae29      	add	r6, sp, #164	@ 0xa4
 800d864:	e7c3      	b.n	800d7ee <_svfprintf_r+0x11d6>
 800d866:	9b04      	ldr	r3, [sp, #16]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	dde1      	ble.n	800d830 <_svfprintf_r+0x1218>
 800d86c:	4f57      	ldr	r7, [pc, #348]	@ (800d9cc <_svfprintf_r+0x13b4>)
 800d86e:	f04f 0810 	mov.w	r8, #16
 800d872:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d876:	2c10      	cmp	r4, #16
 800d878:	f103 0301 	add.w	r3, r3, #1
 800d87c:	f106 0108 	add.w	r1, r6, #8
 800d880:	6037      	str	r7, [r6, #0]
 800d882:	dc07      	bgt.n	800d894 <_svfprintf_r+0x127c>
 800d884:	6074      	str	r4, [r6, #4]
 800d886:	2b07      	cmp	r3, #7
 800d888:	4414      	add	r4, r2
 800d88a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800d88e:	dcc7      	bgt.n	800d820 <_svfprintf_r+0x1208>
 800d890:	460e      	mov	r6, r1
 800d892:	e7cd      	b.n	800d830 <_svfprintf_r+0x1218>
 800d894:	3210      	adds	r2, #16
 800d896:	2b07      	cmp	r3, #7
 800d898:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d89c:	f8c6 8004 	str.w	r8, [r6, #4]
 800d8a0:	dd06      	ble.n	800d8b0 <_svfprintf_r+0x1298>
 800d8a2:	9803      	ldr	r0, [sp, #12]
 800d8a4:	aa26      	add	r2, sp, #152	@ 0x98
 800d8a6:	4659      	mov	r1, fp
 800d8a8:	f000 fc98 	bl	800e1dc <__ssprint_r>
 800d8ac:	bb78      	cbnz	r0, 800d90e <_svfprintf_r+0x12f6>
 800d8ae:	a929      	add	r1, sp, #164	@ 0xa4
 800d8b0:	3c10      	subs	r4, #16
 800d8b2:	460e      	mov	r6, r1
 800d8b4:	e7dd      	b.n	800d872 <_svfprintf_r+0x125a>
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	2a07      	cmp	r2, #7
 800d8ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800d8be:	f8c4 9000 	str.w	r9, [r4]
 800d8c2:	6061      	str	r1, [r4, #4]
 800d8c4:	ddb4      	ble.n	800d830 <_svfprintf_r+0x1218>
 800d8c6:	e7ab      	b.n	800d820 <_svfprintf_r+0x1208>
 800d8c8:	3608      	adds	r6, #8
 800d8ca:	e7b1      	b.n	800d830 <_svfprintf_r+0x1218>
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	f7ff baad 	b.w	800ce2c <_svfprintf_r+0x814>
 800d8d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d8d6:	1a9d      	subs	r5, r3, r2
 800d8d8:	2d00      	cmp	r5, #0
 800d8da:	f77f aaaa 	ble.w	800ce32 <_svfprintf_r+0x81a>
 800d8de:	4e3c      	ldr	r6, [pc, #240]	@ (800d9d0 <_svfprintf_r+0x13b8>)
 800d8e0:	2710      	movs	r7, #16
 800d8e2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800d8e6:	2d10      	cmp	r5, #16
 800d8e8:	f103 0301 	add.w	r3, r3, #1
 800d8ec:	6026      	str	r6, [r4, #0]
 800d8ee:	dc18      	bgt.n	800d922 <_svfprintf_r+0x130a>
 800d8f0:	442a      	add	r2, r5
 800d8f2:	2b07      	cmp	r3, #7
 800d8f4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d8f8:	6065      	str	r5, [r4, #4]
 800d8fa:	f77f aa9a 	ble.w	800ce32 <_svfprintf_r+0x81a>
 800d8fe:	9803      	ldr	r0, [sp, #12]
 800d900:	aa26      	add	r2, sp, #152	@ 0x98
 800d902:	4659      	mov	r1, fp
 800d904:	f000 fc6a 	bl	800e1dc <__ssprint_r>
 800d908:	2800      	cmp	r0, #0
 800d90a:	f43f aa92 	beq.w	800ce32 <_svfprintf_r+0x81a>
 800d90e:	f1ba 0f00 	cmp.w	sl, #0
 800d912:	f43f a89a 	beq.w	800ca4a <_svfprintf_r+0x432>
 800d916:	9803      	ldr	r0, [sp, #12]
 800d918:	4651      	mov	r1, sl
 800d91a:	f7f8 f97b 	bl	8005c14 <_free_r>
 800d91e:	f7ff b894 	b.w	800ca4a <_svfprintf_r+0x432>
 800d922:	3210      	adds	r2, #16
 800d924:	2b07      	cmp	r3, #7
 800d926:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800d92a:	6067      	str	r7, [r4, #4]
 800d92c:	dc02      	bgt.n	800d934 <_svfprintf_r+0x131c>
 800d92e:	3408      	adds	r4, #8
 800d930:	3d10      	subs	r5, #16
 800d932:	e7d6      	b.n	800d8e2 <_svfprintf_r+0x12ca>
 800d934:	9803      	ldr	r0, [sp, #12]
 800d936:	aa26      	add	r2, sp, #152	@ 0x98
 800d938:	4659      	mov	r1, fp
 800d93a:	f000 fc4f 	bl	800e1dc <__ssprint_r>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d1e5      	bne.n	800d90e <_svfprintf_r+0x12f6>
 800d942:	ac29      	add	r4, sp, #164	@ 0xa4
 800d944:	e7f4      	b.n	800d930 <_svfprintf_r+0x1318>
 800d946:	9803      	ldr	r0, [sp, #12]
 800d948:	4651      	mov	r1, sl
 800d94a:	f7f8 f963 	bl	8005c14 <_free_r>
 800d94e:	f7ff ba88 	b.w	800ce62 <_svfprintf_r+0x84a>
 800d952:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800d954:	2b00      	cmp	r3, #0
 800d956:	f43f a878 	beq.w	800ca4a <_svfprintf_r+0x432>
 800d95a:	9803      	ldr	r0, [sp, #12]
 800d95c:	aa26      	add	r2, sp, #152	@ 0x98
 800d95e:	4659      	mov	r1, fp
 800d960:	f000 fc3c 	bl	800e1dc <__ssprint_r>
 800d964:	f7ff b871 	b.w	800ca4a <_svfprintf_r+0x432>
 800d968:	ea56 0207 	orrs.w	r2, r6, r7
 800d96c:	9508      	str	r5, [sp, #32]
 800d96e:	f43f ab7a 	beq.w	800d066 <_svfprintf_r+0xa4e>
 800d972:	2b01      	cmp	r3, #1
 800d974:	f43f abfb 	beq.w	800d16e <_svfprintf_r+0xb56>
 800d978:	2b02      	cmp	r3, #2
 800d97a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800d97e:	f43f ac3f 	beq.w	800d200 <_svfprintf_r+0xbe8>
 800d982:	f006 0307 	and.w	r3, r6, #7
 800d986:	08f6      	lsrs	r6, r6, #3
 800d988:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800d98c:	08ff      	lsrs	r7, r7, #3
 800d98e:	3330      	adds	r3, #48	@ 0x30
 800d990:	ea56 0107 	orrs.w	r1, r6, r7
 800d994:	464a      	mov	r2, r9
 800d996:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d99a:	d1f2      	bne.n	800d982 <_svfprintf_r+0x136a>
 800d99c:	9908      	ldr	r1, [sp, #32]
 800d99e:	07c8      	lsls	r0, r1, #31
 800d9a0:	d506      	bpl.n	800d9b0 <_svfprintf_r+0x1398>
 800d9a2:	2b30      	cmp	r3, #48	@ 0x30
 800d9a4:	d004      	beq.n	800d9b0 <_svfprintf_r+0x1398>
 800d9a6:	2330      	movs	r3, #48	@ 0x30
 800d9a8:	f809 3c01 	strb.w	r3, [r9, #-1]
 800d9ac:	f1a2 0902 	sub.w	r9, r2, #2
 800d9b0:	ab52      	add	r3, sp, #328	@ 0x148
 800d9b2:	9d08      	ldr	r5, [sp, #32]
 800d9b4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800d9b8:	f04f 0a00 	mov.w	sl, #0
 800d9bc:	eba3 0809 	sub.w	r8, r3, r9
 800d9c0:	4657      	mov	r7, sl
 800d9c2:	f8cd a020 	str.w	sl, [sp, #32]
 800d9c6:	4656      	mov	r6, sl
 800d9c8:	f7ff b97c 	b.w	800ccc4 <_svfprintf_r+0x6ac>
 800d9cc:	0800e809 	.word	0x0800e809
 800d9d0:	0800e819 	.word	0x0800e819

0800d9d4 <__swbuf_r>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	460e      	mov	r6, r1
 800d9d8:	4614      	mov	r4, r2
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b118      	cbz	r0, 800d9e6 <__swbuf_r+0x12>
 800d9de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d9e0:	b90b      	cbnz	r3, 800d9e6 <__swbuf_r+0x12>
 800d9e2:	f7f7 fe73 	bl	80056cc <__sinit>
 800d9e6:	69a3      	ldr	r3, [r4, #24]
 800d9e8:	60a3      	str	r3, [r4, #8]
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	0719      	lsls	r1, r3, #28
 800d9ee:	d501      	bpl.n	800d9f4 <__swbuf_r+0x20>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	b943      	cbnz	r3, 800da06 <__swbuf_r+0x32>
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f7fb ff90 	bl	800991c <__swsetup_r>
 800d9fc:	b118      	cbz	r0, 800da06 <__swbuf_r+0x32>
 800d9fe:	f04f 37ff 	mov.w	r7, #4294967295
 800da02:	4638      	mov	r0, r7
 800da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da0a:	b2f6      	uxtb	r6, r6
 800da0c:	049a      	lsls	r2, r3, #18
 800da0e:	4637      	mov	r7, r6
 800da10:	d406      	bmi.n	800da20 <__swbuf_r+0x4c>
 800da12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800da1e:	6663      	str	r3, [r4, #100]	@ 0x64
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	6922      	ldr	r2, [r4, #16]
 800da24:	1a98      	subs	r0, r3, r2
 800da26:	6963      	ldr	r3, [r4, #20]
 800da28:	4283      	cmp	r3, r0
 800da2a:	dc05      	bgt.n	800da38 <__swbuf_r+0x64>
 800da2c:	4621      	mov	r1, r4
 800da2e:	4628      	mov	r0, r5
 800da30:	f7fb fb8c 	bl	800914c <_fflush_r>
 800da34:	2800      	cmp	r0, #0
 800da36:	d1e2      	bne.n	800d9fe <__swbuf_r+0x2a>
 800da38:	68a3      	ldr	r3, [r4, #8]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	60a3      	str	r3, [r4, #8]
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	6022      	str	r2, [r4, #0]
 800da44:	701e      	strb	r6, [r3, #0]
 800da46:	6962      	ldr	r2, [r4, #20]
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d004      	beq.n	800da58 <__swbuf_r+0x84>
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	07db      	lsls	r3, r3, #31
 800da52:	d5d6      	bpl.n	800da02 <__swbuf_r+0x2e>
 800da54:	2e0a      	cmp	r6, #10
 800da56:	d1d4      	bne.n	800da02 <__swbuf_r+0x2e>
 800da58:	4621      	mov	r1, r4
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7fb fb76 	bl	800914c <_fflush_r>
 800da60:	2800      	cmp	r0, #0
 800da62:	d0ce      	beq.n	800da02 <__swbuf_r+0x2e>
 800da64:	e7cb      	b.n	800d9fe <__swbuf_r+0x2a>

0800da66 <strncmp>:
 800da66:	b510      	push	{r4, lr}
 800da68:	b16a      	cbz	r2, 800da86 <strncmp+0x20>
 800da6a:	3901      	subs	r1, #1
 800da6c:	1884      	adds	r4, r0, r2
 800da6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da76:	429a      	cmp	r2, r3
 800da78:	d103      	bne.n	800da82 <strncmp+0x1c>
 800da7a:	42a0      	cmp	r0, r4
 800da7c:	d001      	beq.n	800da82 <strncmp+0x1c>
 800da7e:	2a00      	cmp	r2, #0
 800da80:	d1f5      	bne.n	800da6e <strncmp+0x8>
 800da82:	1ad0      	subs	r0, r2, r3
 800da84:	bd10      	pop	{r4, pc}
 800da86:	4610      	mov	r0, r2
 800da88:	e7fc      	b.n	800da84 <strncmp+0x1e>
 800da8a:	0000      	movs	r0, r0
 800da8c:	0000      	movs	r0, r0
	...

0800da90 <nan>:
 800da90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da98 <nan+0x8>
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	00000000 	.word	0x00000000
 800da9c:	7ff80000 	.word	0x7ff80000

0800daa0 <__assert_func>:
 800daa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daa2:	4614      	mov	r4, r2
 800daa4:	461a      	mov	r2, r3
 800daa6:	4b09      	ldr	r3, [pc, #36]	@ (800dacc <__assert_func+0x2c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4605      	mov	r5, r0
 800daac:	68d8      	ldr	r0, [r3, #12]
 800daae:	b954      	cbnz	r4, 800dac6 <__assert_func+0x26>
 800dab0:	4b07      	ldr	r3, [pc, #28]	@ (800dad0 <__assert_func+0x30>)
 800dab2:	461c      	mov	r4, r3
 800dab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dab8:	9100      	str	r1, [sp, #0]
 800daba:	462b      	mov	r3, r5
 800dabc:	4905      	ldr	r1, [pc, #20]	@ (800dad4 <__assert_func+0x34>)
 800dabe:	f000 fb7b 	bl	800e1b8 <fiprintf>
 800dac2:	f000 fc08 	bl	800e2d6 <abort>
 800dac6:	4b04      	ldr	r3, [pc, #16]	@ (800dad8 <__assert_func+0x38>)
 800dac8:	e7f4      	b.n	800dab4 <__assert_func+0x14>
 800daca:	bf00      	nop
 800dacc:	20000428 	.word	0x20000428
 800dad0:	0800e864 	.word	0x0800e864
 800dad4:	0800e836 	.word	0x0800e836
 800dad8:	0800e829 	.word	0x0800e829

0800dadc <_calloc_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	fba1 1502 	umull	r1, r5, r1, r2
 800dae2:	b935      	cbnz	r5, 800daf2 <_calloc_r+0x16>
 800dae4:	f7f7 fb20 	bl	8005128 <_malloc_r>
 800dae8:	4604      	mov	r4, r0
 800daea:	b938      	cbnz	r0, 800dafc <_calloc_r+0x20>
 800daec:	2400      	movs	r4, #0
 800daee:	4620      	mov	r0, r4
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
 800daf2:	f7f7 ffef 	bl	8005ad4 <__errno>
 800daf6:	230c      	movs	r3, #12
 800daf8:	6003      	str	r3, [r0, #0]
 800dafa:	e7f7      	b.n	800daec <_calloc_r+0x10>
 800dafc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800db00:	f022 0203 	bic.w	r2, r2, #3
 800db04:	3a04      	subs	r2, #4
 800db06:	2a24      	cmp	r2, #36	@ 0x24
 800db08:	d819      	bhi.n	800db3e <_calloc_r+0x62>
 800db0a:	2a13      	cmp	r2, #19
 800db0c:	d915      	bls.n	800db3a <_calloc_r+0x5e>
 800db0e:	2a1b      	cmp	r2, #27
 800db10:	e9c0 5500 	strd	r5, r5, [r0]
 800db14:	d806      	bhi.n	800db24 <_calloc_r+0x48>
 800db16:	f100 0308 	add.w	r3, r0, #8
 800db1a:	2200      	movs	r2, #0
 800db1c:	e9c3 2200 	strd	r2, r2, [r3]
 800db20:	609a      	str	r2, [r3, #8]
 800db22:	e7e4      	b.n	800daee <_calloc_r+0x12>
 800db24:	2a24      	cmp	r2, #36	@ 0x24
 800db26:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800db2a:	bf11      	iteee	ne
 800db2c:	f100 0310 	addne.w	r3, r0, #16
 800db30:	6105      	streq	r5, [r0, #16]
 800db32:	f100 0318 	addeq.w	r3, r0, #24
 800db36:	6145      	streq	r5, [r0, #20]
 800db38:	e7ef      	b.n	800db1a <_calloc_r+0x3e>
 800db3a:	4603      	mov	r3, r0
 800db3c:	e7ed      	b.n	800db1a <_calloc_r+0x3e>
 800db3e:	4629      	mov	r1, r5
 800db40:	f7f7 ff69 	bl	8005a16 <memset>
 800db44:	e7d3      	b.n	800daee <_calloc_r+0x12>

0800db46 <rshift>:
 800db46:	6903      	ldr	r3, [r0, #16]
 800db48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db50:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db54:	f100 0414 	add.w	r4, r0, #20
 800db58:	dd45      	ble.n	800dbe6 <rshift+0xa0>
 800db5a:	f011 011f 	ands.w	r1, r1, #31
 800db5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db66:	d10c      	bne.n	800db82 <rshift+0x3c>
 800db68:	f100 0710 	add.w	r7, r0, #16
 800db6c:	4629      	mov	r1, r5
 800db6e:	42b1      	cmp	r1, r6
 800db70:	d334      	bcc.n	800dbdc <rshift+0x96>
 800db72:	1a9b      	subs	r3, r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	1eea      	subs	r2, r5, #3
 800db78:	4296      	cmp	r6, r2
 800db7a:	bf38      	it	cc
 800db7c:	2300      	movcc	r3, #0
 800db7e:	4423      	add	r3, r4
 800db80:	e015      	b.n	800dbae <rshift+0x68>
 800db82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db86:	f1c1 0820 	rsb	r8, r1, #32
 800db8a:	40cf      	lsrs	r7, r1
 800db8c:	f105 0e04 	add.w	lr, r5, #4
 800db90:	46a1      	mov	r9, r4
 800db92:	4576      	cmp	r6, lr
 800db94:	46f4      	mov	ip, lr
 800db96:	d815      	bhi.n	800dbc4 <rshift+0x7e>
 800db98:	1a9a      	subs	r2, r3, r2
 800db9a:	0092      	lsls	r2, r2, #2
 800db9c:	3a04      	subs	r2, #4
 800db9e:	3501      	adds	r5, #1
 800dba0:	42ae      	cmp	r6, r5
 800dba2:	bf38      	it	cc
 800dba4:	2200      	movcc	r2, #0
 800dba6:	18a3      	adds	r3, r4, r2
 800dba8:	50a7      	str	r7, [r4, r2]
 800dbaa:	b107      	cbz	r7, 800dbae <rshift+0x68>
 800dbac:	3304      	adds	r3, #4
 800dbae:	1b1a      	subs	r2, r3, r4
 800dbb0:	42a3      	cmp	r3, r4
 800dbb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dbb6:	bf08      	it	eq
 800dbb8:	2300      	moveq	r3, #0
 800dbba:	6102      	str	r2, [r0, #16]
 800dbbc:	bf08      	it	eq
 800dbbe:	6143      	streq	r3, [r0, #20]
 800dbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbc4:	f8dc c000 	ldr.w	ip, [ip]
 800dbc8:	fa0c fc08 	lsl.w	ip, ip, r8
 800dbcc:	ea4c 0707 	orr.w	r7, ip, r7
 800dbd0:	f849 7b04 	str.w	r7, [r9], #4
 800dbd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbd8:	40cf      	lsrs	r7, r1
 800dbda:	e7da      	b.n	800db92 <rshift+0x4c>
 800dbdc:	f851 cb04 	ldr.w	ip, [r1], #4
 800dbe0:	f847 cf04 	str.w	ip, [r7, #4]!
 800dbe4:	e7c3      	b.n	800db6e <rshift+0x28>
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	e7e1      	b.n	800dbae <rshift+0x68>

0800dbea <__hexdig_fun>:
 800dbea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dbee:	2b09      	cmp	r3, #9
 800dbf0:	d802      	bhi.n	800dbf8 <__hexdig_fun+0xe>
 800dbf2:	3820      	subs	r0, #32
 800dbf4:	b2c0      	uxtb	r0, r0
 800dbf6:	4770      	bx	lr
 800dbf8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dbfc:	2b05      	cmp	r3, #5
 800dbfe:	d801      	bhi.n	800dc04 <__hexdig_fun+0x1a>
 800dc00:	3847      	subs	r0, #71	@ 0x47
 800dc02:	e7f7      	b.n	800dbf4 <__hexdig_fun+0xa>
 800dc04:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dc08:	2b05      	cmp	r3, #5
 800dc0a:	d801      	bhi.n	800dc10 <__hexdig_fun+0x26>
 800dc0c:	3827      	subs	r0, #39	@ 0x27
 800dc0e:	e7f1      	b.n	800dbf4 <__hexdig_fun+0xa>
 800dc10:	2000      	movs	r0, #0
 800dc12:	4770      	bx	lr

0800dc14 <__gethex>:
 800dc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	b085      	sub	sp, #20
 800dc1a:	468a      	mov	sl, r1
 800dc1c:	9302      	str	r3, [sp, #8]
 800dc1e:	680b      	ldr	r3, [r1, #0]
 800dc20:	9001      	str	r0, [sp, #4]
 800dc22:	4690      	mov	r8, r2
 800dc24:	1c9c      	adds	r4, r3, #2
 800dc26:	46a1      	mov	r9, r4
 800dc28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dc2c:	2830      	cmp	r0, #48	@ 0x30
 800dc2e:	d0fa      	beq.n	800dc26 <__gethex+0x12>
 800dc30:	eba9 0303 	sub.w	r3, r9, r3
 800dc34:	f1a3 0b02 	sub.w	fp, r3, #2
 800dc38:	f7ff ffd7 	bl	800dbea <__hexdig_fun>
 800dc3c:	4605      	mov	r5, r0
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d168      	bne.n	800dd14 <__gethex+0x100>
 800dc42:	49a0      	ldr	r1, [pc, #640]	@ (800dec4 <__gethex+0x2b0>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	4648      	mov	r0, r9
 800dc48:	f7ff ff0d 	bl	800da66 <strncmp>
 800dc4c:	4607      	mov	r7, r0
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d167      	bne.n	800dd22 <__gethex+0x10e>
 800dc52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc56:	4626      	mov	r6, r4
 800dc58:	f7ff ffc7 	bl	800dbea <__hexdig_fun>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d062      	beq.n	800dd26 <__gethex+0x112>
 800dc60:	4623      	mov	r3, r4
 800dc62:	7818      	ldrb	r0, [r3, #0]
 800dc64:	2830      	cmp	r0, #48	@ 0x30
 800dc66:	4699      	mov	r9, r3
 800dc68:	f103 0301 	add.w	r3, r3, #1
 800dc6c:	d0f9      	beq.n	800dc62 <__gethex+0x4e>
 800dc6e:	f7ff ffbc 	bl	800dbea <__hexdig_fun>
 800dc72:	fab0 f580 	clz	r5, r0
 800dc76:	096d      	lsrs	r5, r5, #5
 800dc78:	f04f 0b01 	mov.w	fp, #1
 800dc7c:	464a      	mov	r2, r9
 800dc7e:	4616      	mov	r6, r2
 800dc80:	3201      	adds	r2, #1
 800dc82:	7830      	ldrb	r0, [r6, #0]
 800dc84:	f7ff ffb1 	bl	800dbea <__hexdig_fun>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d1f8      	bne.n	800dc7e <__gethex+0x6a>
 800dc8c:	498d      	ldr	r1, [pc, #564]	@ (800dec4 <__gethex+0x2b0>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7ff fee8 	bl	800da66 <strncmp>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d13f      	bne.n	800dd1a <__gethex+0x106>
 800dc9a:	b944      	cbnz	r4, 800dcae <__gethex+0x9a>
 800dc9c:	1c74      	adds	r4, r6, #1
 800dc9e:	4622      	mov	r2, r4
 800dca0:	4616      	mov	r6, r2
 800dca2:	3201      	adds	r2, #1
 800dca4:	7830      	ldrb	r0, [r6, #0]
 800dca6:	f7ff ffa0 	bl	800dbea <__hexdig_fun>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d1f8      	bne.n	800dca0 <__gethex+0x8c>
 800dcae:	1ba4      	subs	r4, r4, r6
 800dcb0:	00a7      	lsls	r7, r4, #2
 800dcb2:	7833      	ldrb	r3, [r6, #0]
 800dcb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dcb8:	2b50      	cmp	r3, #80	@ 0x50
 800dcba:	d13e      	bne.n	800dd3a <__gethex+0x126>
 800dcbc:	7873      	ldrb	r3, [r6, #1]
 800dcbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800dcc0:	d033      	beq.n	800dd2a <__gethex+0x116>
 800dcc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dcc4:	d034      	beq.n	800dd30 <__gethex+0x11c>
 800dcc6:	1c71      	adds	r1, r6, #1
 800dcc8:	2400      	movs	r4, #0
 800dcca:	7808      	ldrb	r0, [r1, #0]
 800dccc:	f7ff ff8d 	bl	800dbea <__hexdig_fun>
 800dcd0:	1e43      	subs	r3, r0, #1
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b18      	cmp	r3, #24
 800dcd6:	d830      	bhi.n	800dd3a <__gethex+0x126>
 800dcd8:	f1a0 0210 	sub.w	r2, r0, #16
 800dcdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dce0:	f7ff ff83 	bl	800dbea <__hexdig_fun>
 800dce4:	f100 3cff 	add.w	ip, r0, #4294967295
 800dce8:	fa5f fc8c 	uxtb.w	ip, ip
 800dcec:	f1bc 0f18 	cmp.w	ip, #24
 800dcf0:	f04f 030a 	mov.w	r3, #10
 800dcf4:	d91e      	bls.n	800dd34 <__gethex+0x120>
 800dcf6:	b104      	cbz	r4, 800dcfa <__gethex+0xe6>
 800dcf8:	4252      	negs	r2, r2
 800dcfa:	4417      	add	r7, r2
 800dcfc:	f8ca 1000 	str.w	r1, [sl]
 800dd00:	b1ed      	cbz	r5, 800dd3e <__gethex+0x12a>
 800dd02:	f1bb 0f00 	cmp.w	fp, #0
 800dd06:	bf0c      	ite	eq
 800dd08:	2506      	moveq	r5, #6
 800dd0a:	2500      	movne	r5, #0
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	b005      	add	sp, #20
 800dd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd14:	2500      	movs	r5, #0
 800dd16:	462c      	mov	r4, r5
 800dd18:	e7b0      	b.n	800dc7c <__gethex+0x68>
 800dd1a:	2c00      	cmp	r4, #0
 800dd1c:	d1c7      	bne.n	800dcae <__gethex+0x9a>
 800dd1e:	4627      	mov	r7, r4
 800dd20:	e7c7      	b.n	800dcb2 <__gethex+0x9e>
 800dd22:	464e      	mov	r6, r9
 800dd24:	462f      	mov	r7, r5
 800dd26:	2501      	movs	r5, #1
 800dd28:	e7c3      	b.n	800dcb2 <__gethex+0x9e>
 800dd2a:	2400      	movs	r4, #0
 800dd2c:	1cb1      	adds	r1, r6, #2
 800dd2e:	e7cc      	b.n	800dcca <__gethex+0xb6>
 800dd30:	2401      	movs	r4, #1
 800dd32:	e7fb      	b.n	800dd2c <__gethex+0x118>
 800dd34:	fb03 0002 	mla	r0, r3, r2, r0
 800dd38:	e7ce      	b.n	800dcd8 <__gethex+0xc4>
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	e7de      	b.n	800dcfc <__gethex+0xe8>
 800dd3e:	eba6 0309 	sub.w	r3, r6, r9
 800dd42:	3b01      	subs	r3, #1
 800dd44:	4629      	mov	r1, r5
 800dd46:	2b07      	cmp	r3, #7
 800dd48:	dc0a      	bgt.n	800dd60 <__gethex+0x14c>
 800dd4a:	9801      	ldr	r0, [sp, #4]
 800dd4c:	f7fc fde6 	bl	800a91c <_Balloc>
 800dd50:	4604      	mov	r4, r0
 800dd52:	b940      	cbnz	r0, 800dd66 <__gethex+0x152>
 800dd54:	4b5c      	ldr	r3, [pc, #368]	@ (800dec8 <__gethex+0x2b4>)
 800dd56:	4602      	mov	r2, r0
 800dd58:	21e4      	movs	r1, #228	@ 0xe4
 800dd5a:	485c      	ldr	r0, [pc, #368]	@ (800decc <__gethex+0x2b8>)
 800dd5c:	f7ff fea0 	bl	800daa0 <__assert_func>
 800dd60:	3101      	adds	r1, #1
 800dd62:	105b      	asrs	r3, r3, #1
 800dd64:	e7ef      	b.n	800dd46 <__gethex+0x132>
 800dd66:	f100 0a14 	add.w	sl, r0, #20
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	4655      	mov	r5, sl
 800dd6e:	469b      	mov	fp, r3
 800dd70:	45b1      	cmp	r9, r6
 800dd72:	d337      	bcc.n	800dde4 <__gethex+0x1d0>
 800dd74:	f845 bb04 	str.w	fp, [r5], #4
 800dd78:	eba5 050a 	sub.w	r5, r5, sl
 800dd7c:	10ad      	asrs	r5, r5, #2
 800dd7e:	6125      	str	r5, [r4, #16]
 800dd80:	4658      	mov	r0, fp
 800dd82:	f7fc fe89 	bl	800aa98 <__hi0bits>
 800dd86:	016d      	lsls	r5, r5, #5
 800dd88:	f8d8 6000 	ldr.w	r6, [r8]
 800dd8c:	1a2d      	subs	r5, r5, r0
 800dd8e:	42b5      	cmp	r5, r6
 800dd90:	dd54      	ble.n	800de3c <__gethex+0x228>
 800dd92:	1bad      	subs	r5, r5, r6
 800dd94:	4629      	mov	r1, r5
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7fd fa03 	bl	800b1a2 <__any_on>
 800dd9c:	4681      	mov	r9, r0
 800dd9e:	b178      	cbz	r0, 800ddc0 <__gethex+0x1ac>
 800dda0:	1e6b      	subs	r3, r5, #1
 800dda2:	1159      	asrs	r1, r3, #5
 800dda4:	f003 021f 	and.w	r2, r3, #31
 800dda8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ddac:	f04f 0901 	mov.w	r9, #1
 800ddb0:	fa09 f202 	lsl.w	r2, r9, r2
 800ddb4:	420a      	tst	r2, r1
 800ddb6:	d003      	beq.n	800ddc0 <__gethex+0x1ac>
 800ddb8:	454b      	cmp	r3, r9
 800ddba:	dc36      	bgt.n	800de2a <__gethex+0x216>
 800ddbc:	f04f 0902 	mov.w	r9, #2
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f7ff febf 	bl	800db46 <rshift>
 800ddc8:	442f      	add	r7, r5
 800ddca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddce:	42bb      	cmp	r3, r7
 800ddd0:	da42      	bge.n	800de58 <__gethex+0x244>
 800ddd2:	9801      	ldr	r0, [sp, #4]
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	f7fc fdc6 	bl	800a966 <_Bfree>
 800ddda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dddc:	2300      	movs	r3, #0
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	25a3      	movs	r5, #163	@ 0xa3
 800dde2:	e793      	b.n	800dd0c <__gethex+0xf8>
 800dde4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dde8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ddea:	d012      	beq.n	800de12 <__gethex+0x1fe>
 800ddec:	2b20      	cmp	r3, #32
 800ddee:	d104      	bne.n	800ddfa <__gethex+0x1e6>
 800ddf0:	f845 bb04 	str.w	fp, [r5], #4
 800ddf4:	f04f 0b00 	mov.w	fp, #0
 800ddf8:	465b      	mov	r3, fp
 800ddfa:	7830      	ldrb	r0, [r6, #0]
 800ddfc:	9303      	str	r3, [sp, #12]
 800ddfe:	f7ff fef4 	bl	800dbea <__hexdig_fun>
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	f000 000f 	and.w	r0, r0, #15
 800de08:	4098      	lsls	r0, r3
 800de0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800de0e:	3304      	adds	r3, #4
 800de10:	e7ae      	b.n	800dd70 <__gethex+0x15c>
 800de12:	45b1      	cmp	r9, r6
 800de14:	d8ea      	bhi.n	800ddec <__gethex+0x1d8>
 800de16:	492b      	ldr	r1, [pc, #172]	@ (800dec4 <__gethex+0x2b0>)
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	2201      	movs	r2, #1
 800de1c:	4630      	mov	r0, r6
 800de1e:	f7ff fe22 	bl	800da66 <strncmp>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	2800      	cmp	r0, #0
 800de26:	d1e1      	bne.n	800ddec <__gethex+0x1d8>
 800de28:	e7a2      	b.n	800dd70 <__gethex+0x15c>
 800de2a:	1ea9      	subs	r1, r5, #2
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7fd f9b8 	bl	800b1a2 <__any_on>
 800de32:	2800      	cmp	r0, #0
 800de34:	d0c2      	beq.n	800ddbc <__gethex+0x1a8>
 800de36:	f04f 0903 	mov.w	r9, #3
 800de3a:	e7c1      	b.n	800ddc0 <__gethex+0x1ac>
 800de3c:	da09      	bge.n	800de52 <__gethex+0x23e>
 800de3e:	1b75      	subs	r5, r6, r5
 800de40:	4621      	mov	r1, r4
 800de42:	9801      	ldr	r0, [sp, #4]
 800de44:	462a      	mov	r2, r5
 800de46:	f7fc ff73 	bl	800ad30 <__lshift>
 800de4a:	1b7f      	subs	r7, r7, r5
 800de4c:	4604      	mov	r4, r0
 800de4e:	f100 0a14 	add.w	sl, r0, #20
 800de52:	f04f 0900 	mov.w	r9, #0
 800de56:	e7b8      	b.n	800ddca <__gethex+0x1b6>
 800de58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de5c:	42bd      	cmp	r5, r7
 800de5e:	dd6f      	ble.n	800df40 <__gethex+0x32c>
 800de60:	1bed      	subs	r5, r5, r7
 800de62:	42ae      	cmp	r6, r5
 800de64:	dc34      	bgt.n	800ded0 <__gethex+0x2bc>
 800de66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d022      	beq.n	800deb4 <__gethex+0x2a0>
 800de6e:	2b03      	cmp	r3, #3
 800de70:	d024      	beq.n	800debc <__gethex+0x2a8>
 800de72:	2b01      	cmp	r3, #1
 800de74:	d115      	bne.n	800dea2 <__gethex+0x28e>
 800de76:	42ae      	cmp	r6, r5
 800de78:	d113      	bne.n	800dea2 <__gethex+0x28e>
 800de7a:	2e01      	cmp	r6, #1
 800de7c:	d10b      	bne.n	800de96 <__gethex+0x282>
 800de7e:	9a02      	ldr	r2, [sp, #8]
 800de80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	2301      	movs	r3, #1
 800de88:	6123      	str	r3, [r4, #16]
 800de8a:	f8ca 3000 	str.w	r3, [sl]
 800de8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de90:	2562      	movs	r5, #98	@ 0x62
 800de92:	601c      	str	r4, [r3, #0]
 800de94:	e73a      	b.n	800dd0c <__gethex+0xf8>
 800de96:	1e71      	subs	r1, r6, #1
 800de98:	4620      	mov	r0, r4
 800de9a:	f7fd f982 	bl	800b1a2 <__any_on>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d1ed      	bne.n	800de7e <__gethex+0x26a>
 800dea2:	9801      	ldr	r0, [sp, #4]
 800dea4:	4621      	mov	r1, r4
 800dea6:	f7fc fd5e 	bl	800a966 <_Bfree>
 800deaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800deac:	2300      	movs	r3, #0
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	2550      	movs	r5, #80	@ 0x50
 800deb2:	e72b      	b.n	800dd0c <__gethex+0xf8>
 800deb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1f3      	bne.n	800dea2 <__gethex+0x28e>
 800deba:	e7e0      	b.n	800de7e <__gethex+0x26a>
 800debc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1dd      	bne.n	800de7e <__gethex+0x26a>
 800dec2:	e7ee      	b.n	800dea2 <__gethex+0x28e>
 800dec4:	0800e4e4 	.word	0x0800e4e4
 800dec8:	0800e4f3 	.word	0x0800e4f3
 800decc:	0800e865 	.word	0x0800e865
 800ded0:	1e6f      	subs	r7, r5, #1
 800ded2:	f1b9 0f00 	cmp.w	r9, #0
 800ded6:	d130      	bne.n	800df3a <__gethex+0x326>
 800ded8:	b127      	cbz	r7, 800dee4 <__gethex+0x2d0>
 800deda:	4639      	mov	r1, r7
 800dedc:	4620      	mov	r0, r4
 800dede:	f7fd f960 	bl	800b1a2 <__any_on>
 800dee2:	4681      	mov	r9, r0
 800dee4:	117a      	asrs	r2, r7, #5
 800dee6:	2301      	movs	r3, #1
 800dee8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800deec:	f007 071f 	and.w	r7, r7, #31
 800def0:	40bb      	lsls	r3, r7
 800def2:	4213      	tst	r3, r2
 800def4:	4629      	mov	r1, r5
 800def6:	4620      	mov	r0, r4
 800def8:	bf18      	it	ne
 800defa:	f049 0902 	orrne.w	r9, r9, #2
 800defe:	f7ff fe22 	bl	800db46 <rshift>
 800df02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800df06:	1b76      	subs	r6, r6, r5
 800df08:	2502      	movs	r5, #2
 800df0a:	f1b9 0f00 	cmp.w	r9, #0
 800df0e:	d047      	beq.n	800dfa0 <__gethex+0x38c>
 800df10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d015      	beq.n	800df44 <__gethex+0x330>
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d017      	beq.n	800df4c <__gethex+0x338>
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d109      	bne.n	800df34 <__gethex+0x320>
 800df20:	f019 0f02 	tst.w	r9, #2
 800df24:	d006      	beq.n	800df34 <__gethex+0x320>
 800df26:	f8da 3000 	ldr.w	r3, [sl]
 800df2a:	ea49 0903 	orr.w	r9, r9, r3
 800df2e:	f019 0f01 	tst.w	r9, #1
 800df32:	d10e      	bne.n	800df52 <__gethex+0x33e>
 800df34:	f045 0510 	orr.w	r5, r5, #16
 800df38:	e032      	b.n	800dfa0 <__gethex+0x38c>
 800df3a:	f04f 0901 	mov.w	r9, #1
 800df3e:	e7d1      	b.n	800dee4 <__gethex+0x2d0>
 800df40:	2501      	movs	r5, #1
 800df42:	e7e2      	b.n	800df0a <__gethex+0x2f6>
 800df44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df46:	f1c3 0301 	rsb	r3, r3, #1
 800df4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0f0      	beq.n	800df34 <__gethex+0x320>
 800df52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df56:	f104 0314 	add.w	r3, r4, #20
 800df5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df62:	f04f 0c00 	mov.w	ip, #0
 800df66:	4618      	mov	r0, r3
 800df68:	f853 2b04 	ldr.w	r2, [r3], #4
 800df6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df70:	d01b      	beq.n	800dfaa <__gethex+0x396>
 800df72:	3201      	adds	r2, #1
 800df74:	6002      	str	r2, [r0, #0]
 800df76:	2d02      	cmp	r5, #2
 800df78:	f104 0314 	add.w	r3, r4, #20
 800df7c:	d13c      	bne.n	800dff8 <__gethex+0x3e4>
 800df7e:	f8d8 2000 	ldr.w	r2, [r8]
 800df82:	3a01      	subs	r2, #1
 800df84:	42b2      	cmp	r2, r6
 800df86:	d109      	bne.n	800df9c <__gethex+0x388>
 800df88:	1171      	asrs	r1, r6, #5
 800df8a:	2201      	movs	r2, #1
 800df8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df90:	f006 061f 	and.w	r6, r6, #31
 800df94:	fa02 f606 	lsl.w	r6, r2, r6
 800df98:	421e      	tst	r6, r3
 800df9a:	d13a      	bne.n	800e012 <__gethex+0x3fe>
 800df9c:	f045 0520 	orr.w	r5, r5, #32
 800dfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa2:	601c      	str	r4, [r3, #0]
 800dfa4:	9b02      	ldr	r3, [sp, #8]
 800dfa6:	601f      	str	r7, [r3, #0]
 800dfa8:	e6b0      	b.n	800dd0c <__gethex+0xf8>
 800dfaa:	4299      	cmp	r1, r3
 800dfac:	f843 cc04 	str.w	ip, [r3, #-4]
 800dfb0:	d8d9      	bhi.n	800df66 <__gethex+0x352>
 800dfb2:	68a3      	ldr	r3, [r4, #8]
 800dfb4:	459b      	cmp	fp, r3
 800dfb6:	db17      	blt.n	800dfe8 <__gethex+0x3d4>
 800dfb8:	6861      	ldr	r1, [r4, #4]
 800dfba:	9801      	ldr	r0, [sp, #4]
 800dfbc:	3101      	adds	r1, #1
 800dfbe:	f7fc fcad 	bl	800a91c <_Balloc>
 800dfc2:	4681      	mov	r9, r0
 800dfc4:	b918      	cbnz	r0, 800dfce <__gethex+0x3ba>
 800dfc6:	4b1a      	ldr	r3, [pc, #104]	@ (800e030 <__gethex+0x41c>)
 800dfc8:	4602      	mov	r2, r0
 800dfca:	2184      	movs	r1, #132	@ 0x84
 800dfcc:	e6c5      	b.n	800dd5a <__gethex+0x146>
 800dfce:	6922      	ldr	r2, [r4, #16]
 800dfd0:	3202      	adds	r2, #2
 800dfd2:	f104 010c 	add.w	r1, r4, #12
 800dfd6:	0092      	lsls	r2, r2, #2
 800dfd8:	300c      	adds	r0, #12
 800dfda:	f7fb fdcd 	bl	8009b78 <memcpy>
 800dfde:	4621      	mov	r1, r4
 800dfe0:	9801      	ldr	r0, [sp, #4]
 800dfe2:	f7fc fcc0 	bl	800a966 <_Bfree>
 800dfe6:	464c      	mov	r4, r9
 800dfe8:	6923      	ldr	r3, [r4, #16]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dff0:	6122      	str	r2, [r4, #16]
 800dff2:	2201      	movs	r2, #1
 800dff4:	615a      	str	r2, [r3, #20]
 800dff6:	e7be      	b.n	800df76 <__gethex+0x362>
 800dff8:	6922      	ldr	r2, [r4, #16]
 800dffa:	455a      	cmp	r2, fp
 800dffc:	dd0b      	ble.n	800e016 <__gethex+0x402>
 800dffe:	2101      	movs	r1, #1
 800e000:	4620      	mov	r0, r4
 800e002:	f7ff fda0 	bl	800db46 <rshift>
 800e006:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e00a:	3701      	adds	r7, #1
 800e00c:	42bb      	cmp	r3, r7
 800e00e:	f6ff aee0 	blt.w	800ddd2 <__gethex+0x1be>
 800e012:	2501      	movs	r5, #1
 800e014:	e7c2      	b.n	800df9c <__gethex+0x388>
 800e016:	f016 061f 	ands.w	r6, r6, #31
 800e01a:	d0fa      	beq.n	800e012 <__gethex+0x3fe>
 800e01c:	4453      	add	r3, sl
 800e01e:	f1c6 0620 	rsb	r6, r6, #32
 800e022:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e026:	f7fc fd37 	bl	800aa98 <__hi0bits>
 800e02a:	42b0      	cmp	r0, r6
 800e02c:	dbe7      	blt.n	800dffe <__gethex+0x3ea>
 800e02e:	e7f0      	b.n	800e012 <__gethex+0x3fe>
 800e030:	0800e4f3 	.word	0x0800e4f3

0800e034 <L_shift>:
 800e034:	f1c2 0208 	rsb	r2, r2, #8
 800e038:	0092      	lsls	r2, r2, #2
 800e03a:	b570      	push	{r4, r5, r6, lr}
 800e03c:	f1c2 0620 	rsb	r6, r2, #32
 800e040:	6843      	ldr	r3, [r0, #4]
 800e042:	6804      	ldr	r4, [r0, #0]
 800e044:	fa03 f506 	lsl.w	r5, r3, r6
 800e048:	432c      	orrs	r4, r5
 800e04a:	40d3      	lsrs	r3, r2
 800e04c:	6004      	str	r4, [r0, #0]
 800e04e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e052:	4288      	cmp	r0, r1
 800e054:	d3f4      	bcc.n	800e040 <L_shift+0xc>
 800e056:	bd70      	pop	{r4, r5, r6, pc}

0800e058 <__match>:
 800e058:	b530      	push	{r4, r5, lr}
 800e05a:	6803      	ldr	r3, [r0, #0]
 800e05c:	3301      	adds	r3, #1
 800e05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e062:	b914      	cbnz	r4, 800e06a <__match+0x12>
 800e064:	6003      	str	r3, [r0, #0]
 800e066:	2001      	movs	r0, #1
 800e068:	bd30      	pop	{r4, r5, pc}
 800e06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e06e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e072:	2d19      	cmp	r5, #25
 800e074:	bf98      	it	ls
 800e076:	3220      	addls	r2, #32
 800e078:	42a2      	cmp	r2, r4
 800e07a:	d0f0      	beq.n	800e05e <__match+0x6>
 800e07c:	2000      	movs	r0, #0
 800e07e:	e7f3      	b.n	800e068 <__match+0x10>

0800e080 <__hexnan>:
 800e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	680b      	ldr	r3, [r1, #0]
 800e086:	6801      	ldr	r1, [r0, #0]
 800e088:	115e      	asrs	r6, r3, #5
 800e08a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e08e:	f013 031f 	ands.w	r3, r3, #31
 800e092:	b087      	sub	sp, #28
 800e094:	bf18      	it	ne
 800e096:	3604      	addne	r6, #4
 800e098:	2500      	movs	r5, #0
 800e09a:	1f37      	subs	r7, r6, #4
 800e09c:	4682      	mov	sl, r0
 800e09e:	4690      	mov	r8, r2
 800e0a0:	9301      	str	r3, [sp, #4]
 800e0a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0a6:	46b9      	mov	r9, r7
 800e0a8:	463c      	mov	r4, r7
 800e0aa:	9502      	str	r5, [sp, #8]
 800e0ac:	46ab      	mov	fp, r5
 800e0ae:	784a      	ldrb	r2, [r1, #1]
 800e0b0:	1c4b      	adds	r3, r1, #1
 800e0b2:	9303      	str	r3, [sp, #12]
 800e0b4:	b342      	cbz	r2, 800e108 <__hexnan+0x88>
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	9105      	str	r1, [sp, #20]
 800e0ba:	9204      	str	r2, [sp, #16]
 800e0bc:	f7ff fd95 	bl	800dbea <__hexdig_fun>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d151      	bne.n	800e168 <__hexnan+0xe8>
 800e0c4:	9a04      	ldr	r2, [sp, #16]
 800e0c6:	9905      	ldr	r1, [sp, #20]
 800e0c8:	2a20      	cmp	r2, #32
 800e0ca:	d818      	bhi.n	800e0fe <__hexnan+0x7e>
 800e0cc:	9b02      	ldr	r3, [sp, #8]
 800e0ce:	459b      	cmp	fp, r3
 800e0d0:	dd13      	ble.n	800e0fa <__hexnan+0x7a>
 800e0d2:	454c      	cmp	r4, r9
 800e0d4:	d206      	bcs.n	800e0e4 <__hexnan+0x64>
 800e0d6:	2d07      	cmp	r5, #7
 800e0d8:	dc04      	bgt.n	800e0e4 <__hexnan+0x64>
 800e0da:	462a      	mov	r2, r5
 800e0dc:	4649      	mov	r1, r9
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f7ff ffa8 	bl	800e034 <L_shift>
 800e0e4:	4544      	cmp	r4, r8
 800e0e6:	d952      	bls.n	800e18e <__hexnan+0x10e>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f1a4 0904 	sub.w	r9, r4, #4
 800e0ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0f2:	f8cd b008 	str.w	fp, [sp, #8]
 800e0f6:	464c      	mov	r4, r9
 800e0f8:	461d      	mov	r5, r3
 800e0fa:	9903      	ldr	r1, [sp, #12]
 800e0fc:	e7d7      	b.n	800e0ae <__hexnan+0x2e>
 800e0fe:	2a29      	cmp	r2, #41	@ 0x29
 800e100:	d157      	bne.n	800e1b2 <__hexnan+0x132>
 800e102:	3102      	adds	r1, #2
 800e104:	f8ca 1000 	str.w	r1, [sl]
 800e108:	f1bb 0f00 	cmp.w	fp, #0
 800e10c:	d051      	beq.n	800e1b2 <__hexnan+0x132>
 800e10e:	454c      	cmp	r4, r9
 800e110:	d206      	bcs.n	800e120 <__hexnan+0xa0>
 800e112:	2d07      	cmp	r5, #7
 800e114:	dc04      	bgt.n	800e120 <__hexnan+0xa0>
 800e116:	462a      	mov	r2, r5
 800e118:	4649      	mov	r1, r9
 800e11a:	4620      	mov	r0, r4
 800e11c:	f7ff ff8a 	bl	800e034 <L_shift>
 800e120:	4544      	cmp	r4, r8
 800e122:	d936      	bls.n	800e192 <__hexnan+0x112>
 800e124:	f1a8 0204 	sub.w	r2, r8, #4
 800e128:	4623      	mov	r3, r4
 800e12a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e12e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e132:	429f      	cmp	r7, r3
 800e134:	d2f9      	bcs.n	800e12a <__hexnan+0xaa>
 800e136:	1b3b      	subs	r3, r7, r4
 800e138:	f023 0303 	bic.w	r3, r3, #3
 800e13c:	3304      	adds	r3, #4
 800e13e:	3401      	adds	r4, #1
 800e140:	3e03      	subs	r6, #3
 800e142:	42b4      	cmp	r4, r6
 800e144:	bf88      	it	hi
 800e146:	2304      	movhi	r3, #4
 800e148:	4443      	add	r3, r8
 800e14a:	2200      	movs	r2, #0
 800e14c:	f843 2b04 	str.w	r2, [r3], #4
 800e150:	429f      	cmp	r7, r3
 800e152:	d2fb      	bcs.n	800e14c <__hexnan+0xcc>
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	b91b      	cbnz	r3, 800e160 <__hexnan+0xe0>
 800e158:	4547      	cmp	r7, r8
 800e15a:	d128      	bne.n	800e1ae <__hexnan+0x12e>
 800e15c:	2301      	movs	r3, #1
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	2005      	movs	r0, #5
 800e162:	b007      	add	sp, #28
 800e164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e168:	3501      	adds	r5, #1
 800e16a:	2d08      	cmp	r5, #8
 800e16c:	f10b 0b01 	add.w	fp, fp, #1
 800e170:	dd06      	ble.n	800e180 <__hexnan+0x100>
 800e172:	4544      	cmp	r4, r8
 800e174:	d9c1      	bls.n	800e0fa <__hexnan+0x7a>
 800e176:	2300      	movs	r3, #0
 800e178:	f844 3c04 	str.w	r3, [r4, #-4]
 800e17c:	2501      	movs	r5, #1
 800e17e:	3c04      	subs	r4, #4
 800e180:	6822      	ldr	r2, [r4, #0]
 800e182:	f000 000f 	and.w	r0, r0, #15
 800e186:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e18a:	6020      	str	r0, [r4, #0]
 800e18c:	e7b5      	b.n	800e0fa <__hexnan+0x7a>
 800e18e:	2508      	movs	r5, #8
 800e190:	e7b3      	b.n	800e0fa <__hexnan+0x7a>
 800e192:	9b01      	ldr	r3, [sp, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0dd      	beq.n	800e154 <__hexnan+0xd4>
 800e198:	f1c3 0320 	rsb	r3, r3, #32
 800e19c:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a0:	40da      	lsrs	r2, r3
 800e1a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e1ac:	e7d2      	b.n	800e154 <__hexnan+0xd4>
 800e1ae:	3f04      	subs	r7, #4
 800e1b0:	e7d0      	b.n	800e154 <__hexnan+0xd4>
 800e1b2:	2004      	movs	r0, #4
 800e1b4:	e7d5      	b.n	800e162 <__hexnan+0xe2>
	...

0800e1b8 <fiprintf>:
 800e1b8:	b40e      	push	{r1, r2, r3}
 800e1ba:	b503      	push	{r0, r1, lr}
 800e1bc:	4601      	mov	r1, r0
 800e1be:	ab03      	add	r3, sp, #12
 800e1c0:	4805      	ldr	r0, [pc, #20]	@ (800e1d8 <fiprintf+0x20>)
 800e1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c6:	6800      	ldr	r0, [r0, #0]
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	f7f9 f883 	bl	80072d4 <_vfiprintf_r>
 800e1ce:	b002      	add	sp, #8
 800e1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1d4:	b003      	add	sp, #12
 800e1d6:	4770      	bx	lr
 800e1d8:	20000428 	.word	0x20000428

0800e1dc <__ssprint_r>:
 800e1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e0:	6893      	ldr	r3, [r2, #8]
 800e1e2:	f8d2 b000 	ldr.w	fp, [r2]
 800e1e6:	9001      	str	r0, [sp, #4]
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	4617      	mov	r7, r2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d157      	bne.n	800e2a0 <__ssprint_r+0xc4>
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]
 800e1f6:	b003      	add	sp, #12
 800e1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fc:	e9db a800 	ldrd	sl, r8, [fp]
 800e200:	f10b 0b08 	add.w	fp, fp, #8
 800e204:	68a6      	ldr	r6, [r4, #8]
 800e206:	6820      	ldr	r0, [r4, #0]
 800e208:	f1b8 0f00 	cmp.w	r8, #0
 800e20c:	d0f6      	beq.n	800e1fc <__ssprint_r+0x20>
 800e20e:	45b0      	cmp	r8, r6
 800e210:	d32e      	bcc.n	800e270 <__ssprint_r+0x94>
 800e212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e216:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e21a:	d029      	beq.n	800e270 <__ssprint_r+0x94>
 800e21c:	6921      	ldr	r1, [r4, #16]
 800e21e:	6965      	ldr	r5, [r4, #20]
 800e220:	eba0 0901 	sub.w	r9, r0, r1
 800e224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e22c:	f109 0001 	add.w	r0, r9, #1
 800e230:	106d      	asrs	r5, r5, #1
 800e232:	4440      	add	r0, r8
 800e234:	4285      	cmp	r5, r0
 800e236:	bf38      	it	cc
 800e238:	4605      	movcc	r5, r0
 800e23a:	0553      	lsls	r3, r2, #21
 800e23c:	d534      	bpl.n	800e2a8 <__ssprint_r+0xcc>
 800e23e:	9801      	ldr	r0, [sp, #4]
 800e240:	4629      	mov	r1, r5
 800e242:	f7f6 ff71 	bl	8005128 <_malloc_r>
 800e246:	4606      	mov	r6, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	d038      	beq.n	800e2be <__ssprint_r+0xe2>
 800e24c:	464a      	mov	r2, r9
 800e24e:	6921      	ldr	r1, [r4, #16]
 800e250:	f7fb fc92 	bl	8009b78 <memcpy>
 800e254:	89a2      	ldrh	r2, [r4, #12]
 800e256:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800e25a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e25e:	81a2      	strh	r2, [r4, #12]
 800e260:	6126      	str	r6, [r4, #16]
 800e262:	6165      	str	r5, [r4, #20]
 800e264:	444e      	add	r6, r9
 800e266:	eba5 0509 	sub.w	r5, r5, r9
 800e26a:	6026      	str	r6, [r4, #0]
 800e26c:	60a5      	str	r5, [r4, #8]
 800e26e:	4646      	mov	r6, r8
 800e270:	4546      	cmp	r6, r8
 800e272:	bf28      	it	cs
 800e274:	4646      	movcs	r6, r8
 800e276:	4632      	mov	r2, r6
 800e278:	4651      	mov	r1, sl
 800e27a:	6820      	ldr	r0, [r4, #0]
 800e27c:	f7fb fc0e 	bl	8009a9c <memmove>
 800e280:	68a2      	ldr	r2, [r4, #8]
 800e282:	1b92      	subs	r2, r2, r6
 800e284:	60a2      	str	r2, [r4, #8]
 800e286:	6822      	ldr	r2, [r4, #0]
 800e288:	4432      	add	r2, r6
 800e28a:	6022      	str	r2, [r4, #0]
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	eba2 0308 	sub.w	r3, r2, r8
 800e292:	44c2      	add	sl, r8
 800e294:	60bb      	str	r3, [r7, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d0aa      	beq.n	800e1f0 <__ssprint_r+0x14>
 800e29a:	f04f 0800 	mov.w	r8, #0
 800e29e:	e7b1      	b.n	800e204 <__ssprint_r+0x28>
 800e2a0:	f04f 0a00 	mov.w	sl, #0
 800e2a4:	46d0      	mov	r8, sl
 800e2a6:	e7ad      	b.n	800e204 <__ssprint_r+0x28>
 800e2a8:	9801      	ldr	r0, [sp, #4]
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	f7fc ffa2 	bl	800b1f4 <_realloc_r>
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d1d4      	bne.n	800e260 <__ssprint_r+0x84>
 800e2b6:	6921      	ldr	r1, [r4, #16]
 800e2b8:	9801      	ldr	r0, [sp, #4]
 800e2ba:	f7f7 fcab 	bl	8005c14 <_free_r>
 800e2be:	9a01      	ldr	r2, [sp, #4]
 800e2c0:	230c      	movs	r3, #12
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ca:	81a3      	strh	r3, [r4, #12]
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	60bb      	str	r3, [r7, #8]
 800e2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d4:	e78d      	b.n	800e1f2 <__ssprint_r+0x16>

0800e2d6 <abort>:
 800e2d6:	b508      	push	{r3, lr}
 800e2d8:	2006      	movs	r0, #6
 800e2da:	f000 f82d 	bl	800e338 <raise>
 800e2de:	2001      	movs	r0, #1
 800e2e0:	f7f3 fa97 	bl	8001812 <_exit>

0800e2e4 <_raise_r>:
 800e2e4:	291f      	cmp	r1, #31
 800e2e6:	b538      	push	{r3, r4, r5, lr}
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	d904      	bls.n	800e2f8 <_raise_r+0x14>
 800e2ee:	2316      	movs	r3, #22
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800e2fc:	b112      	cbz	r2, 800e304 <_raise_r+0x20>
 800e2fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e302:	b94b      	cbnz	r3, 800e318 <_raise_r+0x34>
 800e304:	4628      	mov	r0, r5
 800e306:	f000 f831 	bl	800e36c <_getpid_r>
 800e30a:	4622      	mov	r2, r4
 800e30c:	4601      	mov	r1, r0
 800e30e:	4628      	mov	r0, r5
 800e310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e314:	f000 b818 	b.w	800e348 <_kill_r>
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d00a      	beq.n	800e332 <_raise_r+0x4e>
 800e31c:	1c59      	adds	r1, r3, #1
 800e31e:	d103      	bne.n	800e328 <_raise_r+0x44>
 800e320:	2316      	movs	r3, #22
 800e322:	6003      	str	r3, [r0, #0]
 800e324:	2001      	movs	r0, #1
 800e326:	e7e6      	b.n	800e2f6 <_raise_r+0x12>
 800e328:	2100      	movs	r1, #0
 800e32a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e32e:	4620      	mov	r0, r4
 800e330:	4798      	blx	r3
 800e332:	2000      	movs	r0, #0
 800e334:	e7df      	b.n	800e2f6 <_raise_r+0x12>
	...

0800e338 <raise>:
 800e338:	4b02      	ldr	r3, [pc, #8]	@ (800e344 <raise+0xc>)
 800e33a:	4601      	mov	r1, r0
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	f7ff bfd1 	b.w	800e2e4 <_raise_r>
 800e342:	bf00      	nop
 800e344:	20000428 	.word	0x20000428

0800e348 <_kill_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d07      	ldr	r5, [pc, #28]	@ (800e368 <_kill_r+0x20>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	4611      	mov	r1, r2
 800e354:	602b      	str	r3, [r5, #0]
 800e356:	f7f3 fa4c 	bl	80017f2 <_kill>
 800e35a:	1c43      	adds	r3, r0, #1
 800e35c:	d102      	bne.n	800e364 <_kill_r+0x1c>
 800e35e:	682b      	ldr	r3, [r5, #0]
 800e360:	b103      	cbz	r3, 800e364 <_kill_r+0x1c>
 800e362:	6023      	str	r3, [r4, #0]
 800e364:	bd38      	pop	{r3, r4, r5, pc}
 800e366:	bf00      	nop
 800e368:	20000980 	.word	0x20000980

0800e36c <_getpid_r>:
 800e36c:	f7f3 ba39 	b.w	80017e2 <_getpid>

0800e370 <_init>:
 800e370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e372:	bf00      	nop
 800e374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e376:	bc08      	pop	{r3}
 800e378:	469e      	mov	lr, r3
 800e37a:	4770      	bx	lr

0800e37c <_fini>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	bf00      	nop
 800e380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e382:	bc08      	pop	{r3}
 800e384:	469e      	mov	lr, r3
 800e386:	4770      	bx	lr
