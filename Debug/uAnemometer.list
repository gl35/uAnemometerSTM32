
uAnemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013040  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08013220  08013220  00014220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013900  08013900  000156d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013900  08013900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013908  08013908  000156d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013908  08013908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013910  08013910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006d0  20000000  08013914  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002854  200006d0  08013fe4  000156d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f24  08013fe4  00015f24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000156d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4d8  00000000  00000000  00015700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003902  00000000  00000000  00033bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  000374e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014be  00000000  00000000  00038f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022aa8  00000000  00000000  0003a42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002080c  00000000  00000000  0005ced6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e35e5  00000000  00000000  0007d6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009008  00000000  00000000  00160d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00169d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006d0 	.word	0x200006d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013208 	.word	0x08013208

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006d4 	.word	0x200006d4
 800021c:	08013208 	.word	0x08013208

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f023 030f 	bic.w	r3, r3, #15
 8001044:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f043 030c 	orr.w	r3, r3, #12
 8001052:	b2db      	uxtb	r3, r3
 8001054:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	b2db      	uxtb	r3, r3
 800105e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	f043 030c 	orr.w	r3, r3, #12
 8001066:	b2db      	uxtb	r3, r3
 8001068:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	b2db      	uxtb	r3, r3
 8001072:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001074:	f107 0208 	add.w	r2, r7, #8
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2304      	movs	r3, #4
 800107e:	214e      	movs	r1, #78	@ 0x4e
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <lcd_send_cmd+0x5c>)
 8001082:	f004 fe41 	bl	8005d08 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000082c 	.word	0x2000082c

08001094 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f023 030f 	bic.w	r3, r3, #15
 80010a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	f043 030d 	orr.w	r3, r3, #13
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	f043 0309 	orr.w	r3, r3, #9
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	f043 030d 	orr.w	r3, r3, #13
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	f043 0309 	orr.w	r3, r3, #9
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2304      	movs	r3, #4
 80010de:	214e      	movs	r1, #78	@ 0x4e
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <lcd_send_data+0x5c>)
 80010e2:	f004 fe11 	bl	8005d08 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000082c 	.word	0x2000082c

080010f4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    switch (row)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <lcd_put_cur+0x18>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d005      	beq.n	8001116 <lcd_put_cur+0x22>
 800110a:	e009      	b.n	8001120 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001112:	603b      	str	r3, [r7, #0]
            break;
 8001114:	e004      	b.n	8001120 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800111c:	603b      	str	r3, [r7, #0]
            break;
 800111e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff85 	bl	8001034 <lcd_send_cmd>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <lcd_init>:


void lcd_init (void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001136:	2032      	movs	r0, #50	@ 0x32
 8001138:	f001 fd46 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800113c:	2030      	movs	r0, #48	@ 0x30
 800113e:	f7ff ff79 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001142:	2005      	movs	r0, #5
 8001144:	f001 fd40 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001148:	2030      	movs	r0, #48	@ 0x30
 800114a:	f7ff ff73 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800114e:	2001      	movs	r0, #1
 8001150:	f001 fd3a 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001154:	2030      	movs	r0, #48	@ 0x30
 8001156:	f7ff ff6d 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f001 fd34 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001160:	2020      	movs	r0, #32
 8001162:	f7ff ff67 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f001 fd2e 	bl	8002bc8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800116c:	2028      	movs	r0, #40	@ 0x28
 800116e:	f7ff ff61 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f001 fd28 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001178:	2008      	movs	r0, #8
 800117a:	f7ff ff5b 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f001 fd22 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff ff55 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f001 fd1c 	bl	8002bc8 <HAL_Delay>
	HAL_Delay(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f001 fd19 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001196:	2006      	movs	r0, #6
 8001198:	f7ff ff4c 	bl	8001034 <lcd_send_cmd>
	HAL_Delay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f001 fd13 	bl	8002bc8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80011a2:	200c      	movs	r0, #12
 80011a4:	f7ff ff46 	bl	8001034 <lcd_send_cmd>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011b4:	e006      	b.n	80011c4 <lcd_send_string+0x18>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff68 	bl	8001094 <lcd_send_data>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f4      	bne.n	80011b6 <lcd_send_string+0xa>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <blinkLED>:
/*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //pin 6 are for rising edges
}*/

void blinkLED ()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <blinkLED+0x1c>)
 80011e2:	f004 fcdb 	bl	8005b9c <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80011e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ea:	f001 fced 	bl	8002bc8 <HAL_Delay>
	return;
 80011ee:	bf00      	nop
}
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	48000400 	.word	0x48000400

080011f8 <scanInp>:

// using putchar and getchar
char *scanInp(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	char *ch_buf = malloc (sizeof (char) * 1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f009 f920 	bl	800a444 <malloc>
 8001204:	4603      	mov	r3, r0
 8001206:	607b      	str	r3, [r7, #4]
	scanf("%1s", ch_buf);
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4804      	ldr	r0, [pc, #16]	@ (800121c <scanInp+0x24>)
 800120c:	f009 fc80 	bl	800ab10 <scanf>
	//printf("you have entered %s\n\r", ch_buf);   //no longer need to print what have entered
	return ch_buf;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08013220 	.word	0x08013220

08001220 <__io_putchar>:
	  return;
}*/

//put char prototype for printf function
PUTCHAR_PROTOTYPE
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);  //use dma to speed it up
 8001228:	1d39      	adds	r1, r7, #4
 800122a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800122e:	2201      	movs	r2, #1
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <__io_putchar+0x20>)
 8001232:	f008 f9c3 	bl	80095bc <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
  return ch;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000a84 	.word	0x20000a84

08001244 <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

GETCHAR_PROTOTYPE
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <__io_getchar+0x34>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2208      	movs	r2, #8
 8001254:	621a      	str	r2, [r3, #32]
  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 100);
 8001256:	1df9      	adds	r1, r7, #7
 8001258:	2364      	movs	r3, #100	@ 0x64
 800125a:	2201      	movs	r2, #1
 800125c:	4806      	ldr	r0, [pc, #24]	@ (8001278 <__io_getchar+0x34>)
 800125e:	f008 fa3b 	bl	80096d8 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8001262:	1df9      	adds	r1, r7, #7
 8001264:	2364      	movs	r3, #100	@ 0x64
 8001266:	2201      	movs	r2, #1
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <__io_getchar+0x34>)
 800126a:	f008 f9a7 	bl	80095bc <HAL_UART_Transmit>
//  HAL_UART_Receive_DMA(&huart2, &ch, 1);
//  HAL_UART_Transmit_DMA(&huart2, &ch, 1);

  return ch;
 800126e:	79fb      	ldrb	r3, [r7, #7]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000a84 	.word	0x20000a84
 800127c:	00000000 	.word	0x00000000

08001280 <HAL_TIM_IC_CaptureCallback>:
		}
	}
}
*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	//if the interrupt is triggered by 1st Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7f1b      	ldrb	r3, [r3, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d102      	bne.n	8001296 <HAL_TIM_IC_CaptureCallback+0x16>
	{
		riseCaptured = 1;
 8001290:	4b8f      	ldr	r3, [pc, #572]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
	}
	//if the interrupt is triggered by 2nd Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7f1b      	ldrb	r3, [r3, #28]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d102      	bne.n	80012a4 <HAL_TIM_IC_CaptureCallback+0x24>
	{
		fallCaptured = 1;
 800129e:	4b8d      	ldr	r3, [pc, #564]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
	}

	if ((riseCaptured) && (fallCaptured))
 80012a4:	4b8a      	ldr	r3, [pc, #552]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 81f4 	beq.w	8001696 <HAL_TIM_IC_CaptureCallback+0x416>
 80012ae:	4b89      	ldr	r3, [pc, #548]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 81ef 	beq.w	8001696 <HAL_TIM_IC_CaptureCallback+0x416>
	{
		// calculate the reference clock
		//float refClock = TIMCLOCK/(PSCALAR+1);
		int indxr = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int indxf = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
		int countr = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
		int countrf = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]

		float riseavg = 0;
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
		float rfavg = 0;
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
		float deltaT_real = 0;
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
		/* In case of high Frequencies, the DMA sometimes captures 0's in the beginning.
		 * increment the index until some useful data shows up
		*/
		while (riseData[indxr] == 0) indxr++;
 80012da:	e002      	b.n	80012e2 <HAL_TIM_IC_CaptureCallback+0x62>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	3301      	adds	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012e2:	4a7d      	ldr	r2, [pc, #500]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f6      	beq.n	80012dc <HAL_TIM_IC_CaptureCallback+0x5c>

		/* Again at very high frequencies, sometimes the values don't change
		* So we will wait for the update among the values
		 */
		while ( (MIN( (riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]) ) ) == 0) indxr++;
 80012ee:	e002      	b.n	80012f6 <HAL_TIM_IC_CaptureCallback+0x76>
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	3301      	adds	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	3302      	adds	r3, #2
 80012fa:	4a77      	ldr	r2, [pc, #476]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	3301      	adds	r3, #1
 8001304:	4974      	ldr	r1, [pc, #464]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800130a:	1ad2      	subs	r2, r2, r3
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	3301      	adds	r3, #1
 8001310:	4971      	ldr	r1, [pc, #452]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001312:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001316:	4870      	ldr	r0, [pc, #448]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800131e:	1acb      	subs	r3, r1, r3
 8001320:	4293      	cmp	r3, r2
 8001322:	bf28      	it	cs
 8001324:	4613      	movcs	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0e2      	beq.n	80012f0 <HAL_TIM_IC_CaptureCallback+0x70>
		/* riseavg is the difference in the 2 consecutive rise Time */

		/* Assign a start value to riseavg */
		riseavg += MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]));
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	4a6a      	ldr	r2, [pc, #424]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001334:	4968      	ldr	r1, [pc, #416]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800133c:	1ad2      	subs	r2, r2, r3
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	3302      	adds	r3, #2
 8001342:	4965      	ldr	r1, [pc, #404]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001344:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	3301      	adds	r3, #1
 800134c:	4862      	ldr	r0, [pc, #392]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800134e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001352:	1acb      	subs	r3, r1, r3
 8001354:	429a      	cmp	r2, r3
 8001356:	d20e      	bcs.n	8001376 <HAL_TIM_IC_CaptureCallback+0xf6>
 8001358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135a:	3301      	adds	r3, #1
 800135c:	4a5e      	ldr	r2, [pc, #376]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800135e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001362:	495d      	ldr	r1, [pc, #372]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	e00e      	b.n	8001394 <HAL_TIM_IC_CaptureCallback+0x114>
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	3302      	adds	r3, #2
 800137a:	4a57      	ldr	r2, [pc, #348]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800137c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	3301      	adds	r3, #1
 8001384:	4954      	ldr	r1, [pc, #336]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	ed97 7a05 	vldr	s14, [r7, #20]
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr++;
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	3301      	adds	r3, #1
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
		countr++;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
		/* start adding the values to the riseavg */
		while (indxr < (numval))
 80013ac:	e03f      	b.n	800142e <HAL_TIM_IC_CaptureCallback+0x1ae>
		{
			riseavg += MIN((riseData[indxr+1]-riseData[indxr]), riseavg/countr);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a49      	ldr	r2, [pc, #292]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b8:	4947      	ldr	r1, [pc, #284]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013d4:	ed97 6a05 	vldr	s12, [r7, #20]
 80013d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	d50e      	bpl.n	8001404 <HAL_TIM_IC_CaptureCallback+0x184>
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a3b      	ldr	r2, [pc, #236]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f0:	4939      	ldr	r1, [pc, #228]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001402:	e008      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0x196>
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a05 	vldr	s14, [r7, #20]
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a05 	vstr	s15, [r7, #20]
			countr++;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
			indxr++;
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	3301      	adds	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
		while (indxr < (numval))
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001434:	dbbb      	blt.n	80013ae <HAL_TIM_IC_CaptureCallback+0x12e>
		}
		/* Find the average riseavg, the average time between 2 RISE */
		riseavg = riseavg/countr;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001440:	edd7 6a05 	vldr	s13, [r7, #20]
 8001444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001448:	edc7 7a05 	vstr	s15, [r7, #20]
		indxr = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
		/* The calculation for the Falling pulse on second channel */
		/* If the fall time is lower than rise time,
		 * Then there must be some error and we will increment
		 * both, until the error is gone
		*/
		if (fallData[indxf] < riseData[indxr])
 8001450:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001458:	491f      	ldr	r1, [pc, #124]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001460:	429a      	cmp	r2, r3
 8001462:	d214      	bcs.n	800148e <HAL_TIM_IC_CaptureCallback+0x20e>
		{
			indxf+=2;
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	3302      	adds	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
			indxr+=2;
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	3302      	adds	r3, #2
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] < riseData[indxr]) indxf++;
 8001470:	e002      	b.n	8001478 <HAL_TIM_IC_CaptureCallback+0x1f8>
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	3301      	adds	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001480:	4915      	ldr	r1, [pc, #84]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3f2      	bcc.n	8001472 <HAL_TIM_IC_CaptureCallback+0x1f2>
 800148c:	e0a7      	b.n	80015de <HAL_TIM_IC_CaptureCallback+0x35e>
		}

		else if (fallData[indxf] > riseData[indxr])
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001496:	4910      	ldr	r1, [pc, #64]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800149e:	429a      	cmp	r2, r3
 80014a0:	f240 809d 	bls.w	80015de <HAL_TIM_IC_CaptureCallback+0x35e>
		{
			indxf+=2;
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	3302      	adds	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
			indxr+=2;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	3302      	adds	r3, #2
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
			while (fallData[indxf] > riseData[indxr+1]) indxr++;
 80014b0:	e002      	b.n	80014b8 <HAL_TIM_IC_CaptureCallback+0x238>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	3301      	adds	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b8:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	3301      	adds	r3, #1
 80014c4:	4904      	ldr	r1, [pc, #16]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80014c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d8f1      	bhi.n	80014b2 <HAL_TIM_IC_CaptureCallback+0x232>
		/* The method used for the calculation below is as follows:
		* If Fall time < Rise Time, increment Fall counter
		* If Fall time - Rise Time is in between 0 and (difference between 2 Rise times), then its a success
		 * If fall time > Rise time, but is also > (difference between 2 Rise times), then increment Rise Counter
		 */
		while ((indxf < (numval)) && (indxr < (numval)))
 80014ce:	e086      	b.n	80015de <HAL_TIM_IC_CaptureCallback+0x35e>
 80014d0:	20000b18 	.word	0x20000b18
 80014d4:	20000b1c 	.word	0x20000b1c
 80014d8:	20000b20 	.word	0x20000b20
 80014dc:	20001ac0 	.word	0x20001ac0
		{
			/* If the Fall time is lower than rise time, increment the fall indx */
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
			{
				indxf++;
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	3301      	adds	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
 80014e6:	4a72      	ldr	r2, [pc, #456]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4970      	ldr	r1, [pc, #448]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b21b      	sxth	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	dbed      	blt.n	80014e0 <HAL_TIM_IC_CaptureCallback+0x260>
			}
			/* If the Difference in fall time and rise time is >0 and less than rise average,
			 * Then we will register it as a success and increment the countrf (the number of successes)
			 */
			if (((int16_t)(fallData[indxf]-riseData[indxr]) >= 0) && (((int16_t)(fallData[indxf]-riseData[indxr]) <= riseavg)))
 8001504:	4a6a      	ldr	r2, [pc, #424]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	b29a      	uxth	r2, r3
 800150e:	4969      	ldr	r1, [pc, #420]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001516:	b29b      	uxth	r3, r3
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21b      	sxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	db5a      	blt.n	80015d8 <HAL_TIM_IC_CaptureCallback+0x358>
 8001522:	4a63      	ldr	r2, [pc, #396]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	b29a      	uxth	r2, r3
 800152c:	4961      	ldr	r1, [pc, #388]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001534:	b29b      	uxth	r3, r3
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	b21b      	sxth	r3, r3
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001544:	ed97 7a05 	vldr	s14, [r7, #20]
 8001548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	db42      	blt.n	80015d8 <HAL_TIM_IC_CaptureCallback+0x358>
			{
				rfavg += MIN((fallData[indxf]-riseData[indxr]), (fallData[indxf+1]-riseData[indxr+1]));
 8001552:	4a57      	ldr	r2, [pc, #348]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800155a:	4956      	ldr	r1, [pc, #344]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001562:	1ad2      	subs	r2, r2, r3
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	3301      	adds	r3, #1
 8001568:	4951      	ldr	r1, [pc, #324]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 800156a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	3301      	adds	r3, #1
 8001572:	4850      	ldr	r0, [pc, #320]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 8001574:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001578:	1acb      	subs	r3, r1, r3
 800157a:	429a      	cmp	r2, r3
 800157c:	d20d      	bcs.n	800159a <HAL_TIM_IC_CaptureCallback+0x31a>
 800157e:	4a4c      	ldr	r2, [pc, #304]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001586:	494b      	ldr	r1, [pc, #300]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001598:	e00e      	b.n	80015b8 <HAL_TIM_IC_CaptureCallback+0x338>
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3301      	adds	r3, #1
 800159e:	4a44      	ldr	r2, [pc, #272]	@ (80016b0 <HAL_TIM_IC_CaptureCallback+0x430>)
 80015a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	3301      	adds	r3, #1
 80015a8:	4942      	ldr	r1, [pc, #264]	@ (80016b4 <HAL_TIM_IC_CaptureCallback+0x434>)
 80015aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	edc7 7a04 	vstr	s15, [r7, #16]
				indxf++;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	3301      	adds	r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
				indxr++;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	3301      	adds	r3, #1
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
				countrf++;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	e002      	b.n	80015de <HAL_TIM_IC_CaptureCallback+0x35e>
			}
			else
			{
				indxr++;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
		while ((indxf < (numval)) && (indxr < (numval)))
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e4:	da04      	bge.n	80015f0 <HAL_TIM_IC_CaptureCallback+0x370>
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ec:	f6ff af7b 	blt.w	80014e6 <HAL_TIM_IC_CaptureCallback+0x266>
			}
		}
		/* Calculate the Average time between 2 Rise */
		rfavg = rfavg/countrf;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fa:	edd7 6a04 	vldr	s13, [r7, #16]
 80015fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001602:	edc7 7a04 	vstr	s15, [r7, #16]
		v_sound = 331+0.61*temp;
 8001606:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	a323      	add	r3, pc, #140	@ (adr r3, 80016a0 <HAL_TIM_IC_CaptureCallback+0x420>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff f817 	bl	8000648 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a321      	add	r3, pc, #132	@ (adr r3, 80016a8 <HAL_TIM_IC_CaptureCallback+0x428>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe fe58 	bl	80002dc <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fb00 	bl	8000c38 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4a20      	ldr	r2, [pc, #128]	@ (80016bc <HAL_TIM_IC_CaptureCallback+0x43c>)
 800163c:	6013      	str	r3, [r2, #0]
		//pulseW = *deltaT * timeFactor/1000000000;
		pulseW = (rfavg)*timeFactor/1000000000;  //converting ns to s
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_TIM_IC_CaptureCallback+0x440>)
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	edd7 7a04 	vldr	s15, [r7, #16]
 8001648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800164c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80016c4 <HAL_TIM_IC_CaptureCallback+0x444>
 8001650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <HAL_TIM_IC_CaptureCallback+0x448>)
 8001656:	edc3 7a00 	vstr	s15, [r3]

//		deltaT_real = *delta_T_alg(pulseW);
		//windspeed = dist/((pulseW)*cali_val);  //d/(t*path diff)
//		windspeed = dist/(deltaT_real*cal_val) - v_sound; //might need to make this an array and take the average*/
		windspeed = dist/(pulseW*cal_val) - v_sound; //might need to make this an array and take the average
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x44c>)
 800165c:	edd3 6a00 	vldr	s13, [r3]
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_TIM_IC_CaptureCallback+0x448>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x450>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x454>)
 8001680:	edc3 7a00 	vstr	s15, [r3]
		riseCaptured = 0;
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
		fallCaptured = 0;
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x45c>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
		isMeasured = 1;
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]
		}
	}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	b851eb85 	.word	0xb851eb85
 80016a4:	3fe3851e 	.word	0x3fe3851e
 80016a8:	00000000 	.word	0x00000000
 80016ac:	4074b000 	.word	0x4074b000
 80016b0:	20001ac0 	.word	0x20001ac0
 80016b4:	20000b20 	.word	0x20000b20
 80016b8:	20002a70 	.word	0x20002a70
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	20000000 	.word	0x20000000
 80016c4:	4e6e6b28 	.word	0x4e6e6b28
 80016c8:	20002a64 	.word	0x20002a64
 80016cc:	20000004 	.word	0x20000004
 80016d0:	20002a68 	.word	0x20002a68
 80016d4:	20002a78 	.word	0x20002a78
 80016d8:	20000b18 	.word	0x20000b18
 80016dc:	20000b1c 	.word	0x20000b1c
 80016e0:	20002a60 	.word	0x20002a60

080016e4 <getTemp>:
//uint32_t buffer;
//float adc_val_f;
//uint16_t adc_val;

float *getTemp(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	//HAL_ADC_Start_IT(&hadc1); //start the adc in interrupt mode
	//HAL_ADC_Start_DMA(&hadc1, &buffer, 1);  //start in DMA mode

	//using polling method***********************************

	HAL_ADC_Start(&hadc1); // start the adc
 80016e8:	4812      	ldr	r0, [pc, #72]	@ (8001734 <getTemp+0x50>)
 80016ea:	f001 fea1 	bl	8003430 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80016ee:	2164      	movs	r1, #100	@ 0x64
 80016f0:	4810      	ldr	r0, [pc, #64]	@ (8001734 <getTemp+0x50>)
 80016f2:	f001 ff8d 	bl	8003610 <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 80016f6:	480f      	ldr	r0, [pc, #60]	@ (8001734 <getTemp+0x50>)
 80016f8:	f002 f862 	bl	80037c0 <HAL_ADC_GetValue>
 80016fc:	ee07 0a90 	vmov	s15, r0
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <getTemp+0x54>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
	temp = (adc_val/4095) *(125-40);
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <getTemp+0x54>)
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800173c <getTemp+0x58>
 8001714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001718:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001740 <getTemp+0x5c>
 800171c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <getTemp+0x60>)
 8001722:	edc3 7a00 	vstr	s15, [r3]

	HAL_ADC_Stop(&hadc1); // stop adc
 8001726:	4803      	ldr	r0, [pc, #12]	@ (8001734 <getTemp+0x50>)
 8001728:	f001 ff3e 	bl	80035a8 <HAL_ADC_Stop>
//	temp = (adc_val/4095) *(125-40);

	//printf("adc value = %f\r\n", temp);
	//HAL_Delay (100); // wait for 500ms
//temp = (adc_val/4095) *(125-40);
	return &temp;
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <getTemp+0x60>)
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200006ec 	.word	0x200006ec
 8001738:	20002a7c 	.word	0x20002a7c
 800173c:	457ff000 	.word	0x457ff000
 8001740:	42aa0000 	.word	0x42aa0000
 8001744:	20002a70 	.word	0x20002a70

08001748 <startSineW>:

float dac_val = 1.2;
uint32_t var;

void startSineW(bool start)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af02      	add	r7, sp, #8
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	if (!start)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f083 0301 	eor.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <startSineW+0x20>
	{
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800175e:	2100      	movs	r1, #0
 8001760:	482b      	ldr	r0, [pc, #172]	@ (8001810 <startSineW+0xc8>)
 8001762:	f003 fb07 	bl	8004d74 <HAL_DAC_Stop_DMA>
		 for (int i=0; i<100; i++)
		 {
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
		 }
	}
}
 8001766:	e048      	b.n	80017fa <startSineW+0xb2>
		 HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2364      	movs	r3, #100	@ 0x64
 800176e:	4a29      	ldr	r2, [pc, #164]	@ (8001814 <startSineW+0xcc>)
 8001770:	2100      	movs	r1, #0
 8001772:	4827      	ldr	r0, [pc, #156]	@ (8001810 <startSineW+0xc8>)
 8001774:	f003 fa2a 	bl	8004bcc <HAL_DAC_Start_DMA>
		 for (int i=0; i<100; i++)
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e03a      	b.n	80017f4 <startSineW+0xac>
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fef6 	bl	8000574 <__aeabi_i2d>
 8001788:	a31f      	add	r3, pc, #124	@ (adr r3, 8001808 <startSineW+0xc0>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff5b 	bl	8000648 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <startSineW+0xd0>)
 80017a0:	f7ff f87c 	bl	800089c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	ec43 2b17 	vmov	d7, r2, r3
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	f010 fcf8 	bl	80121a8 <sin>
 80017b8:	ec51 0b10 	vmov	r0, r1, d0
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <startSineW+0xd4>)
 80017c2:	f7fe fd8b 	bl	80002dc <__adddf3>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <startSineW+0xd8>)
 80017d4:	f7fe ff38 	bl	8000648 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff fa0a 	bl	8000bf8 <__aeabi_d2uiz>
 80017e4:	4602      	mov	r2, r0
 80017e6:	490b      	ldr	r1, [pc, #44]	@ (8001814 <startSineW+0xcc>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 for (int i=0; i<100; i++)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b63      	cmp	r3, #99	@ 0x63
 80017f8:	ddc1      	ble.n	800177e <startSineW+0x36>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	4d12d84a 	.word	0x4d12d84a
 800180c:	400921fb 	.word	0x400921fb
 8001810:	200007b8 	.word	0x200007b8
 8001814:	20002a80 	.word	0x20002a80
 8001818:	40590000 	.word	0x40590000
 800181c:	3ff00000 	.word	0x3ff00000
 8001820:	40a00000 	.word	0x40a00000

08001824 <lcd_disp>:
/******************************************************************/
// lcd display*****************************************************/

void lcd_disp(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	char * fltChar = malloc (sizeof (char) * 7);
 800182a:	2007      	movs	r0, #7
 800182c:	f008 fe0a 	bl	800a444 <malloc>
 8001830:	4603      	mov	r3, r0
 8001832:	607b      	str	r3, [r7, #4]
	//lcd_send_cmd (0x80);
	//char fltChar [7];
	sprintf(fltChar, "%.4f", windspeed);
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <lcd_disp+0x60>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fead 	bl	8000598 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4911      	ldr	r1, [pc, #68]	@ (8001888 <lcd_disp+0x64>)
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f009 fa2f 	bl	800aca8 <sprintf>
	lcd_put_cur(0,0);
 800184a:	2100      	movs	r1, #0
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fc51 	bl	80010f4 <lcd_put_cur>
	lcd_send_string("Windspeed=");
 8001852:	480e      	ldr	r0, [pc, #56]	@ (800188c <lcd_disp+0x68>)
 8001854:	f7ff fcaa 	bl	80011ac <lcd_send_string>
	//lcd_send_data((windspeed/10) +48);
	lcd_send_string(fltChar);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fca7 	bl	80011ac <lcd_send_string>
	lcd_send_string(" ");
 800185e:	480c      	ldr	r0, [pc, #48]	@ (8001890 <lcd_disp+0x6c>)
 8001860:	f7ff fca4 	bl	80011ac <lcd_send_string>
	lcd_put_cur(1,0);
 8001864:	2100      	movs	r1, #0
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff fc44 	bl	80010f4 <lcd_put_cur>
	lcd_send_string("m/s");
 800186c:	4809      	ldr	r0, [pc, #36]	@ (8001894 <lcd_disp+0x70>)
 800186e:	f7ff fc9d 	bl	80011ac <lcd_send_string>
	HAL_Delay(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001876:	f001 f9a7 	bl	8002bc8 <HAL_Delay>

	return;
 800187a:	bf00      	nop
}
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20002a78 	.word	0x20002a78
 8001888:	08013224 	.word	0x08013224
 800188c:	0801322c 	.word	0x0801322c
 8001890:	08013238 	.word	0x08013238
 8001894:	0801323c 	.word	0x0801323c

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
 enum State {IDLE = 0, START = 1, CALTIME = 2, STOP = 3}; //define the number of states
 char State = IDLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	71fb      	strb	r3, [r7, #7]
 char inp;

 setvbuf(stdin, NULL, _IONBF, 0);
 80018a2:	4b64      	ldr	r3, [pc, #400]	@ (8001a34 <main+0x19c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6858      	ldr	r0, [r3, #4]
 80018a8:	2300      	movs	r3, #0
 80018aa:	2202      	movs	r2, #2
 80018ac:	2100      	movs	r1, #0
 80018ae:	f009 f941 	bl	800ab34 <setvbuf>

lambda = v_sound/freq;  //wavelength
 80018b2:	4b61      	ldr	r3, [pc, #388]	@ (8001a38 <main+0x1a0>)
 80018b4:	edd3 6a00 	vldr	s13, [r3]
 80018b8:	4b60      	ldr	r3, [pc, #384]	@ (8001a3c <main+0x1a4>)
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <main+0x1a8>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
pathDiff = (dist/lambda)-0.5;  //destructive interference, L/lambda-0.5=delta_L
 80018c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a44 <main+0x1ac>)
 80018ca:	edd3 6a00 	vldr	s13, [r3]
 80018ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001a40 <main+0x1a8>)
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018e0:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <main+0x1b0>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e6:	f001 f8fe 	bl	8002ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ea:	f000 f8c9 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ee:	f000 fc0d 	bl	800210c <MX_GPIO_Init>
  MX_DMA_Init();
 80018f2:	f000 fbc1 	bl	8002078 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018f6:	f000 fb71 	bl	8001fdc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80018fa:	f000 faf7 	bl	8001eec <MX_TIM4_Init>
  MX_TIM1_Init();
 80018fe:	f000 f9fd 	bl	8001cfc <MX_TIM1_Init>
  MX_ADC1_Init();
 8001902:	f000 f909 	bl	8001b18 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001906:	f000 f97f 	bl	8001c08 <MX_DAC1_Init>
  MX_TIM2_Init();
 800190a:	f000 fa7d 	bl	8001e08 <MX_TIM2_Init>
  MX_I2C1_Init();
 800190e:	f000 f9b5 	bl	8001c7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 8001912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001916:	4a4d      	ldr	r2, [pc, #308]	@ (8001a4c <main+0x1b4>)
 8001918:	2100      	movs	r1, #0
 800191a:	484d      	ldr	r0, [pc, #308]	@ (8001a50 <main+0x1b8>)
 800191c:	f006 f86e 	bl	80079fc <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 8001920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001924:	4a4b      	ldr	r2, [pc, #300]	@ (8001a54 <main+0x1bc>)
 8001926:	2104      	movs	r1, #4
 8001928:	4849      	ldr	r0, [pc, #292]	@ (8001a50 <main+0x1b8>)
 800192a:	f006 f867 	bl	80079fc <HAL_TIM_IC_Start_DMA>
  //say something
  //uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  //start pwm timer
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //start TIM4 pwm ch1 - macro expan 0x00000000U
 800192e:	2100      	movs	r1, #0
 8001930:	4849      	ldr	r0, [pc, #292]	@ (8001a58 <main+0x1c0>)
 8001932:	f005 ff01 	bl	8007738 <HAL_TIM_PWM_Start>

  lcd_init(); 														//initialize the lcd
 8001936:	f7ff fbfc 	bl	8001132 <lcd_init>
  //start timer 2 for the sinewave
  HAL_TIM_Base_Start(&htim2);
 800193a:	4848      	ldr	r0, [pc, #288]	@ (8001a5c <main+0x1c4>)
 800193c:	f005 fdd8 	bl	80074f0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blinkLED();  //call the blinkLED function
 8001940:	f7ff fc4a 	bl	80011d8 <blinkLED>
	  getTemp();
 8001944:	f7ff fece 	bl	80016e4 <getTemp>
	  lcd_disp();
 8001948:	f7ff ff6c 	bl	8001824 <lcd_disp>

	  if (isMeasured)
 800194c:	4b44      	ldr	r3, [pc, #272]	@ (8001a60 <main+0x1c8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <main+0xe4>
	  {
		  TIM1->CNT = 0;
 8001954:	4b43      	ldr	r3, [pc, #268]	@ (8001a64 <main+0x1cc>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a4c <main+0x1b4>)
 8001960:	2100      	movs	r1, #0
 8001962:	483b      	ldr	r0, [pc, #236]	@ (8001a50 <main+0x1b8>)
 8001964:	f006 f84a 	bl	80079fc <HAL_TIM_IC_Start_DMA>
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 8001968:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196c:	4a39      	ldr	r2, [pc, #228]	@ (8001a54 <main+0x1bc>)
 800196e:	2104      	movs	r1, #4
 8001970:	4837      	ldr	r0, [pc, #220]	@ (8001a50 <main+0x1b8>)
 8001972:	f006 f843 	bl	80079fc <HAL_TIM_IC_Start_DMA>
		  isMeasured = 0;
 8001976:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <main+0x1c8>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
	  }
	  //scan for user inpt for the state machine
	 inp = *scanInp();
 800197c:	f7ff fc3c 	bl	80011f8 <scanInp>
 8001980:	4603      	mov	r3, r0
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	71bb      	strb	r3, [r7, #6]
	  //wait again so we don't flood the serial terminal
	  //HAL_Delay(100);

	  if (inp == 'i')
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	2b69      	cmp	r3, #105	@ 0x69
 800198a:	d102      	bne.n	8001992 <main+0xfa>
	  {
		  State = IDLE;
 800198c:	2300      	movs	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	e00a      	b.n	80019a8 <main+0x110>
	  }
	  else if (inp == 's')
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	2b73      	cmp	r3, #115	@ 0x73
 8001996:	d102      	bne.n	800199e <main+0x106>
	  {
		  State = START;
 8001998:	2301      	movs	r3, #1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	e004      	b.n	80019a8 <main+0x110>
	  }
	  else if (inp == 't')
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	2b74      	cmp	r3, #116	@ 0x74
 80019a2:	d101      	bne.n	80019a8 <main+0x110>
	  {
		  State = STOP;
 80019a4:	2303      	movs	r3, #3
 80019a6:	71fb      	strb	r3, [r7, #7]
	  } else {};

	  //State Machine starts here
	  switch (State)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d838      	bhi.n	8001a20 <main+0x188>
 80019ae:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <main+0x11c>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019db 	.word	0x080019db
 80019bc:	08001a2f 	.word	0x08001a2f
 80019c0:	08001a0d 	.word	0x08001a0d
	  {
	  case IDLE:
		 // uart_buf_len = sprintf(uart_buf, "In IDLE state\r\n");
		  printf("In IDLE State\r\n");
 80019c4:	4828      	ldr	r0, [pc, #160]	@ (8001a68 <main+0x1d0>)
 80019c6:	f009 f89b 	bl	800ab00 <puts>
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); /// disable nShutdown pin for digital amp
		  //startSpeaker(0); //turn off speaker
		  startSineW(0); //using sinewave instead
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff febc 	bl	8001748 <startSineW>
		  HAL_Delay(1000);
 80019d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019d4:	f001 f8f8 	bl	8002bc8 <HAL_Delay>

		  break;
 80019d8:	e02a      	b.n	8001a30 <main+0x198>

	  case START:
		  //nShutdownDamp = 1; // start digital amplifier
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		  printf("In START State\r\n"); // print status in terminal
 80019da:	4824      	ldr	r0, [pc, #144]	@ (8001a6c <main+0x1d4>)
 80019dc:	f009 f890 	bl	800ab00 <puts>
		  //startSpeaker(1);
		  startSineW(1); //using sinewave instead
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff feb1 	bl	8001748 <startSineW>
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  /*the following is use to do pulse output and measure the very beginning****
		  //HAL_Delay(100);  //wait 20ms
		  //startSpeaker(0);
		   */
		  cal_val = dist/(pulseW*v_sound);  //get the calibration value from the drift and temperature
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <main+0x1ac>)
 80019e8:	edd3 6a00 	vldr	s13, [r3]
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <main+0x1d8>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <main+0x1a0>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a00:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <main+0x1dc>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]
		  State = CALTIME;
 8001a06:	2302      	movs	r3, #2
 8001a08:	71fb      	strb	r3, [r7, #7]
		  break;
 8001a0a:	e011      	b.n	8001a30 <main+0x198>
		  break;

	  case STOP:
		  //nShutdownDamp = 0; //stop digital amplifier
		  //startSpeaker(0);
		  startSineW(0); //using sinewave instead
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fe9b 	bl	8001748 <startSineW>
		  printf("In STOP State\r\n"); // print status in terminal
 8001a12:	4819      	ldr	r0, [pc, #100]	@ (8001a78 <main+0x1e0>)
 8001a14:	f009 f874 	bl	800ab00 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001a18:	2064      	movs	r0, #100	@ 0x64
 8001a1a:	f001 f8d5 	bl	8002bc8 <HAL_Delay>
		  break;
 8001a1e:	e007      	b.n	8001a30 <main+0x198>

	  default:
		  /*uart_buf_len = sprintf(uart_buf, "In Default State\r\n");
  		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
		  printf("In DEFAULT State\r\n"); // print status in terminal
 8001a20:	4816      	ldr	r0, [pc, #88]	@ (8001a7c <main+0x1e4>)
 8001a22:	f009 f86d 	bl	800ab00 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001a26:	2064      	movs	r0, #100	@ 0x64
 8001a28:	f001 f8ce 	bl	8002bc8 <HAL_Delay>
		  break;
 8001a2c:	e000      	b.n	8001a30 <main+0x198>
		  break;
 8001a2e:	bf00      	nop
	  blinkLED();  //call the blinkLED function
 8001a30:	e786      	b.n	8001940 <main+0xa8>
 8001a32:	bf00      	nop
 8001a34:	20000438 	.word	0x20000438
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20002a6c 	.word	0x20002a6c
 8001a44:	20000004 	.word	0x20000004
 8001a48:	20002a74 	.word	0x20002a74
 8001a4c:	20000b20 	.word	0x20000b20
 8001a50:	200008e0 	.word	0x200008e0
 8001a54:	20001ac0 	.word	0x20001ac0
 8001a58:	20000978 	.word	0x20000978
 8001a5c:	2000092c 	.word	0x2000092c
 8001a60:	20002a60 	.word	0x20002a60
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	08013240 	.word	0x08013240
 8001a6c:	08013250 	.word	0x08013250
 8001a70:	20002a64 	.word	0x20002a64
 8001a74:	20002a68 	.word	0x20002a68
 8001a78:	08013260 	.word	0x08013260
 8001a7c:	08013270 	.word	0x08013270

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	@ 0x50
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2238      	movs	r2, #56	@ 0x38
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f009 f96d 	bl	800ad6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f004 fcfa 	bl	800649c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab2:	2340      	movs	r3, #64	@ 0x40
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aba:	2302      	movs	r3, #2
 8001abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ac2:	2355      	movs	r3, #85	@ 0x55
 8001ac4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fd94 	bl	8006604 <HAL_RCC_OscConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ae2:	f000 fb61 	bl	80021a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aea:	2303      	movs	r3, #3
 8001aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2104      	movs	r1, #4
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 f892 	bl	8006c28 <HAL_RCC_ClockConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b0a:	f000 fb4d 	bl	80021a8 <Error_Handler>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3750      	adds	r7, #80	@ 0x50
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f009 f91c 	bl	800ad6e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b36:	4b32      	ldr	r3, [pc, #200]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b3e:	4b30      	ldr	r3, [pc, #192]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b52:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b58:	4b29      	ldr	r3, [pc, #164]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5e:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b60:	2204      	movs	r2, #4
 8001b62:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b64:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ba2:	4817      	ldr	r0, [pc, #92]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001ba4:	f001 fac0 	bl	8003128 <HAL_ADC_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001bae:	f000 fafb 	bl	80021a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4810      	ldr	r0, [pc, #64]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001bbe:	f002 fe2f 	bl	8004820 <HAL_ADCEx_MultiModeConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001bc8:	f000 faee 	bl	80021a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_ADC1_Init+0xec>)
 8001bce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bd8:	237f      	movs	r3, #127	@ 0x7f
 8001bda:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_ADC1_Init+0xe8>)
 8001bea:	f002 f82f 	bl	8003c4c <HAL_ADC_ConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001bf4:	f000 fad8 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3730      	adds	r7, #48	@ 0x30
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200006ec 	.word	0x200006ec
 8001c04:	04300002 	.word	0x04300002

08001c08 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	@ 0x30
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2230      	movs	r2, #48	@ 0x30
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f009 f8aa 	bl	800ad6e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <MX_DAC1_Init+0x6c>)
 8001c1c:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <MX_DAC1_Init+0x70>)
 8001c1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c20:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <MX_DAC1_Init+0x6c>)
 8001c22:	f002 ffb0 	bl	8004b86 <HAL_DAC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c2c:	f000 fabc 	bl	80021a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c30:	2302      	movs	r3, #2
 8001c32:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001c40:	2312      	movs	r3, #18
 8001c42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <MX_DAC1_Init+0x6c>)
 8001c5c:	f003 f8f6 	bl	8004e4c <HAL_DAC_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001c66:	f000 fa9f 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	@ 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200007b8 	.word	0x200007b8
 8001c78:	50000800 	.word	0x50000800

08001c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001c82:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf4 <MX_I2C1_Init+0x78>)
 8001c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001c88:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf8 <MX_I2C1_Init+0x7c>)
 8001c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cb6:	480e      	ldr	r0, [pc, #56]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001cb8:	f003 ff8a 	bl	8005bd0 <HAL_I2C_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cc2:	f000 fa71 	bl	80021a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001cca:	f004 fb4f 	bl	800636c <HAL_I2CEx_ConfigAnalogFilter>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cd4:	f000 fa68 	bl	80021a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_I2C1_Init+0x74>)
 8001cdc:	f004 fb91 	bl	8006402 <HAL_I2CEx_ConfigDigitalFilter>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f000 fa5f 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000082c 	.word	0x2000082c
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	40b285c2 	.word	0x40b285c2

08001cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */
 // timer for PLL pulse width input capture. If we use prescaler 0, fclk = 170Mhz, then 5.882ns/tick
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d28:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d2a:	4a36      	ldr	r2, [pc, #216]	@ (8001e04 <MX_TIM1_Init+0x108>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d48:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d50:	2280      	movs	r2, #128	@ 0x80
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d54:	482a      	ldr	r0, [pc, #168]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d56:	f005 fb73 	bl	8007440 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001d60:	f000 fa22 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d68:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4823      	ldr	r0, [pc, #140]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d72:	f006 fb81 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001d7c:	f000 fa14 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d80:	481f      	ldr	r0, [pc, #124]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001d82:	f005 fdd9 	bl	8007938 <HAL_TIM_IC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d8c:	f000 fa0c 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4817      	ldr	r0, [pc, #92]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001da4:	f007 faf2 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001dae:	f000 f9fb 	bl	80021a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001db6:	2301      	movs	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480d      	ldr	r0, [pc, #52]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001dca:	f006 f9a5 	bl	8008118 <HAL_TIM_IC_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001dd4:	f000 f9e8 	bl	80021a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2204      	movs	r2, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <MX_TIM1_Init+0x104>)
 8001de8:	f006 f996 	bl	8008118 <HAL_TIM_IC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001df2:	f000 f9d9 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3730      	adds	r7, #48	@ 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200008e0 	.word	0x200008e0
 8001e04:	40012c00 	.word	0x40012c00

08001e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//this is used to generate a sinewave, f_sys_clk/(prescalar * 100)/4 = 25khz
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e44:	2210      	movs	r2, #16
 8001e46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e50:	2203      	movs	r2, #3
 8001e52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e60:	4821      	ldr	r0, [pc, #132]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e62:	f005 faed 	bl	8007440 <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e6c:	f000 f99c 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481a      	ldr	r0, [pc, #104]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e7e:	f006 fafb 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e88:	f000 f98e 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e8c:	4816      	ldr	r0, [pc, #88]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001e8e:	f005 fb91 	bl	80075b4 <HAL_TIM_OC_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e98:	f000 f986 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001eac:	f007 fa6e 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001eb6:	f000 f977 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_TIM2_Init+0xe0>)
 8001ed2:	f006 f8a7 	bl	8008024 <HAL_TIM_OC_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001edc:	f000 f964 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3738      	adds	r7, #56	@ 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000092c 	.word	0x2000092c

08001eec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	@ 0x38
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	619a      	str	r2, [r3, #24]
  //6800-1  , this gives 25khz, f_pwm = fclk/(psc*(arr-1))
  //arr/2-1 = 6800/2-1
  //timer 4 is unused right now since we are using the sinewave from timer 2

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f20:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <MX_TIM4_Init+0xec>)
 8001f22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6799;
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f32:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8001f36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3e:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f44:	4823      	ldr	r0, [pc, #140]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f46:	f005 fa7b 	bl	8007440 <HAL_TIM_Base_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f50:	f000 f92a 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481c      	ldr	r0, [pc, #112]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f62:	f006 fa89 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f6c:	f000 f91c 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f70:	4818      	ldr	r0, [pc, #96]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f72:	f005 fb80 	bl	8007676 <HAL_TIM_PWM_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f7c:	f000 f914 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4811      	ldr	r0, [pc, #68]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001f90:	f007 f9fc 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f9a:	f000 f905 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9e:	2360      	movs	r3, #96	@ 0x60
 8001fa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3399;
 8001fa2:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001fb8:	f006 f94a 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001fc2:	f000 f8f1 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fc6:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <MX_TIM4_Init+0xe8>)
 8001fc8:	f000 fb86 	bl	80026d8 <HAL_TIM_MspPostInit>

}
 8001fcc:	bf00      	nop
 8001fce:	3738      	adds	r7, #56	@ 0x38
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000978 	.word	0x20000978
 8001fd8:	40000800 	.word	0x40000800

08001fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8001fe2:	4a24      	ldr	r2, [pc, #144]	@ (8002074 <MX_USART2_UART_Init+0x98>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe6:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8002014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002018:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002026:	4812      	ldr	r0, [pc, #72]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 8002028:	f007 fa78 	bl	800951c <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002032:	f000 f8b9 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002036:	2100      	movs	r1, #0
 8002038:	480d      	ldr	r0, [pc, #52]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 800203a:	f008 f939 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002044:	f000 f8b0 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002048:	2100      	movs	r1, #0
 800204a:	4809      	ldr	r0, [pc, #36]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 800204c:	f008 f96e 	bl	800a32c <HAL_UARTEx_SetRxFifoThreshold>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002056:	f000 f8a7 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	@ (8002070 <MX_USART2_UART_Init+0x94>)
 800205c:	f008 f8ef 	bl	800a23e <HAL_UARTEx_DisableFifoMode>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002066:	f000 f89f 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000a84 	.word	0x20000a84
 8002074:	40004400 	.word	0x40004400

08002078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800207e:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <MX_DMA_Init+0x90>)
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	4a21      	ldr	r2, [pc, #132]	@ (8002108 <MX_DMA_Init+0x90>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6493      	str	r3, [r2, #72]	@ 0x48
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <MX_DMA_Init+0x90>)
 800208c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <MX_DMA_Init+0x90>)
 8002098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209a:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <MX_DMA_Init+0x90>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80020a2:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <MX_DMA_Init+0x90>)
 80020a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	200b      	movs	r0, #11
 80020b4:	f002 fd33 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020b8:	200b      	movs	r0, #11
 80020ba:	f002 fd4a 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	200c      	movs	r0, #12
 80020c4:	f002 fd2b 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020c8:	200c      	movs	r0, #12
 80020ca:	f002 fd42 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	200d      	movs	r0, #13
 80020d4:	f002 fd23 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020d8:	200d      	movs	r0, #13
 80020da:	f002 fd3a 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	200e      	movs	r0, #14
 80020e4:	f002 fd1b 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80020e8:	200e      	movs	r0, #14
 80020ea:	f002 fd32 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	200f      	movs	r0, #15
 80020f4:	f002 fd13 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80020f8:	200f      	movs	r0, #15
 80020fa:	f002 fd2a 	bl	8004b52 <HAL_NVIC_EnableIRQ>

}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <MX_GPIO_Init+0x94>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <MX_GPIO_Init+0x94>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <MX_GPIO_Init+0x94>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <MX_GPIO_Init+0x94>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <MX_GPIO_Init+0x94>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <MX_GPIO_Init+0x94>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002158:	4812      	ldr	r0, [pc, #72]	@ (80021a4 <MX_GPIO_Init+0x98>)
 800215a:	f003 fd07 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800215e:	2360      	movs	r3, #96	@ 0x60
 8002160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002174:	f003 fb78 	bl	8005868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002178:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800217c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	4619      	mov	r1, r3
 8002190:	4804      	ldr	r0, [pc, #16]	@ (80021a4 <MX_GPIO_Init+0x98>)
 8002192:	f003 fb69 	bl	8005868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002196:	bf00      	nop
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000400 	.word	0x48000400

080021a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ac:	b672      	cpsid	i
}
 80021ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <Error_Handler+0x8>

080021b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_MspInit+0x44>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <HAL_MspInit+0x44>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <HAL_MspInit+0x44>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_MspInit+0x44>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_MspInit+0x44>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_MspInit+0x44>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021ea:	f004 f9fb 	bl	80065e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b09a      	sub	sp, #104	@ 0x68
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	2244      	movs	r2, #68	@ 0x44
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f008 fda6 	bl	800ad6e <memset>
  if(hadc->Instance==ADC1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800222a:	d167      	bne.n	80022fc <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800222c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002230:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002232:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f004 ff0f 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002248:	f7ff ffae 	bl	80021a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_ADC_MspInit+0x108>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002250:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <HAL_ADC_MspInit+0x108>)
 8002252:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002258:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <HAL_ADC_MspInit+0x108>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <HAL_ADC_MspInit+0x108>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002268:	4a26      	ldr	r2, [pc, #152]	@ (8002304 <HAL_ADC_MspInit+0x108>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_ADC_MspInit+0x108>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800227c:	2301      	movs	r3, #1
 800227e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002280:	2303      	movs	r3, #3
 8002282:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800228c:	4619      	mov	r1, r3
 800228e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002292:	f003 fae9 	bl	8005868 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 8002298:	4a1c      	ldr	r2, [pc, #112]	@ (800230c <HAL_ADC_MspInit+0x110>)
 800229a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 800229e:	2205      	movs	r2, #5
 80022a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022b0:	2280      	movs	r2, #128	@ 0x80
 80022b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b4:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022c4:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022c6:	2220      	movs	r2, #32
 80022c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022d2:	f002 fffd 	bl	80052d0 <HAL_DMA_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80022dc:	f7ff ff64 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80022e6:	4a08      	ldr	r2, [pc, #32]	@ (8002308 <HAL_ADC_MspInit+0x10c>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2012      	movs	r0, #18
 80022f2:	f002 fc14 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80022f6:	2012      	movs	r0, #18
 80022f8:	f002 fc2b 	bl	8004b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80022fc:	bf00      	nop
 80022fe:	3768      	adds	r7, #104	@ 0x68
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	20000758 	.word	0x20000758
 800230c:	40020058 	.word	0x40020058

08002310 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2b      	ldr	r2, [pc, #172]	@ (80023dc <HAL_DAC_MspInit+0xcc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d14f      	bne.n	80023d2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002332:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_DAC_MspInit+0xd0>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a2a      	ldr	r2, [pc, #168]	@ (80023e0 <HAL_DAC_MspInit+0xd0>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b28      	ldr	r3, [pc, #160]	@ (80023e0 <HAL_DAC_MspInit+0xd0>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <HAL_DAC_MspInit+0xd0>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <HAL_DAC_MspInit+0xd0>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <HAL_DAC_MspInit+0xd0>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002362:	2310      	movs	r3, #16
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002366:	2303      	movs	r3, #3
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002378:	f003 fa76 	bl	8005868 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 800237e:	4a1a      	ldr	r2, [pc, #104]	@ (80023e8 <HAL_DAC_MspInit+0xd8>)
 8002380:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 8002384:	2206      	movs	r2, #6
 8002386:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 800238a:	2210      	movs	r2, #16
 800238c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 8002396:	2280      	movs	r2, #128	@ 0x80
 8002398:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 800239c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 80023a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 80023ac:	2220      	movs	r2, #32
 80023ae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80023b6:	480b      	ldr	r0, [pc, #44]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 80023b8:	f002 ff8a 	bl	80052d0 <HAL_DMA_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80023c2:	f7ff fef1 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a06      	ldr	r2, [pc, #24]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <HAL_DAC_MspInit+0xd4>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	@ 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	50000800 	.word	0x50000800
 80023e0:	40021000 	.word	0x40021000
 80023e4:	200007cc 	.word	0x200007cc
 80023e8:	40020030 	.word	0x40020030

080023ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b09c      	sub	sp, #112	@ 0x70
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	2244      	movs	r2, #68	@ 0x44
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f008 fcae 	bl	800ad6e <memset>
  if(hi2c->Instance==I2C1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a42      	ldr	r2, [pc, #264]	@ (8002520 <HAL_I2C_MspInit+0x134>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d17c      	bne.n	8002516 <HAL_I2C_MspInit+0x12a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800241c:	2340      	movs	r3, #64	@ 0x40
 800241e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	4618      	mov	r0, r3
 800242a:	f004 fe19 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002434:	f7ff feb8 	bl	80021a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b3a      	ldr	r3, [pc, #232]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243c:	4a39      	ldr	r2, [pc, #228]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002444:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	4a33      	ldr	r2, [pc, #204]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800246c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	2312      	movs	r3, #18
 8002470:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800247a:	2304      	movs	r3, #4
 800247c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002488:	f003 f9ee 	bl	8005868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800249c:	2304      	movs	r3, #4
 800249e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4820      	ldr	r0, [pc, #128]	@ (8002528 <HAL_I2C_MspInit+0x13c>)
 80024a8:	f003 f9de 	bl	8005868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 80024b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <HAL_I2C_MspInit+0x138>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002530 <HAL_I2C_MspInit+0x144>)
 80024c8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80024ca:	4b18      	ldr	r3, [pc, #96]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024cc:	2211      	movs	r2, #17
 80024ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d0:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024d2:	2210      	movs	r2, #16
 80024d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024de:	2280      	movs	r2, #128	@ 0x80
 80024e0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e8:	4b10      	ldr	r3, [pc, #64]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80024fa:	480c      	ldr	r0, [pc, #48]	@ (800252c <HAL_I2C_MspInit+0x140>)
 80024fc:	f002 fee8 	bl	80052d0 <HAL_DMA_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8002506:	f7ff fe4f 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a07      	ldr	r2, [pc, #28]	@ (800252c <HAL_I2C_MspInit+0x140>)
 800250e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002510:	4a06      	ldr	r2, [pc, #24]	@ (800252c <HAL_I2C_MspInit+0x140>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3770      	adds	r7, #112	@ 0x70
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40005400 	.word	0x40005400
 8002524:	40021000 	.word	0x40021000
 8002528:	48000400 	.word	0x48000400
 800252c:	20000880 	.word	0x20000880
 8002530:	40020044 	.word	0x40020044

08002534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	@ 0x30
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5a      	ldr	r2, [pc, #360]	@ (80026bc <HAL_TIM_Base_MspInit+0x188>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f040 808b 	bne.w	800266e <HAL_TIM_Base_MspInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002558:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 800255e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002562:	6613      	str	r3, [r2, #96]	@ 0x60
 8002564:	4b56      	ldr	r3, [pc, #344]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800259a:	2306      	movs	r3, #6
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a8:	f003 f95e 	bl	8005868 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80025ac:	4b45      	ldr	r3, [pc, #276]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025ae:	4a46      	ldr	r2, [pc, #280]	@ (80026c8 <HAL_TIM_Base_MspInit+0x194>)
 80025b0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80025b2:	4b44      	ldr	r3, [pc, #272]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025b4:	222a      	movs	r2, #42	@ 0x2a
 80025b6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b8:	4b42      	ldr	r3, [pc, #264]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025be:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025c4:	4b3f      	ldr	r3, [pc, #252]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ca:	4b3e      	ldr	r3, [pc, #248]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025d2:	4b3c      	ldr	r3, [pc, #240]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025d8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80025da:	4b3a      	ldr	r3, [pc, #232]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025dc:	2220      	movs	r2, #32
 80025de:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80025e0:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80025e8:	4836      	ldr	r0, [pc, #216]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025ea:	f002 fe71 	bl	80052d0 <HAL_DMA_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 80025f4:	f7ff fdd8 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a32      	ldr	r2, [pc, #200]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80025fe:	4a31      	ldr	r2, [pc, #196]	@ (80026c4 <HAL_TIM_Base_MspInit+0x190>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002606:	4a32      	ldr	r2, [pc, #200]	@ (80026d0 <HAL_TIM_Base_MspInit+0x19c>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 800260a:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 800260c:	222b      	movs	r2, #43	@ 0x2b
 800260e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002610:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b2b      	ldr	r3, [pc, #172]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 800261e:	2280      	movs	r2, #128	@ 0x80
 8002620:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002622:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002628:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800262a:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 800262c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002630:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002632:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002634:	2220      	movs	r2, #32
 8002636:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002638:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 800263a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800263e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002640:	4822      	ldr	r0, [pc, #136]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002642:	f002 fe45 	bl	80052d0 <HAL_DMA_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_TIM_Base_MspInit+0x11c>
    {
      Error_Handler();
 800264c:	f7ff fdac 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28
 8002656:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <HAL_TIM_Base_MspInit+0x198>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	201b      	movs	r0, #27
 8002662:	f002 fa5c 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002666:	201b      	movs	r0, #27
 8002668:	f002 fa73 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800266c:	e022      	b.n	80026b4 <HAL_TIM_Base_MspInit+0x180>
  else if(htim_base->Instance==TIM2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002676:	d10c      	bne.n	8002692 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002678:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6593      	str	r3, [r2, #88]	@ 0x58
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693b      	ldr	r3, [r7, #16]
}
 8002690:	e010      	b.n	80026b4 <HAL_TIM_Base_MspInit+0x180>
  else if(htim_base->Instance==TIM4)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <HAL_TIM_Base_MspInit+0x1a0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d10b      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800269c:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	4a07      	ldr	r2, [pc, #28]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_TIM_Base_MspInit+0x18c>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3730      	adds	r7, #48	@ 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40021000 	.word	0x40021000
 80026c4:	200009c4 	.word	0x200009c4
 80026c8:	40020008 	.word	0x40020008
 80026cc:	20000a24 	.word	0x20000a24
 80026d0:	4002001c 	.word	0x4002001c
 80026d4:	40000800 	.word	0x40000800

080026d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a11      	ldr	r2, [pc, #68]	@ (800273c <HAL_TIM_MspPostInit+0x64>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d11b      	bne.n	8002732 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_TIM_MspPostInit+0x68>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <HAL_TIM_MspPostInit+0x68>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_TIM_MspPostInit+0x68>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002712:	2340      	movs	r3, #64	@ 0x40
 8002714:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002722:	2302      	movs	r3, #2
 8002724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002726:	f107 030c 	add.w	r3, r7, #12
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	@ (8002744 <HAL_TIM_MspPostInit+0x6c>)
 800272e:	f003 f89b 	bl	8005868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40000800 	.word	0x40000800
 8002740:	40021000 	.word	0x40021000
 8002744:	48000400 	.word	0x48000400

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b09a      	sub	sp, #104	@ 0x68
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	2244      	movs	r2, #68	@ 0x44
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f008 fb00 	bl	800ad6e <memset>
  if(huart->Instance==USART2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_UART_MspInit+0xa8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d136      	bne.n	80027e6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fc6b 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002790:	f7ff fd0a 	bl	80021a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002794:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <HAL_UART_MspInit+0xac>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4a16      	ldr	r2, [pc, #88]	@ (80027f4 <HAL_UART_MspInit+0xac>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279e:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <HAL_UART_MspInit+0xac>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_UART_MspInit+0xac>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	4a10      	ldr	r2, [pc, #64]	@ (80027f4 <HAL_UART_MspInit+0xac>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_UART_MspInit+0xac>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80027c4:	230c      	movs	r3, #12
 80027c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d4:	2307      	movs	r3, #7
 80027d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027dc:	4619      	mov	r1, r3
 80027de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e2:	f003 f841 	bl	8005868 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80027e6:	bf00      	nop
 80027e8:	3768      	adds	r7, #104	@ 0x68
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40021000 	.word	0x40021000

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <NMI_Handler+0x4>

08002800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <HardFault_Handler+0x4>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <MemManage_Handler+0x4>

08002810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <UsageFault_Handler+0x4>

08002820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284e:	f000 f99d 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800285c:	4802      	ldr	r0, [pc, #8]	@ (8002868 <DMA1_Channel1_IRQHandler+0x10>)
 800285e:	f002 feb3 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200009c4 	.word	0x200009c4

0800286c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <DMA1_Channel2_IRQHandler+0x10>)
 8002872:	f002 fea9 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000a24 	.word	0x20000a24

08002880 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <DMA1_Channel3_IRQHandler+0x10>)
 8002886:	f002 fe9f 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200007cc 	.word	0x200007cc

08002894 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <DMA1_Channel4_IRQHandler+0x10>)
 800289a:	f002 fe95 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000880 	.word	0x20000880

080028a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028ac:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <DMA1_Channel5_IRQHandler+0x10>)
 80028ae:	f002 fe8b 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000758 	.word	0x20000758

080028bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028c0:	4802      	ldr	r0, [pc, #8]	@ (80028cc <ADC1_2_IRQHandler+0x10>)
 80028c2:	f000 ff8b 	bl	80037dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200006ec 	.word	0x200006ec

080028d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <TIM1_CC_IRQHandler+0x10>)
 80028d6:	f005 fa55 	bl	8007d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200008e0 	.word	0x200008e0

080028e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_kill>:

int _kill(int pid, int sig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028fe:	f008 fa95 	bl	800ae2c <__errno>
 8002902:	4603      	mov	r3, r0
 8002904:	2216      	movs	r2, #22
 8002906:	601a      	str	r2, [r3, #0]
  return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <_exit>:

void _exit (int status)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ffe7 	bl	80028f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002926:	bf00      	nop
 8002928:	e7fd      	b.n	8002926 <_exit+0x12>

0800292a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e00a      	b.n	8002952 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800293c:	f7fe fc82 	bl	8001244 <__io_getchar>
 8002940:	4601      	mov	r1, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	60ba      	str	r2, [r7, #8]
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	dbf0      	blt.n	800293c <_read+0x12>
  }

  return len;
 800295a:	687b      	ldr	r3, [r7, #4]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e009      	b.n	800298a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	60ba      	str	r2, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fc4e 	bl	8001220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	dbf1      	blt.n	8002976 <_write+0x12>
  }
  return len;
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_close>:

int _close(int file)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029c4:	605a      	str	r2, [r3, #4]
  return 0;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_isatty>:

int _isatty(int file)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	@ (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f008 f9fa 	bl	800ae2c <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20008000 	.word	0x20008000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	20002c10 	.word	0x20002c10
 8002a6c:	20002f28 	.word	0x20002f28

08002a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <SystemInit+0x20>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <SystemInit+0x20>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a94:	480d      	ldr	r0, [pc, #52]	@ (8002acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a98:	f7ff ffea 	bl	8002a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a9c:	480c      	ldr	r0, [pc, #48]	@ (8002ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9e:	490d      	ldr	r1, [pc, #52]	@ (8002ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <LoopForever+0xe>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002aa4:	e002      	b.n	8002aac <LoopCopyDataInit>

08002aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aaa:	3304      	adds	r3, #4

08002aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab0:	d3f9      	bcc.n	8002aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8002adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae0 <LoopForever+0x16>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab8:	e001      	b.n	8002abe <LoopFillZerobss>

08002aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002abc:	3204      	adds	r2, #4

08002abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac0:	d3fb      	bcc.n	8002aba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f008 f9b9 	bl	800ae38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ac6:	f7fe fee7 	bl	8001898 <main>

08002aca <LoopForever>:

LoopForever:
    b LoopForever
 8002aca:	e7fe      	b.n	8002aca <LoopForever>
  ldr   r0, =_estack
 8002acc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	200006d0 	.word	0x200006d0
  ldr r2, =_sidata
 8002ad8:	08013914 	.word	0x08013914
  ldr r2, =_sbss
 8002adc:	200006d0 	.word	0x200006d0
  ldr r4, =_ebss
 8002ae0:	20002f24 	.word	0x20002f24

08002ae4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <COMP1_2_3_IRQHandler>

08002ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f002 f809 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002af6:	2000      	movs	r0, #0
 8002af8:	f000 f80e 	bl	8002b18 <HAL_InitTick>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	71fb      	strb	r3, [r7, #7]
 8002b06:	e001      	b.n	8002b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b08:	f7ff fb54 	bl	80021b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b0c:	79fb      	ldrb	r3, [r7, #7]

}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <HAL_InitTick+0x68>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d022      	beq.n	8002b72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_InitTick+0x6c>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <HAL_InitTick+0x68>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 f814 	bl	8004b6e <HAL_SYSTICK_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d809      	bhi.n	8002b66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b52:	2200      	movs	r2, #0
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5a:	f001 ffe0 	bl	8004b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <HAL_InitTick+0x70>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	e007      	b.n	8002b76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e004      	b.n	8002b76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e001      	b.n	8002b76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000018 	.word	0x20000018
 8002b84:	20000010 	.word	0x20000010
 8002b88:	20000014 	.word	0x20000014

08002b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_IncTick+0x1c>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_IncTick+0x20>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ba8 <HAL_IncTick+0x1c>)
 8002b9c:	6013      	str	r3, [r2, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20002c14 	.word	0x20002c14
 8002bac:	20000018 	.word	0x20000018

08002bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_GetTick+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20002c14 	.word	0x20002c14

08002bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff ffee 	bl	8002bb0 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d004      	beq.n	8002bec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <HAL_Delay+0x40>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bec:	bf00      	nop
 8002bee:	f7ff ffdf 	bl	8002bb0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d8f7      	bhi.n	8002bee <HAL_Delay+0x26>
  {
  }
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000018 	.word	0x20000018

08002c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3360      	adds	r3, #96	@ 0x60
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <LL_ADC_SetOffset+0x44>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	03fff000 	.word	0x03fff000

08002cbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3360      	adds	r3, #96	@ 0x60
 8002cca:	461a      	mov	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3360      	adds	r3, #96	@ 0x60
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b087      	sub	sp, #28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3360      	adds	r3, #96	@ 0x60
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3360      	adds	r3, #96	@ 0x60
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	615a      	str	r2, [r3, #20]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b087      	sub	sp, #28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3330      	adds	r3, #48	@ 0x30
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	211f      	movs	r1, #31
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	f003 011f 	and.w	r1, r3, #31
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3314      	adds	r3, #20
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0e5b      	lsrs	r3, r3, #25
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	0d1b      	lsrs	r3, r3, #20
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	2107      	movs	r1, #7
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	0d1b      	lsrs	r3, r3, #20
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0318 	and.w	r3, r3, #24
 8002ece:	4908      	ldr	r1, [pc, #32]	@ (8002ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ed0:	40d9      	lsrs	r1, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	0007ffff 	.word	0x0007ffff

08002ef4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 031f 	and.w	r3, r3, #31
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6093      	str	r3, [r2, #8]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fb4:	d101      	bne.n	8002fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003004:	f043 0202 	orr.w	r2, r3, #2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <LL_ADC_IsEnabled+0x18>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <LL_ADC_IsEnabled+0x1a>
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d101      	bne.n	8003056 <LL_ADC_IsDisableOngoing+0x18>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_IsDisableOngoing+0x1a>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800309c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a0:	f043 0210 	orr.w	r2, r3, #16
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d101      	bne.n	80030cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b08      	cmp	r3, #8
 8003114:	d101      	bne.n	800311a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b089      	sub	sp, #36	@ 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e167      	b.n	8003412 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff f853 	bl	80021fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fef1 	bl	8002f50 <LL_ADC_IsDeepPowerDownEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fed7 	bl	8002f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff0c 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d115      	bne.n	80031ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fef0 	bl	8002f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003198:	4ba0      	ldr	r3, [pc, #640]	@ (800341c <HAL_ADC_Init+0x2f4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	4aa0      	ldr	r2, [pc, #640]	@ (8003420 <HAL_ADC_Init+0x2f8>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031ac:	e002      	b.n	80031b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff feee 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	f043 0210 	orr.w	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff62 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 80031f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8100 	bne.w	8003400 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 80fc 	bne.w	8003400 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003210:	f043 0202 	orr.w	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fefb 	bl	8003018 <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003228:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800322c:	f7ff fef4 	bl	8003018 <LL_ADC_IsEnabled>
 8003230:	4604      	mov	r4, r0
 8003232:	487c      	ldr	r0, [pc, #496]	@ (8003424 <HAL_ADC_Init+0x2fc>)
 8003234:	f7ff fef0 	bl	8003018 <LL_ADC_IsEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	4323      	orrs	r3, r4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4619      	mov	r1, r3
 8003246:	4878      	ldr	r0, [pc, #480]	@ (8003428 <HAL_ADC_Init+0x300>)
 8003248:	f7ff fce0 	bl	8002c0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7f5b      	ldrb	r3, [r3, #29]
 8003250:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003256:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800325c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003262:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800326a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003276:	2b01      	cmp	r3, #1
 8003278:	d106      	bne.n	8003288 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	045b      	lsls	r3, r3, #17
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b60      	ldr	r3, [pc, #384]	@ (800342c <HAL_ADC_Init+0x304>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff15 	bl	8003102 <LL_ADC_INJ_IsConversionOngoing>
 80032d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d16d      	bne.n	80033bc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d16a      	bne.n	80033bc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d017      	beq.n	8003348 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003326:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003330:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003334:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6911      	ldr	r1, [r2, #16]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003346:	e013      	b.n	8003370 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003356:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003368:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800336c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d118      	bne.n	80033ac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800339c:	430a      	orrs	r2, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	e007      	b.n	80033bc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10c      	bne.n	80033de <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f023 010f 	bic.w	r1, r3, #15
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
 80033dc:	e007      	b.n	80033ee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020f 	bic.w	r2, r2, #15
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	f043 0201 	orr.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033fe:	e007      	b.n	8003410 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003410:	7ffb      	ldrb	r3, [r7, #31]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	@ 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop
 800341c:	20000010 	.word	0x20000010
 8003420:	053e2d63 	.word	0x053e2d63
 8003424:	50000100 	.word	0x50000100
 8003428:	50000300 	.word	0x50000300
 800342c:	fff04007 	.word	0xfff04007

08003430 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003438:	4859      	ldr	r0, [pc, #356]	@ (80035a0 <HAL_ADC_Start+0x170>)
 800343a:	f7ff fd5b 	bl	8002ef4 <LL_ADC_GetMultimode>
 800343e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fe35 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 809f 	bne.w	8003590 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_ADC_Start+0x30>
 800345c:	2302      	movs	r3, #2
 800345e:	e09a      	b.n	8003596 <HAL_ADC_Start+0x166>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f001 f89b 	bl	80045a4 <ADC_Enable>
 800346e:	4603      	mov	r3, r0
 8003470:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 8086 	bne.w	8003586 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a44      	ldr	r2, [pc, #272]	@ (80035a4 <HAL_ADC_Start+0x174>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d002      	beq.n	800349e <HAL_ADC_Start+0x6e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	e001      	b.n	80034a2 <HAL_ADC_Start+0x72>
 800349e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d002      	beq.n	80034b0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	f023 0206 	bic.w	r2, r3, #6
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80034d6:	e002      	b.n	80034de <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	221c      	movs	r2, #28
 80034e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2c      	ldr	r2, [pc, #176]	@ (80035a4 <HAL_ADC_Start+0x174>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d002      	beq.n	80034fe <HAL_ADC_Start+0xce>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	e001      	b.n	8003502 <HAL_ADC_Start+0xd2>
 80034fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	4293      	cmp	r3, r2
 8003508:	d008      	beq.n	800351c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d002      	beq.n	800351c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b09      	cmp	r3, #9
 800351a:	d114      	bne.n	8003546 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003532:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fd90 	bl	8003064 <LL_ADC_REG_StartConversion>
 8003544:	e026      	b.n	8003594 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <HAL_ADC_Start+0x174>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d002      	beq.n	8003562 <HAL_ADC_Start+0x132>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	e001      	b.n	8003566 <HAL_ADC_Start+0x136>
 8003562:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003566:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800357c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003584:	e006      	b.n	8003594 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800358e:	e001      	b.n	8003594 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	50000300 	.word	0x50000300
 80035a4:	50000100 	.word	0x50000100

080035a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_ADC_Stop+0x16>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e023      	b.n	8003606 <HAL_ADC_Stop+0x5e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035c6:	2103      	movs	r1, #3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 ff2f 	bl	800442c <ADC_ConversionStop>
 80035ce:	4603      	mov	r3, r0
 80035d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d111      	bne.n	80035fc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f001 f869 	bl	80046b0 <ADC_Disable>
 80035de:	4603      	mov	r3, r0
 80035e0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361a:	4867      	ldr	r0, [pc, #412]	@ (80037b8 <HAL_ADC_PollForConversion+0x1a8>)
 800361c:	f7ff fc6a 	bl	8002ef4 <LL_ADC_GetMultimode>
 8003620:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b08      	cmp	r3, #8
 8003628:	d102      	bne.n	8003630 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800362a:	2308      	movs	r3, #8
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e02a      	b.n	8003686 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d002      	beq.n	8003642 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b09      	cmp	r3, #9
 8003640:	d111      	bne.n	8003666 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0a6      	b.n	80037ae <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003660:	2304      	movs	r3, #4
 8003662:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003664:	e00f      	b.n	8003686 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003666:	4854      	ldr	r0, [pc, #336]	@ (80037b8 <HAL_ADC_PollForConversion+0x1a8>)
 8003668:	f7ff fc52 	bl	8002f10 <LL_ADC_GetMultiDMATransfer>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e095      	b.n	80037ae <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003682:	2304      	movs	r3, #4
 8003684:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003686:	f7ff fa93 	bl	8002bb0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800368c:	e021      	b.n	80036d2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d01d      	beq.n	80036d2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003696:	f7ff fa8b 	bl	8002bb0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <HAL_ADC_PollForConversion+0x9c>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d112      	bne.n	80036d2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e06d      	b.n	80037ae <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0d6      	beq.n	800368e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fb5d 	bl	8002db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7f5b      	ldrb	r3, [r3, #29]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d118      	bne.n	8003736 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d111      	bne.n	8003736 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a20      	ldr	r2, [pc, #128]	@ (80037bc <HAL_ADC_PollForConversion+0x1ac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d002      	beq.n	8003746 <HAL_ADC_PollForConversion+0x136>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	e001      	b.n	800374a <HAL_ADC_PollForConversion+0x13a>
 8003746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	4293      	cmp	r3, r2
 8003750:	d008      	beq.n	8003764 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d002      	beq.n	8003764 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b09      	cmp	r3, #9
 8003762:	d104      	bne.n	800376e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e00d      	b.n	800378a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <HAL_ADC_PollForConversion+0x1ac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d002      	beq.n	800377e <HAL_ADC_PollForConversion+0x16e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	e001      	b.n	8003782 <HAL_ADC_PollForConversion+0x172>
 800377e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003782:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d104      	bne.n	800379a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e008      	b.n	80037ac <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	220c      	movs	r2, #12
 80037aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	50000300 	.word	0x50000300
 80037bc:	50000100 	.word	0x50000100

080037c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037f8:	4883      	ldr	r0, [pc, #524]	@ (8003a08 <HAL_ADC_IRQHandler+0x22c>)
 80037fa:	f7ff fb7b 	bl	8002ef4 <LL_ADC_GetMultimode>
 80037fe:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_ADC_IRQHandler+0x5e>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 ffec 	bl	800480a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2202      	movs	r2, #2
 8003838:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_ADC_IRQHandler+0x72>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8085 	beq.w	8003964 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d07f      	beq.n	8003964 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fa95 	bl	8002db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d064      	beq.n	8003956 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5e      	ldr	r2, [pc, #376]	@ (8003a0c <HAL_ADC_IRQHandler+0x230>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d002      	beq.n	800389c <HAL_ADC_IRQHandler+0xc0>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	e001      	b.n	80038a0 <HAL_ADC_IRQHandler+0xc4>
 800389c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d008      	beq.n	80038ba <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d002      	beq.n	80038ba <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b09      	cmp	r3, #9
 80038b8:	d104      	bne.n	80038c4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	e00d      	b.n	80038e0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a50      	ldr	r2, [pc, #320]	@ (8003a0c <HAL_ADC_IRQHandler+0x230>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d002      	beq.n	80038d4 <HAL_ADC_IRQHandler+0xf8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	e001      	b.n	80038d8 <HAL_ADC_IRQHandler+0xfc>
 80038d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d135      	bne.n	8003956 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d12e      	bne.n	8003956 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fbd9 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11a      	bne.n	800393e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 020c 	bic.w	r2, r2, #12
 8003916:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d112      	bne.n	8003956 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800393c:	e00b      	b.n	8003956 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f95a 	bl	8003c10 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	220c      	movs	r2, #12
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_ADC_IRQHandler+0x19c>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 809e 	beq.w	8003ac0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8098 	beq.w	8003ac0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fa3e 	bl	8002e2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff f9f9 	bl	8002db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a11      	ldr	r2, [pc, #68]	@ (8003a0c <HAL_ADC_IRQHandler+0x230>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d002      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x1f4>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e001      	b.n	80039d4 <HAL_ADC_IRQHandler+0x1f8>
 80039d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	4293      	cmp	r3, r2
 80039da:	d008      	beq.n	80039ee <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d002      	beq.n	80039ee <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b07      	cmp	r3, #7
 80039ec:	d104      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	623b      	str	r3, [r7, #32]
 80039f6:	e011      	b.n	8003a1c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a03      	ldr	r2, [pc, #12]	@ (8003a0c <HAL_ADC_IRQHandler+0x230>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d006      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x234>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	e005      	b.n	8003a14 <HAL_ADC_IRQHandler+0x238>
 8003a08:	50000300 	.word	0x50000300
 8003a0c:	50000100 	.word	0x50000100
 8003a10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a14:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d047      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x260>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03f      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d13a      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a46:	2b40      	cmp	r3, #64	@ 0x40
 8003a48:	d133      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d12e      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fb52 	bl	8003102 <LL_ADC_INJ_IsConversionOngoing>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d11a      	bne.n	8003a9a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a72:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d112      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a98:	e00b      	b.n	8003ab2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	f043 0210 	orr.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fe81 	bl	80047ba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2260      	movs	r2, #96	@ 0x60
 8003abe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d011      	beq.n	8003aee <HAL_ADC_IRQHandler+0x312>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f89f 	bl	8003c24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <HAL_ADC_IRQHandler+0x342>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fe67 	bl	80047e2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x372>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fe59 	bl	80047f6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d036      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x3ea>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d031      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6e:	e014      	b.n	8003b9a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b76:	4825      	ldr	r0, [pc, #148]	@ (8003c0c <HAL_ADC_IRQHandler+0x430>)
 8003b78:	f7ff f9ca 	bl	8002f10 <LL_ADC_GetMultiDMATransfer>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003b82:	2301      	movs	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b86:	e008      	b.n	8003b9a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003b96:	2301      	movs	r3, #1
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10e      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f83d 	bl	8003c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x426>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	f043 0208 	orr.w	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fde6 	bl	80047ce <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c02:	bf00      	nop
 8003c04:	3728      	adds	r7, #40	@ 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	50000300 	.word	0x50000300

08003c10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b0b6      	sub	sp, #216	@ 0xd8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x22>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e3c8      	b.n	8004400 <HAL_ADC_ConfigChannel+0x7b4>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fa1a 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 83ad 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	f7ff f89e 	bl	8002dd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fa08 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003ca4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fa28 	bl	8003102 <LL_ADC_INJ_IsConversionOngoing>
 8003cb2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 81d9 	bne.w	8004072 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 81d4 	bne.w	8004072 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cd2:	d10f      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7ff f8b8 	bl	8002e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f84c 	bl	8002d8a <LL_ADC_SetSamplingTimeCommonConfig>
 8003cf2:	e00e      	b.n	8003d12 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f7ff f8a7 	bl	8002e54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff f83c 	bl	8002d8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	08db      	lsrs	r3, r3, #3
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d022      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6919      	ldr	r1, [r3, #16]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d44:	f7fe ff96 	bl	8002c74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6919      	ldr	r1, [r3, #16]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f7fe ffe2 	bl	8002d1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x124>
 8003d6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d6e:	e000      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x126>
 8003d70:	2300      	movs	r3, #0
 8003d72:	461a      	mov	r2, r3
 8003d74:	f7fe ffee 	bl	8002d54 <LL_ADC_SetOffsetSaturation>
 8003d78:	e17b      	b.n	8004072 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe ff9b 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x15a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe ff90 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	e01e      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x198>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe ff85 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e004      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x1b0>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	e018      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x1e2>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e004      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d106      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe ff54 	bl	8002ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe ff38 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x220>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe ff2d 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	0e9b      	lsrs	r3, r3, #26
 8003e66:	f003 021f 	and.w	r2, r3, #31
 8003e6a:	e01e      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x25e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe ff22 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e004      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x276>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	0e9b      	lsrs	r3, r3, #26
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	e018      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x2a8>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	e004      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d106      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2101      	movs	r1, #1
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fef1 	bl	8002ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fed5 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x2e6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2102      	movs	r1, #2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe feca 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	0e9b      	lsrs	r3, r3, #26
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	e01e      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x324>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2102      	movs	r1, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe febf 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e004      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x33c>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0e9b      	lsrs	r3, r3, #26
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	e016      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x36a>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e004      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d106      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fe90 	bl	8002ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2103      	movs	r1, #3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fe74 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x3a8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2103      	movs	r1, #3
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe fe69 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8003fea:	4603      	mov	r3, r0
 8003fec:	0e9b      	lsrs	r3, r3, #26
 8003fee:	f003 021f 	and.w	r2, r3, #31
 8003ff2:	e017      	b.n	8004024 <HAL_ADC_ConfigChannel+0x3d8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2103      	movs	r1, #3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fe5e 	bl	8002cbc <LL_ADC_GetOffsetChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800400c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800400e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004016:	2320      	movs	r3, #32
 8004018:	e003      	b.n	8004022 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800401a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_ADC_ConfigChannel+0x3f0>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	e011      	b.n	8004060 <HAL_ADC_ConfigChannel+0x414>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800404a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800404c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800404e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e003      	b.n	8004060 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004060:	429a      	cmp	r2, r3
 8004062:	d106      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	2103      	movs	r1, #3
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fe3b 	bl	8002ce8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe ffce 	bl	8003018 <LL_ADC_IsEnabled>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	f040 8140 	bne.w	8004304 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6819      	ldr	r1, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	461a      	mov	r2, r3
 8004092:	f7fe ff0b 	bl	8002eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4a8f      	ldr	r2, [pc, #572]	@ (80042d8 <HAL_ADC_ConfigChannel+0x68c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	f040 8131 	bne.w	8004304 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x47e>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	3301      	adds	r3, #1
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2b09      	cmp	r3, #9
 80040c0:	bf94      	ite	ls
 80040c2:	2301      	movls	r3, #1
 80040c4:	2300      	movhi	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e019      	b.n	80040fe <HAL_ADC_ConfigChannel+0x4b2>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80040d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040da:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80040dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e003      	b.n	80040ee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80040e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	bf94      	ite	ls
 80040f8:	2301      	movls	r3, #1
 80040fa:	2300      	movhi	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d079      	beq.n	80041f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <HAL_ADC_ConfigChannel+0x4d2>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	3301      	adds	r3, #1
 8004116:	069b      	lsls	r3, r3, #26
 8004118:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800411c:	e015      	b.n	800414a <HAL_ADC_ConfigChannel+0x4fe>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800412c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004136:	2320      	movs	r3, #32
 8004138:	e003      	b.n	8004142 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800413a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	3301      	adds	r3, #1
 8004144:	069b      	lsls	r3, r3, #26
 8004146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_ADC_ConfigChannel+0x51e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	3301      	adds	r3, #1
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f303 	lsl.w	r3, r1, r3
 8004168:	e017      	b.n	800419a <HAL_ADC_ConfigChannel+0x54e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800417c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e003      	b.n	800418e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	ea42 0103 	orr.w	r1, r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x574>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	0e9b      	lsrs	r3, r3, #26
 80041b0:	3301      	adds	r3, #1
 80041b2:	f003 021f 	and.w	r2, r3, #31
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	051b      	lsls	r3, r3, #20
 80041be:	e018      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x5a6>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80041ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80041d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80041d8:	2320      	movs	r3, #32
 80041da:	e003      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80041dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	f003 021f 	and.w	r2, r3, #31
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041f2:	430b      	orrs	r3, r1
 80041f4:	e081      	b.n	80042fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x5c6>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	3301      	adds	r3, #1
 800420a:	069b      	lsls	r3, r3, #26
 800420c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004210:	e015      	b.n	800423e <HAL_ADC_ConfigChannel+0x5f2>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800422a:	2320      	movs	r3, #32
 800422c:	e003      	b.n	8004236 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	3301      	adds	r3, #1
 8004238:	069b      	lsls	r3, r3, #26
 800423a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_ADC_ConfigChannel+0x612>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	3301      	adds	r3, #1
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	e017      	b.n	800428e <HAL_ADC_ConfigChannel+0x642>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	61fb      	str	r3, [r7, #28]
  return result;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004276:	2320      	movs	r3, #32
 8004278:	e003      	b.n	8004282 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	3301      	adds	r3, #1
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	ea42 0103 	orr.w	r1, r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x66e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	3301      	adds	r3, #1
 80042a6:	f003 021f 	and.w	r2, r3, #31
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	3b1e      	subs	r3, #30
 80042b2:	051b      	lsls	r3, r3, #20
 80042b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042b8:	e01e      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x6ac>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	613b      	str	r3, [r7, #16]
  return result;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80042d2:	2320      	movs	r3, #32
 80042d4:	e006      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x698>
 80042d6:	bf00      	nop
 80042d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	f003 021f 	and.w	r2, r3, #31
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	3b1e      	subs	r3, #30
 80042f2:	051b      	lsls	r3, r3, #20
 80042f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042fe:	4619      	mov	r1, r3
 8004300:	f7fe fda8 	bl	8002e54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b3f      	ldr	r3, [pc, #252]	@ (8004408 <HAL_ADC_ConfigChannel+0x7bc>)
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d071      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004310:	483e      	ldr	r0, [pc, #248]	@ (800440c <HAL_ADC_ConfigChannel+0x7c0>)
 8004312:	f7fe fca1 	bl	8002c58 <LL_ADC_GetCommonPathInternalCh>
 8004316:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3c      	ldr	r2, [pc, #240]	@ (8004410 <HAL_ADC_ConfigChannel+0x7c4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_ADC_ConfigChannel+0x6e2>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a3a      	ldr	r2, [pc, #232]	@ (8004414 <HAL_ADC_ConfigChannel+0x7c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d127      	bne.n	800437e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800432e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d121      	bne.n	800437e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004342:	d157      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004348:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800434c:	4619      	mov	r1, r3
 800434e:	482f      	ldr	r0, [pc, #188]	@ (800440c <HAL_ADC_ConfigChannel+0x7c0>)
 8004350:	f7fe fc6f 	bl	8002c32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004354:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <HAL_ADC_ConfigChannel+0x7cc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	4a30      	ldr	r2, [pc, #192]	@ (800441c <HAL_ADC_ConfigChannel+0x7d0>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800436e:	e002      	b.n	8004376 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f9      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800437c:	e03a      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a27      	ldr	r2, [pc, #156]	@ (8004420 <HAL_ADC_ConfigChannel+0x7d4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d113      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800438c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10d      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	@ (8004424 <HAL_ADC_ConfigChannel+0x7d8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d02a      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800439e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	4619      	mov	r1, r3
 80043a8:	4818      	ldr	r0, [pc, #96]	@ (800440c <HAL_ADC_ConfigChannel+0x7c0>)
 80043aa:	f7fe fc42 	bl	8002c32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043ae:	e021      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_ADC_ConfigChannel+0x7dc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d11c      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <HAL_ADC_ConfigChannel+0x7d8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d011      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043d8:	4619      	mov	r1, r3
 80043da:	480c      	ldr	r0, [pc, #48]	@ (800440c <HAL_ADC_ConfigChannel+0x7c0>)
 80043dc:	f7fe fc29 	bl	8002c32 <LL_ADC_SetCommonPathInternalCh>
 80043e0:	e008      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004400:	4618      	mov	r0, r3
 8004402:	37d8      	adds	r7, #216	@ 0xd8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	80080000 	.word	0x80080000
 800440c:	50000300 	.word	0x50000300
 8004410:	c3210000 	.word	0xc3210000
 8004414:	90c00010 	.word	0x90c00010
 8004418:	20000010 	.word	0x20000010
 800441c:	053e2d63 	.word	0x053e2d63
 8004420:	c7520000 	.word	0xc7520000
 8004424:	50000100 	.word	0x50000100
 8004428:	cb840000 	.word	0xcb840000

0800442c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fe36 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8004448:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fe57 	bl	8003102 <LL_ADC_INJ_IsConversionOngoing>
 8004454:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8098 	beq.w	8004594 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02a      	beq.n	80044c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	7f5b      	ldrb	r3, [r3, #29]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d126      	bne.n	80044c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7f1b      	ldrb	r3, [r3, #28]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d122      	bne.n	80044c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004482:	2301      	movs	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004486:	e014      	b.n	80044b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4a45      	ldr	r2, [pc, #276]	@ (80045a0 <ADC_ConversionStop+0x174>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d90d      	bls.n	80044ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f043 0210 	orr.w	r2, r3, #16
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a0:	f043 0201 	orr.w	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e074      	b.n	8004596 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d1e3      	bne.n	8004488 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2240      	movs	r2, #64	@ 0x40
 80044c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d014      	beq.n	80044f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fdee 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fdab 	bl	800303e <LL_ADC_IsDisableOngoing>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fdca 	bl	800308c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d014      	beq.n	8004528 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fdfd 	bl	8003102 <LL_ADC_INJ_IsConversionOngoing>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00c      	beq.n	8004528 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fd93 	bl	800303e <LL_ADC_IsDisableOngoing>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fdd9 	bl	80030da <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d005      	beq.n	800453a <ADC_ConversionStop+0x10e>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d105      	bne.n	8004540 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004534:	230c      	movs	r3, #12
 8004536:	617b      	str	r3, [r7, #20]
        break;
 8004538:	e005      	b.n	8004546 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800453a:	2308      	movs	r3, #8
 800453c:	617b      	str	r3, [r7, #20]
        break;
 800453e:	e002      	b.n	8004546 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004540:	2304      	movs	r3, #4
 8004542:	617b      	str	r3, [r7, #20]
        break;
 8004544:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004546:	f7fe fb33 	bl	8002bb0 <HAL_GetTick>
 800454a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800454c:	e01b      	b.n	8004586 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800454e:	f7fe fb2f 	bl	8002bb0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b05      	cmp	r3, #5
 800455a:	d914      	bls.n	8004586 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456e:	f043 0210 	orr.w	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e007      	b.n	8004596 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1dc      	bne.n	800454e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	a33fffff 	.word	0xa33fffff

080045a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe fd2f 	bl	8003018 <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d169      	bne.n	8004694 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	4b36      	ldr	r3, [pc, #216]	@ (80046a0 <ADC_Enable+0xfc>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e055      	b.n	8004696 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fcea 	bl	8002fc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045f4:	482b      	ldr	r0, [pc, #172]	@ (80046a4 <ADC_Enable+0x100>)
 80045f6:	f7fe fb2f 	bl	8002c58 <LL_ADC_GetCommonPathInternalCh>
 80045fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004600:	2b00      	cmp	r3, #0
 8004602:	d013      	beq.n	800462c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004604:	4b28      	ldr	r3, [pc, #160]	@ (80046a8 <ADC_Enable+0x104>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <ADC_Enable+0x108>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800461e:	e002      	b.n	8004626 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3b01      	subs	r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f9      	bne.n	8004620 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800462c:	f7fe fac0 	bl	8002bb0 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004632:	e028      	b.n	8004686 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fced 	bl	8003018 <LL_ADC_IsEnabled>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe fcbd 	bl	8002fc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800464e:	f7fe faaf 	bl	8002bb0 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d914      	bls.n	8004686 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d00d      	beq.n	8004686 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466e:	f043 0210 	orr.w	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e007      	b.n	8004696 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d1cf      	bne.n	8004634 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	8000003f 	.word	0x8000003f
 80046a4:	50000300 	.word	0x50000300
 80046a8:	20000010 	.word	0x20000010
 80046ac:	053e2d63 	.word	0x053e2d63

080046b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fcbe 	bl	800303e <LL_ADC_IsDisableOngoing>
 80046c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fca5 	bl	8003018 <LL_ADC_IsEnabled>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d047      	beq.n	8004764 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d144      	bne.n	8004764 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030d 	and.w	r3, r3, #13
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10c      	bne.n	8004702 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fc7f 	bl	8002ff0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2203      	movs	r2, #3
 80046f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046fa:	f7fe fa59 	bl	8002bb0 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004700:	e029      	b.n	8004756 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004706:	f043 0210 	orr.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e023      	b.n	8004766 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800471e:	f7fe fa47 	bl	8002bb0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d914      	bls.n	8004756 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	f043 0210 	orr.w	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e007      	b.n	8004766 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1dc      	bne.n	800471e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <LL_ADC_IsEnabled>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <LL_ADC_IsEnabled+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_ADC_IsEnabled+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_ADC_REG_IsConversionOngoing>:
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d101      	bne.n	80047ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b0a1      	sub	sp, #132	@ 0x84
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800483a:	2302      	movs	r3, #2
 800483c:	e08b      	b.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004846:	2300      	movs	r3, #0
 8004848:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800484a:	2300      	movs	r3, #0
 800484c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004856:	d102      	bne.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004858:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	e001      	b.n	8004862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e06a      	b.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff86 	bl	8004794 <LL_ADC_REG_IsConversionOngoing>
 8004888:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff80 	bl	8004794 <LL_ADC_REG_IsConversionOngoing>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d14c      	bne.n	8004934 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800489a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489c:	2b00      	cmp	r3, #0
 800489e:	d149      	bne.n	8004934 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048a0:	4b30      	ldr	r3, [pc, #192]	@ (8004964 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80048a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048be:	035b      	lsls	r3, r3, #13
 80048c0:	430b      	orrs	r3, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048cc:	f7ff ff4f 	bl	800476e <LL_ADC_IsEnabled>
 80048d0:	4604      	mov	r4, r0
 80048d2:	4823      	ldr	r0, [pc, #140]	@ (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80048d4:	f7ff ff4b 	bl	800476e <LL_ADC_IsEnabled>
 80048d8:	4603      	mov	r3, r0
 80048da:	4323      	orrs	r3, r4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d133      	bne.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048e8:	f023 030f 	bic.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	6811      	ldr	r1, [r2, #0]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048fc:	e024      	b.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004908:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800490a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800490e:	f7ff ff2e 	bl	800476e <LL_ADC_IsEnabled>
 8004912:	4604      	mov	r4, r0
 8004914:	4812      	ldr	r0, [pc, #72]	@ (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004916:	f7ff ff2a 	bl	800476e <LL_ADC_IsEnabled>
 800491a:	4603      	mov	r3, r0
 800491c:	4323      	orrs	r3, r4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d112      	bne.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800492a:	f023 030f 	bic.w	r3, r3, #15
 800492e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004930:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004932:	e009      	b.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004946:	e000      	b.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004952:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004956:	4618      	mov	r0, r3
 8004958:	3784      	adds	r7, #132	@ 0x84
 800495a:	46bd      	mov	sp, r7
 800495c:	bd90      	pop	{r4, r7, pc}
 800495e:	bf00      	nop
 8004960:	50000100 	.word	0x50000100
 8004964:	50000300 	.word	0x50000300

08004968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499a:	4a04      	ldr	r2, [pc, #16]	@ (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	60d3      	str	r3, [r2, #12]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <__NVIC_GetPriorityGrouping+0x18>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 0307 	and.w	r3, r3, #7
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db0b      	blt.n	80049f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4907      	ldr	r1, [pc, #28]	@ (8004a04 <__NVIC_EnableIRQ+0x38>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2001      	movs	r0, #1
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db0a      	blt.n	8004a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	490c      	ldr	r1, [pc, #48]	@ (8004a54 <__NVIC_SetPriority+0x4c>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a30:	e00a      	b.n	8004a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4908      	ldr	r1, [pc, #32]	@ (8004a58 <__NVIC_SetPriority+0x50>)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	440b      	add	r3, r1
 8004a46:	761a      	strb	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	@ 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf28      	it	cs
 8004a7a:	2304      	movcs	r3, #4
 8004a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d902      	bls.n	8004a8c <NVIC_EncodePriority+0x30>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b03      	subs	r3, #3
 8004a8a:	e000      	b.n	8004a8e <NVIC_EncodePriority+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	4313      	orrs	r3, r2
         );
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3724      	adds	r7, #36	@ 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ad4:	d301      	bcc.n	8004ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00f      	b.n	8004afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ada:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <SysTick_Config+0x40>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae2:	210f      	movs	r1, #15
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f7ff ff8e 	bl	8004a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <SysTick_Config+0x40>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af2:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <SysTick_Config+0x40>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	e000e010 	.word	0xe000e010

08004b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff29 	bl	8004968 <__NVIC_SetPriorityGrouping>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b2c:	f7ff ff40 	bl	80049b0 <__NVIC_GetPriorityGrouping>
 8004b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ff90 	bl	8004a5c <NVIC_EncodePriority>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff5f 	bl	8004a08 <__NVIC_SetPriority>
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff33 	bl	80049cc <__NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffa4 	bl	8004ac4 <SysTick_Config>
 8004b7c:	4603      	mov	r3, r0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e014      	b.n	8004bc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	791b      	ldrb	r3, [r3, #4]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fd fbb1 	bl	8002310 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b2      	b.n	8004d4a <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	795b      	ldrb	r3, [r3, #5]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_DAC_Start_DMA+0x24>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e0ac      	b.n	8004d4a <HAL_DAC_Start_DMA+0x17e>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d129      	bne.n	8004c56 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4a53      	ldr	r2, [pc, #332]	@ (8004d54 <HAL_DAC_Start_DMA+0x188>)
 8004c08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4a52      	ldr	r2, [pc, #328]	@ (8004d58 <HAL_DAC_Start_DMA+0x18c>)
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a51      	ldr	r2, [pc, #324]	@ (8004d5c <HAL_DAC_Start_DMA+0x190>)
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c28:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_DAC_Start_DMA+0x6c>
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d005      	beq.n	8004c42 <HAL_DAC_Start_DMA+0x76>
 8004c36:	e009      	b.n	8004c4c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	61bb      	str	r3, [r7, #24]
        break;
 8004c40:	e033      	b.n	8004caa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	61bb      	str	r3, [r7, #24]
        break;
 8004c4a:	e02e      	b.n	8004caa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3310      	adds	r3, #16
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e029      	b.n	8004caa <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4a41      	ldr	r2, [pc, #260]	@ (8004d60 <HAL_DAC_Start_DMA+0x194>)
 8004c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a40      	ldr	r2, [pc, #256]	@ (8004d64 <HAL_DAC_Start_DMA+0x198>)
 8004c64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d68 <HAL_DAC_Start_DMA+0x19c>)
 8004c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004c7c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_DAC_Start_DMA+0xc0>
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d005      	beq.n	8004c96 <HAL_DAC_Start_DMA+0xca>
 8004c8a:	e009      	b.n	8004ca0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	61bb      	str	r3, [r7, #24]
        break;
 8004c94:	e009      	b.n	8004caa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3318      	adds	r3, #24
 8004c9c:	61bb      	str	r3, [r7, #24]
        break;
 8004c9e:	e004      	b.n	8004caa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	331c      	adds	r3, #28
 8004ca6:	61bb      	str	r3, [r7, #24]
        break;
 8004ca8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6898      	ldr	r0, [r3, #8]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	f000 fba9 	bl	8005420 <HAL_DMA_Start_IT>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e010      	b.n	8004cf6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68d8      	ldr	r0, [r3, #12]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	f000 fb97 	bl	8005420 <HAL_DMA_Start_IT>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11c      	bne.n	8004d3c <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2201      	movs	r2, #1
 8004d10:	409a      	lsls	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_DAC_Start_DMA+0x1a0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	4a13      	ldr	r2, [pc, #76]	@ (8004d70 <HAL_DAC_Start_DMA+0x1a4>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	3301      	adds	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d2c:	e002      	b.n	8004d34 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f9      	bne.n	8004d2e <HAL_DAC_Start_DMA+0x162>
 8004d3a:	e005      	b.n	8004d48 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	080051bd 	.word	0x080051bd
 8004d58:	080051df 	.word	0x080051df
 8004d5c:	080051fb 	.word	0x080051fb
 8004d60:	08005265 	.word	0x08005265
 8004d64:	08005287 	.word	0x08005287
 8004d68:	080052a3 	.word	0x080052a3
 8004d6c:	20000010 	.word	0x20000010
 8004d70:	053e2d63 	.word	0x053e2d63

08004d74 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e03e      	b.n	8004e06 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	400a      	ands	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2201      	movs	r2, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43da      	mvns	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fba2 	bl	8005516 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e00c      	b.n	8004dfe <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fb94 	bl	8005516 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004dfc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_DAC_ConfigChannel+0x1c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e19e      	b.n	80051aa <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	795b      	ldrb	r3, [r3, #5]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_DAC_ConfigChannel+0x2c>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e198      	b.n	80051aa <HAL_DAC_ConfigChannel+0x35e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2202      	movs	r2, #2
 8004e82:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d17a      	bne.n	8004f82 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fe90 	bl	8002bb0 <HAL_GetTick>
 8004e90:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d13d      	bne.n	8004f14 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e98:	e018      	b.n	8004ecc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e9a:	f7fd fe89 	bl	8002bb0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d911      	bls.n	8004ecc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f043 0208 	orr.w	r2, r3, #8
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e16e      	b.n	80051aa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1df      	bne.n	8004e9a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ee4:	e020      	b.n	8004f28 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ee6:	f7fd fe63 	bl	8002bb0 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d90f      	bls.n	8004f14 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	da0a      	bge.n	8004f14 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f043 0208 	orr.w	r2, r3, #8
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e14a      	b.n	80051aa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	dbe3      	blt.n	8004ee6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f26:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	ea02 0103 	and.w	r1, r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	21ff      	movs	r1, #255	@ 0xff
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	ea02 0103 	and.w	r1, r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d11d      	bne.n	8004fc6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	221f      	movs	r2, #31
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fde:	4013      	ands	r3, r2
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d102      	bne.n	8004ff0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
 8004fee:	e00f      	b.n	8005010 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d102      	bne.n	8004ffe <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	623b      	str	r3, [r7, #32]
 8004ffc:	e008      	b.n	8005010 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005006:	2301      	movs	r3, #1
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	e001      	b.n	8005010 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800500c:	2300      	movs	r3, #0
 800500e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	6a3a      	ldr	r2, [r7, #32]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005032:	4013      	ands	r3, r2
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	791b      	ldrb	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d102      	bne.n	8005044 <HAL_DAC_ConfigChannel+0x1f8>
 800503e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005042:	e000      	b.n	8005046 <HAL_DAC_ConfigChannel+0x1fa>
 8005044:	2300      	movs	r3, #0
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	4013      	ands	r3, r2
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	795b      	ldrb	r3, [r3, #5]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d102      	bne.n	8005070 <HAL_DAC_ConfigChannel+0x224>
 800506a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800506e:	e000      	b.n	8005072 <HAL_DAC_ConfigChannel+0x226>
 8005070:	2300      	movs	r3, #0
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d114      	bne.n	80050b2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005088:	f001 ff6c 	bl	8006f64 <HAL_RCC_GetHCLKFreq>
 800508c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4a48      	ldr	r2, [pc, #288]	@ (80051b4 <HAL_DAC_ConfigChannel+0x368>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d904      	bls.n	80050a0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
 800509e:	e00f      	b.n	80050c0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4a45      	ldr	r2, [pc, #276]	@ (80051b8 <HAL_DAC_ConfigChannel+0x36c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d90a      	bls.n	80050be <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b0:	e006      	b.n	80050c0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b8:	4313      	orrs	r3, r2
 80050ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80050bc:	e000      	b.n	80050c0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80050be:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ce:	4313      	orrs	r3, r2
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005112:	4013      	ands	r3, r2
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512a:	4313      	orrs	r3, r2
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005134:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	22c0      	movs	r2, #192	@ 0xc0
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43da      	mvns	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	400a      	ands	r2, r1
 8005150:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	ea02 0103 	and.w	r1, r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	409a      	lsls	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80051a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3728      	adds	r7, #40	@ 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	09896800 	.word	0x09896800
 80051b8:	04c4b400 	.word	0x04c4b400

080051bc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fe1f 	bl	8004e0e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	711a      	strb	r2, [r3, #4]
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff fe18 	bl	8004e22 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005206:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f043 0204 	orr.w	r2, r3, #4
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fe0e 	bl	8004e36 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	711a      	strb	r2, [r3, #4]
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff ffd8 	bl	8005228 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	711a      	strb	r2, [r3, #4]
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ffd1 	bl	800523c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f043 0204 	orr.w	r2, r3, #4
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff ffc7 	bl	8005250 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	711a      	strb	r2, [r3, #4]
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e08d      	b.n	80053fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b47      	ldr	r3, [pc, #284]	@ (8005408 <HAL_DMA_Init+0x138>)
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d80f      	bhi.n	800530e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	4b45      	ldr	r3, [pc, #276]	@ (800540c <HAL_DMA_Init+0x13c>)
 80052f6:	4413      	add	r3, r2
 80052f8:	4a45      	ldr	r2, [pc, #276]	@ (8005410 <HAL_DMA_Init+0x140>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	009a      	lsls	r2, r3, #2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a42      	ldr	r2, [pc, #264]	@ (8005414 <HAL_DMA_Init+0x144>)
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40
 800530c:	e00e      	b.n	800532c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	4b40      	ldr	r3, [pc, #256]	@ (8005418 <HAL_DMA_Init+0x148>)
 8005316:	4413      	add	r3, r2
 8005318:	4a3d      	ldr	r2, [pc, #244]	@ (8005410 <HAL_DMA_Init+0x140>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	009a      	lsls	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a3c      	ldr	r2, [pc, #240]	@ (800541c <HAL_DMA_Init+0x14c>)
 800532a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800535c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa10 	bl	80057a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800538c:	d102      	bne.n	8005394 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <HAL_DMA_Init+0x104>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d80c      	bhi.n	80053d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa30 	bl	8005820 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	e008      	b.n	80053e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40020407 	.word	0x40020407
 800540c:	bffdfff8 	.word	0xbffdfff8
 8005410:	cccccccd 	.word	0xcccccccd
 8005414:	40020000 	.word	0x40020000
 8005418:	bffdfbf8 	.word	0xbffdfbf8
 800541c:	40020400 	.word	0x40020400

08005420 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_DMA_Start_IT+0x20>
 800543c:	2302      	movs	r3, #2
 800543e:	e066      	b.n	800550e <HAL_DMA_Start_IT+0xee>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d155      	bne.n	8005500 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f954 	bl	8005726 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 020e 	orr.w	r2, r2, #14
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e00f      	b.n	80054b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 020a 	orr.w	r2, r2, #10
 80054b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0201 	orr.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e005      	b.n	800550c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005508:	2302      	movs	r3, #2
 800550a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d005      	beq.n	800553a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	e037      	b.n	80055aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 020e 	bic.w	r2, r2, #14
 8005548:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005558:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	f003 021f 	and.w	r2, r3, #31
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	2101      	movs	r1, #1
 8005578:	fa01 f202 	lsl.w	r2, r1, r2
 800557c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005586:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800559e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	2204      	movs	r2, #4
 80055ea:	409a      	lsls	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d026      	beq.n	8005642 <HAL_DMA_IRQHandler+0x7a>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d021      	beq.n	8005642 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d107      	bne.n	800561c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005620:	f003 021f 	and.w	r2, r3, #31
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	2104      	movs	r1, #4
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	2b00      	cmp	r3, #0
 8005636:	d071      	beq.n	800571c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005640:	e06c      	b.n	800571c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2202      	movs	r2, #2
 800564c:	409a      	lsls	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02e      	beq.n	80056b4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d029      	beq.n	80056b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10b      	bne.n	8005686 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 020a 	bic.w	r2, r2, #10
 800567c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568a:	f003 021f 	and.w	r2, r3, #31
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2102      	movs	r1, #2
 8005694:	fa01 f202 	lsl.w	r2, r1, r2
 8005698:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d038      	beq.n	800571c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80056b2:	e033      	b.n	800571c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2208      	movs	r2, #8
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02a      	beq.n	800571e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d025      	beq.n	800571e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 020e 	bic.w	r2, r2, #14
 80056e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	f003 021f 	and.w	r2, r3, #31
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	2101      	movs	r1, #1
 80056f0:	fa01 f202 	lsl.w	r2, r1, r2
 80056f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800571c:	bf00      	nop
 800571e:	bf00      	nop
}
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800573c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	f003 021f 	and.w	r2, r3, #31
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f202 	lsl.w	r2, r1, r2
 8005762:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b10      	cmp	r3, #16
 8005772:	d108      	bne.n	8005786 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005784:	e007      	b.n	8005796 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b16      	ldr	r3, [pc, #88]	@ (800580c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d802      	bhi.n	80057be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80057b8:	4b15      	ldr	r3, [pc, #84]	@ (8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e001      	b.n	80057c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80057be:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80057c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3b08      	subs	r3, #8
 80057ce:	4a12      	ldr	r2, [pc, #72]	@ (8005818 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	009a      	lsls	r2, r3, #2
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a0b      	ldr	r2, [pc, #44]	@ (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2201      	movs	r2, #1
 80057f8:	409a      	lsls	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40020407 	.word	0x40020407
 8005810:	40020800 	.word	0x40020800
 8005814:	40020820 	.word	0x40020820
 8005818:	cccccccd 	.word	0xcccccccd
 800581c:	40020880 	.word	0x40020880

08005820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a08      	ldr	r2, [pc, #32]	@ (8005864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005842:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3b01      	subs	r3, #1
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	1000823f 	.word	0x1000823f
 8005864:	40020940 	.word	0x40020940

08005868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005876:	e15a      	b.n	8005b2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	4013      	ands	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 814c 	beq.w	8005b28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d005      	beq.n	80058a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d130      	bne.n	800590a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058de:	2201      	movs	r2, #1
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4013      	ands	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 0201 	and.w	r2, r3, #1
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d017      	beq.n	8005946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d123      	bne.n	800599a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	08da      	lsrs	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3208      	adds	r2, #8
 800595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	220f      	movs	r2, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	08da      	lsrs	r2, r3, #3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3208      	adds	r2, #8
 8005994:	6939      	ldr	r1, [r7, #16]
 8005996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	2203      	movs	r2, #3
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4013      	ands	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0203 	and.w	r2, r3, #3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80a6 	beq.w	8005b28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059dc:	4b5b      	ldr	r3, [pc, #364]	@ (8005b4c <HAL_GPIO_Init+0x2e4>)
 80059de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e0:	4a5a      	ldr	r2, [pc, #360]	@ (8005b4c <HAL_GPIO_Init+0x2e4>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80059e8:	4b58      	ldr	r3, [pc, #352]	@ (8005b4c <HAL_GPIO_Init+0x2e4>)
 80059ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059f4:	4a56      	ldr	r2, [pc, #344]	@ (8005b50 <HAL_GPIO_Init+0x2e8>)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	089b      	lsrs	r3, r3, #2
 80059fa:	3302      	adds	r3, #2
 80059fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a1e:	d01f      	beq.n	8005a60 <HAL_GPIO_Init+0x1f8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a4c      	ldr	r2, [pc, #304]	@ (8005b54 <HAL_GPIO_Init+0x2ec>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d019      	beq.n	8005a5c <HAL_GPIO_Init+0x1f4>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a4b      	ldr	r2, [pc, #300]	@ (8005b58 <HAL_GPIO_Init+0x2f0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <HAL_GPIO_Init+0x1f0>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a4a      	ldr	r2, [pc, #296]	@ (8005b5c <HAL_GPIO_Init+0x2f4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00d      	beq.n	8005a54 <HAL_GPIO_Init+0x1ec>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a49      	ldr	r2, [pc, #292]	@ (8005b60 <HAL_GPIO_Init+0x2f8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <HAL_GPIO_Init+0x1e8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a48      	ldr	r2, [pc, #288]	@ (8005b64 <HAL_GPIO_Init+0x2fc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_GPIO_Init+0x1e4>
 8005a48:	2305      	movs	r3, #5
 8005a4a:	e00a      	b.n	8005a62 <HAL_GPIO_Init+0x1fa>
 8005a4c:	2306      	movs	r3, #6
 8005a4e:	e008      	b.n	8005a62 <HAL_GPIO_Init+0x1fa>
 8005a50:	2304      	movs	r3, #4
 8005a52:	e006      	b.n	8005a62 <HAL_GPIO_Init+0x1fa>
 8005a54:	2303      	movs	r3, #3
 8005a56:	e004      	b.n	8005a62 <HAL_GPIO_Init+0x1fa>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e002      	b.n	8005a62 <HAL_GPIO_Init+0x1fa>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_GPIO_Init+0x1fa>
 8005a60:	2300      	movs	r3, #0
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	f002 0203 	and.w	r2, r2, #3
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a72:	4937      	ldr	r1, [pc, #220]	@ (8005b50 <HAL_GPIO_Init+0x2e8>)
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	3302      	adds	r3, #2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a80:	4b39      	ldr	r3, [pc, #228]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005aa4:	4a30      	ldr	r2, [pc, #192]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ace:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ad4:	4b24      	ldr	r3, [pc, #144]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	43db      	mvns	r3, r3
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005af8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005afe:	4b1a      	ldr	r3, [pc, #104]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b22:	4a11      	ldr	r2, [pc, #68]	@ (8005b68 <HAL_GPIO_Init+0x300>)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f47f ae9d 	bne.w	8005878 <HAL_GPIO_Init+0x10>
  }
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40010000 	.word	0x40010000
 8005b54:	48000400 	.word	0x48000400
 8005b58:	48000800 	.word	0x48000800
 8005b5c:	48000c00 	.word	0x48000c00
 8005b60:	48001000 	.word	0x48001000
 8005b64:	48001400 	.word	0x48001400
 8005b68:	40010400 	.word	0x40010400

08005b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b7c:	787b      	ldrb	r3, [r7, #1]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b88:	e002      	b.n	8005b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b8a:	887a      	ldrh	r2, [r7, #2]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	041a      	lsls	r2, r3, #16
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	43d9      	mvns	r1, r3
 8005bba:	887b      	ldrh	r3, [r7, #2]
 8005bbc:	400b      	ands	r3, r1
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e08d      	b.n	8005cfe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fc fbf8 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	@ 0x24
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d107      	bne.n	8005c4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	e006      	b.n	8005c58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005c56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d108      	bne.n	8005c72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	e007      	b.n	8005c82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1a      	ldr	r2, [r3, #32]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	461a      	mov	r2, r3
 8005d14:	460b      	mov	r3, r1
 8005d16:	817b      	strh	r3, [r7, #10]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	f040 80fd 	bne.w	8005f24 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_I2C_Master_Transmit+0x30>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0f6      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x21e>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d40:	f7fc ff36 	bl	8002bb0 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	2319      	movs	r3, #25
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f914 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0e1      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2221      	movs	r2, #33	@ 0x21
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	893a      	ldrh	r2, [r7, #8]
 8005d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2bff      	cmp	r3, #255	@ 0xff
 8005d92:	d906      	bls.n	8005da2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	22ff      	movs	r2, #255	@ 0xff
 8005d98:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e007      	b.n	8005db2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005db0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	781a      	ldrb	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	3301      	adds	r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	8979      	ldrh	r1, [r7, #10]
 8005df6:	4b4e      	ldr	r3, [pc, #312]	@ (8005f30 <HAL_I2C_Master_Transmit+0x228>)
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fa83 	bl	8006308 <I2C_TransferConfig>
 8005e02:	e066      	b.n	8005ed2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	8979      	ldrh	r1, [r7, #10]
 8005e0c:	4b48      	ldr	r3, [pc, #288]	@ (8005f30 <HAL_I2C_Master_Transmit+0x228>)
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa78 	bl	8006308 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e18:	e05b      	b.n	8005ed2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	6a39      	ldr	r1, [r7, #32]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f907 	bl	8006032 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e07b      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d034      	beq.n	8005ed2 <HAL_I2C_Master_Transmit+0x1ca>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d130      	bne.n	8005ed2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2180      	movs	r1, #128	@ 0x80
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f880 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e04d      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2bff      	cmp	r3, #255	@ 0xff
 8005e92:	d90e      	bls.n	8005eb2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22ff      	movs	r2, #255	@ 0xff
 8005e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	8979      	ldrh	r1, [r7, #10]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fa2c 	bl	8006308 <I2C_TransferConfig>
 8005eb0:	e00f      	b.n	8005ed2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	8979      	ldrh	r1, [r7, #10]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fa1b 	bl	8006308 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d19e      	bne.n	8005e1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	6a39      	ldr	r1, [r7, #32]
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f8ed 	bl	80060c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e01a      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <HAL_I2C_Master_Transmit+0x22c>)
 8005f04:	400b      	ands	r3, r1
 8005f06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e000      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005f24:	2302      	movs	r3, #2
  }
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	80002000 	.word	0x80002000
 8005f34:	fe00e800 	.word	0xfe00e800

08005f38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d103      	bne.n	8005f56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d007      	beq.n	8005f74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	619a      	str	r2, [r3, #24]
  }
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f90:	e03b      	b.n	800600a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f8d6 	bl	8006148 <I2C_IsErrorOccurred>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e041      	b.n	800602a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d02d      	beq.n	800600a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fc fdff 	bl	8002bb0 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d122      	bne.n	800600a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d113      	bne.n	800600a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e00f      	b.n	800602a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	429a      	cmp	r2, r3
 8006026:	d0b4      	beq.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800603e:	e033      	b.n	80060a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f87f 	bl	8006148 <I2C_IsErrorOccurred>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e031      	b.n	80060b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d025      	beq.n	80060a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605c:	f7fc fda8 	bl	8002bb0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	d302      	bcc.n	8006072 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11a      	bne.n	80060a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d013      	beq.n	80060a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e007      	b.n	80060b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d1c4      	bne.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060cc:	e02f      	b.n	800612e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f838 	bl	8006148 <I2C_IsErrorOccurred>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e02d      	b.n	800613e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e2:	f7fc fd65 	bl	8002bb0 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d302      	bcc.n	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11a      	bne.n	800612e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d013      	beq.n	800612e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e007      	b.n	800613e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b20      	cmp	r3, #32
 800613a:	d1c8      	bne.n	80060ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	@ 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d068      	beq.n	8006246 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800617c:	e049      	b.n	8006212 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d045      	beq.n	8006212 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006186:	f7fc fd13 	bl	8002bb0 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	d302      	bcc.n	800619c <I2C_IsErrorOccurred+0x54>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d13a      	bne.n	8006212 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061be:	d121      	bne.n	8006204 <I2C_IsErrorOccurred+0xbc>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061c6:	d01d      	beq.n	8006204 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80061c8:	7cfb      	ldrb	r3, [r7, #19]
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d01a      	beq.n	8006204 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061de:	f7fc fce7 	bl	8002bb0 <HAL_GetTick>
 80061e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061e4:	e00e      	b.n	8006204 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061e6:	f7fc fce3 	bl	8002bb0 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b19      	cmp	r3, #25
 80061f2:	d907      	bls.n	8006204 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	f043 0320 	orr.w	r3, r3, #32
 80061fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006202:	e006      	b.n	8006212 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b20      	cmp	r3, #32
 8006210:	d1e9      	bne.n	80061e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b20      	cmp	r3, #32
 800621e:	d003      	beq.n	8006228 <I2C_IsErrorOccurred+0xe0>
 8006220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0aa      	beq.n	800617e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2220      	movs	r2, #32
 8006236:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006268:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	f043 0308 	orr.w	r3, r3, #8
 8006280:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800628a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f043 0302 	orr.w	r3, r3, #2
 80062a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01c      	beq.n	80062f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff fe3b 	bl	8005f38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <I2C_IsErrorOccurred+0x1bc>)
 80062ce:	400b      	ands	r3, r1
 80062d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80062f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3728      	adds	r7, #40	@ 0x28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	fe00e800 	.word	0xfe00e800

08006308 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	817b      	strh	r3, [r7, #10]
 8006316:	4613      	mov	r3, r2
 8006318:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800631a:	897b      	ldrh	r3, [r7, #10]
 800631c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006320:	7a7b      	ldrb	r3, [r7, #9]
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006328:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	4313      	orrs	r3, r2
 8006332:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006336:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	0d5b      	lsrs	r3, r3, #21
 8006342:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006346:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <I2C_TransferConfig+0x60>)
 8006348:	430b      	orrs	r3, r1
 800634a:	43db      	mvns	r3, r3
 800634c:	ea02 0103 	and.w	r1, r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	03ff63ff 	.word	0x03ff63ff

0800636c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b20      	cmp	r3, #32
 8006380:	d138      	bne.n	80063f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800638c:	2302      	movs	r3, #2
 800638e:	e032      	b.n	80063f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2224      	movs	r2, #36	@ 0x24
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b20      	cmp	r3, #32
 8006416:	d139      	bne.n	800648c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006422:	2302      	movs	r3, #2
 8006424:	e033      	b.n	800648e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2224      	movs	r2, #36	@ 0x24
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006454:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800648c:	2302      	movs	r3, #2
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d141      	bne.n	800652e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064aa:	4b4b      	ldr	r3, [pc, #300]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b6:	d131      	bne.n	800651c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064b8:	4b47      	ldr	r3, [pc, #284]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064be:	4a46      	ldr	r2, [pc, #280]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064c8:	4b43      	ldr	r3, [pc, #268]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064d0:	4a41      	ldr	r2, [pc, #260]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064d8:	4b40      	ldr	r3, [pc, #256]	@ (80065dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2232      	movs	r2, #50	@ 0x32
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	4a3f      	ldr	r2, [pc, #252]	@ (80065e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	0c9b      	lsrs	r3, r3, #18
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ee:	e002      	b.n	80064f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064f6:	4b38      	ldr	r3, [pc, #224]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006502:	d102      	bne.n	800650a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f2      	bne.n	80064f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800650a:	4b33      	ldr	r3, [pc, #204]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006516:	d158      	bne.n	80065ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e057      	b.n	80065cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800651c:	4b2e      	ldr	r3, [pc, #184]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800651e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006522:	4a2d      	ldr	r2, [pc, #180]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800652c:	e04d      	b.n	80065ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006534:	d141      	bne.n	80065ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006536:	4b28      	ldr	r3, [pc, #160]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006542:	d131      	bne.n	80065a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006544:	4b24      	ldr	r3, [pc, #144]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800654a:	4a23      	ldr	r2, [pc, #140]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800654c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006554:	4b20      	ldr	r3, [pc, #128]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800655c:	4a1e      	ldr	r2, [pc, #120]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800655e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006564:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2232      	movs	r2, #50	@ 0x32
 800656a:	fb02 f303 	mul.w	r3, r2, r3
 800656e:	4a1c      	ldr	r2, [pc, #112]	@ (80065e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	0c9b      	lsrs	r3, r3, #18
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800657a:	e002      	b.n	8006582 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b01      	subs	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800658a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800658e:	d102      	bne.n	8006596 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f2      	bne.n	800657c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006596:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800659e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a2:	d112      	bne.n	80065ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e011      	b.n	80065cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065a8:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ae:	4a0a      	ldr	r2, [pc, #40]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065b8:	e007      	b.n	80065ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065ba:	4b07      	ldr	r3, [pc, #28]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065c2:	4a05      	ldr	r2, [pc, #20]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	40007000 	.word	0x40007000
 80065dc:	20000010 	.word	0x20000010
 80065e0:	431bde83 	.word	0x431bde83

080065e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80065e8:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4a04      	ldr	r2, [pc, #16]	@ (8006600 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065f2:	6093      	str	r3, [r2, #8]
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40007000 	.word	0x40007000

08006604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e2fe      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d075      	beq.n	800670e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006622:	4b97      	ldr	r3, [pc, #604]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 030c 	and.w	r3, r3, #12
 800662a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800662c:	4b94      	ldr	r3, [pc, #592]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b0c      	cmp	r3, #12
 800663a:	d102      	bne.n	8006642 <HAL_RCC_OscConfig+0x3e>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d002      	beq.n	8006648 <HAL_RCC_OscConfig+0x44>
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10b      	bne.n	8006660 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006648:	4b8d      	ldr	r3, [pc, #564]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d05b      	beq.n	800670c <HAL_RCC_OscConfig+0x108>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d157      	bne.n	800670c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e2d9      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006668:	d106      	bne.n	8006678 <HAL_RCC_OscConfig+0x74>
 800666a:	4b85      	ldr	r3, [pc, #532]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a84      	ldr	r2, [pc, #528]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e01d      	b.n	80066b4 <HAL_RCC_OscConfig+0xb0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006680:	d10c      	bne.n	800669c <HAL_RCC_OscConfig+0x98>
 8006682:	4b7f      	ldr	r3, [pc, #508]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a7e      	ldr	r2, [pc, #504]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b7c      	ldr	r3, [pc, #496]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a7b      	ldr	r2, [pc, #492]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e00b      	b.n	80066b4 <HAL_RCC_OscConfig+0xb0>
 800669c:	4b78      	ldr	r3, [pc, #480]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a77      	ldr	r2, [pc, #476]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80066a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4b75      	ldr	r3, [pc, #468]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a74      	ldr	r2, [pc, #464]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80066ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fc fa78 	bl	8002bb0 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c4:	f7fc fa74 	bl	8002bb0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b64      	cmp	r3, #100	@ 0x64
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e29e      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0xc0>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fc fa64 	bl	8002bb0 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fc fa60 	bl	8002bb0 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	@ 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e28a      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066fe:	4b60      	ldr	r3, [pc, #384]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0xe8>
 800670a:	e000      	b.n	800670e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d075      	beq.n	8006806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800671a:	4b59      	ldr	r3, [pc, #356]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 030c 	and.w	r3, r3, #12
 8006722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006724:	4b56      	ldr	r3, [pc, #344]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d102      	bne.n	800673a <HAL_RCC_OscConfig+0x136>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d002      	beq.n	8006740 <HAL_RCC_OscConfig+0x13c>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d11f      	bne.n	8006780 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006740:	4b4f      	ldr	r3, [pc, #316]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_OscConfig+0x154>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e25d      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006758:	4b49      	ldr	r3, [pc, #292]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	061b      	lsls	r3, r3, #24
 8006766:	4946      	ldr	r1, [pc, #280]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006768:	4313      	orrs	r3, r2
 800676a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800676c:	4b45      	ldr	r3, [pc, #276]	@ (8006884 <HAL_RCC_OscConfig+0x280>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7fc f9d1 	bl	8002b18 <HAL_InitTick>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d043      	beq.n	8006804 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e249      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d023      	beq.n	80067d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006788:	4b3d      	ldr	r3, [pc, #244]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a3c      	ldr	r2, [pc, #240]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800678e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006794:	f7fc fa0c 	bl	8002bb0 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800679c:	f7fc fa08 	bl	8002bb0 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e232      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ae:	4b34      	ldr	r3, [pc, #208]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f0      	beq.n	800679c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	492d      	ldr	r1, [pc, #180]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	604b      	str	r3, [r1, #4]
 80067ce:	e01a      	b.n	8006806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80067d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fc f9e8 	bl	8002bb0 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e4:	f7fc f9e4 	bl	8002bb0 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e20e      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067f6:	4b22      	ldr	r3, [pc, #136]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x1e0>
 8006802:	e000      	b.n	8006806 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d041      	beq.n	8006896 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01c      	beq.n	8006854 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800681a:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800681c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006820:	4a17      	ldr	r2, [pc, #92]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682a:	f7fc f9c1 	bl	8002bb0 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006832:	f7fc f9bd 	bl	8002bb0 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e1e7      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006844:	4b0e      	ldr	r3, [pc, #56]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0ef      	beq.n	8006832 <HAL_RCC_OscConfig+0x22e>
 8006852:	e020      	b.n	8006896 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006854:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800685a:	4a09      	ldr	r2, [pc, #36]	@ (8006880 <HAL_RCC_OscConfig+0x27c>)
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fc f9a4 	bl	8002bb0 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800686a:	e00d      	b.n	8006888 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686c:	f7fc f9a0 	bl	8002bb0 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d906      	bls.n	8006888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e1ca      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000
 8006884:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006888:	4b8c      	ldr	r3, [pc, #560]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 800688a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ea      	bne.n	800686c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80a6 	beq.w	80069f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a4:	2300      	movs	r3, #0
 80068a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068a8:	4b84      	ldr	r3, [pc, #528]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80068aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCC_OscConfig+0x2b4>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_RCC_OscConfig+0x2b6>
 80068b8:	2300      	movs	r3, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068be:	4b7f      	ldr	r3, [pc, #508]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	4a7e      	ldr	r2, [pc, #504]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80068c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ca:	4b7c      	ldr	r3, [pc, #496]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068d6:	2301      	movs	r3, #1
 80068d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068da:	4b79      	ldr	r3, [pc, #484]	@ (8006ac0 <HAL_RCC_OscConfig+0x4bc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d118      	bne.n	8006918 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068e6:	4b76      	ldr	r3, [pc, #472]	@ (8006ac0 <HAL_RCC_OscConfig+0x4bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a75      	ldr	r2, [pc, #468]	@ (8006ac0 <HAL_RCC_OscConfig+0x4bc>)
 80068ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068f2:	f7fc f95d 	bl	8002bb0 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068fa:	f7fc f959 	bl	8002bb0 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e183      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800690c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac0 <HAL_RCC_OscConfig+0x4bc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d108      	bne.n	8006932 <HAL_RCC_OscConfig+0x32e>
 8006920:	4b66      	ldr	r3, [pc, #408]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006926:	4a65      	ldr	r2, [pc, #404]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006930:	e024      	b.n	800697c <HAL_RCC_OscConfig+0x378>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b05      	cmp	r3, #5
 8006938:	d110      	bne.n	800695c <HAL_RCC_OscConfig+0x358>
 800693a:	4b60      	ldr	r3, [pc, #384]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006940:	4a5e      	ldr	r2, [pc, #376]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006942:	f043 0304 	orr.w	r3, r3, #4
 8006946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800694a:	4b5c      	ldr	r3, [pc, #368]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006950:	4a5a      	ldr	r2, [pc, #360]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800695a:	e00f      	b.n	800697c <HAL_RCC_OscConfig+0x378>
 800695c:	4b57      	ldr	r3, [pc, #348]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006962:	4a56      	ldr	r2, [pc, #344]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800696c:	4b53      	ldr	r3, [pc, #332]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006972:	4a52      	ldr	r2, [pc, #328]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006974:	f023 0304 	bic.w	r3, r3, #4
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fc f914 	bl	8002bb0 <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698c:	f7fc f910 	bl	8002bb0 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e138      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a2:	4b46      	ldr	r3, [pc, #280]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0ed      	beq.n	800698c <HAL_RCC_OscConfig+0x388>
 80069b0:	e015      	b.n	80069de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fc f8fd 	bl	8002bb0 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ba:	f7fc f8f9 	bl	8002bb0 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e121      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069d0:	4b3a      	ldr	r3, [pc, #232]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ed      	bne.n	80069ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e4:	4b35      	ldr	r3, [pc, #212]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80069e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e8:	4a34      	ldr	r2, [pc, #208]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 80069ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d03c      	beq.n	8006a76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01c      	beq.n	8006a3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a04:	4b2d      	ldr	r3, [pc, #180]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fc f8cc 	bl	8002bb0 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a1c:	f7fc f8c8 	bl	8002bb0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e0f2      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a2e:	4b23      	ldr	r3, [pc, #140]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0ef      	beq.n	8006a1c <HAL_RCC_OscConfig+0x418>
 8006a3c:	e01b      	b.n	8006a76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a44:	4a1d      	ldr	r2, [pc, #116]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4e:	f7fc f8af 	bl	8002bb0 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a56:	f7fc f8ab 	bl	8002bb0 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e0d5      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a68:	4b14      	ldr	r3, [pc, #80]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1ef      	bne.n	8006a56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80c9 	beq.w	8006c12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a80:	4b0e      	ldr	r3, [pc, #56]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	f000 8083 	beq.w	8006b94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d15e      	bne.n	8006b54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a96:	4b09      	ldr	r3, [pc, #36]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a08      	ldr	r2, [pc, #32]	@ (8006abc <HAL_RCC_OscConfig+0x4b8>)
 8006a9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa2:	f7fc f885 	bl	8002bb0 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aa8:	e00c      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aaa:	f7fc f881 	bl	8002bb0 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d905      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e0ab      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac4:	4b55      	ldr	r3, [pc, #340]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ec      	bne.n	8006aaa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad0:	4b52      	ldr	r3, [pc, #328]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	4b52      	ldr	r3, [pc, #328]	@ (8006c20 <HAL_RCC_OscConfig+0x61c>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6a11      	ldr	r1, [r2, #32]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ae0:	3a01      	subs	r2, #1
 8006ae2:	0112      	lsls	r2, r2, #4
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006aea:	0212      	lsls	r2, r2, #8
 8006aec:	4311      	orrs	r1, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006af2:	0852      	lsrs	r2, r2, #1
 8006af4:	3a01      	subs	r2, #1
 8006af6:	0552      	lsls	r2, r2, #21
 8006af8:	4311      	orrs	r1, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006afe:	0852      	lsrs	r2, r2, #1
 8006b00:	3a01      	subs	r2, #1
 8006b02:	0652      	lsls	r2, r2, #25
 8006b04:	4311      	orrs	r1, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b0a:	06d2      	lsls	r2, r2, #27
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	4943      	ldr	r1, [pc, #268]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b14:	4b41      	ldr	r3, [pc, #260]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a40      	ldr	r2, [pc, #256]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b20:	4b3e      	ldr	r3, [pc, #248]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4a3d      	ldr	r2, [pc, #244]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fc f840 	bl	8002bb0 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b34:	f7fc f83c 	bl	8002bb0 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e066      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b46:	4b35      	ldr	r3, [pc, #212]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f0      	beq.n	8006b34 <HAL_RCC_OscConfig+0x530>
 8006b52:	e05e      	b.n	8006c12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b54:	4b31      	ldr	r3, [pc, #196]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a30      	ldr	r2, [pc, #192]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fc f826 	bl	8002bb0 <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b68:	f7fc f822 	bl	8002bb0 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e04c      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b7a:	4b28      	ldr	r3, [pc, #160]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f0      	bne.n	8006b68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b86:	4b25      	ldr	r3, [pc, #148]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	4924      	ldr	r1, [pc, #144]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006b8c:	4b25      	ldr	r3, [pc, #148]	@ (8006c24 <HAL_RCC_OscConfig+0x620>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	60cb      	str	r3, [r1, #12]
 8006b92:	e03e      	b.n	8006c12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e039      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c1c <HAL_RCC_OscConfig+0x618>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f003 0203 	and.w	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d12c      	bne.n	8006c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d123      	bne.n	8006c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d11b      	bne.n	8006c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d113      	bne.n	8006c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d109      	bne.n	8006c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	3b01      	subs	r3, #1
 8006c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d001      	beq.n	8006c12 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	019f800c 	.word	0x019f800c
 8006c24:	feeefffc 	.word	0xfeeefffc

08006c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e11e      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c40:	4b91      	ldr	r3, [pc, #580]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d910      	bls.n	8006c70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4e:	4b8e      	ldr	r3, [pc, #568]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f023 020f 	bic.w	r2, r3, #15
 8006c56:	498c      	ldr	r1, [pc, #560]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5e:	4b8a      	ldr	r3, [pc, #552]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e106      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d073      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d129      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c84:	4b81      	ldr	r3, [pc, #516]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0f4      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006c94:	f000 f99e 	bl	8006fd4 <RCC_GetSysClockFreqFromPLLSource>
 8006c98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006e90 <HAL_RCC_ClockConfig+0x268>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d93f      	bls.n	8006d22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d033      	beq.n	8006d22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d12f      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cc2:	4b72      	ldr	r3, [pc, #456]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cca:	4a70      	ldr	r2, [pc, #448]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006cd2:	2380      	movs	r3, #128	@ 0x80
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e024      	b.n	8006d22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0c6      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf0:	4b66      	ldr	r3, [pc, #408]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0be      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d00:	f000 f8ce 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8006d04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4a61      	ldr	r2, [pc, #388]	@ (8006e90 <HAL_RCC_ClockConfig+0x268>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d909      	bls.n	8006d22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d16:	4a5d      	ldr	r2, [pc, #372]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d1e:	2380      	movs	r3, #128	@ 0x80
 8006d20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d22:	4b5a      	ldr	r3, [pc, #360]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f023 0203 	bic.w	r2, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	4957      	ldr	r1, [pc, #348]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d34:	f7fb ff3c 	bl	8002bb0 <HAL_GetTick>
 8006d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d3c:	f7fb ff38 	bl	8002bb0 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e095      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d52:	4b4e      	ldr	r3, [pc, #312]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 020c 	and.w	r2, r3, #12
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d1eb      	bne.n	8006d3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d023      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d7c:	4b43      	ldr	r3, [pc, #268]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4a42      	ldr	r2, [pc, #264]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006d94:	4b3d      	ldr	r3, [pc, #244]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006d9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da4:	4b39      	ldr	r3, [pc, #228]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4936      	ldr	r1, [pc, #216]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	e008      	b.n	8006dca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b80      	cmp	r3, #128	@ 0x80
 8006dbc:	d105      	bne.n	8006dca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006dbe:	4b33      	ldr	r3, [pc, #204]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	4a32      	ldr	r2, [pc, #200]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dca:	4b2f      	ldr	r3, [pc, #188]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d21d      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f023 020f 	bic.w	r2, r3, #15
 8006de0:	4929      	ldr	r1, [pc, #164]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006de8:	f7fb fee2 	bl	8002bb0 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df0:	f7fb fede 	bl	8002bb0 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e03b      	b.n	8006e7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e06:	4b20      	ldr	r3, [pc, #128]	@ (8006e88 <HAL_RCC_ClockConfig+0x260>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d1ed      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e20:	4b1a      	ldr	r3, [pc, #104]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4917      	ldr	r1, [pc, #92]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3e:	4b13      	ldr	r3, [pc, #76]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	490f      	ldr	r1, [pc, #60]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e52:	f000 f825 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4b0c      	ldr	r3, [pc, #48]	@ (8006e8c <HAL_RCC_ClockConfig+0x264>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	091b      	lsrs	r3, r3, #4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	490c      	ldr	r1, [pc, #48]	@ (8006e94 <HAL_RCC_ClockConfig+0x26c>)
 8006e64:	5ccb      	ldrb	r3, [r1, r3]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e98 <HAL_RCC_ClockConfig+0x270>)
 8006e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006e72:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <HAL_RCC_ClockConfig+0x274>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fb fe4e 	bl	8002b18 <HAL_InitTick>
 8006e7c:	4603      	mov	r3, r0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40022000 	.word	0x40022000
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	04c4b400 	.word	0x04c4b400
 8006e94:	08013284 	.word	0x08013284
 8006e98:	20000010 	.word	0x20000010
 8006e9c:	20000014 	.word	0x20000014

08006ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	e047      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006eb8:	4b27      	ldr	r3, [pc, #156]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d102      	bne.n	8006eca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ec4:	4b26      	ldr	r3, [pc, #152]	@ (8006f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e03e      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006eca:	4b23      	ldr	r3, [pc, #140]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 030c 	and.w	r3, r3, #12
 8006ed2:	2b0c      	cmp	r3, #12
 8006ed4:	d136      	bne.n	8006f44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ed6:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	3301      	adds	r3, #1
 8006eec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d10c      	bne.n	8006f0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8006f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	4a16      	ldr	r2, [pc, #88]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006efe:	68d2      	ldr	r2, [r2, #12]
 8006f00:	0a12      	lsrs	r2, r2, #8
 8006f02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f06:	fb02 f303 	mul.w	r3, r2, r3
 8006f0a:	617b      	str	r3, [r7, #20]
      break;
 8006f0c:	e00c      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f0e:	4a13      	ldr	r2, [pc, #76]	@ (8006f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	4a10      	ldr	r2, [pc, #64]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f18:	68d2      	ldr	r2, [r2, #12]
 8006f1a:	0a12      	lsrs	r2, r2, #8
 8006f1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	617b      	str	r3, [r7, #20]
      break;
 8006f26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f28:	4b0b      	ldr	r3, [pc, #44]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	0e5b      	lsrs	r3, r3, #25
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	3301      	adds	r3, #1
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e001      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f48:	693b      	ldr	r3, [r7, #16]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	00f42400 	.word	0x00f42400
 8006f60:	007a1200 	.word	0x007a1200

08006f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f68:	4b03      	ldr	r3, [pc, #12]	@ (8006f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000010 	.word	0x20000010

08006f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f80:	f7ff fff0 	bl	8006f64 <HAL_RCC_GetHCLKFreq>
 8006f84:	4602      	mov	r2, r0
 8006f86:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	4904      	ldr	r1, [pc, #16]	@ (8006fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f92:	5ccb      	ldrb	r3, [r1, r3]
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	08013294 	.word	0x08013294

08006fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fac:	f7ff ffda 	bl	8006f64 <HAL_RCC_GetHCLKFreq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	0adb      	lsrs	r3, r3, #11
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	4904      	ldr	r1, [pc, #16]	@ (8006fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fbe:	5ccb      	ldrb	r3, [r1, r3]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	08013294 	.word	0x08013294

08006fd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fda:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8007054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	091b      	lsrs	r3, r3, #4
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d10c      	bne.n	8007012 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ff8:	4a17      	ldr	r2, [pc, #92]	@ (8007058 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	4a14      	ldr	r2, [pc, #80]	@ (8007054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007002:	68d2      	ldr	r2, [r2, #12]
 8007004:	0a12      	lsrs	r2, r2, #8
 8007006:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	617b      	str	r3, [r7, #20]
    break;
 8007010:	e00c      	b.n	800702c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007012:	4a12      	ldr	r2, [pc, #72]	@ (800705c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	4a0e      	ldr	r2, [pc, #56]	@ (8007054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800701c:	68d2      	ldr	r2, [r2, #12]
 800701e:	0a12      	lsrs	r2, r2, #8
 8007020:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]
    break;
 800702a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800702c:	4b09      	ldr	r3, [pc, #36]	@ (8007054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	0e5b      	lsrs	r3, r3, #25
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	3301      	adds	r3, #1
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007046:	687b      	ldr	r3, [r7, #4]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40021000 	.word	0x40021000
 8007058:	007a1200 	.word	0x007a1200
 800705c:	00f42400 	.word	0x00f42400

08007060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007068:	2300      	movs	r3, #0
 800706a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800706c:	2300      	movs	r3, #0
 800706e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8098 	beq.w	80071ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800707e:	2300      	movs	r3, #0
 8007080:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007082:	4b43      	ldr	r3, [pc, #268]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10d      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800708e:	4b40      	ldr	r3, [pc, #256]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	4a3f      	ldr	r2, [pc, #252]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007098:	6593      	str	r3, [r2, #88]	@ 0x58
 800709a:	4b3d      	ldr	r3, [pc, #244]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800709c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a2:	60bb      	str	r3, [r7, #8]
 80070a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a6:	2301      	movs	r3, #1
 80070a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a39      	ldr	r2, [pc, #228]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070b6:	f7fb fd7b 	bl	8002bb0 <HAL_GetTick>
 80070ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070bc:	e009      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070be:	f7fb fd77 	bl	8002bb0 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d902      	bls.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	74fb      	strb	r3, [r7, #19]
        break;
 80070d0:	e005      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070d2:	4b30      	ldr	r3, [pc, #192]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0ef      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80070de:	7cfb      	ldrb	r3, [r7, #19]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d159      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01e      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d019      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007100:	4b23      	ldr	r3, [pc, #140]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800710a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800710c:	4b20      	ldr	r3, [pc, #128]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007112:	4a1f      	ldr	r2, [pc, #124]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800711c:	4b1c      	ldr	r3, [pc, #112]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007122:	4a1b      	ldr	r2, [pc, #108]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800712c:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d016      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713e:	f7fb fd37 	bl	8002bb0 <HAL_GetTick>
 8007142:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007144:	e00b      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007146:	f7fb fd33 	bl	8002bb0 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007154:	4293      	cmp	r3, r2
 8007156:	d902      	bls.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	74fb      	strb	r3, [r7, #19]
            break;
 800715c:	e006      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800715e:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0ec      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800716c:	7cfb      	ldrb	r3, [r7, #19]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007172:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	4903      	ldr	r1, [pc, #12]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007188:	e008      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800718a:	7cfb      	ldrb	r3, [r7, #19]
 800718c:	74bb      	strb	r3, [r7, #18]
 800718e:	e005      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007190:	40021000 	.word	0x40021000
 8007194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	7cfb      	ldrb	r3, [r7, #19]
 800719a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800719c:	7c7b      	ldrb	r3, [r7, #17]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d105      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a2:	4ba6      	ldr	r3, [pc, #664]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	4aa5      	ldr	r2, [pc, #660]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071ba:	4ba0      	ldr	r3, [pc, #640]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	f023 0203 	bic.w	r2, r3, #3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	499c      	ldr	r1, [pc, #624]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071dc:	4b97      	ldr	r3, [pc, #604]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e2:	f023 020c 	bic.w	r2, r3, #12
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	4994      	ldr	r1, [pc, #592]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071fe:	4b8f      	ldr	r3, [pc, #572]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007204:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	498b      	ldr	r1, [pc, #556]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007220:	4b86      	ldr	r3, [pc, #536]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	4983      	ldr	r1, [pc, #524]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007242:	4b7e      	ldr	r3, [pc, #504]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007248:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	497a      	ldr	r1, [pc, #488]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007264:	4b75      	ldr	r3, [pc, #468]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	4972      	ldr	r1, [pc, #456]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007286:	4b6d      	ldr	r3, [pc, #436]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	4969      	ldr	r1, [pc, #420]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072a8:	4b64      	ldr	r3, [pc, #400]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	4961      	ldr	r1, [pc, #388]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ca:	4b5c      	ldr	r3, [pc, #368]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	4958      	ldr	r1, [pc, #352]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072ec:	4b53      	ldr	r3, [pc, #332]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	4950      	ldr	r1, [pc, #320]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800730a:	d105      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800730c:	4b4b      	ldr	r3, [pc, #300]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a4a      	ldr	r2, [pc, #296]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007316:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007320:	2b00      	cmp	r3, #0
 8007322:	d015      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007324:	4b45      	ldr	r3, [pc, #276]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007332:	4942      	ldr	r1, [pc, #264]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007342:	d105      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007344:	4b3d      	ldr	r3, [pc, #244]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4a3c      	ldr	r2, [pc, #240]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800734a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800734e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d015      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800735c:	4b37      	ldr	r3, [pc, #220]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	4934      	ldr	r1, [pc, #208]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007376:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800737a:	d105      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800737c:	4b2f      	ldr	r3, [pc, #188]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4a2e      	ldr	r2, [pc, #184]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007386:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007394:	4b29      	ldr	r3, [pc, #164]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a2:	4926      	ldr	r1, [pc, #152]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b2:	d105      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073b4:	4b21      	ldr	r3, [pc, #132]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4a20      	ldr	r2, [pc, #128]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d015      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073cc:	4b1b      	ldr	r3, [pc, #108]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	4918      	ldr	r1, [pc, #96]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073ea:	d105      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ec:	4b13      	ldr	r3, [pc, #76]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a12      	ldr	r2, [pc, #72]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d015      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007404:	4b0d      	ldr	r3, [pc, #52]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007412:	490a      	ldr	r1, [pc, #40]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007422:	d105      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007424:	4b05      	ldr	r3, [pc, #20]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4a04      	ldr	r2, [pc, #16]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800742a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800742e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007430:	7cbb      	ldrb	r3, [r7, #18]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40021000 	.word	0x40021000

08007440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e049      	b.n	80074e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fb f864 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f001 fa12 	bl	80088a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b01      	cmp	r3, #1
 8007502:	d001      	beq.n	8007508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e042      	b.n	800758e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a21      	ldr	r2, [pc, #132]	@ (800759c <HAL_TIM_Base_Start+0xac>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_TIM_Base_Start+0x5c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007522:	d013      	beq.n	800754c <HAL_TIM_Base_Start+0x5c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1d      	ldr	r2, [pc, #116]	@ (80075a0 <HAL_TIM_Base_Start+0xb0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_TIM_Base_Start+0x5c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1c      	ldr	r2, [pc, #112]	@ (80075a4 <HAL_TIM_Base_Start+0xb4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIM_Base_Start+0x5c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1a      	ldr	r2, [pc, #104]	@ (80075a8 <HAL_TIM_Base_Start+0xb8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_Base_Start+0x5c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <HAL_TIM_Base_Start+0xbc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d115      	bne.n	8007578 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	4b17      	ldr	r3, [pc, #92]	@ (80075b0 <HAL_TIM_Base_Start+0xc0>)
 8007554:	4013      	ands	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d015      	beq.n	800758a <HAL_TIM_Base_Start+0x9a>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007564:	d011      	beq.n	800758a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007576:	e008      	b.n	800758a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e000      	b.n	800758c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40013400 	.word	0x40013400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	00010007 	.word	0x00010007

080075b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e049      	b.n	800765a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f841 	bl	8007662 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f001 f958 	bl	80088a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e049      	b.n	800771c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f841 	bl	8007724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f001 f8f7 	bl	80088a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d109      	bne.n	800775c <HAL_TIM_PWM_Start+0x24>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	bf14      	ite	ne
 8007754:	2301      	movne	r3, #1
 8007756:	2300      	moveq	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	e03c      	b.n	80077d6 <HAL_TIM_PWM_Start+0x9e>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b04      	cmp	r3, #4
 8007760:	d109      	bne.n	8007776 <HAL_TIM_PWM_Start+0x3e>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b01      	cmp	r3, #1
 800776c:	bf14      	ite	ne
 800776e:	2301      	movne	r3, #1
 8007770:	2300      	moveq	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	e02f      	b.n	80077d6 <HAL_TIM_PWM_Start+0x9e>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b08      	cmp	r3, #8
 800777a:	d109      	bne.n	8007790 <HAL_TIM_PWM_Start+0x58>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b01      	cmp	r3, #1
 8007786:	bf14      	ite	ne
 8007788:	2301      	movne	r3, #1
 800778a:	2300      	moveq	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e022      	b.n	80077d6 <HAL_TIM_PWM_Start+0x9e>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b0c      	cmp	r3, #12
 8007794:	d109      	bne.n	80077aa <HAL_TIM_PWM_Start+0x72>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b01      	cmp	r3, #1
 80077a0:	bf14      	ite	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	2300      	moveq	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	e015      	b.n	80077d6 <HAL_TIM_PWM_Start+0x9e>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d109      	bne.n	80077c4 <HAL_TIM_PWM_Start+0x8c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	e008      	b.n	80077d6 <HAL_TIM_PWM_Start+0x9e>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	bf14      	ite	ne
 80077d0:	2301      	movne	r3, #1
 80077d2:	2300      	moveq	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e097      	b.n	800790e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <HAL_TIM_PWM_Start+0xb6>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077ec:	e023      	b.n	8007836 <HAL_TIM_PWM_Start+0xfe>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d104      	bne.n	80077fe <HAL_TIM_PWM_Start+0xc6>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077fc:	e01b      	b.n	8007836 <HAL_TIM_PWM_Start+0xfe>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d104      	bne.n	800780e <HAL_TIM_PWM_Start+0xd6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800780c:	e013      	b.n	8007836 <HAL_TIM_PWM_Start+0xfe>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b0c      	cmp	r3, #12
 8007812:	d104      	bne.n	800781e <HAL_TIM_PWM_Start+0xe6>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800781c:	e00b      	b.n	8007836 <HAL_TIM_PWM_Start+0xfe>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b10      	cmp	r3, #16
 8007822:	d104      	bne.n	800782e <HAL_TIM_PWM_Start+0xf6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800782c:	e003      	b.n	8007836 <HAL_TIM_PWM_Start+0xfe>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2201      	movs	r2, #1
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f001 fd7e 	bl	8009340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a33      	ldr	r2, [pc, #204]	@ (8007918 <HAL_TIM_PWM_Start+0x1e0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_TIM_PWM_Start+0x13e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a32      	ldr	r2, [pc, #200]	@ (800791c <HAL_TIM_PWM_Start+0x1e4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_TIM_PWM_Start+0x13e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a30      	ldr	r2, [pc, #192]	@ (8007920 <HAL_TIM_PWM_Start+0x1e8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_TIM_PWM_Start+0x13e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a2f      	ldr	r2, [pc, #188]	@ (8007924 <HAL_TIM_PWM_Start+0x1ec>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_TIM_PWM_Start+0x13e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a2d      	ldr	r2, [pc, #180]	@ (8007928 <HAL_TIM_PWM_Start+0x1f0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d101      	bne.n	800787a <HAL_TIM_PWM_Start+0x142>
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <HAL_TIM_PWM_Start+0x144>
 800787a:	2300      	movs	r3, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800788e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a20      	ldr	r2, [pc, #128]	@ (8007918 <HAL_TIM_PWM_Start+0x1e0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_TIM_PWM_Start+0x194>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a2:	d013      	beq.n	80078cc <HAL_TIM_PWM_Start+0x194>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a20      	ldr	r2, [pc, #128]	@ (800792c <HAL_TIM_PWM_Start+0x1f4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_TIM_PWM_Start+0x194>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007930 <HAL_TIM_PWM_Start+0x1f8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_TIM_PWM_Start+0x194>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a17      	ldr	r2, [pc, #92]	@ (800791c <HAL_TIM_PWM_Start+0x1e4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_TIM_PWM_Start+0x194>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a16      	ldr	r2, [pc, #88]	@ (8007920 <HAL_TIM_PWM_Start+0x1e8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d115      	bne.n	80078f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	4b18      	ldr	r3, [pc, #96]	@ (8007934 <HAL_TIM_PWM_Start+0x1fc>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d015      	beq.n	800790a <HAL_TIM_PWM_Start+0x1d2>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e4:	d011      	beq.n	800790a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0201 	orr.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f6:	e008      	b.n	800790a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0201 	orr.w	r2, r2, #1
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e000      	b.n	800790c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40013400 	.word	0x40013400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800
 8007934:	00010007 	.word	0x00010007

08007938 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e049      	b.n	80079de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f841 	bl	80079e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f000 ff96 	bl	80088a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_TIM_IC_Start_DMA+0x22>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	e023      	b.n	8007a66 <HAL_TIM_IC_Start_DMA+0x6a>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d104      	bne.n	8007a2e <HAL_TIM_IC_Start_DMA+0x32>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	e01b      	b.n	8007a66 <HAL_TIM_IC_Start_DMA+0x6a>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d104      	bne.n	8007a3e <HAL_TIM_IC_Start_DMA+0x42>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	e013      	b.n	8007a66 <HAL_TIM_IC_Start_DMA+0x6a>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d104      	bne.n	8007a4e <HAL_TIM_IC_Start_DMA+0x52>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	e00b      	b.n	8007a66 <HAL_TIM_IC_Start_DMA+0x6a>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_IC_Start_DMA+0x62>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	e003      	b.n	8007a66 <HAL_TIM_IC_Start_DMA+0x6a>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <HAL_TIM_IC_Start_DMA+0x7c>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	e013      	b.n	8007aa0 <HAL_TIM_IC_Start_DMA+0xa4>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d104      	bne.n	8007a88 <HAL_TIM_IC_Start_DMA+0x8c>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	e00b      	b.n	8007aa0 <HAL_TIM_IC_Start_DMA+0xa4>
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d104      	bne.n	8007a98 <HAL_TIM_IC_Start_DMA+0x9c>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	e003      	b.n	8007aa0 <HAL_TIM_IC_Start_DMA+0xa4>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007aa2:	7dbb      	ldrb	r3, [r7, #22]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d002      	beq.n	8007aae <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007aa8:	7d7b      	ldrb	r3, [r7, #21]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d101      	bne.n	8007ab2 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e152      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007ab2:	7dbb      	ldrb	r3, [r7, #22]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d153      	bne.n	8007b60 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007ab8:	7d7b      	ldrb	r3, [r7, #21]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d150      	bne.n	8007b60 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_TIM_IC_Start_DMA+0xce>
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e144      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_IC_Start_DMA+0xe2>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007adc:	e023      	b.n	8007b26 <HAL_TIM_IC_Start_DMA+0x12a>
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_IC_Start_DMA+0xf2>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aec:	e01b      	b.n	8007b26 <HAL_TIM_IC_Start_DMA+0x12a>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_IC_Start_DMA+0x102>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007afc:	e013      	b.n	8007b26 <HAL_TIM_IC_Start_DMA+0x12a>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d104      	bne.n	8007b0e <HAL_TIM_IC_Start_DMA+0x112>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b0c:	e00b      	b.n	8007b26 <HAL_TIM_IC_Start_DMA+0x12a>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_IC_Start_DMA+0x122>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b1c:	e003      	b.n	8007b26 <HAL_TIM_IC_Start_DMA+0x12a>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_TIM_IC_Start_DMA+0x13a>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8007b34:	e016      	b.n	8007b64 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d104      	bne.n	8007b46 <HAL_TIM_IC_Start_DMA+0x14a>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8007b44:	e00e      	b.n	8007b64 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_IC_Start_DMA+0x15a>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8007b54:	e006      	b.n	8007b64 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8007b5e:	e001      	b.n	8007b64 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0f9      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fbe7 	bl	8009340 <TIM_CCxChannelCmd>

  switch (Channel)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	f200 80ad 	bhi.w	8007cd4 <HAL_TIM_IC_Start_DMA+0x2d8>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <HAL_TIM_IC_Start_DMA+0x184>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007cd5 	.word	0x08007cd5
 8007b88:	08007cd5 	.word	0x08007cd5
 8007b8c:	08007cd5 	.word	0x08007cd5
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007cd5 	.word	0x08007cd5
 8007b98:	08007cd5 	.word	0x08007cd5
 8007b9c:	08007cd5 	.word	0x08007cd5
 8007ba0:	08007c45 	.word	0x08007c45
 8007ba4:	08007cd5 	.word	0x08007cd5
 8007ba8:	08007cd5 	.word	0x08007cd5
 8007bac:	08007cd5 	.word	0x08007cd5
 8007bb0:	08007c8d 	.word	0x08007c8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	4a69      	ldr	r2, [pc, #420]	@ (8007d60 <HAL_TIM_IC_Start_DMA+0x364>)
 8007bba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	4a68      	ldr	r2, [pc, #416]	@ (8007d64 <HAL_TIM_IC_Start_DMA+0x368>)
 8007bc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	4a67      	ldr	r2, [pc, #412]	@ (8007d68 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007bca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3334      	adds	r3, #52	@ 0x34
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	887b      	ldrh	r3, [r7, #2]
 8007bdc:	f7fd fc20 	bl	8005420 <HAL_DMA_Start_IT>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e0b6      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf8:	60da      	str	r2, [r3, #12]
      break;
 8007bfa:	e06e      	b.n	8007cda <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	4a57      	ldr	r2, [pc, #348]	@ (8007d60 <HAL_TIM_IC_Start_DMA+0x364>)
 8007c02:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	4a56      	ldr	r2, [pc, #344]	@ (8007d64 <HAL_TIM_IC_Start_DMA+0x368>)
 8007c0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c10:	4a55      	ldr	r2, [pc, #340]	@ (8007d68 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007c12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3338      	adds	r3, #56	@ 0x38
 8007c1e:	4619      	mov	r1, r3
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	887b      	ldrh	r3, [r7, #2]
 8007c24:	f7fd fbfc 	bl	8005420 <HAL_DMA_Start_IT>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e092      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c40:	60da      	str	r2, [r3, #12]
      break;
 8007c42:	e04a      	b.n	8007cda <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	4a45      	ldr	r2, [pc, #276]	@ (8007d60 <HAL_TIM_IC_Start_DMA+0x364>)
 8007c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	4a44      	ldr	r2, [pc, #272]	@ (8007d64 <HAL_TIM_IC_Start_DMA+0x368>)
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a43      	ldr	r2, [pc, #268]	@ (8007d68 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007c5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	333c      	adds	r3, #60	@ 0x3c
 8007c66:	4619      	mov	r1, r3
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	887b      	ldrh	r3, [r7, #2]
 8007c6c:	f7fd fbd8 	bl	8005420 <HAL_DMA_Start_IT>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e06e      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c88:	60da      	str	r2, [r3, #12]
      break;
 8007c8a:	e026      	b.n	8007cda <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c90:	4a33      	ldr	r2, [pc, #204]	@ (8007d60 <HAL_TIM_IC_Start_DMA+0x364>)
 8007c92:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	4a32      	ldr	r2, [pc, #200]	@ (8007d64 <HAL_TIM_IC_Start_DMA+0x368>)
 8007c9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca0:	4a31      	ldr	r2, [pc, #196]	@ (8007d68 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007ca2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3340      	adds	r3, #64	@ 0x40
 8007cae:	4619      	mov	r1, r3
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	887b      	ldrh	r3, [r7, #2]
 8007cb4:	f7fd fbb4 	bl	8005420 <HAL_DMA_Start_IT>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e04a      	b.n	8007d58 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007cd0:	60da      	str	r2, [r3, #12]
      break;
 8007cd2:	e002      	b.n	8007cda <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a23      	ldr	r2, [pc, #140]	@ (8007d6c <HAL_TIM_IC_Start_DMA+0x370>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d018      	beq.n	8007d16 <HAL_TIM_IC_Start_DMA+0x31a>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cec:	d013      	beq.n	8007d16 <HAL_TIM_IC_Start_DMA+0x31a>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d70 <HAL_TIM_IC_Start_DMA+0x374>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00e      	beq.n	8007d16 <HAL_TIM_IC_Start_DMA+0x31a>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d74 <HAL_TIM_IC_Start_DMA+0x378>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d009      	beq.n	8007d16 <HAL_TIM_IC_Start_DMA+0x31a>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <HAL_TIM_IC_Start_DMA+0x37c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d004      	beq.n	8007d16 <HAL_TIM_IC_Start_DMA+0x31a>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	@ (8007d7c <HAL_TIM_IC_Start_DMA+0x380>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d115      	bne.n	8007d42 <HAL_TIM_IC_Start_DMA+0x346>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	4b18      	ldr	r3, [pc, #96]	@ (8007d80 <HAL_TIM_IC_Start_DMA+0x384>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b06      	cmp	r3, #6
 8007d26:	d015      	beq.n	8007d54 <HAL_TIM_IC_Start_DMA+0x358>
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2e:	d011      	beq.n	8007d54 <HAL_TIM_IC_Start_DMA+0x358>
    {
      __HAL_TIM_ENABLE(htim);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d40:	e008      	b.n	8007d54 <HAL_TIM_IC_Start_DMA+0x358>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0201 	orr.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	e000      	b.n	8007d56 <HAL_TIM_IC_Start_DMA+0x35a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d54:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	08008777 	.word	0x08008777
 8007d64:	0800883f 	.word	0x0800883f
 8007d68:	080086e5 	.word	0x080086e5
 8007d6c:	40012c00 	.word	0x40012c00
 8007d70:	40000400 	.word	0x40000400
 8007d74:	40000800 	.word	0x40000800
 8007d78:	40013400 	.word	0x40013400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	00010007 	.word	0x00010007

08007d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d020      	beq.n	8007de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01b      	beq.n	8007de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0202 	mvn.w	r2, #2
 8007db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7f9 fa56 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
 8007dd4:	e005      	b.n	8007de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fc52 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc63 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d020      	beq.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01b      	beq.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0204 	mvn.w	r2, #4
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f9 fa30 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
 8007e20:	e005      	b.n	8007e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fc2c 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc3d 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d020      	beq.n	8007e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01b      	beq.n	8007e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0208 	mvn.w	r2, #8
 8007e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7f9 fa0a 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
 8007e6c:	e005      	b.n	8007e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fc06 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc17 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d020      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01b      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f06f 0210 	mvn.w	r2, #16
 8007e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7f9 f9e4 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
 8007eb8:	e005      	b.n	8007ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fbe0 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fbf1 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0201 	mvn.w	r2, #1
 8007ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fbbe 	bl	800866c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00c      	beq.n	8007f1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fac3 	bl	80094a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00c      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 fabb 	bl	80094b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fbab 	bl	80086bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00c      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f003 0320 	and.w	r3, r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f06f 0220 	mvn.w	r2, #32
 8007f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fa83 	bl	8009490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00c      	beq.n	8007fae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fa8f 	bl	80094cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fa87 	bl	80094e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00c      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 fa7f 	bl	80094f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fa77 	bl	8009508 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_TIM_OC_ConfigChannel+0x1e>
 800803e:	2302      	movs	r3, #2
 8008040:	e066      	b.n	8008110 <HAL_TIM_OC_ConfigChannel+0xec>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b14      	cmp	r3, #20
 800804e:	d857      	bhi.n	8008100 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	080080ad 	.word	0x080080ad
 800805c:	08008101 	.word	0x08008101
 8008060:	08008101 	.word	0x08008101
 8008064:	08008101 	.word	0x08008101
 8008068:	080080bb 	.word	0x080080bb
 800806c:	08008101 	.word	0x08008101
 8008070:	08008101 	.word	0x08008101
 8008074:	08008101 	.word	0x08008101
 8008078:	080080c9 	.word	0x080080c9
 800807c:	08008101 	.word	0x08008101
 8008080:	08008101 	.word	0x08008101
 8008084:	08008101 	.word	0x08008101
 8008088:	080080d7 	.word	0x080080d7
 800808c:	08008101 	.word	0x08008101
 8008090:	08008101 	.word	0x08008101
 8008094:	08008101 	.word	0x08008101
 8008098:	080080e5 	.word	0x080080e5
 800809c:	08008101 	.word	0x08008101
 80080a0:	08008101 	.word	0x08008101
 80080a4:	08008101 	.word	0x08008101
 80080a8:	080080f3 	.word	0x080080f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fc94 	bl	80089e0 <TIM_OC1_SetConfig>
      break;
 80080b8:	e025      	b.n	8008106 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fd1d 	bl	8008b00 <TIM_OC2_SetConfig>
      break;
 80080c6:	e01e      	b.n	8008106 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fda0 	bl	8008c14 <TIM_OC3_SetConfig>
      break;
 80080d4:	e017      	b.n	8008106 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fe21 	bl	8008d24 <TIM_OC4_SetConfig>
      break;
 80080e2:	e010      	b.n	8008106 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fea4 	bl	8008e38 <TIM_OC5_SetConfig>
      break;
 80080f0:	e009      	b.n	8008106 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 ff01 	bl	8008f00 <TIM_OC6_SetConfig>
      break;
 80080fe:	e002      	b.n	8008106 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	75fb      	strb	r3, [r7, #23]
      break;
 8008104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800810e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008132:	2302      	movs	r3, #2
 8008134:	e088      	b.n	8008248 <HAL_TIM_IC_ConfigChannel+0x130>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d11b      	bne.n	800817c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008154:	f000 ff3a 	bl	8008fcc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 020c 	bic.w	r2, r2, #12
 8008166:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6999      	ldr	r1, [r3, #24]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	619a      	str	r2, [r3, #24]
 800817a:	e060      	b.n	800823e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b04      	cmp	r3, #4
 8008180:	d11c      	bne.n	80081bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008192:	f000 ffb2 	bl	80090fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80081a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6999      	ldr	r1, [r3, #24]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	021a      	lsls	r2, r3, #8
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	619a      	str	r2, [r3, #24]
 80081ba:	e040      	b.n	800823e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d11b      	bne.n	80081fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80081d2:	f000 ffff 	bl	80091d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 020c 	bic.w	r2, r2, #12
 80081e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69d9      	ldr	r1, [r3, #28]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	61da      	str	r2, [r3, #28]
 80081f8:	e021      	b.n	800823e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b0c      	cmp	r3, #12
 80081fe:	d11c      	bne.n	800823a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008210:	f001 f81c 	bl	800924c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	69da      	ldr	r2, [r3, #28]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008222:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69d9      	ldr	r1, [r3, #28]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	021a      	lsls	r2, r3, #8
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	61da      	str	r2, [r3, #28]
 8008238:	e001      	b.n	800823e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800826a:	2302      	movs	r3, #2
 800826c:	e0ff      	b.n	800846e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b14      	cmp	r3, #20
 800827a:	f200 80f0 	bhi.w	800845e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082d9 	.word	0x080082d9
 8008288:	0800845f 	.word	0x0800845f
 800828c:	0800845f 	.word	0x0800845f
 8008290:	0800845f 	.word	0x0800845f
 8008294:	08008319 	.word	0x08008319
 8008298:	0800845f 	.word	0x0800845f
 800829c:	0800845f 	.word	0x0800845f
 80082a0:	0800845f 	.word	0x0800845f
 80082a4:	0800835b 	.word	0x0800835b
 80082a8:	0800845f 	.word	0x0800845f
 80082ac:	0800845f 	.word	0x0800845f
 80082b0:	0800845f 	.word	0x0800845f
 80082b4:	0800839b 	.word	0x0800839b
 80082b8:	0800845f 	.word	0x0800845f
 80082bc:	0800845f 	.word	0x0800845f
 80082c0:	0800845f 	.word	0x0800845f
 80082c4:	080083dd 	.word	0x080083dd
 80082c8:	0800845f 	.word	0x0800845f
 80082cc:	0800845f 	.word	0x0800845f
 80082d0:	0800845f 	.word	0x0800845f
 80082d4:	0800841d 	.word	0x0800841d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fb7e 	bl	80089e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0208 	orr.w	r2, r2, #8
 80082f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0204 	bic.w	r2, r2, #4
 8008302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6999      	ldr	r1, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	619a      	str	r2, [r3, #24]
      break;
 8008316:	e0a5      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fbee 	bl	8008b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6999      	ldr	r1, [r3, #24]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	021a      	lsls	r2, r3, #8
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	619a      	str	r2, [r3, #24]
      break;
 8008358:	e084      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fc57 	bl	8008c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0208 	orr.w	r2, r2, #8
 8008374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0204 	bic.w	r2, r2, #4
 8008384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69d9      	ldr	r1, [r3, #28]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	61da      	str	r2, [r3, #28]
      break;
 8008398:	e064      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fcbf 	bl	8008d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69d9      	ldr	r1, [r3, #28]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	021a      	lsls	r2, r3, #8
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	61da      	str	r2, [r3, #28]
      break;
 80083da:	e043      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fd28 	bl	8008e38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0204 	bic.w	r2, r2, #4
 8008406:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800841a:	e023      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fd6c 	bl	8008f00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008446:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	021a      	lsls	r2, r3, #8
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800845c:	e002      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
      break;
 8008462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_TIM_ConfigClockSource+0x1c>
 8008490:	2302      	movs	r3, #2
 8008492:	e0de      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x1da>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80084b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a63      	ldr	r2, [pc, #396]	@ (800865c <HAL_TIM_ConfigClockSource+0x1e4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f000 80a9 	beq.w	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 80084d4:	4a61      	ldr	r2, [pc, #388]	@ (800865c <HAL_TIM_ConfigClockSource+0x1e4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f200 80ae 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 80084dc:	4a60      	ldr	r2, [pc, #384]	@ (8008660 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f000 80a1 	beq.w	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 80084e4:	4a5e      	ldr	r2, [pc, #376]	@ (8008660 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	f200 80a6 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 80084ec:	4a5d      	ldr	r2, [pc, #372]	@ (8008664 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f000 8099 	beq.w	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 80084f4:	4a5b      	ldr	r2, [pc, #364]	@ (8008664 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	f200 809e 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 80084fc:	4a5a      	ldr	r2, [pc, #360]	@ (8008668 <HAL_TIM_ConfigClockSource+0x1f0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	f000 8091 	beq.w	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 8008504:	4a58      	ldr	r2, [pc, #352]	@ (8008668 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	f200 8096 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 800850c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008510:	f000 8089 	beq.w	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 8008514:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008518:	f200 808e 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 800851c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008520:	d03e      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0x128>
 8008522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008526:	f200 8087 	bhi.w	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 800852a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852e:	f000 8086 	beq.w	800863e <HAL_TIM_ConfigClockSource+0x1c6>
 8008532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008536:	d87f      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008538:	2b70      	cmp	r3, #112	@ 0x70
 800853a:	d01a      	beq.n	8008572 <HAL_TIM_ConfigClockSource+0xfa>
 800853c:	2b70      	cmp	r3, #112	@ 0x70
 800853e:	d87b      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008540:	2b60      	cmp	r3, #96	@ 0x60
 8008542:	d050      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x16e>
 8008544:	2b60      	cmp	r3, #96	@ 0x60
 8008546:	d877      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008548:	2b50      	cmp	r3, #80	@ 0x50
 800854a:	d03c      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x14e>
 800854c:	2b50      	cmp	r3, #80	@ 0x50
 800854e:	d873      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008550:	2b40      	cmp	r3, #64	@ 0x40
 8008552:	d058      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x18e>
 8008554:	2b40      	cmp	r3, #64	@ 0x40
 8008556:	d86f      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008558:	2b30      	cmp	r3, #48	@ 0x30
 800855a:	d064      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 800855c:	2b30      	cmp	r3, #48	@ 0x30
 800855e:	d86b      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008560:	2b20      	cmp	r3, #32
 8008562:	d060      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 8008564:	2b20      	cmp	r3, #32
 8008566:	d867      	bhi.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d05c      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 800856c:	2b10      	cmp	r3, #16
 800856e:	d05a      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x1ae>
 8008570:	e062      	b.n	8008638 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008582:	f000 febd 	bl	8009300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	609a      	str	r2, [r3, #8]
      break;
 800859e:	e04f      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085b0:	f000 fea6 	bl	8009300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085c2:	609a      	str	r2, [r3, #8]
      break;
 80085c4:	e03c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d2:	461a      	mov	r2, r3
 80085d4:	f000 fd62 	bl	800909c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2150      	movs	r1, #80	@ 0x50
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fe71 	bl	80092c6 <TIM_ITRx_SetConfig>
      break;
 80085e4:	e02c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f2:	461a      	mov	r2, r3
 80085f4:	f000 fdbe 	bl	8009174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2160      	movs	r1, #96	@ 0x60
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fe61 	bl	80092c6 <TIM_ITRx_SetConfig>
      break;
 8008604:	e01c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008612:	461a      	mov	r2, r3
 8008614:	f000 fd42 	bl	800909c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2140      	movs	r1, #64	@ 0x40
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fe51 	bl	80092c6 <TIM_ITRx_SetConfig>
      break;
 8008624:	e00c      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f000 fe48 	bl	80092c6 <TIM_ITRx_SetConfig>
      break;
 8008636:	e003      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	73fb      	strb	r3, [r7, #15]
      break;
 800863c:	e000      	b.n	8008640 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800863e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	00100070 	.word	0x00100070
 8008660:	00100040 	.word	0x00100040
 8008664:	00100030 	.word	0x00100030
 8008668:	00100020 	.word	0x00100020

0800866c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d107      	bne.n	800870c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800870a:	e02a      	b.n	8008762 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d107      	bne.n	8008726 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2202      	movs	r2, #2
 800871a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008724:	e01d      	b.n	8008762 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d107      	bne.n	8008740 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2204      	movs	r2, #4
 8008734:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800873e:	e010      	b.n	8008762 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d107      	bne.n	800875a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2208      	movs	r2, #8
 800874e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008758:	e003      	b.n	8008762 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff ffb4 	bl	80086d0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	771a      	strb	r2, [r3, #28]
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008782:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	429a      	cmp	r2, r3
 800878c:	d10f      	bne.n	80087ae <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d146      	bne.n	800882a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ac:	e03d      	b.n	800882a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d10f      	bne.n	80087d8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2202      	movs	r2, #2
 80087bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d131      	bne.n	800882a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087d6:	e028      	b.n	800882a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d10f      	bne.n	8008802 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2204      	movs	r2, #4
 80087e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11c      	bne.n	800882a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008800:	e013      	b.n	800882a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d10e      	bne.n	800882a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2208      	movs	r2, #8
 8008810:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d107      	bne.n	800882a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7f8 fd28 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	771a      	strb	r2, [r3, #28]
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	429a      	cmp	r2, r3
 8008854:	d103      	bne.n	800885e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	771a      	strb	r2, [r3, #28]
 800885c:	e019      	b.n	8008892 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d103      	bne.n	8008870 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2202      	movs	r2, #2
 800886c:	771a      	strb	r2, [r3, #28]
 800886e:	e010      	b.n	8008892 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d103      	bne.n	8008882 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2204      	movs	r2, #4
 800887e:	771a      	strb	r2, [r3, #28]
 8008880:	e007      	b.n	8008892 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d102      	bne.n	8008892 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2208      	movs	r2, #8
 8008890:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fefe 	bl	8008694 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	771a      	strb	r2, [r3, #28]
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a42      	ldr	r2, [pc, #264]	@ (80089c4 <TIM_Base_SetConfig+0x11c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00f      	beq.n	80088e0 <TIM_Base_SetConfig+0x38>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c6:	d00b      	beq.n	80088e0 <TIM_Base_SetConfig+0x38>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a3f      	ldr	r2, [pc, #252]	@ (80089c8 <TIM_Base_SetConfig+0x120>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_Base_SetConfig+0x38>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a3e      	ldr	r2, [pc, #248]	@ (80089cc <TIM_Base_SetConfig+0x124>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_Base_SetConfig+0x38>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a3d      	ldr	r2, [pc, #244]	@ (80089d0 <TIM_Base_SetConfig+0x128>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d108      	bne.n	80088f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a33      	ldr	r2, [pc, #204]	@ (80089c4 <TIM_Base_SetConfig+0x11c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01b      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008900:	d017      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a30      	ldr	r2, [pc, #192]	@ (80089c8 <TIM_Base_SetConfig+0x120>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d013      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a2f      	ldr	r2, [pc, #188]	@ (80089cc <TIM_Base_SetConfig+0x124>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00f      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a2e      	ldr	r2, [pc, #184]	@ (80089d0 <TIM_Base_SetConfig+0x128>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00b      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2d      	ldr	r2, [pc, #180]	@ (80089d4 <TIM_Base_SetConfig+0x12c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d007      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a2c      	ldr	r2, [pc, #176]	@ (80089d8 <TIM_Base_SetConfig+0x130>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_Base_SetConfig+0x8a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2b      	ldr	r2, [pc, #172]	@ (80089dc <TIM_Base_SetConfig+0x134>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d108      	bne.n	8008944 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a16      	ldr	r2, [pc, #88]	@ (80089c4 <TIM_Base_SetConfig+0x11c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00f      	beq.n	8008990 <TIM_Base_SetConfig+0xe8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a17      	ldr	r2, [pc, #92]	@ (80089d0 <TIM_Base_SetConfig+0x128>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00b      	beq.n	8008990 <TIM_Base_SetConfig+0xe8>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a16      	ldr	r2, [pc, #88]	@ (80089d4 <TIM_Base_SetConfig+0x12c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d007      	beq.n	8008990 <TIM_Base_SetConfig+0xe8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a15      	ldr	r2, [pc, #84]	@ (80089d8 <TIM_Base_SetConfig+0x130>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_Base_SetConfig+0xe8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a14      	ldr	r2, [pc, #80]	@ (80089dc <TIM_Base_SetConfig+0x134>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d103      	bne.n	8008998 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	611a      	str	r2, [r3, #16]
  }
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40013400 	.word	0x40013400
 80089d4:	40014000 	.word	0x40014000
 80089d8:	40014400 	.word	0x40014400
 80089dc:	40014800 	.word	0x40014800

080089e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	f023 0201 	bic.w	r2, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f023 0302 	bic.w	r3, r3, #2
 8008a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8008aec <TIM_OC1_SetConfig+0x10c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00f      	beq.n	8008a60 <TIM_OC1_SetConfig+0x80>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a2b      	ldr	r2, [pc, #172]	@ (8008af0 <TIM_OC1_SetConfig+0x110>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d00b      	beq.n	8008a60 <TIM_OC1_SetConfig+0x80>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008af4 <TIM_OC1_SetConfig+0x114>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d007      	beq.n	8008a60 <TIM_OC1_SetConfig+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a29      	ldr	r2, [pc, #164]	@ (8008af8 <TIM_OC1_SetConfig+0x118>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d003      	beq.n	8008a60 <TIM_OC1_SetConfig+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a28      	ldr	r2, [pc, #160]	@ (8008afc <TIM_OC1_SetConfig+0x11c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10c      	bne.n	8008a7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f023 0308 	bic.w	r3, r3, #8
 8008a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f023 0304 	bic.w	r3, r3, #4
 8008a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aec <TIM_OC1_SetConfig+0x10c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00f      	beq.n	8008aa2 <TIM_OC1_SetConfig+0xc2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a1a      	ldr	r2, [pc, #104]	@ (8008af0 <TIM_OC1_SetConfig+0x110>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00b      	beq.n	8008aa2 <TIM_OC1_SetConfig+0xc2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a19      	ldr	r2, [pc, #100]	@ (8008af4 <TIM_OC1_SetConfig+0x114>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d007      	beq.n	8008aa2 <TIM_OC1_SetConfig+0xc2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a18      	ldr	r2, [pc, #96]	@ (8008af8 <TIM_OC1_SetConfig+0x118>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC1_SetConfig+0xc2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a17      	ldr	r2, [pc, #92]	@ (8008afc <TIM_OC1_SetConfig+0x11c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d111      	bne.n	8008ac6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	621a      	str	r2, [r3, #32]
}
 8008ae0:	bf00      	nop
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40013400 	.word	0x40013400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800

08008b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f023 0210 	bic.w	r2, r3, #16
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 0320 	bic.w	r3, r3, #32
 8008b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a28      	ldr	r2, [pc, #160]	@ (8008c00 <TIM_OC2_SetConfig+0x100>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_OC2_SetConfig+0x6c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a27      	ldr	r2, [pc, #156]	@ (8008c04 <TIM_OC2_SetConfig+0x104>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d10d      	bne.n	8008b88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c00 <TIM_OC2_SetConfig+0x100>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00f      	beq.n	8008bb0 <TIM_OC2_SetConfig+0xb0>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a1c      	ldr	r2, [pc, #112]	@ (8008c04 <TIM_OC2_SetConfig+0x104>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00b      	beq.n	8008bb0 <TIM_OC2_SetConfig+0xb0>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008c08 <TIM_OC2_SetConfig+0x108>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d007      	beq.n	8008bb0 <TIM_OC2_SetConfig+0xb0>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c0c <TIM_OC2_SetConfig+0x10c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_OC2_SetConfig+0xb0>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a19      	ldr	r2, [pc, #100]	@ (8008c10 <TIM_OC2_SetConfig+0x110>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d113      	bne.n	8008bd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	621a      	str	r2, [r3, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40012c00 	.word	0x40012c00
 8008c04:	40013400 	.word	0x40013400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800

08008c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0303 	bic.w	r3, r3, #3
 8008c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a27      	ldr	r2, [pc, #156]	@ (8008d10 <TIM_OC3_SetConfig+0xfc>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d003      	beq.n	8008c7e <TIM_OC3_SetConfig+0x6a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a26      	ldr	r2, [pc, #152]	@ (8008d14 <TIM_OC3_SetConfig+0x100>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d10d      	bne.n	8008c9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	021b      	lsls	r3, r3, #8
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d10 <TIM_OC3_SetConfig+0xfc>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00f      	beq.n	8008cc2 <TIM_OC3_SetConfig+0xae>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d14 <TIM_OC3_SetConfig+0x100>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00b      	beq.n	8008cc2 <TIM_OC3_SetConfig+0xae>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1a      	ldr	r2, [pc, #104]	@ (8008d18 <TIM_OC3_SetConfig+0x104>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d007      	beq.n	8008cc2 <TIM_OC3_SetConfig+0xae>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a19      	ldr	r2, [pc, #100]	@ (8008d1c <TIM_OC3_SetConfig+0x108>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d003      	beq.n	8008cc2 <TIM_OC3_SetConfig+0xae>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a18      	ldr	r2, [pc, #96]	@ (8008d20 <TIM_OC3_SetConfig+0x10c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d113      	bne.n	8008cea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	621a      	str	r2, [r3, #32]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	40013400 	.word	0x40013400
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	40014800 	.word	0x40014800

08008d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	031b      	lsls	r3, r3, #12
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a28      	ldr	r2, [pc, #160]	@ (8008e24 <TIM_OC4_SetConfig+0x100>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d003      	beq.n	8008d90 <TIM_OC4_SetConfig+0x6c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a27      	ldr	r2, [pc, #156]	@ (8008e28 <TIM_OC4_SetConfig+0x104>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d10d      	bne.n	8008dac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	031b      	lsls	r3, r3, #12
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a1d      	ldr	r2, [pc, #116]	@ (8008e24 <TIM_OC4_SetConfig+0x100>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00f      	beq.n	8008dd4 <TIM_OC4_SetConfig+0xb0>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e28 <TIM_OC4_SetConfig+0x104>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00b      	beq.n	8008dd4 <TIM_OC4_SetConfig+0xb0>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8008e2c <TIM_OC4_SetConfig+0x108>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d007      	beq.n	8008dd4 <TIM_OC4_SetConfig+0xb0>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e30 <TIM_OC4_SetConfig+0x10c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d003      	beq.n	8008dd4 <TIM_OC4_SetConfig+0xb0>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a19      	ldr	r2, [pc, #100]	@ (8008e34 <TIM_OC4_SetConfig+0x110>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d113      	bne.n	8008dfc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dda:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008de2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	019b      	lsls	r3, r3, #6
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	621a      	str	r2, [r3, #32]
}
 8008e16:	bf00      	nop
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	40013400 	.word	0x40013400
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	40014400 	.word	0x40014400
 8008e34:	40014800 	.word	0x40014800

08008e38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a17      	ldr	r2, [pc, #92]	@ (8008eec <TIM_OC5_SetConfig+0xb4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00f      	beq.n	8008eb2 <TIM_OC5_SetConfig+0x7a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a16      	ldr	r2, [pc, #88]	@ (8008ef0 <TIM_OC5_SetConfig+0xb8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00b      	beq.n	8008eb2 <TIM_OC5_SetConfig+0x7a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a15      	ldr	r2, [pc, #84]	@ (8008ef4 <TIM_OC5_SetConfig+0xbc>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d007      	beq.n	8008eb2 <TIM_OC5_SetConfig+0x7a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a14      	ldr	r2, [pc, #80]	@ (8008ef8 <TIM_OC5_SetConfig+0xc0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d003      	beq.n	8008eb2 <TIM_OC5_SetConfig+0x7a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a13      	ldr	r2, [pc, #76]	@ (8008efc <TIM_OC5_SetConfig+0xc4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d109      	bne.n	8008ec6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	621a      	str	r2, [r3, #32]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	40012c00 	.word	0x40012c00
 8008ef0:	40013400 	.word	0x40013400
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40014400 	.word	0x40014400
 8008efc:	40014800 	.word	0x40014800

08008f00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a18      	ldr	r2, [pc, #96]	@ (8008fb8 <TIM_OC6_SetConfig+0xb8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00f      	beq.n	8008f7c <TIM_OC6_SetConfig+0x7c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a17      	ldr	r2, [pc, #92]	@ (8008fbc <TIM_OC6_SetConfig+0xbc>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00b      	beq.n	8008f7c <TIM_OC6_SetConfig+0x7c>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a16      	ldr	r2, [pc, #88]	@ (8008fc0 <TIM_OC6_SetConfig+0xc0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d007      	beq.n	8008f7c <TIM_OC6_SetConfig+0x7c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a15      	ldr	r2, [pc, #84]	@ (8008fc4 <TIM_OC6_SetConfig+0xc4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_OC6_SetConfig+0x7c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a14      	ldr	r2, [pc, #80]	@ (8008fc8 <TIM_OC6_SetConfig+0xc8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d109      	bne.n	8008f90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	029b      	lsls	r3, r3, #10
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	621a      	str	r2, [r3, #32]
}
 8008faa:	bf00      	nop
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	40012c00 	.word	0x40012c00
 8008fbc:	40013400 	.word	0x40013400
 8008fc0:	40014000 	.word	0x40014000
 8008fc4:	40014400 	.word	0x40014400
 8008fc8:	40014800 	.word	0x40014800

08008fcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	f023 0201 	bic.w	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4a24      	ldr	r2, [pc, #144]	@ (8009088 <TIM_TI1_SetConfig+0xbc>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d013      	beq.n	8009022 <TIM_TI1_SetConfig+0x56>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009000:	d00f      	beq.n	8009022 <TIM_TI1_SetConfig+0x56>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a21      	ldr	r2, [pc, #132]	@ (800908c <TIM_TI1_SetConfig+0xc0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00b      	beq.n	8009022 <TIM_TI1_SetConfig+0x56>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4a20      	ldr	r2, [pc, #128]	@ (8009090 <TIM_TI1_SetConfig+0xc4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d007      	beq.n	8009022 <TIM_TI1_SetConfig+0x56>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4a1f      	ldr	r2, [pc, #124]	@ (8009094 <TIM_TI1_SetConfig+0xc8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_TI1_SetConfig+0x56>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a1e      	ldr	r2, [pc, #120]	@ (8009098 <TIM_TI1_SetConfig+0xcc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d101      	bne.n	8009026 <TIM_TI1_SetConfig+0x5a>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <TIM_TI1_SetConfig+0x5c>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d008      	beq.n	800903e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	e003      	b.n	8009046 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f043 0301 	orr.w	r3, r3, #1
 8009044:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800904c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	b2db      	uxtb	r3, r3
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f023 030a 	bic.w	r3, r3, #10
 8009060:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f003 030a 	and.w	r3, r3, #10
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	bf00      	nop
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40012c00 	.word	0x40012c00
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40013400 	.word	0x40013400
 8009098:	40014000 	.word	0x40014000

0800909c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f023 0201 	bic.w	r2, r3, #1
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	011b      	lsls	r3, r3, #4
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f023 030a 	bic.w	r3, r3, #10
 80090d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	4313      	orrs	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b087      	sub	sp, #28
 80090fe:	af00      	add	r7, sp, #0
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f023 0210 	bic.w	r2, r3, #16
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	031b      	lsls	r3, r3, #12
 800913e:	b29b      	uxth	r3, r3
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800914c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4313      	orrs	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	621a      	str	r2, [r3, #32]
}
 8009168:	bf00      	nop
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	f023 0210 	bic.w	r2, r3, #16
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800919e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	031b      	lsls	r3, r3, #12
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	621a      	str	r2, [r3, #32]
}
 80091c8:	bf00      	nop
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f023 0303 	bic.w	r3, r3, #3
 8009200:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009210:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	b2db      	uxtb	r3, r3
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009224:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	621a      	str	r2, [r3, #32]
}
 8009240:	bf00      	nop
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009278:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800928a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	031b      	lsls	r3, r3, #12
 8009290:	b29b      	uxth	r3, r3
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800929e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	031b      	lsls	r3, r3, #12
 80092a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	621a      	str	r2, [r3, #32]
}
 80092ba:	bf00      	nop
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f043 0307 	orr.w	r3, r3, #7
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800931a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	021a      	lsls	r2, r3, #8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	431a      	orrs	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4313      	orrs	r3, r2
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	2201      	movs	r2, #1
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1a      	ldr	r2, [r3, #32]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	43db      	mvns	r3, r3
 8009362:	401a      	ands	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a1a      	ldr	r2, [r3, #32]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	fa01 f303 	lsl.w	r3, r1, r3
 8009378:	431a      	orrs	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	621a      	str	r2, [r3, #32]
}
 800937e:	bf00      	nop
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e065      	b.n	8009470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a2c      	ldr	r2, [pc, #176]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a2b      	ldr	r2, [pc, #172]	@ (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d108      	bne.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80093f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1b      	ldr	r2, [pc, #108]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d018      	beq.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941a:	d013      	beq.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d00e      	beq.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a17      	ldr	r2, [pc, #92]	@ (8009488 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d009      	beq.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a12      	ldr	r2, [pc, #72]	@ (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d004      	beq.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a13      	ldr	r2, [pc, #76]	@ (800948c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d10c      	bne.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800944a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	4313      	orrs	r3, r2
 8009454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	40012c00 	.word	0x40012c00
 8009480:	40013400 	.word	0x40013400
 8009484:	40000400 	.word	0x40000400
 8009488:	40000800 	.word	0x40000800
 800948c:	40014000 	.word	0x40014000

08009490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e042      	b.n	80095b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7f9 f901 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2224      	movs	r2, #36	@ 0x24
 800954a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0201 	bic.w	r2, r2, #1
 800955c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fc4a 	bl	8009e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f97b 	bl	8009868 <UART_SetConfig>
 8009572:	4603      	mov	r3, r0
 8009574:	2b01      	cmp	r3, #1
 8009576:	d101      	bne.n	800957c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e01b      	b.n	80095b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800958a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800959a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fcc9 	bl	8009f44 <UART_CheckIdleState>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	@ 0x28
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	4613      	mov	r3, r2
 80095ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d17b      	bne.n	80096ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_UART_Transmit+0x26>
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e074      	b.n	80096d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2221      	movs	r2, #33	@ 0x21
 80095f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095f6:	f7f9 fadb 	bl	8002bb0 <HAL_GetTick>
 80095fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	88fa      	ldrh	r2, [r7, #6]
 8009600:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009614:	d108      	bne.n	8009628 <HAL_UART_Transmit+0x6c>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	e003      	b.n	8009630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009630:	e030      	b.n	8009694 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 fd2b 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e03d      	b.n	80096d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	3302      	adds	r3, #2
 800966e:	61bb      	str	r3, [r7, #24]
 8009670:	e007      	b.n	8009682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	3301      	adds	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1c8      	bne.n	8009632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2200      	movs	r2, #0
 80096a8:	2140      	movs	r1, #64	@ 0x40
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 fcf4 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e006      	b.n	80096d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e000      	b.n	80096d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80096ce:	2302      	movs	r3, #2
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3720      	adds	r7, #32
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08a      	sub	sp, #40	@ 0x28
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ee:	2b20      	cmp	r3, #32
 80096f0:	f040 80b5 	bne.w	800985e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_UART_Receive+0x28>
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e0ad      	b.n	8009860 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2222      	movs	r2, #34	@ 0x22
 8009710:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800971a:	f7f9 fa49 	bl	8002bb0 <HAL_GetTick>
 800971e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	88fa      	ldrh	r2, [r7, #6]
 8009724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009738:	d10e      	bne.n	8009758 <HAL_UART_Receive+0x80>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <HAL_UART_Receive+0x76>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800974c:	e02d      	b.n	80097aa <HAL_UART_Receive+0xd2>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	22ff      	movs	r2, #255	@ 0xff
 8009752:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009756:	e028      	b.n	80097aa <HAL_UART_Receive+0xd2>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10d      	bne.n	800977c <HAL_UART_Receive+0xa4>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_UART_Receive+0x9a>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	22ff      	movs	r2, #255	@ 0xff
 800976c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009770:	e01b      	b.n	80097aa <HAL_UART_Receive+0xd2>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	227f      	movs	r2, #127	@ 0x7f
 8009776:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800977a:	e016      	b.n	80097aa <HAL_UART_Receive+0xd2>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009784:	d10d      	bne.n	80097a2 <HAL_UART_Receive+0xca>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <HAL_UART_Receive+0xc0>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	227f      	movs	r2, #127	@ 0x7f
 8009792:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009796:	e008      	b.n	80097aa <HAL_UART_Receive+0xd2>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	223f      	movs	r2, #63	@ 0x3f
 800979c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097a0:	e003      	b.n	80097aa <HAL_UART_Receive+0xd2>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ba:	d108      	bne.n	80097ce <HAL_UART_Receive+0xf6>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	61bb      	str	r3, [r7, #24]
 80097cc:	e003      	b.n	80097d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80097d6:	e036      	b.n	8009846 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2200      	movs	r2, #0
 80097e0:	2120      	movs	r1, #32
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 fc58 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e032      	b.n	8009860 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10c      	bne.n	800981a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009806:	b29a      	uxth	r2, r3
 8009808:	8a7b      	ldrh	r3, [r7, #18]
 800980a:	4013      	ands	r3, r2
 800980c:	b29a      	uxth	r2, r3
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	3302      	adds	r3, #2
 8009816:	61bb      	str	r3, [r7, #24]
 8009818:	e00c      	b.n	8009834 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009820:	b2da      	uxtb	r2, r3
 8009822:	8a7b      	ldrh	r3, [r7, #18]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	4013      	ands	r3, r2
 8009828:	b2da      	uxtb	r2, r3
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	3301      	adds	r3, #1
 8009832:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800983a:	b29b      	uxth	r3, r3
 800983c:	3b01      	subs	r3, #1
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1c2      	bne.n	80097d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2220      	movs	r2, #32
 8009856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	e000      	b.n	8009860 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800985e:	2302      	movs	r3, #2
  }
}
 8009860:	4618      	mov	r0, r3
 8009862:	3720      	adds	r7, #32
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800986c:	b08c      	sub	sp, #48	@ 0x30
 800986e:	af00      	add	r7, sp, #0
 8009870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	431a      	orrs	r2, r3
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	431a      	orrs	r2, r3
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	4313      	orrs	r3, r2
 800988e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	4bab      	ldr	r3, [pc, #684]	@ (8009b44 <UART_SetConfig+0x2dc>)
 8009898:	4013      	ands	r3, r2
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	6812      	ldr	r2, [r2, #0]
 800989e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a0:	430b      	orrs	r3, r1
 80098a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	68da      	ldr	r2, [r3, #12]
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4aa0      	ldr	r2, [pc, #640]	@ (8009b48 <UART_SetConfig+0x2e0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d0:	4313      	orrs	r3, r2
 80098d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80098de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098e8:	430b      	orrs	r3, r1
 80098ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f2:	f023 010f 	bic.w	r1, r3, #15
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a91      	ldr	r2, [pc, #580]	@ (8009b4c <UART_SetConfig+0x2e4>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d125      	bne.n	8009958 <UART_SetConfig+0xf0>
 800990c:	4b90      	ldr	r3, [pc, #576]	@ (8009b50 <UART_SetConfig+0x2e8>)
 800990e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b03      	cmp	r3, #3
 8009918:	d81a      	bhi.n	8009950 <UART_SetConfig+0xe8>
 800991a:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <UART_SetConfig+0xb8>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009931 	.word	0x08009931
 8009924:	08009941 	.word	0x08009941
 8009928:	08009939 	.word	0x08009939
 800992c:	08009949 	.word	0x08009949
 8009930:	2301      	movs	r3, #1
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009936:	e0d6      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993e:	e0d2      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009946:	e0ce      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994e:	e0ca      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009956:	e0c6      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a7d      	ldr	r2, [pc, #500]	@ (8009b54 <UART_SetConfig+0x2ec>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d138      	bne.n	80099d4 <UART_SetConfig+0x16c>
 8009962:	4b7b      	ldr	r3, [pc, #492]	@ (8009b50 <UART_SetConfig+0x2e8>)
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009968:	f003 030c 	and.w	r3, r3, #12
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d82d      	bhi.n	80099cc <UART_SetConfig+0x164>
 8009970:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <UART_SetConfig+0x110>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099cd 	.word	0x080099cd
 8009980:	080099cd 	.word	0x080099cd
 8009984:	080099cd 	.word	0x080099cd
 8009988:	080099bd 	.word	0x080099bd
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099cd 	.word	0x080099cd
 8009994:	080099cd 	.word	0x080099cd
 8009998:	080099b5 	.word	0x080099b5
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099c5 	.word	0x080099c5
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b2:	e098      	b.n	8009ae6 <UART_SetConfig+0x27e>
 80099b4:	2302      	movs	r3, #2
 80099b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ba:	e094      	b.n	8009ae6 <UART_SetConfig+0x27e>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c2:	e090      	b.n	8009ae6 <UART_SetConfig+0x27e>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ca:	e08c      	b.n	8009ae6 <UART_SetConfig+0x27e>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d2:	e088      	b.n	8009ae6 <UART_SetConfig+0x27e>
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a5f      	ldr	r2, [pc, #380]	@ (8009b58 <UART_SetConfig+0x2f0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d125      	bne.n	8009a2a <UART_SetConfig+0x1c2>
 80099de:	4b5c      	ldr	r3, [pc, #368]	@ (8009b50 <UART_SetConfig+0x2e8>)
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099e8:	2b30      	cmp	r3, #48	@ 0x30
 80099ea:	d016      	beq.n	8009a1a <UART_SetConfig+0x1b2>
 80099ec:	2b30      	cmp	r3, #48	@ 0x30
 80099ee:	d818      	bhi.n	8009a22 <UART_SetConfig+0x1ba>
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d00a      	beq.n	8009a0a <UART_SetConfig+0x1a2>
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d814      	bhi.n	8009a22 <UART_SetConfig+0x1ba>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <UART_SetConfig+0x19a>
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d008      	beq.n	8009a12 <UART_SetConfig+0x1aa>
 8009a00:	e00f      	b.n	8009a22 <UART_SetConfig+0x1ba>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a08:	e06d      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a10:	e069      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a12:	2304      	movs	r3, #4
 8009a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a18:	e065      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a20:	e061      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a22:	2310      	movs	r3, #16
 8009a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a28:	e05d      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8009b5c <UART_SetConfig+0x2f4>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d125      	bne.n	8009a80 <UART_SetConfig+0x218>
 8009a34:	4b46      	ldr	r3, [pc, #280]	@ (8009b50 <UART_SetConfig+0x2e8>)
 8009a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a40:	d016      	beq.n	8009a70 <UART_SetConfig+0x208>
 8009a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a44:	d818      	bhi.n	8009a78 <UART_SetConfig+0x210>
 8009a46:	2b80      	cmp	r3, #128	@ 0x80
 8009a48:	d00a      	beq.n	8009a60 <UART_SetConfig+0x1f8>
 8009a4a:	2b80      	cmp	r3, #128	@ 0x80
 8009a4c:	d814      	bhi.n	8009a78 <UART_SetConfig+0x210>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <UART_SetConfig+0x1f0>
 8009a52:	2b40      	cmp	r3, #64	@ 0x40
 8009a54:	d008      	beq.n	8009a68 <UART_SetConfig+0x200>
 8009a56:	e00f      	b.n	8009a78 <UART_SetConfig+0x210>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a5e:	e042      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a60:	2302      	movs	r3, #2
 8009a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a66:	e03e      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6e:	e03a      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a76:	e036      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a7e:	e032      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a30      	ldr	r2, [pc, #192]	@ (8009b48 <UART_SetConfig+0x2e0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d12a      	bne.n	8009ae0 <UART_SetConfig+0x278>
 8009a8a:	4b31      	ldr	r3, [pc, #196]	@ (8009b50 <UART_SetConfig+0x2e8>)
 8009a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a98:	d01a      	beq.n	8009ad0 <UART_SetConfig+0x268>
 8009a9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a9e:	d81b      	bhi.n	8009ad8 <UART_SetConfig+0x270>
 8009aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aa4:	d00c      	beq.n	8009ac0 <UART_SetConfig+0x258>
 8009aa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aaa:	d815      	bhi.n	8009ad8 <UART_SetConfig+0x270>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <UART_SetConfig+0x250>
 8009ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab4:	d008      	beq.n	8009ac8 <UART_SetConfig+0x260>
 8009ab6:	e00f      	b.n	8009ad8 <UART_SetConfig+0x270>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009abe:	e012      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac6:	e00e      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ace:	e00a      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad6:	e006      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009ad8:	2310      	movs	r3, #16
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ade:	e002      	b.n	8009ae6 <UART_SetConfig+0x27e>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a17      	ldr	r2, [pc, #92]	@ (8009b48 <UART_SetConfig+0x2e0>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	f040 80a8 	bne.w	8009c42 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009af2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d834      	bhi.n	8009b64 <UART_SetConfig+0x2fc>
 8009afa:	a201      	add	r2, pc, #4	@ (adr r2, 8009b00 <UART_SetConfig+0x298>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b25 	.word	0x08009b25
 8009b04:	08009b65 	.word	0x08009b65
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b65 	.word	0x08009b65
 8009b10:	08009b33 	.word	0x08009b33
 8009b14:	08009b65 	.word	0x08009b65
 8009b18:	08009b65 	.word	0x08009b65
 8009b1c:	08009b65 	.word	0x08009b65
 8009b20:	08009b3b 	.word	0x08009b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b24:	f7fd fa2a 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8009b28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b2a:	e021      	b.n	8009b70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b60 <UART_SetConfig+0x2f8>)
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b30:	e01e      	b.n	8009b70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b32:	f7fd f9b5 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8009b36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b38:	e01a      	b.n	8009b70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b40:	e016      	b.n	8009b70 <UART_SetConfig+0x308>
 8009b42:	bf00      	nop
 8009b44:	cfff69f3 	.word	0xcfff69f3
 8009b48:	40008000 	.word	0x40008000
 8009b4c:	40013800 	.word	0x40013800
 8009b50:	40021000 	.word	0x40021000
 8009b54:	40004400 	.word	0x40004400
 8009b58:	40004800 	.word	0x40004800
 8009b5c:	40004c00 	.word	0x40004c00
 8009b60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 812a 	beq.w	8009dcc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7c:	4a9e      	ldr	r2, [pc, #632]	@ (8009df8 <UART_SetConfig+0x590>)
 8009b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b82:	461a      	mov	r2, r3
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b8a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	4413      	add	r3, r2
 8009b96:	69ba      	ldr	r2, [r7, #24]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d305      	bcc.n	8009ba8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d903      	bls.n	8009bb0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bae:	e10d      	b.n	8009dcc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	60bb      	str	r3, [r7, #8]
 8009bb6:	60fa      	str	r2, [r7, #12]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bbc:	4a8e      	ldr	r2, [pc, #568]	@ (8009df8 <UART_SetConfig+0x590>)
 8009bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bd2:	f7f7 f881 	bl	8000cd8 <__aeabi_uldivmod>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	4610      	mov	r0, r2
 8009bdc:	4619      	mov	r1, r3
 8009bde:	f04f 0200 	mov.w	r2, #0
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	020b      	lsls	r3, r1, #8
 8009be8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bec:	0202      	lsls	r2, r0, #8
 8009bee:	6979      	ldr	r1, [r7, #20]
 8009bf0:	6849      	ldr	r1, [r1, #4]
 8009bf2:	0849      	lsrs	r1, r1, #1
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	eb12 0804 	adds.w	r8, r2, r4
 8009bfe:	eb43 0905 	adc.w	r9, r3, r5
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	469a      	mov	sl, r3
 8009c0a:	4693      	mov	fp, r2
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	465b      	mov	r3, fp
 8009c10:	4640      	mov	r0, r8
 8009c12:	4649      	mov	r1, r9
 8009c14:	f7f7 f860 	bl	8000cd8 <__aeabi_uldivmod>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c26:	d308      	bcc.n	8009c3a <UART_SetConfig+0x3d2>
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c2e:	d204      	bcs.n	8009c3a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6a3a      	ldr	r2, [r7, #32]
 8009c36:	60da      	str	r2, [r3, #12]
 8009c38:	e0c8      	b.n	8009dcc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c40:	e0c4      	b.n	8009dcc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c4a:	d167      	bne.n	8009d1c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	d828      	bhi.n	8009ca6 <UART_SetConfig+0x43e>
 8009c54:	a201      	add	r2, pc, #4	@ (adr r2, 8009c5c <UART_SetConfig+0x3f4>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c89 	.word	0x08009c89
 8009c64:	08009c91 	.word	0x08009c91
 8009c68:	08009ca7 	.word	0x08009ca7
 8009c6c:	08009c97 	.word	0x08009c97
 8009c70:	08009ca7 	.word	0x08009ca7
 8009c74:	08009ca7 	.word	0x08009ca7
 8009c78:	08009ca7 	.word	0x08009ca7
 8009c7c:	08009c9f 	.word	0x08009c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c80:	f7fd f97c 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8009c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c86:	e014      	b.n	8009cb2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c88:	f7fd f98e 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 8009c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c8e:	e010      	b.n	8009cb2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c90:	4b5a      	ldr	r3, [pc, #360]	@ (8009dfc <UART_SetConfig+0x594>)
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c94:	e00d      	b.n	8009cb2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c96:	f7fd f903 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8009c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c9c:	e009      	b.n	8009cb2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca4:	e005      	b.n	8009cb2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8089 	beq.w	8009dcc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8009df8 <UART_SetConfig+0x590>)
 8009cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ccc:	005a      	lsls	r2, r3, #1
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	441a      	add	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	2b0f      	cmp	r3, #15
 8009ce4:	d916      	bls.n	8009d14 <UART_SetConfig+0x4ac>
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cec:	d212      	bcs.n	8009d14 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	f023 030f 	bic.w	r3, r3, #15
 8009cf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	085b      	lsrs	r3, r3, #1
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	8bfb      	ldrh	r3, [r7, #30]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	8bfa      	ldrh	r2, [r7, #30]
 8009d10:	60da      	str	r2, [r3, #12]
 8009d12:	e05b      	b.n	8009dcc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d1a:	e057      	b.n	8009dcc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d828      	bhi.n	8009d76 <UART_SetConfig+0x50e>
 8009d24:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <UART_SetConfig+0x4c4>)
 8009d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2a:	bf00      	nop
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d59 	.word	0x08009d59
 8009d34:	08009d61 	.word	0x08009d61
 8009d38:	08009d77 	.word	0x08009d77
 8009d3c:	08009d67 	.word	0x08009d67
 8009d40:	08009d77 	.word	0x08009d77
 8009d44:	08009d77 	.word	0x08009d77
 8009d48:	08009d77 	.word	0x08009d77
 8009d4c:	08009d6f 	.word	0x08009d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d50:	f7fd f914 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8009d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d56:	e014      	b.n	8009d82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d58:	f7fd f926 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 8009d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d5e:	e010      	b.n	8009d82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d60:	4b26      	ldr	r3, [pc, #152]	@ (8009dfc <UART_SetConfig+0x594>)
 8009d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d64:	e00d      	b.n	8009d82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d66:	f7fd f89b 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8009d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d6c:	e009      	b.n	8009d82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d74:	e005      	b.n	8009d82 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d80:	bf00      	nop
    }

    if (pclk != 0U)
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d021      	beq.n	8009dcc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8009df8 <UART_SetConfig+0x590>)
 8009d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	085b      	lsrs	r3, r3, #1
 8009da0:	441a      	add	r2, r3
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	2b0f      	cmp	r3, #15
 8009db0:	d909      	bls.n	8009dc6 <UART_SetConfig+0x55e>
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db8:	d205      	bcs.n	8009dc6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	60da      	str	r2, [r3, #12]
 8009dc4:	e002      	b.n	8009dcc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2200      	movs	r2, #0
 8009de0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2200      	movs	r2, #0
 8009de6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009de8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3730      	adds	r7, #48	@ 0x30
 8009df0:	46bd      	mov	sp, r7
 8009df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009df6:	bf00      	nop
 8009df8:	0801329c 	.word	0x0801329c
 8009dfc:	00f42400 	.word	0x00f42400

08009e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0c:	f003 0308 	and.w	r3, r3, #8
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00a      	beq.n	8009e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01a      	beq.n	8009f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009efe:	d10a      	bne.n	8009f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00a      	beq.n	8009f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b098      	sub	sp, #96	@ 0x60
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f54:	f7f8 fe2c 	bl	8002bb0 <HAL_GetTick>
 8009f58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d12f      	bne.n	8009fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f70:	2200      	movs	r2, #0
 8009f72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f88e 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d022      	beq.n	8009fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8a:	e853 3f00 	ldrex	r3, [r3]
 8009f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fa2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e6      	bne.n	8009f82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e063      	b.n	800a090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d149      	bne.n	800a06a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f857 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d03c      	beq.n	800a06a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a010:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	60fb      	str	r3, [r7, #12]
   return(result);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a042:	61fa      	str	r2, [r7, #28]
 800a044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	69b9      	ldr	r1, [r7, #24]
 800a048:	69fa      	ldr	r2, [r7, #28]
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	617b      	str	r3, [r7, #20]
   return(result);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e012      	b.n	800a090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3758      	adds	r7, #88	@ 0x58
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a8:	e04f      	b.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d04b      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b2:	f7f8 fd7d 	bl	8002bb0 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d302      	bcc.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e04e      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d037      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b80      	cmp	r3, #128	@ 0x80
 800a0de:	d034      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d031      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d110      	bne.n	800a116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f838 	bl	800a172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2208      	movs	r2, #8
 800a106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e029      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a124:	d111      	bne.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 f81e 	bl	800a172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e00f      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69da      	ldr	r2, [r3, #28]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4013      	ands	r3, r2
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	bf0c      	ite	eq
 800a15a:	2301      	moveq	r3, #1
 800a15c:	2300      	movne	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	429a      	cmp	r2, r3
 800a166:	d0a0      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a172:	b480      	push	{r7}
 800a174:	b095      	sub	sp, #84	@ 0x54
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a198:	643b      	str	r3, [r7, #64]	@ 0x40
 800a19a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a19e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e6      	bne.n	800a17a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1c2:	f023 0301 	bic.w	r3, r3, #1
 800a1c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e3      	bne.n	800a1ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d118      	bne.n	800a21e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f023 0310 	bic.w	r3, r3, #16
 800a200:	647b      	str	r3, [r7, #68]	@ 0x44
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6979      	ldr	r1, [r7, #20]
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	613b      	str	r3, [r7, #16]
   return(result);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e6      	bne.n	800a1ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a232:	bf00      	nop
 800a234:	3754      	adds	r7, #84	@ 0x54
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a23e:	b480      	push	{r7}
 800a240:	b085      	sub	sp, #20
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d101      	bne.n	800a254 <HAL_UARTEx_DisableFifoMode+0x16>
 800a250:	2302      	movs	r3, #2
 800a252:	e027      	b.n	800a2a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2224      	movs	r2, #36	@ 0x24
 800a260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0201 	bic.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a282:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d101      	bne.n	800a2c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e02d      	b.n	800a324 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2224      	movs	r2, #36	@ 0x24
 800a2d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f022 0201 	bic.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f84f 	bl	800a3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2220      	movs	r2, #32
 800a316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a340:	2302      	movs	r3, #2
 800a342:	e02d      	b.n	800a3a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2224      	movs	r2, #36	@ 0x24
 800a350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0201 	bic.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f811 	bl	800a3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d108      	bne.n	800a3ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3c8:	e031      	b.n	800a42e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3ce:	2308      	movs	r3, #8
 800a3d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	0e5b      	lsrs	r3, r3, #25
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	f003 0307 	and.w	r3, r3, #7
 800a3e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	0f5b      	lsrs	r3, r3, #29
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	f003 0307 	and.w	r3, r3, #7
 800a3f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	7b3a      	ldrb	r2, [r7, #12]
 800a3f6:	4911      	ldr	r1, [pc, #68]	@ (800a43c <UARTEx_SetNbDataToProcess+0x94>)
 800a3f8:	5c8a      	ldrb	r2, [r1, r2]
 800a3fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3fe:	7b3a      	ldrb	r2, [r7, #12]
 800a400:	490f      	ldr	r1, [pc, #60]	@ (800a440 <UARTEx_SetNbDataToProcess+0x98>)
 800a402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a404:	fb93 f3f2 	sdiv	r3, r3, r2
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	7b7a      	ldrb	r2, [r7, #13]
 800a414:	4909      	ldr	r1, [pc, #36]	@ (800a43c <UARTEx_SetNbDataToProcess+0x94>)
 800a416:	5c8a      	ldrb	r2, [r1, r2]
 800a418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a41c:	7b7a      	ldrb	r2, [r7, #13]
 800a41e:	4908      	ldr	r1, [pc, #32]	@ (800a440 <UARTEx_SetNbDataToProcess+0x98>)
 800a420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a422:	fb93 f3f2 	sdiv	r3, r3, r2
 800a426:	b29a      	uxth	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	080132b4 	.word	0x080132b4
 800a440:	080132bc 	.word	0x080132bc

0800a444 <malloc>:
 800a444:	4b02      	ldr	r3, [pc, #8]	@ (800a450 <malloc+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 b80b 	b.w	800a464 <_malloc_r>
 800a44e:	bf00      	nop
 800a450:	20000438 	.word	0x20000438

0800a454 <free>:
 800a454:	4b02      	ldr	r3, [pc, #8]	@ (800a460 <free+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f000 bd87 	b.w	800af6c <_free_r>
 800a45e:	bf00      	nop
 800a460:	20000438 	.word	0x20000438

0800a464 <_malloc_r>:
 800a464:	f101 030b 	add.w	r3, r1, #11
 800a468:	2b16      	cmp	r3, #22
 800a46a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46e:	4605      	mov	r5, r0
 800a470:	d906      	bls.n	800a480 <_malloc_r+0x1c>
 800a472:	f033 0707 	bics.w	r7, r3, #7
 800a476:	d504      	bpl.n	800a482 <_malloc_r+0x1e>
 800a478:	230c      	movs	r3, #12
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	2400      	movs	r4, #0
 800a47e:	e1a3      	b.n	800a7c8 <_malloc_r+0x364>
 800a480:	2710      	movs	r7, #16
 800a482:	42b9      	cmp	r1, r7
 800a484:	d8f8      	bhi.n	800a478 <_malloc_r+0x14>
 800a486:	4628      	mov	r0, r5
 800a488:	f000 fa26 	bl	800a8d8 <__malloc_lock>
 800a48c:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800a490:	4eaf      	ldr	r6, [pc, #700]	@ (800a750 <_malloc_r+0x2ec>)
 800a492:	d237      	bcs.n	800a504 <_malloc_r+0xa0>
 800a494:	f107 0208 	add.w	r2, r7, #8
 800a498:	4432      	add	r2, r6
 800a49a:	f1a2 0108 	sub.w	r1, r2, #8
 800a49e:	6854      	ldr	r4, [r2, #4]
 800a4a0:	428c      	cmp	r4, r1
 800a4a2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a4a6:	d102      	bne.n	800a4ae <_malloc_r+0x4a>
 800a4a8:	68d4      	ldr	r4, [r2, #12]
 800a4aa:	42a2      	cmp	r2, r4
 800a4ac:	d010      	beq.n	800a4d0 <_malloc_r+0x6c>
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a4b4:	f023 0303 	bic.w	r3, r3, #3
 800a4b8:	60ca      	str	r2, [r1, #12]
 800a4ba:	4423      	add	r3, r4
 800a4bc:	6091      	str	r1, [r2, #8]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	f042 0201 	orr.w	r2, r2, #1
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f000 fa0c 	bl	800a8e4 <__malloc_unlock>
 800a4cc:	3408      	adds	r4, #8
 800a4ce:	e17b      	b.n	800a7c8 <_malloc_r+0x364>
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	6934      	ldr	r4, [r6, #16]
 800a4d4:	499f      	ldr	r1, [pc, #636]	@ (800a754 <_malloc_r+0x2f0>)
 800a4d6:	428c      	cmp	r4, r1
 800a4d8:	d077      	beq.n	800a5ca <_malloc_r+0x166>
 800a4da:	6862      	ldr	r2, [r4, #4]
 800a4dc:	f022 0c03 	bic.w	ip, r2, #3
 800a4e0:	ebac 0007 	sub.w	r0, ip, r7
 800a4e4:	280f      	cmp	r0, #15
 800a4e6:	dd48      	ble.n	800a57a <_malloc_r+0x116>
 800a4e8:	19e2      	adds	r2, r4, r7
 800a4ea:	f040 0301 	orr.w	r3, r0, #1
 800a4ee:	f047 0701 	orr.w	r7, r7, #1
 800a4f2:	6067      	str	r7, [r4, #4]
 800a4f4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a4f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	f844 000c 	str.w	r0, [r4, ip]
 800a502:	e7e0      	b.n	800a4c6 <_malloc_r+0x62>
 800a504:	0a7b      	lsrs	r3, r7, #9
 800a506:	d02a      	beq.n	800a55e <_malloc_r+0xfa>
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d812      	bhi.n	800a532 <_malloc_r+0xce>
 800a50c:	09bb      	lsrs	r3, r7, #6
 800a50e:	3338      	adds	r3, #56	@ 0x38
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a516:	f1a2 0c08 	sub.w	ip, r2, #8
 800a51a:	6854      	ldr	r4, [r2, #4]
 800a51c:	4564      	cmp	r4, ip
 800a51e:	d006      	beq.n	800a52e <_malloc_r+0xca>
 800a520:	6862      	ldr	r2, [r4, #4]
 800a522:	f022 0203 	bic.w	r2, r2, #3
 800a526:	1bd0      	subs	r0, r2, r7
 800a528:	280f      	cmp	r0, #15
 800a52a:	dd1c      	ble.n	800a566 <_malloc_r+0x102>
 800a52c:	3b01      	subs	r3, #1
 800a52e:	3301      	adds	r3, #1
 800a530:	e7cf      	b.n	800a4d2 <_malloc_r+0x6e>
 800a532:	2b14      	cmp	r3, #20
 800a534:	d801      	bhi.n	800a53a <_malloc_r+0xd6>
 800a536:	335b      	adds	r3, #91	@ 0x5b
 800a538:	e7ea      	b.n	800a510 <_malloc_r+0xac>
 800a53a:	2b54      	cmp	r3, #84	@ 0x54
 800a53c:	d802      	bhi.n	800a544 <_malloc_r+0xe0>
 800a53e:	0b3b      	lsrs	r3, r7, #12
 800a540:	336e      	adds	r3, #110	@ 0x6e
 800a542:	e7e5      	b.n	800a510 <_malloc_r+0xac>
 800a544:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800a548:	d802      	bhi.n	800a550 <_malloc_r+0xec>
 800a54a:	0bfb      	lsrs	r3, r7, #15
 800a54c:	3377      	adds	r3, #119	@ 0x77
 800a54e:	e7df      	b.n	800a510 <_malloc_r+0xac>
 800a550:	f240 5254 	movw	r2, #1364	@ 0x554
 800a554:	4293      	cmp	r3, r2
 800a556:	d804      	bhi.n	800a562 <_malloc_r+0xfe>
 800a558:	0cbb      	lsrs	r3, r7, #18
 800a55a:	337c      	adds	r3, #124	@ 0x7c
 800a55c:	e7d8      	b.n	800a510 <_malloc_r+0xac>
 800a55e:	233f      	movs	r3, #63	@ 0x3f
 800a560:	e7d6      	b.n	800a510 <_malloc_r+0xac>
 800a562:	237e      	movs	r3, #126	@ 0x7e
 800a564:	e7d4      	b.n	800a510 <_malloc_r+0xac>
 800a566:	2800      	cmp	r0, #0
 800a568:	68e1      	ldr	r1, [r4, #12]
 800a56a:	db04      	blt.n	800a576 <_malloc_r+0x112>
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	60d9      	str	r1, [r3, #12]
 800a570:	608b      	str	r3, [r1, #8]
 800a572:	18a3      	adds	r3, r4, r2
 800a574:	e7a3      	b.n	800a4be <_malloc_r+0x5a>
 800a576:	460c      	mov	r4, r1
 800a578:	e7d0      	b.n	800a51c <_malloc_r+0xb8>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a580:	db07      	blt.n	800a592 <_malloc_r+0x12e>
 800a582:	44a4      	add	ip, r4
 800a584:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	f8cc 3004 	str.w	r3, [ip, #4]
 800a590:	e799      	b.n	800a4c6 <_malloc_r+0x62>
 800a592:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800a596:	6870      	ldr	r0, [r6, #4]
 800a598:	f080 8095 	bcs.w	800a6c6 <_malloc_r+0x262>
 800a59c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a5a0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a5a4:	f04f 0c01 	mov.w	ip, #1
 800a5a8:	3201      	adds	r2, #1
 800a5aa:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a5ae:	ea4c 0000 	orr.w	r0, ip, r0
 800a5b2:	6070      	str	r0, [r6, #4]
 800a5b4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a5b8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a5bc:	3808      	subs	r0, #8
 800a5be:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a5c2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800a5c6:	f8cc 400c 	str.w	r4, [ip, #12]
 800a5ca:	1098      	asrs	r0, r3, #2
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	4082      	lsls	r2, r0
 800a5d0:	6870      	ldr	r0, [r6, #4]
 800a5d2:	4290      	cmp	r0, r2
 800a5d4:	d326      	bcc.n	800a624 <_malloc_r+0x1c0>
 800a5d6:	4210      	tst	r0, r2
 800a5d8:	d106      	bne.n	800a5e8 <_malloc_r+0x184>
 800a5da:	f023 0303 	bic.w	r3, r3, #3
 800a5de:	0052      	lsls	r2, r2, #1
 800a5e0:	4210      	tst	r0, r2
 800a5e2:	f103 0304 	add.w	r3, r3, #4
 800a5e6:	d0fa      	beq.n	800a5de <_malloc_r+0x17a>
 800a5e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800a5ec:	46c1      	mov	r9, r8
 800a5ee:	469e      	mov	lr, r3
 800a5f0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a5f4:	454c      	cmp	r4, r9
 800a5f6:	f040 80b9 	bne.w	800a76c <_malloc_r+0x308>
 800a5fa:	f10e 0e01 	add.w	lr, lr, #1
 800a5fe:	f01e 0f03 	tst.w	lr, #3
 800a602:	f109 0908 	add.w	r9, r9, #8
 800a606:	d1f3      	bne.n	800a5f0 <_malloc_r+0x18c>
 800a608:	0798      	lsls	r0, r3, #30
 800a60a:	f040 80e3 	bne.w	800a7d4 <_malloc_r+0x370>
 800a60e:	6873      	ldr	r3, [r6, #4]
 800a610:	ea23 0302 	bic.w	r3, r3, r2
 800a614:	6073      	str	r3, [r6, #4]
 800a616:	6870      	ldr	r0, [r6, #4]
 800a618:	0052      	lsls	r2, r2, #1
 800a61a:	4290      	cmp	r0, r2
 800a61c:	d302      	bcc.n	800a624 <_malloc_r+0x1c0>
 800a61e:	2a00      	cmp	r2, #0
 800a620:	f040 80e5 	bne.w	800a7ee <_malloc_r+0x38a>
 800a624:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800a628:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a62c:	f023 0903 	bic.w	r9, r3, #3
 800a630:	45b9      	cmp	r9, r7
 800a632:	d304      	bcc.n	800a63e <_malloc_r+0x1da>
 800a634:	eba9 0207 	sub.w	r2, r9, r7
 800a638:	2a0f      	cmp	r2, #15
 800a63a:	f300 8141 	bgt.w	800a8c0 <_malloc_r+0x45c>
 800a63e:	4b46      	ldr	r3, [pc, #280]	@ (800a758 <_malloc_r+0x2f4>)
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	3110      	adds	r1, #16
 800a644:	4439      	add	r1, r7
 800a646:	2008      	movs	r0, #8
 800a648:	9101      	str	r1, [sp, #4]
 800a64a:	f000 fc1d 	bl	800ae88 <sysconf>
 800a64e:	4a43      	ldr	r2, [pc, #268]	@ (800a75c <_malloc_r+0x2f8>)
 800a650:	9901      	ldr	r1, [sp, #4]
 800a652:	6813      	ldr	r3, [r2, #0]
 800a654:	3301      	adds	r3, #1
 800a656:	bf1f      	itttt	ne
 800a658:	f101 31ff 	addne.w	r1, r1, #4294967295
 800a65c:	1809      	addne	r1, r1, r0
 800a65e:	4243      	negne	r3, r0
 800a660:	4019      	andne	r1, r3
 800a662:	4680      	mov	r8, r0
 800a664:	4628      	mov	r0, r5
 800a666:	9101      	str	r1, [sp, #4]
 800a668:	f000 fbbe 	bl	800ade8 <_sbrk_r>
 800a66c:	1c42      	adds	r2, r0, #1
 800a66e:	eb0a 0b09 	add.w	fp, sl, r9
 800a672:	4604      	mov	r4, r0
 800a674:	f000 80f7 	beq.w	800a866 <_malloc_r+0x402>
 800a678:	4583      	cmp	fp, r0
 800a67a:	9901      	ldr	r1, [sp, #4]
 800a67c:	4a37      	ldr	r2, [pc, #220]	@ (800a75c <_malloc_r+0x2f8>)
 800a67e:	d902      	bls.n	800a686 <_malloc_r+0x222>
 800a680:	45b2      	cmp	sl, r6
 800a682:	f040 80f0 	bne.w	800a866 <_malloc_r+0x402>
 800a686:	4b36      	ldr	r3, [pc, #216]	@ (800a760 <_malloc_r+0x2fc>)
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	45a3      	cmp	fp, r4
 800a68c:	eb00 0e01 	add.w	lr, r0, r1
 800a690:	f8c3 e000 	str.w	lr, [r3]
 800a694:	f108 3cff 	add.w	ip, r8, #4294967295
 800a698:	f040 80ab 	bne.w	800a7f2 <_malloc_r+0x38e>
 800a69c:	ea1b 0f0c 	tst.w	fp, ip
 800a6a0:	f040 80a7 	bne.w	800a7f2 <_malloc_r+0x38e>
 800a6a4:	68b2      	ldr	r2, [r6, #8]
 800a6a6:	4449      	add	r1, r9
 800a6a8:	f041 0101 	orr.w	r1, r1, #1
 800a6ac:	6051      	str	r1, [r2, #4]
 800a6ae:	4a2d      	ldr	r2, [pc, #180]	@ (800a764 <_malloc_r+0x300>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6811      	ldr	r1, [r2, #0]
 800a6b4:	428b      	cmp	r3, r1
 800a6b6:	bf88      	it	hi
 800a6b8:	6013      	strhi	r3, [r2, #0]
 800a6ba:	4a2b      	ldr	r2, [pc, #172]	@ (800a768 <_malloc_r+0x304>)
 800a6bc:	6811      	ldr	r1, [r2, #0]
 800a6be:	428b      	cmp	r3, r1
 800a6c0:	bf88      	it	hi
 800a6c2:	6013      	strhi	r3, [r2, #0]
 800a6c4:	e0cf      	b.n	800a866 <_malloc_r+0x402>
 800a6c6:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800a6ca:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a6ce:	d218      	bcs.n	800a702 <_malloc_r+0x29e>
 800a6d0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a6d4:	3238      	adds	r2, #56	@ 0x38
 800a6d6:	f102 0e01 	add.w	lr, r2, #1
 800a6da:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800a6de:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800a6e2:	45f0      	cmp	r8, lr
 800a6e4:	d12b      	bne.n	800a73e <_malloc_r+0x2da>
 800a6e6:	1092      	asrs	r2, r2, #2
 800a6e8:	f04f 0c01 	mov.w	ip, #1
 800a6ec:	fa0c f202 	lsl.w	r2, ip, r2
 800a6f0:	4302      	orrs	r2, r0
 800a6f2:	6072      	str	r2, [r6, #4]
 800a6f4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a6f8:	f8c8 4008 	str.w	r4, [r8, #8]
 800a6fc:	f8ce 400c 	str.w	r4, [lr, #12]
 800a700:	e763      	b.n	800a5ca <_malloc_r+0x166>
 800a702:	2a14      	cmp	r2, #20
 800a704:	d801      	bhi.n	800a70a <_malloc_r+0x2a6>
 800a706:	325b      	adds	r2, #91	@ 0x5b
 800a708:	e7e5      	b.n	800a6d6 <_malloc_r+0x272>
 800a70a:	2a54      	cmp	r2, #84	@ 0x54
 800a70c:	d803      	bhi.n	800a716 <_malloc_r+0x2b2>
 800a70e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a712:	326e      	adds	r2, #110	@ 0x6e
 800a714:	e7df      	b.n	800a6d6 <_malloc_r+0x272>
 800a716:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800a71a:	d803      	bhi.n	800a724 <_malloc_r+0x2c0>
 800a71c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a720:	3277      	adds	r2, #119	@ 0x77
 800a722:	e7d8      	b.n	800a6d6 <_malloc_r+0x272>
 800a724:	f240 5e54 	movw	lr, #1364	@ 0x554
 800a728:	4572      	cmp	r2, lr
 800a72a:	bf9a      	itte	ls
 800a72c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a730:	327c      	addls	r2, #124	@ 0x7c
 800a732:	227e      	movhi	r2, #126	@ 0x7e
 800a734:	e7cf      	b.n	800a6d6 <_malloc_r+0x272>
 800a736:	f8de e008 	ldr.w	lr, [lr, #8]
 800a73a:	45f0      	cmp	r8, lr
 800a73c:	d005      	beq.n	800a74a <_malloc_r+0x2e6>
 800a73e:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a742:	f022 0203 	bic.w	r2, r2, #3
 800a746:	4562      	cmp	r2, ip
 800a748:	d8f5      	bhi.n	800a736 <_malloc_r+0x2d2>
 800a74a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a74e:	e7d1      	b.n	800a6f4 <_malloc_r+0x290>
 800a750:	20000024 	.word	0x20000024
 800a754:	2000002c 	.word	0x2000002c
 800a758:	20002c48 	.word	0x20002c48
 800a75c:	2000001c 	.word	0x2000001c
 800a760:	20002c18 	.word	0x20002c18
 800a764:	20002c44 	.word	0x20002c44
 800a768:	20002c40 	.word	0x20002c40
 800a76c:	6860      	ldr	r0, [r4, #4]
 800a76e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a772:	f020 0003 	bic.w	r0, r0, #3
 800a776:	eba0 0a07 	sub.w	sl, r0, r7
 800a77a:	f1ba 0f0f 	cmp.w	sl, #15
 800a77e:	dd12      	ble.n	800a7a6 <_malloc_r+0x342>
 800a780:	68a3      	ldr	r3, [r4, #8]
 800a782:	19e2      	adds	r2, r4, r7
 800a784:	f047 0701 	orr.w	r7, r7, #1
 800a788:	6067      	str	r7, [r4, #4]
 800a78a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a78e:	f8cc 3008 	str.w	r3, [ip, #8]
 800a792:	f04a 0301 	orr.w	r3, sl, #1
 800a796:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a79a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a79e:	6053      	str	r3, [r2, #4]
 800a7a0:	f844 a000 	str.w	sl, [r4, r0]
 800a7a4:	e68f      	b.n	800a4c6 <_malloc_r+0x62>
 800a7a6:	f1ba 0f00 	cmp.w	sl, #0
 800a7aa:	db11      	blt.n	800a7d0 <_malloc_r+0x36c>
 800a7ac:	4420      	add	r0, r4
 800a7ae:	6843      	ldr	r3, [r0, #4]
 800a7b0:	f043 0301 	orr.w	r3, r3, #1
 800a7b4:	6043      	str	r3, [r0, #4]
 800a7b6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a7c0:	f8cc 3008 	str.w	r3, [ip, #8]
 800a7c4:	f000 f88e 	bl	800a8e4 <__malloc_unlock>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	b003      	add	sp, #12
 800a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d0:	4664      	mov	r4, ip
 800a7d2:	e70f      	b.n	800a5f4 <_malloc_r+0x190>
 800a7d4:	f858 0908 	ldr.w	r0, [r8], #-8
 800a7d8:	4540      	cmp	r0, r8
 800a7da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7de:	f43f af13 	beq.w	800a608 <_malloc_r+0x1a4>
 800a7e2:	e718      	b.n	800a616 <_malloc_r+0x1b2>
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	0052      	lsls	r2, r2, #1
 800a7e8:	4210      	tst	r0, r2
 800a7ea:	d0fb      	beq.n	800a7e4 <_malloc_r+0x380>
 800a7ec:	e6fc      	b.n	800a5e8 <_malloc_r+0x184>
 800a7ee:	4673      	mov	r3, lr
 800a7f0:	e7fa      	b.n	800a7e8 <_malloc_r+0x384>
 800a7f2:	6810      	ldr	r0, [r2, #0]
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	bf1b      	ittet	ne
 800a7f8:	eba4 0b0b 	subne.w	fp, r4, fp
 800a7fc:	eb0b 020e 	addne.w	r2, fp, lr
 800a800:	6014      	streq	r4, [r2, #0]
 800a802:	601a      	strne	r2, [r3, #0]
 800a804:	f014 0b07 	ands.w	fp, r4, #7
 800a808:	bf1a      	itte	ne
 800a80a:	f1cb 0008 	rsbne	r0, fp, #8
 800a80e:	1824      	addne	r4, r4, r0
 800a810:	4658      	moveq	r0, fp
 800a812:	1862      	adds	r2, r4, r1
 800a814:	ea02 010c 	and.w	r1, r2, ip
 800a818:	4480      	add	r8, r0
 800a81a:	eba8 0801 	sub.w	r8, r8, r1
 800a81e:	ea08 080c 	and.w	r8, r8, ip
 800a822:	4641      	mov	r1, r8
 800a824:	4628      	mov	r0, r5
 800a826:	9201      	str	r2, [sp, #4]
 800a828:	f000 fade 	bl	800ade8 <_sbrk_r>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	9a01      	ldr	r2, [sp, #4]
 800a830:	4b28      	ldr	r3, [pc, #160]	@ (800a8d4 <_malloc_r+0x470>)
 800a832:	d107      	bne.n	800a844 <_malloc_r+0x3e0>
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	d023      	beq.n	800a882 <_malloc_r+0x41e>
 800a83a:	f1ab 0008 	sub.w	r0, fp, #8
 800a83e:	4410      	add	r0, r2
 800a840:	f04f 0800 	mov.w	r8, #0
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	60b4      	str	r4, [r6, #8]
 800a848:	1b00      	subs	r0, r0, r4
 800a84a:	4440      	add	r0, r8
 800a84c:	4442      	add	r2, r8
 800a84e:	f040 0001 	orr.w	r0, r0, #1
 800a852:	45b2      	cmp	sl, r6
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	6060      	str	r0, [r4, #4]
 800a858:	f43f af29 	beq.w	800a6ae <_malloc_r+0x24a>
 800a85c:	f1b9 0f0f 	cmp.w	r9, #15
 800a860:	d812      	bhi.n	800a888 <_malloc_r+0x424>
 800a862:	2301      	movs	r3, #1
 800a864:	6063      	str	r3, [r4, #4]
 800a866:	68b3      	ldr	r3, [r6, #8]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f023 0303 	bic.w	r3, r3, #3
 800a86e:	42bb      	cmp	r3, r7
 800a870:	eba3 0207 	sub.w	r2, r3, r7
 800a874:	d301      	bcc.n	800a87a <_malloc_r+0x416>
 800a876:	2a0f      	cmp	r2, #15
 800a878:	dc22      	bgt.n	800a8c0 <_malloc_r+0x45c>
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f832 	bl	800a8e4 <__malloc_unlock>
 800a880:	e5fc      	b.n	800a47c <_malloc_r+0x18>
 800a882:	4610      	mov	r0, r2
 800a884:	46d8      	mov	r8, fp
 800a886:	e7dd      	b.n	800a844 <_malloc_r+0x3e0>
 800a888:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a88c:	f1a9 090c 	sub.w	r9, r9, #12
 800a890:	f029 0907 	bic.w	r9, r9, #7
 800a894:	f002 0201 	and.w	r2, r2, #1
 800a898:	ea42 0209 	orr.w	r2, r2, r9
 800a89c:	f8ca 2004 	str.w	r2, [sl, #4]
 800a8a0:	2105      	movs	r1, #5
 800a8a2:	eb0a 0209 	add.w	r2, sl, r9
 800a8a6:	f1b9 0f0f 	cmp.w	r9, #15
 800a8aa:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800a8ae:	f67f aefe 	bls.w	800a6ae <_malloc_r+0x24a>
 800a8b2:	f10a 0108 	add.w	r1, sl, #8
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 fb58 	bl	800af6c <_free_r>
 800a8bc:	4b05      	ldr	r3, [pc, #20]	@ (800a8d4 <_malloc_r+0x470>)
 800a8be:	e6f6      	b.n	800a6ae <_malloc_r+0x24a>
 800a8c0:	68b4      	ldr	r4, [r6, #8]
 800a8c2:	f047 0301 	orr.w	r3, r7, #1
 800a8c6:	4427      	add	r7, r4
 800a8c8:	f042 0201 	orr.w	r2, r2, #1
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	60b7      	str	r7, [r6, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
 800a8d2:	e5f8      	b.n	800a4c6 <_malloc_r+0x62>
 800a8d4:	20002c18 	.word	0x20002c18

0800a8d8 <__malloc_lock>:
 800a8d8:	4801      	ldr	r0, [pc, #4]	@ (800a8e0 <__malloc_lock+0x8>)
 800a8da:	f000 bad3 	b.w	800ae84 <__retarget_lock_acquire_recursive>
 800a8de:	bf00      	nop
 800a8e0:	20002d8c 	.word	0x20002d8c

0800a8e4 <__malloc_unlock>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	@ (800a8ec <__malloc_unlock+0x8>)
 800a8e6:	f000 bace 	b.w	800ae86 <__retarget_lock_release_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	20002d8c 	.word	0x20002d8c

0800a8f0 <std>:
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8fe:	6083      	str	r3, [r0, #8]
 800a900:	8181      	strh	r1, [r0, #12]
 800a902:	6643      	str	r3, [r0, #100]	@ 0x64
 800a904:	81c2      	strh	r2, [r0, #14]
 800a906:	6183      	str	r3, [r0, #24]
 800a908:	4619      	mov	r1, r3
 800a90a:	2208      	movs	r2, #8
 800a90c:	305c      	adds	r0, #92	@ 0x5c
 800a90e:	f000 fa2e 	bl	800ad6e <memset>
 800a912:	4b0d      	ldr	r3, [pc, #52]	@ (800a948 <std+0x58>)
 800a914:	6223      	str	r3, [r4, #32]
 800a916:	4b0d      	ldr	r3, [pc, #52]	@ (800a94c <std+0x5c>)
 800a918:	6263      	str	r3, [r4, #36]	@ 0x24
 800a91a:	4b0d      	ldr	r3, [pc, #52]	@ (800a950 <std+0x60>)
 800a91c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a91e:	4b0d      	ldr	r3, [pc, #52]	@ (800a954 <std+0x64>)
 800a920:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a922:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <std+0x68>)
 800a924:	61e4      	str	r4, [r4, #28]
 800a926:	429c      	cmp	r4, r3
 800a928:	d006      	beq.n	800a938 <std+0x48>
 800a92a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a92e:	4294      	cmp	r4, r2
 800a930:	d002      	beq.n	800a938 <std+0x48>
 800a932:	33d0      	adds	r3, #208	@ 0xd0
 800a934:	429c      	cmp	r4, r3
 800a936:	d105      	bne.n	800a944 <std+0x54>
 800a938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a940:	f000 ba9e 	b.w	800ae80 <__retarget_lock_init_recursive>
 800a944:	bd10      	pop	{r4, pc}
 800a946:	bf00      	nop
 800a948:	0800ace9 	.word	0x0800ace9
 800a94c:	0800ad0b 	.word	0x0800ad0b
 800a950:	0800ad43 	.word	0x0800ad43
 800a954:	0800ad67 	.word	0x0800ad67
 800a958:	20002c4c 	.word	0x20002c4c

0800a95c <stdio_exit_handler>:
 800a95c:	4a02      	ldr	r2, [pc, #8]	@ (800a968 <stdio_exit_handler+0xc>)
 800a95e:	4903      	ldr	r1, [pc, #12]	@ (800a96c <stdio_exit_handler+0x10>)
 800a960:	4803      	ldr	r0, [pc, #12]	@ (800a970 <stdio_exit_handler+0x14>)
 800a962:	f000 b869 	b.w	800aa38 <_fwalk_sglue>
 800a966:	bf00      	nop
 800a968:	2000042c 	.word	0x2000042c
 800a96c:	0800d7db 	.word	0x0800d7db
 800a970:	20000440 	.word	0x20000440

0800a974 <cleanup_stdio>:
 800a974:	6841      	ldr	r1, [r0, #4]
 800a976:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a8 <cleanup_stdio+0x34>)
 800a978:	4299      	cmp	r1, r3
 800a97a:	b510      	push	{r4, lr}
 800a97c:	4604      	mov	r4, r0
 800a97e:	d001      	beq.n	800a984 <cleanup_stdio+0x10>
 800a980:	f002 ff2b 	bl	800d7da <_fclose_r>
 800a984:	68a1      	ldr	r1, [r4, #8]
 800a986:	4b09      	ldr	r3, [pc, #36]	@ (800a9ac <cleanup_stdio+0x38>)
 800a988:	4299      	cmp	r1, r3
 800a98a:	d002      	beq.n	800a992 <cleanup_stdio+0x1e>
 800a98c:	4620      	mov	r0, r4
 800a98e:	f002 ff24 	bl	800d7da <_fclose_r>
 800a992:	68e1      	ldr	r1, [r4, #12]
 800a994:	4b06      	ldr	r3, [pc, #24]	@ (800a9b0 <cleanup_stdio+0x3c>)
 800a996:	4299      	cmp	r1, r3
 800a998:	d004      	beq.n	800a9a4 <cleanup_stdio+0x30>
 800a99a:	4620      	mov	r0, r4
 800a99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a0:	f002 bf1b 	b.w	800d7da <_fclose_r>
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20002c4c 	.word	0x20002c4c
 800a9ac:	20002cb4 	.word	0x20002cb4
 800a9b0:	20002d1c 	.word	0x20002d1c

0800a9b4 <global_stdio_init.part.0>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e4 <global_stdio_init.part.0+0x30>)
 800a9b8:	4c0b      	ldr	r4, [pc, #44]	@ (800a9e8 <global_stdio_init.part.0+0x34>)
 800a9ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a9ec <global_stdio_init.part.0+0x38>)
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2104      	movs	r1, #4
 800a9c4:	f7ff ff94 	bl	800a8f0 <std>
 800a9c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	2109      	movs	r1, #9
 800a9d0:	f7ff ff8e 	bl	800a8f0 <std>
 800a9d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9d8:	2202      	movs	r2, #2
 800a9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9de:	2112      	movs	r1, #18
 800a9e0:	f7ff bf86 	b.w	800a8f0 <std>
 800a9e4:	20002d84 	.word	0x20002d84
 800a9e8:	20002c4c 	.word	0x20002c4c
 800a9ec:	0800a95d 	.word	0x0800a95d

0800a9f0 <__sfp_lock_acquire>:
 800a9f0:	4801      	ldr	r0, [pc, #4]	@ (800a9f8 <__sfp_lock_acquire+0x8>)
 800a9f2:	f000 ba47 	b.w	800ae84 <__retarget_lock_acquire_recursive>
 800a9f6:	bf00      	nop
 800a9f8:	20002d8e 	.word	0x20002d8e

0800a9fc <__sfp_lock_release>:
 800a9fc:	4801      	ldr	r0, [pc, #4]	@ (800aa04 <__sfp_lock_release+0x8>)
 800a9fe:	f000 ba42 	b.w	800ae86 <__retarget_lock_release_recursive>
 800aa02:	bf00      	nop
 800aa04:	20002d8e 	.word	0x20002d8e

0800aa08 <__sinit>:
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	f7ff fff0 	bl	800a9f0 <__sfp_lock_acquire>
 800aa10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa12:	b11b      	cbz	r3, 800aa1c <__sinit+0x14>
 800aa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa18:	f7ff bff0 	b.w	800a9fc <__sfp_lock_release>
 800aa1c:	4b04      	ldr	r3, [pc, #16]	@ (800aa30 <__sinit+0x28>)
 800aa1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa20:	4b04      	ldr	r3, [pc, #16]	@ (800aa34 <__sinit+0x2c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f5      	bne.n	800aa14 <__sinit+0xc>
 800aa28:	f7ff ffc4 	bl	800a9b4 <global_stdio_init.part.0>
 800aa2c:	e7f2      	b.n	800aa14 <__sinit+0xc>
 800aa2e:	bf00      	nop
 800aa30:	0800a975 	.word	0x0800a975
 800aa34:	20002d84 	.word	0x20002d84

0800aa38 <_fwalk_sglue>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	4688      	mov	r8, r1
 800aa40:	4614      	mov	r4, r2
 800aa42:	2600      	movs	r6, #0
 800aa44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa48:	f1b9 0901 	subs.w	r9, r9, #1
 800aa4c:	d505      	bpl.n	800aa5a <_fwalk_sglue+0x22>
 800aa4e:	6824      	ldr	r4, [r4, #0]
 800aa50:	2c00      	cmp	r4, #0
 800aa52:	d1f7      	bne.n	800aa44 <_fwalk_sglue+0xc>
 800aa54:	4630      	mov	r0, r6
 800aa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	89ab      	ldrh	r3, [r5, #12]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d907      	bls.n	800aa70 <_fwalk_sglue+0x38>
 800aa60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa64:	3301      	adds	r3, #1
 800aa66:	d003      	beq.n	800aa70 <_fwalk_sglue+0x38>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	47c0      	blx	r8
 800aa6e:	4306      	orrs	r6, r0
 800aa70:	3568      	adds	r5, #104	@ 0x68
 800aa72:	e7e9      	b.n	800aa48 <_fwalk_sglue+0x10>

0800aa74 <_puts_r>:
 800aa74:	b530      	push	{r4, r5, lr}
 800aa76:	4605      	mov	r5, r0
 800aa78:	b089      	sub	sp, #36	@ 0x24
 800aa7a:	4608      	mov	r0, r1
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	f7f5 fbcf 	bl	8000220 <strlen>
 800aa82:	4b1e      	ldr	r3, [pc, #120]	@ (800aafc <_puts_r+0x88>)
 800aa84:	9306      	str	r3, [sp, #24]
 800aa86:	2301      	movs	r3, #1
 800aa88:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800aa8c:	9307      	str	r3, [sp, #28]
 800aa8e:	4418      	add	r0, r3
 800aa90:	ab04      	add	r3, sp, #16
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	2302      	movs	r3, #2
 800aa96:	9302      	str	r3, [sp, #8]
 800aa98:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800aa9a:	68ac      	ldr	r4, [r5, #8]
 800aa9c:	9003      	str	r0, [sp, #12]
 800aa9e:	b913      	cbnz	r3, 800aaa6 <_puts_r+0x32>
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7ff ffb1 	bl	800aa08 <__sinit>
 800aaa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aaa8:	07db      	lsls	r3, r3, #31
 800aaaa:	d405      	bmi.n	800aab8 <_puts_r+0x44>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	0598      	lsls	r0, r3, #22
 800aab0:	d402      	bmi.n	800aab8 <_puts_r+0x44>
 800aab2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aab4:	f000 f9e6 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800aab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aabc:	0499      	lsls	r1, r3, #18
 800aabe:	d406      	bmi.n	800aace <_puts_r+0x5a>
 800aac0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aacc:	6663      	str	r3, [r4, #100]	@ 0x64
 800aace:	4628      	mov	r0, r5
 800aad0:	aa01      	add	r2, sp, #4
 800aad2:	4621      	mov	r1, r4
 800aad4:	f002 ffec 	bl	800dab0 <__sfvwrite_r>
 800aad8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aada:	2800      	cmp	r0, #0
 800aadc:	bf0c      	ite	eq
 800aade:	250a      	moveq	r5, #10
 800aae0:	f04f 35ff 	movne.w	r5, #4294967295
 800aae4:	07da      	lsls	r2, r3, #31
 800aae6:	d405      	bmi.n	800aaf4 <_puts_r+0x80>
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	059b      	lsls	r3, r3, #22
 800aaec:	d402      	bmi.n	800aaf4 <_puts_r+0x80>
 800aaee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaf0:	f000 f9c9 	bl	800ae86 <__retarget_lock_release_recursive>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	b009      	add	sp, #36	@ 0x24
 800aaf8:	bd30      	pop	{r4, r5, pc}
 800aafa:	bf00      	nop
 800aafc:	080136a3 	.word	0x080136a3

0800ab00 <puts>:
 800ab00:	4b02      	ldr	r3, [pc, #8]	@ (800ab0c <puts+0xc>)
 800ab02:	4601      	mov	r1, r0
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	f7ff bfb5 	b.w	800aa74 <_puts_r>
 800ab0a:	bf00      	nop
 800ab0c:	20000438 	.word	0x20000438

0800ab10 <scanf>:
 800ab10:	b40f      	push	{r0, r1, r2, r3}
 800ab12:	b507      	push	{r0, r1, r2, lr}
 800ab14:	4906      	ldr	r1, [pc, #24]	@ (800ab30 <scanf+0x20>)
 800ab16:	ab04      	add	r3, sp, #16
 800ab18:	6808      	ldr	r0, [r1, #0]
 800ab1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab1e:	6841      	ldr	r1, [r0, #4]
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	f002 fe47 	bl	800d7b4 <_vfscanf_r>
 800ab26:	b003      	add	sp, #12
 800ab28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab2c:	b004      	add	sp, #16
 800ab2e:	4770      	bx	lr
 800ab30:	20000438 	.word	0x20000438

0800ab34 <setvbuf>:
 800ab34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	461d      	mov	r5, r3
 800ab3a:	4b5a      	ldr	r3, [pc, #360]	@ (800aca4 <setvbuf+0x170>)
 800ab3c:	681f      	ldr	r7, [r3, #0]
 800ab3e:	4604      	mov	r4, r0
 800ab40:	460e      	mov	r6, r1
 800ab42:	4690      	mov	r8, r2
 800ab44:	b127      	cbz	r7, 800ab50 <setvbuf+0x1c>
 800ab46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab48:	b913      	cbnz	r3, 800ab50 <setvbuf+0x1c>
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7ff ff5c 	bl	800aa08 <__sinit>
 800ab50:	f1b8 0f02 	cmp.w	r8, #2
 800ab54:	d006      	beq.n	800ab64 <setvbuf+0x30>
 800ab56:	f1b8 0f01 	cmp.w	r8, #1
 800ab5a:	f200 80a0 	bhi.w	800ac9e <setvbuf+0x16a>
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	f2c0 809d 	blt.w	800ac9e <setvbuf+0x16a>
 800ab64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab66:	07d9      	lsls	r1, r3, #31
 800ab68:	d405      	bmi.n	800ab76 <setvbuf+0x42>
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	059a      	lsls	r2, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <setvbuf+0x42>
 800ab70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab72:	f000 f987 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800ab76:	4621      	mov	r1, r4
 800ab78:	4638      	mov	r0, r7
 800ab7a:	f002 ff0b 	bl	800d994 <_fflush_r>
 800ab7e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab80:	b141      	cbz	r1, 800ab94 <setvbuf+0x60>
 800ab82:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800ab86:	4299      	cmp	r1, r3
 800ab88:	d002      	beq.n	800ab90 <setvbuf+0x5c>
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f000 f9ee 	bl	800af6c <_free_r>
 800ab90:	2300      	movs	r3, #0
 800ab92:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab94:	2300      	movs	r3, #0
 800ab96:	61a3      	str	r3, [r4, #24]
 800ab98:	6063      	str	r3, [r4, #4]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	061b      	lsls	r3, r3, #24
 800ab9e:	d503      	bpl.n	800aba8 <setvbuf+0x74>
 800aba0:	6921      	ldr	r1, [r4, #16]
 800aba2:	4638      	mov	r0, r7
 800aba4:	f000 f9e2 	bl	800af6c <_free_r>
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800abae:	f023 0303 	bic.w	r3, r3, #3
 800abb2:	f1b8 0f02 	cmp.w	r8, #2
 800abb6:	81a3      	strh	r3, [r4, #12]
 800abb8:	d067      	beq.n	800ac8a <setvbuf+0x156>
 800abba:	ab01      	add	r3, sp, #4
 800abbc:	466a      	mov	r2, sp
 800abbe:	4621      	mov	r1, r4
 800abc0:	4638      	mov	r0, r7
 800abc2:	f003 f8c1 	bl	800dd48 <__swhatbuf_r>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	4318      	orrs	r0, r3
 800abca:	81a0      	strh	r0, [r4, #12]
 800abcc:	bb2d      	cbnz	r5, 800ac1a <setvbuf+0xe6>
 800abce:	9d00      	ldr	r5, [sp, #0]
 800abd0:	4628      	mov	r0, r5
 800abd2:	f7ff fc37 	bl	800a444 <malloc>
 800abd6:	4606      	mov	r6, r0
 800abd8:	2800      	cmp	r0, #0
 800abda:	d158      	bne.n	800ac8e <setvbuf+0x15a>
 800abdc:	f8dd 9000 	ldr.w	r9, [sp]
 800abe0:	45a9      	cmp	r9, r5
 800abe2:	d146      	bne.n	800ac72 <setvbuf+0x13e>
 800abe4:	f04f 35ff 	mov.w	r5, #4294967295
 800abe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abec:	f043 0202 	orr.w	r2, r3, #2
 800abf0:	81a2      	strh	r2, [r4, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	60a2      	str	r2, [r4, #8]
 800abf6:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abfa:	6022      	str	r2, [r4, #0]
 800abfc:	6122      	str	r2, [r4, #16]
 800abfe:	2201      	movs	r2, #1
 800ac00:	6162      	str	r2, [r4, #20]
 800ac02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac04:	07d6      	lsls	r6, r2, #31
 800ac06:	d404      	bmi.n	800ac12 <setvbuf+0xde>
 800ac08:	0598      	lsls	r0, r3, #22
 800ac0a:	d402      	bmi.n	800ac12 <setvbuf+0xde>
 800ac0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac0e:	f000 f93a 	bl	800ae86 <__retarget_lock_release_recursive>
 800ac12:	4628      	mov	r0, r5
 800ac14:	b003      	add	sp, #12
 800ac16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d0d8      	beq.n	800abd0 <setvbuf+0x9c>
 800ac1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac20:	b913      	cbnz	r3, 800ac28 <setvbuf+0xf4>
 800ac22:	4638      	mov	r0, r7
 800ac24:	f7ff fef0 	bl	800aa08 <__sinit>
 800ac28:	9b00      	ldr	r3, [sp, #0]
 800ac2a:	6026      	str	r6, [r4, #0]
 800ac2c:	42ab      	cmp	r3, r5
 800ac2e:	bf1e      	ittt	ne
 800ac30:	89a3      	ldrhne	r3, [r4, #12]
 800ac32:	f443 6300 	orrne.w	r3, r3, #2048	@ 0x800
 800ac36:	81a3      	strhne	r3, [r4, #12]
 800ac38:	f1b8 0f01 	cmp.w	r8, #1
 800ac3c:	bf02      	ittt	eq
 800ac3e:	89a3      	ldrheq	r3, [r4, #12]
 800ac40:	f043 0301 	orreq.w	r3, r3, #1
 800ac44:	81a3      	strheq	r3, [r4, #12]
 800ac46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4a:	f013 0208 	ands.w	r2, r3, #8
 800ac4e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ac52:	d01e      	beq.n	800ac92 <setvbuf+0x15e>
 800ac54:	07d9      	lsls	r1, r3, #31
 800ac56:	bf41      	itttt	mi
 800ac58:	2200      	movmi	r2, #0
 800ac5a:	426d      	negmi	r5, r5
 800ac5c:	60a2      	strmi	r2, [r4, #8]
 800ac5e:	61a5      	strmi	r5, [r4, #24]
 800ac60:	bf58      	it	pl
 800ac62:	60a5      	strpl	r5, [r4, #8]
 800ac64:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac66:	07d2      	lsls	r2, r2, #31
 800ac68:	d401      	bmi.n	800ac6e <setvbuf+0x13a>
 800ac6a:	059b      	lsls	r3, r3, #22
 800ac6c:	d513      	bpl.n	800ac96 <setvbuf+0x162>
 800ac6e:	2500      	movs	r5, #0
 800ac70:	e7cf      	b.n	800ac12 <setvbuf+0xde>
 800ac72:	4648      	mov	r0, r9
 800ac74:	f7ff fbe6 	bl	800a444 <malloc>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d0b2      	beq.n	800abe4 <setvbuf+0xb0>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	464d      	mov	r5, r9
 800ac88:	e7c9      	b.n	800ac1e <setvbuf+0xea>
 800ac8a:	2500      	movs	r5, #0
 800ac8c:	e7ac      	b.n	800abe8 <setvbuf+0xb4>
 800ac8e:	46a9      	mov	r9, r5
 800ac90:	e7f5      	b.n	800ac7e <setvbuf+0x14a>
 800ac92:	60a2      	str	r2, [r4, #8]
 800ac94:	e7e6      	b.n	800ac64 <setvbuf+0x130>
 800ac96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac98:	f000 f8f5 	bl	800ae86 <__retarget_lock_release_recursive>
 800ac9c:	e7e7      	b.n	800ac6e <setvbuf+0x13a>
 800ac9e:	f04f 35ff 	mov.w	r5, #4294967295
 800aca2:	e7b6      	b.n	800ac12 <setvbuf+0xde>
 800aca4:	20000438 	.word	0x20000438

0800aca8 <sprintf>:
 800aca8:	b40e      	push	{r1, r2, r3}
 800acaa:	b500      	push	{lr}
 800acac:	b09c      	sub	sp, #112	@ 0x70
 800acae:	ab1d      	add	r3, sp, #116	@ 0x74
 800acb0:	9002      	str	r0, [sp, #8]
 800acb2:	9006      	str	r0, [sp, #24]
 800acb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acb8:	4809      	ldr	r0, [pc, #36]	@ (800ace0 <sprintf+0x38>)
 800acba:	9107      	str	r1, [sp, #28]
 800acbc:	9104      	str	r1, [sp, #16]
 800acbe:	4909      	ldr	r1, [pc, #36]	@ (800ace4 <sprintf+0x3c>)
 800acc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc4:	9105      	str	r1, [sp, #20]
 800acc6:	6800      	ldr	r0, [r0, #0]
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	a902      	add	r1, sp, #8
 800accc:	f000 fa10 	bl	800b0f0 <_svfprintf_r>
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	2200      	movs	r2, #0
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	b01c      	add	sp, #112	@ 0x70
 800acd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acdc:	b003      	add	sp, #12
 800acde:	4770      	bx	lr
 800ace0:	20000438 	.word	0x20000438
 800ace4:	ffff0208 	.word	0xffff0208

0800ace8 <__sread>:
 800ace8:	b510      	push	{r4, lr}
 800acea:	460c      	mov	r4, r1
 800acec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf0:	f000 f868 	bl	800adc4 <_read_r>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	bfab      	itete	ge
 800acf8:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800acfa:	89a3      	ldrhlt	r3, [r4, #12]
 800acfc:	181b      	addge	r3, r3, r0
 800acfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad02:	bfac      	ite	ge
 800ad04:	6523      	strge	r3, [r4, #80]	@ 0x50
 800ad06:	81a3      	strhlt	r3, [r4, #12]
 800ad08:	bd10      	pop	{r4, pc}

0800ad0a <__swrite>:
 800ad0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0e:	461f      	mov	r7, r3
 800ad10:	898b      	ldrh	r3, [r1, #12]
 800ad12:	05db      	lsls	r3, r3, #23
 800ad14:	4605      	mov	r5, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	4616      	mov	r6, r2
 800ad1a:	d505      	bpl.n	800ad28 <__swrite+0x1e>
 800ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad20:	2302      	movs	r3, #2
 800ad22:	2200      	movs	r2, #0
 800ad24:	f000 f83c 	bl	800ada0 <_lseek_r>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	4632      	mov	r2, r6
 800ad36:	463b      	mov	r3, r7
 800ad38:	4628      	mov	r0, r5
 800ad3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3e:	f000 b863 	b.w	800ae08 <_write_r>

0800ad42 <__sseek>:
 800ad42:	b510      	push	{r4, lr}
 800ad44:	460c      	mov	r4, r1
 800ad46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4a:	f000 f829 	bl	800ada0 <_lseek_r>
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	bf15      	itete	ne
 800ad54:	6520      	strne	r0, [r4, #80]	@ 0x50
 800ad56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad5e:	81a3      	strheq	r3, [r4, #12]
 800ad60:	bf18      	it	ne
 800ad62:	81a3      	strhne	r3, [r4, #12]
 800ad64:	bd10      	pop	{r4, pc}

0800ad66 <__sclose>:
 800ad66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6a:	f000 b809 	b.w	800ad80 <_close_r>

0800ad6e <memset>:
 800ad6e:	4402      	add	r2, r0
 800ad70:	4603      	mov	r3, r0
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d100      	bne.n	800ad78 <memset+0xa>
 800ad76:	4770      	bx	lr
 800ad78:	f803 1b01 	strb.w	r1, [r3], #1
 800ad7c:	e7f9      	b.n	800ad72 <memset+0x4>
	...

0800ad80 <_close_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	@ (800ad9c <_close_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f7 fe06 	bl	800299c <_close>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_close_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_close_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20002d88 	.word	0x20002d88

0800ada0 <_lseek_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d07      	ldr	r5, [pc, #28]	@ (800adc0 <_lseek_r+0x20>)
 800ada4:	4604      	mov	r4, r0
 800ada6:	4608      	mov	r0, r1
 800ada8:	4611      	mov	r1, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	602a      	str	r2, [r5, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	f7f7 fe1b 	bl	80029ea <_lseek>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_lseek_r+0x1e>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_lseek_r+0x1e>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20002d88 	.word	0x20002d88

0800adc4 <_read_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	@ (800ade4 <_read_r+0x20>)
 800adc8:	4604      	mov	r4, r0
 800adca:	4608      	mov	r0, r1
 800adcc:	4611      	mov	r1, r2
 800adce:	2200      	movs	r2, #0
 800add0:	602a      	str	r2, [r5, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	f7f7 fda9 	bl	800292a <_read>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_read_r+0x1e>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_read_r+0x1e>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20002d88 	.word	0x20002d88

0800ade8 <_sbrk_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	@ (800ae04 <_sbrk_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f7 fe06 	bl	8002a04 <_sbrk>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_sbrk_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_sbrk_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20002d88 	.word	0x20002d88

0800ae08 <_write_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	@ (800ae28 <_write_r+0x20>)
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f7f7 fda4 	bl	8002964 <_write>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_write_r+0x1e>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_write_r+0x1e>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20002d88 	.word	0x20002d88

0800ae2c <__errno>:
 800ae2c:	4b01      	ldr	r3, [pc, #4]	@ (800ae34 <__errno+0x8>)
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20000438 	.word	0x20000438

0800ae38 <__libc_init_array>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae70 <__libc_init_array+0x38>)
 800ae3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae74 <__libc_init_array+0x3c>)
 800ae3e:	1b64      	subs	r4, r4, r5
 800ae40:	10a4      	asrs	r4, r4, #2
 800ae42:	2600      	movs	r6, #0
 800ae44:	42a6      	cmp	r6, r4
 800ae46:	d109      	bne.n	800ae5c <__libc_init_array+0x24>
 800ae48:	4d0b      	ldr	r5, [pc, #44]	@ (800ae78 <__libc_init_array+0x40>)
 800ae4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae7c <__libc_init_array+0x44>)
 800ae4c:	f008 f9dc 	bl	8013208 <_init>
 800ae50:	1b64      	subs	r4, r4, r5
 800ae52:	10a4      	asrs	r4, r4, #2
 800ae54:	2600      	movs	r6, #0
 800ae56:	42a6      	cmp	r6, r4
 800ae58:	d105      	bne.n	800ae66 <__libc_init_array+0x2e>
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae60:	4798      	blx	r3
 800ae62:	3601      	adds	r6, #1
 800ae64:	e7ee      	b.n	800ae44 <__libc_init_array+0xc>
 800ae66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae6a:	4798      	blx	r3
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	e7f2      	b.n	800ae56 <__libc_init_array+0x1e>
 800ae70:	08013908 	.word	0x08013908
 800ae74:	08013908 	.word	0x08013908
 800ae78:	08013908 	.word	0x08013908
 800ae7c:	08013910 	.word	0x08013910

0800ae80 <__retarget_lock_init_recursive>:
 800ae80:	4770      	bx	lr

0800ae82 <__retarget_lock_close_recursive>:
 800ae82:	4770      	bx	lr

0800ae84 <__retarget_lock_acquire_recursive>:
 800ae84:	4770      	bx	lr

0800ae86 <__retarget_lock_release_recursive>:
 800ae86:	4770      	bx	lr

0800ae88 <sysconf>:
 800ae88:	2808      	cmp	r0, #8
 800ae8a:	b508      	push	{r3, lr}
 800ae8c:	d006      	beq.n	800ae9c <sysconf+0x14>
 800ae8e:	f7ff ffcd 	bl	800ae2c <__errno>
 800ae92:	2316      	movs	r3, #22
 800ae94:	6003      	str	r3, [r0, #0]
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9a:	bd08      	pop	{r3, pc}
 800ae9c:	2080      	movs	r0, #128	@ 0x80
 800ae9e:	e7fc      	b.n	800ae9a <sysconf+0x12>

0800aea0 <register_fini>:
 800aea0:	4b02      	ldr	r3, [pc, #8]	@ (800aeac <register_fini+0xc>)
 800aea2:	b113      	cbz	r3, 800aeaa <register_fini+0xa>
 800aea4:	4802      	ldr	r0, [pc, #8]	@ (800aeb0 <register_fini+0x10>)
 800aea6:	f000 b805 	b.w	800aeb4 <atexit>
 800aeaa:	4770      	bx	lr
 800aeac:	00000000 	.word	0x00000000
 800aeb0:	0800e285 	.word	0x0800e285

0800aeb4 <atexit>:
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4618      	mov	r0, r3
 800aebc:	f003 ba40 	b.w	800e340 <__register_exitproc>

0800aec0 <_malloc_trim_r>:
 800aec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec4:	4606      	mov	r6, r0
 800aec6:	2008      	movs	r0, #8
 800aec8:	4689      	mov	r9, r1
 800aeca:	f7ff ffdd 	bl	800ae88 <sysconf>
 800aece:	4f24      	ldr	r7, [pc, #144]	@ (800af60 <_malloc_trim_r+0xa0>)
 800aed0:	4680      	mov	r8, r0
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff fd00 	bl	800a8d8 <__malloc_lock>
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	685d      	ldr	r5, [r3, #4]
 800aedc:	f025 0503 	bic.w	r5, r5, #3
 800aee0:	f1a5 0411 	sub.w	r4, r5, #17
 800aee4:	eba4 0409 	sub.w	r4, r4, r9
 800aee8:	4444      	add	r4, r8
 800aeea:	fbb4 f4f8 	udiv	r4, r4, r8
 800aeee:	3c01      	subs	r4, #1
 800aef0:	fb08 f404 	mul.w	r4, r8, r4
 800aef4:	45a0      	cmp	r8, r4
 800aef6:	dd05      	ble.n	800af04 <_malloc_trim_r+0x44>
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff fcf3 	bl	800a8e4 <__malloc_unlock>
 800aefe:	2000      	movs	r0, #0
 800af00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af04:	2100      	movs	r1, #0
 800af06:	4630      	mov	r0, r6
 800af08:	f7ff ff6e 	bl	800ade8 <_sbrk_r>
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	442b      	add	r3, r5
 800af10:	4298      	cmp	r0, r3
 800af12:	d1f1      	bne.n	800aef8 <_malloc_trim_r+0x38>
 800af14:	4261      	negs	r1, r4
 800af16:	4630      	mov	r0, r6
 800af18:	f7ff ff66 	bl	800ade8 <_sbrk_r>
 800af1c:	3001      	adds	r0, #1
 800af1e:	d110      	bne.n	800af42 <_malloc_trim_r+0x82>
 800af20:	2100      	movs	r1, #0
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ff60 	bl	800ade8 <_sbrk_r>
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	1a83      	subs	r3, r0, r2
 800af2c:	2b0f      	cmp	r3, #15
 800af2e:	dde3      	ble.n	800aef8 <_malloc_trim_r+0x38>
 800af30:	490c      	ldr	r1, [pc, #48]	@ (800af64 <_malloc_trim_r+0xa4>)
 800af32:	6809      	ldr	r1, [r1, #0]
 800af34:	1a40      	subs	r0, r0, r1
 800af36:	490c      	ldr	r1, [pc, #48]	@ (800af68 <_malloc_trim_r+0xa8>)
 800af38:	f043 0301 	orr.w	r3, r3, #1
 800af3c:	6008      	str	r0, [r1, #0]
 800af3e:	6053      	str	r3, [r2, #4]
 800af40:	e7da      	b.n	800aef8 <_malloc_trim_r+0x38>
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	4a08      	ldr	r2, [pc, #32]	@ (800af68 <_malloc_trim_r+0xa8>)
 800af46:	1b2d      	subs	r5, r5, r4
 800af48:	f045 0501 	orr.w	r5, r5, #1
 800af4c:	605d      	str	r5, [r3, #4]
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	4630      	mov	r0, r6
 800af52:	1b1b      	subs	r3, r3, r4
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	f7ff fcc5 	bl	800a8e4 <__malloc_unlock>
 800af5a:	2001      	movs	r0, #1
 800af5c:	e7d0      	b.n	800af00 <_malloc_trim_r+0x40>
 800af5e:	bf00      	nop
 800af60:	20000024 	.word	0x20000024
 800af64:	2000001c 	.word	0x2000001c
 800af68:	20002c18 	.word	0x20002c18

0800af6c <_free_r>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	4604      	mov	r4, r0
 800af70:	460f      	mov	r7, r1
 800af72:	2900      	cmp	r1, #0
 800af74:	f000 80b1 	beq.w	800b0da <_free_r+0x16e>
 800af78:	f7ff fcae 	bl	800a8d8 <__malloc_lock>
 800af7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800af80:	4d56      	ldr	r5, [pc, #344]	@ (800b0dc <_free_r+0x170>)
 800af82:	f022 0001 	bic.w	r0, r2, #1
 800af86:	f1a7 0308 	sub.w	r3, r7, #8
 800af8a:	eb03 0c00 	add.w	ip, r3, r0
 800af8e:	68a9      	ldr	r1, [r5, #8]
 800af90:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800af94:	4561      	cmp	r1, ip
 800af96:	f026 0603 	bic.w	r6, r6, #3
 800af9a:	f002 0201 	and.w	r2, r2, #1
 800af9e:	d11b      	bne.n	800afd8 <_free_r+0x6c>
 800afa0:	4406      	add	r6, r0
 800afa2:	b93a      	cbnz	r2, 800afb4 <_free_r+0x48>
 800afa4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800afa8:	1a9b      	subs	r3, r3, r2
 800afaa:	4416      	add	r6, r2
 800afac:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800afb0:	60ca      	str	r2, [r1, #12]
 800afb2:	6091      	str	r1, [r2, #8]
 800afb4:	f046 0201 	orr.w	r2, r6, #1
 800afb8:	605a      	str	r2, [r3, #4]
 800afba:	60ab      	str	r3, [r5, #8]
 800afbc:	4b48      	ldr	r3, [pc, #288]	@ (800b0e0 <_free_r+0x174>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	42b3      	cmp	r3, r6
 800afc2:	d804      	bhi.n	800afce <_free_r+0x62>
 800afc4:	4b47      	ldr	r3, [pc, #284]	@ (800b0e4 <_free_r+0x178>)
 800afc6:	4620      	mov	r0, r4
 800afc8:	6819      	ldr	r1, [r3, #0]
 800afca:	f7ff ff79 	bl	800aec0 <_malloc_trim_r>
 800afce:	4620      	mov	r0, r4
 800afd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afd4:	f7ff bc86 	b.w	800a8e4 <__malloc_unlock>
 800afd8:	f8cc 6004 	str.w	r6, [ip, #4]
 800afdc:	2a00      	cmp	r2, #0
 800afde:	d138      	bne.n	800b052 <_free_r+0xe6>
 800afe0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800afe4:	1a5b      	subs	r3, r3, r1
 800afe6:	4408      	add	r0, r1
 800afe8:	6899      	ldr	r1, [r3, #8]
 800afea:	f105 0708 	add.w	r7, r5, #8
 800afee:	42b9      	cmp	r1, r7
 800aff0:	d031      	beq.n	800b056 <_free_r+0xea>
 800aff2:	68df      	ldr	r7, [r3, #12]
 800aff4:	60cf      	str	r7, [r1, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	eb0c 0106 	add.w	r1, ip, r6
 800affc:	6849      	ldr	r1, [r1, #4]
 800affe:	07c9      	lsls	r1, r1, #31
 800b000:	d40b      	bmi.n	800b01a <_free_r+0xae>
 800b002:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b006:	4430      	add	r0, r6
 800b008:	bb3a      	cbnz	r2, 800b05a <_free_r+0xee>
 800b00a:	4e37      	ldr	r6, [pc, #220]	@ (800b0e8 <_free_r+0x17c>)
 800b00c:	42b1      	cmp	r1, r6
 800b00e:	d124      	bne.n	800b05a <_free_r+0xee>
 800b010:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800b014:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b018:	2201      	movs	r2, #1
 800b01a:	f040 0101 	orr.w	r1, r0, #1
 800b01e:	6059      	str	r1, [r3, #4]
 800b020:	5018      	str	r0, [r3, r0]
 800b022:	2a00      	cmp	r2, #0
 800b024:	d1d3      	bne.n	800afce <_free_r+0x62>
 800b026:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800b02a:	d21b      	bcs.n	800b064 <_free_r+0xf8>
 800b02c:	08c2      	lsrs	r2, r0, #3
 800b02e:	2101      	movs	r1, #1
 800b030:	0940      	lsrs	r0, r0, #5
 800b032:	4081      	lsls	r1, r0
 800b034:	6868      	ldr	r0, [r5, #4]
 800b036:	3201      	adds	r2, #1
 800b038:	4301      	orrs	r1, r0
 800b03a:	6069      	str	r1, [r5, #4]
 800b03c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800b040:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800b044:	3908      	subs	r1, #8
 800b046:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b04a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800b04e:	60c3      	str	r3, [r0, #12]
 800b050:	e7bd      	b.n	800afce <_free_r+0x62>
 800b052:	2200      	movs	r2, #0
 800b054:	e7d0      	b.n	800aff8 <_free_r+0x8c>
 800b056:	2201      	movs	r2, #1
 800b058:	e7ce      	b.n	800aff8 <_free_r+0x8c>
 800b05a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800b05e:	60ce      	str	r6, [r1, #12]
 800b060:	60b1      	str	r1, [r6, #8]
 800b062:	e7da      	b.n	800b01a <_free_r+0xae>
 800b064:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800b068:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800b06c:	d214      	bcs.n	800b098 <_free_r+0x12c>
 800b06e:	0982      	lsrs	r2, r0, #6
 800b070:	3238      	adds	r2, #56	@ 0x38
 800b072:	1c51      	adds	r1, r2, #1
 800b074:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b078:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b07c:	428e      	cmp	r6, r1
 800b07e:	d125      	bne.n	800b0cc <_free_r+0x160>
 800b080:	2001      	movs	r0, #1
 800b082:	1092      	asrs	r2, r2, #2
 800b084:	fa00 f202 	lsl.w	r2, r0, r2
 800b088:	6868      	ldr	r0, [r5, #4]
 800b08a:	4302      	orrs	r2, r0
 800b08c:	606a      	str	r2, [r5, #4]
 800b08e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800b092:	60b3      	str	r3, [r6, #8]
 800b094:	60cb      	str	r3, [r1, #12]
 800b096:	e79a      	b.n	800afce <_free_r+0x62>
 800b098:	2a14      	cmp	r2, #20
 800b09a:	d801      	bhi.n	800b0a0 <_free_r+0x134>
 800b09c:	325b      	adds	r2, #91	@ 0x5b
 800b09e:	e7e8      	b.n	800b072 <_free_r+0x106>
 800b0a0:	2a54      	cmp	r2, #84	@ 0x54
 800b0a2:	d802      	bhi.n	800b0aa <_free_r+0x13e>
 800b0a4:	0b02      	lsrs	r2, r0, #12
 800b0a6:	326e      	adds	r2, #110	@ 0x6e
 800b0a8:	e7e3      	b.n	800b072 <_free_r+0x106>
 800b0aa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800b0ae:	d802      	bhi.n	800b0b6 <_free_r+0x14a>
 800b0b0:	0bc2      	lsrs	r2, r0, #15
 800b0b2:	3277      	adds	r2, #119	@ 0x77
 800b0b4:	e7dd      	b.n	800b072 <_free_r+0x106>
 800b0b6:	f240 5154 	movw	r1, #1364	@ 0x554
 800b0ba:	428a      	cmp	r2, r1
 800b0bc:	bf9a      	itte	ls
 800b0be:	0c82      	lsrls	r2, r0, #18
 800b0c0:	327c      	addls	r2, #124	@ 0x7c
 800b0c2:	227e      	movhi	r2, #126	@ 0x7e
 800b0c4:	e7d5      	b.n	800b072 <_free_r+0x106>
 800b0c6:	6889      	ldr	r1, [r1, #8]
 800b0c8:	428e      	cmp	r6, r1
 800b0ca:	d004      	beq.n	800b0d6 <_free_r+0x16a>
 800b0cc:	684a      	ldr	r2, [r1, #4]
 800b0ce:	f022 0203 	bic.w	r2, r2, #3
 800b0d2:	4282      	cmp	r2, r0
 800b0d4:	d8f7      	bhi.n	800b0c6 <_free_r+0x15a>
 800b0d6:	68ce      	ldr	r6, [r1, #12]
 800b0d8:	e7d9      	b.n	800b08e <_free_r+0x122>
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0dc:	20000024 	.word	0x20000024
 800b0e0:	20000020 	.word	0x20000020
 800b0e4:	20002c48 	.word	0x20002c48
 800b0e8:	2000002c 	.word	0x2000002c
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <_svfprintf_r>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	b0d3      	sub	sp, #332	@ 0x14c
 800b0f6:	468b      	mov	fp, r1
 800b0f8:	4691      	mov	r9, r2
 800b0fa:	461e      	mov	r6, r3
 800b0fc:	9003      	str	r0, [sp, #12]
 800b0fe:	f003 f89b 	bl	800e238 <_localeconv_r>
 800b102:	6803      	ldr	r3, [r0, #0]
 800b104:	9316      	str	r3, [sp, #88]	@ 0x58
 800b106:	4618      	mov	r0, r3
 800b108:	f7f5 f88a 	bl	8000220 <strlen>
 800b10c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b110:	900d      	str	r0, [sp, #52]	@ 0x34
 800b112:	061b      	lsls	r3, r3, #24
 800b114:	d515      	bpl.n	800b142 <_svfprintf_r+0x52>
 800b116:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b11a:	b993      	cbnz	r3, 800b142 <_svfprintf_r+0x52>
 800b11c:	9803      	ldr	r0, [sp, #12]
 800b11e:	2140      	movs	r1, #64	@ 0x40
 800b120:	f7ff f9a0 	bl	800a464 <_malloc_r>
 800b124:	f8cb 0000 	str.w	r0, [fp]
 800b128:	f8cb 0010 	str.w	r0, [fp, #16]
 800b12c:	b930      	cbnz	r0, 800b13c <_svfprintf_r+0x4c>
 800b12e:	9a03      	ldr	r2, [sp, #12]
 800b130:	230c      	movs	r3, #12
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	f04f 33ff 	mov.w	r3, #4294967295
 800b138:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b13a:	e1f7      	b.n	800b52c <_svfprintf_r+0x43c>
 800b13c:	2340      	movs	r3, #64	@ 0x40
 800b13e:	f8cb 3014 	str.w	r3, [fp, #20]
 800b142:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800b390 <_svfprintf_r+0x2a0>
 800b146:	2300      	movs	r3, #0
 800b148:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800b14c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b150:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800b154:	ac29      	add	r4, sp, #164	@ 0xa4
 800b156:	9426      	str	r4, [sp, #152]	@ 0x98
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b15c:	9312      	str	r3, [sp, #72]	@ 0x48
 800b15e:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b160:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b162:	464b      	mov	r3, r9
 800b164:	461d      	mov	r5, r3
 800b166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b16a:	b10a      	cbz	r2, 800b170 <_svfprintf_r+0x80>
 800b16c:	2a25      	cmp	r2, #37	@ 0x25
 800b16e:	d1f9      	bne.n	800b164 <_svfprintf_r+0x74>
 800b170:	ebb5 0709 	subs.w	r7, r5, r9
 800b174:	d00d      	beq.n	800b192 <_svfprintf_r+0xa2>
 800b176:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b178:	443b      	add	r3, r7
 800b17a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b17c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b17e:	3301      	adds	r3, #1
 800b180:	2b07      	cmp	r3, #7
 800b182:	e9c4 9700 	strd	r9, r7, [r4]
 800b186:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b188:	dc75      	bgt.n	800b276 <_svfprintf_r+0x186>
 800b18a:	3408      	adds	r4, #8
 800b18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18e:	443b      	add	r3, r7
 800b190:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b192:	782b      	ldrb	r3, [r5, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f001 8148 	beq.w	800c42a <_svfprintf_r+0x133a>
 800b19a:	2200      	movs	r2, #0
 800b19c:	1c6b      	adds	r3, r5, #1
 800b19e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800b1a2:	f04f 38ff 	mov.w	r8, #4294967295
 800b1a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1a8:	4615      	mov	r5, r2
 800b1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ae:	9206      	str	r2, [sp, #24]
 800b1b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	3b20      	subs	r3, #32
 800b1b6:	2b5a      	cmp	r3, #90	@ 0x5a
 800b1b8:	f200 85a4 	bhi.w	800bd04 <_svfprintf_r+0xc14>
 800b1bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b1c0:	05a2009d 	.word	0x05a2009d
 800b1c4:	00a505a2 	.word	0x00a505a2
 800b1c8:	05a205a2 	.word	0x05a205a2
 800b1cc:	008505a2 	.word	0x008505a2
 800b1d0:	05a205a2 	.word	0x05a205a2
 800b1d4:	00b200a8 	.word	0x00b200a8
 800b1d8:	00af05a2 	.word	0x00af05a2
 800b1dc:	05a200b4 	.word	0x05a200b4
 800b1e0:	00d100ce 	.word	0x00d100ce
 800b1e4:	00d100d1 	.word	0x00d100d1
 800b1e8:	00d100d1 	.word	0x00d100d1
 800b1ec:	00d100d1 	.word	0x00d100d1
 800b1f0:	00d100d1 	.word	0x00d100d1
 800b1f4:	05a205a2 	.word	0x05a205a2
 800b1f8:	05a205a2 	.word	0x05a205a2
 800b1fc:	05a205a2 	.word	0x05a205a2
 800b200:	014705a2 	.word	0x014705a2
 800b204:	010805a2 	.word	0x010805a2
 800b208:	0147011b 	.word	0x0147011b
 800b20c:	01470147 	.word	0x01470147
 800b210:	05a205a2 	.word	0x05a205a2
 800b214:	05a205a2 	.word	0x05a205a2
 800b218:	05a200e2 	.word	0x05a200e2
 800b21c:	049d05a2 	.word	0x049d05a2
 800b220:	05a205a2 	.word	0x05a205a2
 800b224:	04e705a2 	.word	0x04e705a2
 800b228:	050805a2 	.word	0x050805a2
 800b22c:	05a205a2 	.word	0x05a205a2
 800b230:	05a2052a 	.word	0x05a2052a
 800b234:	05a205a2 	.word	0x05a205a2
 800b238:	05a205a2 	.word	0x05a205a2
 800b23c:	05a205a2 	.word	0x05a205a2
 800b240:	014705a2 	.word	0x014705a2
 800b244:	010805a2 	.word	0x010805a2
 800b248:	0147011d 	.word	0x0147011d
 800b24c:	01470147 	.word	0x01470147
 800b250:	011d00ee 	.word	0x011d00ee
 800b254:	05a20102 	.word	0x05a20102
 800b258:	05a200fb 	.word	0x05a200fb
 800b25c:	049f047e 	.word	0x049f047e
 800b260:	010204d6 	.word	0x010204d6
 800b264:	04e705a2 	.word	0x04e705a2
 800b268:	050a009b 	.word	0x050a009b
 800b26c:	05a205a2 	.word	0x05a205a2
 800b270:	05a20065 	.word	0x05a20065
 800b274:	009b      	.short	0x009b
 800b276:	9803      	ldr	r0, [sp, #12]
 800b278:	aa26      	add	r2, sp, #152	@ 0x98
 800b27a:	4659      	mov	r1, fp
 800b27c:	f005 fd4c 	bl	8010d18 <__ssprint_r>
 800b280:	2800      	cmp	r0, #0
 800b282:	f040 814e 	bne.w	800b522 <_svfprintf_r+0x432>
 800b286:	ac29      	add	r4, sp, #164	@ 0xa4
 800b288:	e780      	b.n	800b18c <_svfprintf_r+0x9c>
 800b28a:	4b43      	ldr	r3, [pc, #268]	@ (800b398 <_svfprintf_r+0x2a8>)
 800b28c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b28e:	f015 0320 	ands.w	r3, r5, #32
 800b292:	f000 84c2 	beq.w	800bc1a <_svfprintf_r+0xb2a>
 800b296:	3607      	adds	r6, #7
 800b298:	f026 0307 	bic.w	r3, r6, #7
 800b29c:	461a      	mov	r2, r3
 800b29e:	685f      	ldr	r7, [r3, #4]
 800b2a0:	f852 6b08 	ldr.w	r6, [r2], #8
 800b2a4:	9207      	str	r2, [sp, #28]
 800b2a6:	07eb      	lsls	r3, r5, #31
 800b2a8:	d50a      	bpl.n	800b2c0 <_svfprintf_r+0x1d0>
 800b2aa:	ea56 0307 	orrs.w	r3, r6, r7
 800b2ae:	d007      	beq.n	800b2c0 <_svfprintf_r+0x1d0>
 800b2b0:	2330      	movs	r3, #48	@ 0x30
 800b2b2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800b2b6:	9b06      	ldr	r3, [sp, #24]
 800b2b8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800b2bc:	f045 0502 	orr.w	r5, r5, #2
 800b2c0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	f000 bc28 	b.w	800bb1a <_svfprintf_r+0xa2a>
 800b2ca:	9803      	ldr	r0, [sp, #12]
 800b2cc:	f002 ffb4 	bl	800e238 <_localeconv_r>
 800b2d0:	6843      	ldr	r3, [r0, #4]
 800b2d2:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f4 ffa3 	bl	8000220 <strlen>
 800b2da:	9012      	str	r0, [sp, #72]	@ 0x48
 800b2dc:	9803      	ldr	r0, [sp, #12]
 800b2de:	f002 ffab 	bl	800e238 <_localeconv_r>
 800b2e2:	6883      	ldr	r3, [r0, #8]
 800b2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2e8:	b12b      	cbz	r3, 800b2f6 <_svfprintf_r+0x206>
 800b2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ec:	b11b      	cbz	r3, 800b2f6 <_svfprintf_r+0x206>
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	b10b      	cbz	r3, 800b2f6 <_svfprintf_r+0x206>
 800b2f2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800b2f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2f8:	e757      	b.n	800b1aa <_svfprintf_r+0xba>
 800b2fa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1f9      	bne.n	800b2f6 <_svfprintf_r+0x206>
 800b302:	2320      	movs	r3, #32
 800b304:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b308:	e7f5      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b30a:	f045 0501 	orr.w	r5, r5, #1
 800b30e:	e7f2      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b310:	f856 3b04 	ldr.w	r3, [r6], #4
 800b314:	930e      	str	r3, [sp, #56]	@ 0x38
 800b316:	2b00      	cmp	r3, #0
 800b318:	daed      	bge.n	800b2f6 <_svfprintf_r+0x206>
 800b31a:	425b      	negs	r3, r3
 800b31c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b31e:	f045 0504 	orr.w	r5, r5, #4
 800b322:	e7e8      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b324:	232b      	movs	r3, #43	@ 0x2b
 800b326:	e7ed      	b.n	800b304 <_svfprintf_r+0x214>
 800b328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b32e:	9206      	str	r2, [sp, #24]
 800b330:	2a2a      	cmp	r2, #42	@ 0x2a
 800b332:	d10f      	bne.n	800b354 <_svfprintf_r+0x264>
 800b334:	f856 2b04 	ldr.w	r2, [r6], #4
 800b338:	930c      	str	r3, [sp, #48]	@ 0x30
 800b33a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800b33e:	e7da      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b340:	fb01 2808 	mla	r8, r1, r8, r2
 800b344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b348:	9206      	str	r2, [sp, #24]
 800b34a:	9a06      	ldr	r2, [sp, #24]
 800b34c:	3a30      	subs	r2, #48	@ 0x30
 800b34e:	2a09      	cmp	r2, #9
 800b350:	d9f6      	bls.n	800b340 <_svfprintf_r+0x250>
 800b352:	e72d      	b.n	800b1b0 <_svfprintf_r+0xc0>
 800b354:	f04f 0800 	mov.w	r8, #0
 800b358:	210a      	movs	r1, #10
 800b35a:	e7f6      	b.n	800b34a <_svfprintf_r+0x25a>
 800b35c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800b360:	e7c9      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b362:	2200      	movs	r2, #0
 800b364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b366:	920e      	str	r2, [sp, #56]	@ 0x38
 800b368:	210a      	movs	r1, #10
 800b36a:	9a06      	ldr	r2, [sp, #24]
 800b36c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b36e:	3a30      	subs	r2, #48	@ 0x30
 800b370:	fb01 2200 	mla	r2, r1, r0, r2
 800b374:	920e      	str	r2, [sp, #56]	@ 0x38
 800b376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b37a:	9206      	str	r2, [sp, #24]
 800b37c:	3a30      	subs	r2, #48	@ 0x30
 800b37e:	2a09      	cmp	r2, #9
 800b380:	d9f3      	bls.n	800b36a <_svfprintf_r+0x27a>
 800b382:	e715      	b.n	800b1b0 <_svfprintf_r+0xc0>
 800b384:	f045 0508 	orr.w	r5, r5, #8
 800b388:	e7b5      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b38a:	bf00      	nop
 800b38c:	f3af 8000 	nop.w
	...
 800b398:	080132d4 	.word	0x080132d4
 800b39c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b68      	cmp	r3, #104	@ 0x68
 800b3a2:	bf01      	itttt	eq
 800b3a4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800b3a6:	3301      	addeq	r3, #1
 800b3a8:	930c      	streq	r3, [sp, #48]	@ 0x30
 800b3aa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800b3ae:	bf18      	it	ne
 800b3b0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800b3b4:	e79f      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b3b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b6c      	cmp	r3, #108	@ 0x6c
 800b3bc:	d105      	bne.n	800b3ca <_svfprintf_r+0x2da>
 800b3be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3c4:	f045 0520 	orr.w	r5, r5, #32
 800b3c8:	e795      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b3ca:	f045 0510 	orr.w	r5, r5, #16
 800b3ce:	e792      	b.n	800b2f6 <_svfprintf_r+0x206>
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	f852 3b04 	ldr.w	r3, [r2], #4
 800b3d6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9207      	str	r2, [sp, #28]
 800b3de:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b3e2:	469a      	mov	sl, r3
 800b3e4:	f04f 0801 	mov.w	r8, #1
 800b3e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3ea:	461f      	mov	r7, r3
 800b3ec:	9308      	str	r3, [sp, #32]
 800b3ee:	461e      	mov	r6, r3
 800b3f0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800b3f4:	e1d2      	b.n	800b79c <_svfprintf_r+0x6ac>
 800b3f6:	f045 0510 	orr.w	r5, r5, #16
 800b3fa:	06af      	lsls	r7, r5, #26
 800b3fc:	d512      	bpl.n	800b424 <_svfprintf_r+0x334>
 800b3fe:	3607      	adds	r6, #7
 800b400:	f026 0307 	bic.w	r3, r6, #7
 800b404:	461a      	mov	r2, r3
 800b406:	685f      	ldr	r7, [r3, #4]
 800b408:	f852 6b08 	ldr.w	r6, [r2], #8
 800b40c:	9207      	str	r2, [sp, #28]
 800b40e:	2f00      	cmp	r7, #0
 800b410:	da06      	bge.n	800b420 <_svfprintf_r+0x330>
 800b412:	4276      	negs	r6, r6
 800b414:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800b418:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800b41c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b420:	2301      	movs	r3, #1
 800b422:	e37d      	b.n	800bb20 <_svfprintf_r+0xa30>
 800b424:	4633      	mov	r3, r6
 800b426:	06ee      	lsls	r6, r5, #27
 800b428:	f853 7b04 	ldr.w	r7, [r3], #4
 800b42c:	9307      	str	r3, [sp, #28]
 800b42e:	d502      	bpl.n	800b436 <_svfprintf_r+0x346>
 800b430:	463e      	mov	r6, r7
 800b432:	17ff      	asrs	r7, r7, #31
 800b434:	e7eb      	b.n	800b40e <_svfprintf_r+0x31e>
 800b436:	0668      	lsls	r0, r5, #25
 800b438:	d503      	bpl.n	800b442 <_svfprintf_r+0x352>
 800b43a:	b23e      	sxth	r6, r7
 800b43c:	f347 37c0 	sbfx	r7, r7, #15, #1
 800b440:	e7e5      	b.n	800b40e <_svfprintf_r+0x31e>
 800b442:	05a9      	lsls	r1, r5, #22
 800b444:	d5f4      	bpl.n	800b430 <_svfprintf_r+0x340>
 800b446:	b27e      	sxtb	r6, r7
 800b448:	f347 17c0 	sbfx	r7, r7, #7, #1
 800b44c:	e7df      	b.n	800b40e <_svfprintf_r+0x31e>
 800b44e:	3607      	adds	r6, #7
 800b450:	f026 0307 	bic.w	r3, r6, #7
 800b454:	ecb3 7b02 	vldmia	r3!, {d7}
 800b458:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b45c:	9307      	str	r3, [sp, #28]
 800b45e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b460:	931a      	str	r3, [sp, #104]	@ 0x68
 800b462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b468:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b46a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800b46e:	4b81      	ldr	r3, [pc, #516]	@ (800b674 <_svfprintf_r+0x584>)
 800b470:	f04f 32ff 	mov.w	r2, #4294967295
 800b474:	f7f5 fb82 	bl	8000b7c <__aeabi_dcmpun>
 800b478:	bb10      	cbnz	r0, 800b4c0 <_svfprintf_r+0x3d0>
 800b47a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800b47e:	4b7d      	ldr	r3, [pc, #500]	@ (800b674 <_svfprintf_r+0x584>)
 800b480:	f04f 32ff 	mov.w	r2, #4294967295
 800b484:	f7f5 fb5c 	bl	8000b40 <__aeabi_dcmple>
 800b488:	b9d0      	cbnz	r0, 800b4c0 <_svfprintf_r+0x3d0>
 800b48a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b48e:	2200      	movs	r2, #0
 800b490:	2300      	movs	r3, #0
 800b492:	f7f5 fb4b 	bl	8000b2c <__aeabi_dcmplt>
 800b496:	b110      	cbz	r0, 800b49e <_svfprintf_r+0x3ae>
 800b498:	232d      	movs	r3, #45	@ 0x2d
 800b49a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b49e:	4a76      	ldr	r2, [pc, #472]	@ (800b678 <_svfprintf_r+0x588>)
 800b4a0:	4b76      	ldr	r3, [pc, #472]	@ (800b67c <_svfprintf_r+0x58c>)
 800b4a2:	9906      	ldr	r1, [sp, #24]
 800b4a4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800b4a8:	2947      	cmp	r1, #71	@ 0x47
 800b4aa:	bfd4      	ite	le
 800b4ac:	4691      	movle	r9, r2
 800b4ae:	4699      	movgt	r9, r3
 800b4b0:	f04f 0a00 	mov.w	sl, #0
 800b4b4:	f04f 0803 	mov.w	r8, #3
 800b4b8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800b4bc:	f000 bfec 	b.w	800c498 <_svfprintf_r+0x13a8>
 800b4c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	f7f5 fb58 	bl	8000b7c <__aeabi_dcmpun>
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	b140      	cbz	r0, 800b4e2 <_svfprintf_r+0x3f2>
 800b4d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4d2:	4a6b      	ldr	r2, [pc, #428]	@ (800b680 <_svfprintf_r+0x590>)
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfbc      	itt	lt
 800b4d8:	232d      	movlt	r3, #45	@ 0x2d
 800b4da:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800b4de:	4b69      	ldr	r3, [pc, #420]	@ (800b684 <_svfprintf_r+0x594>)
 800b4e0:	e7df      	b.n	800b4a2 <_svfprintf_r+0x3b2>
 800b4e2:	9b06      	ldr	r3, [sp, #24]
 800b4e4:	2b61      	cmp	r3, #97	@ 0x61
 800b4e6:	d025      	beq.n	800b534 <_svfprintf_r+0x444>
 800b4e8:	2b41      	cmp	r3, #65	@ 0x41
 800b4ea:	d125      	bne.n	800b538 <_svfprintf_r+0x448>
 800b4ec:	2358      	movs	r3, #88	@ 0x58
 800b4ee:	2230      	movs	r2, #48	@ 0x30
 800b4f0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800b4f4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800b4f8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800b4fc:	f045 0502 	orr.w	r5, r5, #2
 800b500:	f340 80a5 	ble.w	800b64e <_svfprintf_r+0x55e>
 800b504:	9803      	ldr	r0, [sp, #12]
 800b506:	f108 0101 	add.w	r1, r8, #1
 800b50a:	f7fe ffab 	bl	800a464 <_malloc_r>
 800b50e:	4681      	mov	r9, r0
 800b510:	2800      	cmp	r0, #0
 800b512:	f040 80a1 	bne.w	800b658 <_svfprintf_r+0x568>
 800b516:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b51a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b51e:	f8ab 300c 	strh.w	r3, [fp, #12]
 800b522:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b526:	065b      	lsls	r3, r3, #25
 800b528:	f53f ae04 	bmi.w	800b134 <_svfprintf_r+0x44>
 800b52c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b52e:	b053      	add	sp, #332	@ 0x14c
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	2378      	movs	r3, #120	@ 0x78
 800b536:	e7da      	b.n	800b4ee <_svfprintf_r+0x3fe>
 800b538:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b53c:	f000 808e 	beq.w	800b65c <_svfprintf_r+0x56c>
 800b540:	9b06      	ldr	r3, [sp, #24]
 800b542:	f023 0320 	bic.w	r3, r3, #32
 800b546:	2b47      	cmp	r3, #71	@ 0x47
 800b548:	d105      	bne.n	800b556 <_svfprintf_r+0x466>
 800b54a:	f1b8 0f00 	cmp.w	r8, #0
 800b54e:	d102      	bne.n	800b556 <_svfprintf_r+0x466>
 800b550:	46c2      	mov	sl, r8
 800b552:	f04f 0801 	mov.w	r8, #1
 800b556:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800b55a:	9311      	str	r3, [sp, #68]	@ 0x44
 800b55c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b55e:	2b00      	cmp	r3, #0
 800b560:	da7f      	bge.n	800b662 <_svfprintf_r+0x572>
 800b562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b564:	9314      	str	r3, [sp, #80]	@ 0x50
 800b566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b568:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b56c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b56e:	232d      	movs	r3, #45	@ 0x2d
 800b570:	931c      	str	r3, [sp, #112]	@ 0x70
 800b572:	9b06      	ldr	r3, [sp, #24]
 800b574:	f023 0320 	bic.w	r3, r3, #32
 800b578:	2b41      	cmp	r3, #65	@ 0x41
 800b57a:	9308      	str	r3, [sp, #32]
 800b57c:	f040 81e6 	bne.w	800b94c <_svfprintf_r+0x85c>
 800b580:	a820      	add	r0, sp, #128	@ 0x80
 800b582:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800b586:	f002 fea5 	bl	800e2d4 <frexp>
 800b58a:	2200      	movs	r2, #0
 800b58c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b590:	ec51 0b10 	vmov	r0, r1, d0
 800b594:	f7f5 f858 	bl	8000648 <__aeabi_dmul>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f7f5 fab8 	bl	8000b18 <__aeabi_dcmpeq>
 800b5a8:	b108      	cbz	r0, 800b5ae <_svfprintf_r+0x4be>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	9320      	str	r3, [sp, #128]	@ 0x80
 800b5ae:	4a36      	ldr	r2, [pc, #216]	@ (800b688 <_svfprintf_r+0x598>)
 800b5b0:	4b36      	ldr	r3, [pc, #216]	@ (800b68c <_svfprintf_r+0x59c>)
 800b5b2:	9906      	ldr	r1, [sp, #24]
 800b5b4:	2961      	cmp	r1, #97	@ 0x61
 800b5b6:	bf18      	it	ne
 800b5b8:	461a      	movne	r2, r3
 800b5ba:	9210      	str	r2, [sp, #64]	@ 0x40
 800b5bc:	f108 37ff 	add.w	r7, r8, #4294967295
 800b5c0:	464e      	mov	r6, r9
 800b5c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c6:	4b32      	ldr	r3, [pc, #200]	@ (800b690 <_svfprintf_r+0x5a0>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f7f5 f83d 	bl	8000648 <__aeabi_dmul>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5d6:	f7f5 fae7 	bl	8000ba8 <__aeabi_d2iz>
 800b5da:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b5dc:	f7f4 ffca 	bl	8000574 <__aeabi_i2d>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5e8:	f7f4 fe76 	bl	80002d8 <__aeabi_dsub>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b5f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5f8:	5c9b      	ldrb	r3, [r3, r2]
 800b5fa:	f806 3b01 	strb.w	r3, [r6], #1
 800b5fe:	1c7a      	adds	r2, r7, #1
 800b600:	d006      	beq.n	800b610 <_svfprintf_r+0x520>
 800b602:	1e7b      	subs	r3, r7, #1
 800b604:	931d      	str	r3, [sp, #116]	@ 0x74
 800b606:	2200      	movs	r2, #0
 800b608:	2300      	movs	r3, #0
 800b60a:	f7f5 fa85 	bl	8000b18 <__aeabi_dcmpeq>
 800b60e:	b370      	cbz	r0, 800b66e <_svfprintf_r+0x57e>
 800b610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b614:	4b1f      	ldr	r3, [pc, #124]	@ (800b694 <_svfprintf_r+0x5a4>)
 800b616:	2200      	movs	r2, #0
 800b618:	f7f5 faa6 	bl	8000b68 <__aeabi_dcmpgt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d13b      	bne.n	800b698 <_svfprintf_r+0x5a8>
 800b620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b624:	4b1b      	ldr	r3, [pc, #108]	@ (800b694 <_svfprintf_r+0x5a4>)
 800b626:	2200      	movs	r2, #0
 800b628:	f7f5 fa76 	bl	8000b18 <__aeabi_dcmpeq>
 800b62c:	b110      	cbz	r0, 800b634 <_svfprintf_r+0x544>
 800b62e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b630:	07db      	lsls	r3, r3, #31
 800b632:	d431      	bmi.n	800b698 <_svfprintf_r+0x5a8>
 800b634:	4633      	mov	r3, r6
 800b636:	19f1      	adds	r1, r6, r7
 800b638:	2030      	movs	r0, #48	@ 0x30
 800b63a:	1aca      	subs	r2, r1, r3
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	f280 8182 	bge.w	800b946 <_svfprintf_r+0x856>
 800b642:	1c7b      	adds	r3, r7, #1
 800b644:	3701      	adds	r7, #1
 800b646:	bfb8      	it	lt
 800b648:	2300      	movlt	r3, #0
 800b64a:	441e      	add	r6, r3
 800b64c:	e038      	b.n	800b6c0 <_svfprintf_r+0x5d0>
 800b64e:	f04f 0a00 	mov.w	sl, #0
 800b652:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800b656:	e77e      	b.n	800b556 <_svfprintf_r+0x466>
 800b658:	4682      	mov	sl, r0
 800b65a:	e77c      	b.n	800b556 <_svfprintf_r+0x466>
 800b65c:	f04f 0806 	mov.w	r8, #6
 800b660:	e779      	b.n	800b556 <_svfprintf_r+0x466>
 800b662:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800b666:	2300      	movs	r3, #0
 800b668:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800b66c:	e780      	b.n	800b570 <_svfprintf_r+0x480>
 800b66e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800b670:	e7a7      	b.n	800b5c2 <_svfprintf_r+0x4d2>
 800b672:	bf00      	nop
 800b674:	7fefffff 	.word	0x7fefffff
 800b678:	080132c4 	.word	0x080132c4
 800b67c:	080132c8 	.word	0x080132c8
 800b680:	080132cc 	.word	0x080132cc
 800b684:	080132d0 	.word	0x080132d0
 800b688:	080132d4 	.word	0x080132d4
 800b68c:	080132e5 	.word	0x080132e5
 800b690:	40300000 	.word	0x40300000
 800b694:	3fe00000 	.word	0x3fe00000
 800b698:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b69a:	9624      	str	r6, [sp, #144]	@ 0x90
 800b69c:	7bd9      	ldrb	r1, [r3, #15]
 800b69e:	2030      	movs	r0, #48	@ 0x30
 800b6a0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b6a2:	1e53      	subs	r3, r2, #1
 800b6a4:	9324      	str	r3, [sp, #144]	@ 0x90
 800b6a6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800b6aa:	428b      	cmp	r3, r1
 800b6ac:	f000 8148 	beq.w	800b940 <_svfprintf_r+0x850>
 800b6b0:	2b39      	cmp	r3, #57	@ 0x39
 800b6b2:	bf0b      	itete	eq
 800b6b4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800b6b6:	3301      	addne	r3, #1
 800b6b8:	7a9b      	ldrbeq	r3, [r3, #10]
 800b6ba:	b2db      	uxtbne	r3, r3
 800b6bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6c0:	eba6 0309 	sub.w	r3, r6, r9
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	9b08      	ldr	r3, [sp, #32]
 800b6c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b6ca:	2b47      	cmp	r3, #71	@ 0x47
 800b6cc:	f040 8187 	bne.w	800b9de <_svfprintf_r+0x8ee>
 800b6d0:	1cf1      	adds	r1, r6, #3
 800b6d2:	db02      	blt.n	800b6da <_svfprintf_r+0x5ea>
 800b6d4:	4546      	cmp	r6, r8
 800b6d6:	f340 81a5 	ble.w	800ba24 <_svfprintf_r+0x934>
 800b6da:	9b06      	ldr	r3, [sp, #24]
 800b6dc:	3b02      	subs	r3, #2
 800b6de:	9306      	str	r3, [sp, #24]
 800b6e0:	9906      	ldr	r1, [sp, #24]
 800b6e2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800b6e6:	f021 0120 	bic.w	r1, r1, #32
 800b6ea:	2941      	cmp	r1, #65	@ 0x41
 800b6ec:	bf08      	it	eq
 800b6ee:	320f      	addeq	r2, #15
 800b6f0:	f106 33ff 	add.w	r3, r6, #4294967295
 800b6f4:	bf06      	itte	eq
 800b6f6:	b2d2      	uxtbeq	r2, r2
 800b6f8:	2101      	moveq	r1, #1
 800b6fa:	2100      	movne	r1, #0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	9320      	str	r3, [sp, #128]	@ 0x80
 800b700:	bfb8      	it	lt
 800b702:	f1c6 0301 	rsblt	r3, r6, #1
 800b706:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800b70a:	bfb4      	ite	lt
 800b70c:	222d      	movlt	r2, #45	@ 0x2d
 800b70e:	222b      	movge	r2, #43	@ 0x2b
 800b710:	2b09      	cmp	r3, #9
 800b712:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800b716:	f340 8178 	ble.w	800ba0a <_svfprintf_r+0x91a>
 800b71a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800b71e:	270a      	movs	r7, #10
 800b720:	4602      	mov	r2, r0
 800b722:	fbb3 f6f7 	udiv	r6, r3, r7
 800b726:	fb07 3116 	mls	r1, r7, r6, r3
 800b72a:	3130      	adds	r1, #48	@ 0x30
 800b72c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b730:	4619      	mov	r1, r3
 800b732:	2963      	cmp	r1, #99	@ 0x63
 800b734:	f100 30ff 	add.w	r0, r0, #4294967295
 800b738:	4633      	mov	r3, r6
 800b73a:	dcf1      	bgt.n	800b720 <_svfprintf_r+0x630>
 800b73c:	3330      	adds	r3, #48	@ 0x30
 800b73e:	1e91      	subs	r1, r2, #2
 800b740:	f800 3c01 	strb.w	r3, [r0, #-1]
 800b744:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800b748:	460b      	mov	r3, r1
 800b74a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800b74e:	4283      	cmp	r3, r0
 800b750:	f0c0 8156 	bcc.w	800ba00 <_svfprintf_r+0x910>
 800b754:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800b758:	1a9b      	subs	r3, r3, r2
 800b75a:	4281      	cmp	r1, r0
 800b75c:	bf88      	it	hi
 800b75e:	2300      	movhi	r3, #0
 800b760:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800b764:	441a      	add	r2, r3
 800b766:	ab22      	add	r3, sp, #136	@ 0x88
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	9a04      	ldr	r2, [sp, #16]
 800b76c:	9318      	str	r3, [sp, #96]	@ 0x60
 800b76e:	2a01      	cmp	r2, #1
 800b770:	eb03 0802 	add.w	r8, r3, r2
 800b774:	dc01      	bgt.n	800b77a <_svfprintf_r+0x68a>
 800b776:	07ea      	lsls	r2, r5, #31
 800b778:	d501      	bpl.n	800b77e <_svfprintf_r+0x68e>
 800b77a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b77c:	4498      	add	r8, r3
 800b77e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800b782:	2700      	movs	r7, #0
 800b784:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800b788:	9311      	str	r3, [sp, #68]	@ 0x44
 800b78a:	9708      	str	r7, [sp, #32]
 800b78c:	463e      	mov	r6, r7
 800b78e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b790:	2b00      	cmp	r3, #0
 800b792:	f040 818f 	bne.w	800bab4 <_svfprintf_r+0x9c4>
 800b796:	2300      	movs	r3, #0
 800b798:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b79a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b79c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b79e:	4543      	cmp	r3, r8
 800b7a0:	bfb8      	it	lt
 800b7a2:	4643      	movlt	r3, r8
 800b7a4:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800b7aa:	b113      	cbz	r3, 800b7b2 <_svfprintf_r+0x6c2>
 800b7ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7b2:	f015 0302 	ands.w	r3, r5, #2
 800b7b6:	931c      	str	r3, [sp, #112]	@ 0x70
 800b7b8:	bf1e      	ittt	ne
 800b7ba:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800b7bc:	3302      	addne	r3, #2
 800b7be:	9311      	strne	r3, [sp, #68]	@ 0x44
 800b7c0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800b7c4:	931d      	str	r3, [sp, #116]	@ 0x74
 800b7c6:	d122      	bne.n	800b80e <_svfprintf_r+0x71e>
 800b7c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7cc:	1a9b      	subs	r3, r3, r2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7d2:	dd1c      	ble.n	800b80e <_svfprintf_r+0x71e>
 800b7d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b7d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800b7da:	2810      	cmp	r0, #16
 800b7dc:	489e      	ldr	r0, [pc, #632]	@ (800ba58 <_svfprintf_r+0x968>)
 800b7de:	6020      	str	r0, [r4, #0]
 800b7e0:	f102 0201 	add.w	r2, r2, #1
 800b7e4:	f104 0108 	add.w	r1, r4, #8
 800b7e8:	f300 8298 	bgt.w	800bd1c <_svfprintf_r+0xc2c>
 800b7ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b7ee:	6060      	str	r0, [r4, #4]
 800b7f0:	4403      	add	r3, r0
 800b7f2:	2a07      	cmp	r2, #7
 800b7f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b7f8:	f340 82a5 	ble.w	800bd46 <_svfprintf_r+0xc56>
 800b7fc:	9803      	ldr	r0, [sp, #12]
 800b7fe:	aa26      	add	r2, sp, #152	@ 0x98
 800b800:	4659      	mov	r1, fp
 800b802:	f005 fa89 	bl	8010d18 <__ssprint_r>
 800b806:	2800      	cmp	r0, #0
 800b808:	f040 85ed 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800b80c:	ac29      	add	r4, sp, #164	@ 0xa4
 800b80e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800b812:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b814:	b16a      	cbz	r2, 800b832 <_svfprintf_r+0x742>
 800b816:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800b81a:	6022      	str	r2, [r4, #0]
 800b81c:	2201      	movs	r2, #1
 800b81e:	4413      	add	r3, r2
 800b820:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b822:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b824:	6062      	str	r2, [r4, #4]
 800b826:	4413      	add	r3, r2
 800b828:	2b07      	cmp	r3, #7
 800b82a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b82c:	f300 828d 	bgt.w	800bd4a <_svfprintf_r+0xc5a>
 800b830:	3408      	adds	r4, #8
 800b832:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b834:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b836:	b162      	cbz	r2, 800b852 <_svfprintf_r+0x762>
 800b838:	aa1f      	add	r2, sp, #124	@ 0x7c
 800b83a:	6022      	str	r2, [r4, #0]
 800b83c:	2202      	movs	r2, #2
 800b83e:	4413      	add	r3, r2
 800b840:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b842:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b844:	6062      	str	r2, [r4, #4]
 800b846:	3301      	adds	r3, #1
 800b848:	2b07      	cmp	r3, #7
 800b84a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b84c:	f300 8287 	bgt.w	800bd5e <_svfprintf_r+0xc6e>
 800b850:	3408      	adds	r4, #8
 800b852:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b854:	2b80      	cmp	r3, #128	@ 0x80
 800b856:	d122      	bne.n	800b89e <_svfprintf_r+0x7ae>
 800b858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b85a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b85c:	1a9b      	subs	r3, r3, r2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b862:	dd1c      	ble.n	800b89e <_svfprintf_r+0x7ae>
 800b864:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b866:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800b86a:	2810      	cmp	r0, #16
 800b86c:	487b      	ldr	r0, [pc, #492]	@ (800ba5c <_svfprintf_r+0x96c>)
 800b86e:	6020      	str	r0, [r4, #0]
 800b870:	f102 0201 	add.w	r2, r2, #1
 800b874:	f104 0108 	add.w	r1, r4, #8
 800b878:	f300 827b 	bgt.w	800bd72 <_svfprintf_r+0xc82>
 800b87c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b87e:	6060      	str	r0, [r4, #4]
 800b880:	4403      	add	r3, r0
 800b882:	2a07      	cmp	r2, #7
 800b884:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b888:	f340 8288 	ble.w	800bd9c <_svfprintf_r+0xcac>
 800b88c:	9803      	ldr	r0, [sp, #12]
 800b88e:	aa26      	add	r2, sp, #152	@ 0x98
 800b890:	4659      	mov	r1, fp
 800b892:	f005 fa41 	bl	8010d18 <__ssprint_r>
 800b896:	2800      	cmp	r0, #0
 800b898:	f040 85a5 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800b89c:	ac29      	add	r4, sp, #164	@ 0xa4
 800b89e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b8a0:	eba3 0308 	sub.w	r3, r3, r8
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8a8:	dd1c      	ble.n	800b8e4 <_svfprintf_r+0x7f4>
 800b8aa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b8ac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800b8b0:	2810      	cmp	r0, #16
 800b8b2:	486a      	ldr	r0, [pc, #424]	@ (800ba5c <_svfprintf_r+0x96c>)
 800b8b4:	6020      	str	r0, [r4, #0]
 800b8b6:	f102 0201 	add.w	r2, r2, #1
 800b8ba:	f104 0108 	add.w	r1, r4, #8
 800b8be:	f300 826f 	bgt.w	800bda0 <_svfprintf_r+0xcb0>
 800b8c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b8c4:	6060      	str	r0, [r4, #4]
 800b8c6:	4403      	add	r3, r0
 800b8c8:	2a07      	cmp	r2, #7
 800b8ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b8ce:	f340 827c 	ble.w	800bdca <_svfprintf_r+0xcda>
 800b8d2:	9803      	ldr	r0, [sp, #12]
 800b8d4:	aa26      	add	r2, sp, #152	@ 0x98
 800b8d6:	4659      	mov	r1, fp
 800b8d8:	f005 fa1e 	bl	8010d18 <__ssprint_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	f040 8582 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800b8e2:	ac29      	add	r4, sp, #164	@ 0xa4
 800b8e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b8e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8e8:	05ea      	lsls	r2, r5, #23
 800b8ea:	f100 8275 	bmi.w	800bdd8 <_svfprintf_r+0xce8>
 800b8ee:	4443      	add	r3, r8
 800b8f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b8f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	2b07      	cmp	r3, #7
 800b8f8:	e9c4 9800 	strd	r9, r8, [r4]
 800b8fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b8fe:	f300 82b1 	bgt.w	800be64 <_svfprintf_r+0xd74>
 800b902:	3408      	adds	r4, #8
 800b904:	076a      	lsls	r2, r5, #29
 800b906:	f100 8550 	bmi.w	800c3aa <_svfprintf_r+0x12ba>
 800b90a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b90e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b910:	428a      	cmp	r2, r1
 800b912:	bfac      	ite	ge
 800b914:	189b      	addge	r3, r3, r2
 800b916:	185b      	addlt	r3, r3, r1
 800b918:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b91a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b91c:	b13b      	cbz	r3, 800b92e <_svfprintf_r+0x83e>
 800b91e:	9803      	ldr	r0, [sp, #12]
 800b920:	aa26      	add	r2, sp, #152	@ 0x98
 800b922:	4659      	mov	r1, fp
 800b924:	f005 f9f8 	bl	8010d18 <__ssprint_r>
 800b928:	2800      	cmp	r0, #0
 800b92a:	f040 855c 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800b92e:	2300      	movs	r3, #0
 800b930:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b932:	f1ba 0f00 	cmp.w	sl, #0
 800b936:	f040 8572 	bne.w	800c41e <_svfprintf_r+0x132e>
 800b93a:	9e07      	ldr	r6, [sp, #28]
 800b93c:	ac29      	add	r4, sp, #164	@ 0xa4
 800b93e:	e0c6      	b.n	800bace <_svfprintf_r+0x9de>
 800b940:	f802 0c01 	strb.w	r0, [r2, #-1]
 800b944:	e6ac      	b.n	800b6a0 <_svfprintf_r+0x5b0>
 800b946:	f803 0b01 	strb.w	r0, [r3], #1
 800b94a:	e676      	b.n	800b63a <_svfprintf_r+0x54a>
 800b94c:	9b08      	ldr	r3, [sp, #32]
 800b94e:	2b46      	cmp	r3, #70	@ 0x46
 800b950:	d005      	beq.n	800b95e <_svfprintf_r+0x86e>
 800b952:	2b45      	cmp	r3, #69	@ 0x45
 800b954:	d11a      	bne.n	800b98c <_svfprintf_r+0x89c>
 800b956:	f108 0601 	add.w	r6, r8, #1
 800b95a:	2102      	movs	r1, #2
 800b95c:	e001      	b.n	800b962 <_svfprintf_r+0x872>
 800b95e:	4646      	mov	r6, r8
 800b960:	2103      	movs	r1, #3
 800b962:	ab24      	add	r3, sp, #144	@ 0x90
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	ab21      	add	r3, sp, #132	@ 0x84
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800b96e:	ab20      	add	r3, sp, #128	@ 0x80
 800b970:	9803      	ldr	r0, [sp, #12]
 800b972:	4632      	mov	r2, r6
 800b974:	f002 fdac 	bl	800e4d0 <_dtoa_r>
 800b978:	9b08      	ldr	r3, [sp, #32]
 800b97a:	2b47      	cmp	r3, #71	@ 0x47
 800b97c:	4681      	mov	r9, r0
 800b97e:	d119      	bne.n	800b9b4 <_svfprintf_r+0x8c4>
 800b980:	07e8      	lsls	r0, r5, #31
 800b982:	d405      	bmi.n	800b990 <_svfprintf_r+0x8a0>
 800b984:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b986:	eba3 0309 	sub.w	r3, r3, r9
 800b98a:	e69b      	b.n	800b6c4 <_svfprintf_r+0x5d4>
 800b98c:	4646      	mov	r6, r8
 800b98e:	e7e4      	b.n	800b95a <_svfprintf_r+0x86a>
 800b990:	eb09 0706 	add.w	r7, r9, r6
 800b994:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800b998:	2200      	movs	r2, #0
 800b99a:	2300      	movs	r3, #0
 800b99c:	f7f5 f8bc 	bl	8000b18 <__aeabi_dcmpeq>
 800b9a0:	b100      	cbz	r0, 800b9a4 <_svfprintf_r+0x8b4>
 800b9a2:	9724      	str	r7, [sp, #144]	@ 0x90
 800b9a4:	2230      	movs	r2, #48	@ 0x30
 800b9a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b9a8:	429f      	cmp	r7, r3
 800b9aa:	d9eb      	bls.n	800b984 <_svfprintf_r+0x894>
 800b9ac:	1c59      	adds	r1, r3, #1
 800b9ae:	9124      	str	r1, [sp, #144]	@ 0x90
 800b9b0:	701a      	strb	r2, [r3, #0]
 800b9b2:	e7f8      	b.n	800b9a6 <_svfprintf_r+0x8b6>
 800b9b4:	9b08      	ldr	r3, [sp, #32]
 800b9b6:	2b46      	cmp	r3, #70	@ 0x46
 800b9b8:	eb00 0706 	add.w	r7, r0, r6
 800b9bc:	d1ea      	bne.n	800b994 <_svfprintf_r+0x8a4>
 800b9be:	7803      	ldrb	r3, [r0, #0]
 800b9c0:	2b30      	cmp	r3, #48	@ 0x30
 800b9c2:	d109      	bne.n	800b9d8 <_svfprintf_r+0x8e8>
 800b9c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f7f5 f8a4 	bl	8000b18 <__aeabi_dcmpeq>
 800b9d0:	b910      	cbnz	r0, 800b9d8 <_svfprintf_r+0x8e8>
 800b9d2:	f1c6 0601 	rsb	r6, r6, #1
 800b9d6:	9620      	str	r6, [sp, #128]	@ 0x80
 800b9d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b9da:	441f      	add	r7, r3
 800b9dc:	e7da      	b.n	800b994 <_svfprintf_r+0x8a4>
 800b9de:	9b08      	ldr	r3, [sp, #32]
 800b9e0:	2b46      	cmp	r3, #70	@ 0x46
 800b9e2:	f47f ae7d 	bne.w	800b6e0 <_svfprintf_r+0x5f0>
 800b9e6:	f005 0301 	and.w	r3, r5, #1
 800b9ea:	2e00      	cmp	r6, #0
 800b9ec:	ea43 0308 	orr.w	r3, r3, r8
 800b9f0:	dd25      	ble.n	800ba3e <_svfprintf_r+0x94e>
 800b9f2:	b37b      	cbz	r3, 800ba54 <_svfprintf_r+0x964>
 800b9f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9f6:	18f3      	adds	r3, r6, r3
 800b9f8:	4498      	add	r8, r3
 800b9fa:	2366      	movs	r3, #102	@ 0x66
 800b9fc:	9306      	str	r3, [sp, #24]
 800b9fe:	e033      	b.n	800ba68 <_svfprintf_r+0x978>
 800ba00:	f813 7b01 	ldrb.w	r7, [r3], #1
 800ba04:	f806 7f01 	strb.w	r7, [r6, #1]!
 800ba08:	e6a1      	b.n	800b74e <_svfprintf_r+0x65e>
 800ba0a:	b941      	cbnz	r1, 800ba1e <_svfprintf_r+0x92e>
 800ba0c:	2230      	movs	r2, #48	@ 0x30
 800ba0e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800ba12:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800ba16:	3330      	adds	r3, #48	@ 0x30
 800ba18:	f802 3b01 	strb.w	r3, [r2], #1
 800ba1c:	e6a3      	b.n	800b766 <_svfprintf_r+0x676>
 800ba1e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800ba22:	e7f8      	b.n	800ba16 <_svfprintf_r+0x926>
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	429e      	cmp	r6, r3
 800ba28:	da0d      	bge.n	800ba46 <_svfprintf_r+0x956>
 800ba2a:	9b04      	ldr	r3, [sp, #16]
 800ba2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	eb03 0802 	add.w	r8, r3, r2
 800ba34:	dc0c      	bgt.n	800ba50 <_svfprintf_r+0x960>
 800ba36:	f1c6 0301 	rsb	r3, r6, #1
 800ba3a:	4498      	add	r8, r3
 800ba3c:	e008      	b.n	800ba50 <_svfprintf_r+0x960>
 800ba3e:	b17b      	cbz	r3, 800ba60 <_svfprintf_r+0x970>
 800ba40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba42:	3301      	adds	r3, #1
 800ba44:	e7d8      	b.n	800b9f8 <_svfprintf_r+0x908>
 800ba46:	07eb      	lsls	r3, r5, #31
 800ba48:	d521      	bpl.n	800ba8e <_svfprintf_r+0x99e>
 800ba4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba4c:	eb06 0803 	add.w	r8, r6, r3
 800ba50:	2367      	movs	r3, #103	@ 0x67
 800ba52:	e7d3      	b.n	800b9fc <_svfprintf_r+0x90c>
 800ba54:	46b0      	mov	r8, r6
 800ba56:	e7d0      	b.n	800b9fa <_svfprintf_r+0x90a>
 800ba58:	08013308 	.word	0x08013308
 800ba5c:	080132f8 	.word	0x080132f8
 800ba60:	2366      	movs	r3, #102	@ 0x66
 800ba62:	9306      	str	r3, [sp, #24]
 800ba64:	f04f 0801 	mov.w	r8, #1
 800ba68:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800ba6c:	9308      	str	r3, [sp, #32]
 800ba6e:	d01f      	beq.n	800bab0 <_svfprintf_r+0x9c0>
 800ba70:	2700      	movs	r7, #0
 800ba72:	2e00      	cmp	r6, #0
 800ba74:	9708      	str	r7, [sp, #32]
 800ba76:	f77f ae8a 	ble.w	800b78e <_svfprintf_r+0x69e>
 800ba7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	2bff      	cmp	r3, #255	@ 0xff
 800ba80:	d107      	bne.n	800ba92 <_svfprintf_r+0x9a2>
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ba86:	443b      	add	r3, r7
 800ba88:	fb02 8803 	mla	r8, r2, r3, r8
 800ba8c:	e67f      	b.n	800b78e <_svfprintf_r+0x69e>
 800ba8e:	46b0      	mov	r8, r6
 800ba90:	e7de      	b.n	800ba50 <_svfprintf_r+0x960>
 800ba92:	42b3      	cmp	r3, r6
 800ba94:	daf5      	bge.n	800ba82 <_svfprintf_r+0x992>
 800ba96:	1af6      	subs	r6, r6, r3
 800ba98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9a:	785b      	ldrb	r3, [r3, #1]
 800ba9c:	b133      	cbz	r3, 800baac <_svfprintf_r+0x9bc>
 800ba9e:	9b08      	ldr	r3, [sp, #32]
 800baa0:	3301      	adds	r3, #1
 800baa2:	9308      	str	r3, [sp, #32]
 800baa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa6:	3301      	adds	r3, #1
 800baa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baaa:	e7e6      	b.n	800ba7a <_svfprintf_r+0x98a>
 800baac:	3701      	adds	r7, #1
 800baae:	e7e4      	b.n	800ba7a <_svfprintf_r+0x98a>
 800bab0:	9f08      	ldr	r7, [sp, #32]
 800bab2:	e66c      	b.n	800b78e <_svfprintf_r+0x69e>
 800bab4:	232d      	movs	r3, #45	@ 0x2d
 800bab6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800baba:	e66c      	b.n	800b796 <_svfprintf_r+0x6a6>
 800babc:	06af      	lsls	r7, r5, #26
 800babe:	d50a      	bpl.n	800bad6 <_svfprintf_r+0x9e6>
 800bac0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bac2:	6833      	ldr	r3, [r6, #0]
 800bac4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bac6:	17d2      	asrs	r2, r2, #31
 800bac8:	e9c3 1200 	strd	r1, r2, [r3]
 800bacc:	3604      	adds	r6, #4
 800bace:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800bad2:	f7ff bb46 	b.w	800b162 <_svfprintf_r+0x72>
 800bad6:	06e8      	lsls	r0, r5, #27
 800bad8:	d503      	bpl.n	800bae2 <_svfprintf_r+0x9f2>
 800bada:	6833      	ldr	r3, [r6, #0]
 800badc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e7f4      	b.n	800bacc <_svfprintf_r+0x9dc>
 800bae2:	0669      	lsls	r1, r5, #25
 800bae4:	d503      	bpl.n	800baee <_svfprintf_r+0x9fe>
 800bae6:	6833      	ldr	r3, [r6, #0]
 800bae8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800baea:	801a      	strh	r2, [r3, #0]
 800baec:	e7ee      	b.n	800bacc <_svfprintf_r+0x9dc>
 800baee:	05aa      	lsls	r2, r5, #22
 800baf0:	d5f3      	bpl.n	800bada <_svfprintf_r+0x9ea>
 800baf2:	6833      	ldr	r3, [r6, #0]
 800baf4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	e7e8      	b.n	800bacc <_svfprintf_r+0x9dc>
 800bafa:	f045 0510 	orr.w	r5, r5, #16
 800bafe:	f015 0320 	ands.w	r3, r5, #32
 800bb02:	d020      	beq.n	800bb46 <_svfprintf_r+0xa56>
 800bb04:	3607      	adds	r6, #7
 800bb06:	f026 0307 	bic.w	r3, r6, #7
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	685f      	ldr	r7, [r3, #4]
 800bb0e:	f852 6b08 	ldr.w	r6, [r2], #8
 800bb12:	9207      	str	r2, [sp, #28]
 800bb14:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800bb18:	2300      	movs	r3, #0
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800bb20:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bb24:	f000 848c 	beq.w	800c440 <_svfprintf_r+0x1350>
 800bb28:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800bb2c:	9208      	str	r2, [sp, #32]
 800bb2e:	ea56 0207 	orrs.w	r2, r6, r7
 800bb32:	f040 848a 	bne.w	800c44a <_svfprintf_r+0x135a>
 800bb36:	f1b8 0f00 	cmp.w	r8, #0
 800bb3a:	f000 80db 	beq.w	800bcf4 <_svfprintf_r+0xc04>
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	f040 8486 	bne.w	800c450 <_svfprintf_r+0x1360>
 800bb44:	e083      	b.n	800bc4e <_svfprintf_r+0xb5e>
 800bb46:	4632      	mov	r2, r6
 800bb48:	f015 0710 	ands.w	r7, r5, #16
 800bb4c:	f852 6b04 	ldr.w	r6, [r2], #4
 800bb50:	9207      	str	r2, [sp, #28]
 800bb52:	d001      	beq.n	800bb58 <_svfprintf_r+0xa68>
 800bb54:	461f      	mov	r7, r3
 800bb56:	e7dd      	b.n	800bb14 <_svfprintf_r+0xa24>
 800bb58:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800bb5c:	d001      	beq.n	800bb62 <_svfprintf_r+0xa72>
 800bb5e:	b2b6      	uxth	r6, r6
 800bb60:	e7d8      	b.n	800bb14 <_svfprintf_r+0xa24>
 800bb62:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800bb66:	d0d5      	beq.n	800bb14 <_svfprintf_r+0xa24>
 800bb68:	b2f6      	uxtb	r6, r6
 800bb6a:	e7f3      	b.n	800bb54 <_svfprintf_r+0xa64>
 800bb6c:	4633      	mov	r3, r6
 800bb6e:	2278      	movs	r2, #120	@ 0x78
 800bb70:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb74:	9307      	str	r3, [sp, #28]
 800bb76:	f647 0330 	movw	r3, #30768	@ 0x7830
 800bb7a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800bb7e:	4b94      	ldr	r3, [pc, #592]	@ (800bdd0 <_svfprintf_r+0xce0>)
 800bb80:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb82:	2700      	movs	r7, #0
 800bb84:	f045 0502 	orr.w	r5, r5, #2
 800bb88:	2302      	movs	r3, #2
 800bb8a:	9206      	str	r2, [sp, #24]
 800bb8c:	e7c5      	b.n	800bb1a <_svfprintf_r+0xa2a>
 800bb8e:	4633      	mov	r3, r6
 800bb90:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bb94:	f853 9b04 	ldr.w	r9, [r3], #4
 800bb98:	9307      	str	r3, [sp, #28]
 800bb9a:	f04f 0600 	mov.w	r6, #0
 800bb9e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800bba2:	d00f      	beq.n	800bbc4 <_svfprintf_r+0xad4>
 800bba4:	4642      	mov	r2, r8
 800bba6:	4631      	mov	r1, r6
 800bba8:	4648      	mov	r0, r9
 800bbaa:	f7f4 fb41 	bl	8000230 <memchr>
 800bbae:	4682      	mov	sl, r0
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f43f ac81 	beq.w	800b4b8 <_svfprintf_r+0x3c8>
 800bbb6:	eba0 0809 	sub.w	r8, r0, r9
 800bbba:	46b2      	mov	sl, r6
 800bbbc:	9610      	str	r6, [sp, #64]	@ 0x40
 800bbbe:	4637      	mov	r7, r6
 800bbc0:	9608      	str	r6, [sp, #32]
 800bbc2:	e5eb      	b.n	800b79c <_svfprintf_r+0x6ac>
 800bbc4:	4648      	mov	r0, r9
 800bbc6:	f7f4 fb2b 	bl	8000220 <strlen>
 800bbca:	46b2      	mov	sl, r6
 800bbcc:	4680      	mov	r8, r0
 800bbce:	e473      	b.n	800b4b8 <_svfprintf_r+0x3c8>
 800bbd0:	f045 0510 	orr.w	r5, r5, #16
 800bbd4:	f015 0320 	ands.w	r3, r5, #32
 800bbd8:	d009      	beq.n	800bbee <_svfprintf_r+0xafe>
 800bbda:	3607      	adds	r6, #7
 800bbdc:	f026 0307 	bic.w	r3, r6, #7
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	685f      	ldr	r7, [r3, #4]
 800bbe4:	f852 6b08 	ldr.w	r6, [r2], #8
 800bbe8:	9207      	str	r2, [sp, #28]
 800bbea:	2301      	movs	r3, #1
 800bbec:	e795      	b.n	800bb1a <_svfprintf_r+0xa2a>
 800bbee:	4632      	mov	r2, r6
 800bbf0:	f015 0710 	ands.w	r7, r5, #16
 800bbf4:	f852 6b04 	ldr.w	r6, [r2], #4
 800bbf8:	9207      	str	r2, [sp, #28]
 800bbfa:	d001      	beq.n	800bc00 <_svfprintf_r+0xb10>
 800bbfc:	461f      	mov	r7, r3
 800bbfe:	e7f4      	b.n	800bbea <_svfprintf_r+0xafa>
 800bc00:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800bc04:	d001      	beq.n	800bc0a <_svfprintf_r+0xb1a>
 800bc06:	b2b6      	uxth	r6, r6
 800bc08:	e7ef      	b.n	800bbea <_svfprintf_r+0xafa>
 800bc0a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800bc0e:	d0ec      	beq.n	800bbea <_svfprintf_r+0xafa>
 800bc10:	b2f6      	uxtb	r6, r6
 800bc12:	e7f3      	b.n	800bbfc <_svfprintf_r+0xb0c>
 800bc14:	4b6f      	ldr	r3, [pc, #444]	@ (800bdd4 <_svfprintf_r+0xce4>)
 800bc16:	f7ff bb39 	b.w	800b28c <_svfprintf_r+0x19c>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	f015 0710 	ands.w	r7, r5, #16
 800bc20:	f852 6b04 	ldr.w	r6, [r2], #4
 800bc24:	9207      	str	r2, [sp, #28]
 800bc26:	d002      	beq.n	800bc2e <_svfprintf_r+0xb3e>
 800bc28:	461f      	mov	r7, r3
 800bc2a:	f7ff bb3c 	b.w	800b2a6 <_svfprintf_r+0x1b6>
 800bc2e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800bc32:	d002      	beq.n	800bc3a <_svfprintf_r+0xb4a>
 800bc34:	b2b6      	uxth	r6, r6
 800bc36:	f7ff bb36 	b.w	800b2a6 <_svfprintf_r+0x1b6>
 800bc3a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800bc3e:	f43f ab32 	beq.w	800b2a6 <_svfprintf_r+0x1b6>
 800bc42:	b2f6      	uxtb	r6, r6
 800bc44:	e7f0      	b.n	800bc28 <_svfprintf_r+0xb38>
 800bc46:	2e0a      	cmp	r6, #10
 800bc48:	f177 0300 	sbcs.w	r3, r7, #0
 800bc4c:	d207      	bcs.n	800bc5e <_svfprintf_r+0xb6e>
 800bc4e:	3630      	adds	r6, #48	@ 0x30
 800bc50:	b2f6      	uxtb	r6, r6
 800bc52:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800bc56:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800bc5a:	f000 bc15 	b.w	800c488 <_svfprintf_r+0x1398>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	9304      	str	r3, [sp, #16]
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc68:	ad52      	add	r5, sp, #328	@ 0x148
 800bc6a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc6c:	220a      	movs	r2, #10
 800bc6e:	2300      	movs	r3, #0
 800bc70:	4630      	mov	r0, r6
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f5 f830 	bl	8000cd8 <__aeabi_uldivmod>
 800bc78:	9b04      	ldr	r3, [sp, #16]
 800bc7a:	9011      	str	r0, [sp, #68]	@ 0x44
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	9304      	str	r3, [sp, #16]
 800bc80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc82:	3230      	adds	r2, #48	@ 0x30
 800bc84:	468a      	mov	sl, r1
 800bc86:	f105 39ff 	add.w	r9, r5, #4294967295
 800bc8a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800bc8e:	b1d3      	cbz	r3, 800bcc6 <_svfprintf_r+0xbd6>
 800bc90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc92:	9a04      	ldr	r2, [sp, #16]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d115      	bne.n	800bcc6 <_svfprintf_r+0xbd6>
 800bc9a:	2aff      	cmp	r2, #255	@ 0xff
 800bc9c:	d013      	beq.n	800bcc6 <_svfprintf_r+0xbd6>
 800bc9e:	2e0a      	cmp	r6, #10
 800bca0:	f177 0300 	sbcs.w	r3, r7, #0
 800bca4:	d30f      	bcc.n	800bcc6 <_svfprintf_r+0xbd6>
 800bca6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bca8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bcaa:	eba9 0903 	sub.w	r9, r9, r3
 800bcae:	461a      	mov	r2, r3
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	f002 faa7 	bl	800e204 <strncpy>
 800bcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb8:	785b      	ldrb	r3, [r3, #1]
 800bcba:	b11b      	cbz	r3, 800bcc4 <_svfprintf_r+0xbd4>
 800bcbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	9304      	str	r3, [sp, #16]
 800bcc6:	2e0a      	cmp	r6, #10
 800bcc8:	f177 0700 	sbcs.w	r7, r7, #0
 800bccc:	f0c0 83dc 	bcc.w	800c488 <_svfprintf_r+0x1398>
 800bcd0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bcd2:	4657      	mov	r7, sl
 800bcd4:	464d      	mov	r5, r9
 800bcd6:	e7c9      	b.n	800bc6c <_svfprintf_r+0xb7c>
 800bcd8:	f006 030f 	and.w	r3, r6, #15
 800bcdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bcde:	0936      	lsrs	r6, r6, #4
 800bce0:	5cd3      	ldrb	r3, [r2, r3]
 800bce2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800bce6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800bcea:	093f      	lsrs	r7, r7, #4
 800bcec:	ea56 0307 	orrs.w	r3, r6, r7
 800bcf0:	d1f2      	bne.n	800bcd8 <_svfprintf_r+0xbe8>
 800bcf2:	e3c9      	b.n	800c488 <_svfprintf_r+0x1398>
 800bcf4:	b91b      	cbnz	r3, 800bcfe <_svfprintf_r+0xc0e>
 800bcf6:	07e9      	lsls	r1, r5, #31
 800bcf8:	d501      	bpl.n	800bcfe <_svfprintf_r+0xc0e>
 800bcfa:	2630      	movs	r6, #48	@ 0x30
 800bcfc:	e7a9      	b.n	800bc52 <_svfprintf_r+0xb62>
 800bcfe:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800bd02:	e3c1      	b.n	800c488 <_svfprintf_r+0x1398>
 800bd04:	9b06      	ldr	r3, [sp, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 838f 	beq.w	800c42a <_svfprintf_r+0x133a>
 800bd0c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800bd10:	2300      	movs	r3, #0
 800bd12:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bd16:	9607      	str	r6, [sp, #28]
 800bd18:	f7ff bb63 	b.w	800b3e2 <_svfprintf_r+0x2f2>
 800bd1c:	2010      	movs	r0, #16
 800bd1e:	4403      	add	r3, r0
 800bd20:	2a07      	cmp	r2, #7
 800bd22:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800bd26:	6060      	str	r0, [r4, #4]
 800bd28:	dd08      	ble.n	800bd3c <_svfprintf_r+0xc4c>
 800bd2a:	9803      	ldr	r0, [sp, #12]
 800bd2c:	aa26      	add	r2, sp, #152	@ 0x98
 800bd2e:	4659      	mov	r1, fp
 800bd30:	f004 fff2 	bl	8010d18 <__ssprint_r>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	f040 8356 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bd3a:	a929      	add	r1, sp, #164	@ 0xa4
 800bd3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd3e:	3b10      	subs	r3, #16
 800bd40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd42:	460c      	mov	r4, r1
 800bd44:	e546      	b.n	800b7d4 <_svfprintf_r+0x6e4>
 800bd46:	460c      	mov	r4, r1
 800bd48:	e561      	b.n	800b80e <_svfprintf_r+0x71e>
 800bd4a:	9803      	ldr	r0, [sp, #12]
 800bd4c:	aa26      	add	r2, sp, #152	@ 0x98
 800bd4e:	4659      	mov	r1, fp
 800bd50:	f004 ffe2 	bl	8010d18 <__ssprint_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f040 8346 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bd5a:	ac29      	add	r4, sp, #164	@ 0xa4
 800bd5c:	e569      	b.n	800b832 <_svfprintf_r+0x742>
 800bd5e:	9803      	ldr	r0, [sp, #12]
 800bd60:	aa26      	add	r2, sp, #152	@ 0x98
 800bd62:	4659      	mov	r1, fp
 800bd64:	f004 ffd8 	bl	8010d18 <__ssprint_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	f040 833c 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bd6e:	ac29      	add	r4, sp, #164	@ 0xa4
 800bd70:	e56f      	b.n	800b852 <_svfprintf_r+0x762>
 800bd72:	2010      	movs	r0, #16
 800bd74:	4403      	add	r3, r0
 800bd76:	2a07      	cmp	r2, #7
 800bd78:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800bd7c:	6060      	str	r0, [r4, #4]
 800bd7e:	dd08      	ble.n	800bd92 <_svfprintf_r+0xca2>
 800bd80:	9803      	ldr	r0, [sp, #12]
 800bd82:	aa26      	add	r2, sp, #152	@ 0x98
 800bd84:	4659      	mov	r1, fp
 800bd86:	f004 ffc7 	bl	8010d18 <__ssprint_r>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f040 832b 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bd90:	a929      	add	r1, sp, #164	@ 0xa4
 800bd92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd94:	3b10      	subs	r3, #16
 800bd96:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd98:	460c      	mov	r4, r1
 800bd9a:	e563      	b.n	800b864 <_svfprintf_r+0x774>
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	e57e      	b.n	800b89e <_svfprintf_r+0x7ae>
 800bda0:	2010      	movs	r0, #16
 800bda2:	4403      	add	r3, r0
 800bda4:	2a07      	cmp	r2, #7
 800bda6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800bdaa:	6060      	str	r0, [r4, #4]
 800bdac:	dd08      	ble.n	800bdc0 <_svfprintf_r+0xcd0>
 800bdae:	9803      	ldr	r0, [sp, #12]
 800bdb0:	aa26      	add	r2, sp, #152	@ 0x98
 800bdb2:	4659      	mov	r1, fp
 800bdb4:	f004 ffb0 	bl	8010d18 <__ssprint_r>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	f040 8314 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bdbe:	a929      	add	r1, sp, #164	@ 0xa4
 800bdc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdc2:	3b10      	subs	r3, #16
 800bdc4:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	e56f      	b.n	800b8aa <_svfprintf_r+0x7ba>
 800bdca:	460c      	mov	r4, r1
 800bdcc:	e58a      	b.n	800b8e4 <_svfprintf_r+0x7f4>
 800bdce:	bf00      	nop
 800bdd0:	080132d4 	.word	0x080132d4
 800bdd4:	080132e5 	.word	0x080132e5
 800bdd8:	9b06      	ldr	r3, [sp, #24]
 800bdda:	2b65      	cmp	r3, #101	@ 0x65
 800bddc:	f340 8246 	ble.w	800c26c <_svfprintf_r+0x117c>
 800bde0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bde4:	2200      	movs	r2, #0
 800bde6:	2300      	movs	r3, #0
 800bde8:	f7f4 fe96 	bl	8000b18 <__aeabi_dcmpeq>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d06a      	beq.n	800bec6 <_svfprintf_r+0xdd6>
 800bdf0:	4b73      	ldr	r3, [pc, #460]	@ (800bfc0 <_svfprintf_r+0xed0>)
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	6063      	str	r3, [r4, #4]
 800bdf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	9328      	str	r3, [sp, #160]	@ 0xa0
 800bdfe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800be00:	3301      	adds	r3, #1
 800be02:	2b07      	cmp	r3, #7
 800be04:	9327      	str	r3, [sp, #156]	@ 0x9c
 800be06:	dc37      	bgt.n	800be78 <_svfprintf_r+0xd88>
 800be08:	3408      	adds	r4, #8
 800be0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	4293      	cmp	r3, r2
 800be10:	db02      	blt.n	800be18 <_svfprintf_r+0xd28>
 800be12:	07ef      	lsls	r7, r5, #31
 800be14:	f57f ad76 	bpl.w	800b904 <_svfprintf_r+0x814>
 800be18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be1a:	6023      	str	r3, [r4, #0]
 800be1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800be24:	4413      	add	r3, r2
 800be26:	9328      	str	r3, [sp, #160]	@ 0xa0
 800be28:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800be2a:	3301      	adds	r3, #1
 800be2c:	2b07      	cmp	r3, #7
 800be2e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800be30:	dc2c      	bgt.n	800be8c <_svfprintf_r+0xd9c>
 800be32:	3408      	adds	r4, #8
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	1e5e      	subs	r6, r3, #1
 800be38:	2e00      	cmp	r6, #0
 800be3a:	f77f ad63 	ble.w	800b904 <_svfprintf_r+0x814>
 800be3e:	4f61      	ldr	r7, [pc, #388]	@ (800bfc4 <_svfprintf_r+0xed4>)
 800be40:	f04f 0810 	mov.w	r8, #16
 800be44:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800be48:	2e10      	cmp	r6, #16
 800be4a:	f103 0301 	add.w	r3, r3, #1
 800be4e:	f104 0108 	add.w	r1, r4, #8
 800be52:	6027      	str	r7, [r4, #0]
 800be54:	dc24      	bgt.n	800bea0 <_svfprintf_r+0xdb0>
 800be56:	6066      	str	r6, [r4, #4]
 800be58:	2b07      	cmp	r3, #7
 800be5a:	4416      	add	r6, r2
 800be5c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800be60:	f340 82a0 	ble.w	800c3a4 <_svfprintf_r+0x12b4>
 800be64:	9803      	ldr	r0, [sp, #12]
 800be66:	aa26      	add	r2, sp, #152	@ 0x98
 800be68:	4659      	mov	r1, fp
 800be6a:	f004 ff55 	bl	8010d18 <__ssprint_r>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f040 82b9 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800be74:	ac29      	add	r4, sp, #164	@ 0xa4
 800be76:	e545      	b.n	800b904 <_svfprintf_r+0x814>
 800be78:	9803      	ldr	r0, [sp, #12]
 800be7a:	aa26      	add	r2, sp, #152	@ 0x98
 800be7c:	4659      	mov	r1, fp
 800be7e:	f004 ff4b 	bl	8010d18 <__ssprint_r>
 800be82:	2800      	cmp	r0, #0
 800be84:	f040 82af 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800be88:	ac29      	add	r4, sp, #164	@ 0xa4
 800be8a:	e7be      	b.n	800be0a <_svfprintf_r+0xd1a>
 800be8c:	9803      	ldr	r0, [sp, #12]
 800be8e:	aa26      	add	r2, sp, #152	@ 0x98
 800be90:	4659      	mov	r1, fp
 800be92:	f004 ff41 	bl	8010d18 <__ssprint_r>
 800be96:	2800      	cmp	r0, #0
 800be98:	f040 82a5 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800be9c:	ac29      	add	r4, sp, #164	@ 0xa4
 800be9e:	e7c9      	b.n	800be34 <_svfprintf_r+0xd44>
 800bea0:	3210      	adds	r2, #16
 800bea2:	2b07      	cmp	r3, #7
 800bea4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800bea8:	f8c4 8004 	str.w	r8, [r4, #4]
 800beac:	dd08      	ble.n	800bec0 <_svfprintf_r+0xdd0>
 800beae:	9803      	ldr	r0, [sp, #12]
 800beb0:	aa26      	add	r2, sp, #152	@ 0x98
 800beb2:	4659      	mov	r1, fp
 800beb4:	f004 ff30 	bl	8010d18 <__ssprint_r>
 800beb8:	2800      	cmp	r0, #0
 800beba:	f040 8294 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bebe:	a929      	add	r1, sp, #164	@ 0xa4
 800bec0:	3e10      	subs	r6, #16
 800bec2:	460c      	mov	r4, r1
 800bec4:	e7be      	b.n	800be44 <_svfprintf_r+0xd54>
 800bec6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bec8:	2b00      	cmp	r3, #0
 800beca:	dc7d      	bgt.n	800bfc8 <_svfprintf_r+0xed8>
 800becc:	4b3c      	ldr	r3, [pc, #240]	@ (800bfc0 <_svfprintf_r+0xed0>)
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	2301      	movs	r3, #1
 800bed2:	6063      	str	r3, [r4, #4]
 800bed4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bed6:	3301      	adds	r3, #1
 800bed8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800beda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bedc:	3301      	adds	r3, #1
 800bede:	2b07      	cmp	r3, #7
 800bee0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bee2:	dc46      	bgt.n	800bf72 <_svfprintf_r+0xe82>
 800bee4:	3408      	adds	r4, #8
 800bee6:	9904      	ldr	r1, [sp, #16]
 800bee8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800beea:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800beec:	430b      	orrs	r3, r1
 800beee:	f005 0101 	and.w	r1, r5, #1
 800bef2:	430b      	orrs	r3, r1
 800bef4:	f43f ad06 	beq.w	800b904 <_svfprintf_r+0x814>
 800bef8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800befe:	6063      	str	r3, [r4, #4]
 800bf00:	441a      	add	r2, r3
 800bf02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bf04:	9228      	str	r2, [sp, #160]	@ 0xa0
 800bf06:	3301      	adds	r3, #1
 800bf08:	2b07      	cmp	r3, #7
 800bf0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bf0c:	dc3b      	bgt.n	800bf86 <_svfprintf_r+0xe96>
 800bf0e:	f104 0308 	add.w	r3, r4, #8
 800bf12:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bf14:	2e00      	cmp	r6, #0
 800bf16:	da1b      	bge.n	800bf50 <_svfprintf_r+0xe60>
 800bf18:	4f2a      	ldr	r7, [pc, #168]	@ (800bfc4 <_svfprintf_r+0xed4>)
 800bf1a:	4276      	negs	r6, r6
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	2410      	movs	r4, #16
 800bf20:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800bf24:	2e10      	cmp	r6, #16
 800bf26:	f101 0101 	add.w	r1, r1, #1
 800bf2a:	f103 0308 	add.w	r3, r3, #8
 800bf2e:	6017      	str	r7, [r2, #0]
 800bf30:	dc33      	bgt.n	800bf9a <_svfprintf_r+0xeaa>
 800bf32:	6056      	str	r6, [r2, #4]
 800bf34:	2907      	cmp	r1, #7
 800bf36:	4406      	add	r6, r0
 800bf38:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800bf3c:	dd08      	ble.n	800bf50 <_svfprintf_r+0xe60>
 800bf3e:	9803      	ldr	r0, [sp, #12]
 800bf40:	aa26      	add	r2, sp, #152	@ 0x98
 800bf42:	4659      	mov	r1, fp
 800bf44:	f004 fee8 	bl	8010d18 <__ssprint_r>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	f040 824c 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bf4e:	ab29      	add	r3, sp, #164	@ 0xa4
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	9904      	ldr	r1, [sp, #16]
 800bf54:	605a      	str	r2, [r3, #4]
 800bf56:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800bf58:	f8c3 9000 	str.w	r9, [r3]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	9228      	str	r2, [sp, #160]	@ 0xa0
 800bf60:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800bf62:	3201      	adds	r2, #1
 800bf64:	2a07      	cmp	r2, #7
 800bf66:	9227      	str	r2, [sp, #156]	@ 0x9c
 800bf68:	f73f af7c 	bgt.w	800be64 <_svfprintf_r+0xd74>
 800bf6c:	f103 0408 	add.w	r4, r3, #8
 800bf70:	e4c8      	b.n	800b904 <_svfprintf_r+0x814>
 800bf72:	9803      	ldr	r0, [sp, #12]
 800bf74:	aa26      	add	r2, sp, #152	@ 0x98
 800bf76:	4659      	mov	r1, fp
 800bf78:	f004 fece 	bl	8010d18 <__ssprint_r>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f040 8232 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bf82:	ac29      	add	r4, sp, #164	@ 0xa4
 800bf84:	e7af      	b.n	800bee6 <_svfprintf_r+0xdf6>
 800bf86:	9803      	ldr	r0, [sp, #12]
 800bf88:	aa26      	add	r2, sp, #152	@ 0x98
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	f004 fec4 	bl	8010d18 <__ssprint_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f040 8228 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bf96:	ab29      	add	r3, sp, #164	@ 0xa4
 800bf98:	e7bb      	b.n	800bf12 <_svfprintf_r+0xe22>
 800bf9a:	3010      	adds	r0, #16
 800bf9c:	2907      	cmp	r1, #7
 800bf9e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800bfa2:	6054      	str	r4, [r2, #4]
 800bfa4:	dd08      	ble.n	800bfb8 <_svfprintf_r+0xec8>
 800bfa6:	9803      	ldr	r0, [sp, #12]
 800bfa8:	aa26      	add	r2, sp, #152	@ 0x98
 800bfaa:	4659      	mov	r1, fp
 800bfac:	f004 feb4 	bl	8010d18 <__ssprint_r>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	f040 8218 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800bfb6:	ab29      	add	r3, sp, #164	@ 0xa4
 800bfb8:	3e10      	subs	r6, #16
 800bfba:	461a      	mov	r2, r3
 800bfbc:	e7b0      	b.n	800bf20 <_svfprintf_r+0xe30>
 800bfbe:	bf00      	nop
 800bfc0:	080132f6 	.word	0x080132f6
 800bfc4:	080132f8 	.word	0x080132f8
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	444b      	add	r3, r9
 800bfcc:	9306      	str	r3, [sp, #24]
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	42b3      	cmp	r3, r6
 800bfd2:	bfa8      	it	ge
 800bfd4:	4633      	movge	r3, r6
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	4698      	mov	r8, r3
 800bfda:	dd0b      	ble.n	800bff4 <_svfprintf_r+0xf04>
 800bfdc:	e9c4 9300 	strd	r9, r3, [r4]
 800bfe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfe2:	4443      	add	r3, r8
 800bfe4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800bfe6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bfe8:	3301      	adds	r3, #1
 800bfea:	2b07      	cmp	r3, #7
 800bfec:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bfee:	f300 8089 	bgt.w	800c104 <_svfprintf_r+0x1014>
 800bff2:	3408      	adds	r4, #8
 800bff4:	4643      	mov	r3, r8
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfac      	ite	ge
 800bffa:	eba6 0808 	subge.w	r8, r6, r8
 800bffe:	46b0      	movlt	r8, r6
 800c000:	f1b8 0f00 	cmp.w	r8, #0
 800c004:	dd1b      	ble.n	800c03e <_svfprintf_r+0xf4e>
 800c006:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800c00a:	4897      	ldr	r0, [pc, #604]	@ (800c268 <_svfprintf_r+0x1178>)
 800c00c:	6020      	str	r0, [r4, #0]
 800c00e:	f1b8 0f10 	cmp.w	r8, #16
 800c012:	f102 0201 	add.w	r2, r2, #1
 800c016:	f104 0108 	add.w	r1, r4, #8
 800c01a:	dc7d      	bgt.n	800c118 <_svfprintf_r+0x1028>
 800c01c:	4443      	add	r3, r8
 800c01e:	2a07      	cmp	r2, #7
 800c020:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c024:	f8c4 8004 	str.w	r8, [r4, #4]
 800c028:	f340 808a 	ble.w	800c140 <_svfprintf_r+0x1050>
 800c02c:	9803      	ldr	r0, [sp, #12]
 800c02e:	aa26      	add	r2, sp, #152	@ 0x98
 800c030:	4659      	mov	r1, fp
 800c032:	f004 fe71 	bl	8010d18 <__ssprint_r>
 800c036:	2800      	cmp	r0, #0
 800c038:	f040 81d5 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c03c:	ac29      	add	r4, sp, #164	@ 0xa4
 800c03e:	eb09 0806 	add.w	r8, r9, r6
 800c042:	056e      	lsls	r6, r5, #21
 800c044:	d508      	bpl.n	800c058 <_svfprintf_r+0xf68>
 800c046:	9b08      	ldr	r3, [sp, #32]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d17b      	bne.n	800c144 <_svfprintf_r+0x1054>
 800c04c:	2f00      	cmp	r7, #0
 800c04e:	d17b      	bne.n	800c148 <_svfprintf_r+0x1058>
 800c050:	9b06      	ldr	r3, [sp, #24]
 800c052:	4598      	cmp	r8, r3
 800c054:	bf28      	it	cs
 800c056:	4698      	movcs	r8, r3
 800c058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c05a:	9a04      	ldr	r2, [sp, #16]
 800c05c:	4293      	cmp	r3, r2
 800c05e:	db01      	blt.n	800c064 <_svfprintf_r+0xf74>
 800c060:	07e8      	lsls	r0, r5, #31
 800c062:	d50e      	bpl.n	800c082 <_svfprintf_r+0xf92>
 800c064:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c06a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c06c:	6063      	str	r3, [r4, #4]
 800c06e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c070:	4413      	add	r3, r2
 800c072:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c074:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c076:	3301      	adds	r3, #1
 800c078:	2b07      	cmp	r3, #7
 800c07a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c07c:	f300 80df 	bgt.w	800c23e <_svfprintf_r+0x114e>
 800c080:	3408      	adds	r4, #8
 800c082:	9b04      	ldr	r3, [sp, #16]
 800c084:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800c086:	1bdf      	subs	r7, r3, r7
 800c088:	9b06      	ldr	r3, [sp, #24]
 800c08a:	eba3 0308 	sub.w	r3, r3, r8
 800c08e:	429f      	cmp	r7, r3
 800c090:	bfa8      	it	ge
 800c092:	461f      	movge	r7, r3
 800c094:	2f00      	cmp	r7, #0
 800c096:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c098:	dd0a      	ble.n	800c0b0 <_svfprintf_r+0xfc0>
 800c09a:	443b      	add	r3, r7
 800c09c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c09e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	2b07      	cmp	r3, #7
 800c0a4:	e9c4 8700 	strd	r8, r7, [r4]
 800c0a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c0aa:	f300 80d2 	bgt.w	800c252 <_svfprintf_r+0x1162>
 800c0ae:	3408      	adds	r4, #8
 800c0b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c0b2:	9b04      	ldr	r3, [sp, #16]
 800c0b4:	2f00      	cmp	r7, #0
 800c0b6:	eba3 0606 	sub.w	r6, r3, r6
 800c0ba:	bfa8      	it	ge
 800c0bc:	1bf6      	subge	r6, r6, r7
 800c0be:	2e00      	cmp	r6, #0
 800c0c0:	f77f ac20 	ble.w	800b904 <_svfprintf_r+0x814>
 800c0c4:	4f68      	ldr	r7, [pc, #416]	@ (800c268 <_svfprintf_r+0x1178>)
 800c0c6:	f04f 0810 	mov.w	r8, #16
 800c0ca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c0ce:	2e10      	cmp	r6, #16
 800c0d0:	f103 0301 	add.w	r3, r3, #1
 800c0d4:	f104 0108 	add.w	r1, r4, #8
 800c0d8:	6027      	str	r7, [r4, #0]
 800c0da:	f77f aebc 	ble.w	800be56 <_svfprintf_r+0xd66>
 800c0de:	3210      	adds	r2, #16
 800c0e0:	2b07      	cmp	r3, #7
 800c0e2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c0e6:	f8c4 8004 	str.w	r8, [r4, #4]
 800c0ea:	dd08      	ble.n	800c0fe <_svfprintf_r+0x100e>
 800c0ec:	9803      	ldr	r0, [sp, #12]
 800c0ee:	aa26      	add	r2, sp, #152	@ 0x98
 800c0f0:	4659      	mov	r1, fp
 800c0f2:	f004 fe11 	bl	8010d18 <__ssprint_r>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f040 8175 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c0fc:	a929      	add	r1, sp, #164	@ 0xa4
 800c0fe:	3e10      	subs	r6, #16
 800c100:	460c      	mov	r4, r1
 800c102:	e7e2      	b.n	800c0ca <_svfprintf_r+0xfda>
 800c104:	9803      	ldr	r0, [sp, #12]
 800c106:	aa26      	add	r2, sp, #152	@ 0x98
 800c108:	4659      	mov	r1, fp
 800c10a:	f004 fe05 	bl	8010d18 <__ssprint_r>
 800c10e:	2800      	cmp	r0, #0
 800c110:	f040 8169 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c114:	ac29      	add	r4, sp, #164	@ 0xa4
 800c116:	e76d      	b.n	800bff4 <_svfprintf_r+0xf04>
 800c118:	2010      	movs	r0, #16
 800c11a:	4403      	add	r3, r0
 800c11c:	2a07      	cmp	r2, #7
 800c11e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c122:	6060      	str	r0, [r4, #4]
 800c124:	dd08      	ble.n	800c138 <_svfprintf_r+0x1048>
 800c126:	9803      	ldr	r0, [sp, #12]
 800c128:	aa26      	add	r2, sp, #152	@ 0x98
 800c12a:	4659      	mov	r1, fp
 800c12c:	f004 fdf4 	bl	8010d18 <__ssprint_r>
 800c130:	2800      	cmp	r0, #0
 800c132:	f040 8158 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c136:	a929      	add	r1, sp, #164	@ 0xa4
 800c138:	f1a8 0810 	sub.w	r8, r8, #16
 800c13c:	460c      	mov	r4, r1
 800c13e:	e762      	b.n	800c006 <_svfprintf_r+0xf16>
 800c140:	460c      	mov	r4, r1
 800c142:	e77c      	b.n	800c03e <_svfprintf_r+0xf4e>
 800c144:	2f00      	cmp	r7, #0
 800c146:	d04a      	beq.n	800c1de <_svfprintf_r+0x10ee>
 800c148:	3f01      	subs	r7, #1
 800c14a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c150:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c152:	6063      	str	r3, [r4, #4]
 800c154:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c156:	4413      	add	r3, r2
 800c158:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c15a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c15c:	3301      	adds	r3, #1
 800c15e:	2b07      	cmp	r3, #7
 800c160:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c162:	dc43      	bgt.n	800c1ec <_svfprintf_r+0x10fc>
 800c164:	3408      	adds	r4, #8
 800c166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c168:	781a      	ldrb	r2, [r3, #0]
 800c16a:	9b06      	ldr	r3, [sp, #24]
 800c16c:	eba3 0308 	sub.w	r3, r3, r8
 800c170:	429a      	cmp	r2, r3
 800c172:	bfa8      	it	ge
 800c174:	461a      	movge	r2, r3
 800c176:	2a00      	cmp	r2, #0
 800c178:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c17a:	4691      	mov	r9, r2
 800c17c:	dd09      	ble.n	800c192 <_svfprintf_r+0x10a2>
 800c17e:	4413      	add	r3, r2
 800c180:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c182:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c184:	3301      	adds	r3, #1
 800c186:	2b07      	cmp	r3, #7
 800c188:	e9c4 8200 	strd	r8, r2, [r4]
 800c18c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c18e:	dc37      	bgt.n	800c200 <_svfprintf_r+0x1110>
 800c190:	3408      	adds	r4, #8
 800c192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c194:	781e      	ldrb	r6, [r3, #0]
 800c196:	f1b9 0f00 	cmp.w	r9, #0
 800c19a:	bfa8      	it	ge
 800c19c:	eba6 0609 	subge.w	r6, r6, r9
 800c1a0:	2e00      	cmp	r6, #0
 800c1a2:	dd18      	ble.n	800c1d6 <_svfprintf_r+0x10e6>
 800c1a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c1a8:	482f      	ldr	r0, [pc, #188]	@ (800c268 <_svfprintf_r+0x1178>)
 800c1aa:	6020      	str	r0, [r4, #0]
 800c1ac:	2e10      	cmp	r6, #16
 800c1ae:	f103 0301 	add.w	r3, r3, #1
 800c1b2:	f104 0108 	add.w	r1, r4, #8
 800c1b6:	dc2d      	bgt.n	800c214 <_svfprintf_r+0x1124>
 800c1b8:	6066      	str	r6, [r4, #4]
 800c1ba:	2b07      	cmp	r3, #7
 800c1bc:	4416      	add	r6, r2
 800c1be:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800c1c2:	dd3a      	ble.n	800c23a <_svfprintf_r+0x114a>
 800c1c4:	9803      	ldr	r0, [sp, #12]
 800c1c6:	aa26      	add	r2, sp, #152	@ 0x98
 800c1c8:	4659      	mov	r1, fp
 800c1ca:	f004 fda5 	bl	8010d18 <__ssprint_r>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f040 8109 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c1d4:	ac29      	add	r4, sp, #164	@ 0xa4
 800c1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	4498      	add	r8, r3
 800c1dc:	e733      	b.n	800c046 <_svfprintf_r+0xf56>
 800c1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1e4:	9b08      	ldr	r3, [sp, #32]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	9308      	str	r3, [sp, #32]
 800c1ea:	e7ae      	b.n	800c14a <_svfprintf_r+0x105a>
 800c1ec:	9803      	ldr	r0, [sp, #12]
 800c1ee:	aa26      	add	r2, sp, #152	@ 0x98
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	f004 fd91 	bl	8010d18 <__ssprint_r>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f040 80f5 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c1fc:	ac29      	add	r4, sp, #164	@ 0xa4
 800c1fe:	e7b2      	b.n	800c166 <_svfprintf_r+0x1076>
 800c200:	9803      	ldr	r0, [sp, #12]
 800c202:	aa26      	add	r2, sp, #152	@ 0x98
 800c204:	4659      	mov	r1, fp
 800c206:	f004 fd87 	bl	8010d18 <__ssprint_r>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f040 80eb 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c210:	ac29      	add	r4, sp, #164	@ 0xa4
 800c212:	e7be      	b.n	800c192 <_svfprintf_r+0x10a2>
 800c214:	2010      	movs	r0, #16
 800c216:	4402      	add	r2, r0
 800c218:	2b07      	cmp	r3, #7
 800c21a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c21e:	6060      	str	r0, [r4, #4]
 800c220:	dd08      	ble.n	800c234 <_svfprintf_r+0x1144>
 800c222:	9803      	ldr	r0, [sp, #12]
 800c224:	aa26      	add	r2, sp, #152	@ 0x98
 800c226:	4659      	mov	r1, fp
 800c228:	f004 fd76 	bl	8010d18 <__ssprint_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f040 80da 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c232:	a929      	add	r1, sp, #164	@ 0xa4
 800c234:	3e10      	subs	r6, #16
 800c236:	460c      	mov	r4, r1
 800c238:	e7b4      	b.n	800c1a4 <_svfprintf_r+0x10b4>
 800c23a:	460c      	mov	r4, r1
 800c23c:	e7cb      	b.n	800c1d6 <_svfprintf_r+0x10e6>
 800c23e:	9803      	ldr	r0, [sp, #12]
 800c240:	aa26      	add	r2, sp, #152	@ 0x98
 800c242:	4659      	mov	r1, fp
 800c244:	f004 fd68 	bl	8010d18 <__ssprint_r>
 800c248:	2800      	cmp	r0, #0
 800c24a:	f040 80cc 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c24e:	ac29      	add	r4, sp, #164	@ 0xa4
 800c250:	e717      	b.n	800c082 <_svfprintf_r+0xf92>
 800c252:	9803      	ldr	r0, [sp, #12]
 800c254:	aa26      	add	r2, sp, #152	@ 0x98
 800c256:	4659      	mov	r1, fp
 800c258:	f004 fd5e 	bl	8010d18 <__ssprint_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	f040 80c2 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c262:	ac29      	add	r4, sp, #164	@ 0xa4
 800c264:	e724      	b.n	800c0b0 <_svfprintf_r+0xfc0>
 800c266:	bf00      	nop
 800c268:	080132f8 	.word	0x080132f8
 800c26c:	9904      	ldr	r1, [sp, #16]
 800c26e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c270:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800c272:	2901      	cmp	r1, #1
 800c274:	f103 0301 	add.w	r3, r3, #1
 800c278:	f102 0201 	add.w	r2, r2, #1
 800c27c:	f104 0608 	add.w	r6, r4, #8
 800c280:	dc02      	bgt.n	800c288 <_svfprintf_r+0x1198>
 800c282:	07e9      	lsls	r1, r5, #31
 800c284:	f140 8083 	bpl.w	800c38e <_svfprintf_r+0x129e>
 800c288:	2101      	movs	r1, #1
 800c28a:	2a07      	cmp	r2, #7
 800c28c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c290:	f8c4 9000 	str.w	r9, [r4]
 800c294:	6061      	str	r1, [r4, #4]
 800c296:	dd08      	ble.n	800c2aa <_svfprintf_r+0x11ba>
 800c298:	9803      	ldr	r0, [sp, #12]
 800c29a:	aa26      	add	r2, sp, #152	@ 0x98
 800c29c:	4659      	mov	r1, fp
 800c29e:	f004 fd3b 	bl	8010d18 <__ssprint_r>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f040 809f 	bne.w	800c3e6 <_svfprintf_r+0x12f6>
 800c2a8:	ae29      	add	r6, sp, #164	@ 0xa4
 800c2aa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2ac:	6033      	str	r3, [r6, #0]
 800c2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2b2:	6073      	str	r3, [r6, #4]
 800c2b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c2b6:	4413      	add	r3, r2
 800c2b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c2ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c2bc:	3301      	adds	r3, #1
 800c2be:	2b07      	cmp	r3, #7
 800c2c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c2c2:	dc33      	bgt.n	800c32c <_svfprintf_r+0x123c>
 800c2c4:	3608      	adds	r6, #8
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2cc:	1e5c      	subs	r4, r3, #1
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800c2d6:	f7f4 fc1f 	bl	8000b18 <__aeabi_dcmpeq>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d12f      	bne.n	800c33e <_svfprintf_r+0x124e>
 800c2de:	f109 0201 	add.w	r2, r9, #1
 800c2e2:	e9c6 2400 	strd	r2, r4, [r6]
 800c2e6:	9a04      	ldr	r2, [sp, #16]
 800c2e8:	f108 0301 	add.w	r3, r8, #1
 800c2ec:	3f01      	subs	r7, #1
 800c2ee:	4417      	add	r7, r2
 800c2f0:	2b07      	cmp	r3, #7
 800c2f2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800c2f6:	dd53      	ble.n	800c3a0 <_svfprintf_r+0x12b0>
 800c2f8:	9803      	ldr	r0, [sp, #12]
 800c2fa:	aa26      	add	r2, sp, #152	@ 0x98
 800c2fc:	4659      	mov	r1, fp
 800c2fe:	f004 fd0b 	bl	8010d18 <__ssprint_r>
 800c302:	2800      	cmp	r0, #0
 800c304:	d16f      	bne.n	800c3e6 <_svfprintf_r+0x12f6>
 800c306:	ae29      	add	r6, sp, #164	@ 0xa4
 800c308:	ab22      	add	r3, sp, #136	@ 0x88
 800c30a:	6033      	str	r3, [r6, #0]
 800c30c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c30e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c310:	6073      	str	r3, [r6, #4]
 800c312:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c314:	4413      	add	r3, r2
 800c316:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c318:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c31a:	3301      	adds	r3, #1
 800c31c:	2b07      	cmp	r3, #7
 800c31e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c320:	f73f ada0 	bgt.w	800be64 <_svfprintf_r+0xd74>
 800c324:	f106 0408 	add.w	r4, r6, #8
 800c328:	f7ff baec 	b.w	800b904 <_svfprintf_r+0x814>
 800c32c:	9803      	ldr	r0, [sp, #12]
 800c32e:	aa26      	add	r2, sp, #152	@ 0x98
 800c330:	4659      	mov	r1, fp
 800c332:	f004 fcf1 	bl	8010d18 <__ssprint_r>
 800c336:	2800      	cmp	r0, #0
 800c338:	d155      	bne.n	800c3e6 <_svfprintf_r+0x12f6>
 800c33a:	ae29      	add	r6, sp, #164	@ 0xa4
 800c33c:	e7c3      	b.n	800c2c6 <_svfprintf_r+0x11d6>
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	2b01      	cmp	r3, #1
 800c342:	dde1      	ble.n	800c308 <_svfprintf_r+0x1218>
 800c344:	4f57      	ldr	r7, [pc, #348]	@ (800c4a4 <_svfprintf_r+0x13b4>)
 800c346:	f04f 0810 	mov.w	r8, #16
 800c34a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c34e:	2c10      	cmp	r4, #16
 800c350:	f103 0301 	add.w	r3, r3, #1
 800c354:	f106 0108 	add.w	r1, r6, #8
 800c358:	6037      	str	r7, [r6, #0]
 800c35a:	dc07      	bgt.n	800c36c <_svfprintf_r+0x127c>
 800c35c:	6074      	str	r4, [r6, #4]
 800c35e:	2b07      	cmp	r3, #7
 800c360:	4414      	add	r4, r2
 800c362:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800c366:	dcc7      	bgt.n	800c2f8 <_svfprintf_r+0x1208>
 800c368:	460e      	mov	r6, r1
 800c36a:	e7cd      	b.n	800c308 <_svfprintf_r+0x1218>
 800c36c:	3210      	adds	r2, #16
 800c36e:	2b07      	cmp	r3, #7
 800c370:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c374:	f8c6 8004 	str.w	r8, [r6, #4]
 800c378:	dd06      	ble.n	800c388 <_svfprintf_r+0x1298>
 800c37a:	9803      	ldr	r0, [sp, #12]
 800c37c:	aa26      	add	r2, sp, #152	@ 0x98
 800c37e:	4659      	mov	r1, fp
 800c380:	f004 fcca 	bl	8010d18 <__ssprint_r>
 800c384:	bb78      	cbnz	r0, 800c3e6 <_svfprintf_r+0x12f6>
 800c386:	a929      	add	r1, sp, #164	@ 0xa4
 800c388:	3c10      	subs	r4, #16
 800c38a:	460e      	mov	r6, r1
 800c38c:	e7dd      	b.n	800c34a <_svfprintf_r+0x125a>
 800c38e:	2101      	movs	r1, #1
 800c390:	2a07      	cmp	r2, #7
 800c392:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c396:	f8c4 9000 	str.w	r9, [r4]
 800c39a:	6061      	str	r1, [r4, #4]
 800c39c:	ddb4      	ble.n	800c308 <_svfprintf_r+0x1218>
 800c39e:	e7ab      	b.n	800c2f8 <_svfprintf_r+0x1208>
 800c3a0:	3608      	adds	r6, #8
 800c3a2:	e7b1      	b.n	800c308 <_svfprintf_r+0x1218>
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	f7ff baad 	b.w	800b904 <_svfprintf_r+0x814>
 800c3aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c3ae:	1a9d      	subs	r5, r3, r2
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	f77f aaaa 	ble.w	800b90a <_svfprintf_r+0x81a>
 800c3b6:	4e3c      	ldr	r6, [pc, #240]	@ (800c4a8 <_svfprintf_r+0x13b8>)
 800c3b8:	2710      	movs	r7, #16
 800c3ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c3be:	2d10      	cmp	r5, #16
 800c3c0:	f103 0301 	add.w	r3, r3, #1
 800c3c4:	6026      	str	r6, [r4, #0]
 800c3c6:	dc18      	bgt.n	800c3fa <_svfprintf_r+0x130a>
 800c3c8:	442a      	add	r2, r5
 800c3ca:	2b07      	cmp	r3, #7
 800c3cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c3d0:	6065      	str	r5, [r4, #4]
 800c3d2:	f77f aa9a 	ble.w	800b90a <_svfprintf_r+0x81a>
 800c3d6:	9803      	ldr	r0, [sp, #12]
 800c3d8:	aa26      	add	r2, sp, #152	@ 0x98
 800c3da:	4659      	mov	r1, fp
 800c3dc:	f004 fc9c 	bl	8010d18 <__ssprint_r>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	f43f aa92 	beq.w	800b90a <_svfprintf_r+0x81a>
 800c3e6:	f1ba 0f00 	cmp.w	sl, #0
 800c3ea:	f43f a89a 	beq.w	800b522 <_svfprintf_r+0x432>
 800c3ee:	9803      	ldr	r0, [sp, #12]
 800c3f0:	4651      	mov	r1, sl
 800c3f2:	f7fe fdbb 	bl	800af6c <_free_r>
 800c3f6:	f7ff b894 	b.w	800b522 <_svfprintf_r+0x432>
 800c3fa:	3210      	adds	r2, #16
 800c3fc:	2b07      	cmp	r3, #7
 800c3fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c402:	6067      	str	r7, [r4, #4]
 800c404:	dc02      	bgt.n	800c40c <_svfprintf_r+0x131c>
 800c406:	3408      	adds	r4, #8
 800c408:	3d10      	subs	r5, #16
 800c40a:	e7d6      	b.n	800c3ba <_svfprintf_r+0x12ca>
 800c40c:	9803      	ldr	r0, [sp, #12]
 800c40e:	aa26      	add	r2, sp, #152	@ 0x98
 800c410:	4659      	mov	r1, fp
 800c412:	f004 fc81 	bl	8010d18 <__ssprint_r>
 800c416:	2800      	cmp	r0, #0
 800c418:	d1e5      	bne.n	800c3e6 <_svfprintf_r+0x12f6>
 800c41a:	ac29      	add	r4, sp, #164	@ 0xa4
 800c41c:	e7f4      	b.n	800c408 <_svfprintf_r+0x1318>
 800c41e:	9803      	ldr	r0, [sp, #12]
 800c420:	4651      	mov	r1, sl
 800c422:	f7fe fda3 	bl	800af6c <_free_r>
 800c426:	f7ff ba88 	b.w	800b93a <_svfprintf_r+0x84a>
 800c42a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f43f a878 	beq.w	800b522 <_svfprintf_r+0x432>
 800c432:	9803      	ldr	r0, [sp, #12]
 800c434:	aa26      	add	r2, sp, #152	@ 0x98
 800c436:	4659      	mov	r1, fp
 800c438:	f004 fc6e 	bl	8010d18 <__ssprint_r>
 800c43c:	f7ff b871 	b.w	800b522 <_svfprintf_r+0x432>
 800c440:	ea56 0207 	orrs.w	r2, r6, r7
 800c444:	9508      	str	r5, [sp, #32]
 800c446:	f43f ab7a 	beq.w	800bb3e <_svfprintf_r+0xa4e>
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	f43f abfb 	beq.w	800bc46 <_svfprintf_r+0xb56>
 800c450:	2b02      	cmp	r3, #2
 800c452:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800c456:	f43f ac3f 	beq.w	800bcd8 <_svfprintf_r+0xbe8>
 800c45a:	f006 0307 	and.w	r3, r6, #7
 800c45e:	08f6      	lsrs	r6, r6, #3
 800c460:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800c464:	08ff      	lsrs	r7, r7, #3
 800c466:	3330      	adds	r3, #48	@ 0x30
 800c468:	ea56 0107 	orrs.w	r1, r6, r7
 800c46c:	464a      	mov	r2, r9
 800c46e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c472:	d1f2      	bne.n	800c45a <_svfprintf_r+0x136a>
 800c474:	9908      	ldr	r1, [sp, #32]
 800c476:	07c8      	lsls	r0, r1, #31
 800c478:	d506      	bpl.n	800c488 <_svfprintf_r+0x1398>
 800c47a:	2b30      	cmp	r3, #48	@ 0x30
 800c47c:	d004      	beq.n	800c488 <_svfprintf_r+0x1398>
 800c47e:	2330      	movs	r3, #48	@ 0x30
 800c480:	f809 3c01 	strb.w	r3, [r9, #-1]
 800c484:	f1a2 0902 	sub.w	r9, r2, #2
 800c488:	ab52      	add	r3, sp, #328	@ 0x148
 800c48a:	9d08      	ldr	r5, [sp, #32]
 800c48c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800c490:	f04f 0a00 	mov.w	sl, #0
 800c494:	eba3 0809 	sub.w	r8, r3, r9
 800c498:	4657      	mov	r7, sl
 800c49a:	f8cd a020 	str.w	sl, [sp, #32]
 800c49e:	4656      	mov	r6, sl
 800c4a0:	f7ff b97c 	b.w	800b79c <_svfprintf_r+0x6ac>
 800c4a4:	080132f8 	.word	0x080132f8
 800c4a8:	08013308 	.word	0x08013308

0800c4ac <__svfscanf_r>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800c4b4:	461d      	mov	r5, r3
 800c4b6:	af02      	add	r7, sp, #8
 800c4b8:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800c4ba:	617a      	str	r2, [r7, #20]
 800c4bc:	07da      	lsls	r2, r3, #31
 800c4be:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	d405      	bmi.n	800c4d0 <__svfscanf_r+0x24>
 800c4c4:	898b      	ldrh	r3, [r1, #12]
 800c4c6:	059b      	lsls	r3, r3, #22
 800c4c8:	d402      	bmi.n	800c4d0 <__svfscanf_r+0x24>
 800c4ca:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800c4cc:	f7fe fcda 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800c4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d4:	049e      	lsls	r6, r3, #18
 800c4d6:	d406      	bmi.n	800c4e6 <__svfscanf_r+0x3a>
 800c4d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c4dc:	81a3      	strh	r3, [r4, #12]
 800c4de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4e4:	6663      	str	r3, [r4, #100]	@ 0x64
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800c4ec:	61bb      	str	r3, [r7, #24]
 800c4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4f4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800c4f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 80d3 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800c504:	4a8e      	ldr	r2, [pc, #568]	@ (800c740 <__svfscanf_r+0x294>)
 800c506:	5cd6      	ldrb	r6, [r2, r3]
 800c508:	f016 0608 	ands.w	r6, r6, #8
 800c50c:	d01b      	beq.n	800c546 <__svfscanf_r+0x9a>
 800c50e:	6863      	ldr	r3, [r4, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	dd08      	ble.n	800c526 <__svfscanf_r+0x7a>
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	498a      	ldr	r1, [pc, #552]	@ (800c740 <__svfscanf_r+0x294>)
 800c518:	781a      	ldrb	r2, [r3, #0]
 800c51a:	5c8a      	ldrb	r2, [r1, r2]
 800c51c:	0710      	lsls	r0, r2, #28
 800c51e:	d409      	bmi.n	800c534 <__svfscanf_r+0x88>
 800c520:	f8c7 8014 	str.w	r8, [r7, #20]
 800c524:	e7e6      	b.n	800c4f4 <__svfscanf_r+0x48>
 800c526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c528:	4621      	mov	r1, r4
 800c52a:	f001 fc7f 	bl	800de2c <__srefill_r>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d0f0      	beq.n	800c514 <__svfscanf_r+0x68>
 800c532:	e7f5      	b.n	800c520 <__svfscanf_r+0x74>
 800c534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c536:	3201      	adds	r2, #1
 800c538:	633a      	str	r2, [r7, #48]	@ 0x30
 800c53a:	6862      	ldr	r2, [r4, #4]
 800c53c:	3301      	adds	r3, #1
 800c53e:	3a01      	subs	r2, #1
 800c540:	6062      	str	r2, [r4, #4]
 800c542:	6023      	str	r3, [r4, #0]
 800c544:	e7e3      	b.n	800c50e <__svfscanf_r+0x62>
 800c546:	2b25      	cmp	r3, #37	@ 0x25
 800c548:	d163      	bne.n	800c612 <__svfscanf_r+0x166>
 800c54a:	62fe      	str	r6, [r7, #44]	@ 0x2c
 800c54c:	4642      	mov	r2, r8
 800c54e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c552:	617a      	str	r2, [r7, #20]
 800c554:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 800c558:	2a55      	cmp	r2, #85	@ 0x55
 800c55a:	f200 80a6 	bhi.w	800c6aa <__svfscanf_r+0x1fe>
 800c55e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c562:	0056      	.short	0x0056
 800c564:	00a400a4 	.word	0x00a400a4
 800c568:	00a400a4 	.word	0x00a400a4
 800c56c:	00a4007d 	.word	0x00a4007d
 800c570:	00a400a4 	.word	0x00a400a4
 800c574:	00a400a4 	.word	0x00a400a4
 800c578:	00ce00ce 	.word	0x00ce00ce
 800c57c:	00ce00ce 	.word	0x00ce00ce
 800c580:	00ce00ce 	.word	0x00ce00ce
 800c584:	00ce00ce 	.word	0x00ce00ce
 800c588:	00ce00ce 	.word	0x00ce00ce
 800c58c:	00a400a4 	.word	0x00a400a4
 800c590:	00a400a4 	.word	0x00a400a4
 800c594:	00a400a4 	.word	0x00a400a4
 800c598:	00f500a4 	.word	0x00f500a4
 800c59c:	011f00a4 	.word	0x011f00a4
 800c5a0:	00f500d8 	.word	0x00f500d8
 800c5a4:	00f500f5 	.word	0x00f500f5
 800c5a8:	00a400a4 	.word	0x00a400a4
 800c5ac:	00a400a4 	.word	0x00a400a4
 800c5b0:	00a400a2 	.word	0x00a400a2
 800c5b4:	00dc00a4 	.word	0x00dc00a4
 800c5b8:	00a400a4 	.word	0x00a400a4
 800c5bc:	010f00a4 	.word	0x010f00a4
 800c5c0:	00a400a4 	.word	0x00a400a4
 800c5c4:	00a400a4 	.word	0x00a400a4
 800c5c8:	00a400e9 	.word	0x00a400e9
 800c5cc:	011400a4 	.word	0x011400a4
 800c5d0:	00a400a4 	.word	0x00a400a4
 800c5d4:	00a400a4 	.word	0x00a400a4
 800c5d8:	00f500a4 	.word	0x00f500a4
 800c5dc:	012100a4 	.word	0x012100a4
 800c5e0:	00f500da 	.word	0x00f500da
 800c5e4:	00f500f5 	.word	0x00f500f5
 800c5e8:	01450094 	.word	0x01450094
 800c5ec:	00a400a2 	.word	0x00a400a2
 800c5f0:	00c10085 	.word	0x00c10085
 800c5f4:	00de0129 	.word	0x00de0129
 800c5f8:	00a40126 	.word	0x00a40126
 800c5fc:	011100a4 	.word	0x011100a4
 800c600:	00e500be 	.word	0x00e500be
 800c604:	00a400a4 	.word	0x00a400a4
 800c608:	00a400e9 	.word	0x00a400e9
 800c60c:	00be      	.short	0x00be
 800c60e:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd0e      	ble.n	800c636 <__svfscanf_r+0x18a>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c61e:	7819      	ldrb	r1, [r3, #0]
 800c620:	4291      	cmp	r1, r2
 800c622:	d142      	bne.n	800c6aa <__svfscanf_r+0x1fe>
 800c624:	3301      	adds	r3, #1
 800c626:	6862      	ldr	r2, [r4, #4]
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62c:	3a01      	subs	r2, #1
 800c62e:	3301      	adds	r3, #1
 800c630:	6062      	str	r2, [r4, #4]
 800c632:	633b      	str	r3, [r7, #48]	@ 0x30
 800c634:	e774      	b.n	800c520 <__svfscanf_r+0x74>
 800c636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c638:	4621      	mov	r1, r4
 800c63a:	f001 fbf7 	bl	800de2c <__srefill_r>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d0ea      	beq.n	800c618 <__svfscanf_r+0x16c>
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 810a 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800c650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c652:	bf18      	it	ne
 800c654:	f04f 33ff 	movne.w	r3, #4294967295
 800c658:	627b      	str	r3, [r7, #36]	@ 0x24
 800c65a:	e026      	b.n	800c6aa <__svfscanf_r+0x1fe>
 800c65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65e:	4333      	orrs	r3, r6
 800c660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c662:	d122      	bne.n	800c6aa <__svfscanf_r+0x1fe>
 800c664:	2610      	movs	r6, #16
 800c666:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800c66a:	e76f      	b.n	800c54c <__svfscanf_r+0xa0>
 800c66c:	0731      	lsls	r1, r6, #28
 800c66e:	d11c      	bne.n	800c6aa <__svfscanf_r+0x1fe>
 800c670:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c674:	2b6c      	cmp	r3, #108	@ 0x6c
 800c676:	d105      	bne.n	800c684 <__svfscanf_r+0x1d8>
 800c678:	f108 0302 	add.w	r3, r8, #2
 800c67c:	617b      	str	r3, [r7, #20]
 800c67e:	f046 0602 	orr.w	r6, r6, #2
 800c682:	e7f0      	b.n	800c666 <__svfscanf_r+0x1ba>
 800c684:	f046 0601 	orr.w	r6, r6, #1
 800c688:	e7ed      	b.n	800c666 <__svfscanf_r+0x1ba>
 800c68a:	0732      	lsls	r2, r6, #28
 800c68c:	d10d      	bne.n	800c6aa <__svfscanf_r+0x1fe>
 800c68e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c692:	2b68      	cmp	r3, #104	@ 0x68
 800c694:	bf03      	ittte	eq
 800c696:	f108 0302 	addeq.w	r3, r8, #2
 800c69a:	617b      	streq	r3, [r7, #20]
 800c69c:	f046 0608 	orreq.w	r6, r6, #8
 800c6a0:	f046 0604 	orrne.w	r6, r6, #4
 800c6a4:	e7df      	b.n	800c666 <__svfscanf_r+0x1ba>
 800c6a6:	0733      	lsls	r3, r6, #28
 800c6a8:	d0e9      	beq.n	800c67e <__svfscanf_r+0x1d2>
 800c6aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6ac:	07da      	lsls	r2, r3, #31
 800c6ae:	d405      	bmi.n	800c6bc <__svfscanf_r+0x210>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	059b      	lsls	r3, r3, #22
 800c6b4:	d402      	bmi.n	800c6bc <__svfscanf_r+0x210>
 800c6b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6b8:	f7fe fbe5 	bl	800ae86 <__retarget_lock_release_recursive>
 800c6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6be:	b143      	cbz	r3, 800c6d2 <__svfscanf_r+0x226>
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	f001 8067 	beq.w	800d796 <__svfscanf_r+0x12ea>
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ca:	6818      	ldr	r0, [r3, #0]
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f041 8065 	bne.w	800d79c <__svfscanf_r+0x12f0>
 800c6d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6d4:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6de:	0730      	lsls	r0, r6, #28
 800c6e0:	d0c1      	beq.n	800c666 <__svfscanf_r+0x1ba>
 800c6e2:	e7e2      	b.n	800c6aa <__svfscanf_r+0x1fe>
 800c6e4:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 800c6e8:	d1df      	bne.n	800c6aa <__svfscanf_r+0x1fe>
 800c6ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6ec:	b922      	cbnz	r2, 800c6f8 <__svfscanf_r+0x24c>
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	aa02      	add	r2, sp, #8
 800c6f2:	e9c2 3300 	strd	r3, r3, [r2]
 800c6f6:	637a      	str	r2, [r7, #52]	@ 0x34
 800c6f8:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 800c6fc:	e7b3      	b.n	800c666 <__svfscanf_r+0x1ba>
 800c6fe:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 800c702:	d1d2      	bne.n	800c6aa <__svfscanf_r+0x1fe>
 800c704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c706:	220a      	movs	r2, #10
 800c708:	fb02 3301 	mla	r3, r2, r1, r3
 800c70c:	3b30      	subs	r3, #48	@ 0x30
 800c70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c710:	e7a9      	b.n	800c666 <__svfscanf_r+0x1ba>
 800c712:	f046 0601 	orr.w	r6, r6, #1
 800c716:	4b0b      	ldr	r3, [pc, #44]	@ (800c744 <__svfscanf_r+0x298>)
 800c718:	e009      	b.n	800c72e <__svfscanf_r+0x282>
 800c71a:	f046 0601 	orr.w	r6, r6, #1
 800c71e:	4b0a      	ldr	r3, [pc, #40]	@ (800c748 <__svfscanf_r+0x29c>)
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	2308      	movs	r3, #8
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	f04f 0803 	mov.w	r8, #3
 800c72a:	e011      	b.n	800c750 <__svfscanf_r+0x2a4>
 800c72c:	4b06      	ldr	r3, [pc, #24]	@ (800c748 <__svfscanf_r+0x29c>)
 800c72e:	61bb      	str	r3, [r7, #24]
 800c730:	230a      	movs	r3, #10
 800c732:	e7f7      	b.n	800c724 <__svfscanf_r+0x278>
 800c734:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 800c738:	4b03      	ldr	r3, [pc, #12]	@ (800c748 <__svfscanf_r+0x29c>)
 800c73a:	61bb      	str	r3, [r7, #24]
 800c73c:	2310      	movs	r3, #16
 800c73e:	e7f1      	b.n	800c724 <__svfscanf_r+0x278>
 800c740:	08013569 	.word	0x08013569
 800c744:	08010979 	.word	0x08010979
 800c748:	08010a59 	.word	0x08010a59
 800c74c:	f04f 0804 	mov.w	r8, #4
 800c750:	6863      	ldr	r3, [r4, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	dd4e      	ble.n	800c7f4 <__svfscanf_r+0x348>
 800c756:	0673      	lsls	r3, r6, #25
 800c758:	d407      	bmi.n	800c76a <__svfscanf_r+0x2be>
 800c75a:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 800ca34 <__svfscanf_r+0x588>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	781a      	ldrb	r2, [r3, #0]
 800c762:	f819 2002 	ldrb.w	r2, [r9, r2]
 800c766:	0710      	lsls	r0, r2, #28
 800c768:	d44b      	bmi.n	800c802 <__svfscanf_r+0x356>
 800c76a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c76e:	f1b8 0f03 	cmp.w	r8, #3
 800c772:	d858      	bhi.n	800c826 <__svfscanf_r+0x37a>
 800c774:	e8df f018 	tbh	[pc, r8, lsl #1]
 800c778:	036a01af 	.word	0x036a01af
 800c77c:	05e50506 	.word	0x05e50506
 800c780:	f046 0601 	orr.w	r6, r6, #1
 800c784:	f04f 0802 	mov.w	r8, #2
 800c788:	e7e2      	b.n	800c750 <__svfscanf_r+0x2a4>
 800c78a:	6979      	ldr	r1, [r7, #20]
 800c78c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800c790:	f001 fbca 	bl	800df28 <__sccl>
 800c794:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 800c798:	6178      	str	r0, [r7, #20]
 800c79a:	f04f 0801 	mov.w	r8, #1
 800c79e:	e7d7      	b.n	800c750 <__svfscanf_r+0x2a4>
 800c7a0:	f046 0601 	orr.w	r6, r6, #1
 800c7a4:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 800c7a8:	f04f 0800 	mov.w	r8, #0
 800c7ac:	e7d0      	b.n	800c750 <__svfscanf_r+0x2a4>
 800c7ae:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 800c7b2:	e7c1      	b.n	800c738 <__svfscanf_r+0x28c>
 800c7b4:	06f1      	lsls	r1, r6, #27
 800c7b6:	f53f ae9d 	bmi.w	800c4f4 <__svfscanf_r+0x48>
 800c7ba:	0732      	lsls	r2, r6, #28
 800c7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c0:	d502      	bpl.n	800c7c8 <__svfscanf_r+0x31c>
 800c7c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e695      	b.n	800c4f4 <__svfscanf_r+0x48>
 800c7c8:	0770      	lsls	r0, r6, #29
 800c7ca:	d502      	bpl.n	800c7d2 <__svfscanf_r+0x326>
 800c7cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7ce:	801a      	strh	r2, [r3, #0]
 800c7d0:	e690      	b.n	800c4f4 <__svfscanf_r+0x48>
 800c7d2:	07f1      	lsls	r1, r6, #31
 800c7d4:	d502      	bpl.n	800c7dc <__svfscanf_r+0x330>
 800c7d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e68b      	b.n	800c4f4 <__svfscanf_r+0x48>
 800c7dc:	07b2      	lsls	r2, r6, #30
 800c7de:	d5fa      	bpl.n	800c7d6 <__svfscanf_r+0x32a>
 800c7e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c7e4:	17d2      	asrs	r2, r2, #31
 800c7e6:	e9c3 1200 	strd	r1, r2, [r3]
 800c7ea:	e683      	b.n	800c4f4 <__svfscanf_r+0x48>
 800c7ec:	4b90      	ldr	r3, [pc, #576]	@ (800ca30 <__svfscanf_r+0x584>)
 800c7ee:	61bb      	str	r3, [r7, #24]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e797      	b.n	800c724 <__svfscanf_r+0x278>
 800c7f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	f001 fb18 	bl	800de2c <__srefill_r>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d0aa      	beq.n	800c756 <__svfscanf_r+0x2aa>
 800c800:	e71f      	b.n	800c642 <__svfscanf_r+0x196>
 800c802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c804:	3201      	adds	r2, #1
 800c806:	633a      	str	r2, [r7, #48]	@ 0x30
 800c808:	6862      	ldr	r2, [r4, #4]
 800c80a:	3a01      	subs	r2, #1
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	6062      	str	r2, [r4, #4]
 800c810:	dd02      	ble.n	800c818 <__svfscanf_r+0x36c>
 800c812:	3301      	adds	r3, #1
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	e7a2      	b.n	800c75e <__svfscanf_r+0x2b2>
 800c818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c81a:	4621      	mov	r1, r4
 800c81c:	f001 fb06 	bl	800de2c <__srefill_r>
 800c820:	2800      	cmp	r0, #0
 800c822:	d09c      	beq.n	800c75e <__svfscanf_r+0x2b2>
 800c824:	e70d      	b.n	800c642 <__svfscanf_r+0x196>
 800c826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c828:	2b01      	cmp	r3, #1
 800c82a:	bf38      	it	cc
 800c82c:	2301      	movcc	r3, #1
 800c82e:	4698      	mov	r8, r3
 800c830:	f016 0301 	ands.w	r3, r6, #1
 800c834:	f006 0b10 	and.w	fp, r6, #16
 800c838:	f000 80d8 	beq.w	800c9ec <__svfscanf_r+0x540>
 800c83c:	f1bb 0f00 	cmp.w	fp, #0
 800c840:	d172      	bne.n	800c928 <__svfscanf_r+0x47c>
 800c842:	462b      	mov	r3, r5
 800c844:	0631      	lsls	r1, r6, #24
 800c846:	f853 5b04 	ldr.w	r5, [r3], #4
 800c84a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c84c:	d573      	bpl.n	800c936 <__svfscanf_r+0x48a>
 800c84e:	2d00      	cmp	r5, #0
 800c850:	f43f af2b 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800c854:	2080      	movs	r0, #128	@ 0x80
 800c856:	f7fd fdf5 	bl	800a444 <malloc>
 800c85a:	4606      	mov	r6, r0
 800c85c:	b910      	cbnz	r0, 800c864 <__svfscanf_r+0x3b8>
 800c85e:	f04f 33ff 	mov.w	r3, #4294967295
 800c862:	e6f9      	b.n	800c658 <__svfscanf_r+0x1ac>
 800c864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c866:	6028      	str	r0, [r5, #0]
 800c868:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800c86c:	889b      	ldrh	r3, [r3, #4]
 800c86e:	4599      	cmp	r9, r3
 800c870:	d312      	bcc.n	800c898 <__svfscanf_r+0x3ec>
 800c872:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800c876:	4293      	cmp	r3, r2
 800c878:	d8f1      	bhi.n	800c85e <__svfscanf_r+0x3b2>
 800c87a:	3308      	adds	r3, #8
 800c87c:	fa1f fa83 	uxth.w	sl, r3
 800c880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c882:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800c886:	6818      	ldr	r0, [r3, #0]
 800c888:	f003 f844 	bl	800f914 <realloc>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0e6      	beq.n	800c85e <__svfscanf_r+0x3b2>
 800c890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c892:	6018      	str	r0, [r3, #0]
 800c894:	f8a3 a004 	strh.w	sl, [r3, #4]
 800c898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f109 0201 	add.w	r2, r9, #1
 800c8a2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800c8a6:	46aa      	mov	sl, r5
 800c8a8:	80ca      	strh	r2, [r1, #6]
 800c8aa:	4635      	mov	r5, r6
 800c8ac:	f04f 0920 	mov.w	r9, #32
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	613a      	str	r2, [r7, #16]
 800c8b4:	f001 fcba 	bl	800e22c <__locale_mb_cur_max>
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	4290      	cmp	r0, r2
 800c8bc:	f43f aec1 	beq.w	800c642 <__svfscanf_r+0x196>
 800c8c0:	6821      	ldr	r1, [r4, #0]
 800c8c2:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 800c8c6:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c8ca:	f80c 0002 	strb.w	r0, [ip, r2]
 800c8ce:	1c53      	adds	r3, r2, #1
 800c8d0:	6862      	ldr	r2, [r4, #4]
 800c8d2:	3a01      	subs	r2, #1
 800c8d4:	e9c4 1200 	strd	r1, r2, [r4]
 800c8d8:	6a3a      	ldr	r2, [r7, #32]
 800c8da:	2a03      	cmp	r2, #3
 800c8dc:	d102      	bne.n	800c8e4 <__svfscanf_r+0x438>
 800c8de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8e0:	2a04      	cmp	r2, #4
 800c8e2:	d007      	beq.n	800c8f4 <__svfscanf_r+0x448>
 800c8e4:	2208      	movs	r2, #8
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800c8ec:	623b      	str	r3, [r7, #32]
 800c8ee:	f7fe fa3e 	bl	800ad6e <memset>
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800c8f8:	9200      	str	r2, [sp, #0]
 800c8fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8fc:	613b      	str	r3, [r7, #16]
 800c8fe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800c902:	4629      	mov	r1, r5
 800c904:	f004 f9e0 	bl	8010cc8 <_mbrtowc_r>
 800c908:	1c42      	adds	r2, r0, #1
 800c90a:	6238      	str	r0, [r7, #32]
 800c90c:	f43f ae99 	beq.w	800c642 <__svfscanf_r+0x196>
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	b9b8      	cbnz	r0, 800c944 <__svfscanf_r+0x498>
 800c914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c916:	441a      	add	r2, r3
 800c918:	4613      	mov	r3, r2
 800c91a:	f1bb 0f00 	cmp.w	fp, #0
 800c91e:	d00e      	beq.n	800c93e <__svfscanf_r+0x492>
 800c920:	633b      	str	r3, [r7, #48]	@ 0x30
 800c922:	f108 38ff 	add.w	r8, r8, #4294967295
 800c926:	e019      	b.n	800c95c <__svfscanf_r+0x4b0>
 800c928:	f04f 0900 	mov.w	r9, #0
 800c92c:	62fd      	str	r5, [r7, #44]	@ 0x2c
 800c92e:	464e      	mov	r6, r9
 800c930:	46ca      	mov	sl, r9
 800c932:	464d      	mov	r5, r9
 800c934:	e7bc      	b.n	800c8b0 <__svfscanf_r+0x404>
 800c936:	46d9      	mov	r9, fp
 800c938:	465e      	mov	r6, fp
 800c93a:	46da      	mov	sl, fp
 800c93c:	e7b8      	b.n	800c8b0 <__svfscanf_r+0x404>
 800c93e:	f8c5 b000 	str.w	fp, [r5]
 800c942:	e7ed      	b.n	800c920 <__svfscanf_r+0x474>
 800c944:	6a3a      	ldr	r2, [r7, #32]
 800c946:	3202      	adds	r2, #2
 800c948:	d025      	beq.n	800c996 <__svfscanf_r+0x4ea>
 800c94a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c94c:	441a      	add	r2, r3
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	633a      	str	r2, [r7, #48]	@ 0x30
 800c952:	2b03      	cmp	r3, #3
 800c954:	d1e5      	bne.n	800c922 <__svfscanf_r+0x476>
 800c956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c958:	2b04      	cmp	r3, #4
 800c95a:	d1e2      	bne.n	800c922 <__svfscanf_r+0x476>
 800c95c:	f1bb 0f00 	cmp.w	fp, #0
 800c960:	d117      	bne.n	800c992 <__svfscanf_r+0x4e6>
 800c962:	f1ba 0f00 	cmp.w	sl, #0
 800c966:	d013      	beq.n	800c990 <__svfscanf_r+0x4e4>
 800c968:	1bab      	subs	r3, r5, r6
 800c96a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800c96e:	d80f      	bhi.n	800c990 <__svfscanf_r+0x4e4>
 800c970:	4630      	mov	r0, r6
 800c972:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c976:	613b      	str	r3, [r7, #16]
 800c978:	f002 ffcc 	bl	800f914 <realloc>
 800c97c:	4606      	mov	r6, r0
 800c97e:	2800      	cmp	r0, #0
 800c980:	f43f af6d 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f8ca 0000 	str.w	r0, [sl]
 800c98a:	18c5      	adds	r5, r0, r3
 800c98c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c990:	3504      	adds	r5, #4
 800c992:	2200      	movs	r2, #0
 800c994:	e000      	b.n	800c998 <__svfscanf_r+0x4ec>
 800c996:	461a      	mov	r2, r3
 800c998:	6863      	ldr	r3, [r4, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dc14      	bgt.n	800c9c8 <__svfscanf_r+0x51c>
 800c99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9a0:	613a      	str	r2, [r7, #16]
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	f001 fa42 	bl	800de2c <__srefill_r>
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	b168      	cbz	r0, 800c9c8 <__svfscanf_r+0x51c>
 800c9ac:	2a00      	cmp	r2, #0
 800c9ae:	f47f ae48 	bne.w	800c642 <__svfscanf_r+0x196>
 800c9b2:	f1ba 0f00 	cmp.w	sl, #0
 800c9b6:	d10c      	bne.n	800c9d2 <__svfscanf_r+0x526>
 800c9b8:	f1bb 0f00 	cmp.w	fp, #0
 800c9bc:	d102      	bne.n	800c9c4 <__svfscanf_r+0x518>
 800c9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9c4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800c9c6:	e595      	b.n	800c4f4 <__svfscanf_r+0x48>
 800c9c8:	f1b8 0f00 	cmp.w	r8, #0
 800c9cc:	f47f af71 	bne.w	800c8b2 <__svfscanf_r+0x406>
 800c9d0:	e7ef      	b.n	800c9b2 <__svfscanf_r+0x506>
 800c9d2:	1ba9      	subs	r1, r5, r6
 800c9d4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800c9d8:	d9ee      	bls.n	800c9b8 <__svfscanf_r+0x50c>
 800c9da:	f8da 0000 	ldr.w	r0, [sl]
 800c9de:	f002 ff99 	bl	800f914 <realloc>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d0e8      	beq.n	800c9b8 <__svfscanf_r+0x50c>
 800c9e6:	f8ca 0000 	str.w	r0, [sl]
 800c9ea:	e7e5      	b.n	800c9b8 <__svfscanf_r+0x50c>
 800c9ec:	f1bb 0f00 	cmp.w	fp, #0
 800c9f0:	d022      	beq.n	800ca38 <__svfscanf_r+0x58c>
 800c9f2:	461e      	mov	r6, r3
 800c9f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c9f8:	4598      	cmp	r8, r3
 800c9fa:	dd11      	ble.n	800ca20 <__svfscanf_r+0x574>
 800c9fc:	441a      	add	r2, r3
 800c9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca00:	6022      	str	r2, [r4, #0]
 800ca02:	4621      	mov	r1, r4
 800ca04:	441e      	add	r6, r3
 800ca06:	eba8 0803 	sub.w	r8, r8, r3
 800ca0a:	f001 fa0f 	bl	800de2c <__srefill_r>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0f0      	beq.n	800c9f4 <__svfscanf_r+0x548>
 800ca12:	2e00      	cmp	r6, #0
 800ca14:	f43f ae15 	beq.w	800c642 <__svfscanf_r+0x196>
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	4433      	add	r3, r6
 800ca1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca1e:	e569      	b.n	800c4f4 <__svfscanf_r+0x48>
 800ca20:	eba3 0308 	sub.w	r3, r3, r8
 800ca24:	4442      	add	r2, r8
 800ca26:	4446      	add	r6, r8
 800ca28:	6063      	str	r3, [r4, #4]
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	e7f4      	b.n	800ca18 <__svfscanf_r+0x56c>
 800ca2e:	bf00      	nop
 800ca30:	08010979 	.word	0x08010979
 800ca34:	08013569 	.word	0x08013569
 800ca38:	46a9      	mov	r9, r5
 800ca3a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800ca3e:	f859 5b04 	ldr.w	r5, [r9], #4
 800ca42:	d02c      	beq.n	800ca9e <__svfscanf_r+0x5f2>
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	f43f ae30 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	f7fd fcfa 	bl	800a444 <malloc>
 800ca50:	4682      	mov	sl, r0
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f43f af03 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800ca58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5a:	6028      	str	r0, [r5, #0]
 800ca5c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800ca60:	889e      	ldrh	r6, [r3, #4]
 800ca62:	45b3      	cmp	fp, r6
 800ca64:	d311      	bcc.n	800ca8a <__svfscanf_r+0x5de>
 800ca66:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800ca6a:	429e      	cmp	r6, r3
 800ca6c:	f63f aef7 	bhi.w	800c85e <__svfscanf_r+0x3b2>
 800ca70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca72:	3608      	adds	r6, #8
 800ca74:	b2b6      	uxth	r6, r6
 800ca76:	6818      	ldr	r0, [r3, #0]
 800ca78:	00b1      	lsls	r1, r6, #2
 800ca7a:	f002 ff4b 	bl	800f914 <realloc>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f43f aeed 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800ca84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca86:	6018      	str	r0, [r3, #0]
 800ca88:	809e      	strh	r6, [r3, #4]
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f10b 0201 	add.w	r2, fp, #1
 800ca94:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800ca98:	462e      	mov	r6, r5
 800ca9a:	80ca      	strh	r2, [r1, #6]
 800ca9c:	4655      	mov	r5, sl
 800ca9e:	9400      	str	r4, [sp, #0]
 800caa0:	4629      	mov	r1, r5
 800caa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caa4:	4643      	mov	r3, r8
 800caa6:	2201      	movs	r2, #1
 800caa8:	f000 ff99 	bl	800d9de <_fread_r>
 800caac:	4605      	mov	r5, r0
 800caae:	2800      	cmp	r0, #0
 800cab0:	f43f adc7 	beq.w	800c642 <__svfscanf_r+0x196>
 800cab4:	b13e      	cbz	r6, 800cac6 <__svfscanf_r+0x61a>
 800cab6:	4580      	cmp	r8, r0
 800cab8:	d905      	bls.n	800cac6 <__svfscanf_r+0x61a>
 800caba:	4601      	mov	r1, r0
 800cabc:	6830      	ldr	r0, [r6, #0]
 800cabe:	f002 ff29 	bl	800f914 <realloc>
 800cac2:	b100      	cbz	r0, 800cac6 <__svfscanf_r+0x61a>
 800cac4:	6030      	str	r0, [r6, #0]
 800cac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac8:	442b      	add	r3, r5
 800caca:	633b      	str	r3, [r7, #48]	@ 0x30
 800cacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cace:	3301      	adds	r3, #1
 800cad0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cad2:	464d      	mov	r5, r9
 800cad4:	e50e      	b.n	800c4f4 <__svfscanf_r+0x48>
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bf08      	it	eq
 800cadc:	f04f 33ff 	moveq.w	r3, #4294967295
 800cae0:	f016 0801 	ands.w	r8, r6, #1
 800cae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cae6:	f006 0a10 	and.w	sl, r6, #16
 800caea:	f000 8101 	beq.w	800ccf0 <__svfscanf_r+0x844>
 800caee:	f1ba 0f00 	cmp.w	sl, #0
 800caf2:	f040 80a4 	bne.w	800cc3e <__svfscanf_r+0x792>
 800caf6:	462b      	mov	r3, r5
 800caf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	0633      	lsls	r3, r6, #24
 800cb00:	f140 80a5 	bpl.w	800cc4e <__svfscanf_r+0x7a2>
 800cb04:	2d00      	cmp	r5, #0
 800cb06:	f43f add0 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800cb0a:	2080      	movs	r0, #128	@ 0x80
 800cb0c:	f7fd fc9a 	bl	800a444 <malloc>
 800cb10:	4680      	mov	r8, r0
 800cb12:	2800      	cmp	r0, #0
 800cb14:	f43f aea3 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800cb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb1a:	6028      	str	r0, [r5, #0]
 800cb1c:	88de      	ldrh	r6, [r3, #6]
 800cb1e:	889b      	ldrh	r3, [r3, #4]
 800cb20:	429e      	cmp	r6, r3
 800cb22:	d314      	bcc.n	800cb4e <__svfscanf_r+0x6a2>
 800cb24:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	f63f ae98 	bhi.w	800c85e <__svfscanf_r+0x3b2>
 800cb2e:	3308      	adds	r3, #8
 800cb30:	fa1f f983 	uxth.w	r9, r3
 800cb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb36:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	f002 feea 	bl	800f914 <realloc>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f43f ae8c 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800cb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb48:	6018      	str	r0, [r3, #0]
 800cb4a:	f8a3 9004 	strh.w	r9, [r3, #4]
 800cb4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	1c72      	adds	r2, r6, #1
 800cb56:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800cb5a:	46ab      	mov	fp, r5
 800cb5c:	80ca      	strh	r2, [r1, #6]
 800cb5e:	4645      	mov	r5, r8
 800cb60:	f04f 0920 	mov.w	r9, #32
 800cb64:	2600      	movs	r6, #0
 800cb66:	f001 fb61 	bl	800e22c <__locale_mb_cur_max>
 800cb6a:	42b0      	cmp	r0, r6
 800cb6c:	f43f ad69 	beq.w	800c642 <__svfscanf_r+0x196>
 800cb70:	1c73      	adds	r3, r6, #1
 800cb72:	613b      	str	r3, [r7, #16]
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800cb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7e:	558a      	strb	r2, [r1, r6]
 800cb80:	6862      	ldr	r2, [r4, #4]
 800cb82:	3a01      	subs	r2, #1
 800cb84:	e9c4 3200 	strd	r3, r2, [r4]
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	d102      	bne.n	800cb94 <__svfscanf_r+0x6e8>
 800cb8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb90:	2b04      	cmp	r3, #4
 800cb92:	d005      	beq.n	800cba0 <__svfscanf_r+0x6f4>
 800cb94:	2208      	movs	r2, #8
 800cb96:	2100      	movs	r1, #0
 800cb98:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800cb9c:	f7fe f8e7 	bl	800ad6e <memset>
 800cba0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbaa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f004 f88a 	bl	8010cc8 <_mbrtowc_r>
 800cbb4:	1c46      	adds	r6, r0, #1
 800cbb6:	6238      	str	r0, [r7, #32]
 800cbb8:	f43f ad43 	beq.w	800c642 <__svfscanf_r+0x196>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d14a      	bne.n	800cc56 <__svfscanf_r+0x7aa>
 800cbc0:	6028      	str	r0, [r5, #0]
 800cbc2:	682e      	ldr	r6, [r5, #0]
 800cbc4:	1c70      	adds	r0, r6, #1
 800cbc6:	d056      	beq.n	800cc76 <__svfscanf_r+0x7ca>
 800cbc8:	2208      	movs	r2, #8
 800cbca:	2100      	movs	r1, #0
 800cbcc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800cbd0:	f7fe f8cd 	bl	800ad6e <memset>
 800cbd4:	4b9c      	ldr	r3, [pc, #624]	@ (800ce48 <__svfscanf_r+0x99c>)
 800cbd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cbdc:	60bb      	str	r3, [r7, #8]
 800cbde:	4632      	mov	r2, r6
 800cbe0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cbe4:	68be      	ldr	r6, [r7, #8]
 800cbe6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800cbea:	47b0      	blx	r6
 800cbec:	2801      	cmp	r0, #1
 800cbee:	d144      	bne.n	800cc7a <__svfscanf_r+0x7ce>
 800cbf0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cbf4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800cbf8:	5c9b      	ldrb	r3, [r3, r2]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d148      	bne.n	800cc90 <__svfscanf_r+0x7e4>
 800cbfe:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d13a      	bne.n	800cc7e <__svfscanf_r+0x7d2>
 800cc08:	f1ba 0f00 	cmp.w	sl, #0
 800cc0c:	d115      	bne.n	800cc3a <__svfscanf_r+0x78e>
 800cc0e:	f8c5 a000 	str.w	sl, [r5]
 800cc12:	f1bb 0f00 	cmp.w	fp, #0
 800cc16:	d00d      	beq.n	800cc34 <__svfscanf_r+0x788>
 800cc18:	eba5 0108 	sub.w	r1, r5, r8
 800cc1c:	108b      	asrs	r3, r1, #2
 800cc1e:	3301      	adds	r3, #1
 800cc20:	4599      	cmp	r9, r3
 800cc22:	d907      	bls.n	800cc34 <__svfscanf_r+0x788>
 800cc24:	f8db 0000 	ldr.w	r0, [fp]
 800cc28:	3104      	adds	r1, #4
 800cc2a:	f002 fe73 	bl	800f914 <realloc>
 800cc2e:	b108      	cbz	r0, 800cc34 <__svfscanf_r+0x788>
 800cc30:	f8cb 0000 	str.w	r0, [fp]
 800cc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc36:	3301      	adds	r3, #1
 800cc38:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc3a:	68fd      	ldr	r5, [r7, #12]
 800cc3c:	e45a      	b.n	800c4f4 <__svfscanf_r+0x48>
 800cc3e:	f04f 0900 	mov.w	r9, #0
 800cc42:	60fd      	str	r5, [r7, #12]
 800cc44:	46c8      	mov	r8, r9
 800cc46:	46cb      	mov	fp, r9
 800cc48:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800cc4c:	e78a      	b.n	800cb64 <__svfscanf_r+0x6b8>
 800cc4e:	46d1      	mov	r9, sl
 800cc50:	46d0      	mov	r8, sl
 800cc52:	46d3      	mov	fp, sl
 800cc54:	e786      	b.n	800cb64 <__svfscanf_r+0x6b8>
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	3302      	adds	r3, #2
 800cc5a:	d1b2      	bne.n	800cbc2 <__svfscanf_r+0x716>
 800cc5c:	693e      	ldr	r6, [r7, #16]
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dc40      	bgt.n	800cce6 <__svfscanf_r+0x83a>
 800cc64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc66:	4621      	mov	r1, r4
 800cc68:	f001 f8e0 	bl	800de2c <__srefill_r>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d03a      	beq.n	800cce6 <__svfscanf_r+0x83a>
 800cc70:	2e00      	cmp	r6, #0
 800cc72:	d0c9      	beq.n	800cc08 <__svfscanf_r+0x75c>
 800cc74:	e4e5      	b.n	800c642 <__svfscanf_r+0x196>
 800cc76:	4632      	mov	r2, r6
 800cc78:	e7bc      	b.n	800cbf4 <__svfscanf_r+0x748>
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	e7ba      	b.n	800cbf4 <__svfscanf_r+0x748>
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc82:	3b01      	subs	r3, #1
 800cc84:	4622      	mov	r2, r4
 800cc86:	5cf1      	ldrb	r1, [r6, r3]
 800cc88:	613b      	str	r3, [r7, #16]
 800cc8a:	f001 f9c0 	bl	800e00e <_ungetc_r>
 800cc8e:	e7b8      	b.n	800cc02 <__svfscanf_r+0x756>
 800cc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4413      	add	r3, r2
 800cc96:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d102      	bne.n	800cca4 <__svfscanf_r+0x7f8>
 800cc9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d002      	beq.n	800ccaa <__svfscanf_r+0x7fe>
 800cca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca6:	3b01      	subs	r3, #1
 800cca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccaa:	f1ba 0f00 	cmp.w	sl, #0
 800ccae:	d118      	bne.n	800cce2 <__svfscanf_r+0x836>
 800ccb0:	3504      	adds	r5, #4
 800ccb2:	f1bb 0f00 	cmp.w	fp, #0
 800ccb6:	d014      	beq.n	800cce2 <__svfscanf_r+0x836>
 800ccb8:	eba5 0608 	sub.w	r6, r5, r8
 800ccbc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 800ccc0:	d80d      	bhi.n	800ccde <__svfscanf_r+0x832>
 800ccc2:	4640      	mov	r0, r8
 800ccc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ccc8:	f002 fe24 	bl	800f914 <realloc>
 800cccc:	4680      	mov	r8, r0
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f43f adc5 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800ccd4:	1985      	adds	r5, r0, r6
 800ccd6:	f8cb 0000 	str.w	r0, [fp]
 800ccda:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800ccde:	4656      	mov	r6, sl
 800cce0:	e7bd      	b.n	800cc5e <__svfscanf_r+0x7b2>
 800cce2:	2600      	movs	r6, #0
 800cce4:	e7bb      	b.n	800cc5e <__svfscanf_r+0x7b2>
 800cce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f47f af3c 	bne.w	800cb66 <__svfscanf_r+0x6ba>
 800ccee:	e78b      	b.n	800cc08 <__svfscanf_r+0x75c>
 800ccf0:	f1ba 0f00 	cmp.w	sl, #0
 800ccf4:	d01e      	beq.n	800cd34 <__svfscanf_r+0x888>
 800ccf6:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	781a      	ldrb	r2, [r3, #0]
 800ccfe:	5cb2      	ldrb	r2, [r6, r2]
 800cd00:	b91a      	cbnz	r2, 800cd0a <__svfscanf_r+0x85e>
 800cd02:	f1b8 0f00 	cmp.w	r8, #0
 800cd06:	d112      	bne.n	800cd2e <__svfscanf_r+0x882>
 800cd08:	e4cf      	b.n	800c6aa <__svfscanf_r+0x1fe>
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	6862      	ldr	r2, [r4, #4]
 800cd0e:	6023      	str	r3, [r4, #0]
 800cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd12:	f108 0801 	add.w	r8, r8, #1
 800cd16:	3a01      	subs	r2, #1
 800cd18:	4543      	cmp	r3, r8
 800cd1a:	6062      	str	r2, [r4, #4]
 800cd1c:	d007      	beq.n	800cd2e <__svfscanf_r+0x882>
 800cd1e:	2a00      	cmp	r2, #0
 800cd20:	dceb      	bgt.n	800ccfa <__svfscanf_r+0x84e>
 800cd22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd24:	4621      	mov	r1, r4
 800cd26:	f001 f881 	bl	800de2c <__srefill_r>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d0e5      	beq.n	800ccfa <__svfscanf_r+0x84e>
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd30:	4443      	add	r3, r8
 800cd32:	e673      	b.n	800ca1c <__svfscanf_r+0x570>
 800cd34:	46a9      	mov	r9, r5
 800cd36:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800cd3a:	f859 8b04 	ldr.w	r8, [r9], #4
 800cd3e:	f000 8081 	beq.w	800ce44 <__svfscanf_r+0x998>
 800cd42:	f1b8 0f00 	cmp.w	r8, #0
 800cd46:	f43f acb0 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800cd4a:	2020      	movs	r0, #32
 800cd4c:	f7fd fb7a 	bl	800a444 <malloc>
 800cd50:	4606      	mov	r6, r0
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f43f ad83 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800cd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd5a:	f8c8 0000 	str.w	r0, [r8]
 800cd5e:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800cd62:	889d      	ldrh	r5, [r3, #4]
 800cd64:	45aa      	cmp	sl, r5
 800cd66:	d311      	bcc.n	800cd8c <__svfscanf_r+0x8e0>
 800cd68:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800cd6c:	429d      	cmp	r5, r3
 800cd6e:	f63f ad76 	bhi.w	800c85e <__svfscanf_r+0x3b2>
 800cd72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd74:	3508      	adds	r5, #8
 800cd76:	b2ad      	uxth	r5, r5
 800cd78:	6818      	ldr	r0, [r3, #0]
 800cd7a:	00a9      	lsls	r1, r5, #2
 800cd7c:	f002 fdca 	bl	800f914 <realloc>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	f43f ad6c 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800cd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd88:	6018      	str	r0, [r3, #0]
 800cd8a:	809d      	strh	r5, [r3, #4]
 800cd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f10a 0201 	add.w	r2, sl, #1
 800cd96:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 800cd9a:	46c3      	mov	fp, r8
 800cd9c:	80ca      	strh	r2, [r1, #6]
 800cd9e:	46b0      	mov	r8, r6
 800cda0:	2620      	movs	r6, #32
 800cda2:	4645      	mov	r5, r8
 800cda4:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800cdb0:	b36a      	cbz	r2, 800ce0e <__svfscanf_r+0x962>
 800cdb2:	6862      	ldr	r2, [r4, #4]
 800cdb4:	3a01      	subs	r2, #1
 800cdb6:	6062      	str	r2, [r4, #4]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	6022      	str	r2, [r4, #0]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	f808 3b01 	strb.w	r3, [r8], #1
 800cdc2:	f1bb 0f00 	cmp.w	fp, #0
 800cdc6:	d012      	beq.n	800cdee <__svfscanf_r+0x942>
 800cdc8:	eba8 0305 	sub.w	r3, r8, r5
 800cdcc:	42b3      	cmp	r3, r6
 800cdce:	d30e      	bcc.n	800cdee <__svfscanf_r+0x942>
 800cdd0:	0076      	lsls	r6, r6, #1
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	613b      	str	r3, [r7, #16]
 800cdd8:	f002 fd9c 	bl	800f914 <realloc>
 800cddc:	4605      	mov	r5, r0
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f43f ad3d 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f8cb 0000 	str.w	r0, [fp]
 800cdea:	eb00 0803 	add.w	r8, r0, r3
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdf4:	d00b      	beq.n	800ce0e <__svfscanf_r+0x962>
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	dcd5      	bgt.n	800cda8 <__svfscanf_r+0x8fc>
 800cdfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdfe:	4621      	mov	r1, r4
 800ce00:	f001 f814 	bl	800de2c <__srefill_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d0cf      	beq.n	800cda8 <__svfscanf_r+0x8fc>
 800ce08:	45a8      	cmp	r8, r5
 800ce0a:	f43f ac1a 	beq.w	800c642 <__svfscanf_r+0x196>
 800ce0e:	ebb8 0505 	subs.w	r5, r8, r5
 800ce12:	f43f ac4a 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800ce16:	2300      	movs	r3, #0
 800ce18:	f888 3000 	strb.w	r3, [r8]
 800ce1c:	f1bb 0f00 	cmp.w	fp, #0
 800ce20:	d009      	beq.n	800ce36 <__svfscanf_r+0x98a>
 800ce22:	1c69      	adds	r1, r5, #1
 800ce24:	428e      	cmp	r6, r1
 800ce26:	d906      	bls.n	800ce36 <__svfscanf_r+0x98a>
 800ce28:	f8db 0000 	ldr.w	r0, [fp]
 800ce2c:	f002 fd72 	bl	800f914 <realloc>
 800ce30:	b108      	cbz	r0, 800ce36 <__svfscanf_r+0x98a>
 800ce32:	f8cb 0000 	str.w	r0, [fp]
 800ce36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce38:	3301      	adds	r3, #1
 800ce3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3e:	442b      	add	r3, r5
 800ce40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce42:	e646      	b.n	800cad2 <__svfscanf_r+0x626>
 800ce44:	46b3      	mov	fp, r6
 800ce46:	e7ac      	b.n	800cda2 <__svfscanf_r+0x8f6>
 800ce48:	20000564 	.word	0x20000564
 800ce4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	bf08      	it	eq
 800ce52:	f04f 33ff 	moveq.w	r3, #4294967295
 800ce56:	f016 0901 	ands.w	r9, r6, #1
 800ce5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce5c:	f006 0810 	and.w	r8, r6, #16
 800ce60:	f000 80ef 	beq.w	800d042 <__svfscanf_r+0xb96>
 800ce64:	f1b8 0f00 	cmp.w	r8, #0
 800ce68:	f040 8098 	bne.w	800cf9c <__svfscanf_r+0xaf0>
 800ce6c:	462b      	mov	r3, r5
 800ce6e:	0631      	lsls	r1, r6, #24
 800ce70:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce74:	613b      	str	r3, [r7, #16]
 800ce76:	f140 8099 	bpl.w	800cfac <__svfscanf_r+0xb00>
 800ce7a:	2d00      	cmp	r5, #0
 800ce7c:	f43f ac15 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800ce80:	2080      	movs	r0, #128	@ 0x80
 800ce82:	f7fd fadf 	bl	800a444 <malloc>
 800ce86:	4606      	mov	r6, r0
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	f43f ace8 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800ce8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce90:	6028      	str	r0, [r5, #0]
 800ce92:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800ce96:	889b      	ldrh	r3, [r3, #4]
 800ce98:	4599      	cmp	r9, r3
 800ce9a:	d314      	bcc.n	800cec6 <__svfscanf_r+0xa1a>
 800ce9c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800cea0:	4293      	cmp	r3, r2
 800cea2:	f63f acdc 	bhi.w	800c85e <__svfscanf_r+0x3b2>
 800cea6:	3308      	adds	r3, #8
 800cea8:	fa1f fa83 	uxth.w	sl, r3
 800ceac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceae:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	f002 fd2e 	bl	800f914 <realloc>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	f43f acd0 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800cebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec0:	6018      	str	r0, [r3, #0]
 800cec2:	f8a3 a004 	strh.w	sl, [r3, #4]
 800cec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f109 0201 	add.w	r2, r9, #1
 800ced0:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800ced4:	46aa      	mov	sl, r5
 800ced6:	80ca      	strh	r2, [r1, #6]
 800ced8:	4635      	mov	r5, r6
 800ceda:	f04f 0920 	mov.w	r9, #32
 800cede:	2300      	movs	r3, #0
 800cee0:	6822      	ldr	r2, [r4, #0]
 800cee2:	49a7      	ldr	r1, [pc, #668]	@ (800d180 <__svfscanf_r+0xcd4>)
 800cee4:	7812      	ldrb	r2, [r2, #0]
 800cee6:	5c8a      	ldrb	r2, [r1, r2]
 800cee8:	0710      	lsls	r0, r2, #28
 800ceea:	d43c      	bmi.n	800cf66 <__svfscanf_r+0xaba>
 800ceec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceee:	2a00      	cmp	r2, #0
 800cef0:	d039      	beq.n	800cf66 <__svfscanf_r+0xaba>
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	f001 f99a 	bl	800e22c <__locale_mb_cur_max>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4298      	cmp	r0, r3
 800cefc:	f43f aba1 	beq.w	800c642 <__svfscanf_r+0x196>
 800cf00:	6822      	ldr	r2, [r4, #0]
 800cf02:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800cf06:	f812 0b01 	ldrb.w	r0, [r2], #1
 800cf0a:	54c8      	strb	r0, [r1, r3]
 800cf0c:	f103 0b01 	add.w	fp, r3, #1
 800cf10:	6863      	ldr	r3, [r4, #4]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	e9c4 2300 	strd	r2, r3, [r4]
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d102      	bne.n	800cf24 <__svfscanf_r+0xa78>
 800cf1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	d005      	beq.n	800cf30 <__svfscanf_r+0xa84>
 800cf24:	2208      	movs	r2, #8
 800cf26:	2100      	movs	r1, #0
 800cf28:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800cf2c:	f7fd ff1f 	bl	800ad6e <memset>
 800cf30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800cf3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f003 fec2 	bl	8010cc8 <_mbrtowc_r>
 800cf44:	1c42      	adds	r2, r0, #1
 800cf46:	6238      	str	r0, [r7, #32]
 800cf48:	f43f ab7b 	beq.w	800c642 <__svfscanf_r+0x196>
 800cf4c:	bb90      	cbnz	r0, 800cfb4 <__svfscanf_r+0xb08>
 800cf4e:	6028      	str	r0, [r5, #0]
 800cf50:	6828      	ldr	r0, [r5, #0]
 800cf52:	f003 fed3 	bl	8010cfc <iswspace>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d047      	beq.n	800cfec <__svfscanf_r+0xb40>
 800cf5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800cf60:	f1bb 0f00 	cmp.w	fp, #0
 800cf64:	d139      	bne.n	800cfda <__svfscanf_r+0xb2e>
 800cf66:	f1b8 0f00 	cmp.w	r8, #0
 800cf6a:	d114      	bne.n	800cf96 <__svfscanf_r+0xaea>
 800cf6c:	f8c5 8000 	str.w	r8, [r5]
 800cf70:	f1ba 0f00 	cmp.w	sl, #0
 800cf74:	d00c      	beq.n	800cf90 <__svfscanf_r+0xae4>
 800cf76:	1ba9      	subs	r1, r5, r6
 800cf78:	108b      	asrs	r3, r1, #2
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	4599      	cmp	r9, r3
 800cf7e:	d907      	bls.n	800cf90 <__svfscanf_r+0xae4>
 800cf80:	f8da 0000 	ldr.w	r0, [sl]
 800cf84:	3104      	adds	r1, #4
 800cf86:	f002 fcc5 	bl	800f914 <realloc>
 800cf8a:	b108      	cbz	r0, 800cf90 <__svfscanf_r+0xae4>
 800cf8c:	f8ca 0000 	str.w	r0, [sl]
 800cf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf92:	3301      	adds	r3, #1
 800cf94:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf96:	693d      	ldr	r5, [r7, #16]
 800cf98:	f7ff baac 	b.w	800c4f4 <__svfscanf_r+0x48>
 800cf9c:	f04f 0900 	mov.w	r9, #0
 800cfa0:	613d      	str	r5, [r7, #16]
 800cfa2:	464e      	mov	r6, r9
 800cfa4:	46ca      	mov	sl, r9
 800cfa6:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800cfaa:	e798      	b.n	800cede <__svfscanf_r+0xa32>
 800cfac:	46c1      	mov	r9, r8
 800cfae:	4646      	mov	r6, r8
 800cfb0:	46c2      	mov	sl, r8
 800cfb2:	e794      	b.n	800cede <__svfscanf_r+0xa32>
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	3302      	adds	r3, #2
 800cfb8:	d1ca      	bne.n	800cf50 <__svfscanf_r+0xaa4>
 800cfba:	465b      	mov	r3, fp
 800cfbc:	6862      	ldr	r2, [r4, #4]
 800cfbe:	2a00      	cmp	r2, #0
 800cfc0:	dc8e      	bgt.n	800cee0 <__svfscanf_r+0xa34>
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfc4:	60fb      	str	r3, [r7, #12]
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	f000 ff30 	bl	800de2c <__srefill_r>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d086      	beq.n	800cee0 <__svfscanf_r+0xa34>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f47f ab35 	bne.w	800c642 <__svfscanf_r+0x196>
 800cfd8:	e7c5      	b.n	800cf66 <__svfscanf_r+0xaba>
 800cfda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cfde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe0:	f813 100b 	ldrb.w	r1, [r3, fp]
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	f001 f812 	bl	800e00e <_ungetc_r>
 800cfea:	e7b7      	b.n	800cf5c <__svfscanf_r+0xab0>
 800cfec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfee:	445a      	add	r2, fp
 800cff0:	633a      	str	r2, [r7, #48]	@ 0x30
 800cff2:	6a3a      	ldr	r2, [r7, #32]
 800cff4:	2a03      	cmp	r2, #3
 800cff6:	d102      	bne.n	800cffe <__svfscanf_r+0xb52>
 800cff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cffa:	2a04      	cmp	r2, #4
 800cffc:	d002      	beq.n	800d004 <__svfscanf_r+0xb58>
 800cffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d000:	3a01      	subs	r2, #1
 800d002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d004:	f1b8 0f00 	cmp.w	r8, #0
 800d008:	d1d8      	bne.n	800cfbc <__svfscanf_r+0xb10>
 800d00a:	3504      	adds	r5, #4
 800d00c:	f1ba 0f00 	cmp.w	sl, #0
 800d010:	d015      	beq.n	800d03e <__svfscanf_r+0xb92>
 800d012:	eba5 0b06 	sub.w	fp, r5, r6
 800d016:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 800d01a:	d80e      	bhi.n	800d03a <__svfscanf_r+0xb8e>
 800d01c:	4630      	mov	r0, r6
 800d01e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d022:	f002 fc77 	bl	800f914 <realloc>
 800d026:	4606      	mov	r6, r0
 800d028:	2800      	cmp	r0, #0
 800d02a:	f43f ac18 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800d02e:	eb00 050b 	add.w	r5, r0, fp
 800d032:	f8ca 0000 	str.w	r0, [sl]
 800d036:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800d03a:	4643      	mov	r3, r8
 800d03c:	e7be      	b.n	800cfbc <__svfscanf_r+0xb10>
 800d03e:	4653      	mov	r3, sl
 800d040:	e7bc      	b.n	800cfbc <__svfscanf_r+0xb10>
 800d042:	f1b8 0f00 	cmp.w	r8, #0
 800d046:	d01a      	beq.n	800d07e <__svfscanf_r+0xbd2>
 800d048:	4e4d      	ldr	r6, [pc, #308]	@ (800d180 <__svfscanf_r+0xcd4>)
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	781a      	ldrb	r2, [r3, #0]
 800d04e:	5cb2      	ldrb	r2, [r6, r2]
 800d050:	0711      	lsls	r1, r2, #28
 800d052:	d411      	bmi.n	800d078 <__svfscanf_r+0xbcc>
 800d054:	3301      	adds	r3, #1
 800d056:	6862      	ldr	r2, [r4, #4]
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05c:	f109 0901 	add.w	r9, r9, #1
 800d060:	3a01      	subs	r2, #1
 800d062:	4599      	cmp	r9, r3
 800d064:	6062      	str	r2, [r4, #4]
 800d066:	d007      	beq.n	800d078 <__svfscanf_r+0xbcc>
 800d068:	2a00      	cmp	r2, #0
 800d06a:	dcee      	bgt.n	800d04a <__svfscanf_r+0xb9e>
 800d06c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d06e:	4621      	mov	r1, r4
 800d070:	f000 fedc 	bl	800de2c <__srefill_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	d0e8      	beq.n	800d04a <__svfscanf_r+0xb9e>
 800d078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07a:	444b      	add	r3, r9
 800d07c:	e4ce      	b.n	800ca1c <__svfscanf_r+0x570>
 800d07e:	46a8      	mov	r8, r5
 800d080:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800d084:	f858 5b04 	ldr.w	r5, [r8], #4
 800d088:	d077      	beq.n	800d17a <__svfscanf_r+0xcce>
 800d08a:	2d00      	cmp	r5, #0
 800d08c:	f43f ab0d 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800d090:	2020      	movs	r0, #32
 800d092:	f7fd f9d7 	bl	800a444 <malloc>
 800d096:	4681      	mov	r9, r0
 800d098:	2800      	cmp	r0, #0
 800d09a:	f43f abe0 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800d09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0a0:	6028      	str	r0, [r5, #0]
 800d0a2:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800d0a6:	889e      	ldrh	r6, [r3, #4]
 800d0a8:	45b2      	cmp	sl, r6
 800d0aa:	d311      	bcc.n	800d0d0 <__svfscanf_r+0xc24>
 800d0ac:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800d0b0:	429e      	cmp	r6, r3
 800d0b2:	f63f abd4 	bhi.w	800c85e <__svfscanf_r+0x3b2>
 800d0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b8:	3608      	adds	r6, #8
 800d0ba:	b2b6      	uxth	r6, r6
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	00b1      	lsls	r1, r6, #2
 800d0c0:	f002 fc28 	bl	800f914 <realloc>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f43f abca 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0cc:	6018      	str	r0, [r3, #0]
 800d0ce:	809e      	strh	r6, [r3, #4]
 800d0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f10a 0201 	add.w	r2, sl, #1
 800d0da:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800d0de:	80ca      	strh	r2, [r1, #6]
 800d0e0:	46aa      	mov	sl, r5
 800d0e2:	2620      	movs	r6, #32
 800d0e4:	464d      	mov	r5, r9
 800d0e6:	46a9      	mov	r9, r5
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	4925      	ldr	r1, [pc, #148]	@ (800d180 <__svfscanf_r+0xcd4>)
 800d0ec:	781a      	ldrb	r2, [r3, #0]
 800d0ee:	5c8a      	ldrb	r2, [r1, r2]
 800d0f0:	0712      	lsls	r2, r2, #28
 800d0f2:	d428      	bmi.n	800d146 <__svfscanf_r+0xc9a>
 800d0f4:	6862      	ldr	r2, [r4, #4]
 800d0f6:	3a01      	subs	r2, #1
 800d0f8:	6062      	str	r2, [r4, #4]
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	6022      	str	r2, [r4, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f805 3b01 	strb.w	r3, [r5], #1
 800d104:	f1ba 0f00 	cmp.w	sl, #0
 800d108:	d010      	beq.n	800d12c <__svfscanf_r+0xc80>
 800d10a:	eba5 0b09 	sub.w	fp, r5, r9
 800d10e:	45b3      	cmp	fp, r6
 800d110:	d30c      	bcc.n	800d12c <__svfscanf_r+0xc80>
 800d112:	0076      	lsls	r6, r6, #1
 800d114:	4648      	mov	r0, r9
 800d116:	4631      	mov	r1, r6
 800d118:	f002 fbfc 	bl	800f914 <realloc>
 800d11c:	4681      	mov	r9, r0
 800d11e:	2800      	cmp	r0, #0
 800d120:	f43f ab9d 	beq.w	800c85e <__svfscanf_r+0x3b2>
 800d124:	eb00 050b 	add.w	r5, r0, fp
 800d128:	f8ca 0000 	str.w	r0, [sl]
 800d12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12e:	3b01      	subs	r3, #1
 800d130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d132:	d008      	beq.n	800d146 <__svfscanf_r+0xc9a>
 800d134:	6863      	ldr	r3, [r4, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	dcd6      	bgt.n	800d0e8 <__svfscanf_r+0xc3c>
 800d13a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d13c:	4621      	mov	r1, r4
 800d13e:	f000 fe75 	bl	800de2c <__srefill_r>
 800d142:	2800      	cmp	r0, #0
 800d144:	d0d0      	beq.n	800d0e8 <__svfscanf_r+0xc3c>
 800d146:	2300      	movs	r3, #0
 800d148:	702b      	strb	r3, [r5, #0]
 800d14a:	eba5 0509 	sub.w	r5, r5, r9
 800d14e:	f1ba 0f00 	cmp.w	sl, #0
 800d152:	d009      	beq.n	800d168 <__svfscanf_r+0xcbc>
 800d154:	1c69      	adds	r1, r5, #1
 800d156:	428e      	cmp	r6, r1
 800d158:	d906      	bls.n	800d168 <__svfscanf_r+0xcbc>
 800d15a:	f8da 0000 	ldr.w	r0, [sl]
 800d15e:	f002 fbd9 	bl	800f914 <realloc>
 800d162:	b108      	cbz	r0, 800d168 <__svfscanf_r+0xcbc>
 800d164:	f8ca 0000 	str.w	r0, [sl]
 800d168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16a:	442b      	add	r3, r5
 800d16c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d170:	3301      	adds	r3, #1
 800d172:	627b      	str	r3, [r7, #36]	@ 0x24
 800d174:	4645      	mov	r5, r8
 800d176:	f7ff b9bd 	b.w	800c4f4 <__svfscanf_r+0x48>
 800d17a:	46b2      	mov	sl, r6
 800d17c:	e7b3      	b.n	800d0e6 <__svfscanf_r+0xc3a>
 800d17e:	bf00      	nop
 800d180:	08013569 	.word	0x08013569
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	3b01      	subs	r3, #1
 800d188:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800d18c:	bf81      	itttt	hi
 800d18e:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 800d190:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 800d194:	eb03 090c 	addhi.w	r9, r3, ip
 800d198:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d19c:	bf8c      	ite	hi
 800d19e:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 800d1a0:	f04f 0900 	movls.w	r9, #0
 800d1a4:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 800d1a8:	f04f 0a00 	mov.w	sl, #0
 800d1ac:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 800d1b0:	6822      	ldr	r2, [r4, #0]
 800d1b2:	7813      	ldrb	r3, [r2, #0]
 800d1b4:	2b39      	cmp	r3, #57	@ 0x39
 800d1b6:	d80f      	bhi.n	800d1d8 <__svfscanf_r+0xd2c>
 800d1b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ba:	d91a      	bls.n	800d1f2 <__svfscanf_r+0xd46>
 800d1bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d1c0:	290e      	cmp	r1, #14
 800d1c2:	d816      	bhi.n	800d1f2 <__svfscanf_r+0xd46>
 800d1c4:	e8df f001 	tbb	[pc, r1]
 800d1c8:	15781578 	.word	0x15781578
 800d1cc:	68683f15 	.word	0x68683f15
 800d1d0:	68686868 	.word	0x68686868
 800d1d4:	7068      	.short	0x7068
 800d1d6:	70          	.byte	0x70
 800d1d7:	00          	.byte	0x00
 800d1d8:	2b66      	cmp	r3, #102	@ 0x66
 800d1da:	d832      	bhi.n	800d242 <__svfscanf_r+0xd96>
 800d1dc:	2b60      	cmp	r3, #96	@ 0x60
 800d1de:	d803      	bhi.n	800d1e8 <__svfscanf_r+0xd3c>
 800d1e0:	2b46      	cmp	r3, #70	@ 0x46
 800d1e2:	d804      	bhi.n	800d1ee <__svfscanf_r+0xd42>
 800d1e4:	2b40      	cmp	r3, #64	@ 0x40
 800d1e6:	d904      	bls.n	800d1f2 <__svfscanf_r+0xd46>
 800d1e8:	69f9      	ldr	r1, [r7, #28]
 800d1ea:	290a      	cmp	r1, #10
 800d1ec:	e062      	b.n	800d2b4 <__svfscanf_r+0xe08>
 800d1ee:	2b58      	cmp	r3, #88	@ 0x58
 800d1f0:	d068      	beq.n	800d2c4 <__svfscanf_r+0xe18>
 800d1f2:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 800d1f6:	d011      	beq.n	800d21c <__svfscanf_r+0xd70>
 800d1f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800d1fc:	4598      	cmp	r8, r3
 800d1fe:	d908      	bls.n	800d212 <__svfscanf_r+0xd66>
 800d200:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800d204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d206:	4622      	mov	r2, r4
 800d208:	f000 ff01 	bl	800e00e <_ungetc_r>
 800d20c:	f108 39ff 	add.w	r9, r8, #4294967295
 800d210:	46c8      	mov	r8, r9
 800d212:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800d216:	4598      	cmp	r8, r3
 800d218:	f43f aa47 	beq.w	800c6aa <__svfscanf_r+0x1fe>
 800d21c:	f01b 0210 	ands.w	r2, fp, #16
 800d220:	d16c      	bne.n	800d2fc <__svfscanf_r+0xe50>
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d226:	69be      	ldr	r6, [r7, #24]
 800d228:	f888 2000 	strb.w	r2, [r8]
 800d22c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800d230:	47b0      	blx	r6
 800d232:	f01b 0f20 	tst.w	fp, #32
 800d236:	f105 0904 	add.w	r9, r5, #4
 800d23a:	d056      	beq.n	800d2ea <__svfscanf_r+0xe3e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	6018      	str	r0, [r3, #0]
 800d240:	e058      	b.n	800d2f4 <__svfscanf_r+0xe48>
 800d242:	2b78      	cmp	r3, #120	@ 0x78
 800d244:	e7d4      	b.n	800d1f0 <__svfscanf_r+0xd44>
 800d246:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 800d24a:	d00a      	beq.n	800d262 <__svfscanf_r+0xdb6>
 800d24c:	69f9      	ldr	r1, [r7, #28]
 800d24e:	b919      	cbnz	r1, 800d258 <__svfscanf_r+0xdac>
 800d250:	2108      	movs	r1, #8
 800d252:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 800d256:	61f9      	str	r1, [r7, #28]
 800d258:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 800d25c:	d004      	beq.n	800d268 <__svfscanf_r+0xdbc>
 800d25e:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 800d262:	f808 3b01 	strb.w	r3, [r8], #1
 800d266:	e00b      	b.n	800d280 <__svfscanf_r+0xdd4>
 800d268:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 800d26c:	f1b9 0f00 	cmp.w	r9, #0
 800d270:	d004      	beq.n	800d27c <__svfscanf_r+0xdd0>
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	3301      	adds	r3, #1
 800d276:	f109 39ff 	add.w	r9, r9, #4294967295
 800d27a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d27c:	f10a 0a01 	add.w	sl, sl, #1
 800d280:	6863      	ldr	r3, [r4, #4]
 800d282:	3b01      	subs	r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	6063      	str	r3, [r4, #4]
 800d288:	dd28      	ble.n	800d2dc <__svfscanf_r+0xe30>
 800d28a:	3201      	adds	r2, #1
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d290:	3b01      	subs	r3, #1
 800d292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d294:	d18c      	bne.n	800d1b0 <__svfscanf_r+0xd04>
 800d296:	e7ac      	b.n	800d1f2 <__svfscanf_r+0xd46>
 800d298:	69f8      	ldr	r0, [r7, #28]
 800d29a:	499b      	ldr	r1, [pc, #620]	@ (800d508 <__svfscanf_r+0x105c>)
 800d29c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800d2a0:	61f9      	str	r1, [r7, #28]
 800d2a2:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 800d2a6:	e7dc      	b.n	800d262 <__svfscanf_r+0xdb6>
 800d2a8:	69f8      	ldr	r0, [r7, #28]
 800d2aa:	4997      	ldr	r1, [pc, #604]	@ (800d508 <__svfscanf_r+0x105c>)
 800d2ac:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800d2b0:	61f9      	str	r1, [r7, #28]
 800d2b2:	2908      	cmp	r1, #8
 800d2b4:	dcf5      	bgt.n	800d2a2 <__svfscanf_r+0xdf6>
 800d2b6:	e79c      	b.n	800d1f2 <__svfscanf_r+0xd46>
 800d2b8:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 800d2bc:	d099      	beq.n	800d1f2 <__svfscanf_r+0xd46>
 800d2be:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 800d2c2:	e7ce      	b.n	800d262 <__svfscanf_r+0xdb6>
 800d2c4:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 800d2c8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d2cc:	d191      	bne.n	800d1f2 <__svfscanf_r+0xd46>
 800d2ce:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 800d2d2:	2110      	movs	r1, #16
 800d2d4:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 800d2d8:	61f9      	str	r1, [r7, #28]
 800d2da:	e7c2      	b.n	800d262 <__svfscanf_r+0xdb6>
 800d2dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2de:	4621      	mov	r1, r4
 800d2e0:	f000 fda4 	bl	800de2c <__srefill_r>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d0d2      	beq.n	800d28e <__svfscanf_r+0xde2>
 800d2e8:	e783      	b.n	800d1f2 <__svfscanf_r+0xd46>
 800d2ea:	f01b 0f08 	tst.w	fp, #8
 800d2ee:	d00b      	beq.n	800d308 <__svfscanf_r+0xe5c>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	7018      	strb	r0, [r3, #0]
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2fa:	464d      	mov	r5, r9
 800d2fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800d300:	eba8 0803 	sub.w	r8, r8, r3
 800d304:	44d0      	add	r8, sl
 800d306:	e512      	b.n	800cd2e <__svfscanf_r+0x882>
 800d308:	f01b 0f04 	tst.w	fp, #4
 800d30c:	d002      	beq.n	800d314 <__svfscanf_r+0xe68>
 800d30e:	682b      	ldr	r3, [r5, #0]
 800d310:	8018      	strh	r0, [r3, #0]
 800d312:	e7ef      	b.n	800d2f4 <__svfscanf_r+0xe48>
 800d314:	f01b 0201 	ands.w	r2, fp, #1
 800d318:	d190      	bne.n	800d23c <__svfscanf_r+0xd90>
 800d31a:	f01b 0f02 	tst.w	fp, #2
 800d31e:	d08d      	beq.n	800d23c <__svfscanf_r+0xd90>
 800d320:	4b7a      	ldr	r3, [pc, #488]	@ (800d50c <__svfscanf_r+0x1060>)
 800d322:	69b9      	ldr	r1, [r7, #24]
 800d324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d326:	4299      	cmp	r1, r3
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800d32e:	d105      	bne.n	800d33c <__svfscanf_r+0xe90>
 800d330:	f003 fcc8 	bl	8010cc4 <_strtoull_r>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	e9c3 0100 	strd	r0, r1, [r3]
 800d33a:	e7db      	b.n	800d2f4 <__svfscanf_r+0xe48>
 800d33c:	f003 fc2a 	bl	8010b94 <_strtoll_r>
 800d340:	e7f8      	b.n	800d334 <__svfscanf_r+0xe88>
 800d342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d344:	f000 ff78 	bl	800e238 <_localeconv_r>
 800d348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34a:	6802      	ldr	r2, [r0, #0]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800d352:	f04f 0800 	mov.w	r8, #0
 800d356:	bf88      	it	hi
 800d358:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 800d35a:	f8c7 8010 	str.w	r8, [r7, #16]
 800d35e:	e9c7 8802 	strd	r8, r8, [r7, #8]
 800d362:	bf81      	itttt	hi
 800d364:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 800d368:	f240 115d 	movwhi	r1, #349	@ 0x15d
 800d36c:	181b      	addhi	r3, r3, r0
 800d36e:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 800d370:	bf98      	it	ls
 800d372:	2300      	movls	r3, #0
 800d374:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 800d378:	46c3      	mov	fp, r8
 800d37a:	46c2      	mov	sl, r8
 800d37c:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 800d380:	6821      	ldr	r1, [r4, #0]
 800d382:	6079      	str	r1, [r7, #4]
 800d384:	7808      	ldrb	r0, [r1, #0]
 800d386:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 800d38a:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 800d38e:	f200 8123 	bhi.w	800d5d8 <__svfscanf_r+0x112c>
 800d392:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800d396:	0089      	.short	0x0089
 800d398:	00890121 	.word	0x00890121
 800d39c:	01210121 	.word	0x01210121
 800d3a0:	006f004f 	.word	0x006f004f
 800d3a4:	006f006f 	.word	0x006f006f
 800d3a8:	006f006f 	.word	0x006f006f
 800d3ac:	006f006f 	.word	0x006f006f
 800d3b0:	006f006f 	.word	0x006f006f
 800d3b4:	01210121 	.word	0x01210121
 800d3b8:	01210121 	.word	0x01210121
 800d3bc:	01210121 	.word	0x01210121
 800d3c0:	00af0121 	.word	0x00af0121
 800d3c4:	006d006d 	.word	0x006d006d
 800d3c8:	011e006d 	.word	0x011e006d
 800d3cc:	012100ed 	.word	0x012100ed
 800d3d0:	00d60121 	.word	0x00d60121
 800d3d4:	01210121 	.word	0x01210121
 800d3d8:	01210121 	.word	0x01210121
 800d3dc:	01210090 	.word	0x01210090
 800d3e0:	01210104 	.word	0x01210104
 800d3e4:	01210121 	.word	0x01210121
 800d3e8:	012100f8 	.word	0x012100f8
 800d3ec:	01210121 	.word	0x01210121
 800d3f0:	00fe0073 	.word	0x00fe0073
 800d3f4:	01210121 	.word	0x01210121
 800d3f8:	01210121 	.word	0x01210121
 800d3fc:	01210121 	.word	0x01210121
 800d400:	00af0121 	.word	0x00af0121
 800d404:	006d006d 	.word	0x006d006d
 800d408:	011e006d 	.word	0x011e006d
 800d40c:	012100ed 	.word	0x012100ed
 800d410:	00d60121 	.word	0x00d60121
 800d414:	01210121 	.word	0x01210121
 800d418:	01210121 	.word	0x01210121
 800d41c:	01210090 	.word	0x01210090
 800d420:	01210104 	.word	0x01210104
 800d424:	01210121 	.word	0x01210121
 800d428:	012100f8 	.word	0x012100f8
 800d42c:	01210121 	.word	0x01210121
 800d430:	00fe0073 	.word	0x00fe0073
 800d434:	05f1      	lsls	r1, r6, #23
 800d436:	d51d      	bpl.n	800d474 <__svfscanf_r+0xfc8>
 800d438:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 800d43c:	f10a 0a01 	add.w	sl, sl, #1
 800d440:	b11b      	cbz	r3, 800d44a <__svfscanf_r+0xf9e>
 800d442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d444:	3001      	adds	r0, #1
 800d446:	3b01      	subs	r3, #1
 800d448:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d44a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d44c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d44e:	3001      	adds	r0, #1
 800d450:	6338      	str	r0, [r7, #48]	@ 0x30
 800d452:	6860      	ldr	r0, [r4, #4]
 800d454:	3801      	subs	r0, #1
 800d456:	3901      	subs	r1, #1
 800d458:	2800      	cmp	r0, #0
 800d45a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d45c:	6060      	str	r0, [r4, #4]
 800d45e:	f340 80cc 	ble.w	800d5fa <__svfscanf_r+0x114e>
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	3101      	adds	r1, #1
 800d466:	6021      	str	r1, [r4, #0]
 800d468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d46a:	2900      	cmp	r1, #0
 800d46c:	d188      	bne.n	800d380 <__svfscanf_r+0xed4>
 800d46e:	e052      	b.n	800d516 <__svfscanf_r+0x106a>
 800d470:	0531      	lsls	r1, r6, #20
 800d472:	d550      	bpl.n	800d516 <__svfscanf_r+0x106a>
 800d474:	eb1b 0c08 	adds.w	ip, fp, r8
 800d478:	d041      	beq.n	800d4fe <__svfscanf_r+0x1052>
 800d47a:	e04c      	b.n	800d516 <__svfscanf_r+0x106a>
 800d47c:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 800d480:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800d484:	d147      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d486:	f1ba 0f01 	cmp.w	sl, #1
 800d48a:	d144      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d48c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d48e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d492:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 800d496:	3901      	subs	r1, #1
 800d498:	f809 cb01 	strb.w	ip, [r9], #1
 800d49c:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 800d4a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d4a2:	f04f 0a00 	mov.w	sl, #0
 800d4a6:	e003      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d4a8:	0631      	lsls	r1, r6, #24
 800d4aa:	d534      	bpl.n	800d516 <__svfscanf_r+0x106a>
 800d4ac:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 800d4b0:	f809 0b01 	strb.w	r0, [r9], #1
 800d4b4:	e7c9      	b.n	800d44a <__svfscanf_r+0xf9e>
 800d4b6:	f1bb 0f00 	cmp.w	fp, #0
 800d4ba:	d10c      	bne.n	800d4d6 <__svfscanf_r+0x102a>
 800d4bc:	f1ba 0f00 	cmp.w	sl, #0
 800d4c0:	d10d      	bne.n	800d4de <__svfscanf_r+0x1032>
 800d4c2:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 800d4c6:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 800d4ca:	d108      	bne.n	800d4de <__svfscanf_r+0x1032>
 800d4cc:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 800d4d0:	f04f 0b01 	mov.w	fp, #1
 800d4d4:	e7ec      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d4d6:	f1bb 0f02 	cmp.w	fp, #2
 800d4da:	f000 8088 	beq.w	800d5ee <__svfscanf_r+0x1142>
 800d4de:	f1b8 0f01 	cmp.w	r8, #1
 800d4e2:	d002      	beq.n	800d4ea <__svfscanf_r+0x103e>
 800d4e4:	f1b8 0f04 	cmp.w	r8, #4
 800d4e8:	d115      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d4ea:	f108 0801 	add.w	r8, r8, #1
 800d4ee:	fa5f f888 	uxtb.w	r8, r8
 800d4f2:	e7dd      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d4f4:	0531      	lsls	r1, r6, #20
 800d4f6:	d50b      	bpl.n	800d510 <__svfscanf_r+0x1064>
 800d4f8:	eb1b 0c08 	adds.w	ip, fp, r8
 800d4fc:	d108      	bne.n	800d510 <__svfscanf_r+0x1064>
 800d4fe:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 800d502:	46e0      	mov	r8, ip
 800d504:	46e3      	mov	fp, ip
 800d506:	e7d3      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d508:	0801331e 	.word	0x0801331e
 800d50c:	08010a59 	.word	0x08010a59
 800d510:	f1bb 0f01 	cmp.w	fp, #1
 800d514:	d06e      	beq.n	800d5f4 <__svfscanf_r+0x1148>
 800d516:	f1ba 0f00 	cmp.w	sl, #0
 800d51a:	d001      	beq.n	800d520 <__svfscanf_r+0x1074>
 800d51c:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 800d520:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d524:	f1bb 0f01 	cmp.w	fp, #1
 800d528:	d873      	bhi.n	800d612 <__svfscanf_r+0x1166>
 800d52a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800d52e:	45a9      	cmp	r9, r5
 800d530:	f67f a8bb 	bls.w	800c6aa <__svfscanf_r+0x1fe>
 800d534:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800d538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d53a:	4622      	mov	r2, r4
 800d53c:	f000 fd67 	bl	800e00e <_ungetc_r>
 800d540:	e7f5      	b.n	800d52e <__svfscanf_r+0x1082>
 800d542:	f1b8 0f00 	cmp.w	r8, #0
 800d546:	d10d      	bne.n	800d564 <__svfscanf_r+0x10b8>
 800d548:	f1ba 0f00 	cmp.w	sl, #0
 800d54c:	d1e6      	bne.n	800d51c <__svfscanf_r+0x1070>
 800d54e:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 800d552:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 800d556:	f040 8125 	bne.w	800d7a4 <__svfscanf_r+0x12f8>
 800d55a:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 800d55e:	f04f 0801 	mov.w	r8, #1
 800d562:	e7a5      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d564:	f1b8 0f03 	cmp.w	r8, #3
 800d568:	d0bf      	beq.n	800d4ea <__svfscanf_r+0x103e>
 800d56a:	f1b8 0f05 	cmp.w	r8, #5
 800d56e:	e7bb      	b.n	800d4e8 <__svfscanf_r+0x103c>
 800d570:	0531      	lsls	r1, r6, #20
 800d572:	d502      	bpl.n	800d57a <__svfscanf_r+0x10ce>
 800d574:	eb1b 0c08 	adds.w	ip, fp, r8
 800d578:	d0c1      	beq.n	800d4fe <__svfscanf_r+0x1052>
 800d57a:	f1b8 0f02 	cmp.w	r8, #2
 800d57e:	d1ca      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d580:	f04f 0803 	mov.w	r8, #3
 800d584:	e794      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d586:	f1b8 0f06 	cmp.w	r8, #6
 800d58a:	d1c4      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d58c:	f04f 0807 	mov.w	r8, #7
 800d590:	e78e      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d592:	f1b8 0f07 	cmp.w	r8, #7
 800d596:	d1be      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d598:	f04f 0808 	mov.w	r8, #8
 800d59c:	e788      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d59e:	0531      	lsls	r1, r6, #20
 800d5a0:	d5b9      	bpl.n	800d516 <__svfscanf_r+0x106a>
 800d5a2:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 800d5a6:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 800d5aa:	d005      	beq.n	800d5b8 <__svfscanf_r+0x110c>
 800d5ac:	0571      	lsls	r1, r6, #21
 800d5ae:	d5b2      	bpl.n	800d516 <__svfscanf_r+0x106a>
 800d5b0:	f1ba 0f00 	cmp.w	sl, #0
 800d5b4:	f000 80f6 	beq.w	800d7a4 <__svfscanf_r+0x12f8>
 800d5b8:	05b1      	lsls	r1, r6, #22
 800d5ba:	bf58      	it	pl
 800d5bc:	6939      	ldrpl	r1, [r7, #16]
 800d5be:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 800d5c2:	bf5c      	itt	pl
 800d5c4:	ebaa 0101 	subpl.w	r1, sl, r1
 800d5c8:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 800d5cc:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 800d5d0:	e767      	b.n	800d4a2 <__svfscanf_r+0xff6>
 800d5d2:	0531      	lsls	r1, r6, #20
 800d5d4:	d5e5      	bpl.n	800d5a2 <__svfscanf_r+0x10f6>
 800d5d6:	e74d      	b.n	800d474 <__svfscanf_r+0xfc8>
 800d5d8:	f892 c000 	ldrb.w	ip, [r2]
 800d5dc:	4584      	cmp	ip, r0
 800d5de:	d19a      	bne.n	800d516 <__svfscanf_r+0x106a>
 800d5e0:	05b1      	lsls	r1, r6, #22
 800d5e2:	d598      	bpl.n	800d516 <__svfscanf_r+0x106a>
 800d5e4:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 800d5e8:	f8c7 a010 	str.w	sl, [r7, #16]
 800d5ec:	e760      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d5ee:	f04f 0b03 	mov.w	fp, #3
 800d5f2:	e75d      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d5f4:	f04f 0b02 	mov.w	fp, #2
 800d5f8:	e75a      	b.n	800d4b0 <__svfscanf_r+0x1004>
 800d5fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	e9c7 2300 	strd	r2, r3, [r7]
 800d602:	f000 fc13 	bl	800de2c <__srefill_r>
 800d606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d60a:	2800      	cmp	r0, #0
 800d60c:	f43f af2c 	beq.w	800d468 <__svfscanf_r+0xfbc>
 800d610:	e781      	b.n	800d516 <__svfscanf_r+0x106a>
 800d612:	f108 33ff 	add.w	r3, r8, #4294967295
 800d616:	2b06      	cmp	r3, #6
 800d618:	d827      	bhi.n	800d66a <__svfscanf_r+0x11be>
 800d61a:	f1b8 0f02 	cmp.w	r8, #2
 800d61e:	d834      	bhi.n	800d68a <__svfscanf_r+0x11de>
 800d620:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800d624:	45a9      	cmp	r9, r5
 800d626:	f67f a840 	bls.w	800c6aa <__svfscanf_r+0x1fe>
 800d62a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800d62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d630:	4622      	mov	r2, r4
 800d632:	f000 fcec 	bl	800e00e <_ungetc_r>
 800d636:	e7f5      	b.n	800d624 <__svfscanf_r+0x1178>
 800d638:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d640:	4622      	mov	r2, r4
 800d642:	f000 fce4 	bl	800e00e <_ungetc_r>
 800d646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d648:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d64c:	fa5f fb8b 	uxtb.w	fp, fp
 800d650:	f1bb 0f02 	cmp.w	fp, #2
 800d654:	d1f0      	bne.n	800d638 <__svfscanf_r+0x118c>
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	f1a8 0803 	sub.w	r8, r8, #3
 800d65c:	fa5f f888 	uxtb.w	r8, r8
 800d660:	eba3 0308 	sub.w	r3, r3, r8
 800d664:	eba9 0908 	sub.w	r9, r9, r8
 800d668:	633b      	str	r3, [r7, #48]	@ 0x30
 800d66a:	05f2      	lsls	r2, r6, #23
 800d66c:	d52d      	bpl.n	800d6ca <__svfscanf_r+0x121e>
 800d66e:	0573      	lsls	r3, r6, #21
 800d670:	d50e      	bpl.n	800d690 <__svfscanf_r+0x11e4>
 800d672:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800d676:	45a9      	cmp	r9, r5
 800d678:	f67f a817 	bls.w	800c6aa <__svfscanf_r+0x1fe>
 800d67c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800d680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d682:	4622      	mov	r2, r4
 800d684:	f000 fcc3 	bl	800e00e <_ungetc_r>
 800d688:	e7f5      	b.n	800d676 <__svfscanf_r+0x11ca>
 800d68a:	46c3      	mov	fp, r8
 800d68c:	464b      	mov	r3, r9
 800d68e:	e7db      	b.n	800d648 <__svfscanf_r+0x119c>
 800d690:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800d694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d696:	2965      	cmp	r1, #101	@ 0x65
 800d698:	f109 38ff 	add.w	r8, r9, #4294967295
 800d69c:	f103 3bff 	add.w	fp, r3, #4294967295
 800d6a0:	d00c      	beq.n	800d6bc <__svfscanf_r+0x1210>
 800d6a2:	2945      	cmp	r1, #69	@ 0x45
 800d6a4:	d00a      	beq.n	800d6bc <__svfscanf_r+0x1210>
 800d6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6a8:	4622      	mov	r2, r4
 800d6aa:	f000 fcb0 	bl	800e00e <_ungetc_r>
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b0:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800d6b4:	f1a9 0802 	sub.w	r8, r9, #2
 800d6b8:	f1a3 0b02 	sub.w	fp, r3, #2
 800d6bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6be:	4622      	mov	r2, r4
 800d6c0:	f000 fca5 	bl	800e00e <_ungetc_r>
 800d6c4:	46c1      	mov	r9, r8
 800d6c6:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 800d6ca:	f016 0210 	ands.w	r2, r6, #16
 800d6ce:	f47e af11 	bne.w	800c4f4 <__svfscanf_r+0x48>
 800d6d2:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 800d6d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6da:	f889 2000 	strb.w	r2, [r9]
 800d6de:	d119      	bne.n	800d714 <__svfscanf_r+0x1268>
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	4553      	cmp	r3, sl
 800d6e4:	eba3 020a 	sub.w	r2, r3, sl
 800d6e8:	d121      	bne.n	800d72e <__svfscanf_r+0x1282>
 800d6ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800d6f2:	f003 f8c1 	bl	8010878 <_strtod_r>
 800d6f6:	07f0      	lsls	r0, r6, #31
 800d6f8:	ec59 8b10 	vmov	r8, r9, d0
 800d6fc:	f105 0a04 	add.w	sl, r5, #4
 800d700:	d520      	bpl.n	800d744 <__svfscanf_r+0x1298>
 800d702:	682b      	ldr	r3, [r5, #0]
 800d704:	ed83 0b00 	vstr	d0, [r3]
 800d708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70a:	3301      	adds	r3, #1
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d70e:	4655      	mov	r5, sl
 800d710:	f7fe bef0 	b.w	800c4f4 <__svfscanf_r+0x48>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0e7      	beq.n	800d6ea <__svfscanf_r+0x123e>
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d71e:	230a      	movs	r3, #10
 800d720:	3101      	adds	r1, #1
 800d722:	f003 f929 	bl	8010978 <_strtol_r>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800d72c:	1ac2      	subs	r2, r0, r3
 800d72e:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 800d732:	4599      	cmp	r9, r3
 800d734:	bf28      	it	cs
 800d736:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 800d73a:	491c      	ldr	r1, [pc, #112]	@ (800d7ac <__svfscanf_r+0x1300>)
 800d73c:	4648      	mov	r0, r9
 800d73e:	f7fd fab3 	bl	800aca8 <sprintf>
 800d742:	e7d2      	b.n	800d6ea <__svfscanf_r+0x123e>
 800d744:	07b1      	lsls	r1, r6, #30
 800d746:	682d      	ldr	r5, [r5, #0]
 800d748:	d502      	bpl.n	800d750 <__svfscanf_r+0x12a4>
 800d74a:	ed85 0b00 	vstr	d0, [r5]
 800d74e:	e7db      	b.n	800d708 <__svfscanf_r+0x125c>
 800d750:	4642      	mov	r2, r8
 800d752:	464b      	mov	r3, r9
 800d754:	4640      	mov	r0, r8
 800d756:	4649      	mov	r1, r9
 800d758:	f7f3 fa10 	bl	8000b7c <__aeabi_dcmpun>
 800d75c:	b128      	cbz	r0, 800d76a <__svfscanf_r+0x12be>
 800d75e:	4814      	ldr	r0, [pc, #80]	@ (800d7b0 <__svfscanf_r+0x1304>)
 800d760:	f000 fdb2 	bl	800e2c8 <nanf>
 800d764:	ed85 0a00 	vstr	s0, [r5]
 800d768:	e7ce      	b.n	800d708 <__svfscanf_r+0x125c>
 800d76a:	4640      	mov	r0, r8
 800d76c:	4649      	mov	r1, r9
 800d76e:	f7f3 fa63 	bl	8000c38 <__aeabi_d2f>
 800d772:	6028      	str	r0, [r5, #0]
 800d774:	e7c8      	b.n	800d708 <__svfscanf_r+0x125c>
 800d776:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d77a:	6818      	ldr	r0, [r3, #0]
 800d77c:	f7fc fe6a 	bl	800a454 <free>
 800d780:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d784:	3401      	adds	r4, #1
 800d786:	601e      	str	r6, [r3, #0]
 800d788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d78a:	681d      	ldr	r5, [r3, #0]
 800d78c:	88db      	ldrh	r3, [r3, #6]
 800d78e:	42a3      	cmp	r3, r4
 800d790:	dcf1      	bgt.n	800d776 <__svfscanf_r+0x12ca>
 800d792:	f7fe bf99 	b.w	800c6c8 <__svfscanf_r+0x21c>
 800d796:	2400      	movs	r4, #0
 800d798:	4626      	mov	r6, r4
 800d79a:	e7f5      	b.n	800d788 <__svfscanf_r+0x12dc>
 800d79c:	f7fc fe5a 	bl	800a454 <free>
 800d7a0:	f7fe bf97 	b.w	800c6d2 <__svfscanf_r+0x226>
 800d7a4:	f04f 0a00 	mov.w	sl, #0
 800d7a8:	e6ba      	b.n	800d520 <__svfscanf_r+0x1074>
 800d7aa:	bf00      	nop
 800d7ac:	08013318 	.word	0x08013318
 800d7b0:	080136a4 	.word	0x080136a4

0800d7b4 <_vfscanf_r>:
 800d7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b8:	460d      	mov	r5, r1
 800d7ba:	4616      	mov	r6, r2
 800d7bc:	461f      	mov	r7, r3
 800d7be:	4604      	mov	r4, r0
 800d7c0:	b118      	cbz	r0, 800d7ca <_vfscanf_r+0x16>
 800d7c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d7c4:	b90b      	cbnz	r3, 800d7ca <_vfscanf_r+0x16>
 800d7c6:	f7fd f91f 	bl	800aa08 <__sinit>
 800d7ca:	463b      	mov	r3, r7
 800d7cc:	4632      	mov	r2, r6
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d6:	f7fe be69 	b.w	800c4ac <__svfscanf_r>

0800d7da <_fclose_r>:
 800d7da:	b570      	push	{r4, r5, r6, lr}
 800d7dc:	4605      	mov	r5, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	b1b1      	cbz	r1, 800d810 <_fclose_r+0x36>
 800d7e2:	b118      	cbz	r0, 800d7ec <_fclose_r+0x12>
 800d7e4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d7e6:	b90b      	cbnz	r3, 800d7ec <_fclose_r+0x12>
 800d7e8:	f7fd f90e 	bl	800aa08 <__sinit>
 800d7ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7ee:	07de      	lsls	r6, r3, #31
 800d7f0:	d405      	bmi.n	800d7fe <_fclose_r+0x24>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	0598      	lsls	r0, r3, #22
 800d7f6:	d402      	bmi.n	800d7fe <_fclose_r+0x24>
 800d7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7fa:	f7fd fb43 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800d7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d802:	b943      	cbnz	r3, 800d816 <_fclose_r+0x3c>
 800d804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d806:	07d9      	lsls	r1, r3, #31
 800d808:	d402      	bmi.n	800d810 <_fclose_r+0x36>
 800d80a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d80c:	f7fd fb3b 	bl	800ae86 <__retarget_lock_release_recursive>
 800d810:	2600      	movs	r6, #0
 800d812:	4630      	mov	r0, r6
 800d814:	bd70      	pop	{r4, r5, r6, pc}
 800d816:	4621      	mov	r1, r4
 800d818:	4628      	mov	r0, r5
 800d81a:	f000 f833 	bl	800d884 <__sflush_r>
 800d81e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d820:	4606      	mov	r6, r0
 800d822:	b133      	cbz	r3, 800d832 <_fclose_r+0x58>
 800d824:	69e1      	ldr	r1, [r4, #28]
 800d826:	4628      	mov	r0, r5
 800d828:	4798      	blx	r3
 800d82a:	2800      	cmp	r0, #0
 800d82c:	bfb8      	it	lt
 800d82e:	f04f 36ff 	movlt.w	r6, #4294967295
 800d832:	89a3      	ldrh	r3, [r4, #12]
 800d834:	061a      	lsls	r2, r3, #24
 800d836:	d503      	bpl.n	800d840 <_fclose_r+0x66>
 800d838:	6921      	ldr	r1, [r4, #16]
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7fd fb96 	bl	800af6c <_free_r>
 800d840:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d842:	b141      	cbz	r1, 800d856 <_fclose_r+0x7c>
 800d844:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800d848:	4299      	cmp	r1, r3
 800d84a:	d002      	beq.n	800d852 <_fclose_r+0x78>
 800d84c:	4628      	mov	r0, r5
 800d84e:	f7fd fb8d 	bl	800af6c <_free_r>
 800d852:	2300      	movs	r3, #0
 800d854:	6323      	str	r3, [r4, #48]	@ 0x30
 800d856:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d858:	b121      	cbz	r1, 800d864 <_fclose_r+0x8a>
 800d85a:	4628      	mov	r0, r5
 800d85c:	f7fd fb86 	bl	800af6c <_free_r>
 800d860:	2300      	movs	r3, #0
 800d862:	6463      	str	r3, [r4, #68]	@ 0x44
 800d864:	f7fd f8c4 	bl	800a9f0 <__sfp_lock_acquire>
 800d868:	2300      	movs	r3, #0
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d86e:	07db      	lsls	r3, r3, #31
 800d870:	d402      	bmi.n	800d878 <_fclose_r+0x9e>
 800d872:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d874:	f7fd fb07 	bl	800ae86 <__retarget_lock_release_recursive>
 800d878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d87a:	f7fd fb02 	bl	800ae82 <__retarget_lock_close_recursive>
 800d87e:	f7fd f8bd 	bl	800a9fc <__sfp_lock_release>
 800d882:	e7c6      	b.n	800d812 <_fclose_r+0x38>

0800d884 <__sflush_r>:
 800d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d888:	4605      	mov	r5, r0
 800d88a:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800d88e:	0706      	lsls	r6, r0, #28
 800d890:	460c      	mov	r4, r1
 800d892:	d457      	bmi.n	800d944 <__sflush_r+0xc0>
 800d894:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800d898:	818b      	strh	r3, [r1, #12]
 800d89a:	684b      	ldr	r3, [r1, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	dc02      	bgt.n	800d8a6 <__sflush_r+0x22>
 800d8a0:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	dd4c      	ble.n	800d940 <__sflush_r+0xbc>
 800d8a6:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8a8:	2e00      	cmp	r6, #0
 800d8aa:	d049      	beq.n	800d940 <__sflush_r+0xbc>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800d8b2:	682f      	ldr	r7, [r5, #0]
 800d8b4:	69e1      	ldr	r1, [r4, #28]
 800d8b6:	602b      	str	r3, [r5, #0]
 800d8b8:	d034      	beq.n	800d924 <__sflush_r+0xa0>
 800d8ba:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800d8bc:	89a3      	ldrh	r3, [r4, #12]
 800d8be:	0759      	lsls	r1, r3, #29
 800d8c0:	d505      	bpl.n	800d8ce <__sflush_r+0x4a>
 800d8c2:	6863      	ldr	r3, [r4, #4]
 800d8c4:	1ad2      	subs	r2, r2, r3
 800d8c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d8c8:	b10b      	cbz	r3, 800d8ce <__sflush_r+0x4a>
 800d8ca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d8cc:	1ad2      	subs	r2, r2, r3
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8d2:	69e1      	ldr	r1, [r4, #28]
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	47b0      	blx	r6
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d106      	bne.n	800d8ea <__sflush_r+0x66>
 800d8dc:	682a      	ldr	r2, [r5, #0]
 800d8de:	2a1d      	cmp	r2, #29
 800d8e0:	d848      	bhi.n	800d974 <__sflush_r+0xf0>
 800d8e2:	4b2b      	ldr	r3, [pc, #172]	@ (800d990 <__sflush_r+0x10c>)
 800d8e4:	4113      	asrs	r3, r2
 800d8e6:	07de      	lsls	r6, r3, #31
 800d8e8:	d444      	bmi.n	800d974 <__sflush_r+0xf0>
 800d8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d8f2:	81a2      	strh	r2, [r4, #12]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	6062      	str	r2, [r4, #4]
 800d8f8:	04d9      	lsls	r1, r3, #19
 800d8fa:	6922      	ldr	r2, [r4, #16]
 800d8fc:	6022      	str	r2, [r4, #0]
 800d8fe:	d504      	bpl.n	800d90a <__sflush_r+0x86>
 800d900:	1c42      	adds	r2, r0, #1
 800d902:	d101      	bne.n	800d908 <__sflush_r+0x84>
 800d904:	682b      	ldr	r3, [r5, #0]
 800d906:	b903      	cbnz	r3, 800d90a <__sflush_r+0x86>
 800d908:	6520      	str	r0, [r4, #80]	@ 0x50
 800d90a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d90c:	602f      	str	r7, [r5, #0]
 800d90e:	b1b9      	cbz	r1, 800d940 <__sflush_r+0xbc>
 800d910:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800d914:	4299      	cmp	r1, r3
 800d916:	d002      	beq.n	800d91e <__sflush_r+0x9a>
 800d918:	4628      	mov	r0, r5
 800d91a:	f7fd fb27 	bl	800af6c <_free_r>
 800d91e:	2300      	movs	r3, #0
 800d920:	6323      	str	r3, [r4, #48]	@ 0x30
 800d922:	e00d      	b.n	800d940 <__sflush_r+0xbc>
 800d924:	2301      	movs	r3, #1
 800d926:	4628      	mov	r0, r5
 800d928:	47b0      	blx	r6
 800d92a:	4602      	mov	r2, r0
 800d92c:	1c50      	adds	r0, r2, #1
 800d92e:	d1c5      	bne.n	800d8bc <__sflush_r+0x38>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d0c2      	beq.n	800d8bc <__sflush_r+0x38>
 800d936:	2b1d      	cmp	r3, #29
 800d938:	d001      	beq.n	800d93e <__sflush_r+0xba>
 800d93a:	2b16      	cmp	r3, #22
 800d93c:	d11a      	bne.n	800d974 <__sflush_r+0xf0>
 800d93e:	602f      	str	r7, [r5, #0]
 800d940:	2000      	movs	r0, #0
 800d942:	e01e      	b.n	800d982 <__sflush_r+0xfe>
 800d944:	690f      	ldr	r7, [r1, #16]
 800d946:	2f00      	cmp	r7, #0
 800d948:	d0fa      	beq.n	800d940 <__sflush_r+0xbc>
 800d94a:	0783      	lsls	r3, r0, #30
 800d94c:	680e      	ldr	r6, [r1, #0]
 800d94e:	bf08      	it	eq
 800d950:	694b      	ldreq	r3, [r1, #20]
 800d952:	600f      	str	r7, [r1, #0]
 800d954:	bf18      	it	ne
 800d956:	2300      	movne	r3, #0
 800d958:	eba6 0807 	sub.w	r8, r6, r7
 800d95c:	608b      	str	r3, [r1, #8]
 800d95e:	f1b8 0f00 	cmp.w	r8, #0
 800d962:	dded      	ble.n	800d940 <__sflush_r+0xbc>
 800d964:	69e1      	ldr	r1, [r4, #28]
 800d966:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800d968:	4643      	mov	r3, r8
 800d96a:	463a      	mov	r2, r7
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b0      	blx	r6
 800d970:	2800      	cmp	r0, #0
 800d972:	dc08      	bgt.n	800d986 <__sflush_r+0x102>
 800d974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97c:	81a3      	strh	r3, [r4, #12]
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295
 800d982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d986:	4407      	add	r7, r0
 800d988:	eba8 0800 	sub.w	r8, r8, r0
 800d98c:	e7e7      	b.n	800d95e <__sflush_r+0xda>
 800d98e:	bf00      	nop
 800d990:	dfbffffe 	.word	0xdfbffffe

0800d994 <_fflush_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	460c      	mov	r4, r1
 800d998:	4605      	mov	r5, r0
 800d99a:	b118      	cbz	r0, 800d9a4 <_fflush_r+0x10>
 800d99c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d99e:	b90b      	cbnz	r3, 800d9a4 <_fflush_r+0x10>
 800d9a0:	f7fd f832 	bl	800aa08 <__sinit>
 800d9a4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800d9a8:	b1b8      	cbz	r0, 800d9da <_fflush_r+0x46>
 800d9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9ac:	07db      	lsls	r3, r3, #31
 800d9ae:	d404      	bmi.n	800d9ba <_fflush_r+0x26>
 800d9b0:	0581      	lsls	r1, r0, #22
 800d9b2:	d402      	bmi.n	800d9ba <_fflush_r+0x26>
 800d9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9b6:	f7fd fa65 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	4621      	mov	r1, r4
 800d9be:	f7ff ff61 	bl	800d884 <__sflush_r>
 800d9c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9c4:	07da      	lsls	r2, r3, #31
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	d405      	bmi.n	800d9d6 <_fflush_r+0x42>
 800d9ca:	89a3      	ldrh	r3, [r4, #12]
 800d9cc:	059b      	lsls	r3, r3, #22
 800d9ce:	d402      	bmi.n	800d9d6 <_fflush_r+0x42>
 800d9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9d2:	f7fd fa58 	bl	800ae86 <__retarget_lock_release_recursive>
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	bd38      	pop	{r3, r4, r5, pc}
 800d9da:	4605      	mov	r5, r0
 800d9dc:	e7fb      	b.n	800d9d6 <_fflush_r+0x42>

0800d9de <_fread_r>:
 800d9de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e2:	4699      	mov	r9, r3
 800d9e4:	4693      	mov	fp, r2
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	464a      	mov	r2, r9
 800d9ea:	4353      	muls	r3, r2
 800d9ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d9ee:	4682      	mov	sl, r0
 800d9f0:	460f      	mov	r7, r1
 800d9f2:	4698      	mov	r8, r3
 800d9f4:	d051      	beq.n	800da9a <_fread_r+0xbc>
 800d9f6:	b118      	cbz	r0, 800da00 <_fread_r+0x22>
 800d9f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d9fa:	b90b      	cbnz	r3, 800da00 <_fread_r+0x22>
 800d9fc:	f7fd f804 	bl	800aa08 <__sinit>
 800da00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da02:	07db      	lsls	r3, r3, #31
 800da04:	d405      	bmi.n	800da12 <_fread_r+0x34>
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	059e      	lsls	r6, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_fread_r+0x34>
 800da0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da0e:	f7fd fa39 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800da12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da16:	049d      	lsls	r5, r3, #18
 800da18:	d406      	bmi.n	800da28 <_fread_r+0x4a>
 800da1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800da26:	6663      	str	r3, [r4, #100]	@ 0x64
 800da28:	6863      	ldr	r3, [r4, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	da01      	bge.n	800da32 <_fread_r+0x54>
 800da2e:	2300      	movs	r3, #0
 800da30:	6063      	str	r3, [r4, #4]
 800da32:	4646      	mov	r6, r8
 800da34:	e9d4 1500 	ldrd	r1, r5, [r4]
 800da38:	42ae      	cmp	r6, r5
 800da3a:	d811      	bhi.n	800da60 <_fread_r+0x82>
 800da3c:	4632      	mov	r2, r6
 800da3e:	4638      	mov	r0, r7
 800da40:	f000 fc34 	bl	800e2ac <memcpy>
 800da44:	6863      	ldr	r3, [r4, #4]
 800da46:	1b9b      	subs	r3, r3, r6
 800da48:	6063      	str	r3, [r4, #4]
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	4433      	add	r3, r6
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da52:	07da      	lsls	r2, r3, #31
 800da54:	d402      	bmi.n	800da5c <_fread_r+0x7e>
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	059b      	lsls	r3, r3, #22
 800da5a:	d524      	bpl.n	800daa6 <_fread_r+0xc8>
 800da5c:	46c8      	mov	r8, r9
 800da5e:	e01c      	b.n	800da9a <_fread_r+0xbc>
 800da60:	462a      	mov	r2, r5
 800da62:	4638      	mov	r0, r7
 800da64:	f000 fc22 	bl	800e2ac <memcpy>
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	442b      	add	r3, r5
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	4621      	mov	r1, r4
 800da70:	1b73      	subs	r3, r6, r5
 800da72:	4650      	mov	r0, sl
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	f000 f9d9 	bl	800de2c <__srefill_r>
 800da7a:	442f      	add	r7, r5
 800da7c:	9b01      	ldr	r3, [sp, #4]
 800da7e:	b180      	cbz	r0, 800daa2 <_fread_r+0xc4>
 800da80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da82:	07d8      	lsls	r0, r3, #31
 800da84:	d405      	bmi.n	800da92 <_fread_r+0xb4>
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	0599      	lsls	r1, r3, #22
 800da8a:	d402      	bmi.n	800da92 <_fread_r+0xb4>
 800da8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da8e:	f7fd f9fa 	bl	800ae86 <__retarget_lock_release_recursive>
 800da92:	4445      	add	r5, r8
 800da94:	1bad      	subs	r5, r5, r6
 800da96:	fbb5 f8fb 	udiv	r8, r5, fp
 800da9a:	4640      	mov	r0, r8
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa2:	461e      	mov	r6, r3
 800daa4:	e7c6      	b.n	800da34 <_fread_r+0x56>
 800daa6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daa8:	f7fd f9ed 	bl	800ae86 <__retarget_lock_release_recursive>
 800daac:	e7d6      	b.n	800da5c <_fread_r+0x7e>
	...

0800dab0 <__sfvwrite_r>:
 800dab0:	6893      	ldr	r3, [r2, #8]
 800dab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab6:	4606      	mov	r6, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	4691      	mov	r9, r2
 800dabc:	b91b      	cbnz	r3, 800dac6 <__sfvwrite_r+0x16>
 800dabe:	2000      	movs	r0, #0
 800dac0:	b003      	add	sp, #12
 800dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac6:	898b      	ldrh	r3, [r1, #12]
 800dac8:	0718      	lsls	r0, r3, #28
 800daca:	d550      	bpl.n	800db6e <__sfvwrite_r+0xbe>
 800dacc:	690b      	ldr	r3, [r1, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d04d      	beq.n	800db6e <__sfvwrite_r+0xbe>
 800dad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad6:	f8d9 8000 	ldr.w	r8, [r9]
 800dada:	f013 0702 	ands.w	r7, r3, #2
 800dade:	d16b      	bne.n	800dbb8 <__sfvwrite_r+0x108>
 800dae0:	f013 0301 	ands.w	r3, r3, #1
 800dae4:	f000 809c 	beq.w	800dc20 <__sfvwrite_r+0x170>
 800dae8:	4638      	mov	r0, r7
 800daea:	46ba      	mov	sl, r7
 800daec:	46bb      	mov	fp, r7
 800daee:	f1bb 0f00 	cmp.w	fp, #0
 800daf2:	f000 8103 	beq.w	800dcfc <__sfvwrite_r+0x24c>
 800daf6:	b950      	cbnz	r0, 800db0e <__sfvwrite_r+0x5e>
 800daf8:	465a      	mov	r2, fp
 800dafa:	210a      	movs	r1, #10
 800dafc:	4650      	mov	r0, sl
 800dafe:	f7f2 fb97 	bl	8000230 <memchr>
 800db02:	2800      	cmp	r0, #0
 800db04:	f000 8100 	beq.w	800dd08 <__sfvwrite_r+0x258>
 800db08:	3001      	adds	r0, #1
 800db0a:	eba0 070a 	sub.w	r7, r0, sl
 800db0e:	6820      	ldr	r0, [r4, #0]
 800db10:	6921      	ldr	r1, [r4, #16]
 800db12:	68a5      	ldr	r5, [r4, #8]
 800db14:	6963      	ldr	r3, [r4, #20]
 800db16:	455f      	cmp	r7, fp
 800db18:	463a      	mov	r2, r7
 800db1a:	bf28      	it	cs
 800db1c:	465a      	movcs	r2, fp
 800db1e:	4288      	cmp	r0, r1
 800db20:	f240 80f5 	bls.w	800dd0e <__sfvwrite_r+0x25e>
 800db24:	441d      	add	r5, r3
 800db26:	42aa      	cmp	r2, r5
 800db28:	f340 80f1 	ble.w	800dd0e <__sfvwrite_r+0x25e>
 800db2c:	4651      	mov	r1, sl
 800db2e:	462a      	mov	r2, r5
 800db30:	f000 fb4e 	bl	800e1d0 <memmove>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	442b      	add	r3, r5
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	4621      	mov	r1, r4
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7ff ff29 	bl	800d994 <_fflush_r>
 800db42:	2800      	cmp	r0, #0
 800db44:	d167      	bne.n	800dc16 <__sfvwrite_r+0x166>
 800db46:	1b7f      	subs	r7, r7, r5
 800db48:	f040 80f9 	bne.w	800dd3e <__sfvwrite_r+0x28e>
 800db4c:	4621      	mov	r1, r4
 800db4e:	4630      	mov	r0, r6
 800db50:	f7ff ff20 	bl	800d994 <_fflush_r>
 800db54:	2800      	cmp	r0, #0
 800db56:	d15e      	bne.n	800dc16 <__sfvwrite_r+0x166>
 800db58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800db5c:	1b5b      	subs	r3, r3, r5
 800db5e:	44aa      	add	sl, r5
 800db60:	ebab 0b05 	sub.w	fp, fp, r5
 800db64:	f8c9 3008 	str.w	r3, [r9, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1c0      	bne.n	800daee <__sfvwrite_r+0x3e>
 800db6c:	e7a7      	b.n	800dabe <__sfvwrite_r+0xe>
 800db6e:	4621      	mov	r1, r4
 800db70:	4630      	mov	r0, r6
 800db72:	f000 fad7 	bl	800e124 <__swsetup_r>
 800db76:	2800      	cmp	r0, #0
 800db78:	d0ab      	beq.n	800dad2 <__sfvwrite_r+0x22>
 800db7a:	f04f 30ff 	mov.w	r0, #4294967295
 800db7e:	e79f      	b.n	800dac0 <__sfvwrite_r+0x10>
 800db80:	e9d8 a500 	ldrd	sl, r5, [r8]
 800db84:	f108 0808 	add.w	r8, r8, #8
 800db88:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800db8c:	69e1      	ldr	r1, [r4, #28]
 800db8e:	2d00      	cmp	r5, #0
 800db90:	d0f6      	beq.n	800db80 <__sfvwrite_r+0xd0>
 800db92:	42bd      	cmp	r5, r7
 800db94:	462b      	mov	r3, r5
 800db96:	4652      	mov	r2, sl
 800db98:	bf28      	it	cs
 800db9a:	463b      	movcs	r3, r7
 800db9c:	4630      	mov	r0, r6
 800db9e:	47d8      	blx	fp
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dd38      	ble.n	800dc16 <__sfvwrite_r+0x166>
 800dba4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dba8:	1a1b      	subs	r3, r3, r0
 800dbaa:	4482      	add	sl, r0
 800dbac:	1a2d      	subs	r5, r5, r0
 800dbae:	f8c9 3008 	str.w	r3, [r9, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1e8      	bne.n	800db88 <__sfvwrite_r+0xd8>
 800dbb6:	e782      	b.n	800dabe <__sfvwrite_r+0xe>
 800dbb8:	f04f 0a00 	mov.w	sl, #0
 800dbbc:	4f61      	ldr	r7, [pc, #388]	@ (800dd44 <__sfvwrite_r+0x294>)
 800dbbe:	4655      	mov	r5, sl
 800dbc0:	e7e2      	b.n	800db88 <__sfvwrite_r+0xd8>
 800dbc2:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800dbc6:	f108 0808 	add.w	r8, r8, #8
 800dbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbce:	6820      	ldr	r0, [r4, #0]
 800dbd0:	68a2      	ldr	r2, [r4, #8]
 800dbd2:	f1ba 0f00 	cmp.w	sl, #0
 800dbd6:	d0f4      	beq.n	800dbc2 <__sfvwrite_r+0x112>
 800dbd8:	0599      	lsls	r1, r3, #22
 800dbda:	d563      	bpl.n	800dca4 <__sfvwrite_r+0x1f4>
 800dbdc:	4552      	cmp	r2, sl
 800dbde:	d836      	bhi.n	800dc4e <__sfvwrite_r+0x19e>
 800dbe0:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800dbe4:	d033      	beq.n	800dc4e <__sfvwrite_r+0x19e>
 800dbe6:	6921      	ldr	r1, [r4, #16]
 800dbe8:	6965      	ldr	r5, [r4, #20]
 800dbea:	eba0 0b01 	sub.w	fp, r0, r1
 800dbee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbf6:	f10b 0201 	add.w	r2, fp, #1
 800dbfa:	106d      	asrs	r5, r5, #1
 800dbfc:	4452      	add	r2, sl
 800dbfe:	4295      	cmp	r5, r2
 800dc00:	bf38      	it	cc
 800dc02:	4615      	movcc	r5, r2
 800dc04:	055b      	lsls	r3, r3, #21
 800dc06:	d53d      	bpl.n	800dc84 <__sfvwrite_r+0x1d4>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f7fc fc2a 	bl	800a464 <_malloc_r>
 800dc10:	b948      	cbnz	r0, 800dc26 <__sfvwrite_r+0x176>
 800dc12:	230c      	movs	r3, #12
 800dc14:	6033      	str	r3, [r6, #0]
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	e7ac      	b.n	800db7a <__sfvwrite_r+0xca>
 800dc20:	461f      	mov	r7, r3
 800dc22:	469a      	mov	sl, r3
 800dc24:	e7d1      	b.n	800dbca <__sfvwrite_r+0x11a>
 800dc26:	465a      	mov	r2, fp
 800dc28:	6921      	ldr	r1, [r4, #16]
 800dc2a:	9001      	str	r0, [sp, #4]
 800dc2c:	f000 fb3e 	bl	800e2ac <memcpy>
 800dc30:	89a2      	ldrh	r2, [r4, #12]
 800dc32:	9b01      	ldr	r3, [sp, #4]
 800dc34:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800dc38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dc3c:	81a2      	strh	r2, [r4, #12]
 800dc3e:	6123      	str	r3, [r4, #16]
 800dc40:	6165      	str	r5, [r4, #20]
 800dc42:	445b      	add	r3, fp
 800dc44:	eba5 050b 	sub.w	r5, r5, fp
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	60a5      	str	r5, [r4, #8]
 800dc4e:	4552      	cmp	r2, sl
 800dc50:	bf28      	it	cs
 800dc52:	4652      	movcs	r2, sl
 800dc54:	6820      	ldr	r0, [r4, #0]
 800dc56:	9201      	str	r2, [sp, #4]
 800dc58:	4639      	mov	r1, r7
 800dc5a:	f000 fab9 	bl	800e1d0 <memmove>
 800dc5e:	68a3      	ldr	r3, [r4, #8]
 800dc60:	9a01      	ldr	r2, [sp, #4]
 800dc62:	1a9b      	subs	r3, r3, r2
 800dc64:	60a3      	str	r3, [r4, #8]
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	4413      	add	r3, r2
 800dc6a:	4655      	mov	r5, sl
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dc72:	1b5b      	subs	r3, r3, r5
 800dc74:	442f      	add	r7, r5
 800dc76:	ebaa 0a05 	sub.w	sl, sl, r5
 800dc7a:	f8c9 3008 	str.w	r3, [r9, #8]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1a3      	bne.n	800dbca <__sfvwrite_r+0x11a>
 800dc82:	e71c      	b.n	800dabe <__sfvwrite_r+0xe>
 800dc84:	462a      	mov	r2, r5
 800dc86:	4630      	mov	r0, r6
 800dc88:	f001 fe4c 	bl	800f924 <_realloc_r>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d1d5      	bne.n	800dc3e <__sfvwrite_r+0x18e>
 800dc92:	6921      	ldr	r1, [r4, #16]
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7fd f969 	bl	800af6c <_free_r>
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	e7b6      	b.n	800dc12 <__sfvwrite_r+0x162>
 800dca4:	6923      	ldr	r3, [r4, #16]
 800dca6:	4283      	cmp	r3, r0
 800dca8:	d302      	bcc.n	800dcb0 <__sfvwrite_r+0x200>
 800dcaa:	6961      	ldr	r1, [r4, #20]
 800dcac:	4551      	cmp	r1, sl
 800dcae:	d915      	bls.n	800dcdc <__sfvwrite_r+0x22c>
 800dcb0:	4552      	cmp	r2, sl
 800dcb2:	bf28      	it	cs
 800dcb4:	4652      	movcs	r2, sl
 800dcb6:	4639      	mov	r1, r7
 800dcb8:	4615      	mov	r5, r2
 800dcba:	f000 fa89 	bl	800e1d0 <memmove>
 800dcbe:	68a3      	ldr	r3, [r4, #8]
 800dcc0:	6822      	ldr	r2, [r4, #0]
 800dcc2:	1b5b      	subs	r3, r3, r5
 800dcc4:	442a      	add	r2, r5
 800dcc6:	60a3      	str	r3, [r4, #8]
 800dcc8:	6022      	str	r2, [r4, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d1cf      	bne.n	800dc6e <__sfvwrite_r+0x1be>
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f7ff fe5f 	bl	800d994 <_fflush_r>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d0c9      	beq.n	800dc6e <__sfvwrite_r+0x1be>
 800dcda:	e79c      	b.n	800dc16 <__sfvwrite_r+0x166>
 800dcdc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dce0:	4553      	cmp	r3, sl
 800dce2:	bf28      	it	cs
 800dce4:	4653      	movcs	r3, sl
 800dce6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800dce8:	fb93 f3f1 	sdiv	r3, r3, r1
 800dcec:	463a      	mov	r2, r7
 800dcee:	434b      	muls	r3, r1
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	69e1      	ldr	r1, [r4, #28]
 800dcf4:	47a8      	blx	r5
 800dcf6:	1e05      	subs	r5, r0, #0
 800dcf8:	dcb9      	bgt.n	800dc6e <__sfvwrite_r+0x1be>
 800dcfa:	e78c      	b.n	800dc16 <__sfvwrite_r+0x166>
 800dcfc:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800dd00:	2000      	movs	r0, #0
 800dd02:	f108 0808 	add.w	r8, r8, #8
 800dd06:	e6f2      	b.n	800daee <__sfvwrite_r+0x3e>
 800dd08:	f10b 0701 	add.w	r7, fp, #1
 800dd0c:	e6ff      	b.n	800db0e <__sfvwrite_r+0x5e>
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	dc08      	bgt.n	800dd24 <__sfvwrite_r+0x274>
 800dd12:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800dd14:	69e1      	ldr	r1, [r4, #28]
 800dd16:	4652      	mov	r2, sl
 800dd18:	4630      	mov	r0, r6
 800dd1a:	47a8      	blx	r5
 800dd1c:	1e05      	subs	r5, r0, #0
 800dd1e:	f73f af12 	bgt.w	800db46 <__sfvwrite_r+0x96>
 800dd22:	e778      	b.n	800dc16 <__sfvwrite_r+0x166>
 800dd24:	4651      	mov	r1, sl
 800dd26:	9201      	str	r2, [sp, #4]
 800dd28:	f000 fa52 	bl	800e1d0 <memmove>
 800dd2c:	9a01      	ldr	r2, [sp, #4]
 800dd2e:	68a3      	ldr	r3, [r4, #8]
 800dd30:	1a9b      	subs	r3, r3, r2
 800dd32:	60a3      	str	r3, [r4, #8]
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	4413      	add	r3, r2
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	4615      	mov	r5, r2
 800dd3c:	e703      	b.n	800db46 <__sfvwrite_r+0x96>
 800dd3e:	2001      	movs	r0, #1
 800dd40:	e70a      	b.n	800db58 <__sfvwrite_r+0xa8>
 800dd42:	bf00      	nop
 800dd44:	7ffffc00 	.word	0x7ffffc00

0800dd48 <__swhatbuf_r>:
 800dd48:	b570      	push	{r4, r5, r6, lr}
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd50:	2900      	cmp	r1, #0
 800dd52:	b096      	sub	sp, #88	@ 0x58
 800dd54:	4615      	mov	r5, r2
 800dd56:	461e      	mov	r6, r3
 800dd58:	da07      	bge.n	800dd6a <__swhatbuf_r+0x22>
 800dd5a:	89a1      	ldrh	r1, [r4, #12]
 800dd5c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800dd60:	d117      	bne.n	800dd92 <__swhatbuf_r+0x4a>
 800dd62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd66:	4608      	mov	r0, r1
 800dd68:	e00f      	b.n	800dd8a <__swhatbuf_r+0x42>
 800dd6a:	466a      	mov	r2, sp
 800dd6c:	f000 fa68 	bl	800e240 <_fstat_r>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	dbf2      	blt.n	800dd5a <__swhatbuf_r+0x12>
 800dd74:	9901      	ldr	r1, [sp, #4]
 800dd76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd7e:	4259      	negs	r1, r3
 800dd80:	4159      	adcs	r1, r3
 800dd82:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dd86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd8a:	6031      	str	r1, [r6, #0]
 800dd8c:	602b      	str	r3, [r5, #0]
 800dd8e:	b016      	add	sp, #88	@ 0x58
 800dd90:	bd70      	pop	{r4, r5, r6, pc}
 800dd92:	2100      	movs	r1, #0
 800dd94:	2340      	movs	r3, #64	@ 0x40
 800dd96:	e7e6      	b.n	800dd66 <__swhatbuf_r+0x1e>

0800dd98 <__smakebuf_r>:
 800dd98:	898b      	ldrh	r3, [r1, #12]
 800dd9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd9c:	079d      	lsls	r5, r3, #30
 800dd9e:	4606      	mov	r6, r0
 800dda0:	460c      	mov	r4, r1
 800dda2:	d507      	bpl.n	800ddb4 <__smakebuf_r+0x1c>
 800dda4:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	6123      	str	r3, [r4, #16]
 800ddac:	2301      	movs	r3, #1
 800ddae:	6163      	str	r3, [r4, #20]
 800ddb0:	b003      	add	sp, #12
 800ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb4:	ab01      	add	r3, sp, #4
 800ddb6:	466a      	mov	r2, sp
 800ddb8:	f7ff ffc6 	bl	800dd48 <__swhatbuf_r>
 800ddbc:	9f00      	ldr	r7, [sp, #0]
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f7fc fb4e 	bl	800a464 <_malloc_r>
 800ddc8:	b948      	cbnz	r0, 800ddde <__smakebuf_r+0x46>
 800ddca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddce:	059a      	lsls	r2, r3, #22
 800ddd0:	d4ee      	bmi.n	800ddb0 <__smakebuf_r+0x18>
 800ddd2:	f023 0303 	bic.w	r3, r3, #3
 800ddd6:	f043 0302 	orr.w	r3, r3, #2
 800ddda:	81a3      	strh	r3, [r4, #12]
 800dddc:	e7e2      	b.n	800dda4 <__smakebuf_r+0xc>
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	6020      	str	r0, [r4, #0]
 800dde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddee:	b15b      	cbz	r3, 800de08 <__smakebuf_r+0x70>
 800ddf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f000 fa35 	bl	800e264 <_isatty_r>
 800ddfa:	b128      	cbz	r0, 800de08 <__smakebuf_r+0x70>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	f023 0303 	bic.w	r3, r3, #3
 800de02:	f043 0301 	orr.w	r3, r3, #1
 800de06:	81a3      	strh	r3, [r4, #12]
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	431d      	orrs	r5, r3
 800de0c:	81a5      	strh	r5, [r4, #12]
 800de0e:	e7cf      	b.n	800ddb0 <__smakebuf_r+0x18>

0800de10 <lflush>:
 800de10:	898b      	ldrh	r3, [r1, #12]
 800de12:	f003 0309 	and.w	r3, r3, #9
 800de16:	2b09      	cmp	r3, #9
 800de18:	d103      	bne.n	800de22 <lflush+0x12>
 800de1a:	4b03      	ldr	r3, [pc, #12]	@ (800de28 <lflush+0x18>)
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f7ff bdb9 	b.w	800d994 <_fflush_r>
 800de22:	2000      	movs	r0, #0
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20000438 	.word	0x20000438

0800de2c <__srefill_r>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	460c      	mov	r4, r1
 800de30:	4605      	mov	r5, r0
 800de32:	b118      	cbz	r0, 800de3c <__srefill_r+0x10>
 800de34:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800de36:	b90b      	cbnz	r3, 800de3c <__srefill_r+0x10>
 800de38:	f7fc fde6 	bl	800aa08 <__sinit>
 800de3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de40:	049a      	lsls	r2, r3, #18
 800de42:	d406      	bmi.n	800de52 <__srefill_r+0x26>
 800de44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800de48:	81a3      	strh	r3, [r4, #12]
 800de4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de50:	6663      	str	r3, [r4, #100]	@ 0x64
 800de52:	2300      	movs	r3, #0
 800de54:	6063      	str	r3, [r4, #4]
 800de56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de5a:	069e      	lsls	r6, r3, #26
 800de5c:	d408      	bmi.n	800de70 <__srefill_r+0x44>
 800de5e:	0758      	lsls	r0, r3, #29
 800de60:	d445      	bmi.n	800deee <__srefill_r+0xc2>
 800de62:	06d9      	lsls	r1, r3, #27
 800de64:	d407      	bmi.n	800de76 <__srefill_r+0x4a>
 800de66:	2209      	movs	r2, #9
 800de68:	602a      	str	r2, [r5, #0]
 800de6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de6e:	81a3      	strh	r3, [r4, #12]
 800de70:	f04f 30ff 	mov.w	r0, #4294967295
 800de74:	bd70      	pop	{r4, r5, r6, pc}
 800de76:	071a      	lsls	r2, r3, #28
 800de78:	d50b      	bpl.n	800de92 <__srefill_r+0x66>
 800de7a:	4621      	mov	r1, r4
 800de7c:	4628      	mov	r0, r5
 800de7e:	f7ff fd89 	bl	800d994 <_fflush_r>
 800de82:	2800      	cmp	r0, #0
 800de84:	d1f4      	bne.n	800de70 <__srefill_r+0x44>
 800de86:	89a3      	ldrh	r3, [r4, #12]
 800de88:	60a0      	str	r0, [r4, #8]
 800de8a:	f023 0308 	bic.w	r3, r3, #8
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	61a0      	str	r0, [r4, #24]
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	f043 0304 	orr.w	r3, r3, #4
 800de98:	81a3      	strh	r3, [r4, #12]
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	b91b      	cbnz	r3, 800dea6 <__srefill_r+0x7a>
 800de9e:	4621      	mov	r1, r4
 800dea0:	4628      	mov	r0, r5
 800dea2:	f7ff ff79 	bl	800dd98 <__smakebuf_r>
 800dea6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800deaa:	07b3      	lsls	r3, r6, #30
 800deac:	d00f      	beq.n	800dece <__srefill_r+0xa2>
 800deae:	2301      	movs	r3, #1
 800deb0:	4a1a      	ldr	r2, [pc, #104]	@ (800df1c <__srefill_r+0xf0>)
 800deb2:	491b      	ldr	r1, [pc, #108]	@ (800df20 <__srefill_r+0xf4>)
 800deb4:	481b      	ldr	r0, [pc, #108]	@ (800df24 <__srefill_r+0xf8>)
 800deb6:	81a3      	strh	r3, [r4, #12]
 800deb8:	f7fc fdbe 	bl	800aa38 <_fwalk_sglue>
 800debc:	81a6      	strh	r6, [r4, #12]
 800debe:	f006 0609 	and.w	r6, r6, #9
 800dec2:	2e09      	cmp	r6, #9
 800dec4:	d103      	bne.n	800dece <__srefill_r+0xa2>
 800dec6:	4621      	mov	r1, r4
 800dec8:	4628      	mov	r0, r5
 800deca:	f7ff fcdb 	bl	800d884 <__sflush_r>
 800dece:	6922      	ldr	r2, [r4, #16]
 800ded0:	6a26      	ldr	r6, [r4, #32]
 800ded2:	6963      	ldr	r3, [r4, #20]
 800ded4:	69e1      	ldr	r1, [r4, #28]
 800ded6:	6022      	str	r2, [r4, #0]
 800ded8:	4628      	mov	r0, r5
 800deda:	47b0      	blx	r6
 800dedc:	2800      	cmp	r0, #0
 800dede:	6060      	str	r0, [r4, #4]
 800dee0:	dc17      	bgt.n	800df12 <__srefill_r+0xe6>
 800dee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee6:	d116      	bne.n	800df16 <__srefill_r+0xea>
 800dee8:	f043 0320 	orr.w	r3, r3, #32
 800deec:	e7bf      	b.n	800de6e <__srefill_r+0x42>
 800deee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800def0:	2900      	cmp	r1, #0
 800def2:	d0d2      	beq.n	800de9a <__srefill_r+0x6e>
 800def4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800def8:	4299      	cmp	r1, r3
 800defa:	d002      	beq.n	800df02 <__srefill_r+0xd6>
 800defc:	4628      	mov	r0, r5
 800defe:	f7fd f835 	bl	800af6c <_free_r>
 800df02:	2300      	movs	r3, #0
 800df04:	6323      	str	r3, [r4, #48]	@ 0x30
 800df06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800df08:	6063      	str	r3, [r4, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d0c5      	beq.n	800de9a <__srefill_r+0x6e>
 800df0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	2000      	movs	r0, #0
 800df14:	e7ae      	b.n	800de74 <__srefill_r+0x48>
 800df16:	2200      	movs	r2, #0
 800df18:	6062      	str	r2, [r4, #4]
 800df1a:	e7a6      	b.n	800de6a <__srefill_r+0x3e>
 800df1c:	2000042c 	.word	0x2000042c
 800df20:	0800de11 	.word	0x0800de11
 800df24:	20000440 	.word	0x20000440

0800df28 <__sccl>:
 800df28:	b570      	push	{r4, r5, r6, lr}
 800df2a:	780b      	ldrb	r3, [r1, #0]
 800df2c:	4604      	mov	r4, r0
 800df2e:	2b5e      	cmp	r3, #94	@ 0x5e
 800df30:	bf0b      	itete	eq
 800df32:	784b      	ldrbeq	r3, [r1, #1]
 800df34:	1c4a      	addne	r2, r1, #1
 800df36:	1c8a      	addeq	r2, r1, #2
 800df38:	2100      	movne	r1, #0
 800df3a:	bf08      	it	eq
 800df3c:	2101      	moveq	r1, #1
 800df3e:	3801      	subs	r0, #1
 800df40:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800df44:	f800 1f01 	strb.w	r1, [r0, #1]!
 800df48:	42a8      	cmp	r0, r5
 800df4a:	d1fb      	bne.n	800df44 <__sccl+0x1c>
 800df4c:	b90b      	cbnz	r3, 800df52 <__sccl+0x2a>
 800df4e:	1e50      	subs	r0, r2, #1
 800df50:	bd70      	pop	{r4, r5, r6, pc}
 800df52:	f081 0101 	eor.w	r1, r1, #1
 800df56:	54e1      	strb	r1, [r4, r3]
 800df58:	4610      	mov	r0, r2
 800df5a:	4602      	mov	r2, r0
 800df5c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800df60:	2d2d      	cmp	r5, #45	@ 0x2d
 800df62:	d005      	beq.n	800df70 <__sccl+0x48>
 800df64:	2d5d      	cmp	r5, #93	@ 0x5d
 800df66:	d016      	beq.n	800df96 <__sccl+0x6e>
 800df68:	2d00      	cmp	r5, #0
 800df6a:	d0f1      	beq.n	800df50 <__sccl+0x28>
 800df6c:	462b      	mov	r3, r5
 800df6e:	e7f2      	b.n	800df56 <__sccl+0x2e>
 800df70:	7846      	ldrb	r6, [r0, #1]
 800df72:	2e5d      	cmp	r6, #93	@ 0x5d
 800df74:	d0fa      	beq.n	800df6c <__sccl+0x44>
 800df76:	42b3      	cmp	r3, r6
 800df78:	dcf8      	bgt.n	800df6c <__sccl+0x44>
 800df7a:	3002      	adds	r0, #2
 800df7c:	461a      	mov	r2, r3
 800df7e:	3201      	adds	r2, #1
 800df80:	4296      	cmp	r6, r2
 800df82:	54a1      	strb	r1, [r4, r2]
 800df84:	dcfb      	bgt.n	800df7e <__sccl+0x56>
 800df86:	1af2      	subs	r2, r6, r3
 800df88:	3a01      	subs	r2, #1
 800df8a:	1c5d      	adds	r5, r3, #1
 800df8c:	42b3      	cmp	r3, r6
 800df8e:	bfa8      	it	ge
 800df90:	2200      	movge	r2, #0
 800df92:	18ab      	adds	r3, r5, r2
 800df94:	e7e1      	b.n	800df5a <__sccl+0x32>
 800df96:	4610      	mov	r0, r2
 800df98:	e7da      	b.n	800df50 <__sccl+0x28>

0800df9a <__submore>:
 800df9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9e:	460c      	mov	r4, r1
 800dfa0:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800dfa2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800dfa6:	4299      	cmp	r1, r3
 800dfa8:	d11d      	bne.n	800dfe6 <__submore+0x4c>
 800dfaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dfae:	f7fc fa59 	bl	800a464 <_malloc_r>
 800dfb2:	b918      	cbnz	r0, 800dfbc <__submore+0x22>
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfc2:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800dfc6:	6320      	str	r0, [r4, #48]	@ 0x30
 800dfc8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800dfcc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800dfd0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800dfd4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800dfd8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800dfdc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800dfe0:	6020      	str	r0, [r4, #0]
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	e7e8      	b.n	800dfb8 <__submore+0x1e>
 800dfe6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800dfe8:	0077      	lsls	r7, r6, #1
 800dfea:	463a      	mov	r2, r7
 800dfec:	f001 fc9a 	bl	800f924 <_realloc_r>
 800dff0:	4605      	mov	r5, r0
 800dff2:	2800      	cmp	r0, #0
 800dff4:	d0de      	beq.n	800dfb4 <__submore+0x1a>
 800dff6:	eb00 0806 	add.w	r8, r0, r6
 800dffa:	4601      	mov	r1, r0
 800dffc:	4632      	mov	r2, r6
 800dffe:	4640      	mov	r0, r8
 800e000:	f000 f954 	bl	800e2ac <memcpy>
 800e004:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 800e008:	f8c4 8000 	str.w	r8, [r4]
 800e00c:	e7e9      	b.n	800dfe2 <__submore+0x48>

0800e00e <_ungetc_r>:
 800e00e:	1c4b      	adds	r3, r1, #1
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	4606      	mov	r6, r0
 800e014:	460d      	mov	r5, r1
 800e016:	4614      	mov	r4, r2
 800e018:	d029      	beq.n	800e06e <_ungetc_r+0x60>
 800e01a:	b118      	cbz	r0, 800e024 <_ungetc_r+0x16>
 800e01c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e01e:	b90b      	cbnz	r3, 800e024 <_ungetc_r+0x16>
 800e020:	f7fc fcf2 	bl	800aa08 <__sinit>
 800e024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e026:	07d8      	lsls	r0, r3, #31
 800e028:	d405      	bmi.n	800e036 <_ungetc_r+0x28>
 800e02a:	89a3      	ldrh	r3, [r4, #12]
 800e02c:	0599      	lsls	r1, r3, #22
 800e02e:	d402      	bmi.n	800e036 <_ungetc_r+0x28>
 800e030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e032:	f7fc ff27 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800e036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e03a:	049a      	lsls	r2, r3, #18
 800e03c:	d406      	bmi.n	800e04c <_ungetc_r+0x3e>
 800e03e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e042:	81a3      	strh	r3, [r4, #12]
 800e044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e04a:	6663      	str	r3, [r4, #100]	@ 0x64
 800e04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e050:	f023 0220 	bic.w	r2, r3, #32
 800e054:	0758      	lsls	r0, r3, #29
 800e056:	81a2      	strh	r2, [r4, #12]
 800e058:	d422      	bmi.n	800e0a0 <_ungetc_r+0x92>
 800e05a:	06d9      	lsls	r1, r3, #27
 800e05c:	d40a      	bmi.n	800e074 <_ungetc_r+0x66>
 800e05e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e060:	07d2      	lsls	r2, r2, #31
 800e062:	d404      	bmi.n	800e06e <_ungetc_r+0x60>
 800e064:	0599      	lsls	r1, r3, #22
 800e066:	d402      	bmi.n	800e06e <_ungetc_r+0x60>
 800e068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e06a:	f7fc ff0c 	bl	800ae86 <__retarget_lock_release_recursive>
 800e06e:	f04f 35ff 	mov.w	r5, #4294967295
 800e072:	e046      	b.n	800e102 <_ungetc_r+0xf4>
 800e074:	071b      	lsls	r3, r3, #28
 800e076:	d50f      	bpl.n	800e098 <_ungetc_r+0x8a>
 800e078:	4621      	mov	r1, r4
 800e07a:	4630      	mov	r0, r6
 800e07c:	f7ff fc8a 	bl	800d994 <_fflush_r>
 800e080:	b120      	cbz	r0, 800e08c <_ungetc_r+0x7e>
 800e082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e084:	07d8      	lsls	r0, r3, #31
 800e086:	d4f2      	bmi.n	800e06e <_ungetc_r+0x60>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	e7eb      	b.n	800e064 <_ungetc_r+0x56>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	60a0      	str	r0, [r4, #8]
 800e090:	f023 0308 	bic.w	r3, r3, #8
 800e094:	81a3      	strh	r3, [r4, #12]
 800e096:	61a0      	str	r0, [r4, #24]
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	f043 0304 	orr.w	r3, r3, #4
 800e09e:	81a3      	strh	r3, [r4, #12]
 800e0a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e0a2:	6862      	ldr	r2, [r4, #4]
 800e0a4:	b2ed      	uxtb	r5, r5
 800e0a6:	b1d3      	cbz	r3, 800e0de <_ungetc_r+0xd0>
 800e0a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	db05      	blt.n	800e0ba <_ungetc_r+0xac>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7ff ff72 	bl	800df9a <__submore>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d1e3      	bne.n	800e082 <_ungetc_r+0x74>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	1e5a      	subs	r2, r3, #1
 800e0be:	6022      	str	r2, [r4, #0]
 800e0c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e0c4:	6863      	ldr	r3, [r4, #4]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	6063      	str	r3, [r4, #4]
 800e0ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0cc:	07da      	lsls	r2, r3, #31
 800e0ce:	d418      	bmi.n	800e102 <_ungetc_r+0xf4>
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	059b      	lsls	r3, r3, #22
 800e0d4:	d415      	bmi.n	800e102 <_ungetc_r+0xf4>
 800e0d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0d8:	f7fc fed5 	bl	800ae86 <__retarget_lock_release_recursive>
 800e0dc:	e011      	b.n	800e102 <_ungetc_r+0xf4>
 800e0de:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800e0e0:	6920      	ldr	r0, [r4, #16]
 800e0e2:	6823      	ldr	r3, [r4, #0]
 800e0e4:	f001 0101 	and.w	r1, r1, #1
 800e0e8:	b168      	cbz	r0, 800e106 <_ungetc_r+0xf8>
 800e0ea:	4298      	cmp	r0, r3
 800e0ec:	d20b      	bcs.n	800e106 <_ungetc_r+0xf8>
 800e0ee:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800e0f2:	42a8      	cmp	r0, r5
 800e0f4:	d107      	bne.n	800e106 <_ungetc_r+0xf8>
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	3201      	adds	r2, #1
 800e0fa:	6023      	str	r3, [r4, #0]
 800e0fc:	6062      	str	r2, [r4, #4]
 800e0fe:	2900      	cmp	r1, #0
 800e100:	d0e6      	beq.n	800e0d0 <_ungetc_r+0xc2>
 800e102:	4628      	mov	r0, r5
 800e104:	bd70      	pop	{r4, r5, r6, pc}
 800e106:	e9c4 320e 	strd	r3, r2, [r4, #56]	@ 0x38
 800e10a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e10e:	6323      	str	r3, [r4, #48]	@ 0x30
 800e110:	2303      	movs	r3, #3
 800e112:	6363      	str	r3, [r4, #52]	@ 0x34
 800e114:	4623      	mov	r3, r4
 800e116:	f803 5f42 	strb.w	r5, [r3, #66]!
 800e11a:	6023      	str	r3, [r4, #0]
 800e11c:	2301      	movs	r3, #1
 800e11e:	6063      	str	r3, [r4, #4]
 800e120:	e7ed      	b.n	800e0fe <_ungetc_r+0xf0>
	...

0800e124 <__swsetup_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4b29      	ldr	r3, [pc, #164]	@ (800e1cc <__swsetup_r+0xa8>)
 800e128:	4605      	mov	r5, r0
 800e12a:	6818      	ldr	r0, [r3, #0]
 800e12c:	460c      	mov	r4, r1
 800e12e:	b118      	cbz	r0, 800e138 <__swsetup_r+0x14>
 800e130:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e132:	b90b      	cbnz	r3, 800e138 <__swsetup_r+0x14>
 800e134:	f7fc fc68 	bl	800aa08 <__sinit>
 800e138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e13c:	0719      	lsls	r1, r3, #28
 800e13e:	d422      	bmi.n	800e186 <__swsetup_r+0x62>
 800e140:	06da      	lsls	r2, r3, #27
 800e142:	d407      	bmi.n	800e154 <__swsetup_r+0x30>
 800e144:	2209      	movs	r2, #9
 800e146:	602a      	str	r2, [r5, #0]
 800e148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e14c:	81a3      	strh	r3, [r4, #12]
 800e14e:	f04f 30ff 	mov.w	r0, #4294967295
 800e152:	e033      	b.n	800e1bc <__swsetup_r+0x98>
 800e154:	0758      	lsls	r0, r3, #29
 800e156:	d512      	bpl.n	800e17e <__swsetup_r+0x5a>
 800e158:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e15a:	b141      	cbz	r1, 800e16e <__swsetup_r+0x4a>
 800e15c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e160:	4299      	cmp	r1, r3
 800e162:	d002      	beq.n	800e16a <__swsetup_r+0x46>
 800e164:	4628      	mov	r0, r5
 800e166:	f7fc ff01 	bl	800af6c <_free_r>
 800e16a:	2300      	movs	r3, #0
 800e16c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	2300      	movs	r3, #0
 800e178:	6063      	str	r3, [r4, #4]
 800e17a:	6923      	ldr	r3, [r4, #16]
 800e17c:	6023      	str	r3, [r4, #0]
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	f043 0308 	orr.w	r3, r3, #8
 800e184:	81a3      	strh	r3, [r4, #12]
 800e186:	6923      	ldr	r3, [r4, #16]
 800e188:	b94b      	cbnz	r3, 800e19e <__swsetup_r+0x7a>
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e194:	d003      	beq.n	800e19e <__swsetup_r+0x7a>
 800e196:	4621      	mov	r1, r4
 800e198:	4628      	mov	r0, r5
 800e19a:	f7ff fdfd 	bl	800dd98 <__smakebuf_r>
 800e19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a2:	f013 0201 	ands.w	r2, r3, #1
 800e1a6:	d00a      	beq.n	800e1be <__swsetup_r+0x9a>
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	60a2      	str	r2, [r4, #8]
 800e1ac:	6962      	ldr	r2, [r4, #20]
 800e1ae:	4252      	negs	r2, r2
 800e1b0:	61a2      	str	r2, [r4, #24]
 800e1b2:	6922      	ldr	r2, [r4, #16]
 800e1b4:	b942      	cbnz	r2, 800e1c8 <__swsetup_r+0xa4>
 800e1b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1ba:	d1c5      	bne.n	800e148 <__swsetup_r+0x24>
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
 800e1be:	0799      	lsls	r1, r3, #30
 800e1c0:	bf58      	it	pl
 800e1c2:	6962      	ldrpl	r2, [r4, #20]
 800e1c4:	60a2      	str	r2, [r4, #8]
 800e1c6:	e7f4      	b.n	800e1b2 <__swsetup_r+0x8e>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e7f7      	b.n	800e1bc <__swsetup_r+0x98>
 800e1cc:	20000438 	.word	0x20000438

0800e1d0 <memmove>:
 800e1d0:	4288      	cmp	r0, r1
 800e1d2:	b510      	push	{r4, lr}
 800e1d4:	eb01 0402 	add.w	r4, r1, r2
 800e1d8:	d902      	bls.n	800e1e0 <memmove+0x10>
 800e1da:	4284      	cmp	r4, r0
 800e1dc:	4623      	mov	r3, r4
 800e1de:	d807      	bhi.n	800e1f0 <memmove+0x20>
 800e1e0:	1e43      	subs	r3, r0, #1
 800e1e2:	42a1      	cmp	r1, r4
 800e1e4:	d008      	beq.n	800e1f8 <memmove+0x28>
 800e1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1ee:	e7f8      	b.n	800e1e2 <memmove+0x12>
 800e1f0:	4402      	add	r2, r0
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	428a      	cmp	r2, r1
 800e1f6:	d100      	bne.n	800e1fa <memmove+0x2a>
 800e1f8:	bd10      	pop	{r4, pc}
 800e1fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e202:	e7f7      	b.n	800e1f4 <memmove+0x24>

0800e204 <strncpy>:
 800e204:	b510      	push	{r4, lr}
 800e206:	3901      	subs	r1, #1
 800e208:	4603      	mov	r3, r0
 800e20a:	b132      	cbz	r2, 800e21a <strncpy+0x16>
 800e20c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e210:	f803 4b01 	strb.w	r4, [r3], #1
 800e214:	3a01      	subs	r2, #1
 800e216:	2c00      	cmp	r4, #0
 800e218:	d1f7      	bne.n	800e20a <strncpy+0x6>
 800e21a:	441a      	add	r2, r3
 800e21c:	2100      	movs	r1, #0
 800e21e:	4293      	cmp	r3, r2
 800e220:	d100      	bne.n	800e224 <strncpy+0x20>
 800e222:	bd10      	pop	{r4, pc}
 800e224:	f803 1b01 	strb.w	r1, [r3], #1
 800e228:	e7f9      	b.n	800e21e <strncpy+0x1a>
	...

0800e22c <__locale_mb_cur_max>:
 800e22c:	4b01      	ldr	r3, [pc, #4]	@ (800e234 <__locale_mb_cur_max+0x8>)
 800e22e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800e232:	4770      	bx	lr
 800e234:	20000564 	.word	0x20000564

0800e238 <_localeconv_r>:
 800e238:	4800      	ldr	r0, [pc, #0]	@ (800e23c <_localeconv_r+0x4>)
 800e23a:	4770      	bx	lr
 800e23c:	20000654 	.word	0x20000654

0800e240 <_fstat_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d07      	ldr	r5, [pc, #28]	@ (800e260 <_fstat_r+0x20>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	4611      	mov	r1, r2
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	f7f4 fbb1 	bl	80029b4 <_fstat>
 800e252:	1c43      	adds	r3, r0, #1
 800e254:	d102      	bne.n	800e25c <_fstat_r+0x1c>
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	b103      	cbz	r3, 800e25c <_fstat_r+0x1c>
 800e25a:	6023      	str	r3, [r4, #0]
 800e25c:	bd38      	pop	{r3, r4, r5, pc}
 800e25e:	bf00      	nop
 800e260:	20002d88 	.word	0x20002d88

0800e264 <_isatty_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d06      	ldr	r5, [pc, #24]	@ (800e280 <_isatty_r+0x1c>)
 800e268:	2300      	movs	r3, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	602b      	str	r3, [r5, #0]
 800e270:	f7f4 fbb0 	bl	80029d4 <_isatty>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_isatty_r+0x1a>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_isatty_r+0x1a>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	20002d88 	.word	0x20002d88

0800e284 <__libc_fini_array>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d07      	ldr	r5, [pc, #28]	@ (800e2a4 <__libc_fini_array+0x20>)
 800e288:	4c07      	ldr	r4, [pc, #28]	@ (800e2a8 <__libc_fini_array+0x24>)
 800e28a:	1b64      	subs	r4, r4, r5
 800e28c:	10a4      	asrs	r4, r4, #2
 800e28e:	b91c      	cbnz	r4, 800e298 <__libc_fini_array+0x14>
 800e290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e294:	f004 bfbe 	b.w	8013214 <_fini>
 800e298:	3c01      	subs	r4, #1
 800e29a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e29e:	4798      	blx	r3
 800e2a0:	e7f5      	b.n	800e28e <__libc_fini_array+0xa>
 800e2a2:	bf00      	nop
 800e2a4:	08013910 	.word	0x08013910
 800e2a8:	08013914 	.word	0x08013914

0800e2ac <memcpy>:
 800e2ac:	440a      	add	r2, r1
 800e2ae:	4291      	cmp	r1, r2
 800e2b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2b4:	d100      	bne.n	800e2b8 <memcpy+0xc>
 800e2b6:	4770      	bx	lr
 800e2b8:	b510      	push	{r4, lr}
 800e2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2c2:	4291      	cmp	r1, r2
 800e2c4:	d1f9      	bne.n	800e2ba <memcpy+0xe>
 800e2c6:	bd10      	pop	{r4, pc}

0800e2c8 <nanf>:
 800e2c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e2d0 <nanf+0x8>
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	7fc00000 	.word	0x7fc00000

0800e2d4 <frexp>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	ec55 4b10 	vmov	r4, r5, d0
 800e2dc:	6001      	str	r1, [r0, #0]
 800e2de:	4915      	ldr	r1, [pc, #84]	@ (800e334 <frexp+0x60>)
 800e2e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e2e4:	428a      	cmp	r2, r1
 800e2e6:	4606      	mov	r6, r0
 800e2e8:	462b      	mov	r3, r5
 800e2ea:	d820      	bhi.n	800e32e <frexp+0x5a>
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	4311      	orrs	r1, r2
 800e2f0:	d01d      	beq.n	800e32e <frexp+0x5a>
 800e2f2:	4911      	ldr	r1, [pc, #68]	@ (800e338 <frexp+0x64>)
 800e2f4:	4029      	ands	r1, r5
 800e2f6:	b961      	cbnz	r1, 800e312 <frexp+0x3e>
 800e2f8:	4b10      	ldr	r3, [pc, #64]	@ (800e33c <frexp+0x68>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4629      	mov	r1, r5
 800e300:	f7f2 f9a2 	bl	8000648 <__aeabi_dmul>
 800e304:	460b      	mov	r3, r1
 800e306:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800e30a:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800e30e:	4604      	mov	r4, r0
 800e310:	6031      	str	r1, [r6, #0]
 800e312:	6831      	ldr	r1, [r6, #0]
 800e314:	1512      	asrs	r2, r2, #20
 800e316:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e31a:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800e31e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e322:	4411      	add	r1, r2
 800e324:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800e328:	6031      	str	r1, [r6, #0]
 800e32a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800e32e:	ec45 4b10 	vmov	d0, r4, r5
 800e332:	bd70      	pop	{r4, r5, r6, pc}
 800e334:	7fefffff 	.word	0x7fefffff
 800e338:	7ff00000 	.word	0x7ff00000
 800e33c:	43500000 	.word	0x43500000

0800e340 <__register_exitproc>:
 800e340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e344:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800e3bc <__register_exitproc+0x7c>
 800e348:	4606      	mov	r6, r0
 800e34a:	f8da 0000 	ldr.w	r0, [sl]
 800e34e:	4698      	mov	r8, r3
 800e350:	460f      	mov	r7, r1
 800e352:	4691      	mov	r9, r2
 800e354:	f7fc fd96 	bl	800ae84 <__retarget_lock_acquire_recursive>
 800e358:	4b16      	ldr	r3, [pc, #88]	@ (800e3b4 <__register_exitproc+0x74>)
 800e35a:	681c      	ldr	r4, [r3, #0]
 800e35c:	b90c      	cbnz	r4, 800e362 <__register_exitproc+0x22>
 800e35e:	4c16      	ldr	r4, [pc, #88]	@ (800e3b8 <__register_exitproc+0x78>)
 800e360:	601c      	str	r4, [r3, #0]
 800e362:	6865      	ldr	r5, [r4, #4]
 800e364:	f8da 0000 	ldr.w	r0, [sl]
 800e368:	2d1f      	cmp	r5, #31
 800e36a:	dd05      	ble.n	800e378 <__register_exitproc+0x38>
 800e36c:	f7fc fd8b 	bl	800ae86 <__retarget_lock_release_recursive>
 800e370:	f04f 30ff 	mov.w	r0, #4294967295
 800e374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e378:	b19e      	cbz	r6, 800e3a2 <__register_exitproc+0x62>
 800e37a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800e37e:	2201      	movs	r2, #1
 800e380:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800e384:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800e388:	40aa      	lsls	r2, r5
 800e38a:	4313      	orrs	r3, r2
 800e38c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800e390:	2e02      	cmp	r6, #2
 800e392:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800e396:	bf02      	ittt	eq
 800e398:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800e39c:	4313      	orreq	r3, r2
 800e39e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800e3a2:	1c6b      	adds	r3, r5, #1
 800e3a4:	3502      	adds	r5, #2
 800e3a6:	6063      	str	r3, [r4, #4]
 800e3a8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800e3ac:	f7fc fd6b 	bl	800ae86 <__retarget_lock_release_recursive>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7df      	b.n	800e374 <__register_exitproc+0x34>
 800e3b4:	20002d90 	.word	0x20002d90
 800e3b8:	20002d94 	.word	0x20002d94
 800e3bc:	20000560 	.word	0x20000560

0800e3c0 <quorem>:
 800e3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	6903      	ldr	r3, [r0, #16]
 800e3c6:	690c      	ldr	r4, [r1, #16]
 800e3c8:	42a3      	cmp	r3, r4
 800e3ca:	4607      	mov	r7, r0
 800e3cc:	db7e      	blt.n	800e4cc <quorem+0x10c>
 800e3ce:	3c01      	subs	r4, #1
 800e3d0:	f101 0814 	add.w	r8, r1, #20
 800e3d4:	00a3      	lsls	r3, r4, #2
 800e3d6:	f100 0514 	add.w	r5, r0, #20
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3f6:	d32e      	bcc.n	800e456 <quorem+0x96>
 800e3f8:	f04f 0a00 	mov.w	sl, #0
 800e3fc:	46c4      	mov	ip, r8
 800e3fe:	46ae      	mov	lr, r5
 800e400:	46d3      	mov	fp, sl
 800e402:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e406:	b298      	uxth	r0, r3
 800e408:	fb06 a000 	mla	r0, r6, r0, sl
 800e40c:	0c02      	lsrs	r2, r0, #16
 800e40e:	0c1b      	lsrs	r3, r3, #16
 800e410:	fb06 2303 	mla	r3, r6, r3, r2
 800e414:	f8de 2000 	ldr.w	r2, [lr]
 800e418:	b280      	uxth	r0, r0
 800e41a:	b292      	uxth	r2, r2
 800e41c:	1a12      	subs	r2, r2, r0
 800e41e:	445a      	add	r2, fp
 800e420:	f8de 0000 	ldr.w	r0, [lr]
 800e424:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e428:	b29b      	uxth	r3, r3
 800e42a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e42e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e432:	b292      	uxth	r2, r2
 800e434:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e438:	45e1      	cmp	r9, ip
 800e43a:	f84e 2b04 	str.w	r2, [lr], #4
 800e43e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e442:	d2de      	bcs.n	800e402 <quorem+0x42>
 800e444:	9b00      	ldr	r3, [sp, #0]
 800e446:	58eb      	ldr	r3, [r5, r3]
 800e448:	b92b      	cbnz	r3, 800e456 <quorem+0x96>
 800e44a:	9b01      	ldr	r3, [sp, #4]
 800e44c:	3b04      	subs	r3, #4
 800e44e:	429d      	cmp	r5, r3
 800e450:	461a      	mov	r2, r3
 800e452:	d32f      	bcc.n	800e4b4 <quorem+0xf4>
 800e454:	613c      	str	r4, [r7, #16]
 800e456:	4638      	mov	r0, r7
 800e458:	f001 f86e 	bl	800f538 <__mcmp>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	db25      	blt.n	800e4ac <quorem+0xec>
 800e460:	4629      	mov	r1, r5
 800e462:	2000      	movs	r0, #0
 800e464:	f858 2b04 	ldr.w	r2, [r8], #4
 800e468:	f8d1 c000 	ldr.w	ip, [r1]
 800e46c:	fa1f fe82 	uxth.w	lr, r2
 800e470:	fa1f f38c 	uxth.w	r3, ip
 800e474:	eba3 030e 	sub.w	r3, r3, lr
 800e478:	4403      	add	r3, r0
 800e47a:	0c12      	lsrs	r2, r2, #16
 800e47c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e480:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e484:	b29b      	uxth	r3, r3
 800e486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e48a:	45c1      	cmp	r9, r8
 800e48c:	f841 3b04 	str.w	r3, [r1], #4
 800e490:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e494:	d2e6      	bcs.n	800e464 <quorem+0xa4>
 800e496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e49a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e49e:	b922      	cbnz	r2, 800e4aa <quorem+0xea>
 800e4a0:	3b04      	subs	r3, #4
 800e4a2:	429d      	cmp	r5, r3
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	d30b      	bcc.n	800e4c0 <quorem+0x100>
 800e4a8:	613c      	str	r4, [r7, #16]
 800e4aa:	3601      	adds	r6, #1
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	b003      	add	sp, #12
 800e4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b4:	6812      	ldr	r2, [r2, #0]
 800e4b6:	3b04      	subs	r3, #4
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	d1cb      	bne.n	800e454 <quorem+0x94>
 800e4bc:	3c01      	subs	r4, #1
 800e4be:	e7c6      	b.n	800e44e <quorem+0x8e>
 800e4c0:	6812      	ldr	r2, [r2, #0]
 800e4c2:	3b04      	subs	r3, #4
 800e4c4:	2a00      	cmp	r2, #0
 800e4c6:	d1ef      	bne.n	800e4a8 <quorem+0xe8>
 800e4c8:	3c01      	subs	r4, #1
 800e4ca:	e7ea      	b.n	800e4a2 <quorem+0xe2>
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	e7ee      	b.n	800e4ae <quorem+0xee>

0800e4d0 <_dtoa_r>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	b099      	sub	sp, #100	@ 0x64
 800e4d6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e4da:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4dc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800e4de:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e4e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4e2:	ec55 4b10 	vmov	r4, r5, d0
 800e4e6:	4683      	mov	fp, r0
 800e4e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4ea:	b149      	cbz	r1, 800e500 <_dtoa_r+0x30>
 800e4ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e4ee:	604a      	str	r2, [r1, #4]
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4093      	lsls	r3, r2
 800e4f4:	608b      	str	r3, [r1, #8]
 800e4f6:	f000 fdce 	bl	800f096 <_Bfree>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800e500:	1e2b      	subs	r3, r5, #0
 800e502:	bfb9      	ittee	lt
 800e504:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e508:	9303      	strlt	r3, [sp, #12]
 800e50a:	2300      	movge	r3, #0
 800e50c:	6033      	strge	r3, [r6, #0]
 800e50e:	9f03      	ldr	r7, [sp, #12]
 800e510:	4b97      	ldr	r3, [pc, #604]	@ (800e770 <_dtoa_r+0x2a0>)
 800e512:	bfbc      	itt	lt
 800e514:	2201      	movlt	r2, #1
 800e516:	6032      	strlt	r2, [r6, #0]
 800e518:	43bb      	bics	r3, r7
 800e51a:	d114      	bne.n	800e546 <_dtoa_r+0x76>
 800e51c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e51e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e528:	4323      	orrs	r3, r4
 800e52a:	f000 854c 	beq.w	800efc6 <_dtoa_r+0xaf6>
 800e52e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e530:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e788 <_dtoa_r+0x2b8>
 800e534:	b11b      	cbz	r3, 800e53e <_dtoa_r+0x6e>
 800e536:	f10a 0303 	add.w	r3, sl, #3
 800e53a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	4650      	mov	r0, sl
 800e540:	b019      	add	sp, #100	@ 0x64
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e54a:	2200      	movs	r2, #0
 800e54c:	ec51 0b17 	vmov	r0, r1, d7
 800e550:	2300      	movs	r3, #0
 800e552:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e556:	f7f2 fadf 	bl	8000b18 <__aeabi_dcmpeq>
 800e55a:	4680      	mov	r8, r0
 800e55c:	b150      	cbz	r0, 800e574 <_dtoa_r+0xa4>
 800e55e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e560:	2301      	movs	r3, #1
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e566:	b113      	cbz	r3, 800e56e <_dtoa_r+0x9e>
 800e568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e56a:	4b82      	ldr	r3, [pc, #520]	@ (800e774 <_dtoa_r+0x2a4>)
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800e78c <_dtoa_r+0x2bc>
 800e572:	e7e4      	b.n	800e53e <_dtoa_r+0x6e>
 800e574:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e578:	aa16      	add	r2, sp, #88	@ 0x58
 800e57a:	a917      	add	r1, sp, #92	@ 0x5c
 800e57c:	4658      	mov	r0, fp
 800e57e:	f001 f8fb 	bl	800f778 <__d2b>
 800e582:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e586:	4681      	mov	r9, r0
 800e588:	2e00      	cmp	r6, #0
 800e58a:	d077      	beq.n	800e67c <_dtoa_r+0x1ac>
 800e58c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e58e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e59a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e59e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e5a2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4b73      	ldr	r3, [pc, #460]	@ (800e778 <_dtoa_r+0x2a8>)
 800e5ac:	f7f1 fe94 	bl	80002d8 <__aeabi_dsub>
 800e5b0:	a369      	add	r3, pc, #420	@ (adr r3, 800e758 <_dtoa_r+0x288>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f2 f847 	bl	8000648 <__aeabi_dmul>
 800e5ba:	a369      	add	r3, pc, #420	@ (adr r3, 800e760 <_dtoa_r+0x290>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f1 fe8c 	bl	80002dc <__adddf3>
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	f7f1 ffd3 	bl	8000574 <__aeabi_i2d>
 800e5ce:	a366      	add	r3, pc, #408	@ (adr r3, 800e768 <_dtoa_r+0x298>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f2 f838 	bl	8000648 <__aeabi_dmul>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4620      	mov	r0, r4
 800e5de:	4629      	mov	r1, r5
 800e5e0:	f7f1 fe7c 	bl	80002dc <__adddf3>
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	460d      	mov	r5, r1
 800e5e8:	f7f2 fade 	bl	8000ba8 <__aeabi_d2iz>
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f7f2 fa99 	bl	8000b2c <__aeabi_dcmplt>
 800e5fa:	b140      	cbz	r0, 800e60e <_dtoa_r+0x13e>
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	f7f1 ffb9 	bl	8000574 <__aeabi_i2d>
 800e602:	4622      	mov	r2, r4
 800e604:	462b      	mov	r3, r5
 800e606:	f7f2 fa87 	bl	8000b18 <__aeabi_dcmpeq>
 800e60a:	b900      	cbnz	r0, 800e60e <_dtoa_r+0x13e>
 800e60c:	3f01      	subs	r7, #1
 800e60e:	2f16      	cmp	r7, #22
 800e610:	d851      	bhi.n	800e6b6 <_dtoa_r+0x1e6>
 800e612:	4b5a      	ldr	r3, [pc, #360]	@ (800e77c <_dtoa_r+0x2ac>)
 800e614:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e620:	f7f2 fa84 	bl	8000b2c <__aeabi_dcmplt>
 800e624:	2800      	cmp	r0, #0
 800e626:	d048      	beq.n	800e6ba <_dtoa_r+0x1ea>
 800e628:	3f01      	subs	r7, #1
 800e62a:	2300      	movs	r3, #0
 800e62c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e62e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e630:	1b9b      	subs	r3, r3, r6
 800e632:	1e5a      	subs	r2, r3, #1
 800e634:	bf44      	itt	mi
 800e636:	f1c3 0801 	rsbmi	r8, r3, #1
 800e63a:	2300      	movmi	r3, #0
 800e63c:	9208      	str	r2, [sp, #32]
 800e63e:	bf54      	ite	pl
 800e640:	f04f 0800 	movpl.w	r8, #0
 800e644:	9308      	strmi	r3, [sp, #32]
 800e646:	2f00      	cmp	r7, #0
 800e648:	db39      	blt.n	800e6be <_dtoa_r+0x1ee>
 800e64a:	9b08      	ldr	r3, [sp, #32]
 800e64c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e64e:	443b      	add	r3, r7
 800e650:	9308      	str	r3, [sp, #32]
 800e652:	2300      	movs	r3, #0
 800e654:	930a      	str	r3, [sp, #40]	@ 0x28
 800e656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e658:	2b09      	cmp	r3, #9
 800e65a:	d865      	bhi.n	800e728 <_dtoa_r+0x258>
 800e65c:	2b05      	cmp	r3, #5
 800e65e:	bfc4      	itt	gt
 800e660:	3b04      	subgt	r3, #4
 800e662:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e666:	f1a3 0302 	sub.w	r3, r3, #2
 800e66a:	bfcc      	ite	gt
 800e66c:	2400      	movgt	r4, #0
 800e66e:	2401      	movle	r4, #1
 800e670:	2b03      	cmp	r3, #3
 800e672:	d864      	bhi.n	800e73e <_dtoa_r+0x26e>
 800e674:	e8df f003 	tbb	[pc, r3]
 800e678:	5635372a 	.word	0x5635372a
 800e67c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e680:	441e      	add	r6, r3
 800e682:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e686:	2b20      	cmp	r3, #32
 800e688:	bfc1      	itttt	gt
 800e68a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e68e:	409f      	lslgt	r7, r3
 800e690:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e694:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e698:	bfd6      	itet	le
 800e69a:	f1c3 0320 	rsble	r3, r3, #32
 800e69e:	ea47 0003 	orrgt.w	r0, r7, r3
 800e6a2:	fa04 f003 	lslle.w	r0, r4, r3
 800e6a6:	f7f1 ff55 	bl	8000554 <__aeabi_ui2d>
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e6b0:	3e01      	subs	r6, #1
 800e6b2:	9214      	str	r2, [sp, #80]	@ 0x50
 800e6b4:	e777      	b.n	800e5a6 <_dtoa_r+0xd6>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e7b8      	b.n	800e62c <_dtoa_r+0x15c>
 800e6ba:	9012      	str	r0, [sp, #72]	@ 0x48
 800e6bc:	e7b7      	b.n	800e62e <_dtoa_r+0x15e>
 800e6be:	427b      	negs	r3, r7
 800e6c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	eba8 0807 	sub.w	r8, r8, r7
 800e6c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6ca:	e7c4      	b.n	800e656 <_dtoa_r+0x186>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	dc36      	bgt.n	800e744 <_dtoa_r+0x274>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	9300      	str	r3, [sp, #0]
 800e6da:	9307      	str	r3, [sp, #28]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6e0:	e00b      	b.n	800e6fa <_dtoa_r+0x22a>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e7f3      	b.n	800e6ce <_dtoa_r+0x1fe>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ec:	18fb      	adds	r3, r7, r3
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	9307      	str	r3, [sp, #28]
 800e6f6:	bfb8      	it	lt
 800e6f8:	2301      	movlt	r3, #1
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	2204      	movs	r2, #4
 800e6fe:	f102 0014 	add.w	r0, r2, #20
 800e702:	4298      	cmp	r0, r3
 800e704:	d922      	bls.n	800e74c <_dtoa_r+0x27c>
 800e706:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800e70a:	4658      	mov	r0, fp
 800e70c:	f000 fc9e 	bl	800f04c <_Balloc>
 800e710:	4682      	mov	sl, r0
 800e712:	2800      	cmp	r0, #0
 800e714:	d13c      	bne.n	800e790 <_dtoa_r+0x2c0>
 800e716:	4b1a      	ldr	r3, [pc, #104]	@ (800e780 <_dtoa_r+0x2b0>)
 800e718:	4602      	mov	r2, r0
 800e71a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e71e:	4819      	ldr	r0, [pc, #100]	@ (800e784 <_dtoa_r+0x2b4>)
 800e720:	f002 fb92 	bl	8010e48 <__assert_func>
 800e724:	2301      	movs	r3, #1
 800e726:	e7df      	b.n	800e6e8 <_dtoa_r+0x218>
 800e728:	2401      	movs	r4, #1
 800e72a:	2300      	movs	r3, #0
 800e72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e72e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e730:	f04f 33ff 	mov.w	r3, #4294967295
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	9307      	str	r3, [sp, #28]
 800e738:	2200      	movs	r2, #0
 800e73a:	2312      	movs	r3, #18
 800e73c:	e7cf      	b.n	800e6de <_dtoa_r+0x20e>
 800e73e:	2301      	movs	r3, #1
 800e740:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e742:	e7f5      	b.n	800e730 <_dtoa_r+0x260>
 800e744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	9307      	str	r3, [sp, #28]
 800e74a:	e7d6      	b.n	800e6fa <_dtoa_r+0x22a>
 800e74c:	3101      	adds	r1, #1
 800e74e:	0052      	lsls	r2, r2, #1
 800e750:	e7d5      	b.n	800e6fe <_dtoa_r+0x22e>
 800e752:	bf00      	nop
 800e754:	f3af 8000 	nop.w
 800e758:	636f4361 	.word	0x636f4361
 800e75c:	3fd287a7 	.word	0x3fd287a7
 800e760:	8b60c8b3 	.word	0x8b60c8b3
 800e764:	3fc68a28 	.word	0x3fc68a28
 800e768:	509f79fb 	.word	0x509f79fb
 800e76c:	3fd34413 	.word	0x3fd34413
 800e770:	7ff00000 	.word	0x7ff00000
 800e774:	080132f7 	.word	0x080132f7
 800e778:	3ff80000 	.word	0x3ff80000
 800e77c:	08013450 	.word	0x08013450
 800e780:	08013357 	.word	0x08013357
 800e784:	08013368 	.word	0x08013368
 800e788:	08013353 	.word	0x08013353
 800e78c:	080132f6 	.word	0x080132f6
 800e790:	9b07      	ldr	r3, [sp, #28]
 800e792:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800e796:	2b0e      	cmp	r3, #14
 800e798:	f200 80a4 	bhi.w	800e8e4 <_dtoa_r+0x414>
 800e79c:	2c00      	cmp	r4, #0
 800e79e:	f000 80a1 	beq.w	800e8e4 <_dtoa_r+0x414>
 800e7a2:	2f00      	cmp	r7, #0
 800e7a4:	dd33      	ble.n	800e80e <_dtoa_r+0x33e>
 800e7a6:	4bae      	ldr	r3, [pc, #696]	@ (800ea60 <_dtoa_r+0x590>)
 800e7a8:	f007 020f 	and.w	r2, r7, #15
 800e7ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7b0:	ed93 7b00 	vldr	d7, [r3]
 800e7b4:	05f8      	lsls	r0, r7, #23
 800e7b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e7ba:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e7be:	d516      	bpl.n	800e7ee <_dtoa_r+0x31e>
 800e7c0:	4ba8      	ldr	r3, [pc, #672]	@ (800ea64 <_dtoa_r+0x594>)
 800e7c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7ca:	f7f2 f867 	bl	800089c <__aeabi_ddiv>
 800e7ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7d2:	f004 040f 	and.w	r4, r4, #15
 800e7d6:	2603      	movs	r6, #3
 800e7d8:	4da2      	ldr	r5, [pc, #648]	@ (800ea64 <_dtoa_r+0x594>)
 800e7da:	b954      	cbnz	r4, 800e7f2 <_dtoa_r+0x322>
 800e7dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7e4:	f7f2 f85a 	bl	800089c <__aeabi_ddiv>
 800e7e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7ec:	e028      	b.n	800e840 <_dtoa_r+0x370>
 800e7ee:	2602      	movs	r6, #2
 800e7f0:	e7f2      	b.n	800e7d8 <_dtoa_r+0x308>
 800e7f2:	07e1      	lsls	r1, r4, #31
 800e7f4:	d508      	bpl.n	800e808 <_dtoa_r+0x338>
 800e7f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7fe:	f7f1 ff23 	bl	8000648 <__aeabi_dmul>
 800e802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e806:	3601      	adds	r6, #1
 800e808:	1064      	asrs	r4, r4, #1
 800e80a:	3508      	adds	r5, #8
 800e80c:	e7e5      	b.n	800e7da <_dtoa_r+0x30a>
 800e80e:	f000 80d2 	beq.w	800e9b6 <_dtoa_r+0x4e6>
 800e812:	427c      	negs	r4, r7
 800e814:	4b92      	ldr	r3, [pc, #584]	@ (800ea60 <_dtoa_r+0x590>)
 800e816:	4d93      	ldr	r5, [pc, #588]	@ (800ea64 <_dtoa_r+0x594>)
 800e818:	f004 020f 	and.w	r2, r4, #15
 800e81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e828:	f7f1 ff0e 	bl	8000648 <__aeabi_dmul>
 800e82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e830:	1124      	asrs	r4, r4, #4
 800e832:	2300      	movs	r3, #0
 800e834:	2602      	movs	r6, #2
 800e836:	2c00      	cmp	r4, #0
 800e838:	f040 80b2 	bne.w	800e9a0 <_dtoa_r+0x4d0>
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1d3      	bne.n	800e7e8 <_dtoa_r+0x318>
 800e840:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e842:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80b7 	beq.w	800e9ba <_dtoa_r+0x4ea>
 800e84c:	4b86      	ldr	r3, [pc, #536]	@ (800ea68 <_dtoa_r+0x598>)
 800e84e:	2200      	movs	r2, #0
 800e850:	4620      	mov	r0, r4
 800e852:	4629      	mov	r1, r5
 800e854:	f7f2 f96a 	bl	8000b2c <__aeabi_dcmplt>
 800e858:	2800      	cmp	r0, #0
 800e85a:	f000 80ae 	beq.w	800e9ba <_dtoa_r+0x4ea>
 800e85e:	9b07      	ldr	r3, [sp, #28]
 800e860:	2b00      	cmp	r3, #0
 800e862:	f000 80aa 	beq.w	800e9ba <_dtoa_r+0x4ea>
 800e866:	9b00      	ldr	r3, [sp, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	dd37      	ble.n	800e8dc <_dtoa_r+0x40c>
 800e86c:	1e7b      	subs	r3, r7, #1
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	4620      	mov	r0, r4
 800e872:	4b7e      	ldr	r3, [pc, #504]	@ (800ea6c <_dtoa_r+0x59c>)
 800e874:	2200      	movs	r2, #0
 800e876:	4629      	mov	r1, r5
 800e878:	f7f1 fee6 	bl	8000648 <__aeabi_dmul>
 800e87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e880:	9c00      	ldr	r4, [sp, #0]
 800e882:	3601      	adds	r6, #1
 800e884:	4630      	mov	r0, r6
 800e886:	f7f1 fe75 	bl	8000574 <__aeabi_i2d>
 800e88a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e88e:	f7f1 fedb 	bl	8000648 <__aeabi_dmul>
 800e892:	4b77      	ldr	r3, [pc, #476]	@ (800ea70 <_dtoa_r+0x5a0>)
 800e894:	2200      	movs	r2, #0
 800e896:	f7f1 fd21 	bl	80002dc <__adddf3>
 800e89a:	4605      	mov	r5, r0
 800e89c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e8a0:	2c00      	cmp	r4, #0
 800e8a2:	f040 808d 	bne.w	800e9c0 <_dtoa_r+0x4f0>
 800e8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8aa:	4b72      	ldr	r3, [pc, #456]	@ (800ea74 <_dtoa_r+0x5a4>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f7f1 fd13 	bl	80002d8 <__aeabi_dsub>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4633      	mov	r3, r6
 800e8be:	f7f2 f953 	bl	8000b68 <__aeabi_dcmpgt>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	f040 828c 	bne.w	800ede0 <_dtoa_r+0x910>
 800e8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8cc:	462a      	mov	r2, r5
 800e8ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e8d2:	f7f2 f92b 	bl	8000b2c <__aeabi_dcmplt>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f040 8129 	bne.w	800eb2e <_dtoa_r+0x65e>
 800e8dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e8e0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e8e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f2c0 815b 	blt.w	800eba2 <_dtoa_r+0x6d2>
 800e8ec:	2f0e      	cmp	r7, #14
 800e8ee:	f300 8158 	bgt.w	800eba2 <_dtoa_r+0x6d2>
 800e8f2:	4b5b      	ldr	r3, [pc, #364]	@ (800ea60 <_dtoa_r+0x590>)
 800e8f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e8f8:	ed93 7b00 	vldr	d7, [r3]
 800e8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	ed8d 7b00 	vstr	d7, [sp]
 800e904:	da03      	bge.n	800e90e <_dtoa_r+0x43e>
 800e906:	9b07      	ldr	r3, [sp, #28]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f340 8102 	ble.w	800eb12 <_dtoa_r+0x642>
 800e90e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e912:	4656      	mov	r6, sl
 800e914:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e918:	4620      	mov	r0, r4
 800e91a:	4629      	mov	r1, r5
 800e91c:	f7f1 ffbe 	bl	800089c <__aeabi_ddiv>
 800e920:	f7f2 f942 	bl	8000ba8 <__aeabi_d2iz>
 800e924:	4680      	mov	r8, r0
 800e926:	f7f1 fe25 	bl	8000574 <__aeabi_i2d>
 800e92a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e92e:	f7f1 fe8b 	bl	8000648 <__aeabi_dmul>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	4620      	mov	r0, r4
 800e938:	4629      	mov	r1, r5
 800e93a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e93e:	f7f1 fccb 	bl	80002d8 <__aeabi_dsub>
 800e942:	f806 4b01 	strb.w	r4, [r6], #1
 800e946:	9d07      	ldr	r5, [sp, #28]
 800e948:	eba6 040a 	sub.w	r4, r6, sl
 800e94c:	42a5      	cmp	r5, r4
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	f040 8118 	bne.w	800eb86 <_dtoa_r+0x6b6>
 800e956:	f7f1 fcc1 	bl	80002dc <__adddf3>
 800e95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e95e:	4604      	mov	r4, r0
 800e960:	460d      	mov	r5, r1
 800e962:	f7f2 f901 	bl	8000b68 <__aeabi_dcmpgt>
 800e966:	2800      	cmp	r0, #0
 800e968:	f040 80fa 	bne.w	800eb60 <_dtoa_r+0x690>
 800e96c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e970:	4620      	mov	r0, r4
 800e972:	4629      	mov	r1, r5
 800e974:	f7f2 f8d0 	bl	8000b18 <__aeabi_dcmpeq>
 800e978:	b118      	cbz	r0, 800e982 <_dtoa_r+0x4b2>
 800e97a:	f018 0f01 	tst.w	r8, #1
 800e97e:	f040 80ef 	bne.w	800eb60 <_dtoa_r+0x690>
 800e982:	4649      	mov	r1, r9
 800e984:	4658      	mov	r0, fp
 800e986:	f000 fb86 	bl	800f096 <_Bfree>
 800e98a:	2300      	movs	r3, #0
 800e98c:	7033      	strb	r3, [r6, #0]
 800e98e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e990:	3701      	adds	r7, #1
 800e992:	601f      	str	r7, [r3, #0]
 800e994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e996:	2b00      	cmp	r3, #0
 800e998:	f43f add1 	beq.w	800e53e <_dtoa_r+0x6e>
 800e99c:	601e      	str	r6, [r3, #0]
 800e99e:	e5ce      	b.n	800e53e <_dtoa_r+0x6e>
 800e9a0:	07e2      	lsls	r2, r4, #31
 800e9a2:	d505      	bpl.n	800e9b0 <_dtoa_r+0x4e0>
 800e9a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9a8:	f7f1 fe4e 	bl	8000648 <__aeabi_dmul>
 800e9ac:	3601      	adds	r6, #1
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	1064      	asrs	r4, r4, #1
 800e9b2:	3508      	adds	r5, #8
 800e9b4:	e73f      	b.n	800e836 <_dtoa_r+0x366>
 800e9b6:	2602      	movs	r6, #2
 800e9b8:	e742      	b.n	800e840 <_dtoa_r+0x370>
 800e9ba:	9c07      	ldr	r4, [sp, #28]
 800e9bc:	9704      	str	r7, [sp, #16]
 800e9be:	e761      	b.n	800e884 <_dtoa_r+0x3b4>
 800e9c0:	4b27      	ldr	r3, [pc, #156]	@ (800ea60 <_dtoa_r+0x590>)
 800e9c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9cc:	4454      	add	r4, sl
 800e9ce:	2900      	cmp	r1, #0
 800e9d0:	d054      	beq.n	800ea7c <_dtoa_r+0x5ac>
 800e9d2:	4929      	ldr	r1, [pc, #164]	@ (800ea78 <_dtoa_r+0x5a8>)
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	f7f1 ff61 	bl	800089c <__aeabi_ddiv>
 800e9da:	4633      	mov	r3, r6
 800e9dc:	462a      	mov	r2, r5
 800e9de:	f7f1 fc7b 	bl	80002d8 <__aeabi_dsub>
 800e9e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9e6:	4656      	mov	r6, sl
 800e9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9ec:	f7f2 f8dc 	bl	8000ba8 <__aeabi_d2iz>
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	f7f1 fdbf 	bl	8000574 <__aeabi_i2d>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9fe:	f7f1 fc6b 	bl	80002d8 <__aeabi_dsub>
 800ea02:	3530      	adds	r5, #48	@ 0x30
 800ea04:	4602      	mov	r2, r0
 800ea06:	460b      	mov	r3, r1
 800ea08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea0c:	f806 5b01 	strb.w	r5, [r6], #1
 800ea10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea14:	f7f2 f88a 	bl	8000b2c <__aeabi_dcmplt>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d172      	bne.n	800eb02 <_dtoa_r+0x632>
 800ea1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea20:	4911      	ldr	r1, [pc, #68]	@ (800ea68 <_dtoa_r+0x598>)
 800ea22:	2000      	movs	r0, #0
 800ea24:	f7f1 fc58 	bl	80002d8 <__aeabi_dsub>
 800ea28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea2c:	f7f2 f87e 	bl	8000b2c <__aeabi_dcmplt>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	f040 8096 	bne.w	800eb62 <_dtoa_r+0x692>
 800ea36:	42a6      	cmp	r6, r4
 800ea38:	f43f af50 	beq.w	800e8dc <_dtoa_r+0x40c>
 800ea3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea40:	4b0a      	ldr	r3, [pc, #40]	@ (800ea6c <_dtoa_r+0x59c>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	f7f1 fe00 	bl	8000648 <__aeabi_dmul>
 800ea48:	4b08      	ldr	r3, [pc, #32]	@ (800ea6c <_dtoa_r+0x59c>)
 800ea4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea4e:	2200      	movs	r2, #0
 800ea50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea54:	f7f1 fdf8 	bl	8000648 <__aeabi_dmul>
 800ea58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea5c:	e7c4      	b.n	800e9e8 <_dtoa_r+0x518>
 800ea5e:	bf00      	nop
 800ea60:	08013450 	.word	0x08013450
 800ea64:	08013428 	.word	0x08013428
 800ea68:	3ff00000 	.word	0x3ff00000
 800ea6c:	40240000 	.word	0x40240000
 800ea70:	401c0000 	.word	0x401c0000
 800ea74:	40140000 	.word	0x40140000
 800ea78:	3fe00000 	.word	0x3fe00000
 800ea7c:	4631      	mov	r1, r6
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f7f1 fde2 	bl	8000648 <__aeabi_dmul>
 800ea84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea88:	9415      	str	r4, [sp, #84]	@ 0x54
 800ea8a:	4656      	mov	r6, sl
 800ea8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea90:	f7f2 f88a 	bl	8000ba8 <__aeabi_d2iz>
 800ea94:	4605      	mov	r5, r0
 800ea96:	f7f1 fd6d 	bl	8000574 <__aeabi_i2d>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaa2:	f7f1 fc19 	bl	80002d8 <__aeabi_dsub>
 800eaa6:	3530      	adds	r5, #48	@ 0x30
 800eaa8:	f806 5b01 	strb.w	r5, [r6], #1
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	42a6      	cmp	r6, r4
 800eab2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eab6:	f04f 0200 	mov.w	r2, #0
 800eaba:	d124      	bne.n	800eb06 <_dtoa_r+0x636>
 800eabc:	4bac      	ldr	r3, [pc, #688]	@ (800ed70 <_dtoa_r+0x8a0>)
 800eabe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eac2:	f7f1 fc0b 	bl	80002dc <__adddf3>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eace:	f7f2 f84b 	bl	8000b68 <__aeabi_dcmpgt>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d145      	bne.n	800eb62 <_dtoa_r+0x692>
 800ead6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eada:	49a5      	ldr	r1, [pc, #660]	@ (800ed70 <_dtoa_r+0x8a0>)
 800eadc:	2000      	movs	r0, #0
 800eade:	f7f1 fbfb 	bl	80002d8 <__aeabi_dsub>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaea:	f7f2 f81f 	bl	8000b2c <__aeabi_dcmplt>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	f43f aef4 	beq.w	800e8dc <_dtoa_r+0x40c>
 800eaf4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eaf6:	1e73      	subs	r3, r6, #1
 800eaf8:	9315      	str	r3, [sp, #84]	@ 0x54
 800eafa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eafe:	2b30      	cmp	r3, #48	@ 0x30
 800eb00:	d0f8      	beq.n	800eaf4 <_dtoa_r+0x624>
 800eb02:	9f04      	ldr	r7, [sp, #16]
 800eb04:	e73d      	b.n	800e982 <_dtoa_r+0x4b2>
 800eb06:	4b9b      	ldr	r3, [pc, #620]	@ (800ed74 <_dtoa_r+0x8a4>)
 800eb08:	f7f1 fd9e 	bl	8000648 <__aeabi_dmul>
 800eb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb10:	e7bc      	b.n	800ea8c <_dtoa_r+0x5bc>
 800eb12:	d10c      	bne.n	800eb2e <_dtoa_r+0x65e>
 800eb14:	4b98      	ldr	r3, [pc, #608]	@ (800ed78 <_dtoa_r+0x8a8>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb1c:	f7f1 fd94 	bl	8000648 <__aeabi_dmul>
 800eb20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb24:	f7f2 f816 	bl	8000b54 <__aeabi_dcmpge>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	f000 8157 	beq.w	800eddc <_dtoa_r+0x90c>
 800eb2e:	2400      	movs	r4, #0
 800eb30:	4625      	mov	r5, r4
 800eb32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb34:	43db      	mvns	r3, r3
 800eb36:	9304      	str	r3, [sp, #16]
 800eb38:	4656      	mov	r6, sl
 800eb3a:	2700      	movs	r7, #0
 800eb3c:	4621      	mov	r1, r4
 800eb3e:	4658      	mov	r0, fp
 800eb40:	f000 faa9 	bl	800f096 <_Bfree>
 800eb44:	2d00      	cmp	r5, #0
 800eb46:	d0dc      	beq.n	800eb02 <_dtoa_r+0x632>
 800eb48:	b12f      	cbz	r7, 800eb56 <_dtoa_r+0x686>
 800eb4a:	42af      	cmp	r7, r5
 800eb4c:	d003      	beq.n	800eb56 <_dtoa_r+0x686>
 800eb4e:	4639      	mov	r1, r7
 800eb50:	4658      	mov	r0, fp
 800eb52:	f000 faa0 	bl	800f096 <_Bfree>
 800eb56:	4629      	mov	r1, r5
 800eb58:	4658      	mov	r0, fp
 800eb5a:	f000 fa9c 	bl	800f096 <_Bfree>
 800eb5e:	e7d0      	b.n	800eb02 <_dtoa_r+0x632>
 800eb60:	9704      	str	r7, [sp, #16]
 800eb62:	4633      	mov	r3, r6
 800eb64:	461e      	mov	r6, r3
 800eb66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb6a:	2a39      	cmp	r2, #57	@ 0x39
 800eb6c:	d107      	bne.n	800eb7e <_dtoa_r+0x6ae>
 800eb6e:	459a      	cmp	sl, r3
 800eb70:	d1f8      	bne.n	800eb64 <_dtoa_r+0x694>
 800eb72:	9a04      	ldr	r2, [sp, #16]
 800eb74:	3201      	adds	r2, #1
 800eb76:	9204      	str	r2, [sp, #16]
 800eb78:	2230      	movs	r2, #48	@ 0x30
 800eb7a:	f88a 2000 	strb.w	r2, [sl]
 800eb7e:	781a      	ldrb	r2, [r3, #0]
 800eb80:	3201      	adds	r2, #1
 800eb82:	701a      	strb	r2, [r3, #0]
 800eb84:	e7bd      	b.n	800eb02 <_dtoa_r+0x632>
 800eb86:	4b7b      	ldr	r3, [pc, #492]	@ (800ed74 <_dtoa_r+0x8a4>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f7f1 fd5d 	bl	8000648 <__aeabi_dmul>
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2300      	movs	r3, #0
 800eb92:	4604      	mov	r4, r0
 800eb94:	460d      	mov	r5, r1
 800eb96:	f7f1 ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f43f aeba 	beq.w	800e914 <_dtoa_r+0x444>
 800eba0:	e6ef      	b.n	800e982 <_dtoa_r+0x4b2>
 800eba2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eba4:	2a00      	cmp	r2, #0
 800eba6:	f000 80db 	beq.w	800ed60 <_dtoa_r+0x890>
 800ebaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebac:	2a01      	cmp	r2, #1
 800ebae:	f300 80bf 	bgt.w	800ed30 <_dtoa_r+0x860>
 800ebb2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	f000 80b7 	beq.w	800ed28 <_dtoa_r+0x858>
 800ebba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ebbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ebc0:	4646      	mov	r6, r8
 800ebc2:	9a08      	ldr	r2, [sp, #32]
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	441a      	add	r2, r3
 800ebc8:	4658      	mov	r0, fp
 800ebca:	4498      	add	r8, r3
 800ebcc:	9208      	str	r2, [sp, #32]
 800ebce:	f000 fb47 	bl	800f260 <__i2b>
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	b15e      	cbz	r6, 800ebee <_dtoa_r+0x71e>
 800ebd6:	9b08      	ldr	r3, [sp, #32]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	dd08      	ble.n	800ebee <_dtoa_r+0x71e>
 800ebdc:	42b3      	cmp	r3, r6
 800ebde:	9a08      	ldr	r2, [sp, #32]
 800ebe0:	bfa8      	it	ge
 800ebe2:	4633      	movge	r3, r6
 800ebe4:	eba8 0803 	sub.w	r8, r8, r3
 800ebe8:	1af6      	subs	r6, r6, r3
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	9308      	str	r3, [sp, #32]
 800ebee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebf0:	b1f3      	cbz	r3, 800ec30 <_dtoa_r+0x760>
 800ebf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 80b7 	beq.w	800ed68 <_dtoa_r+0x898>
 800ebfa:	b18c      	cbz	r4, 800ec20 <_dtoa_r+0x750>
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4622      	mov	r2, r4
 800ec00:	4658      	mov	r0, fp
 800ec02:	f000 fbed 	bl	800f3e0 <__pow5mult>
 800ec06:	464a      	mov	r2, r9
 800ec08:	4601      	mov	r1, r0
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	4658      	mov	r0, fp
 800ec0e:	f000 fb3d 	bl	800f28c <__multiply>
 800ec12:	4649      	mov	r1, r9
 800ec14:	9004      	str	r0, [sp, #16]
 800ec16:	4658      	mov	r0, fp
 800ec18:	f000 fa3d 	bl	800f096 <_Bfree>
 800ec1c:	9b04      	ldr	r3, [sp, #16]
 800ec1e:	4699      	mov	r9, r3
 800ec20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec22:	1b1a      	subs	r2, r3, r4
 800ec24:	d004      	beq.n	800ec30 <_dtoa_r+0x760>
 800ec26:	4649      	mov	r1, r9
 800ec28:	4658      	mov	r0, fp
 800ec2a:	f000 fbd9 	bl	800f3e0 <__pow5mult>
 800ec2e:	4681      	mov	r9, r0
 800ec30:	2101      	movs	r1, #1
 800ec32:	4658      	mov	r0, fp
 800ec34:	f000 fb14 	bl	800f260 <__i2b>
 800ec38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f000 81cc 	beq.w	800efda <_dtoa_r+0xb0a>
 800ec42:	461a      	mov	r2, r3
 800ec44:	4601      	mov	r1, r0
 800ec46:	4658      	mov	r0, fp
 800ec48:	f000 fbca 	bl	800f3e0 <__pow5mult>
 800ec4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	4604      	mov	r4, r0
 800ec52:	f300 8095 	bgt.w	800ed80 <_dtoa_r+0x8b0>
 800ec56:	9b02      	ldr	r3, [sp, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f040 8087 	bne.w	800ed6c <_dtoa_r+0x89c>
 800ec5e:	9b03      	ldr	r3, [sp, #12]
 800ec60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f040 8089 	bne.w	800ed7c <_dtoa_r+0x8ac>
 800ec6a:	9b03      	ldr	r3, [sp, #12]
 800ec6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec70:	0d1b      	lsrs	r3, r3, #20
 800ec72:	051b      	lsls	r3, r3, #20
 800ec74:	b12b      	cbz	r3, 800ec82 <_dtoa_r+0x7b2>
 800ec76:	9b08      	ldr	r3, [sp, #32]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	9308      	str	r3, [sp, #32]
 800ec7c:	f108 0801 	add.w	r8, r8, #1
 800ec80:	2301      	movs	r3, #1
 800ec82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f000 81ad 	beq.w	800efe6 <_dtoa_r+0xb16>
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec92:	6918      	ldr	r0, [r3, #16]
 800ec94:	f000 fa98 	bl	800f1c8 <__hi0bits>
 800ec98:	f1c0 0020 	rsb	r0, r0, #32
 800ec9c:	9b08      	ldr	r3, [sp, #32]
 800ec9e:	4418      	add	r0, r3
 800eca0:	f010 001f 	ands.w	r0, r0, #31
 800eca4:	d077      	beq.n	800ed96 <_dtoa_r+0x8c6>
 800eca6:	f1c0 0320 	rsb	r3, r0, #32
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	dd6b      	ble.n	800ed86 <_dtoa_r+0x8b6>
 800ecae:	9b08      	ldr	r3, [sp, #32]
 800ecb0:	f1c0 001c 	rsb	r0, r0, #28
 800ecb4:	4403      	add	r3, r0
 800ecb6:	4480      	add	r8, r0
 800ecb8:	4406      	add	r6, r0
 800ecba:	9308      	str	r3, [sp, #32]
 800ecbc:	f1b8 0f00 	cmp.w	r8, #0
 800ecc0:	dd05      	ble.n	800ecce <_dtoa_r+0x7fe>
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	4642      	mov	r2, r8
 800ecc6:	4658      	mov	r0, fp
 800ecc8:	f000 fbca 	bl	800f460 <__lshift>
 800eccc:	4681      	mov	r9, r0
 800ecce:	9b08      	ldr	r3, [sp, #32]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dd05      	ble.n	800ece0 <_dtoa_r+0x810>
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	4658      	mov	r0, fp
 800ecda:	f000 fbc1 	bl	800f460 <__lshift>
 800ecde:	4604      	mov	r4, r0
 800ece0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d059      	beq.n	800ed9a <_dtoa_r+0x8ca>
 800ece6:	4621      	mov	r1, r4
 800ece8:	4648      	mov	r0, r9
 800ecea:	f000 fc25 	bl	800f538 <__mcmp>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	da53      	bge.n	800ed9a <_dtoa_r+0x8ca>
 800ecf2:	1e7b      	subs	r3, r7, #1
 800ecf4:	9304      	str	r3, [sp, #16]
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	220a      	movs	r2, #10
 800ecfc:	4658      	mov	r0, fp
 800ecfe:	f000 f9d3 	bl	800f0a8 <__multadd>
 800ed02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed04:	4681      	mov	r9, r0
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	f000 816f 	beq.w	800efea <_dtoa_r+0xb1a>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4629      	mov	r1, r5
 800ed10:	220a      	movs	r2, #10
 800ed12:	4658      	mov	r0, fp
 800ed14:	f000 f9c8 	bl	800f0a8 <__multadd>
 800ed18:	9b00      	ldr	r3, [sp, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	dc67      	bgt.n	800edf0 <_dtoa_r+0x920>
 800ed20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	dc41      	bgt.n	800edaa <_dtoa_r+0x8da>
 800ed26:	e063      	b.n	800edf0 <_dtoa_r+0x920>
 800ed28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ed2a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed2e:	e746      	b.n	800ebbe <_dtoa_r+0x6ee>
 800ed30:	9b07      	ldr	r3, [sp, #28]
 800ed32:	1e5c      	subs	r4, r3, #1
 800ed34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed36:	42a3      	cmp	r3, r4
 800ed38:	bfbf      	itttt	lt
 800ed3a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ed3c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ed3e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ed40:	1ae3      	sublt	r3, r4, r3
 800ed42:	bfb4      	ite	lt
 800ed44:	18d2      	addlt	r2, r2, r3
 800ed46:	1b1c      	subge	r4, r3, r4
 800ed48:	9b07      	ldr	r3, [sp, #28]
 800ed4a:	bfbc      	itt	lt
 800ed4c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ed4e:	2400      	movlt	r4, #0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	bfb5      	itete	lt
 800ed54:	eba8 0603 	sublt.w	r6, r8, r3
 800ed58:	9b07      	ldrge	r3, [sp, #28]
 800ed5a:	2300      	movlt	r3, #0
 800ed5c:	4646      	movge	r6, r8
 800ed5e:	e730      	b.n	800ebc2 <_dtoa_r+0x6f2>
 800ed60:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ed64:	4646      	mov	r6, r8
 800ed66:	e735      	b.n	800ebd4 <_dtoa_r+0x704>
 800ed68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed6a:	e75c      	b.n	800ec26 <_dtoa_r+0x756>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	e788      	b.n	800ec82 <_dtoa_r+0x7b2>
 800ed70:	3fe00000 	.word	0x3fe00000
 800ed74:	40240000 	.word	0x40240000
 800ed78:	40140000 	.word	0x40140000
 800ed7c:	9b02      	ldr	r3, [sp, #8]
 800ed7e:	e780      	b.n	800ec82 <_dtoa_r+0x7b2>
 800ed80:	2300      	movs	r3, #0
 800ed82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed84:	e782      	b.n	800ec8c <_dtoa_r+0x7bc>
 800ed86:	d099      	beq.n	800ecbc <_dtoa_r+0x7ec>
 800ed88:	9a08      	ldr	r2, [sp, #32]
 800ed8a:	331c      	adds	r3, #28
 800ed8c:	441a      	add	r2, r3
 800ed8e:	4498      	add	r8, r3
 800ed90:	441e      	add	r6, r3
 800ed92:	9208      	str	r2, [sp, #32]
 800ed94:	e792      	b.n	800ecbc <_dtoa_r+0x7ec>
 800ed96:	4603      	mov	r3, r0
 800ed98:	e7f6      	b.n	800ed88 <_dtoa_r+0x8b8>
 800ed9a:	9b07      	ldr	r3, [sp, #28]
 800ed9c:	9704      	str	r7, [sp, #16]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	dc20      	bgt.n	800ede4 <_dtoa_r+0x914>
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	dd1e      	ble.n	800ede8 <_dtoa_r+0x918>
 800edaa:	9b00      	ldr	r3, [sp, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	f47f aec0 	bne.w	800eb32 <_dtoa_r+0x662>
 800edb2:	4621      	mov	r1, r4
 800edb4:	2205      	movs	r2, #5
 800edb6:	4658      	mov	r0, fp
 800edb8:	f000 f976 	bl	800f0a8 <__multadd>
 800edbc:	4601      	mov	r1, r0
 800edbe:	4604      	mov	r4, r0
 800edc0:	4648      	mov	r0, r9
 800edc2:	f000 fbb9 	bl	800f538 <__mcmp>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	f77f aeb3 	ble.w	800eb32 <_dtoa_r+0x662>
 800edcc:	4656      	mov	r6, sl
 800edce:	2331      	movs	r3, #49	@ 0x31
 800edd0:	f806 3b01 	strb.w	r3, [r6], #1
 800edd4:	9b04      	ldr	r3, [sp, #16]
 800edd6:	3301      	adds	r3, #1
 800edd8:	9304      	str	r3, [sp, #16]
 800edda:	e6ae      	b.n	800eb3a <_dtoa_r+0x66a>
 800eddc:	9c07      	ldr	r4, [sp, #28]
 800edde:	9704      	str	r7, [sp, #16]
 800ede0:	4625      	mov	r5, r4
 800ede2:	e7f3      	b.n	800edcc <_dtoa_r+0x8fc>
 800ede4:	9b07      	ldr	r3, [sp, #28]
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edea:	2b00      	cmp	r3, #0
 800edec:	f000 8101 	beq.w	800eff2 <_dtoa_r+0xb22>
 800edf0:	2e00      	cmp	r6, #0
 800edf2:	dd05      	ble.n	800ee00 <_dtoa_r+0x930>
 800edf4:	4629      	mov	r1, r5
 800edf6:	4632      	mov	r2, r6
 800edf8:	4658      	mov	r0, fp
 800edfa:	f000 fb31 	bl	800f460 <__lshift>
 800edfe:	4605      	mov	r5, r0
 800ee00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d059      	beq.n	800eeba <_dtoa_r+0x9ea>
 800ee06:	6869      	ldr	r1, [r5, #4]
 800ee08:	4658      	mov	r0, fp
 800ee0a:	f000 f91f 	bl	800f04c <_Balloc>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	b920      	cbnz	r0, 800ee1c <_dtoa_r+0x94c>
 800ee12:	4b83      	ldr	r3, [pc, #524]	@ (800f020 <_dtoa_r+0xb50>)
 800ee14:	4602      	mov	r2, r0
 800ee16:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee1a:	e480      	b.n	800e71e <_dtoa_r+0x24e>
 800ee1c:	692a      	ldr	r2, [r5, #16]
 800ee1e:	3202      	adds	r2, #2
 800ee20:	0092      	lsls	r2, r2, #2
 800ee22:	f105 010c 	add.w	r1, r5, #12
 800ee26:	300c      	adds	r0, #12
 800ee28:	f7ff fa40 	bl	800e2ac <memcpy>
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	4631      	mov	r1, r6
 800ee30:	4658      	mov	r0, fp
 800ee32:	f000 fb15 	bl	800f460 <__lshift>
 800ee36:	f10a 0301 	add.w	r3, sl, #1
 800ee3a:	9307      	str	r3, [sp, #28]
 800ee3c:	9b00      	ldr	r3, [sp, #0]
 800ee3e:	4453      	add	r3, sl
 800ee40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee42:	9b02      	ldr	r3, [sp, #8]
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	462f      	mov	r7, r5
 800ee4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	9b07      	ldr	r3, [sp, #28]
 800ee50:	4621      	mov	r1, r4
 800ee52:	3b01      	subs	r3, #1
 800ee54:	4648      	mov	r0, r9
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	f7ff fab2 	bl	800e3c0 <quorem>
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	9002      	str	r0, [sp, #8]
 800ee60:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ee64:	4648      	mov	r0, r9
 800ee66:	f000 fb67 	bl	800f538 <__mcmp>
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	9008      	str	r0, [sp, #32]
 800ee6e:	4621      	mov	r1, r4
 800ee70:	4658      	mov	r0, fp
 800ee72:	f000 fb7d 	bl	800f570 <__mdiff>
 800ee76:	68c2      	ldr	r2, [r0, #12]
 800ee78:	4606      	mov	r6, r0
 800ee7a:	bb02      	cbnz	r2, 800eebe <_dtoa_r+0x9ee>
 800ee7c:	4601      	mov	r1, r0
 800ee7e:	4648      	mov	r0, r9
 800ee80:	f000 fb5a 	bl	800f538 <__mcmp>
 800ee84:	4602      	mov	r2, r0
 800ee86:	4631      	mov	r1, r6
 800ee88:	4658      	mov	r0, fp
 800ee8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee8c:	f000 f903 	bl	800f096 <_Bfree>
 800ee90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee94:	9e07      	ldr	r6, [sp, #28]
 800ee96:	ea43 0102 	orr.w	r1, r3, r2
 800ee9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee9c:	4319      	orrs	r1, r3
 800ee9e:	d110      	bne.n	800eec2 <_dtoa_r+0x9f2>
 800eea0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eea4:	d029      	beq.n	800eefa <_dtoa_r+0xa2a>
 800eea6:	9b08      	ldr	r3, [sp, #32]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	dd02      	ble.n	800eeb2 <_dtoa_r+0x9e2>
 800eeac:	9b02      	ldr	r3, [sp, #8]
 800eeae:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eeb2:	9b00      	ldr	r3, [sp, #0]
 800eeb4:	f883 8000 	strb.w	r8, [r3]
 800eeb8:	e640      	b.n	800eb3c <_dtoa_r+0x66c>
 800eeba:	4628      	mov	r0, r5
 800eebc:	e7bb      	b.n	800ee36 <_dtoa_r+0x966>
 800eebe:	2201      	movs	r2, #1
 800eec0:	e7e1      	b.n	800ee86 <_dtoa_r+0x9b6>
 800eec2:	9b08      	ldr	r3, [sp, #32]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	db04      	blt.n	800eed2 <_dtoa_r+0xa02>
 800eec8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eeca:	430b      	orrs	r3, r1
 800eecc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eece:	430b      	orrs	r3, r1
 800eed0:	d120      	bne.n	800ef14 <_dtoa_r+0xa44>
 800eed2:	2a00      	cmp	r2, #0
 800eed4:	dded      	ble.n	800eeb2 <_dtoa_r+0x9e2>
 800eed6:	4649      	mov	r1, r9
 800eed8:	2201      	movs	r2, #1
 800eeda:	4658      	mov	r0, fp
 800eedc:	f000 fac0 	bl	800f460 <__lshift>
 800eee0:	4621      	mov	r1, r4
 800eee2:	4681      	mov	r9, r0
 800eee4:	f000 fb28 	bl	800f538 <__mcmp>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	dc03      	bgt.n	800eef4 <_dtoa_r+0xa24>
 800eeec:	d1e1      	bne.n	800eeb2 <_dtoa_r+0x9e2>
 800eeee:	f018 0f01 	tst.w	r8, #1
 800eef2:	d0de      	beq.n	800eeb2 <_dtoa_r+0x9e2>
 800eef4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eef8:	d1d8      	bne.n	800eeac <_dtoa_r+0x9dc>
 800eefa:	9a00      	ldr	r2, [sp, #0]
 800eefc:	2339      	movs	r3, #57	@ 0x39
 800eefe:	7013      	strb	r3, [r2, #0]
 800ef00:	4633      	mov	r3, r6
 800ef02:	461e      	mov	r6, r3
 800ef04:	3b01      	subs	r3, #1
 800ef06:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef0a:	2a39      	cmp	r2, #57	@ 0x39
 800ef0c:	d052      	beq.n	800efb4 <_dtoa_r+0xae4>
 800ef0e:	3201      	adds	r2, #1
 800ef10:	701a      	strb	r2, [r3, #0]
 800ef12:	e613      	b.n	800eb3c <_dtoa_r+0x66c>
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	dd07      	ble.n	800ef28 <_dtoa_r+0xa58>
 800ef18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef1c:	d0ed      	beq.n	800eefa <_dtoa_r+0xa2a>
 800ef1e:	9a00      	ldr	r2, [sp, #0]
 800ef20:	f108 0301 	add.w	r3, r8, #1
 800ef24:	7013      	strb	r3, [r2, #0]
 800ef26:	e609      	b.n	800eb3c <_dtoa_r+0x66c>
 800ef28:	9b07      	ldr	r3, [sp, #28]
 800ef2a:	9a07      	ldr	r2, [sp, #28]
 800ef2c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ef30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d028      	beq.n	800ef88 <_dtoa_r+0xab8>
 800ef36:	4649      	mov	r1, r9
 800ef38:	2300      	movs	r3, #0
 800ef3a:	220a      	movs	r2, #10
 800ef3c:	4658      	mov	r0, fp
 800ef3e:	f000 f8b3 	bl	800f0a8 <__multadd>
 800ef42:	42af      	cmp	r7, r5
 800ef44:	4681      	mov	r9, r0
 800ef46:	f04f 0300 	mov.w	r3, #0
 800ef4a:	f04f 020a 	mov.w	r2, #10
 800ef4e:	4639      	mov	r1, r7
 800ef50:	4658      	mov	r0, fp
 800ef52:	d107      	bne.n	800ef64 <_dtoa_r+0xa94>
 800ef54:	f000 f8a8 	bl	800f0a8 <__multadd>
 800ef58:	4607      	mov	r7, r0
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	9b07      	ldr	r3, [sp, #28]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	9307      	str	r3, [sp, #28]
 800ef62:	e774      	b.n	800ee4e <_dtoa_r+0x97e>
 800ef64:	f000 f8a0 	bl	800f0a8 <__multadd>
 800ef68:	4629      	mov	r1, r5
 800ef6a:	4607      	mov	r7, r0
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	220a      	movs	r2, #10
 800ef70:	4658      	mov	r0, fp
 800ef72:	f000 f899 	bl	800f0a8 <__multadd>
 800ef76:	4605      	mov	r5, r0
 800ef78:	e7f0      	b.n	800ef5c <_dtoa_r+0xa8c>
 800ef7a:	9b00      	ldr	r3, [sp, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bfcc      	ite	gt
 800ef80:	461e      	movgt	r6, r3
 800ef82:	2601      	movle	r6, #1
 800ef84:	4456      	add	r6, sl
 800ef86:	2700      	movs	r7, #0
 800ef88:	4649      	mov	r1, r9
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	4658      	mov	r0, fp
 800ef8e:	f000 fa67 	bl	800f460 <__lshift>
 800ef92:	4621      	mov	r1, r4
 800ef94:	4681      	mov	r9, r0
 800ef96:	f000 facf 	bl	800f538 <__mcmp>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	dcb0      	bgt.n	800ef00 <_dtoa_r+0xa30>
 800ef9e:	d102      	bne.n	800efa6 <_dtoa_r+0xad6>
 800efa0:	f018 0f01 	tst.w	r8, #1
 800efa4:	d1ac      	bne.n	800ef00 <_dtoa_r+0xa30>
 800efa6:	4633      	mov	r3, r6
 800efa8:	461e      	mov	r6, r3
 800efaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efae:	2a30      	cmp	r2, #48	@ 0x30
 800efb0:	d0fa      	beq.n	800efa8 <_dtoa_r+0xad8>
 800efb2:	e5c3      	b.n	800eb3c <_dtoa_r+0x66c>
 800efb4:	459a      	cmp	sl, r3
 800efb6:	d1a4      	bne.n	800ef02 <_dtoa_r+0xa32>
 800efb8:	9b04      	ldr	r3, [sp, #16]
 800efba:	3301      	adds	r3, #1
 800efbc:	9304      	str	r3, [sp, #16]
 800efbe:	2331      	movs	r3, #49	@ 0x31
 800efc0:	f88a 3000 	strb.w	r3, [sl]
 800efc4:	e5ba      	b.n	800eb3c <_dtoa_r+0x66c>
 800efc6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800efc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f024 <_dtoa_r+0xb54>
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f43f aab6 	beq.w	800e53e <_dtoa_r+0x6e>
 800efd2:	f10a 0308 	add.w	r3, sl, #8
 800efd6:	f7ff bab0 	b.w	800e53a <_dtoa_r+0x6a>
 800efda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efdc:	2b01      	cmp	r3, #1
 800efde:	f77f ae3a 	ble.w	800ec56 <_dtoa_r+0x786>
 800efe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efe4:	930a      	str	r3, [sp, #40]	@ 0x28
 800efe6:	2001      	movs	r0, #1
 800efe8:	e658      	b.n	800ec9c <_dtoa_r+0x7cc>
 800efea:	9b00      	ldr	r3, [sp, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f77f aed9 	ble.w	800eda4 <_dtoa_r+0x8d4>
 800eff2:	4656      	mov	r6, sl
 800eff4:	4621      	mov	r1, r4
 800eff6:	4648      	mov	r0, r9
 800eff8:	f7ff f9e2 	bl	800e3c0 <quorem>
 800effc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f000:	f806 8b01 	strb.w	r8, [r6], #1
 800f004:	9b00      	ldr	r3, [sp, #0]
 800f006:	eba6 020a 	sub.w	r2, r6, sl
 800f00a:	4293      	cmp	r3, r2
 800f00c:	ddb5      	ble.n	800ef7a <_dtoa_r+0xaaa>
 800f00e:	4649      	mov	r1, r9
 800f010:	2300      	movs	r3, #0
 800f012:	220a      	movs	r2, #10
 800f014:	4658      	mov	r0, fp
 800f016:	f000 f847 	bl	800f0a8 <__multadd>
 800f01a:	4681      	mov	r9, r0
 800f01c:	e7ea      	b.n	800eff4 <_dtoa_r+0xb24>
 800f01e:	bf00      	nop
 800f020:	08013357 	.word	0x08013357
 800f024:	0801334a 	.word	0x0801334a

0800f028 <__ascii_mbtowc>:
 800f028:	b082      	sub	sp, #8
 800f02a:	b901      	cbnz	r1, 800f02e <__ascii_mbtowc+0x6>
 800f02c:	a901      	add	r1, sp, #4
 800f02e:	b142      	cbz	r2, 800f042 <__ascii_mbtowc+0x1a>
 800f030:	b14b      	cbz	r3, 800f046 <__ascii_mbtowc+0x1e>
 800f032:	7813      	ldrb	r3, [r2, #0]
 800f034:	600b      	str	r3, [r1, #0]
 800f036:	7812      	ldrb	r2, [r2, #0]
 800f038:	1e10      	subs	r0, r2, #0
 800f03a:	bf18      	it	ne
 800f03c:	2001      	movne	r0, #1
 800f03e:	b002      	add	sp, #8
 800f040:	4770      	bx	lr
 800f042:	4610      	mov	r0, r2
 800f044:	e7fb      	b.n	800f03e <__ascii_mbtowc+0x16>
 800f046:	f06f 0001 	mvn.w	r0, #1
 800f04a:	e7f8      	b.n	800f03e <__ascii_mbtowc+0x16>

0800f04c <_Balloc>:
 800f04c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800f04e:	b570      	push	{r4, r5, r6, lr}
 800f050:	4605      	mov	r5, r0
 800f052:	460c      	mov	r4, r1
 800f054:	b17b      	cbz	r3, 800f076 <_Balloc+0x2a>
 800f056:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f058:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f05c:	b9a0      	cbnz	r0, 800f088 <_Balloc+0x3c>
 800f05e:	2101      	movs	r1, #1
 800f060:	fa01 f604 	lsl.w	r6, r1, r4
 800f064:	1d72      	adds	r2, r6, #5
 800f066:	0092      	lsls	r2, r2, #2
 800f068:	4628      	mov	r0, r5
 800f06a:	f001 ff0b 	bl	8010e84 <_calloc_r>
 800f06e:	b148      	cbz	r0, 800f084 <_Balloc+0x38>
 800f070:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800f074:	e00b      	b.n	800f08e <_Balloc+0x42>
 800f076:	2221      	movs	r2, #33	@ 0x21
 800f078:	2104      	movs	r1, #4
 800f07a:	f001 ff03 	bl	8010e84 <_calloc_r>
 800f07e:	6468      	str	r0, [r5, #68]	@ 0x44
 800f080:	2800      	cmp	r0, #0
 800f082:	d1e8      	bne.n	800f056 <_Balloc+0xa>
 800f084:	2000      	movs	r0, #0
 800f086:	bd70      	pop	{r4, r5, r6, pc}
 800f088:	6802      	ldr	r2, [r0, #0]
 800f08a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800f08e:	2300      	movs	r3, #0
 800f090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f094:	e7f7      	b.n	800f086 <_Balloc+0x3a>

0800f096 <_Bfree>:
 800f096:	b131      	cbz	r1, 800f0a6 <_Bfree+0x10>
 800f098:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800f09a:	684a      	ldr	r2, [r1, #4]
 800f09c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f0a0:	6008      	str	r0, [r1, #0]
 800f0a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f0a6:	4770      	bx	lr

0800f0a8 <__multadd>:
 800f0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ac:	690d      	ldr	r5, [r1, #16]
 800f0ae:	4607      	mov	r7, r0
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	461e      	mov	r6, r3
 800f0b4:	f101 0c14 	add.w	ip, r1, #20
 800f0b8:	2000      	movs	r0, #0
 800f0ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f0be:	b299      	uxth	r1, r3
 800f0c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f0c4:	0c1e      	lsrs	r6, r3, #16
 800f0c6:	0c0b      	lsrs	r3, r1, #16
 800f0c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f0cc:	b289      	uxth	r1, r1
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0d4:	4285      	cmp	r5, r0
 800f0d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f0da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0de:	dcec      	bgt.n	800f0ba <__multadd+0x12>
 800f0e0:	b30e      	cbz	r6, 800f126 <__multadd+0x7e>
 800f0e2:	68a3      	ldr	r3, [r4, #8]
 800f0e4:	42ab      	cmp	r3, r5
 800f0e6:	dc19      	bgt.n	800f11c <__multadd+0x74>
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	3101      	adds	r1, #1
 800f0ee:	f7ff ffad 	bl	800f04c <_Balloc>
 800f0f2:	4680      	mov	r8, r0
 800f0f4:	b928      	cbnz	r0, 800f102 <__multadd+0x5a>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f12c <__multadd+0x84>)
 800f0fa:	480d      	ldr	r0, [pc, #52]	@ (800f130 <__multadd+0x88>)
 800f0fc:	21ba      	movs	r1, #186	@ 0xba
 800f0fe:	f001 fea3 	bl	8010e48 <__assert_func>
 800f102:	6922      	ldr	r2, [r4, #16]
 800f104:	3202      	adds	r2, #2
 800f106:	f104 010c 	add.w	r1, r4, #12
 800f10a:	0092      	lsls	r2, r2, #2
 800f10c:	300c      	adds	r0, #12
 800f10e:	f7ff f8cd 	bl	800e2ac <memcpy>
 800f112:	4621      	mov	r1, r4
 800f114:	4638      	mov	r0, r7
 800f116:	f7ff ffbe 	bl	800f096 <_Bfree>
 800f11a:	4644      	mov	r4, r8
 800f11c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f120:	3501      	adds	r5, #1
 800f122:	615e      	str	r6, [r3, #20]
 800f124:	6125      	str	r5, [r4, #16]
 800f126:	4620      	mov	r0, r4
 800f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12c:	08013357 	.word	0x08013357
 800f130:	080133c0 	.word	0x080133c0

0800f134 <__s2b>:
 800f134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f138:	460c      	mov	r4, r1
 800f13a:	4615      	mov	r5, r2
 800f13c:	461f      	mov	r7, r3
 800f13e:	2209      	movs	r2, #9
 800f140:	3308      	adds	r3, #8
 800f142:	4606      	mov	r6, r0
 800f144:	fb93 f3f2 	sdiv	r3, r3, r2
 800f148:	2100      	movs	r1, #0
 800f14a:	2201      	movs	r2, #1
 800f14c:	429a      	cmp	r2, r3
 800f14e:	db09      	blt.n	800f164 <__s2b+0x30>
 800f150:	4630      	mov	r0, r6
 800f152:	f7ff ff7b 	bl	800f04c <_Balloc>
 800f156:	b940      	cbnz	r0, 800f16a <__s2b+0x36>
 800f158:	4602      	mov	r2, r0
 800f15a:	4b19      	ldr	r3, [pc, #100]	@ (800f1c0 <__s2b+0x8c>)
 800f15c:	4819      	ldr	r0, [pc, #100]	@ (800f1c4 <__s2b+0x90>)
 800f15e:	21d3      	movs	r1, #211	@ 0xd3
 800f160:	f001 fe72 	bl	8010e48 <__assert_func>
 800f164:	0052      	lsls	r2, r2, #1
 800f166:	3101      	adds	r1, #1
 800f168:	e7f0      	b.n	800f14c <__s2b+0x18>
 800f16a:	9b08      	ldr	r3, [sp, #32]
 800f16c:	6143      	str	r3, [r0, #20]
 800f16e:	2d09      	cmp	r5, #9
 800f170:	f04f 0301 	mov.w	r3, #1
 800f174:	6103      	str	r3, [r0, #16]
 800f176:	dd16      	ble.n	800f1a6 <__s2b+0x72>
 800f178:	f104 0909 	add.w	r9, r4, #9
 800f17c:	46c8      	mov	r8, r9
 800f17e:	442c      	add	r4, r5
 800f180:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f184:	4601      	mov	r1, r0
 800f186:	3b30      	subs	r3, #48	@ 0x30
 800f188:	220a      	movs	r2, #10
 800f18a:	4630      	mov	r0, r6
 800f18c:	f7ff ff8c 	bl	800f0a8 <__multadd>
 800f190:	45a0      	cmp	r8, r4
 800f192:	d1f5      	bne.n	800f180 <__s2b+0x4c>
 800f194:	f1a5 0408 	sub.w	r4, r5, #8
 800f198:	444c      	add	r4, r9
 800f19a:	1b2d      	subs	r5, r5, r4
 800f19c:	1963      	adds	r3, r4, r5
 800f19e:	42bb      	cmp	r3, r7
 800f1a0:	db04      	blt.n	800f1ac <__s2b+0x78>
 800f1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a6:	340a      	adds	r4, #10
 800f1a8:	2509      	movs	r5, #9
 800f1aa:	e7f6      	b.n	800f19a <__s2b+0x66>
 800f1ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	3b30      	subs	r3, #48	@ 0x30
 800f1b4:	220a      	movs	r2, #10
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f7ff ff76 	bl	800f0a8 <__multadd>
 800f1bc:	e7ee      	b.n	800f19c <__s2b+0x68>
 800f1be:	bf00      	nop
 800f1c0:	08013357 	.word	0x08013357
 800f1c4:	080133c0 	.word	0x080133c0

0800f1c8 <__hi0bits>:
 800f1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	bf36      	itet	cc
 800f1d0:	0403      	lslcc	r3, r0, #16
 800f1d2:	2000      	movcs	r0, #0
 800f1d4:	2010      	movcc	r0, #16
 800f1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f1da:	bf3c      	itt	cc
 800f1dc:	021b      	lslcc	r3, r3, #8
 800f1de:	3008      	addcc	r0, #8
 800f1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1e4:	bf3c      	itt	cc
 800f1e6:	011b      	lslcc	r3, r3, #4
 800f1e8:	3004      	addcc	r0, #4
 800f1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1ee:	bf3c      	itt	cc
 800f1f0:	009b      	lslcc	r3, r3, #2
 800f1f2:	3002      	addcc	r0, #2
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	db05      	blt.n	800f204 <__hi0bits+0x3c>
 800f1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f1fc:	f100 0001 	add.w	r0, r0, #1
 800f200:	bf08      	it	eq
 800f202:	2020      	moveq	r0, #32
 800f204:	4770      	bx	lr

0800f206 <__lo0bits>:
 800f206:	6803      	ldr	r3, [r0, #0]
 800f208:	4602      	mov	r2, r0
 800f20a:	f013 0007 	ands.w	r0, r3, #7
 800f20e:	d00b      	beq.n	800f228 <__lo0bits+0x22>
 800f210:	07d9      	lsls	r1, r3, #31
 800f212:	d421      	bmi.n	800f258 <__lo0bits+0x52>
 800f214:	0798      	lsls	r0, r3, #30
 800f216:	bf49      	itett	mi
 800f218:	085b      	lsrmi	r3, r3, #1
 800f21a:	089b      	lsrpl	r3, r3, #2
 800f21c:	2001      	movmi	r0, #1
 800f21e:	6013      	strmi	r3, [r2, #0]
 800f220:	bf5c      	itt	pl
 800f222:	6013      	strpl	r3, [r2, #0]
 800f224:	2002      	movpl	r0, #2
 800f226:	4770      	bx	lr
 800f228:	b299      	uxth	r1, r3
 800f22a:	b909      	cbnz	r1, 800f230 <__lo0bits+0x2a>
 800f22c:	0c1b      	lsrs	r3, r3, #16
 800f22e:	2010      	movs	r0, #16
 800f230:	b2d9      	uxtb	r1, r3
 800f232:	b909      	cbnz	r1, 800f238 <__lo0bits+0x32>
 800f234:	3008      	adds	r0, #8
 800f236:	0a1b      	lsrs	r3, r3, #8
 800f238:	0719      	lsls	r1, r3, #28
 800f23a:	bf04      	itt	eq
 800f23c:	091b      	lsreq	r3, r3, #4
 800f23e:	3004      	addeq	r0, #4
 800f240:	0799      	lsls	r1, r3, #30
 800f242:	bf04      	itt	eq
 800f244:	089b      	lsreq	r3, r3, #2
 800f246:	3002      	addeq	r0, #2
 800f248:	07d9      	lsls	r1, r3, #31
 800f24a:	d403      	bmi.n	800f254 <__lo0bits+0x4e>
 800f24c:	085b      	lsrs	r3, r3, #1
 800f24e:	f100 0001 	add.w	r0, r0, #1
 800f252:	d003      	beq.n	800f25c <__lo0bits+0x56>
 800f254:	6013      	str	r3, [r2, #0]
 800f256:	4770      	bx	lr
 800f258:	2000      	movs	r0, #0
 800f25a:	4770      	bx	lr
 800f25c:	2020      	movs	r0, #32
 800f25e:	4770      	bx	lr

0800f260 <__i2b>:
 800f260:	b510      	push	{r4, lr}
 800f262:	460c      	mov	r4, r1
 800f264:	2101      	movs	r1, #1
 800f266:	f7ff fef1 	bl	800f04c <_Balloc>
 800f26a:	4602      	mov	r2, r0
 800f26c:	b928      	cbnz	r0, 800f27a <__i2b+0x1a>
 800f26e:	4b05      	ldr	r3, [pc, #20]	@ (800f284 <__i2b+0x24>)
 800f270:	4805      	ldr	r0, [pc, #20]	@ (800f288 <__i2b+0x28>)
 800f272:	f240 1145 	movw	r1, #325	@ 0x145
 800f276:	f001 fde7 	bl	8010e48 <__assert_func>
 800f27a:	2301      	movs	r3, #1
 800f27c:	6144      	str	r4, [r0, #20]
 800f27e:	6103      	str	r3, [r0, #16]
 800f280:	bd10      	pop	{r4, pc}
 800f282:	bf00      	nop
 800f284:	08013357 	.word	0x08013357
 800f288:	080133c0 	.word	0x080133c0

0800f28c <__multiply>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	4614      	mov	r4, r2
 800f292:	690a      	ldr	r2, [r1, #16]
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	429a      	cmp	r2, r3
 800f298:	bfa8      	it	ge
 800f29a:	4623      	movge	r3, r4
 800f29c:	460f      	mov	r7, r1
 800f29e:	bfa4      	itt	ge
 800f2a0:	460c      	movge	r4, r1
 800f2a2:	461f      	movge	r7, r3
 800f2a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f2a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f2ac:	68a3      	ldr	r3, [r4, #8]
 800f2ae:	6861      	ldr	r1, [r4, #4]
 800f2b0:	eb0a 0609 	add.w	r6, sl, r9
 800f2b4:	42b3      	cmp	r3, r6
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	bfb8      	it	lt
 800f2ba:	3101      	addlt	r1, #1
 800f2bc:	f7ff fec6 	bl	800f04c <_Balloc>
 800f2c0:	b930      	cbnz	r0, 800f2d0 <__multiply+0x44>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	4b44      	ldr	r3, [pc, #272]	@ (800f3d8 <__multiply+0x14c>)
 800f2c6:	4845      	ldr	r0, [pc, #276]	@ (800f3dc <__multiply+0x150>)
 800f2c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f2cc:	f001 fdbc 	bl	8010e48 <__assert_func>
 800f2d0:	f100 0514 	add.w	r5, r0, #20
 800f2d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2d8:	462b      	mov	r3, r5
 800f2da:	2200      	movs	r2, #0
 800f2dc:	4543      	cmp	r3, r8
 800f2de:	d321      	bcc.n	800f324 <__multiply+0x98>
 800f2e0:	f107 0114 	add.w	r1, r7, #20
 800f2e4:	f104 0214 	add.w	r2, r4, #20
 800f2e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f2ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f2f0:	9302      	str	r3, [sp, #8]
 800f2f2:	1b13      	subs	r3, r2, r4
 800f2f4:	3b15      	subs	r3, #21
 800f2f6:	f023 0303 	bic.w	r3, r3, #3
 800f2fa:	3304      	adds	r3, #4
 800f2fc:	f104 0715 	add.w	r7, r4, #21
 800f300:	42ba      	cmp	r2, r7
 800f302:	bf38      	it	cc
 800f304:	2304      	movcc	r3, #4
 800f306:	9301      	str	r3, [sp, #4]
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	9103      	str	r1, [sp, #12]
 800f30c:	428b      	cmp	r3, r1
 800f30e:	d80c      	bhi.n	800f32a <__multiply+0x9e>
 800f310:	2e00      	cmp	r6, #0
 800f312:	dd03      	ble.n	800f31c <__multiply+0x90>
 800f314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d05b      	beq.n	800f3d4 <__multiply+0x148>
 800f31c:	6106      	str	r6, [r0, #16]
 800f31e:	b005      	add	sp, #20
 800f320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f324:	f843 2b04 	str.w	r2, [r3], #4
 800f328:	e7d8      	b.n	800f2dc <__multiply+0x50>
 800f32a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f32e:	f1ba 0f00 	cmp.w	sl, #0
 800f332:	d024      	beq.n	800f37e <__multiply+0xf2>
 800f334:	f104 0e14 	add.w	lr, r4, #20
 800f338:	46a9      	mov	r9, r5
 800f33a:	f04f 0c00 	mov.w	ip, #0
 800f33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f342:	f8d9 3000 	ldr.w	r3, [r9]
 800f346:	fa1f fb87 	uxth.w	fp, r7
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f350:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f354:	f8d9 7000 	ldr.w	r7, [r9]
 800f358:	4463      	add	r3, ip
 800f35a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f35e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f362:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f366:	b29b      	uxth	r3, r3
 800f368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f36c:	4572      	cmp	r2, lr
 800f36e:	f849 3b04 	str.w	r3, [r9], #4
 800f372:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f376:	d8e2      	bhi.n	800f33e <__multiply+0xb2>
 800f378:	9b01      	ldr	r3, [sp, #4]
 800f37a:	f845 c003 	str.w	ip, [r5, r3]
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f384:	3104      	adds	r1, #4
 800f386:	f1b9 0f00 	cmp.w	r9, #0
 800f38a:	d021      	beq.n	800f3d0 <__multiply+0x144>
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	f104 0c14 	add.w	ip, r4, #20
 800f392:	46ae      	mov	lr, r5
 800f394:	f04f 0a00 	mov.w	sl, #0
 800f398:	f8bc b000 	ldrh.w	fp, [ip]
 800f39c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f3a0:	fb09 770b 	mla	r7, r9, fp, r7
 800f3a4:	4457      	add	r7, sl
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f3ac:	f84e 3b04 	str.w	r3, [lr], #4
 800f3b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3b8:	f8be 3000 	ldrh.w	r3, [lr]
 800f3bc:	fb09 330a 	mla	r3, r9, sl, r3
 800f3c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f3c4:	4562      	cmp	r2, ip
 800f3c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3ca:	d8e5      	bhi.n	800f398 <__multiply+0x10c>
 800f3cc:	9f01      	ldr	r7, [sp, #4]
 800f3ce:	51eb      	str	r3, [r5, r7]
 800f3d0:	3504      	adds	r5, #4
 800f3d2:	e799      	b.n	800f308 <__multiply+0x7c>
 800f3d4:	3e01      	subs	r6, #1
 800f3d6:	e79b      	b.n	800f310 <__multiply+0x84>
 800f3d8:	08013357 	.word	0x08013357
 800f3dc:	080133c0 	.word	0x080133c0

0800f3e0 <__pow5mult>:
 800f3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e4:	4615      	mov	r5, r2
 800f3e6:	f012 0203 	ands.w	r2, r2, #3
 800f3ea:	4607      	mov	r7, r0
 800f3ec:	460e      	mov	r6, r1
 800f3ee:	d007      	beq.n	800f400 <__pow5mult+0x20>
 800f3f0:	4c1a      	ldr	r4, [pc, #104]	@ (800f45c <__pow5mult+0x7c>)
 800f3f2:	3a01      	subs	r2, #1
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3fa:	f7ff fe55 	bl	800f0a8 <__multadd>
 800f3fe:	4606      	mov	r6, r0
 800f400:	10ad      	asrs	r5, r5, #2
 800f402:	d027      	beq.n	800f454 <__pow5mult+0x74>
 800f404:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800f406:	b944      	cbnz	r4, 800f41a <__pow5mult+0x3a>
 800f408:	f240 2171 	movw	r1, #625	@ 0x271
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff ff27 	bl	800f260 <__i2b>
 800f412:	2300      	movs	r3, #0
 800f414:	6438      	str	r0, [r7, #64]	@ 0x40
 800f416:	4604      	mov	r4, r0
 800f418:	6003      	str	r3, [r0, #0]
 800f41a:	f04f 0900 	mov.w	r9, #0
 800f41e:	07eb      	lsls	r3, r5, #31
 800f420:	d50a      	bpl.n	800f438 <__pow5mult+0x58>
 800f422:	4631      	mov	r1, r6
 800f424:	4622      	mov	r2, r4
 800f426:	4638      	mov	r0, r7
 800f428:	f7ff ff30 	bl	800f28c <__multiply>
 800f42c:	4631      	mov	r1, r6
 800f42e:	4680      	mov	r8, r0
 800f430:	4638      	mov	r0, r7
 800f432:	f7ff fe30 	bl	800f096 <_Bfree>
 800f436:	4646      	mov	r6, r8
 800f438:	106d      	asrs	r5, r5, #1
 800f43a:	d00b      	beq.n	800f454 <__pow5mult+0x74>
 800f43c:	6820      	ldr	r0, [r4, #0]
 800f43e:	b938      	cbnz	r0, 800f450 <__pow5mult+0x70>
 800f440:	4622      	mov	r2, r4
 800f442:	4621      	mov	r1, r4
 800f444:	4638      	mov	r0, r7
 800f446:	f7ff ff21 	bl	800f28c <__multiply>
 800f44a:	6020      	str	r0, [r4, #0]
 800f44c:	f8c0 9000 	str.w	r9, [r0]
 800f450:	4604      	mov	r4, r0
 800f452:	e7e4      	b.n	800f41e <__pow5mult+0x3e>
 800f454:	4630      	mov	r0, r6
 800f456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45a:	bf00      	nop
 800f45c:	0801341c 	.word	0x0801341c

0800f460 <__lshift>:
 800f460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f464:	460c      	mov	r4, r1
 800f466:	6849      	ldr	r1, [r1, #4]
 800f468:	6923      	ldr	r3, [r4, #16]
 800f46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f46e:	68a3      	ldr	r3, [r4, #8]
 800f470:	4607      	mov	r7, r0
 800f472:	4691      	mov	r9, r2
 800f474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f478:	f108 0601 	add.w	r6, r8, #1
 800f47c:	42b3      	cmp	r3, r6
 800f47e:	db0b      	blt.n	800f498 <__lshift+0x38>
 800f480:	4638      	mov	r0, r7
 800f482:	f7ff fde3 	bl	800f04c <_Balloc>
 800f486:	4605      	mov	r5, r0
 800f488:	b948      	cbnz	r0, 800f49e <__lshift+0x3e>
 800f48a:	4602      	mov	r2, r0
 800f48c:	4b28      	ldr	r3, [pc, #160]	@ (800f530 <__lshift+0xd0>)
 800f48e:	4829      	ldr	r0, [pc, #164]	@ (800f534 <__lshift+0xd4>)
 800f490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f494:	f001 fcd8 	bl	8010e48 <__assert_func>
 800f498:	3101      	adds	r1, #1
 800f49a:	005b      	lsls	r3, r3, #1
 800f49c:	e7ee      	b.n	800f47c <__lshift+0x1c>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f100 0114 	add.w	r1, r0, #20
 800f4a4:	f100 0210 	add.w	r2, r0, #16
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	4553      	cmp	r3, sl
 800f4ac:	db33      	blt.n	800f516 <__lshift+0xb6>
 800f4ae:	6920      	ldr	r0, [r4, #16]
 800f4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4b4:	f104 0314 	add.w	r3, r4, #20
 800f4b8:	f019 091f 	ands.w	r9, r9, #31
 800f4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f4c4:	d02b      	beq.n	800f51e <__lshift+0xbe>
 800f4c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f4ca:	468a      	mov	sl, r1
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	6818      	ldr	r0, [r3, #0]
 800f4d0:	fa00 f009 	lsl.w	r0, r0, r9
 800f4d4:	4310      	orrs	r0, r2
 800f4d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4de:	459c      	cmp	ip, r3
 800f4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f4e4:	d8f3      	bhi.n	800f4ce <__lshift+0x6e>
 800f4e6:	ebac 0304 	sub.w	r3, ip, r4
 800f4ea:	3b15      	subs	r3, #21
 800f4ec:	f023 0303 	bic.w	r3, r3, #3
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	f104 0015 	add.w	r0, r4, #21
 800f4f6:	4584      	cmp	ip, r0
 800f4f8:	bf38      	it	cc
 800f4fa:	2304      	movcc	r3, #4
 800f4fc:	50ca      	str	r2, [r1, r3]
 800f4fe:	b10a      	cbz	r2, 800f504 <__lshift+0xa4>
 800f500:	f108 0602 	add.w	r6, r8, #2
 800f504:	3e01      	subs	r6, #1
 800f506:	4638      	mov	r0, r7
 800f508:	612e      	str	r6, [r5, #16]
 800f50a:	4621      	mov	r1, r4
 800f50c:	f7ff fdc3 	bl	800f096 <_Bfree>
 800f510:	4628      	mov	r0, r5
 800f512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f516:	f842 0f04 	str.w	r0, [r2, #4]!
 800f51a:	3301      	adds	r3, #1
 800f51c:	e7c5      	b.n	800f4aa <__lshift+0x4a>
 800f51e:	3904      	subs	r1, #4
 800f520:	f853 2b04 	ldr.w	r2, [r3], #4
 800f524:	f841 2f04 	str.w	r2, [r1, #4]!
 800f528:	459c      	cmp	ip, r3
 800f52a:	d8f9      	bhi.n	800f520 <__lshift+0xc0>
 800f52c:	e7ea      	b.n	800f504 <__lshift+0xa4>
 800f52e:	bf00      	nop
 800f530:	08013357 	.word	0x08013357
 800f534:	080133c0 	.word	0x080133c0

0800f538 <__mcmp>:
 800f538:	690a      	ldr	r2, [r1, #16]
 800f53a:	4603      	mov	r3, r0
 800f53c:	6900      	ldr	r0, [r0, #16]
 800f53e:	1a80      	subs	r0, r0, r2
 800f540:	b530      	push	{r4, r5, lr}
 800f542:	d10e      	bne.n	800f562 <__mcmp+0x2a>
 800f544:	3314      	adds	r3, #20
 800f546:	3114      	adds	r1, #20
 800f548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f54c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f558:	4295      	cmp	r5, r2
 800f55a:	d003      	beq.n	800f564 <__mcmp+0x2c>
 800f55c:	d205      	bcs.n	800f56a <__mcmp+0x32>
 800f55e:	f04f 30ff 	mov.w	r0, #4294967295
 800f562:	bd30      	pop	{r4, r5, pc}
 800f564:	42a3      	cmp	r3, r4
 800f566:	d3f3      	bcc.n	800f550 <__mcmp+0x18>
 800f568:	e7fb      	b.n	800f562 <__mcmp+0x2a>
 800f56a:	2001      	movs	r0, #1
 800f56c:	e7f9      	b.n	800f562 <__mcmp+0x2a>
	...

0800f570 <__mdiff>:
 800f570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f574:	4689      	mov	r9, r1
 800f576:	4606      	mov	r6, r0
 800f578:	4611      	mov	r1, r2
 800f57a:	4648      	mov	r0, r9
 800f57c:	4614      	mov	r4, r2
 800f57e:	f7ff ffdb 	bl	800f538 <__mcmp>
 800f582:	1e05      	subs	r5, r0, #0
 800f584:	d112      	bne.n	800f5ac <__mdiff+0x3c>
 800f586:	4629      	mov	r1, r5
 800f588:	4630      	mov	r0, r6
 800f58a:	f7ff fd5f 	bl	800f04c <_Balloc>
 800f58e:	4602      	mov	r2, r0
 800f590:	b928      	cbnz	r0, 800f59e <__mdiff+0x2e>
 800f592:	4b3f      	ldr	r3, [pc, #252]	@ (800f690 <__mdiff+0x120>)
 800f594:	f240 2137 	movw	r1, #567	@ 0x237
 800f598:	483e      	ldr	r0, [pc, #248]	@ (800f694 <__mdiff+0x124>)
 800f59a:	f001 fc55 	bl	8010e48 <__assert_func>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	b003      	add	sp, #12
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	bfbc      	itt	lt
 800f5ae:	464b      	movlt	r3, r9
 800f5b0:	46a1      	movlt	r9, r4
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f5b8:	bfba      	itte	lt
 800f5ba:	461c      	movlt	r4, r3
 800f5bc:	2501      	movlt	r5, #1
 800f5be:	2500      	movge	r5, #0
 800f5c0:	f7ff fd44 	bl	800f04c <_Balloc>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	b918      	cbnz	r0, 800f5d0 <__mdiff+0x60>
 800f5c8:	4b31      	ldr	r3, [pc, #196]	@ (800f690 <__mdiff+0x120>)
 800f5ca:	f240 2145 	movw	r1, #581	@ 0x245
 800f5ce:	e7e3      	b.n	800f598 <__mdiff+0x28>
 800f5d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f5d4:	6926      	ldr	r6, [r4, #16]
 800f5d6:	60c5      	str	r5, [r0, #12]
 800f5d8:	f109 0310 	add.w	r3, r9, #16
 800f5dc:	f109 0514 	add.w	r5, r9, #20
 800f5e0:	f104 0e14 	add.w	lr, r4, #20
 800f5e4:	f100 0b14 	add.w	fp, r0, #20
 800f5e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f5ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f5f0:	9301      	str	r3, [sp, #4]
 800f5f2:	46d9      	mov	r9, fp
 800f5f4:	f04f 0c00 	mov.w	ip, #0
 800f5f8:	9b01      	ldr	r3, [sp, #4]
 800f5fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f5fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	fa1f f38a 	uxth.w	r3, sl
 800f608:	4619      	mov	r1, r3
 800f60a:	b283      	uxth	r3, r0
 800f60c:	1acb      	subs	r3, r1, r3
 800f60e:	0c00      	lsrs	r0, r0, #16
 800f610:	4463      	add	r3, ip
 800f612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f620:	4576      	cmp	r6, lr
 800f622:	f849 3b04 	str.w	r3, [r9], #4
 800f626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f62a:	d8e5      	bhi.n	800f5f8 <__mdiff+0x88>
 800f62c:	1b33      	subs	r3, r6, r4
 800f62e:	3b15      	subs	r3, #21
 800f630:	f023 0303 	bic.w	r3, r3, #3
 800f634:	3415      	adds	r4, #21
 800f636:	3304      	adds	r3, #4
 800f638:	42a6      	cmp	r6, r4
 800f63a:	bf38      	it	cc
 800f63c:	2304      	movcc	r3, #4
 800f63e:	441d      	add	r5, r3
 800f640:	445b      	add	r3, fp
 800f642:	461e      	mov	r6, r3
 800f644:	462c      	mov	r4, r5
 800f646:	4544      	cmp	r4, r8
 800f648:	d30e      	bcc.n	800f668 <__mdiff+0xf8>
 800f64a:	f108 0103 	add.w	r1, r8, #3
 800f64e:	1b49      	subs	r1, r1, r5
 800f650:	f021 0103 	bic.w	r1, r1, #3
 800f654:	3d03      	subs	r5, #3
 800f656:	45a8      	cmp	r8, r5
 800f658:	bf38      	it	cc
 800f65a:	2100      	movcc	r1, #0
 800f65c:	440b      	add	r3, r1
 800f65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f662:	b191      	cbz	r1, 800f68a <__mdiff+0x11a>
 800f664:	6117      	str	r7, [r2, #16]
 800f666:	e79d      	b.n	800f5a4 <__mdiff+0x34>
 800f668:	f854 1b04 	ldr.w	r1, [r4], #4
 800f66c:	46e6      	mov	lr, ip
 800f66e:	0c08      	lsrs	r0, r1, #16
 800f670:	fa1c fc81 	uxtah	ip, ip, r1
 800f674:	4471      	add	r1, lr
 800f676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f67a:	b289      	uxth	r1, r1
 800f67c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f680:	f846 1b04 	str.w	r1, [r6], #4
 800f684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f688:	e7dd      	b.n	800f646 <__mdiff+0xd6>
 800f68a:	3f01      	subs	r7, #1
 800f68c:	e7e7      	b.n	800f65e <__mdiff+0xee>
 800f68e:	bf00      	nop
 800f690:	08013357 	.word	0x08013357
 800f694:	080133c0 	.word	0x080133c0

0800f698 <__ulp>:
 800f698:	b082      	sub	sp, #8
 800f69a:	ed8d 0b00 	vstr	d0, [sp]
 800f69e:	9a01      	ldr	r2, [sp, #4]
 800f6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800f6e0 <__ulp+0x48>)
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	dc08      	bgt.n	800f6be <__ulp+0x26>
 800f6ac:	425b      	negs	r3, r3
 800f6ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f6b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6b6:	da04      	bge.n	800f6c2 <__ulp+0x2a>
 800f6b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f6bc:	4113      	asrs	r3, r2
 800f6be:	2200      	movs	r2, #0
 800f6c0:	e008      	b.n	800f6d4 <__ulp+0x3c>
 800f6c2:	f1a2 0314 	sub.w	r3, r2, #20
 800f6c6:	2b1e      	cmp	r3, #30
 800f6c8:	bfda      	itte	le
 800f6ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f6ce:	40da      	lsrle	r2, r3
 800f6d0:	2201      	movgt	r2, #1
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	ec41 0b10 	vmov	d0, r0, r1
 800f6dc:	b002      	add	sp, #8
 800f6de:	4770      	bx	lr
 800f6e0:	7ff00000 	.word	0x7ff00000

0800f6e4 <__b2d>:
 800f6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e8:	6906      	ldr	r6, [r0, #16]
 800f6ea:	f100 0814 	add.w	r8, r0, #20
 800f6ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f6f2:	1f37      	subs	r7, r6, #4
 800f6f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	f7ff fd65 	bl	800f1c8 <__hi0bits>
 800f6fe:	f1c0 0320 	rsb	r3, r0, #32
 800f702:	280a      	cmp	r0, #10
 800f704:	600b      	str	r3, [r1, #0]
 800f706:	491b      	ldr	r1, [pc, #108]	@ (800f774 <__b2d+0x90>)
 800f708:	dc15      	bgt.n	800f736 <__b2d+0x52>
 800f70a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f70e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f712:	45b8      	cmp	r8, r7
 800f714:	ea43 0501 	orr.w	r5, r3, r1
 800f718:	bf34      	ite	cc
 800f71a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f71e:	2300      	movcs	r3, #0
 800f720:	3015      	adds	r0, #21
 800f722:	fa02 f000 	lsl.w	r0, r2, r0
 800f726:	fa23 f30c 	lsr.w	r3, r3, ip
 800f72a:	4303      	orrs	r3, r0
 800f72c:	461c      	mov	r4, r3
 800f72e:	ec45 4b10 	vmov	d0, r4, r5
 800f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f736:	45b8      	cmp	r8, r7
 800f738:	bf3a      	itte	cc
 800f73a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f73e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f742:	2300      	movcs	r3, #0
 800f744:	380b      	subs	r0, #11
 800f746:	d012      	beq.n	800f76e <__b2d+0x8a>
 800f748:	f1c0 0120 	rsb	r1, r0, #32
 800f74c:	fa23 f401 	lsr.w	r4, r3, r1
 800f750:	4082      	lsls	r2, r0
 800f752:	4322      	orrs	r2, r4
 800f754:	4547      	cmp	r7, r8
 800f756:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f75a:	bf8c      	ite	hi
 800f75c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f760:	2200      	movls	r2, #0
 800f762:	4083      	lsls	r3, r0
 800f764:	40ca      	lsrs	r2, r1
 800f766:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f76a:	4313      	orrs	r3, r2
 800f76c:	e7de      	b.n	800f72c <__b2d+0x48>
 800f76e:	ea42 0501 	orr.w	r5, r2, r1
 800f772:	e7db      	b.n	800f72c <__b2d+0x48>
 800f774:	3ff00000 	.word	0x3ff00000

0800f778 <__d2b>:
 800f778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f77c:	460f      	mov	r7, r1
 800f77e:	2101      	movs	r1, #1
 800f780:	ec59 8b10 	vmov	r8, r9, d0
 800f784:	4616      	mov	r6, r2
 800f786:	f7ff fc61 	bl	800f04c <_Balloc>
 800f78a:	4604      	mov	r4, r0
 800f78c:	b930      	cbnz	r0, 800f79c <__d2b+0x24>
 800f78e:	4602      	mov	r2, r0
 800f790:	4b23      	ldr	r3, [pc, #140]	@ (800f820 <__d2b+0xa8>)
 800f792:	4824      	ldr	r0, [pc, #144]	@ (800f824 <__d2b+0xac>)
 800f794:	f240 310f 	movw	r1, #783	@ 0x30f
 800f798:	f001 fb56 	bl	8010e48 <__assert_func>
 800f79c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7a4:	b10d      	cbz	r5, 800f7aa <__d2b+0x32>
 800f7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7aa:	9301      	str	r3, [sp, #4]
 800f7ac:	f1b8 0300 	subs.w	r3, r8, #0
 800f7b0:	d023      	beq.n	800f7fa <__d2b+0x82>
 800f7b2:	4668      	mov	r0, sp
 800f7b4:	9300      	str	r3, [sp, #0]
 800f7b6:	f7ff fd26 	bl	800f206 <__lo0bits>
 800f7ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f7be:	b1d0      	cbz	r0, 800f7f6 <__d2b+0x7e>
 800f7c0:	f1c0 0320 	rsb	r3, r0, #32
 800f7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f7c8:	430b      	orrs	r3, r1
 800f7ca:	40c2      	lsrs	r2, r0
 800f7cc:	6163      	str	r3, [r4, #20]
 800f7ce:	9201      	str	r2, [sp, #4]
 800f7d0:	9b01      	ldr	r3, [sp, #4]
 800f7d2:	61a3      	str	r3, [r4, #24]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	bf0c      	ite	eq
 800f7d8:	2201      	moveq	r2, #1
 800f7da:	2202      	movne	r2, #2
 800f7dc:	6122      	str	r2, [r4, #16]
 800f7de:	b1a5      	cbz	r5, 800f80a <__d2b+0x92>
 800f7e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f7e4:	4405      	add	r5, r0
 800f7e6:	603d      	str	r5, [r7, #0]
 800f7e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f7ec:	6030      	str	r0, [r6, #0]
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	b003      	add	sp, #12
 800f7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7f6:	6161      	str	r1, [r4, #20]
 800f7f8:	e7ea      	b.n	800f7d0 <__d2b+0x58>
 800f7fa:	a801      	add	r0, sp, #4
 800f7fc:	f7ff fd03 	bl	800f206 <__lo0bits>
 800f800:	9b01      	ldr	r3, [sp, #4]
 800f802:	6163      	str	r3, [r4, #20]
 800f804:	3020      	adds	r0, #32
 800f806:	2201      	movs	r2, #1
 800f808:	e7e8      	b.n	800f7dc <__d2b+0x64>
 800f80a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f80e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f812:	6038      	str	r0, [r7, #0]
 800f814:	6918      	ldr	r0, [r3, #16]
 800f816:	f7ff fcd7 	bl	800f1c8 <__hi0bits>
 800f81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f81e:	e7e5      	b.n	800f7ec <__d2b+0x74>
 800f820:	08013357 	.word	0x08013357
 800f824:	080133c0 	.word	0x080133c0

0800f828 <__ratio>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	b085      	sub	sp, #20
 800f82e:	e9cd 1000 	strd	r1, r0, [sp]
 800f832:	a902      	add	r1, sp, #8
 800f834:	f7ff ff56 	bl	800f6e4 <__b2d>
 800f838:	9800      	ldr	r0, [sp, #0]
 800f83a:	a903      	add	r1, sp, #12
 800f83c:	ec55 4b10 	vmov	r4, r5, d0
 800f840:	f7ff ff50 	bl	800f6e4 <__b2d>
 800f844:	9b01      	ldr	r3, [sp, #4]
 800f846:	6919      	ldr	r1, [r3, #16]
 800f848:	9b00      	ldr	r3, [sp, #0]
 800f84a:	691b      	ldr	r3, [r3, #16]
 800f84c:	1ac9      	subs	r1, r1, r3
 800f84e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f852:	1a9b      	subs	r3, r3, r2
 800f854:	ec5b ab10 	vmov	sl, fp, d0
 800f858:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	bfce      	itee	gt
 800f860:	462a      	movgt	r2, r5
 800f862:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f866:	465a      	movle	r2, fp
 800f868:	462f      	mov	r7, r5
 800f86a:	46d9      	mov	r9, fp
 800f86c:	bfcc      	ite	gt
 800f86e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f872:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f876:	464b      	mov	r3, r9
 800f878:	4652      	mov	r2, sl
 800f87a:	4620      	mov	r0, r4
 800f87c:	4639      	mov	r1, r7
 800f87e:	f7f1 f80d 	bl	800089c <__aeabi_ddiv>
 800f882:	ec41 0b10 	vmov	d0, r0, r1
 800f886:	b005      	add	sp, #20
 800f888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f88c <__copybits>:
 800f88c:	3901      	subs	r1, #1
 800f88e:	b570      	push	{r4, r5, r6, lr}
 800f890:	1149      	asrs	r1, r1, #5
 800f892:	6914      	ldr	r4, [r2, #16]
 800f894:	3101      	adds	r1, #1
 800f896:	f102 0314 	add.w	r3, r2, #20
 800f89a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f89e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8a2:	1f05      	subs	r5, r0, #4
 800f8a4:	42a3      	cmp	r3, r4
 800f8a6:	d30c      	bcc.n	800f8c2 <__copybits+0x36>
 800f8a8:	1aa3      	subs	r3, r4, r2
 800f8aa:	3b11      	subs	r3, #17
 800f8ac:	f023 0303 	bic.w	r3, r3, #3
 800f8b0:	3211      	adds	r2, #17
 800f8b2:	42a2      	cmp	r2, r4
 800f8b4:	bf88      	it	hi
 800f8b6:	2300      	movhi	r3, #0
 800f8b8:	4418      	add	r0, r3
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	4288      	cmp	r0, r1
 800f8be:	d305      	bcc.n	800f8cc <__copybits+0x40>
 800f8c0:	bd70      	pop	{r4, r5, r6, pc}
 800f8c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f8c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f8ca:	e7eb      	b.n	800f8a4 <__copybits+0x18>
 800f8cc:	f840 3b04 	str.w	r3, [r0], #4
 800f8d0:	e7f4      	b.n	800f8bc <__copybits+0x30>

0800f8d2 <__any_on>:
 800f8d2:	f100 0214 	add.w	r2, r0, #20
 800f8d6:	6900      	ldr	r0, [r0, #16]
 800f8d8:	114b      	asrs	r3, r1, #5
 800f8da:	4298      	cmp	r0, r3
 800f8dc:	b510      	push	{r4, lr}
 800f8de:	db11      	blt.n	800f904 <__any_on+0x32>
 800f8e0:	dd0a      	ble.n	800f8f8 <__any_on+0x26>
 800f8e2:	f011 011f 	ands.w	r1, r1, #31
 800f8e6:	d007      	beq.n	800f8f8 <__any_on+0x26>
 800f8e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f8ec:	fa24 f001 	lsr.w	r0, r4, r1
 800f8f0:	fa00 f101 	lsl.w	r1, r0, r1
 800f8f4:	428c      	cmp	r4, r1
 800f8f6:	d10b      	bne.n	800f910 <__any_on+0x3e>
 800f8f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d803      	bhi.n	800f908 <__any_on+0x36>
 800f900:	2000      	movs	r0, #0
 800f902:	bd10      	pop	{r4, pc}
 800f904:	4603      	mov	r3, r0
 800f906:	e7f7      	b.n	800f8f8 <__any_on+0x26>
 800f908:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f90c:	2900      	cmp	r1, #0
 800f90e:	d0f5      	beq.n	800f8fc <__any_on+0x2a>
 800f910:	2001      	movs	r0, #1
 800f912:	e7f6      	b.n	800f902 <__any_on+0x30>

0800f914 <realloc>:
 800f914:	4b02      	ldr	r3, [pc, #8]	@ (800f920 <realloc+0xc>)
 800f916:	460a      	mov	r2, r1
 800f918:	4601      	mov	r1, r0
 800f91a:	6818      	ldr	r0, [r3, #0]
 800f91c:	f000 b802 	b.w	800f924 <_realloc_r>
 800f920:	20000438 	.word	0x20000438

0800f924 <_realloc_r>:
 800f924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f928:	4682      	mov	sl, r0
 800f92a:	4693      	mov	fp, r2
 800f92c:	460c      	mov	r4, r1
 800f92e:	b929      	cbnz	r1, 800f93c <_realloc_r+0x18>
 800f930:	4611      	mov	r1, r2
 800f932:	b003      	add	sp, #12
 800f934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f938:	f7fa bd94 	b.w	800a464 <_malloc_r>
 800f93c:	f7fa ffcc 	bl	800a8d8 <__malloc_lock>
 800f940:	f10b 080b 	add.w	r8, fp, #11
 800f944:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800f948:	f1b8 0f16 	cmp.w	r8, #22
 800f94c:	f1a4 0908 	sub.w	r9, r4, #8
 800f950:	f025 0603 	bic.w	r6, r5, #3
 800f954:	d908      	bls.n	800f968 <_realloc_r+0x44>
 800f956:	f038 0807 	bics.w	r8, r8, #7
 800f95a:	d507      	bpl.n	800f96c <_realloc_r+0x48>
 800f95c:	230c      	movs	r3, #12
 800f95e:	f8ca 3000 	str.w	r3, [sl]
 800f962:	f04f 0b00 	mov.w	fp, #0
 800f966:	e032      	b.n	800f9ce <_realloc_r+0xaa>
 800f968:	f04f 0810 	mov.w	r8, #16
 800f96c:	45c3      	cmp	fp, r8
 800f96e:	d8f5      	bhi.n	800f95c <_realloc_r+0x38>
 800f970:	4546      	cmp	r6, r8
 800f972:	f280 8174 	bge.w	800fc5e <_realloc_r+0x33a>
 800f976:	4b9e      	ldr	r3, [pc, #632]	@ (800fbf0 <_realloc_r+0x2cc>)
 800f978:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800f97c:	eb09 0106 	add.w	r1, r9, r6
 800f980:	458c      	cmp	ip, r1
 800f982:	6848      	ldr	r0, [r1, #4]
 800f984:	d005      	beq.n	800f992 <_realloc_r+0x6e>
 800f986:	f020 0201 	bic.w	r2, r0, #1
 800f98a:	440a      	add	r2, r1
 800f98c:	6852      	ldr	r2, [r2, #4]
 800f98e:	07d7      	lsls	r7, r2, #31
 800f990:	d449      	bmi.n	800fa26 <_realloc_r+0x102>
 800f992:	f020 0003 	bic.w	r0, r0, #3
 800f996:	458c      	cmp	ip, r1
 800f998:	eb06 0700 	add.w	r7, r6, r0
 800f99c:	d11b      	bne.n	800f9d6 <_realloc_r+0xb2>
 800f99e:	f108 0210 	add.w	r2, r8, #16
 800f9a2:	42ba      	cmp	r2, r7
 800f9a4:	dc41      	bgt.n	800fa2a <_realloc_r+0x106>
 800f9a6:	eb09 0208 	add.w	r2, r9, r8
 800f9aa:	eba7 0708 	sub.w	r7, r7, r8
 800f9ae:	f047 0701 	orr.w	r7, r7, #1
 800f9b2:	609a      	str	r2, [r3, #8]
 800f9b4:	6057      	str	r7, [r2, #4]
 800f9b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f9ba:	f003 0301 	and.w	r3, r3, #1
 800f9be:	ea43 0308 	orr.w	r3, r3, r8
 800f9c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9c6:	4650      	mov	r0, sl
 800f9c8:	f7fa ff8c 	bl	800a8e4 <__malloc_unlock>
 800f9cc:	46a3      	mov	fp, r4
 800f9ce:	4658      	mov	r0, fp
 800f9d0:	b003      	add	sp, #12
 800f9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d6:	45b8      	cmp	r8, r7
 800f9d8:	dc27      	bgt.n	800fa2a <_realloc_r+0x106>
 800f9da:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800f9de:	60d3      	str	r3, [r2, #12]
 800f9e0:	609a      	str	r2, [r3, #8]
 800f9e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f9e6:	eba7 0008 	sub.w	r0, r7, r8
 800f9ea:	280f      	cmp	r0, #15
 800f9ec:	f003 0301 	and.w	r3, r3, #1
 800f9f0:	eb09 0207 	add.w	r2, r9, r7
 800f9f4:	f240 8135 	bls.w	800fc62 <_realloc_r+0x33e>
 800f9f8:	eb09 0108 	add.w	r1, r9, r8
 800f9fc:	ea48 0303 	orr.w	r3, r8, r3
 800fa00:	f040 0001 	orr.w	r0, r0, #1
 800fa04:	f8c9 3004 	str.w	r3, [r9, #4]
 800fa08:	6048      	str	r0, [r1, #4]
 800fa0a:	6853      	ldr	r3, [r2, #4]
 800fa0c:	f043 0301 	orr.w	r3, r3, #1
 800fa10:	6053      	str	r3, [r2, #4]
 800fa12:	3108      	adds	r1, #8
 800fa14:	4650      	mov	r0, sl
 800fa16:	f7fb faa9 	bl	800af6c <_free_r>
 800fa1a:	4650      	mov	r0, sl
 800fa1c:	f7fa ff62 	bl	800a8e4 <__malloc_unlock>
 800fa20:	f109 0b08 	add.w	fp, r9, #8
 800fa24:	e7d3      	b.n	800f9ce <_realloc_r+0xaa>
 800fa26:	2000      	movs	r0, #0
 800fa28:	4601      	mov	r1, r0
 800fa2a:	07ea      	lsls	r2, r5, #31
 800fa2c:	f100 80c7 	bmi.w	800fbbe <_realloc_r+0x29a>
 800fa30:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800fa34:	eba9 0505 	sub.w	r5, r9, r5
 800fa38:	686a      	ldr	r2, [r5, #4]
 800fa3a:	f022 0203 	bic.w	r2, r2, #3
 800fa3e:	4432      	add	r2, r6
 800fa40:	9201      	str	r2, [sp, #4]
 800fa42:	2900      	cmp	r1, #0
 800fa44:	f000 8086 	beq.w	800fb54 <_realloc_r+0x230>
 800fa48:	458c      	cmp	ip, r1
 800fa4a:	eb00 0702 	add.w	r7, r0, r2
 800fa4e:	d149      	bne.n	800fae4 <_realloc_r+0x1c0>
 800fa50:	f108 0210 	add.w	r2, r8, #16
 800fa54:	42ba      	cmp	r2, r7
 800fa56:	dc7d      	bgt.n	800fb54 <_realloc_r+0x230>
 800fa58:	46ab      	mov	fp, r5
 800fa5a:	68ea      	ldr	r2, [r5, #12]
 800fa5c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800fa60:	60ca      	str	r2, [r1, #12]
 800fa62:	6091      	str	r1, [r2, #8]
 800fa64:	1f32      	subs	r2, r6, #4
 800fa66:	2a24      	cmp	r2, #36	@ 0x24
 800fa68:	d836      	bhi.n	800fad8 <_realloc_r+0x1b4>
 800fa6a:	2a13      	cmp	r2, #19
 800fa6c:	d932      	bls.n	800fad4 <_realloc_r+0x1b0>
 800fa6e:	6821      	ldr	r1, [r4, #0]
 800fa70:	60a9      	str	r1, [r5, #8]
 800fa72:	6861      	ldr	r1, [r4, #4]
 800fa74:	60e9      	str	r1, [r5, #12]
 800fa76:	2a1b      	cmp	r2, #27
 800fa78:	d81a      	bhi.n	800fab0 <_realloc_r+0x18c>
 800fa7a:	3408      	adds	r4, #8
 800fa7c:	f105 0210 	add.w	r2, r5, #16
 800fa80:	6821      	ldr	r1, [r4, #0]
 800fa82:	6011      	str	r1, [r2, #0]
 800fa84:	6861      	ldr	r1, [r4, #4]
 800fa86:	6051      	str	r1, [r2, #4]
 800fa88:	68a1      	ldr	r1, [r4, #8]
 800fa8a:	6091      	str	r1, [r2, #8]
 800fa8c:	eb05 0208 	add.w	r2, r5, r8
 800fa90:	eba7 0708 	sub.w	r7, r7, r8
 800fa94:	f047 0701 	orr.w	r7, r7, #1
 800fa98:	609a      	str	r2, [r3, #8]
 800fa9a:	6057      	str	r7, [r2, #4]
 800fa9c:	686b      	ldr	r3, [r5, #4]
 800fa9e:	f003 0301 	and.w	r3, r3, #1
 800faa2:	ea43 0308 	orr.w	r3, r3, r8
 800faa6:	606b      	str	r3, [r5, #4]
 800faa8:	4650      	mov	r0, sl
 800faaa:	f7fa ff1b 	bl	800a8e4 <__malloc_unlock>
 800faae:	e78e      	b.n	800f9ce <_realloc_r+0xaa>
 800fab0:	68a1      	ldr	r1, [r4, #8]
 800fab2:	6129      	str	r1, [r5, #16]
 800fab4:	68e1      	ldr	r1, [r4, #12]
 800fab6:	6169      	str	r1, [r5, #20]
 800fab8:	2a24      	cmp	r2, #36	@ 0x24
 800faba:	bf01      	itttt	eq
 800fabc:	6922      	ldreq	r2, [r4, #16]
 800fabe:	61aa      	streq	r2, [r5, #24]
 800fac0:	6961      	ldreq	r1, [r4, #20]
 800fac2:	61e9      	streq	r1, [r5, #28]
 800fac4:	bf19      	ittee	ne
 800fac6:	3410      	addne	r4, #16
 800fac8:	f105 0218 	addne.w	r2, r5, #24
 800facc:	f105 0220 	addeq.w	r2, r5, #32
 800fad0:	3418      	addeq	r4, #24
 800fad2:	e7d5      	b.n	800fa80 <_realloc_r+0x15c>
 800fad4:	465a      	mov	r2, fp
 800fad6:	e7d3      	b.n	800fa80 <_realloc_r+0x15c>
 800fad8:	4621      	mov	r1, r4
 800fada:	4658      	mov	r0, fp
 800fadc:	f7fe fb78 	bl	800e1d0 <memmove>
 800fae0:	4b43      	ldr	r3, [pc, #268]	@ (800fbf0 <_realloc_r+0x2cc>)
 800fae2:	e7d3      	b.n	800fa8c <_realloc_r+0x168>
 800fae4:	45b8      	cmp	r8, r7
 800fae6:	dc35      	bgt.n	800fb54 <_realloc_r+0x230>
 800fae8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800faec:	4628      	mov	r0, r5
 800faee:	60d3      	str	r3, [r2, #12]
 800faf0:	609a      	str	r2, [r3, #8]
 800faf2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800faf6:	68eb      	ldr	r3, [r5, #12]
 800faf8:	60d3      	str	r3, [r2, #12]
 800fafa:	609a      	str	r2, [r3, #8]
 800fafc:	1f32      	subs	r2, r6, #4
 800fafe:	2a24      	cmp	r2, #36	@ 0x24
 800fb00:	d824      	bhi.n	800fb4c <_realloc_r+0x228>
 800fb02:	2a13      	cmp	r2, #19
 800fb04:	d908      	bls.n	800fb18 <_realloc_r+0x1f4>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	60ab      	str	r3, [r5, #8]
 800fb0a:	6863      	ldr	r3, [r4, #4]
 800fb0c:	60eb      	str	r3, [r5, #12]
 800fb0e:	2a1b      	cmp	r2, #27
 800fb10:	d80a      	bhi.n	800fb28 <_realloc_r+0x204>
 800fb12:	3408      	adds	r4, #8
 800fb14:	f105 0010 	add.w	r0, r5, #16
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	6003      	str	r3, [r0, #0]
 800fb1c:	6863      	ldr	r3, [r4, #4]
 800fb1e:	6043      	str	r3, [r0, #4]
 800fb20:	68a3      	ldr	r3, [r4, #8]
 800fb22:	6083      	str	r3, [r0, #8]
 800fb24:	46a9      	mov	r9, r5
 800fb26:	e75c      	b.n	800f9e2 <_realloc_r+0xbe>
 800fb28:	68a3      	ldr	r3, [r4, #8]
 800fb2a:	612b      	str	r3, [r5, #16]
 800fb2c:	68e3      	ldr	r3, [r4, #12]
 800fb2e:	616b      	str	r3, [r5, #20]
 800fb30:	2a24      	cmp	r2, #36	@ 0x24
 800fb32:	bf01      	itttt	eq
 800fb34:	6923      	ldreq	r3, [r4, #16]
 800fb36:	61ab      	streq	r3, [r5, #24]
 800fb38:	6963      	ldreq	r3, [r4, #20]
 800fb3a:	61eb      	streq	r3, [r5, #28]
 800fb3c:	bf19      	ittee	ne
 800fb3e:	3410      	addne	r4, #16
 800fb40:	f105 0018 	addne.w	r0, r5, #24
 800fb44:	f105 0020 	addeq.w	r0, r5, #32
 800fb48:	3418      	addeq	r4, #24
 800fb4a:	e7e5      	b.n	800fb18 <_realloc_r+0x1f4>
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	f7fe fb3f 	bl	800e1d0 <memmove>
 800fb52:	e7e7      	b.n	800fb24 <_realloc_r+0x200>
 800fb54:	9b01      	ldr	r3, [sp, #4]
 800fb56:	4598      	cmp	r8, r3
 800fb58:	dc31      	bgt.n	800fbbe <_realloc_r+0x29a>
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	68eb      	ldr	r3, [r5, #12]
 800fb5e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800fb62:	60d3      	str	r3, [r2, #12]
 800fb64:	609a      	str	r2, [r3, #8]
 800fb66:	1f32      	subs	r2, r6, #4
 800fb68:	2a24      	cmp	r2, #36	@ 0x24
 800fb6a:	d824      	bhi.n	800fbb6 <_realloc_r+0x292>
 800fb6c:	2a13      	cmp	r2, #19
 800fb6e:	d908      	bls.n	800fb82 <_realloc_r+0x25e>
 800fb70:	6823      	ldr	r3, [r4, #0]
 800fb72:	60ab      	str	r3, [r5, #8]
 800fb74:	6863      	ldr	r3, [r4, #4]
 800fb76:	60eb      	str	r3, [r5, #12]
 800fb78:	2a1b      	cmp	r2, #27
 800fb7a:	d80a      	bhi.n	800fb92 <_realloc_r+0x26e>
 800fb7c:	3408      	adds	r4, #8
 800fb7e:	f105 0010 	add.w	r0, r5, #16
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	6003      	str	r3, [r0, #0]
 800fb86:	6863      	ldr	r3, [r4, #4]
 800fb88:	6043      	str	r3, [r0, #4]
 800fb8a:	68a3      	ldr	r3, [r4, #8]
 800fb8c:	6083      	str	r3, [r0, #8]
 800fb8e:	9f01      	ldr	r7, [sp, #4]
 800fb90:	e7c8      	b.n	800fb24 <_realloc_r+0x200>
 800fb92:	68a3      	ldr	r3, [r4, #8]
 800fb94:	612b      	str	r3, [r5, #16]
 800fb96:	68e3      	ldr	r3, [r4, #12]
 800fb98:	616b      	str	r3, [r5, #20]
 800fb9a:	2a24      	cmp	r2, #36	@ 0x24
 800fb9c:	bf01      	itttt	eq
 800fb9e:	6923      	ldreq	r3, [r4, #16]
 800fba0:	61ab      	streq	r3, [r5, #24]
 800fba2:	6963      	ldreq	r3, [r4, #20]
 800fba4:	61eb      	streq	r3, [r5, #28]
 800fba6:	bf19      	ittee	ne
 800fba8:	3410      	addne	r4, #16
 800fbaa:	f105 0018 	addne.w	r0, r5, #24
 800fbae:	f105 0020 	addeq.w	r0, r5, #32
 800fbb2:	3418      	addeq	r4, #24
 800fbb4:	e7e5      	b.n	800fb82 <_realloc_r+0x25e>
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	f7fe fb0a 	bl	800e1d0 <memmove>
 800fbbc:	e7e7      	b.n	800fb8e <_realloc_r+0x26a>
 800fbbe:	4659      	mov	r1, fp
 800fbc0:	4650      	mov	r0, sl
 800fbc2:	f7fa fc4f 	bl	800a464 <_malloc_r>
 800fbc6:	4683      	mov	fp, r0
 800fbc8:	b918      	cbnz	r0, 800fbd2 <_realloc_r+0x2ae>
 800fbca:	4650      	mov	r0, sl
 800fbcc:	f7fa fe8a 	bl	800a8e4 <__malloc_unlock>
 800fbd0:	e6c7      	b.n	800f962 <_realloc_r+0x3e>
 800fbd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fbd6:	f023 0301 	bic.w	r3, r3, #1
 800fbda:	444b      	add	r3, r9
 800fbdc:	f1a0 0208 	sub.w	r2, r0, #8
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d107      	bne.n	800fbf4 <_realloc_r+0x2d0>
 800fbe4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800fbe8:	f027 0703 	bic.w	r7, r7, #3
 800fbec:	4437      	add	r7, r6
 800fbee:	e6f8      	b.n	800f9e2 <_realloc_r+0xbe>
 800fbf0:	20000024 	.word	0x20000024
 800fbf4:	1f32      	subs	r2, r6, #4
 800fbf6:	2a24      	cmp	r2, #36	@ 0x24
 800fbf8:	d82d      	bhi.n	800fc56 <_realloc_r+0x332>
 800fbfa:	2a13      	cmp	r2, #19
 800fbfc:	d928      	bls.n	800fc50 <_realloc_r+0x32c>
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	6003      	str	r3, [r0, #0]
 800fc02:	6863      	ldr	r3, [r4, #4]
 800fc04:	6043      	str	r3, [r0, #4]
 800fc06:	2a1b      	cmp	r2, #27
 800fc08:	d80e      	bhi.n	800fc28 <_realloc_r+0x304>
 800fc0a:	f104 0208 	add.w	r2, r4, #8
 800fc0e:	f100 0308 	add.w	r3, r0, #8
 800fc12:	6811      	ldr	r1, [r2, #0]
 800fc14:	6019      	str	r1, [r3, #0]
 800fc16:	6851      	ldr	r1, [r2, #4]
 800fc18:	6059      	str	r1, [r3, #4]
 800fc1a:	6892      	ldr	r2, [r2, #8]
 800fc1c:	609a      	str	r2, [r3, #8]
 800fc1e:	4621      	mov	r1, r4
 800fc20:	4650      	mov	r0, sl
 800fc22:	f7fb f9a3 	bl	800af6c <_free_r>
 800fc26:	e73f      	b.n	800faa8 <_realloc_r+0x184>
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	6083      	str	r3, [r0, #8]
 800fc2c:	68e3      	ldr	r3, [r4, #12]
 800fc2e:	60c3      	str	r3, [r0, #12]
 800fc30:	2a24      	cmp	r2, #36	@ 0x24
 800fc32:	bf01      	itttt	eq
 800fc34:	6923      	ldreq	r3, [r4, #16]
 800fc36:	6103      	streq	r3, [r0, #16]
 800fc38:	6961      	ldreq	r1, [r4, #20]
 800fc3a:	6141      	streq	r1, [r0, #20]
 800fc3c:	bf19      	ittee	ne
 800fc3e:	f104 0210 	addne.w	r2, r4, #16
 800fc42:	f100 0310 	addne.w	r3, r0, #16
 800fc46:	f104 0218 	addeq.w	r2, r4, #24
 800fc4a:	f100 0318 	addeq.w	r3, r0, #24
 800fc4e:	e7e0      	b.n	800fc12 <_realloc_r+0x2ee>
 800fc50:	4603      	mov	r3, r0
 800fc52:	4622      	mov	r2, r4
 800fc54:	e7dd      	b.n	800fc12 <_realloc_r+0x2ee>
 800fc56:	4621      	mov	r1, r4
 800fc58:	f7fe faba 	bl	800e1d0 <memmove>
 800fc5c:	e7df      	b.n	800fc1e <_realloc_r+0x2fa>
 800fc5e:	4637      	mov	r7, r6
 800fc60:	e6bf      	b.n	800f9e2 <_realloc_r+0xbe>
 800fc62:	431f      	orrs	r7, r3
 800fc64:	f8c9 7004 	str.w	r7, [r9, #4]
 800fc68:	6853      	ldr	r3, [r2, #4]
 800fc6a:	f043 0301 	orr.w	r3, r3, #1
 800fc6e:	6053      	str	r3, [r2, #4]
 800fc70:	e6d3      	b.n	800fa1a <_realloc_r+0xf6>
 800fc72:	bf00      	nop

0800fc74 <sulp>:
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	4604      	mov	r4, r0
 800fc78:	460d      	mov	r5, r1
 800fc7a:	ec45 4b10 	vmov	d0, r4, r5
 800fc7e:	4616      	mov	r6, r2
 800fc80:	f7ff fd0a 	bl	800f698 <__ulp>
 800fc84:	ec51 0b10 	vmov	r0, r1, d0
 800fc88:	b17e      	cbz	r6, 800fcaa <sulp+0x36>
 800fc8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	dd09      	ble.n	800fcaa <sulp+0x36>
 800fc96:	051b      	lsls	r3, r3, #20
 800fc98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fc9c:	2400      	movs	r4, #0
 800fc9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fca2:	4622      	mov	r2, r4
 800fca4:	462b      	mov	r3, r5
 800fca6:	f7f0 fccf 	bl	8000648 <__aeabi_dmul>
 800fcaa:	ec41 0b10 	vmov	d0, r0, r1
 800fcae:	bd70      	pop	{r4, r5, r6, pc}

0800fcb0 <_strtod_l>:
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	b09f      	sub	sp, #124	@ 0x7c
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcba:	2200      	movs	r2, #0
 800fcbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcbe:	9005      	str	r0, [sp, #20]
 800fcc0:	f04f 0a00 	mov.w	sl, #0
 800fcc4:	f04f 0b00 	mov.w	fp, #0
 800fcc8:	460a      	mov	r2, r1
 800fcca:	9219      	str	r2, [sp, #100]	@ 0x64
 800fccc:	7811      	ldrb	r1, [r2, #0]
 800fcce:	292b      	cmp	r1, #43	@ 0x2b
 800fcd0:	d04a      	beq.n	800fd68 <_strtod_l+0xb8>
 800fcd2:	d838      	bhi.n	800fd46 <_strtod_l+0x96>
 800fcd4:	290d      	cmp	r1, #13
 800fcd6:	d832      	bhi.n	800fd3e <_strtod_l+0x8e>
 800fcd8:	2908      	cmp	r1, #8
 800fcda:	d832      	bhi.n	800fd42 <_strtod_l+0x92>
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	d03b      	beq.n	800fd58 <_strtod_l+0xa8>
 800fce0:	2200      	movs	r2, #0
 800fce2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fce4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fce6:	782a      	ldrb	r2, [r5, #0]
 800fce8:	2a30      	cmp	r2, #48	@ 0x30
 800fcea:	f040 80b3 	bne.w	800fe54 <_strtod_l+0x1a4>
 800fcee:	786a      	ldrb	r2, [r5, #1]
 800fcf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcf4:	2a58      	cmp	r2, #88	@ 0x58
 800fcf6:	d16e      	bne.n	800fdd6 <_strtod_l+0x126>
 800fcf8:	9302      	str	r3, [sp, #8]
 800fcfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4a8e      	ldr	r2, [pc, #568]	@ (800ff3c <_strtod_l+0x28c>)
 800fd04:	9805      	ldr	r0, [sp, #20]
 800fd06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd08:	a919      	add	r1, sp, #100	@ 0x64
 800fd0a:	f001 f957 	bl	8010fbc <__gethex>
 800fd0e:	f010 060f 	ands.w	r6, r0, #15
 800fd12:	4604      	mov	r4, r0
 800fd14:	d005      	beq.n	800fd22 <_strtod_l+0x72>
 800fd16:	2e06      	cmp	r6, #6
 800fd18:	d128      	bne.n	800fd6c <_strtod_l+0xbc>
 800fd1a:	3501      	adds	r5, #1
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 858e 	bne.w	8010846 <_strtod_l+0xb96>
 800fd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd2c:	b1cb      	cbz	r3, 800fd62 <_strtod_l+0xb2>
 800fd2e:	4652      	mov	r2, sl
 800fd30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fd34:	ec43 2b10 	vmov	d0, r2, r3
 800fd38:	b01f      	add	sp, #124	@ 0x7c
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	2920      	cmp	r1, #32
 800fd40:	d1ce      	bne.n	800fce0 <_strtod_l+0x30>
 800fd42:	3201      	adds	r2, #1
 800fd44:	e7c1      	b.n	800fcca <_strtod_l+0x1a>
 800fd46:	292d      	cmp	r1, #45	@ 0x2d
 800fd48:	d1ca      	bne.n	800fce0 <_strtod_l+0x30>
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd4e:	1c51      	adds	r1, r2, #1
 800fd50:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd52:	7852      	ldrb	r2, [r2, #1]
 800fd54:	2a00      	cmp	r2, #0
 800fd56:	d1c5      	bne.n	800fce4 <_strtod_l+0x34>
 800fd58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f040 8570 	bne.w	8010842 <_strtod_l+0xb92>
 800fd62:	4652      	mov	r2, sl
 800fd64:	465b      	mov	r3, fp
 800fd66:	e7e5      	b.n	800fd34 <_strtod_l+0x84>
 800fd68:	2100      	movs	r1, #0
 800fd6a:	e7ef      	b.n	800fd4c <_strtod_l+0x9c>
 800fd6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd6e:	b13a      	cbz	r2, 800fd80 <_strtod_l+0xd0>
 800fd70:	2135      	movs	r1, #53	@ 0x35
 800fd72:	a81c      	add	r0, sp, #112	@ 0x70
 800fd74:	f7ff fd8a 	bl	800f88c <__copybits>
 800fd78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd7a:	9805      	ldr	r0, [sp, #20]
 800fd7c:	f7ff f98b 	bl	800f096 <_Bfree>
 800fd80:	3e01      	subs	r6, #1
 800fd82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd84:	2e04      	cmp	r6, #4
 800fd86:	d806      	bhi.n	800fd96 <_strtod_l+0xe6>
 800fd88:	e8df f006 	tbb	[pc, r6]
 800fd8c:	201d0314 	.word	0x201d0314
 800fd90:	14          	.byte	0x14
 800fd91:	00          	.byte	0x00
 800fd92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd96:	05e1      	lsls	r1, r4, #23
 800fd98:	bf48      	it	mi
 800fd9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fd9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fda2:	0d1b      	lsrs	r3, r3, #20
 800fda4:	051b      	lsls	r3, r3, #20
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1bb      	bne.n	800fd22 <_strtod_l+0x72>
 800fdaa:	f7fb f83f 	bl	800ae2c <__errno>
 800fdae:	2322      	movs	r3, #34	@ 0x22
 800fdb0:	6003      	str	r3, [r0, #0]
 800fdb2:	e7b6      	b.n	800fd22 <_strtod_l+0x72>
 800fdb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdc4:	e7e7      	b.n	800fd96 <_strtod_l+0xe6>
 800fdc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ff44 <_strtod_l+0x294>
 800fdca:	e7e4      	b.n	800fd96 <_strtod_l+0xe6>
 800fdcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fdd0:	f04f 3aff 	mov.w	sl, #4294967295
 800fdd4:	e7df      	b.n	800fd96 <_strtod_l+0xe6>
 800fdd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdd8:	1c5a      	adds	r2, r3, #1
 800fdda:	9219      	str	r2, [sp, #100]	@ 0x64
 800fddc:	785b      	ldrb	r3, [r3, #1]
 800fdde:	2b30      	cmp	r3, #48	@ 0x30
 800fde0:	d0f9      	beq.n	800fdd6 <_strtod_l+0x126>
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d09d      	beq.n	800fd22 <_strtod_l+0x72>
 800fde6:	2301      	movs	r3, #1
 800fde8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdec:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdee:	2300      	movs	r3, #0
 800fdf0:	9308      	str	r3, [sp, #32]
 800fdf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdf4:	461f      	mov	r7, r3
 800fdf6:	220a      	movs	r2, #10
 800fdf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fdfa:	7805      	ldrb	r5, [r0, #0]
 800fdfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fe00:	b2d9      	uxtb	r1, r3
 800fe02:	2909      	cmp	r1, #9
 800fe04:	d928      	bls.n	800fe58 <_strtod_l+0x1a8>
 800fe06:	494e      	ldr	r1, [pc, #312]	@ (800ff40 <_strtod_l+0x290>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	f001 f802 	bl	8010e12 <strncmp>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d032      	beq.n	800fe78 <_strtod_l+0x1c8>
 800fe12:	2000      	movs	r0, #0
 800fe14:	462a      	mov	r2, r5
 800fe16:	4681      	mov	r9, r0
 800fe18:	463d      	mov	r5, r7
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2a65      	cmp	r2, #101	@ 0x65
 800fe1e:	d001      	beq.n	800fe24 <_strtod_l+0x174>
 800fe20:	2a45      	cmp	r2, #69	@ 0x45
 800fe22:	d114      	bne.n	800fe4e <_strtod_l+0x19e>
 800fe24:	b91d      	cbnz	r5, 800fe2e <_strtod_l+0x17e>
 800fe26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe28:	4302      	orrs	r2, r0
 800fe2a:	d095      	beq.n	800fd58 <_strtod_l+0xa8>
 800fe2c:	2500      	movs	r5, #0
 800fe2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe30:	1c62      	adds	r2, r4, #1
 800fe32:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe34:	7862      	ldrb	r2, [r4, #1]
 800fe36:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe38:	d077      	beq.n	800ff2a <_strtod_l+0x27a>
 800fe3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe3c:	d07b      	beq.n	800ff36 <_strtod_l+0x286>
 800fe3e:	f04f 0c00 	mov.w	ip, #0
 800fe42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe46:	2909      	cmp	r1, #9
 800fe48:	f240 8082 	bls.w	800ff50 <_strtod_l+0x2a0>
 800fe4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe4e:	f04f 0800 	mov.w	r8, #0
 800fe52:	e0a2      	b.n	800ff9a <_strtod_l+0x2ea>
 800fe54:	2300      	movs	r3, #0
 800fe56:	e7c7      	b.n	800fde8 <_strtod_l+0x138>
 800fe58:	2f08      	cmp	r7, #8
 800fe5a:	bfd5      	itete	le
 800fe5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fe5e:	9908      	ldrgt	r1, [sp, #32]
 800fe60:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe68:	f100 0001 	add.w	r0, r0, #1
 800fe6c:	bfd4      	ite	le
 800fe6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fe70:	9308      	strgt	r3, [sp, #32]
 800fe72:	3701      	adds	r7, #1
 800fe74:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe76:	e7bf      	b.n	800fdf8 <_strtod_l+0x148>
 800fe78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe7e:	785a      	ldrb	r2, [r3, #1]
 800fe80:	b37f      	cbz	r7, 800fee2 <_strtod_l+0x232>
 800fe82:	4681      	mov	r9, r0
 800fe84:	463d      	mov	r5, r7
 800fe86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe8a:	2b09      	cmp	r3, #9
 800fe8c:	d912      	bls.n	800feb4 <_strtod_l+0x204>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e7c4      	b.n	800fe1c <_strtod_l+0x16c>
 800fe92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe98:	785a      	ldrb	r2, [r3, #1]
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	2a30      	cmp	r2, #48	@ 0x30
 800fe9e:	d0f8      	beq.n	800fe92 <_strtod_l+0x1e2>
 800fea0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fea4:	2b08      	cmp	r3, #8
 800fea6:	f200 84d3 	bhi.w	8010850 <_strtod_l+0xba0>
 800feaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feac:	930c      	str	r3, [sp, #48]	@ 0x30
 800feae:	4681      	mov	r9, r0
 800feb0:	2000      	movs	r0, #0
 800feb2:	4605      	mov	r5, r0
 800feb4:	3a30      	subs	r2, #48	@ 0x30
 800feb6:	f100 0301 	add.w	r3, r0, #1
 800feba:	d02a      	beq.n	800ff12 <_strtod_l+0x262>
 800febc:	4499      	add	r9, r3
 800febe:	eb00 0c05 	add.w	ip, r0, r5
 800fec2:	462b      	mov	r3, r5
 800fec4:	210a      	movs	r1, #10
 800fec6:	4563      	cmp	r3, ip
 800fec8:	d10d      	bne.n	800fee6 <_strtod_l+0x236>
 800feca:	1c69      	adds	r1, r5, #1
 800fecc:	4401      	add	r1, r0
 800fece:	4428      	add	r0, r5
 800fed0:	2808      	cmp	r0, #8
 800fed2:	dc16      	bgt.n	800ff02 <_strtod_l+0x252>
 800fed4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fed6:	230a      	movs	r3, #10
 800fed8:	fb03 2300 	mla	r3, r3, r0, r2
 800fedc:	930a      	str	r3, [sp, #40]	@ 0x28
 800fede:	2300      	movs	r3, #0
 800fee0:	e018      	b.n	800ff14 <_strtod_l+0x264>
 800fee2:	4638      	mov	r0, r7
 800fee4:	e7da      	b.n	800fe9c <_strtod_l+0x1ec>
 800fee6:	2b08      	cmp	r3, #8
 800fee8:	f103 0301 	add.w	r3, r3, #1
 800feec:	dc03      	bgt.n	800fef6 <_strtod_l+0x246>
 800feee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fef0:	434e      	muls	r6, r1
 800fef2:	960a      	str	r6, [sp, #40]	@ 0x28
 800fef4:	e7e7      	b.n	800fec6 <_strtod_l+0x216>
 800fef6:	2b10      	cmp	r3, #16
 800fef8:	bfde      	ittt	le
 800fefa:	9e08      	ldrle	r6, [sp, #32]
 800fefc:	434e      	mulle	r6, r1
 800fefe:	9608      	strle	r6, [sp, #32]
 800ff00:	e7e1      	b.n	800fec6 <_strtod_l+0x216>
 800ff02:	280f      	cmp	r0, #15
 800ff04:	dceb      	bgt.n	800fede <_strtod_l+0x22e>
 800ff06:	9808      	ldr	r0, [sp, #32]
 800ff08:	230a      	movs	r3, #10
 800ff0a:	fb03 2300 	mla	r3, r3, r0, r2
 800ff0e:	9308      	str	r3, [sp, #32]
 800ff10:	e7e5      	b.n	800fede <_strtod_l+0x22e>
 800ff12:	4629      	mov	r1, r5
 800ff14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff16:	1c50      	adds	r0, r2, #1
 800ff18:	9019      	str	r0, [sp, #100]	@ 0x64
 800ff1a:	7852      	ldrb	r2, [r2, #1]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	460d      	mov	r5, r1
 800ff20:	e7b1      	b.n	800fe86 <_strtod_l+0x1d6>
 800ff22:	f04f 0900 	mov.w	r9, #0
 800ff26:	2301      	movs	r3, #1
 800ff28:	e77d      	b.n	800fe26 <_strtod_l+0x176>
 800ff2a:	f04f 0c00 	mov.w	ip, #0
 800ff2e:	1ca2      	adds	r2, r4, #2
 800ff30:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff32:	78a2      	ldrb	r2, [r4, #2]
 800ff34:	e785      	b.n	800fe42 <_strtod_l+0x192>
 800ff36:	f04f 0c01 	mov.w	ip, #1
 800ff3a:	e7f8      	b.n	800ff2e <_strtod_l+0x27e>
 800ff3c:	0801352c 	.word	0x0801352c
 800ff40:	08013348 	.word	0x08013348
 800ff44:	7ff00000 	.word	0x7ff00000
 800ff48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff4a:	1c51      	adds	r1, r2, #1
 800ff4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff4e:	7852      	ldrb	r2, [r2, #1]
 800ff50:	2a30      	cmp	r2, #48	@ 0x30
 800ff52:	d0f9      	beq.n	800ff48 <_strtod_l+0x298>
 800ff54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff58:	2908      	cmp	r1, #8
 800ff5a:	f63f af78 	bhi.w	800fe4e <_strtod_l+0x19e>
 800ff5e:	3a30      	subs	r2, #48	@ 0x30
 800ff60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff66:	f04f 080a 	mov.w	r8, #10
 800ff6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff6c:	1c56      	adds	r6, r2, #1
 800ff6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff70:	7852      	ldrb	r2, [r2, #1]
 800ff72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff76:	f1be 0f09 	cmp.w	lr, #9
 800ff7a:	d939      	bls.n	800fff0 <_strtod_l+0x340>
 800ff7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff7e:	1a76      	subs	r6, r6, r1
 800ff80:	2e08      	cmp	r6, #8
 800ff82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff86:	dc03      	bgt.n	800ff90 <_strtod_l+0x2e0>
 800ff88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff8a:	4588      	cmp	r8, r1
 800ff8c:	bfa8      	it	ge
 800ff8e:	4688      	movge	r8, r1
 800ff90:	f1bc 0f00 	cmp.w	ip, #0
 800ff94:	d001      	beq.n	800ff9a <_strtod_l+0x2ea>
 800ff96:	f1c8 0800 	rsb	r8, r8, #0
 800ff9a:	2d00      	cmp	r5, #0
 800ff9c:	d14e      	bne.n	801003c <_strtod_l+0x38c>
 800ff9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffa0:	4308      	orrs	r0, r1
 800ffa2:	f47f aebe 	bne.w	800fd22 <_strtod_l+0x72>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f47f aed6 	bne.w	800fd58 <_strtod_l+0xa8>
 800ffac:	2a69      	cmp	r2, #105	@ 0x69
 800ffae:	d028      	beq.n	8010002 <_strtod_l+0x352>
 800ffb0:	dc25      	bgt.n	800fffe <_strtod_l+0x34e>
 800ffb2:	2a49      	cmp	r2, #73	@ 0x49
 800ffb4:	d025      	beq.n	8010002 <_strtod_l+0x352>
 800ffb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffb8:	f47f aece 	bne.w	800fd58 <_strtod_l+0xa8>
 800ffbc:	499b      	ldr	r1, [pc, #620]	@ (801022c <_strtod_l+0x57c>)
 800ffbe:	a819      	add	r0, sp, #100	@ 0x64
 800ffc0:	f001 fa1e 	bl	8011400 <__match>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f43f aec7 	beq.w	800fd58 <_strtod_l+0xa8>
 800ffca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b28      	cmp	r3, #40	@ 0x28
 800ffd0:	d12e      	bne.n	8010030 <_strtod_l+0x380>
 800ffd2:	4997      	ldr	r1, [pc, #604]	@ (8010230 <_strtod_l+0x580>)
 800ffd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffd6:	a819      	add	r0, sp, #100	@ 0x64
 800ffd8:	f001 fa26 	bl	8011428 <__hexnan>
 800ffdc:	2805      	cmp	r0, #5
 800ffde:	d127      	bne.n	8010030 <_strtod_l+0x380>
 800ffe0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffe2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ffe6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ffea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ffee:	e698      	b.n	800fd22 <_strtod_l+0x72>
 800fff0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fff2:	fb08 2101 	mla	r1, r8, r1, r2
 800fff6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fffa:	920e      	str	r2, [sp, #56]	@ 0x38
 800fffc:	e7b5      	b.n	800ff6a <_strtod_l+0x2ba>
 800fffe:	2a6e      	cmp	r2, #110	@ 0x6e
 8010000:	e7da      	b.n	800ffb8 <_strtod_l+0x308>
 8010002:	498c      	ldr	r1, [pc, #560]	@ (8010234 <_strtod_l+0x584>)
 8010004:	a819      	add	r0, sp, #100	@ 0x64
 8010006:	f001 f9fb 	bl	8011400 <__match>
 801000a:	2800      	cmp	r0, #0
 801000c:	f43f aea4 	beq.w	800fd58 <_strtod_l+0xa8>
 8010010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010012:	4989      	ldr	r1, [pc, #548]	@ (8010238 <_strtod_l+0x588>)
 8010014:	3b01      	subs	r3, #1
 8010016:	a819      	add	r0, sp, #100	@ 0x64
 8010018:	9319      	str	r3, [sp, #100]	@ 0x64
 801001a:	f001 f9f1 	bl	8011400 <__match>
 801001e:	b910      	cbnz	r0, 8010026 <_strtod_l+0x376>
 8010020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010022:	3301      	adds	r3, #1
 8010024:	9319      	str	r3, [sp, #100]	@ 0x64
 8010026:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010248 <_strtod_l+0x598>
 801002a:	f04f 0a00 	mov.w	sl, #0
 801002e:	e678      	b.n	800fd22 <_strtod_l+0x72>
 8010030:	4882      	ldr	r0, [pc, #520]	@ (801023c <_strtod_l+0x58c>)
 8010032:	f000 ff01 	bl	8010e38 <nan>
 8010036:	ec5b ab10 	vmov	sl, fp, d0
 801003a:	e672      	b.n	800fd22 <_strtod_l+0x72>
 801003c:	eba8 0309 	sub.w	r3, r8, r9
 8010040:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010042:	9309      	str	r3, [sp, #36]	@ 0x24
 8010044:	2f00      	cmp	r7, #0
 8010046:	bf08      	it	eq
 8010048:	462f      	moveq	r7, r5
 801004a:	2d10      	cmp	r5, #16
 801004c:	462c      	mov	r4, r5
 801004e:	bfa8      	it	ge
 8010050:	2410      	movge	r4, #16
 8010052:	f7f0 fa7f 	bl	8000554 <__aeabi_ui2d>
 8010056:	2d09      	cmp	r5, #9
 8010058:	4682      	mov	sl, r0
 801005a:	468b      	mov	fp, r1
 801005c:	dc13      	bgt.n	8010086 <_strtod_l+0x3d6>
 801005e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010060:	2b00      	cmp	r3, #0
 8010062:	f43f ae5e 	beq.w	800fd22 <_strtod_l+0x72>
 8010066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010068:	dd78      	ble.n	801015c <_strtod_l+0x4ac>
 801006a:	2b16      	cmp	r3, #22
 801006c:	dc5f      	bgt.n	801012e <_strtod_l+0x47e>
 801006e:	4974      	ldr	r1, [pc, #464]	@ (8010240 <_strtod_l+0x590>)
 8010070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010078:	4652      	mov	r2, sl
 801007a:	465b      	mov	r3, fp
 801007c:	f7f0 fae4 	bl	8000648 <__aeabi_dmul>
 8010080:	4682      	mov	sl, r0
 8010082:	468b      	mov	fp, r1
 8010084:	e64d      	b.n	800fd22 <_strtod_l+0x72>
 8010086:	4b6e      	ldr	r3, [pc, #440]	@ (8010240 <_strtod_l+0x590>)
 8010088:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801008c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010090:	f7f0 fada 	bl	8000648 <__aeabi_dmul>
 8010094:	4682      	mov	sl, r0
 8010096:	9808      	ldr	r0, [sp, #32]
 8010098:	468b      	mov	fp, r1
 801009a:	f7f0 fa5b 	bl	8000554 <__aeabi_ui2d>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4650      	mov	r0, sl
 80100a4:	4659      	mov	r1, fp
 80100a6:	f7f0 f919 	bl	80002dc <__adddf3>
 80100aa:	2d0f      	cmp	r5, #15
 80100ac:	4682      	mov	sl, r0
 80100ae:	468b      	mov	fp, r1
 80100b0:	ddd5      	ble.n	801005e <_strtod_l+0x3ae>
 80100b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100b4:	1b2c      	subs	r4, r5, r4
 80100b6:	441c      	add	r4, r3
 80100b8:	2c00      	cmp	r4, #0
 80100ba:	f340 8096 	ble.w	80101ea <_strtod_l+0x53a>
 80100be:	f014 030f 	ands.w	r3, r4, #15
 80100c2:	d00a      	beq.n	80100da <_strtod_l+0x42a>
 80100c4:	495e      	ldr	r1, [pc, #376]	@ (8010240 <_strtod_l+0x590>)
 80100c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100ca:	4652      	mov	r2, sl
 80100cc:	465b      	mov	r3, fp
 80100ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d2:	f7f0 fab9 	bl	8000648 <__aeabi_dmul>
 80100d6:	4682      	mov	sl, r0
 80100d8:	468b      	mov	fp, r1
 80100da:	f034 040f 	bics.w	r4, r4, #15
 80100de:	d073      	beq.n	80101c8 <_strtod_l+0x518>
 80100e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100e4:	dd48      	ble.n	8010178 <_strtod_l+0x4c8>
 80100e6:	2400      	movs	r4, #0
 80100e8:	46a0      	mov	r8, r4
 80100ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80100ec:	46a1      	mov	r9, r4
 80100ee:	9a05      	ldr	r2, [sp, #20]
 80100f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010248 <_strtod_l+0x598>
 80100f4:	2322      	movs	r3, #34	@ 0x22
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	f04f 0a00 	mov.w	sl, #0
 80100fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f43f ae0f 	beq.w	800fd22 <_strtod_l+0x72>
 8010104:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010106:	9805      	ldr	r0, [sp, #20]
 8010108:	f7fe ffc5 	bl	800f096 <_Bfree>
 801010c:	9805      	ldr	r0, [sp, #20]
 801010e:	4649      	mov	r1, r9
 8010110:	f7fe ffc1 	bl	800f096 <_Bfree>
 8010114:	9805      	ldr	r0, [sp, #20]
 8010116:	4641      	mov	r1, r8
 8010118:	f7fe ffbd 	bl	800f096 <_Bfree>
 801011c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801011e:	9805      	ldr	r0, [sp, #20]
 8010120:	f7fe ffb9 	bl	800f096 <_Bfree>
 8010124:	9805      	ldr	r0, [sp, #20]
 8010126:	4621      	mov	r1, r4
 8010128:	f7fe ffb5 	bl	800f096 <_Bfree>
 801012c:	e5f9      	b.n	800fd22 <_strtod_l+0x72>
 801012e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010130:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010134:	4293      	cmp	r3, r2
 8010136:	dbbc      	blt.n	80100b2 <_strtod_l+0x402>
 8010138:	4c41      	ldr	r4, [pc, #260]	@ (8010240 <_strtod_l+0x590>)
 801013a:	f1c5 050f 	rsb	r5, r5, #15
 801013e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010142:	4652      	mov	r2, sl
 8010144:	465b      	mov	r3, fp
 8010146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801014a:	f7f0 fa7d 	bl	8000648 <__aeabi_dmul>
 801014e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010150:	1b5d      	subs	r5, r3, r5
 8010152:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010156:	e9d4 2300 	ldrd	r2, r3, [r4]
 801015a:	e78f      	b.n	801007c <_strtod_l+0x3cc>
 801015c:	3316      	adds	r3, #22
 801015e:	dba8      	blt.n	80100b2 <_strtod_l+0x402>
 8010160:	4b37      	ldr	r3, [pc, #220]	@ (8010240 <_strtod_l+0x590>)
 8010162:	eba9 0808 	sub.w	r8, r9, r8
 8010166:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801016a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801016e:	4650      	mov	r0, sl
 8010170:	4659      	mov	r1, fp
 8010172:	f7f0 fb93 	bl	800089c <__aeabi_ddiv>
 8010176:	e783      	b.n	8010080 <_strtod_l+0x3d0>
 8010178:	4b32      	ldr	r3, [pc, #200]	@ (8010244 <_strtod_l+0x594>)
 801017a:	9308      	str	r3, [sp, #32]
 801017c:	2300      	movs	r3, #0
 801017e:	1124      	asrs	r4, r4, #4
 8010180:	4650      	mov	r0, sl
 8010182:	4659      	mov	r1, fp
 8010184:	461e      	mov	r6, r3
 8010186:	2c01      	cmp	r4, #1
 8010188:	dc21      	bgt.n	80101ce <_strtod_l+0x51e>
 801018a:	b10b      	cbz	r3, 8010190 <_strtod_l+0x4e0>
 801018c:	4682      	mov	sl, r0
 801018e:	468b      	mov	fp, r1
 8010190:	492c      	ldr	r1, [pc, #176]	@ (8010244 <_strtod_l+0x594>)
 8010192:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010196:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801019a:	4652      	mov	r2, sl
 801019c:	465b      	mov	r3, fp
 801019e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101a2:	f7f0 fa51 	bl	8000648 <__aeabi_dmul>
 80101a6:	4b28      	ldr	r3, [pc, #160]	@ (8010248 <_strtod_l+0x598>)
 80101a8:	460a      	mov	r2, r1
 80101aa:	400b      	ands	r3, r1
 80101ac:	4927      	ldr	r1, [pc, #156]	@ (801024c <_strtod_l+0x59c>)
 80101ae:	428b      	cmp	r3, r1
 80101b0:	4682      	mov	sl, r0
 80101b2:	d898      	bhi.n	80100e6 <_strtod_l+0x436>
 80101b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101b8:	428b      	cmp	r3, r1
 80101ba:	bf86      	itte	hi
 80101bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010250 <_strtod_l+0x5a0>
 80101c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80101c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101c8:	2300      	movs	r3, #0
 80101ca:	9308      	str	r3, [sp, #32]
 80101cc:	e07a      	b.n	80102c4 <_strtod_l+0x614>
 80101ce:	07e2      	lsls	r2, r4, #31
 80101d0:	d505      	bpl.n	80101de <_strtod_l+0x52e>
 80101d2:	9b08      	ldr	r3, [sp, #32]
 80101d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d8:	f7f0 fa36 	bl	8000648 <__aeabi_dmul>
 80101dc:	2301      	movs	r3, #1
 80101de:	9a08      	ldr	r2, [sp, #32]
 80101e0:	3208      	adds	r2, #8
 80101e2:	3601      	adds	r6, #1
 80101e4:	1064      	asrs	r4, r4, #1
 80101e6:	9208      	str	r2, [sp, #32]
 80101e8:	e7cd      	b.n	8010186 <_strtod_l+0x4d6>
 80101ea:	d0ed      	beq.n	80101c8 <_strtod_l+0x518>
 80101ec:	4264      	negs	r4, r4
 80101ee:	f014 020f 	ands.w	r2, r4, #15
 80101f2:	d00a      	beq.n	801020a <_strtod_l+0x55a>
 80101f4:	4b12      	ldr	r3, [pc, #72]	@ (8010240 <_strtod_l+0x590>)
 80101f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101fa:	4650      	mov	r0, sl
 80101fc:	4659      	mov	r1, fp
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 fb4b 	bl	800089c <__aeabi_ddiv>
 8010206:	4682      	mov	sl, r0
 8010208:	468b      	mov	fp, r1
 801020a:	1124      	asrs	r4, r4, #4
 801020c:	d0dc      	beq.n	80101c8 <_strtod_l+0x518>
 801020e:	2c1f      	cmp	r4, #31
 8010210:	dd20      	ble.n	8010254 <_strtod_l+0x5a4>
 8010212:	2400      	movs	r4, #0
 8010214:	46a0      	mov	r8, r4
 8010216:	940a      	str	r4, [sp, #40]	@ 0x28
 8010218:	46a1      	mov	r9, r4
 801021a:	9a05      	ldr	r2, [sp, #20]
 801021c:	2322      	movs	r3, #34	@ 0x22
 801021e:	f04f 0a00 	mov.w	sl, #0
 8010222:	f04f 0b00 	mov.w	fp, #0
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	e768      	b.n	80100fc <_strtod_l+0x44c>
 801022a:	bf00      	nop
 801022c:	080132d1 	.word	0x080132d1
 8010230:	08013518 	.word	0x08013518
 8010234:	080132c9 	.word	0x080132c9
 8010238:	0801334d 	.word	0x0801334d
 801023c:	080136a4 	.word	0x080136a4
 8010240:	08013450 	.word	0x08013450
 8010244:	08013428 	.word	0x08013428
 8010248:	7ff00000 	.word	0x7ff00000
 801024c:	7ca00000 	.word	0x7ca00000
 8010250:	7fefffff 	.word	0x7fefffff
 8010254:	f014 0310 	ands.w	r3, r4, #16
 8010258:	bf18      	it	ne
 801025a:	236a      	movne	r3, #106	@ 0x6a
 801025c:	4ea9      	ldr	r6, [pc, #676]	@ (8010504 <_strtod_l+0x854>)
 801025e:	9308      	str	r3, [sp, #32]
 8010260:	4650      	mov	r0, sl
 8010262:	4659      	mov	r1, fp
 8010264:	2300      	movs	r3, #0
 8010266:	07e2      	lsls	r2, r4, #31
 8010268:	d504      	bpl.n	8010274 <_strtod_l+0x5c4>
 801026a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801026e:	f7f0 f9eb 	bl	8000648 <__aeabi_dmul>
 8010272:	2301      	movs	r3, #1
 8010274:	1064      	asrs	r4, r4, #1
 8010276:	f106 0608 	add.w	r6, r6, #8
 801027a:	d1f4      	bne.n	8010266 <_strtod_l+0x5b6>
 801027c:	b10b      	cbz	r3, 8010282 <_strtod_l+0x5d2>
 801027e:	4682      	mov	sl, r0
 8010280:	468b      	mov	fp, r1
 8010282:	9b08      	ldr	r3, [sp, #32]
 8010284:	b1b3      	cbz	r3, 80102b4 <_strtod_l+0x604>
 8010286:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801028a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801028e:	2b00      	cmp	r3, #0
 8010290:	4659      	mov	r1, fp
 8010292:	dd0f      	ble.n	80102b4 <_strtod_l+0x604>
 8010294:	2b1f      	cmp	r3, #31
 8010296:	dd55      	ble.n	8010344 <_strtod_l+0x694>
 8010298:	2b34      	cmp	r3, #52	@ 0x34
 801029a:	bfde      	ittt	le
 801029c:	f04f 33ff 	movle.w	r3, #4294967295
 80102a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80102a4:	4093      	lslle	r3, r2
 80102a6:	f04f 0a00 	mov.w	sl, #0
 80102aa:	bfcc      	ite	gt
 80102ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102b0:	ea03 0b01 	andle.w	fp, r3, r1
 80102b4:	2200      	movs	r2, #0
 80102b6:	2300      	movs	r3, #0
 80102b8:	4650      	mov	r0, sl
 80102ba:	4659      	mov	r1, fp
 80102bc:	f7f0 fc2c 	bl	8000b18 <__aeabi_dcmpeq>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d1a6      	bne.n	8010212 <_strtod_l+0x562>
 80102c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102ca:	9805      	ldr	r0, [sp, #20]
 80102cc:	462b      	mov	r3, r5
 80102ce:	463a      	mov	r2, r7
 80102d0:	f7fe ff30 	bl	800f134 <__s2b>
 80102d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f43f af05 	beq.w	80100e6 <_strtod_l+0x436>
 80102dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102de:	2a00      	cmp	r2, #0
 80102e0:	eba9 0308 	sub.w	r3, r9, r8
 80102e4:	bfa8      	it	ge
 80102e6:	2300      	movge	r3, #0
 80102e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80102ea:	2400      	movs	r4, #0
 80102ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80102f2:	46a0      	mov	r8, r4
 80102f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102f6:	9805      	ldr	r0, [sp, #20]
 80102f8:	6859      	ldr	r1, [r3, #4]
 80102fa:	f7fe fea7 	bl	800f04c <_Balloc>
 80102fe:	4681      	mov	r9, r0
 8010300:	2800      	cmp	r0, #0
 8010302:	f43f aef4 	beq.w	80100ee <_strtod_l+0x43e>
 8010306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010308:	691a      	ldr	r2, [r3, #16]
 801030a:	3202      	adds	r2, #2
 801030c:	f103 010c 	add.w	r1, r3, #12
 8010310:	0092      	lsls	r2, r2, #2
 8010312:	300c      	adds	r0, #12
 8010314:	f7fd ffca 	bl	800e2ac <memcpy>
 8010318:	ec4b ab10 	vmov	d0, sl, fp
 801031c:	9805      	ldr	r0, [sp, #20]
 801031e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010320:	a91b      	add	r1, sp, #108	@ 0x6c
 8010322:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010326:	f7ff fa27 	bl	800f778 <__d2b>
 801032a:	901a      	str	r0, [sp, #104]	@ 0x68
 801032c:	2800      	cmp	r0, #0
 801032e:	f43f aede 	beq.w	80100ee <_strtod_l+0x43e>
 8010332:	9805      	ldr	r0, [sp, #20]
 8010334:	2101      	movs	r1, #1
 8010336:	f7fe ff93 	bl	800f260 <__i2b>
 801033a:	4680      	mov	r8, r0
 801033c:	b948      	cbnz	r0, 8010352 <_strtod_l+0x6a2>
 801033e:	f04f 0800 	mov.w	r8, #0
 8010342:	e6d4      	b.n	80100ee <_strtod_l+0x43e>
 8010344:	f04f 32ff 	mov.w	r2, #4294967295
 8010348:	fa02 f303 	lsl.w	r3, r2, r3
 801034c:	ea03 0a0a 	and.w	sl, r3, sl
 8010350:	e7b0      	b.n	80102b4 <_strtod_l+0x604>
 8010352:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010354:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010356:	2d00      	cmp	r5, #0
 8010358:	bfab      	itete	ge
 801035a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801035c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801035e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010360:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010362:	bfac      	ite	ge
 8010364:	18ef      	addge	r7, r5, r3
 8010366:	1b5e      	sublt	r6, r3, r5
 8010368:	9b08      	ldr	r3, [sp, #32]
 801036a:	1aed      	subs	r5, r5, r3
 801036c:	4415      	add	r5, r2
 801036e:	4b66      	ldr	r3, [pc, #408]	@ (8010508 <_strtod_l+0x858>)
 8010370:	3d01      	subs	r5, #1
 8010372:	429d      	cmp	r5, r3
 8010374:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010378:	da50      	bge.n	801041c <_strtod_l+0x76c>
 801037a:	1b5b      	subs	r3, r3, r5
 801037c:	2b1f      	cmp	r3, #31
 801037e:	eba2 0203 	sub.w	r2, r2, r3
 8010382:	f04f 0101 	mov.w	r1, #1
 8010386:	dc3d      	bgt.n	8010404 <_strtod_l+0x754>
 8010388:	fa01 f303 	lsl.w	r3, r1, r3
 801038c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801038e:	2300      	movs	r3, #0
 8010390:	9310      	str	r3, [sp, #64]	@ 0x40
 8010392:	18bd      	adds	r5, r7, r2
 8010394:	9b08      	ldr	r3, [sp, #32]
 8010396:	42af      	cmp	r7, r5
 8010398:	4416      	add	r6, r2
 801039a:	441e      	add	r6, r3
 801039c:	463b      	mov	r3, r7
 801039e:	bfa8      	it	ge
 80103a0:	462b      	movge	r3, r5
 80103a2:	42b3      	cmp	r3, r6
 80103a4:	bfa8      	it	ge
 80103a6:	4633      	movge	r3, r6
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bfc2      	ittt	gt
 80103ac:	1aed      	subgt	r5, r5, r3
 80103ae:	1af6      	subgt	r6, r6, r3
 80103b0:	1aff      	subgt	r7, r7, r3
 80103b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dd16      	ble.n	80103e6 <_strtod_l+0x736>
 80103b8:	4641      	mov	r1, r8
 80103ba:	9805      	ldr	r0, [sp, #20]
 80103bc:	461a      	mov	r2, r3
 80103be:	f7ff f80f 	bl	800f3e0 <__pow5mult>
 80103c2:	4680      	mov	r8, r0
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d0ba      	beq.n	801033e <_strtod_l+0x68e>
 80103c8:	4601      	mov	r1, r0
 80103ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103cc:	9805      	ldr	r0, [sp, #20]
 80103ce:	f7fe ff5d 	bl	800f28c <__multiply>
 80103d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f43f ae8a 	beq.w	80100ee <_strtod_l+0x43e>
 80103da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103dc:	9805      	ldr	r0, [sp, #20]
 80103de:	f7fe fe5a 	bl	800f096 <_Bfree>
 80103e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80103e6:	2d00      	cmp	r5, #0
 80103e8:	dc1d      	bgt.n	8010426 <_strtod_l+0x776>
 80103ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	dd23      	ble.n	8010438 <_strtod_l+0x788>
 80103f0:	4649      	mov	r1, r9
 80103f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80103f4:	9805      	ldr	r0, [sp, #20]
 80103f6:	f7fe fff3 	bl	800f3e0 <__pow5mult>
 80103fa:	4681      	mov	r9, r0
 80103fc:	b9e0      	cbnz	r0, 8010438 <_strtod_l+0x788>
 80103fe:	f04f 0900 	mov.w	r9, #0
 8010402:	e674      	b.n	80100ee <_strtod_l+0x43e>
 8010404:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010408:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801040c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010410:	35e2      	adds	r5, #226	@ 0xe2
 8010412:	fa01 f305 	lsl.w	r3, r1, r5
 8010416:	9310      	str	r3, [sp, #64]	@ 0x40
 8010418:	9113      	str	r1, [sp, #76]	@ 0x4c
 801041a:	e7ba      	b.n	8010392 <_strtod_l+0x6e2>
 801041c:	2300      	movs	r3, #0
 801041e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010420:	2301      	movs	r3, #1
 8010422:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010424:	e7b5      	b.n	8010392 <_strtod_l+0x6e2>
 8010426:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010428:	9805      	ldr	r0, [sp, #20]
 801042a:	462a      	mov	r2, r5
 801042c:	f7ff f818 	bl	800f460 <__lshift>
 8010430:	901a      	str	r0, [sp, #104]	@ 0x68
 8010432:	2800      	cmp	r0, #0
 8010434:	d1d9      	bne.n	80103ea <_strtod_l+0x73a>
 8010436:	e65a      	b.n	80100ee <_strtod_l+0x43e>
 8010438:	2e00      	cmp	r6, #0
 801043a:	dd07      	ble.n	801044c <_strtod_l+0x79c>
 801043c:	4649      	mov	r1, r9
 801043e:	9805      	ldr	r0, [sp, #20]
 8010440:	4632      	mov	r2, r6
 8010442:	f7ff f80d 	bl	800f460 <__lshift>
 8010446:	4681      	mov	r9, r0
 8010448:	2800      	cmp	r0, #0
 801044a:	d0d8      	beq.n	80103fe <_strtod_l+0x74e>
 801044c:	2f00      	cmp	r7, #0
 801044e:	dd08      	ble.n	8010462 <_strtod_l+0x7b2>
 8010450:	4641      	mov	r1, r8
 8010452:	9805      	ldr	r0, [sp, #20]
 8010454:	463a      	mov	r2, r7
 8010456:	f7ff f803 	bl	800f460 <__lshift>
 801045a:	4680      	mov	r8, r0
 801045c:	2800      	cmp	r0, #0
 801045e:	f43f ae46 	beq.w	80100ee <_strtod_l+0x43e>
 8010462:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010464:	9805      	ldr	r0, [sp, #20]
 8010466:	464a      	mov	r2, r9
 8010468:	f7ff f882 	bl	800f570 <__mdiff>
 801046c:	4604      	mov	r4, r0
 801046e:	2800      	cmp	r0, #0
 8010470:	f43f ae3d 	beq.w	80100ee <_strtod_l+0x43e>
 8010474:	68c3      	ldr	r3, [r0, #12]
 8010476:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010478:	2300      	movs	r3, #0
 801047a:	60c3      	str	r3, [r0, #12]
 801047c:	4641      	mov	r1, r8
 801047e:	f7ff f85b 	bl	800f538 <__mcmp>
 8010482:	2800      	cmp	r0, #0
 8010484:	da46      	bge.n	8010514 <_strtod_l+0x864>
 8010486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010488:	ea53 030a 	orrs.w	r3, r3, sl
 801048c:	d16c      	bne.n	8010568 <_strtod_l+0x8b8>
 801048e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010492:	2b00      	cmp	r3, #0
 8010494:	d168      	bne.n	8010568 <_strtod_l+0x8b8>
 8010496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801049a:	0d1b      	lsrs	r3, r3, #20
 801049c:	051b      	lsls	r3, r3, #20
 801049e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104a2:	d961      	bls.n	8010568 <_strtod_l+0x8b8>
 80104a4:	6963      	ldr	r3, [r4, #20]
 80104a6:	b913      	cbnz	r3, 80104ae <_strtod_l+0x7fe>
 80104a8:	6923      	ldr	r3, [r4, #16]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	dd5c      	ble.n	8010568 <_strtod_l+0x8b8>
 80104ae:	4621      	mov	r1, r4
 80104b0:	2201      	movs	r2, #1
 80104b2:	9805      	ldr	r0, [sp, #20]
 80104b4:	f7fe ffd4 	bl	800f460 <__lshift>
 80104b8:	4641      	mov	r1, r8
 80104ba:	4604      	mov	r4, r0
 80104bc:	f7ff f83c 	bl	800f538 <__mcmp>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	dd51      	ble.n	8010568 <_strtod_l+0x8b8>
 80104c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104c8:	9a08      	ldr	r2, [sp, #32]
 80104ca:	0d1b      	lsrs	r3, r3, #20
 80104cc:	051b      	lsls	r3, r3, #20
 80104ce:	2a00      	cmp	r2, #0
 80104d0:	d06b      	beq.n	80105aa <_strtod_l+0x8fa>
 80104d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104d6:	d868      	bhi.n	80105aa <_strtod_l+0x8fa>
 80104d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104dc:	f67f ae9d 	bls.w	801021a <_strtod_l+0x56a>
 80104e0:	4b0a      	ldr	r3, [pc, #40]	@ (801050c <_strtod_l+0x85c>)
 80104e2:	4650      	mov	r0, sl
 80104e4:	4659      	mov	r1, fp
 80104e6:	2200      	movs	r2, #0
 80104e8:	f7f0 f8ae 	bl	8000648 <__aeabi_dmul>
 80104ec:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <_strtod_l+0x860>)
 80104ee:	400b      	ands	r3, r1
 80104f0:	4682      	mov	sl, r0
 80104f2:	468b      	mov	fp, r1
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f47f ae05 	bne.w	8010104 <_strtod_l+0x454>
 80104fa:	9a05      	ldr	r2, [sp, #20]
 80104fc:	2322      	movs	r3, #34	@ 0x22
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	e600      	b.n	8010104 <_strtod_l+0x454>
 8010502:	bf00      	nop
 8010504:	08013540 	.word	0x08013540
 8010508:	fffffc02 	.word	0xfffffc02
 801050c:	39500000 	.word	0x39500000
 8010510:	7ff00000 	.word	0x7ff00000
 8010514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010518:	d165      	bne.n	80105e6 <_strtod_l+0x936>
 801051a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801051c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010520:	b35a      	cbz	r2, 801057a <_strtod_l+0x8ca>
 8010522:	4a9f      	ldr	r2, [pc, #636]	@ (80107a0 <_strtod_l+0xaf0>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d12b      	bne.n	8010580 <_strtod_l+0x8d0>
 8010528:	9b08      	ldr	r3, [sp, #32]
 801052a:	4651      	mov	r1, sl
 801052c:	b303      	cbz	r3, 8010570 <_strtod_l+0x8c0>
 801052e:	4b9d      	ldr	r3, [pc, #628]	@ (80107a4 <_strtod_l+0xaf4>)
 8010530:	465a      	mov	r2, fp
 8010532:	4013      	ands	r3, r2
 8010534:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010538:	f04f 32ff 	mov.w	r2, #4294967295
 801053c:	d81b      	bhi.n	8010576 <_strtod_l+0x8c6>
 801053e:	0d1b      	lsrs	r3, r3, #20
 8010540:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010544:	fa02 f303 	lsl.w	r3, r2, r3
 8010548:	4299      	cmp	r1, r3
 801054a:	d119      	bne.n	8010580 <_strtod_l+0x8d0>
 801054c:	4b96      	ldr	r3, [pc, #600]	@ (80107a8 <_strtod_l+0xaf8>)
 801054e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010550:	429a      	cmp	r2, r3
 8010552:	d102      	bne.n	801055a <_strtod_l+0x8aa>
 8010554:	3101      	adds	r1, #1
 8010556:	f43f adca 	beq.w	80100ee <_strtod_l+0x43e>
 801055a:	4b92      	ldr	r3, [pc, #584]	@ (80107a4 <_strtod_l+0xaf4>)
 801055c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801055e:	401a      	ands	r2, r3
 8010560:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010564:	f04f 0a00 	mov.w	sl, #0
 8010568:	9b08      	ldr	r3, [sp, #32]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1b8      	bne.n	80104e0 <_strtod_l+0x830>
 801056e:	e5c9      	b.n	8010104 <_strtod_l+0x454>
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
 8010574:	e7e8      	b.n	8010548 <_strtod_l+0x898>
 8010576:	4613      	mov	r3, r2
 8010578:	e7e6      	b.n	8010548 <_strtod_l+0x898>
 801057a:	ea53 030a 	orrs.w	r3, r3, sl
 801057e:	d0a1      	beq.n	80104c4 <_strtod_l+0x814>
 8010580:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010582:	b1db      	cbz	r3, 80105bc <_strtod_l+0x90c>
 8010584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010586:	4213      	tst	r3, r2
 8010588:	d0ee      	beq.n	8010568 <_strtod_l+0x8b8>
 801058a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801058c:	9a08      	ldr	r2, [sp, #32]
 801058e:	4650      	mov	r0, sl
 8010590:	4659      	mov	r1, fp
 8010592:	b1bb      	cbz	r3, 80105c4 <_strtod_l+0x914>
 8010594:	f7ff fb6e 	bl	800fc74 <sulp>
 8010598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801059c:	ec53 2b10 	vmov	r2, r3, d0
 80105a0:	f7ef fe9c 	bl	80002dc <__adddf3>
 80105a4:	4682      	mov	sl, r0
 80105a6:	468b      	mov	fp, r1
 80105a8:	e7de      	b.n	8010568 <_strtod_l+0x8b8>
 80105aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105b6:	f04f 3aff 	mov.w	sl, #4294967295
 80105ba:	e7d5      	b.n	8010568 <_strtod_l+0x8b8>
 80105bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105be:	ea13 0f0a 	tst.w	r3, sl
 80105c2:	e7e1      	b.n	8010588 <_strtod_l+0x8d8>
 80105c4:	f7ff fb56 	bl	800fc74 <sulp>
 80105c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105cc:	ec53 2b10 	vmov	r2, r3, d0
 80105d0:	f7ef fe82 	bl	80002d8 <__aeabi_dsub>
 80105d4:	2200      	movs	r2, #0
 80105d6:	2300      	movs	r3, #0
 80105d8:	4682      	mov	sl, r0
 80105da:	468b      	mov	fp, r1
 80105dc:	f7f0 fa9c 	bl	8000b18 <__aeabi_dcmpeq>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d0c1      	beq.n	8010568 <_strtod_l+0x8b8>
 80105e4:	e619      	b.n	801021a <_strtod_l+0x56a>
 80105e6:	4641      	mov	r1, r8
 80105e8:	4620      	mov	r0, r4
 80105ea:	f7ff f91d 	bl	800f828 <__ratio>
 80105ee:	ec57 6b10 	vmov	r6, r7, d0
 80105f2:	2200      	movs	r2, #0
 80105f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7f0 faa0 	bl	8000b40 <__aeabi_dcmple>
 8010600:	2800      	cmp	r0, #0
 8010602:	d06f      	beq.n	80106e4 <_strtod_l+0xa34>
 8010604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d17a      	bne.n	8010700 <_strtod_l+0xa50>
 801060a:	f1ba 0f00 	cmp.w	sl, #0
 801060e:	d158      	bne.n	80106c2 <_strtod_l+0xa12>
 8010610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010616:	2b00      	cmp	r3, #0
 8010618:	d15a      	bne.n	80106d0 <_strtod_l+0xa20>
 801061a:	4b64      	ldr	r3, [pc, #400]	@ (80107ac <_strtod_l+0xafc>)
 801061c:	2200      	movs	r2, #0
 801061e:	4630      	mov	r0, r6
 8010620:	4639      	mov	r1, r7
 8010622:	f7f0 fa83 	bl	8000b2c <__aeabi_dcmplt>
 8010626:	2800      	cmp	r0, #0
 8010628:	d159      	bne.n	80106de <_strtod_l+0xa2e>
 801062a:	4630      	mov	r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	4b60      	ldr	r3, [pc, #384]	@ (80107b0 <_strtod_l+0xb00>)
 8010630:	2200      	movs	r2, #0
 8010632:	f7f0 f809 	bl	8000648 <__aeabi_dmul>
 8010636:	4606      	mov	r6, r0
 8010638:	460f      	mov	r7, r1
 801063a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801063e:	9606      	str	r6, [sp, #24]
 8010640:	9307      	str	r3, [sp, #28]
 8010642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010646:	4d57      	ldr	r5, [pc, #348]	@ (80107a4 <_strtod_l+0xaf4>)
 8010648:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801064c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801064e:	401d      	ands	r5, r3
 8010650:	4b58      	ldr	r3, [pc, #352]	@ (80107b4 <_strtod_l+0xb04>)
 8010652:	429d      	cmp	r5, r3
 8010654:	f040 80b2 	bne.w	80107bc <_strtod_l+0xb0c>
 8010658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801065a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801065e:	ec4b ab10 	vmov	d0, sl, fp
 8010662:	f7ff f819 	bl	800f698 <__ulp>
 8010666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801066a:	ec51 0b10 	vmov	r0, r1, d0
 801066e:	f7ef ffeb 	bl	8000648 <__aeabi_dmul>
 8010672:	4652      	mov	r2, sl
 8010674:	465b      	mov	r3, fp
 8010676:	f7ef fe31 	bl	80002dc <__adddf3>
 801067a:	460b      	mov	r3, r1
 801067c:	4949      	ldr	r1, [pc, #292]	@ (80107a4 <_strtod_l+0xaf4>)
 801067e:	4a4e      	ldr	r2, [pc, #312]	@ (80107b8 <_strtod_l+0xb08>)
 8010680:	4019      	ands	r1, r3
 8010682:	4291      	cmp	r1, r2
 8010684:	4682      	mov	sl, r0
 8010686:	d942      	bls.n	801070e <_strtod_l+0xa5e>
 8010688:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801068a:	4b47      	ldr	r3, [pc, #284]	@ (80107a8 <_strtod_l+0xaf8>)
 801068c:	429a      	cmp	r2, r3
 801068e:	d103      	bne.n	8010698 <_strtod_l+0x9e8>
 8010690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010692:	3301      	adds	r3, #1
 8010694:	f43f ad2b 	beq.w	80100ee <_strtod_l+0x43e>
 8010698:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80107a8 <_strtod_l+0xaf8>
 801069c:	f04f 3aff 	mov.w	sl, #4294967295
 80106a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106a2:	9805      	ldr	r0, [sp, #20]
 80106a4:	f7fe fcf7 	bl	800f096 <_Bfree>
 80106a8:	9805      	ldr	r0, [sp, #20]
 80106aa:	4649      	mov	r1, r9
 80106ac:	f7fe fcf3 	bl	800f096 <_Bfree>
 80106b0:	9805      	ldr	r0, [sp, #20]
 80106b2:	4641      	mov	r1, r8
 80106b4:	f7fe fcef 	bl	800f096 <_Bfree>
 80106b8:	9805      	ldr	r0, [sp, #20]
 80106ba:	4621      	mov	r1, r4
 80106bc:	f7fe fceb 	bl	800f096 <_Bfree>
 80106c0:	e618      	b.n	80102f4 <_strtod_l+0x644>
 80106c2:	f1ba 0f01 	cmp.w	sl, #1
 80106c6:	d103      	bne.n	80106d0 <_strtod_l+0xa20>
 80106c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f43f ada5 	beq.w	801021a <_strtod_l+0x56a>
 80106d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010780 <_strtod_l+0xad0>
 80106d4:	4f35      	ldr	r7, [pc, #212]	@ (80107ac <_strtod_l+0xafc>)
 80106d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106da:	2600      	movs	r6, #0
 80106dc:	e7b1      	b.n	8010642 <_strtod_l+0x992>
 80106de:	4f34      	ldr	r7, [pc, #208]	@ (80107b0 <_strtod_l+0xb00>)
 80106e0:	2600      	movs	r6, #0
 80106e2:	e7aa      	b.n	801063a <_strtod_l+0x98a>
 80106e4:	4b32      	ldr	r3, [pc, #200]	@ (80107b0 <_strtod_l+0xb00>)
 80106e6:	4630      	mov	r0, r6
 80106e8:	4639      	mov	r1, r7
 80106ea:	2200      	movs	r2, #0
 80106ec:	f7ef ffac 	bl	8000648 <__aeabi_dmul>
 80106f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d09f      	beq.n	801063a <_strtod_l+0x98a>
 80106fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106fe:	e7a0      	b.n	8010642 <_strtod_l+0x992>
 8010700:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010788 <_strtod_l+0xad8>
 8010704:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010708:	ec57 6b17 	vmov	r6, r7, d7
 801070c:	e799      	b.n	8010642 <_strtod_l+0x992>
 801070e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010712:	9b08      	ldr	r3, [sp, #32]
 8010714:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1c1      	bne.n	80106a0 <_strtod_l+0x9f0>
 801071c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010720:	0d1b      	lsrs	r3, r3, #20
 8010722:	051b      	lsls	r3, r3, #20
 8010724:	429d      	cmp	r5, r3
 8010726:	d1bb      	bne.n	80106a0 <_strtod_l+0x9f0>
 8010728:	4630      	mov	r0, r6
 801072a:	4639      	mov	r1, r7
 801072c:	f7f0 faec 	bl	8000d08 <__aeabi_d2lz>
 8010730:	f7ef ff5c 	bl	80005ec <__aeabi_l2d>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef fdcc 	bl	80002d8 <__aeabi_dsub>
 8010740:	460b      	mov	r3, r1
 8010742:	4602      	mov	r2, r0
 8010744:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010748:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801074c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801074e:	ea46 060a 	orr.w	r6, r6, sl
 8010752:	431e      	orrs	r6, r3
 8010754:	d06f      	beq.n	8010836 <_strtod_l+0xb86>
 8010756:	a30e      	add	r3, pc, #56	@ (adr r3, 8010790 <_strtod_l+0xae0>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	f7f0 f9e6 	bl	8000b2c <__aeabi_dcmplt>
 8010760:	2800      	cmp	r0, #0
 8010762:	f47f accf 	bne.w	8010104 <_strtod_l+0x454>
 8010766:	a30c      	add	r3, pc, #48	@ (adr r3, 8010798 <_strtod_l+0xae8>)
 8010768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010770:	f7f0 f9fa 	bl	8000b68 <__aeabi_dcmpgt>
 8010774:	2800      	cmp	r0, #0
 8010776:	d093      	beq.n	80106a0 <_strtod_l+0x9f0>
 8010778:	e4c4      	b.n	8010104 <_strtod_l+0x454>
 801077a:	bf00      	nop
 801077c:	f3af 8000 	nop.w
 8010780:	00000000 	.word	0x00000000
 8010784:	bff00000 	.word	0xbff00000
 8010788:	00000000 	.word	0x00000000
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	94a03595 	.word	0x94a03595
 8010794:	3fdfffff 	.word	0x3fdfffff
 8010798:	35afe535 	.word	0x35afe535
 801079c:	3fe00000 	.word	0x3fe00000
 80107a0:	000fffff 	.word	0x000fffff
 80107a4:	7ff00000 	.word	0x7ff00000
 80107a8:	7fefffff 	.word	0x7fefffff
 80107ac:	3ff00000 	.word	0x3ff00000
 80107b0:	3fe00000 	.word	0x3fe00000
 80107b4:	7fe00000 	.word	0x7fe00000
 80107b8:	7c9fffff 	.word	0x7c9fffff
 80107bc:	9b08      	ldr	r3, [sp, #32]
 80107be:	b323      	cbz	r3, 801080a <_strtod_l+0xb5a>
 80107c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107c4:	d821      	bhi.n	801080a <_strtod_l+0xb5a>
 80107c6:	a328      	add	r3, pc, #160	@ (adr r3, 8010868 <_strtod_l+0xbb8>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	4630      	mov	r0, r6
 80107ce:	4639      	mov	r1, r7
 80107d0:	f7f0 f9b6 	bl	8000b40 <__aeabi_dcmple>
 80107d4:	b1a0      	cbz	r0, 8010800 <_strtod_l+0xb50>
 80107d6:	4639      	mov	r1, r7
 80107d8:	4630      	mov	r0, r6
 80107da:	f7f0 fa0d 	bl	8000bf8 <__aeabi_d2uiz>
 80107de:	2801      	cmp	r0, #1
 80107e0:	bf38      	it	cc
 80107e2:	2001      	movcc	r0, #1
 80107e4:	f7ef feb6 	bl	8000554 <__aeabi_ui2d>
 80107e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ea:	4606      	mov	r6, r0
 80107ec:	460f      	mov	r7, r1
 80107ee:	b9fb      	cbnz	r3, 8010830 <_strtod_l+0xb80>
 80107f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80107f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80107f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80107fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010800:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010802:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010806:	1b5b      	subs	r3, r3, r5
 8010808:	9311      	str	r3, [sp, #68]	@ 0x44
 801080a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801080e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010812:	f7fe ff41 	bl	800f698 <__ulp>
 8010816:	4650      	mov	r0, sl
 8010818:	ec53 2b10 	vmov	r2, r3, d0
 801081c:	4659      	mov	r1, fp
 801081e:	f7ef ff13 	bl	8000648 <__aeabi_dmul>
 8010822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010826:	f7ef fd59 	bl	80002dc <__adddf3>
 801082a:	4682      	mov	sl, r0
 801082c:	468b      	mov	fp, r1
 801082e:	e770      	b.n	8010712 <_strtod_l+0xa62>
 8010830:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010834:	e7e0      	b.n	80107f8 <_strtod_l+0xb48>
 8010836:	a30e      	add	r3, pc, #56	@ (adr r3, 8010870 <_strtod_l+0xbc0>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	f7f0 f976 	bl	8000b2c <__aeabi_dcmplt>
 8010840:	e798      	b.n	8010774 <_strtod_l+0xac4>
 8010842:	2300      	movs	r3, #0
 8010844:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010846:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801084a:	6013      	str	r3, [r2, #0]
 801084c:	f7ff ba6d 	b.w	800fd2a <_strtod_l+0x7a>
 8010850:	2a65      	cmp	r2, #101	@ 0x65
 8010852:	f43f ab66 	beq.w	800ff22 <_strtod_l+0x272>
 8010856:	2a45      	cmp	r2, #69	@ 0x45
 8010858:	f43f ab63 	beq.w	800ff22 <_strtod_l+0x272>
 801085c:	2301      	movs	r3, #1
 801085e:	f7ff bb9e 	b.w	800ff9e <_strtod_l+0x2ee>
 8010862:	bf00      	nop
 8010864:	f3af 8000 	nop.w
 8010868:	ffc00000 	.word	0xffc00000
 801086c:	41dfffff 	.word	0x41dfffff
 8010870:	94a03595 	.word	0x94a03595
 8010874:	3fcfffff 	.word	0x3fcfffff

08010878 <_strtod_r>:
 8010878:	4b01      	ldr	r3, [pc, #4]	@ (8010880 <_strtod_r+0x8>)
 801087a:	f7ff ba19 	b.w	800fcb0 <_strtod_l>
 801087e:	bf00      	nop
 8010880:	20000564 	.word	0x20000564

08010884 <_strtol_l.constprop.0>:
 8010884:	2b24      	cmp	r3, #36	@ 0x24
 8010886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801088a:	4686      	mov	lr, r0
 801088c:	4690      	mov	r8, r2
 801088e:	d801      	bhi.n	8010894 <_strtol_l.constprop.0+0x10>
 8010890:	2b01      	cmp	r3, #1
 8010892:	d106      	bne.n	80108a2 <_strtol_l.constprop.0+0x1e>
 8010894:	f7fa faca 	bl	800ae2c <__errno>
 8010898:	2316      	movs	r3, #22
 801089a:	6003      	str	r3, [r0, #0]
 801089c:	2000      	movs	r0, #0
 801089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a2:	4834      	ldr	r0, [pc, #208]	@ (8010974 <_strtol_l.constprop.0+0xf0>)
 80108a4:	460d      	mov	r5, r1
 80108a6:	462a      	mov	r2, r5
 80108a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108ac:	5d06      	ldrb	r6, [r0, r4]
 80108ae:	f016 0608 	ands.w	r6, r6, #8
 80108b2:	d1f8      	bne.n	80108a6 <_strtol_l.constprop.0+0x22>
 80108b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80108b6:	d12d      	bne.n	8010914 <_strtol_l.constprop.0+0x90>
 80108b8:	782c      	ldrb	r4, [r5, #0]
 80108ba:	2601      	movs	r6, #1
 80108bc:	1c95      	adds	r5, r2, #2
 80108be:	f033 0210 	bics.w	r2, r3, #16
 80108c2:	d109      	bne.n	80108d8 <_strtol_l.constprop.0+0x54>
 80108c4:	2c30      	cmp	r4, #48	@ 0x30
 80108c6:	d12a      	bne.n	801091e <_strtol_l.constprop.0+0x9a>
 80108c8:	782a      	ldrb	r2, [r5, #0]
 80108ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80108ce:	2a58      	cmp	r2, #88	@ 0x58
 80108d0:	d125      	bne.n	801091e <_strtol_l.constprop.0+0x9a>
 80108d2:	786c      	ldrb	r4, [r5, #1]
 80108d4:	2310      	movs	r3, #16
 80108d6:	3502      	adds	r5, #2
 80108d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80108dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80108e0:	2200      	movs	r2, #0
 80108e2:	fbbc f9f3 	udiv	r9, ip, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80108ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80108f0:	2f09      	cmp	r7, #9
 80108f2:	d81b      	bhi.n	801092c <_strtol_l.constprop.0+0xa8>
 80108f4:	463c      	mov	r4, r7
 80108f6:	42a3      	cmp	r3, r4
 80108f8:	dd27      	ble.n	801094a <_strtol_l.constprop.0+0xc6>
 80108fa:	1c57      	adds	r7, r2, #1
 80108fc:	d007      	beq.n	801090e <_strtol_l.constprop.0+0x8a>
 80108fe:	4581      	cmp	r9, r0
 8010900:	d320      	bcc.n	8010944 <_strtol_l.constprop.0+0xc0>
 8010902:	d101      	bne.n	8010908 <_strtol_l.constprop.0+0x84>
 8010904:	45a2      	cmp	sl, r4
 8010906:	db1d      	blt.n	8010944 <_strtol_l.constprop.0+0xc0>
 8010908:	fb00 4003 	mla	r0, r0, r3, r4
 801090c:	2201      	movs	r2, #1
 801090e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010912:	e7eb      	b.n	80108ec <_strtol_l.constprop.0+0x68>
 8010914:	2c2b      	cmp	r4, #43	@ 0x2b
 8010916:	bf04      	itt	eq
 8010918:	782c      	ldrbeq	r4, [r5, #0]
 801091a:	1c95      	addeq	r5, r2, #2
 801091c:	e7cf      	b.n	80108be <_strtol_l.constprop.0+0x3a>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d1da      	bne.n	80108d8 <_strtol_l.constprop.0+0x54>
 8010922:	2c30      	cmp	r4, #48	@ 0x30
 8010924:	bf0c      	ite	eq
 8010926:	2308      	moveq	r3, #8
 8010928:	230a      	movne	r3, #10
 801092a:	e7d5      	b.n	80108d8 <_strtol_l.constprop.0+0x54>
 801092c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010930:	2f19      	cmp	r7, #25
 8010932:	d801      	bhi.n	8010938 <_strtol_l.constprop.0+0xb4>
 8010934:	3c37      	subs	r4, #55	@ 0x37
 8010936:	e7de      	b.n	80108f6 <_strtol_l.constprop.0+0x72>
 8010938:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801093c:	2f19      	cmp	r7, #25
 801093e:	d804      	bhi.n	801094a <_strtol_l.constprop.0+0xc6>
 8010940:	3c57      	subs	r4, #87	@ 0x57
 8010942:	e7d8      	b.n	80108f6 <_strtol_l.constprop.0+0x72>
 8010944:	f04f 32ff 	mov.w	r2, #4294967295
 8010948:	e7e1      	b.n	801090e <_strtol_l.constprop.0+0x8a>
 801094a:	1c53      	adds	r3, r2, #1
 801094c:	d108      	bne.n	8010960 <_strtol_l.constprop.0+0xdc>
 801094e:	2322      	movs	r3, #34	@ 0x22
 8010950:	f8ce 3000 	str.w	r3, [lr]
 8010954:	4660      	mov	r0, ip
 8010956:	f1b8 0f00 	cmp.w	r8, #0
 801095a:	d0a0      	beq.n	801089e <_strtol_l.constprop.0+0x1a>
 801095c:	1e69      	subs	r1, r5, #1
 801095e:	e006      	b.n	801096e <_strtol_l.constprop.0+0xea>
 8010960:	b106      	cbz	r6, 8010964 <_strtol_l.constprop.0+0xe0>
 8010962:	4240      	negs	r0, r0
 8010964:	f1b8 0f00 	cmp.w	r8, #0
 8010968:	d099      	beq.n	801089e <_strtol_l.constprop.0+0x1a>
 801096a:	2a00      	cmp	r2, #0
 801096c:	d1f6      	bne.n	801095c <_strtol_l.constprop.0+0xd8>
 801096e:	f8c8 1000 	str.w	r1, [r8]
 8010972:	e794      	b.n	801089e <_strtol_l.constprop.0+0x1a>
 8010974:	08013569 	.word	0x08013569

08010978 <_strtol_r>:
 8010978:	f7ff bf84 	b.w	8010884 <_strtol_l.constprop.0>

0801097c <_strtoul_l.constprop.0>:
 801097c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010980:	4e34      	ldr	r6, [pc, #208]	@ (8010a54 <_strtoul_l.constprop.0+0xd8>)
 8010982:	4686      	mov	lr, r0
 8010984:	460d      	mov	r5, r1
 8010986:	4628      	mov	r0, r5
 8010988:	f815 4b01 	ldrb.w	r4, [r5], #1
 801098c:	5d37      	ldrb	r7, [r6, r4]
 801098e:	f017 0708 	ands.w	r7, r7, #8
 8010992:	d1f8      	bne.n	8010986 <_strtoul_l.constprop.0+0xa>
 8010994:	2c2d      	cmp	r4, #45	@ 0x2d
 8010996:	d12f      	bne.n	80109f8 <_strtoul_l.constprop.0+0x7c>
 8010998:	782c      	ldrb	r4, [r5, #0]
 801099a:	2701      	movs	r7, #1
 801099c:	1c85      	adds	r5, r0, #2
 801099e:	f033 0010 	bics.w	r0, r3, #16
 80109a2:	d109      	bne.n	80109b8 <_strtoul_l.constprop.0+0x3c>
 80109a4:	2c30      	cmp	r4, #48	@ 0x30
 80109a6:	d12c      	bne.n	8010a02 <_strtoul_l.constprop.0+0x86>
 80109a8:	7828      	ldrb	r0, [r5, #0]
 80109aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80109ae:	2858      	cmp	r0, #88	@ 0x58
 80109b0:	d127      	bne.n	8010a02 <_strtoul_l.constprop.0+0x86>
 80109b2:	786c      	ldrb	r4, [r5, #1]
 80109b4:	2310      	movs	r3, #16
 80109b6:	3502      	adds	r5, #2
 80109b8:	f04f 38ff 	mov.w	r8, #4294967295
 80109bc:	2600      	movs	r6, #0
 80109be:	fbb8 f8f3 	udiv	r8, r8, r3
 80109c2:	fb03 f908 	mul.w	r9, r3, r8
 80109c6:	ea6f 0909 	mvn.w	r9, r9
 80109ca:	4630      	mov	r0, r6
 80109cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80109d0:	f1bc 0f09 	cmp.w	ip, #9
 80109d4:	d81c      	bhi.n	8010a10 <_strtoul_l.constprop.0+0x94>
 80109d6:	4664      	mov	r4, ip
 80109d8:	42a3      	cmp	r3, r4
 80109da:	dd2a      	ble.n	8010a32 <_strtoul_l.constprop.0+0xb6>
 80109dc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80109e0:	d007      	beq.n	80109f2 <_strtoul_l.constprop.0+0x76>
 80109e2:	4580      	cmp	r8, r0
 80109e4:	d322      	bcc.n	8010a2c <_strtoul_l.constprop.0+0xb0>
 80109e6:	d101      	bne.n	80109ec <_strtoul_l.constprop.0+0x70>
 80109e8:	45a1      	cmp	r9, r4
 80109ea:	db1f      	blt.n	8010a2c <_strtoul_l.constprop.0+0xb0>
 80109ec:	fb00 4003 	mla	r0, r0, r3, r4
 80109f0:	2601      	movs	r6, #1
 80109f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109f6:	e7e9      	b.n	80109cc <_strtoul_l.constprop.0+0x50>
 80109f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80109fa:	bf04      	itt	eq
 80109fc:	782c      	ldrbeq	r4, [r5, #0]
 80109fe:	1c85      	addeq	r5, r0, #2
 8010a00:	e7cd      	b.n	801099e <_strtoul_l.constprop.0+0x22>
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1d8      	bne.n	80109b8 <_strtoul_l.constprop.0+0x3c>
 8010a06:	2c30      	cmp	r4, #48	@ 0x30
 8010a08:	bf0c      	ite	eq
 8010a0a:	2308      	moveq	r3, #8
 8010a0c:	230a      	movne	r3, #10
 8010a0e:	e7d3      	b.n	80109b8 <_strtoul_l.constprop.0+0x3c>
 8010a10:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010a14:	f1bc 0f19 	cmp.w	ip, #25
 8010a18:	d801      	bhi.n	8010a1e <_strtoul_l.constprop.0+0xa2>
 8010a1a:	3c37      	subs	r4, #55	@ 0x37
 8010a1c:	e7dc      	b.n	80109d8 <_strtoul_l.constprop.0+0x5c>
 8010a1e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010a22:	f1bc 0f19 	cmp.w	ip, #25
 8010a26:	d804      	bhi.n	8010a32 <_strtoul_l.constprop.0+0xb6>
 8010a28:	3c57      	subs	r4, #87	@ 0x57
 8010a2a:	e7d5      	b.n	80109d8 <_strtoul_l.constprop.0+0x5c>
 8010a2c:	f04f 36ff 	mov.w	r6, #4294967295
 8010a30:	e7df      	b.n	80109f2 <_strtoul_l.constprop.0+0x76>
 8010a32:	1c73      	adds	r3, r6, #1
 8010a34:	d106      	bne.n	8010a44 <_strtoul_l.constprop.0+0xc8>
 8010a36:	2322      	movs	r3, #34	@ 0x22
 8010a38:	f8ce 3000 	str.w	r3, [lr]
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	b932      	cbnz	r2, 8010a4e <_strtoul_l.constprop.0+0xd2>
 8010a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a44:	b107      	cbz	r7, 8010a48 <_strtoul_l.constprop.0+0xcc>
 8010a46:	4240      	negs	r0, r0
 8010a48:	2a00      	cmp	r2, #0
 8010a4a:	d0f9      	beq.n	8010a40 <_strtoul_l.constprop.0+0xc4>
 8010a4c:	b106      	cbz	r6, 8010a50 <_strtoul_l.constprop.0+0xd4>
 8010a4e:	1e69      	subs	r1, r5, #1
 8010a50:	6011      	str	r1, [r2, #0]
 8010a52:	e7f5      	b.n	8010a40 <_strtoul_l.constprop.0+0xc4>
 8010a54:	08013569 	.word	0x08013569

08010a58 <_strtoul_r>:
 8010a58:	f7ff bf90 	b.w	801097c <_strtoul_l.constprop.0>

08010a5c <__ascii_wctomb>:
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	4608      	mov	r0, r1
 8010a60:	b141      	cbz	r1, 8010a74 <__ascii_wctomb+0x18>
 8010a62:	2aff      	cmp	r2, #255	@ 0xff
 8010a64:	d904      	bls.n	8010a70 <__ascii_wctomb+0x14>
 8010a66:	228a      	movs	r2, #138	@ 0x8a
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6e:	4770      	bx	lr
 8010a70:	700a      	strb	r2, [r1, #0]
 8010a72:	2001      	movs	r0, #1
 8010a74:	4770      	bx	lr
	...

08010a78 <_strtoll_l.constprop.0>:
 8010a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a7c:	b085      	sub	sp, #20
 8010a7e:	4690      	mov	r8, r2
 8010a80:	4a43      	ldr	r2, [pc, #268]	@ (8010b90 <_strtoll_l.constprop.0+0x118>)
 8010a82:	9002      	str	r0, [sp, #8]
 8010a84:	4689      	mov	r9, r1
 8010a86:	461e      	mov	r6, r3
 8010a88:	460d      	mov	r5, r1
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a90:	5d17      	ldrb	r7, [r2, r4]
 8010a92:	f017 0708 	ands.w	r7, r7, #8
 8010a96:	d1f8      	bne.n	8010a8a <_strtoll_l.constprop.0+0x12>
 8010a98:	2c2d      	cmp	r4, #45	@ 0x2d
 8010a9a:	d149      	bne.n	8010b30 <_strtoll_l.constprop.0+0xb8>
 8010a9c:	782c      	ldrb	r4, [r5, #0]
 8010a9e:	2701      	movs	r7, #1
 8010aa0:	1c9d      	adds	r5, r3, #2
 8010aa2:	f036 0310 	bics.w	r3, r6, #16
 8010aa6:	d109      	bne.n	8010abc <_strtoll_l.constprop.0+0x44>
 8010aa8:	2c30      	cmp	r4, #48	@ 0x30
 8010aaa:	d146      	bne.n	8010b3a <_strtoll_l.constprop.0+0xc2>
 8010aac:	782b      	ldrb	r3, [r5, #0]
 8010aae:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010ab2:	2b58      	cmp	r3, #88	@ 0x58
 8010ab4:	d141      	bne.n	8010b3a <_strtoll_l.constprop.0+0xc2>
 8010ab6:	786c      	ldrb	r4, [r5, #1]
 8010ab8:	2610      	movs	r6, #16
 8010aba:	3502      	adds	r5, #2
 8010abc:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8010ac0:	f107 3bff 	add.w	fp, r7, #4294967295
 8010ac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ac8:	17f3      	asrs	r3, r6, #31
 8010aca:	4632      	mov	r2, r6
 8010acc:	4658      	mov	r0, fp
 8010ace:	4651      	mov	r1, sl
 8010ad0:	9303      	str	r3, [sp, #12]
 8010ad2:	f7f0 f901 	bl	8000cd8 <__aeabi_uldivmod>
 8010ad6:	9201      	str	r2, [sp, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	468e      	mov	lr, r1
 8010adc:	4684      	mov	ip, r0
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010ae6:	2b09      	cmp	r3, #9
 8010ae8:	d905      	bls.n	8010af6 <_strtoll_l.constprop.0+0x7e>
 8010aea:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8010aee:	2b19      	cmp	r3, #25
 8010af0:	d82a      	bhi.n	8010b48 <_strtoll_l.constprop.0+0xd0>
 8010af2:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 8010af6:	429e      	cmp	r6, r3
 8010af8:	dd30      	ble.n	8010b5c <_strtoll_l.constprop.0+0xe4>
 8010afa:	1c54      	adds	r4, r2, #1
 8010afc:	d015      	beq.n	8010b2a <_strtoll_l.constprop.0+0xb2>
 8010afe:	4584      	cmp	ip, r0
 8010b00:	eb7e 0201 	sbcs.w	r2, lr, r1
 8010b04:	d327      	bcc.n	8010b56 <_strtoll_l.constprop.0+0xde>
 8010b06:	458e      	cmp	lr, r1
 8010b08:	bf08      	it	eq
 8010b0a:	4584      	cmpeq	ip, r0
 8010b0c:	d102      	bne.n	8010b14 <_strtoll_l.constprop.0+0x9c>
 8010b0e:	9a01      	ldr	r2, [sp, #4]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	db20      	blt.n	8010b56 <_strtoll_l.constprop.0+0xde>
 8010b14:	9a03      	ldr	r2, [sp, #12]
 8010b16:	4371      	muls	r1, r6
 8010b18:	fb00 1102 	mla	r1, r0, r2, r1
 8010b1c:	fba6 0200 	umull	r0, r2, r6, r0
 8010b20:	440a      	add	r2, r1
 8010b22:	1818      	adds	r0, r3, r0
 8010b24:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8010b28:	2201      	movs	r2, #1
 8010b2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b2e:	e7d8      	b.n	8010ae2 <_strtoll_l.constprop.0+0x6a>
 8010b30:	2c2b      	cmp	r4, #43	@ 0x2b
 8010b32:	bf04      	itt	eq
 8010b34:	782c      	ldrbeq	r4, [r5, #0]
 8010b36:	1c9d      	addeq	r5, r3, #2
 8010b38:	e7b3      	b.n	8010aa2 <_strtoll_l.constprop.0+0x2a>
 8010b3a:	2e00      	cmp	r6, #0
 8010b3c:	d1be      	bne.n	8010abc <_strtoll_l.constprop.0+0x44>
 8010b3e:	2c30      	cmp	r4, #48	@ 0x30
 8010b40:	bf0c      	ite	eq
 8010b42:	2608      	moveq	r6, #8
 8010b44:	260a      	movne	r6, #10
 8010b46:	e7b9      	b.n	8010abc <_strtoll_l.constprop.0+0x44>
 8010b48:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8010b4c:	2b19      	cmp	r3, #25
 8010b4e:	d805      	bhi.n	8010b5c <_strtoll_l.constprop.0+0xe4>
 8010b50:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8010b54:	e7cf      	b.n	8010af6 <_strtoll_l.constprop.0+0x7e>
 8010b56:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5a:	e7e6      	b.n	8010b2a <_strtoll_l.constprop.0+0xb2>
 8010b5c:	1c53      	adds	r3, r2, #1
 8010b5e:	d10a      	bne.n	8010b76 <_strtoll_l.constprop.0+0xfe>
 8010b60:	9a02      	ldr	r2, [sp, #8]
 8010b62:	2322      	movs	r3, #34	@ 0x22
 8010b64:	6013      	str	r3, [r2, #0]
 8010b66:	4658      	mov	r0, fp
 8010b68:	4651      	mov	r1, sl
 8010b6a:	f1b8 0f00 	cmp.w	r8, #0
 8010b6e:	d10a      	bne.n	8010b86 <_strtoll_l.constprop.0+0x10e>
 8010b70:	b005      	add	sp, #20
 8010b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b76:	b117      	cbz	r7, 8010b7e <_strtoll_l.constprop.0+0x106>
 8010b78:	4240      	negs	r0, r0
 8010b7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010b7e:	f1b8 0f00 	cmp.w	r8, #0
 8010b82:	d0f5      	beq.n	8010b70 <_strtoll_l.constprop.0+0xf8>
 8010b84:	b10a      	cbz	r2, 8010b8a <_strtoll_l.constprop.0+0x112>
 8010b86:	f105 39ff 	add.w	r9, r5, #4294967295
 8010b8a:	f8c8 9000 	str.w	r9, [r8]
 8010b8e:	e7ef      	b.n	8010b70 <_strtoll_l.constprop.0+0xf8>
 8010b90:	08013569 	.word	0x08013569

08010b94 <_strtoll_r>:
 8010b94:	f7ff bf70 	b.w	8010a78 <_strtoll_l.constprop.0>

08010b98 <_strtoull_l.constprop.0>:
 8010b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	4691      	mov	r9, r2
 8010b9e:	4a48      	ldr	r2, [pc, #288]	@ (8010cc0 <_strtoull_l.constprop.0+0x128>)
 8010ba0:	9001      	str	r0, [sp, #4]
 8010ba2:	468a      	mov	sl, r1
 8010ba4:	461e      	mov	r6, r3
 8010ba6:	460d      	mov	r5, r1
 8010ba8:	462b      	mov	r3, r5
 8010baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bae:	5d17      	ldrb	r7, [r2, r4]
 8010bb0:	f017 0708 	ands.w	r7, r7, #8
 8010bb4:	d1f8      	bne.n	8010ba8 <_strtoull_l.constprop.0+0x10>
 8010bb6:	2c2d      	cmp	r4, #45	@ 0x2d
 8010bb8:	d14a      	bne.n	8010c50 <_strtoull_l.constprop.0+0xb8>
 8010bba:	782c      	ldrb	r4, [r5, #0]
 8010bbc:	2701      	movs	r7, #1
 8010bbe:	1c9d      	adds	r5, r3, #2
 8010bc0:	f036 0310 	bics.w	r3, r6, #16
 8010bc4:	d109      	bne.n	8010bda <_strtoull_l.constprop.0+0x42>
 8010bc6:	2c30      	cmp	r4, #48	@ 0x30
 8010bc8:	d147      	bne.n	8010c5a <_strtoull_l.constprop.0+0xc2>
 8010bca:	782b      	ldrb	r3, [r5, #0]
 8010bcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010bd0:	2b58      	cmp	r3, #88	@ 0x58
 8010bd2:	d142      	bne.n	8010c5a <_strtoull_l.constprop.0+0xc2>
 8010bd4:	786c      	ldrb	r4, [r5, #1]
 8010bd6:	2610      	movs	r6, #16
 8010bd8:	3502      	adds	r5, #2
 8010bda:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8010bde:	4632      	mov	r2, r6
 8010be0:	465b      	mov	r3, fp
 8010be2:	f04f 30ff 	mov.w	r0, #4294967295
 8010be6:	f04f 31ff 	mov.w	r1, #4294967295
 8010bea:	f7f0 f875 	bl	8000cd8 <__aeabi_uldivmod>
 8010bee:	4632      	mov	r2, r6
 8010bf0:	9000      	str	r0, [sp, #0]
 8010bf2:	4688      	mov	r8, r1
 8010bf4:	465b      	mov	r3, fp
 8010bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8010bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8010bfe:	f7f0 f86b 	bl	8000cd8 <__aeabi_uldivmod>
 8010c02:	2300      	movs	r3, #0
 8010c04:	4618      	mov	r0, r3
 8010c06:	4619      	mov	r1, r3
 8010c08:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010c0c:	f1bc 0f09 	cmp.w	ip, #9
 8010c10:	d82a      	bhi.n	8010c68 <_strtoull_l.constprop.0+0xd0>
 8010c12:	4664      	mov	r4, ip
 8010c14:	42a6      	cmp	r6, r4
 8010c16:	dd38      	ble.n	8010c8a <_strtoull_l.constprop.0+0xf2>
 8010c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1c:	d015      	beq.n	8010c4a <_strtoull_l.constprop.0+0xb2>
 8010c1e:	9b00      	ldr	r3, [sp, #0]
 8010c20:	4283      	cmp	r3, r0
 8010c22:	eb78 0301 	sbcs.w	r3, r8, r1
 8010c26:	d32d      	bcc.n	8010c84 <_strtoull_l.constprop.0+0xec>
 8010c28:	9b00      	ldr	r3, [sp, #0]
 8010c2a:	4588      	cmp	r8, r1
 8010c2c:	bf08      	it	eq
 8010c2e:	4283      	cmpeq	r3, r0
 8010c30:	d101      	bne.n	8010c36 <_strtoull_l.constprop.0+0x9e>
 8010c32:	42a2      	cmp	r2, r4
 8010c34:	db26      	blt.n	8010c84 <_strtoull_l.constprop.0+0xec>
 8010c36:	4371      	muls	r1, r6
 8010c38:	fb00 110b 	mla	r1, r0, fp, r1
 8010c3c:	fba6 0300 	umull	r0, r3, r6, r0
 8010c40:	4419      	add	r1, r3
 8010c42:	1820      	adds	r0, r4, r0
 8010c44:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010c48:	2301      	movs	r3, #1
 8010c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c4e:	e7db      	b.n	8010c08 <_strtoull_l.constprop.0+0x70>
 8010c50:	2c2b      	cmp	r4, #43	@ 0x2b
 8010c52:	bf04      	itt	eq
 8010c54:	782c      	ldrbeq	r4, [r5, #0]
 8010c56:	1c9d      	addeq	r5, r3, #2
 8010c58:	e7b2      	b.n	8010bc0 <_strtoull_l.constprop.0+0x28>
 8010c5a:	2e00      	cmp	r6, #0
 8010c5c:	d1bd      	bne.n	8010bda <_strtoull_l.constprop.0+0x42>
 8010c5e:	2c30      	cmp	r4, #48	@ 0x30
 8010c60:	bf0c      	ite	eq
 8010c62:	2608      	moveq	r6, #8
 8010c64:	260a      	movne	r6, #10
 8010c66:	e7b8      	b.n	8010bda <_strtoull_l.constprop.0+0x42>
 8010c68:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010c6c:	f1bc 0f19 	cmp.w	ip, #25
 8010c70:	d801      	bhi.n	8010c76 <_strtoull_l.constprop.0+0xde>
 8010c72:	3c37      	subs	r4, #55	@ 0x37
 8010c74:	e7ce      	b.n	8010c14 <_strtoull_l.constprop.0+0x7c>
 8010c76:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010c7a:	f1bc 0f19 	cmp.w	ip, #25
 8010c7e:	d804      	bhi.n	8010c8a <_strtoull_l.constprop.0+0xf2>
 8010c80:	3c57      	subs	r4, #87	@ 0x57
 8010c82:	e7c7      	b.n	8010c14 <_strtoull_l.constprop.0+0x7c>
 8010c84:	f04f 33ff 	mov.w	r3, #4294967295
 8010c88:	e7df      	b.n	8010c4a <_strtoull_l.constprop.0+0xb2>
 8010c8a:	1c5a      	adds	r2, r3, #1
 8010c8c:	d10a      	bne.n	8010ca4 <_strtoull_l.constprop.0+0x10c>
 8010c8e:	9901      	ldr	r1, [sp, #4]
 8010c90:	2222      	movs	r2, #34	@ 0x22
 8010c92:	600a      	str	r2, [r1, #0]
 8010c94:	4618      	mov	r0, r3
 8010c96:	4619      	mov	r1, r3
 8010c98:	f1b9 0f00 	cmp.w	r9, #0
 8010c9c:	d10a      	bne.n	8010cb4 <_strtoull_l.constprop.0+0x11c>
 8010c9e:	b003      	add	sp, #12
 8010ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca4:	b117      	cbz	r7, 8010cac <_strtoull_l.constprop.0+0x114>
 8010ca6:	4240      	negs	r0, r0
 8010ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010cac:	f1b9 0f00 	cmp.w	r9, #0
 8010cb0:	d0f5      	beq.n	8010c9e <_strtoull_l.constprop.0+0x106>
 8010cb2:	b10b      	cbz	r3, 8010cb8 <_strtoull_l.constprop.0+0x120>
 8010cb4:	f105 3aff 	add.w	sl, r5, #4294967295
 8010cb8:	f8c9 a000 	str.w	sl, [r9]
 8010cbc:	e7ef      	b.n	8010c9e <_strtoull_l.constprop.0+0x106>
 8010cbe:	bf00      	nop
 8010cc0:	08013569 	.word	0x08013569

08010cc4 <_strtoull_r>:
 8010cc4:	f7ff bf68 	b.w	8010b98 <_strtoull_l.constprop.0>

08010cc8 <_mbrtowc_r>:
 8010cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cca:	4c0a      	ldr	r4, [pc, #40]	@ (8010cf4 <_mbrtowc_r+0x2c>)
 8010ccc:	9e08      	ldr	r6, [sp, #32]
 8010cce:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8010cd2:	9600      	str	r6, [sp, #0]
 8010cd4:	4605      	mov	r5, r0
 8010cd6:	4614      	mov	r4, r2
 8010cd8:	b912      	cbnz	r2, 8010ce0 <_mbrtowc_r+0x18>
 8010cda:	4a07      	ldr	r2, [pc, #28]	@ (8010cf8 <_mbrtowc_r+0x30>)
 8010cdc:	2301      	movs	r3, #1
 8010cde:	4621      	mov	r1, r4
 8010ce0:	47b8      	blx	r7
 8010ce2:	1c43      	adds	r3, r0, #1
 8010ce4:	bf01      	itttt	eq
 8010ce6:	2300      	moveq	r3, #0
 8010ce8:	6033      	streq	r3, [r6, #0]
 8010cea:	238a      	moveq	r3, #138	@ 0x8a
 8010cec:	602b      	streq	r3, [r5, #0]
 8010cee:	b003      	add	sp, #12
 8010cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20000564 	.word	0x20000564
 8010cf8:	080136a4 	.word	0x080136a4

08010cfc <iswspace>:
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	f000 b801 	b.w	8010d04 <iswspace_l>
	...

08010d04 <iswspace_l>:
 8010d04:	28ff      	cmp	r0, #255	@ 0xff
 8010d06:	bf9d      	ittte	ls
 8010d08:	4b02      	ldrls	r3, [pc, #8]	@ (8010d14 <iswspace_l+0x10>)
 8010d0a:	5c18      	ldrbls	r0, [r3, r0]
 8010d0c:	f000 0008 	andls.w	r0, r0, #8
 8010d10:	2000      	movhi	r0, #0
 8010d12:	4770      	bx	lr
 8010d14:	08013569 	.word	0x08013569

08010d18 <__ssprint_r>:
 8010d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	6893      	ldr	r3, [r2, #8]
 8010d1e:	f8d2 b000 	ldr.w	fp, [r2]
 8010d22:	9001      	str	r0, [sp, #4]
 8010d24:	460c      	mov	r4, r1
 8010d26:	4617      	mov	r7, r2
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d157      	bne.n	8010ddc <__ssprint_r+0xc4>
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	2300      	movs	r3, #0
 8010d30:	607b      	str	r3, [r7, #4]
 8010d32:	b003      	add	sp, #12
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d38:	e9db a800 	ldrd	sl, r8, [fp]
 8010d3c:	f10b 0b08 	add.w	fp, fp, #8
 8010d40:	68a6      	ldr	r6, [r4, #8]
 8010d42:	6820      	ldr	r0, [r4, #0]
 8010d44:	f1b8 0f00 	cmp.w	r8, #0
 8010d48:	d0f6      	beq.n	8010d38 <__ssprint_r+0x20>
 8010d4a:	45b0      	cmp	r8, r6
 8010d4c:	d32e      	bcc.n	8010dac <__ssprint_r+0x94>
 8010d4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d52:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d56:	d029      	beq.n	8010dac <__ssprint_r+0x94>
 8010d58:	6921      	ldr	r1, [r4, #16]
 8010d5a:	6965      	ldr	r5, [r4, #20]
 8010d5c:	eba0 0901 	sub.w	r9, r0, r1
 8010d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d68:	f109 0001 	add.w	r0, r9, #1
 8010d6c:	106d      	asrs	r5, r5, #1
 8010d6e:	4440      	add	r0, r8
 8010d70:	4285      	cmp	r5, r0
 8010d72:	bf38      	it	cc
 8010d74:	4605      	movcc	r5, r0
 8010d76:	0553      	lsls	r3, r2, #21
 8010d78:	d534      	bpl.n	8010de4 <__ssprint_r+0xcc>
 8010d7a:	9801      	ldr	r0, [sp, #4]
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f7f9 fb71 	bl	800a464 <_malloc_r>
 8010d82:	4606      	mov	r6, r0
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d038      	beq.n	8010dfa <__ssprint_r+0xe2>
 8010d88:	464a      	mov	r2, r9
 8010d8a:	6921      	ldr	r1, [r4, #16]
 8010d8c:	f7fd fa8e 	bl	800e2ac <memcpy>
 8010d90:	89a2      	ldrh	r2, [r4, #12]
 8010d92:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010d9a:	81a2      	strh	r2, [r4, #12]
 8010d9c:	6126      	str	r6, [r4, #16]
 8010d9e:	6165      	str	r5, [r4, #20]
 8010da0:	444e      	add	r6, r9
 8010da2:	eba5 0509 	sub.w	r5, r5, r9
 8010da6:	6026      	str	r6, [r4, #0]
 8010da8:	60a5      	str	r5, [r4, #8]
 8010daa:	4646      	mov	r6, r8
 8010dac:	4546      	cmp	r6, r8
 8010dae:	bf28      	it	cs
 8010db0:	4646      	movcs	r6, r8
 8010db2:	4632      	mov	r2, r6
 8010db4:	4651      	mov	r1, sl
 8010db6:	6820      	ldr	r0, [r4, #0]
 8010db8:	f7fd fa0a 	bl	800e1d0 <memmove>
 8010dbc:	68a2      	ldr	r2, [r4, #8]
 8010dbe:	1b92      	subs	r2, r2, r6
 8010dc0:	60a2      	str	r2, [r4, #8]
 8010dc2:	6822      	ldr	r2, [r4, #0]
 8010dc4:	4432      	add	r2, r6
 8010dc6:	6022      	str	r2, [r4, #0]
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	eba2 0308 	sub.w	r3, r2, r8
 8010dce:	44c2      	add	sl, r8
 8010dd0:	60bb      	str	r3, [r7, #8]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d0aa      	beq.n	8010d2c <__ssprint_r+0x14>
 8010dd6:	f04f 0800 	mov.w	r8, #0
 8010dda:	e7b1      	b.n	8010d40 <__ssprint_r+0x28>
 8010ddc:	f04f 0a00 	mov.w	sl, #0
 8010de0:	46d0      	mov	r8, sl
 8010de2:	e7ad      	b.n	8010d40 <__ssprint_r+0x28>
 8010de4:	9801      	ldr	r0, [sp, #4]
 8010de6:	462a      	mov	r2, r5
 8010de8:	f7fe fd9c 	bl	800f924 <_realloc_r>
 8010dec:	4606      	mov	r6, r0
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d1d4      	bne.n	8010d9c <__ssprint_r+0x84>
 8010df2:	6921      	ldr	r1, [r4, #16]
 8010df4:	9801      	ldr	r0, [sp, #4]
 8010df6:	f7fa f8b9 	bl	800af6c <_free_r>
 8010dfa:	9a01      	ldr	r2, [sp, #4]
 8010dfc:	230c      	movs	r3, #12
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	89a3      	ldrh	r3, [r4, #12]
 8010e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e06:	81a3      	strh	r3, [r4, #12]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	60bb      	str	r3, [r7, #8]
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e10:	e78d      	b.n	8010d2e <__ssprint_r+0x16>

08010e12 <strncmp>:
 8010e12:	b510      	push	{r4, lr}
 8010e14:	b16a      	cbz	r2, 8010e32 <strncmp+0x20>
 8010e16:	3901      	subs	r1, #1
 8010e18:	1884      	adds	r4, r0, r2
 8010e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d103      	bne.n	8010e2e <strncmp+0x1c>
 8010e26:	42a0      	cmp	r0, r4
 8010e28:	d001      	beq.n	8010e2e <strncmp+0x1c>
 8010e2a:	2a00      	cmp	r2, #0
 8010e2c:	d1f5      	bne.n	8010e1a <strncmp+0x8>
 8010e2e:	1ad0      	subs	r0, r2, r3
 8010e30:	bd10      	pop	{r4, pc}
 8010e32:	4610      	mov	r0, r2
 8010e34:	e7fc      	b.n	8010e30 <strncmp+0x1e>
	...

08010e38 <nan>:
 8010e38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010e40 <nan+0x8>
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	00000000 	.word	0x00000000
 8010e44:	7ff80000 	.word	0x7ff80000

08010e48 <__assert_func>:
 8010e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e4a:	4614      	mov	r4, r2
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	4b09      	ldr	r3, [pc, #36]	@ (8010e74 <__assert_func+0x2c>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	4605      	mov	r5, r0
 8010e54:	68d8      	ldr	r0, [r3, #12]
 8010e56:	b954      	cbnz	r4, 8010e6e <__assert_func+0x26>
 8010e58:	4b07      	ldr	r3, [pc, #28]	@ (8010e78 <__assert_func+0x30>)
 8010e5a:	461c      	mov	r4, r3
 8010e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e60:	9100      	str	r1, [sp, #0]
 8010e62:	462b      	mov	r3, r5
 8010e64:	4905      	ldr	r1, [pc, #20]	@ (8010e7c <__assert_func+0x34>)
 8010e66:	f000 fb7b 	bl	8011560 <fiprintf>
 8010e6a:	f001 f8ef 	bl	801204c <abort>
 8010e6e:	4b04      	ldr	r3, [pc, #16]	@ (8010e80 <__assert_func+0x38>)
 8010e70:	e7f4      	b.n	8010e5c <__assert_func+0x14>
 8010e72:	bf00      	nop
 8010e74:	20000438 	.word	0x20000438
 8010e78:	080136a4 	.word	0x080136a4
 8010e7c:	08013676 	.word	0x08013676
 8010e80:	08013669 	.word	0x08013669

08010e84 <_calloc_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	fba1 1502 	umull	r1, r5, r1, r2
 8010e8a:	b935      	cbnz	r5, 8010e9a <_calloc_r+0x16>
 8010e8c:	f7f9 faea 	bl	800a464 <_malloc_r>
 8010e90:	4604      	mov	r4, r0
 8010e92:	b938      	cbnz	r0, 8010ea4 <_calloc_r+0x20>
 8010e94:	2400      	movs	r4, #0
 8010e96:	4620      	mov	r0, r4
 8010e98:	bd38      	pop	{r3, r4, r5, pc}
 8010e9a:	f7f9 ffc7 	bl	800ae2c <__errno>
 8010e9e:	230c      	movs	r3, #12
 8010ea0:	6003      	str	r3, [r0, #0]
 8010ea2:	e7f7      	b.n	8010e94 <_calloc_r+0x10>
 8010ea4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010ea8:	f022 0203 	bic.w	r2, r2, #3
 8010eac:	3a04      	subs	r2, #4
 8010eae:	2a24      	cmp	r2, #36	@ 0x24
 8010eb0:	d819      	bhi.n	8010ee6 <_calloc_r+0x62>
 8010eb2:	2a13      	cmp	r2, #19
 8010eb4:	d915      	bls.n	8010ee2 <_calloc_r+0x5e>
 8010eb6:	2a1b      	cmp	r2, #27
 8010eb8:	e9c0 5500 	strd	r5, r5, [r0]
 8010ebc:	d806      	bhi.n	8010ecc <_calloc_r+0x48>
 8010ebe:	f100 0308 	add.w	r3, r0, #8
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	e9c3 2200 	strd	r2, r2, [r3]
 8010ec8:	609a      	str	r2, [r3, #8]
 8010eca:	e7e4      	b.n	8010e96 <_calloc_r+0x12>
 8010ecc:	2a24      	cmp	r2, #36	@ 0x24
 8010ece:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8010ed2:	bf11      	iteee	ne
 8010ed4:	f100 0310 	addne.w	r3, r0, #16
 8010ed8:	6105      	streq	r5, [r0, #16]
 8010eda:	f100 0318 	addeq.w	r3, r0, #24
 8010ede:	6145      	streq	r5, [r0, #20]
 8010ee0:	e7ef      	b.n	8010ec2 <_calloc_r+0x3e>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	e7ed      	b.n	8010ec2 <_calloc_r+0x3e>
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	f7f9 ff41 	bl	800ad6e <memset>
 8010eec:	e7d3      	b.n	8010e96 <_calloc_r+0x12>

08010eee <rshift>:
 8010eee:	6903      	ldr	r3, [r0, #16]
 8010ef0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ef8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010efc:	f100 0414 	add.w	r4, r0, #20
 8010f00:	dd45      	ble.n	8010f8e <rshift+0xa0>
 8010f02:	f011 011f 	ands.w	r1, r1, #31
 8010f06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f0e:	d10c      	bne.n	8010f2a <rshift+0x3c>
 8010f10:	f100 0710 	add.w	r7, r0, #16
 8010f14:	4629      	mov	r1, r5
 8010f16:	42b1      	cmp	r1, r6
 8010f18:	d334      	bcc.n	8010f84 <rshift+0x96>
 8010f1a:	1a9b      	subs	r3, r3, r2
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	1eea      	subs	r2, r5, #3
 8010f20:	4296      	cmp	r6, r2
 8010f22:	bf38      	it	cc
 8010f24:	2300      	movcc	r3, #0
 8010f26:	4423      	add	r3, r4
 8010f28:	e015      	b.n	8010f56 <rshift+0x68>
 8010f2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f2e:	f1c1 0820 	rsb	r8, r1, #32
 8010f32:	40cf      	lsrs	r7, r1
 8010f34:	f105 0e04 	add.w	lr, r5, #4
 8010f38:	46a1      	mov	r9, r4
 8010f3a:	4576      	cmp	r6, lr
 8010f3c:	46f4      	mov	ip, lr
 8010f3e:	d815      	bhi.n	8010f6c <rshift+0x7e>
 8010f40:	1a9a      	subs	r2, r3, r2
 8010f42:	0092      	lsls	r2, r2, #2
 8010f44:	3a04      	subs	r2, #4
 8010f46:	3501      	adds	r5, #1
 8010f48:	42ae      	cmp	r6, r5
 8010f4a:	bf38      	it	cc
 8010f4c:	2200      	movcc	r2, #0
 8010f4e:	18a3      	adds	r3, r4, r2
 8010f50:	50a7      	str	r7, [r4, r2]
 8010f52:	b107      	cbz	r7, 8010f56 <rshift+0x68>
 8010f54:	3304      	adds	r3, #4
 8010f56:	1b1a      	subs	r2, r3, r4
 8010f58:	42a3      	cmp	r3, r4
 8010f5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f5e:	bf08      	it	eq
 8010f60:	2300      	moveq	r3, #0
 8010f62:	6102      	str	r2, [r0, #16]
 8010f64:	bf08      	it	eq
 8010f66:	6143      	streq	r3, [r0, #20]
 8010f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f6c:	f8dc c000 	ldr.w	ip, [ip]
 8010f70:	fa0c fc08 	lsl.w	ip, ip, r8
 8010f74:	ea4c 0707 	orr.w	r7, ip, r7
 8010f78:	f849 7b04 	str.w	r7, [r9], #4
 8010f7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f80:	40cf      	lsrs	r7, r1
 8010f82:	e7da      	b.n	8010f3a <rshift+0x4c>
 8010f84:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f88:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f8c:	e7c3      	b.n	8010f16 <rshift+0x28>
 8010f8e:	4623      	mov	r3, r4
 8010f90:	e7e1      	b.n	8010f56 <rshift+0x68>

08010f92 <__hexdig_fun>:
 8010f92:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010f96:	2b09      	cmp	r3, #9
 8010f98:	d802      	bhi.n	8010fa0 <__hexdig_fun+0xe>
 8010f9a:	3820      	subs	r0, #32
 8010f9c:	b2c0      	uxtb	r0, r0
 8010f9e:	4770      	bx	lr
 8010fa0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010fa4:	2b05      	cmp	r3, #5
 8010fa6:	d801      	bhi.n	8010fac <__hexdig_fun+0x1a>
 8010fa8:	3847      	subs	r0, #71	@ 0x47
 8010faa:	e7f7      	b.n	8010f9c <__hexdig_fun+0xa>
 8010fac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010fb0:	2b05      	cmp	r3, #5
 8010fb2:	d801      	bhi.n	8010fb8 <__hexdig_fun+0x26>
 8010fb4:	3827      	subs	r0, #39	@ 0x27
 8010fb6:	e7f1      	b.n	8010f9c <__hexdig_fun+0xa>
 8010fb8:	2000      	movs	r0, #0
 8010fba:	4770      	bx	lr

08010fbc <__gethex>:
 8010fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	b085      	sub	sp, #20
 8010fc2:	468a      	mov	sl, r1
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	680b      	ldr	r3, [r1, #0]
 8010fc8:	9001      	str	r0, [sp, #4]
 8010fca:	4690      	mov	r8, r2
 8010fcc:	1c9c      	adds	r4, r3, #2
 8010fce:	46a1      	mov	r9, r4
 8010fd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010fd4:	2830      	cmp	r0, #48	@ 0x30
 8010fd6:	d0fa      	beq.n	8010fce <__gethex+0x12>
 8010fd8:	eba9 0303 	sub.w	r3, r9, r3
 8010fdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010fe0:	f7ff ffd7 	bl	8010f92 <__hexdig_fun>
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d168      	bne.n	80110bc <__gethex+0x100>
 8010fea:	49a0      	ldr	r1, [pc, #640]	@ (801126c <__gethex+0x2b0>)
 8010fec:	2201      	movs	r2, #1
 8010fee:	4648      	mov	r0, r9
 8010ff0:	f7ff ff0f 	bl	8010e12 <strncmp>
 8010ff4:	4607      	mov	r7, r0
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d167      	bne.n	80110ca <__gethex+0x10e>
 8010ffa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010ffe:	4626      	mov	r6, r4
 8011000:	f7ff ffc7 	bl	8010f92 <__hexdig_fun>
 8011004:	2800      	cmp	r0, #0
 8011006:	d062      	beq.n	80110ce <__gethex+0x112>
 8011008:	4623      	mov	r3, r4
 801100a:	7818      	ldrb	r0, [r3, #0]
 801100c:	2830      	cmp	r0, #48	@ 0x30
 801100e:	4699      	mov	r9, r3
 8011010:	f103 0301 	add.w	r3, r3, #1
 8011014:	d0f9      	beq.n	801100a <__gethex+0x4e>
 8011016:	f7ff ffbc 	bl	8010f92 <__hexdig_fun>
 801101a:	fab0 f580 	clz	r5, r0
 801101e:	096d      	lsrs	r5, r5, #5
 8011020:	f04f 0b01 	mov.w	fp, #1
 8011024:	464a      	mov	r2, r9
 8011026:	4616      	mov	r6, r2
 8011028:	3201      	adds	r2, #1
 801102a:	7830      	ldrb	r0, [r6, #0]
 801102c:	f7ff ffb1 	bl	8010f92 <__hexdig_fun>
 8011030:	2800      	cmp	r0, #0
 8011032:	d1f8      	bne.n	8011026 <__gethex+0x6a>
 8011034:	498d      	ldr	r1, [pc, #564]	@ (801126c <__gethex+0x2b0>)
 8011036:	2201      	movs	r2, #1
 8011038:	4630      	mov	r0, r6
 801103a:	f7ff feea 	bl	8010e12 <strncmp>
 801103e:	2800      	cmp	r0, #0
 8011040:	d13f      	bne.n	80110c2 <__gethex+0x106>
 8011042:	b944      	cbnz	r4, 8011056 <__gethex+0x9a>
 8011044:	1c74      	adds	r4, r6, #1
 8011046:	4622      	mov	r2, r4
 8011048:	4616      	mov	r6, r2
 801104a:	3201      	adds	r2, #1
 801104c:	7830      	ldrb	r0, [r6, #0]
 801104e:	f7ff ffa0 	bl	8010f92 <__hexdig_fun>
 8011052:	2800      	cmp	r0, #0
 8011054:	d1f8      	bne.n	8011048 <__gethex+0x8c>
 8011056:	1ba4      	subs	r4, r4, r6
 8011058:	00a7      	lsls	r7, r4, #2
 801105a:	7833      	ldrb	r3, [r6, #0]
 801105c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011060:	2b50      	cmp	r3, #80	@ 0x50
 8011062:	d13e      	bne.n	80110e2 <__gethex+0x126>
 8011064:	7873      	ldrb	r3, [r6, #1]
 8011066:	2b2b      	cmp	r3, #43	@ 0x2b
 8011068:	d033      	beq.n	80110d2 <__gethex+0x116>
 801106a:	2b2d      	cmp	r3, #45	@ 0x2d
 801106c:	d034      	beq.n	80110d8 <__gethex+0x11c>
 801106e:	1c71      	adds	r1, r6, #1
 8011070:	2400      	movs	r4, #0
 8011072:	7808      	ldrb	r0, [r1, #0]
 8011074:	f7ff ff8d 	bl	8010f92 <__hexdig_fun>
 8011078:	1e43      	subs	r3, r0, #1
 801107a:	b2db      	uxtb	r3, r3
 801107c:	2b18      	cmp	r3, #24
 801107e:	d830      	bhi.n	80110e2 <__gethex+0x126>
 8011080:	f1a0 0210 	sub.w	r2, r0, #16
 8011084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011088:	f7ff ff83 	bl	8010f92 <__hexdig_fun>
 801108c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011090:	fa5f fc8c 	uxtb.w	ip, ip
 8011094:	f1bc 0f18 	cmp.w	ip, #24
 8011098:	f04f 030a 	mov.w	r3, #10
 801109c:	d91e      	bls.n	80110dc <__gethex+0x120>
 801109e:	b104      	cbz	r4, 80110a2 <__gethex+0xe6>
 80110a0:	4252      	negs	r2, r2
 80110a2:	4417      	add	r7, r2
 80110a4:	f8ca 1000 	str.w	r1, [sl]
 80110a8:	b1ed      	cbz	r5, 80110e6 <__gethex+0x12a>
 80110aa:	f1bb 0f00 	cmp.w	fp, #0
 80110ae:	bf0c      	ite	eq
 80110b0:	2506      	moveq	r5, #6
 80110b2:	2500      	movne	r5, #0
 80110b4:	4628      	mov	r0, r5
 80110b6:	b005      	add	sp, #20
 80110b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110bc:	2500      	movs	r5, #0
 80110be:	462c      	mov	r4, r5
 80110c0:	e7b0      	b.n	8011024 <__gethex+0x68>
 80110c2:	2c00      	cmp	r4, #0
 80110c4:	d1c7      	bne.n	8011056 <__gethex+0x9a>
 80110c6:	4627      	mov	r7, r4
 80110c8:	e7c7      	b.n	801105a <__gethex+0x9e>
 80110ca:	464e      	mov	r6, r9
 80110cc:	462f      	mov	r7, r5
 80110ce:	2501      	movs	r5, #1
 80110d0:	e7c3      	b.n	801105a <__gethex+0x9e>
 80110d2:	2400      	movs	r4, #0
 80110d4:	1cb1      	adds	r1, r6, #2
 80110d6:	e7cc      	b.n	8011072 <__gethex+0xb6>
 80110d8:	2401      	movs	r4, #1
 80110da:	e7fb      	b.n	80110d4 <__gethex+0x118>
 80110dc:	fb03 0002 	mla	r0, r3, r2, r0
 80110e0:	e7ce      	b.n	8011080 <__gethex+0xc4>
 80110e2:	4631      	mov	r1, r6
 80110e4:	e7de      	b.n	80110a4 <__gethex+0xe8>
 80110e6:	eba6 0309 	sub.w	r3, r6, r9
 80110ea:	3b01      	subs	r3, #1
 80110ec:	4629      	mov	r1, r5
 80110ee:	2b07      	cmp	r3, #7
 80110f0:	dc0a      	bgt.n	8011108 <__gethex+0x14c>
 80110f2:	9801      	ldr	r0, [sp, #4]
 80110f4:	f7fd ffaa 	bl	800f04c <_Balloc>
 80110f8:	4604      	mov	r4, r0
 80110fa:	b940      	cbnz	r0, 801110e <__gethex+0x152>
 80110fc:	4b5c      	ldr	r3, [pc, #368]	@ (8011270 <__gethex+0x2b4>)
 80110fe:	4602      	mov	r2, r0
 8011100:	21e4      	movs	r1, #228	@ 0xe4
 8011102:	485c      	ldr	r0, [pc, #368]	@ (8011274 <__gethex+0x2b8>)
 8011104:	f7ff fea0 	bl	8010e48 <__assert_func>
 8011108:	3101      	adds	r1, #1
 801110a:	105b      	asrs	r3, r3, #1
 801110c:	e7ef      	b.n	80110ee <__gethex+0x132>
 801110e:	f100 0a14 	add.w	sl, r0, #20
 8011112:	2300      	movs	r3, #0
 8011114:	4655      	mov	r5, sl
 8011116:	469b      	mov	fp, r3
 8011118:	45b1      	cmp	r9, r6
 801111a:	d337      	bcc.n	801118c <__gethex+0x1d0>
 801111c:	f845 bb04 	str.w	fp, [r5], #4
 8011120:	eba5 050a 	sub.w	r5, r5, sl
 8011124:	10ad      	asrs	r5, r5, #2
 8011126:	6125      	str	r5, [r4, #16]
 8011128:	4658      	mov	r0, fp
 801112a:	f7fe f84d 	bl	800f1c8 <__hi0bits>
 801112e:	016d      	lsls	r5, r5, #5
 8011130:	f8d8 6000 	ldr.w	r6, [r8]
 8011134:	1a2d      	subs	r5, r5, r0
 8011136:	42b5      	cmp	r5, r6
 8011138:	dd54      	ble.n	80111e4 <__gethex+0x228>
 801113a:	1bad      	subs	r5, r5, r6
 801113c:	4629      	mov	r1, r5
 801113e:	4620      	mov	r0, r4
 8011140:	f7fe fbc7 	bl	800f8d2 <__any_on>
 8011144:	4681      	mov	r9, r0
 8011146:	b178      	cbz	r0, 8011168 <__gethex+0x1ac>
 8011148:	1e6b      	subs	r3, r5, #1
 801114a:	1159      	asrs	r1, r3, #5
 801114c:	f003 021f 	and.w	r2, r3, #31
 8011150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011154:	f04f 0901 	mov.w	r9, #1
 8011158:	fa09 f202 	lsl.w	r2, r9, r2
 801115c:	420a      	tst	r2, r1
 801115e:	d003      	beq.n	8011168 <__gethex+0x1ac>
 8011160:	454b      	cmp	r3, r9
 8011162:	dc36      	bgt.n	80111d2 <__gethex+0x216>
 8011164:	f04f 0902 	mov.w	r9, #2
 8011168:	4629      	mov	r1, r5
 801116a:	4620      	mov	r0, r4
 801116c:	f7ff febf 	bl	8010eee <rshift>
 8011170:	442f      	add	r7, r5
 8011172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011176:	42bb      	cmp	r3, r7
 8011178:	da42      	bge.n	8011200 <__gethex+0x244>
 801117a:	9801      	ldr	r0, [sp, #4]
 801117c:	4621      	mov	r1, r4
 801117e:	f7fd ff8a 	bl	800f096 <_Bfree>
 8011182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011184:	2300      	movs	r3, #0
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	25a3      	movs	r5, #163	@ 0xa3
 801118a:	e793      	b.n	80110b4 <__gethex+0xf8>
 801118c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011190:	2a2e      	cmp	r2, #46	@ 0x2e
 8011192:	d012      	beq.n	80111ba <__gethex+0x1fe>
 8011194:	2b20      	cmp	r3, #32
 8011196:	d104      	bne.n	80111a2 <__gethex+0x1e6>
 8011198:	f845 bb04 	str.w	fp, [r5], #4
 801119c:	f04f 0b00 	mov.w	fp, #0
 80111a0:	465b      	mov	r3, fp
 80111a2:	7830      	ldrb	r0, [r6, #0]
 80111a4:	9303      	str	r3, [sp, #12]
 80111a6:	f7ff fef4 	bl	8010f92 <__hexdig_fun>
 80111aa:	9b03      	ldr	r3, [sp, #12]
 80111ac:	f000 000f 	and.w	r0, r0, #15
 80111b0:	4098      	lsls	r0, r3
 80111b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80111b6:	3304      	adds	r3, #4
 80111b8:	e7ae      	b.n	8011118 <__gethex+0x15c>
 80111ba:	45b1      	cmp	r9, r6
 80111bc:	d8ea      	bhi.n	8011194 <__gethex+0x1d8>
 80111be:	492b      	ldr	r1, [pc, #172]	@ (801126c <__gethex+0x2b0>)
 80111c0:	9303      	str	r3, [sp, #12]
 80111c2:	2201      	movs	r2, #1
 80111c4:	4630      	mov	r0, r6
 80111c6:	f7ff fe24 	bl	8010e12 <strncmp>
 80111ca:	9b03      	ldr	r3, [sp, #12]
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d1e1      	bne.n	8011194 <__gethex+0x1d8>
 80111d0:	e7a2      	b.n	8011118 <__gethex+0x15c>
 80111d2:	1ea9      	subs	r1, r5, #2
 80111d4:	4620      	mov	r0, r4
 80111d6:	f7fe fb7c 	bl	800f8d2 <__any_on>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d0c2      	beq.n	8011164 <__gethex+0x1a8>
 80111de:	f04f 0903 	mov.w	r9, #3
 80111e2:	e7c1      	b.n	8011168 <__gethex+0x1ac>
 80111e4:	da09      	bge.n	80111fa <__gethex+0x23e>
 80111e6:	1b75      	subs	r5, r6, r5
 80111e8:	4621      	mov	r1, r4
 80111ea:	9801      	ldr	r0, [sp, #4]
 80111ec:	462a      	mov	r2, r5
 80111ee:	f7fe f937 	bl	800f460 <__lshift>
 80111f2:	1b7f      	subs	r7, r7, r5
 80111f4:	4604      	mov	r4, r0
 80111f6:	f100 0a14 	add.w	sl, r0, #20
 80111fa:	f04f 0900 	mov.w	r9, #0
 80111fe:	e7b8      	b.n	8011172 <__gethex+0x1b6>
 8011200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011204:	42bd      	cmp	r5, r7
 8011206:	dd6f      	ble.n	80112e8 <__gethex+0x32c>
 8011208:	1bed      	subs	r5, r5, r7
 801120a:	42ae      	cmp	r6, r5
 801120c:	dc34      	bgt.n	8011278 <__gethex+0x2bc>
 801120e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011212:	2b02      	cmp	r3, #2
 8011214:	d022      	beq.n	801125c <__gethex+0x2a0>
 8011216:	2b03      	cmp	r3, #3
 8011218:	d024      	beq.n	8011264 <__gethex+0x2a8>
 801121a:	2b01      	cmp	r3, #1
 801121c:	d115      	bne.n	801124a <__gethex+0x28e>
 801121e:	42ae      	cmp	r6, r5
 8011220:	d113      	bne.n	801124a <__gethex+0x28e>
 8011222:	2e01      	cmp	r6, #1
 8011224:	d10b      	bne.n	801123e <__gethex+0x282>
 8011226:	9a02      	ldr	r2, [sp, #8]
 8011228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801122c:	6013      	str	r3, [r2, #0]
 801122e:	2301      	movs	r3, #1
 8011230:	6123      	str	r3, [r4, #16]
 8011232:	f8ca 3000 	str.w	r3, [sl]
 8011236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011238:	2562      	movs	r5, #98	@ 0x62
 801123a:	601c      	str	r4, [r3, #0]
 801123c:	e73a      	b.n	80110b4 <__gethex+0xf8>
 801123e:	1e71      	subs	r1, r6, #1
 8011240:	4620      	mov	r0, r4
 8011242:	f7fe fb46 	bl	800f8d2 <__any_on>
 8011246:	2800      	cmp	r0, #0
 8011248:	d1ed      	bne.n	8011226 <__gethex+0x26a>
 801124a:	9801      	ldr	r0, [sp, #4]
 801124c:	4621      	mov	r1, r4
 801124e:	f7fd ff22 	bl	800f096 <_Bfree>
 8011252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011254:	2300      	movs	r3, #0
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	2550      	movs	r5, #80	@ 0x50
 801125a:	e72b      	b.n	80110b4 <__gethex+0xf8>
 801125c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1f3      	bne.n	801124a <__gethex+0x28e>
 8011262:	e7e0      	b.n	8011226 <__gethex+0x26a>
 8011264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011266:	2b00      	cmp	r3, #0
 8011268:	d1dd      	bne.n	8011226 <__gethex+0x26a>
 801126a:	e7ee      	b.n	801124a <__gethex+0x28e>
 801126c:	08013348 	.word	0x08013348
 8011270:	08013357 	.word	0x08013357
 8011274:	080136a5 	.word	0x080136a5
 8011278:	1e6f      	subs	r7, r5, #1
 801127a:	f1b9 0f00 	cmp.w	r9, #0
 801127e:	d130      	bne.n	80112e2 <__gethex+0x326>
 8011280:	b127      	cbz	r7, 801128c <__gethex+0x2d0>
 8011282:	4639      	mov	r1, r7
 8011284:	4620      	mov	r0, r4
 8011286:	f7fe fb24 	bl	800f8d2 <__any_on>
 801128a:	4681      	mov	r9, r0
 801128c:	117a      	asrs	r2, r7, #5
 801128e:	2301      	movs	r3, #1
 8011290:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011294:	f007 071f 	and.w	r7, r7, #31
 8011298:	40bb      	lsls	r3, r7
 801129a:	4213      	tst	r3, r2
 801129c:	4629      	mov	r1, r5
 801129e:	4620      	mov	r0, r4
 80112a0:	bf18      	it	ne
 80112a2:	f049 0902 	orrne.w	r9, r9, #2
 80112a6:	f7ff fe22 	bl	8010eee <rshift>
 80112aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80112ae:	1b76      	subs	r6, r6, r5
 80112b0:	2502      	movs	r5, #2
 80112b2:	f1b9 0f00 	cmp.w	r9, #0
 80112b6:	d047      	beq.n	8011348 <__gethex+0x38c>
 80112b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d015      	beq.n	80112ec <__gethex+0x330>
 80112c0:	2b03      	cmp	r3, #3
 80112c2:	d017      	beq.n	80112f4 <__gethex+0x338>
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d109      	bne.n	80112dc <__gethex+0x320>
 80112c8:	f019 0f02 	tst.w	r9, #2
 80112cc:	d006      	beq.n	80112dc <__gethex+0x320>
 80112ce:	f8da 3000 	ldr.w	r3, [sl]
 80112d2:	ea49 0903 	orr.w	r9, r9, r3
 80112d6:	f019 0f01 	tst.w	r9, #1
 80112da:	d10e      	bne.n	80112fa <__gethex+0x33e>
 80112dc:	f045 0510 	orr.w	r5, r5, #16
 80112e0:	e032      	b.n	8011348 <__gethex+0x38c>
 80112e2:	f04f 0901 	mov.w	r9, #1
 80112e6:	e7d1      	b.n	801128c <__gethex+0x2d0>
 80112e8:	2501      	movs	r5, #1
 80112ea:	e7e2      	b.n	80112b2 <__gethex+0x2f6>
 80112ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112ee:	f1c3 0301 	rsb	r3, r3, #1
 80112f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d0f0      	beq.n	80112dc <__gethex+0x320>
 80112fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80112fe:	f104 0314 	add.w	r3, r4, #20
 8011302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801130a:	f04f 0c00 	mov.w	ip, #0
 801130e:	4618      	mov	r0, r3
 8011310:	f853 2b04 	ldr.w	r2, [r3], #4
 8011314:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011318:	d01b      	beq.n	8011352 <__gethex+0x396>
 801131a:	3201      	adds	r2, #1
 801131c:	6002      	str	r2, [r0, #0]
 801131e:	2d02      	cmp	r5, #2
 8011320:	f104 0314 	add.w	r3, r4, #20
 8011324:	d13c      	bne.n	80113a0 <__gethex+0x3e4>
 8011326:	f8d8 2000 	ldr.w	r2, [r8]
 801132a:	3a01      	subs	r2, #1
 801132c:	42b2      	cmp	r2, r6
 801132e:	d109      	bne.n	8011344 <__gethex+0x388>
 8011330:	1171      	asrs	r1, r6, #5
 8011332:	2201      	movs	r2, #1
 8011334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011338:	f006 061f 	and.w	r6, r6, #31
 801133c:	fa02 f606 	lsl.w	r6, r2, r6
 8011340:	421e      	tst	r6, r3
 8011342:	d13a      	bne.n	80113ba <__gethex+0x3fe>
 8011344:	f045 0520 	orr.w	r5, r5, #32
 8011348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801134a:	601c      	str	r4, [r3, #0]
 801134c:	9b02      	ldr	r3, [sp, #8]
 801134e:	601f      	str	r7, [r3, #0]
 8011350:	e6b0      	b.n	80110b4 <__gethex+0xf8>
 8011352:	4299      	cmp	r1, r3
 8011354:	f843 cc04 	str.w	ip, [r3, #-4]
 8011358:	d8d9      	bhi.n	801130e <__gethex+0x352>
 801135a:	68a3      	ldr	r3, [r4, #8]
 801135c:	459b      	cmp	fp, r3
 801135e:	db17      	blt.n	8011390 <__gethex+0x3d4>
 8011360:	6861      	ldr	r1, [r4, #4]
 8011362:	9801      	ldr	r0, [sp, #4]
 8011364:	3101      	adds	r1, #1
 8011366:	f7fd fe71 	bl	800f04c <_Balloc>
 801136a:	4681      	mov	r9, r0
 801136c:	b918      	cbnz	r0, 8011376 <__gethex+0x3ba>
 801136e:	4b1a      	ldr	r3, [pc, #104]	@ (80113d8 <__gethex+0x41c>)
 8011370:	4602      	mov	r2, r0
 8011372:	2184      	movs	r1, #132	@ 0x84
 8011374:	e6c5      	b.n	8011102 <__gethex+0x146>
 8011376:	6922      	ldr	r2, [r4, #16]
 8011378:	3202      	adds	r2, #2
 801137a:	f104 010c 	add.w	r1, r4, #12
 801137e:	0092      	lsls	r2, r2, #2
 8011380:	300c      	adds	r0, #12
 8011382:	f7fc ff93 	bl	800e2ac <memcpy>
 8011386:	4621      	mov	r1, r4
 8011388:	9801      	ldr	r0, [sp, #4]
 801138a:	f7fd fe84 	bl	800f096 <_Bfree>
 801138e:	464c      	mov	r4, r9
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011398:	6122      	str	r2, [r4, #16]
 801139a:	2201      	movs	r2, #1
 801139c:	615a      	str	r2, [r3, #20]
 801139e:	e7be      	b.n	801131e <__gethex+0x362>
 80113a0:	6922      	ldr	r2, [r4, #16]
 80113a2:	455a      	cmp	r2, fp
 80113a4:	dd0b      	ble.n	80113be <__gethex+0x402>
 80113a6:	2101      	movs	r1, #1
 80113a8:	4620      	mov	r0, r4
 80113aa:	f7ff fda0 	bl	8010eee <rshift>
 80113ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113b2:	3701      	adds	r7, #1
 80113b4:	42bb      	cmp	r3, r7
 80113b6:	f6ff aee0 	blt.w	801117a <__gethex+0x1be>
 80113ba:	2501      	movs	r5, #1
 80113bc:	e7c2      	b.n	8011344 <__gethex+0x388>
 80113be:	f016 061f 	ands.w	r6, r6, #31
 80113c2:	d0fa      	beq.n	80113ba <__gethex+0x3fe>
 80113c4:	4453      	add	r3, sl
 80113c6:	f1c6 0620 	rsb	r6, r6, #32
 80113ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80113ce:	f7fd fefb 	bl	800f1c8 <__hi0bits>
 80113d2:	42b0      	cmp	r0, r6
 80113d4:	dbe7      	blt.n	80113a6 <__gethex+0x3ea>
 80113d6:	e7f0      	b.n	80113ba <__gethex+0x3fe>
 80113d8:	08013357 	.word	0x08013357

080113dc <L_shift>:
 80113dc:	f1c2 0208 	rsb	r2, r2, #8
 80113e0:	0092      	lsls	r2, r2, #2
 80113e2:	b570      	push	{r4, r5, r6, lr}
 80113e4:	f1c2 0620 	rsb	r6, r2, #32
 80113e8:	6843      	ldr	r3, [r0, #4]
 80113ea:	6804      	ldr	r4, [r0, #0]
 80113ec:	fa03 f506 	lsl.w	r5, r3, r6
 80113f0:	432c      	orrs	r4, r5
 80113f2:	40d3      	lsrs	r3, r2
 80113f4:	6004      	str	r4, [r0, #0]
 80113f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80113fa:	4288      	cmp	r0, r1
 80113fc:	d3f4      	bcc.n	80113e8 <L_shift+0xc>
 80113fe:	bd70      	pop	{r4, r5, r6, pc}

08011400 <__match>:
 8011400:	b530      	push	{r4, r5, lr}
 8011402:	6803      	ldr	r3, [r0, #0]
 8011404:	3301      	adds	r3, #1
 8011406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801140a:	b914      	cbnz	r4, 8011412 <__match+0x12>
 801140c:	6003      	str	r3, [r0, #0]
 801140e:	2001      	movs	r0, #1
 8011410:	bd30      	pop	{r4, r5, pc}
 8011412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011416:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801141a:	2d19      	cmp	r5, #25
 801141c:	bf98      	it	ls
 801141e:	3220      	addls	r2, #32
 8011420:	42a2      	cmp	r2, r4
 8011422:	d0f0      	beq.n	8011406 <__match+0x6>
 8011424:	2000      	movs	r0, #0
 8011426:	e7f3      	b.n	8011410 <__match+0x10>

08011428 <__hexnan>:
 8011428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142c:	680b      	ldr	r3, [r1, #0]
 801142e:	6801      	ldr	r1, [r0, #0]
 8011430:	115e      	asrs	r6, r3, #5
 8011432:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011436:	f013 031f 	ands.w	r3, r3, #31
 801143a:	b087      	sub	sp, #28
 801143c:	bf18      	it	ne
 801143e:	3604      	addne	r6, #4
 8011440:	2500      	movs	r5, #0
 8011442:	1f37      	subs	r7, r6, #4
 8011444:	4682      	mov	sl, r0
 8011446:	4690      	mov	r8, r2
 8011448:	9301      	str	r3, [sp, #4]
 801144a:	f846 5c04 	str.w	r5, [r6, #-4]
 801144e:	46b9      	mov	r9, r7
 8011450:	463c      	mov	r4, r7
 8011452:	9502      	str	r5, [sp, #8]
 8011454:	46ab      	mov	fp, r5
 8011456:	784a      	ldrb	r2, [r1, #1]
 8011458:	1c4b      	adds	r3, r1, #1
 801145a:	9303      	str	r3, [sp, #12]
 801145c:	b342      	cbz	r2, 80114b0 <__hexnan+0x88>
 801145e:	4610      	mov	r0, r2
 8011460:	9105      	str	r1, [sp, #20]
 8011462:	9204      	str	r2, [sp, #16]
 8011464:	f7ff fd95 	bl	8010f92 <__hexdig_fun>
 8011468:	2800      	cmp	r0, #0
 801146a:	d151      	bne.n	8011510 <__hexnan+0xe8>
 801146c:	9a04      	ldr	r2, [sp, #16]
 801146e:	9905      	ldr	r1, [sp, #20]
 8011470:	2a20      	cmp	r2, #32
 8011472:	d818      	bhi.n	80114a6 <__hexnan+0x7e>
 8011474:	9b02      	ldr	r3, [sp, #8]
 8011476:	459b      	cmp	fp, r3
 8011478:	dd13      	ble.n	80114a2 <__hexnan+0x7a>
 801147a:	454c      	cmp	r4, r9
 801147c:	d206      	bcs.n	801148c <__hexnan+0x64>
 801147e:	2d07      	cmp	r5, #7
 8011480:	dc04      	bgt.n	801148c <__hexnan+0x64>
 8011482:	462a      	mov	r2, r5
 8011484:	4649      	mov	r1, r9
 8011486:	4620      	mov	r0, r4
 8011488:	f7ff ffa8 	bl	80113dc <L_shift>
 801148c:	4544      	cmp	r4, r8
 801148e:	d952      	bls.n	8011536 <__hexnan+0x10e>
 8011490:	2300      	movs	r3, #0
 8011492:	f1a4 0904 	sub.w	r9, r4, #4
 8011496:	f844 3c04 	str.w	r3, [r4, #-4]
 801149a:	f8cd b008 	str.w	fp, [sp, #8]
 801149e:	464c      	mov	r4, r9
 80114a0:	461d      	mov	r5, r3
 80114a2:	9903      	ldr	r1, [sp, #12]
 80114a4:	e7d7      	b.n	8011456 <__hexnan+0x2e>
 80114a6:	2a29      	cmp	r2, #41	@ 0x29
 80114a8:	d157      	bne.n	801155a <__hexnan+0x132>
 80114aa:	3102      	adds	r1, #2
 80114ac:	f8ca 1000 	str.w	r1, [sl]
 80114b0:	f1bb 0f00 	cmp.w	fp, #0
 80114b4:	d051      	beq.n	801155a <__hexnan+0x132>
 80114b6:	454c      	cmp	r4, r9
 80114b8:	d206      	bcs.n	80114c8 <__hexnan+0xa0>
 80114ba:	2d07      	cmp	r5, #7
 80114bc:	dc04      	bgt.n	80114c8 <__hexnan+0xa0>
 80114be:	462a      	mov	r2, r5
 80114c0:	4649      	mov	r1, r9
 80114c2:	4620      	mov	r0, r4
 80114c4:	f7ff ff8a 	bl	80113dc <L_shift>
 80114c8:	4544      	cmp	r4, r8
 80114ca:	d936      	bls.n	801153a <__hexnan+0x112>
 80114cc:	f1a8 0204 	sub.w	r2, r8, #4
 80114d0:	4623      	mov	r3, r4
 80114d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80114d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80114da:	429f      	cmp	r7, r3
 80114dc:	d2f9      	bcs.n	80114d2 <__hexnan+0xaa>
 80114de:	1b3b      	subs	r3, r7, r4
 80114e0:	f023 0303 	bic.w	r3, r3, #3
 80114e4:	3304      	adds	r3, #4
 80114e6:	3401      	adds	r4, #1
 80114e8:	3e03      	subs	r6, #3
 80114ea:	42b4      	cmp	r4, r6
 80114ec:	bf88      	it	hi
 80114ee:	2304      	movhi	r3, #4
 80114f0:	4443      	add	r3, r8
 80114f2:	2200      	movs	r2, #0
 80114f4:	f843 2b04 	str.w	r2, [r3], #4
 80114f8:	429f      	cmp	r7, r3
 80114fa:	d2fb      	bcs.n	80114f4 <__hexnan+0xcc>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	b91b      	cbnz	r3, 8011508 <__hexnan+0xe0>
 8011500:	4547      	cmp	r7, r8
 8011502:	d128      	bne.n	8011556 <__hexnan+0x12e>
 8011504:	2301      	movs	r3, #1
 8011506:	603b      	str	r3, [r7, #0]
 8011508:	2005      	movs	r0, #5
 801150a:	b007      	add	sp, #28
 801150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011510:	3501      	adds	r5, #1
 8011512:	2d08      	cmp	r5, #8
 8011514:	f10b 0b01 	add.w	fp, fp, #1
 8011518:	dd06      	ble.n	8011528 <__hexnan+0x100>
 801151a:	4544      	cmp	r4, r8
 801151c:	d9c1      	bls.n	80114a2 <__hexnan+0x7a>
 801151e:	2300      	movs	r3, #0
 8011520:	f844 3c04 	str.w	r3, [r4, #-4]
 8011524:	2501      	movs	r5, #1
 8011526:	3c04      	subs	r4, #4
 8011528:	6822      	ldr	r2, [r4, #0]
 801152a:	f000 000f 	and.w	r0, r0, #15
 801152e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011532:	6020      	str	r0, [r4, #0]
 8011534:	e7b5      	b.n	80114a2 <__hexnan+0x7a>
 8011536:	2508      	movs	r5, #8
 8011538:	e7b3      	b.n	80114a2 <__hexnan+0x7a>
 801153a:	9b01      	ldr	r3, [sp, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d0dd      	beq.n	80114fc <__hexnan+0xd4>
 8011540:	f1c3 0320 	rsb	r3, r3, #32
 8011544:	f04f 32ff 	mov.w	r2, #4294967295
 8011548:	40da      	lsrs	r2, r3
 801154a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801154e:	4013      	ands	r3, r2
 8011550:	f846 3c04 	str.w	r3, [r6, #-4]
 8011554:	e7d2      	b.n	80114fc <__hexnan+0xd4>
 8011556:	3f04      	subs	r7, #4
 8011558:	e7d0      	b.n	80114fc <__hexnan+0xd4>
 801155a:	2004      	movs	r0, #4
 801155c:	e7d5      	b.n	801150a <__hexnan+0xe2>
	...

08011560 <fiprintf>:
 8011560:	b40e      	push	{r1, r2, r3}
 8011562:	b503      	push	{r0, r1, lr}
 8011564:	4601      	mov	r1, r0
 8011566:	ab03      	add	r3, sp, #12
 8011568:	4805      	ldr	r0, [pc, #20]	@ (8011580 <fiprintf+0x20>)
 801156a:	f853 2b04 	ldr.w	r2, [r3], #4
 801156e:	6800      	ldr	r0, [r0, #0]
 8011570:	9301      	str	r3, [sp, #4]
 8011572:	f000 f839 	bl	80115e8 <_vfiprintf_r>
 8011576:	b002      	add	sp, #8
 8011578:	f85d eb04 	ldr.w	lr, [sp], #4
 801157c:	b003      	add	sp, #12
 801157e:	4770      	bx	lr
 8011580:	20000438 	.word	0x20000438

08011584 <__sprint_r>:
 8011584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011588:	6893      	ldr	r3, [r2, #8]
 801158a:	4680      	mov	r8, r0
 801158c:	460e      	mov	r6, r1
 801158e:	4614      	mov	r4, r2
 8011590:	b343      	cbz	r3, 80115e4 <__sprint_r+0x60>
 8011592:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011594:	049d      	lsls	r5, r3, #18
 8011596:	d522      	bpl.n	80115de <__sprint_r+0x5a>
 8011598:	6815      	ldr	r5, [r2, #0]
 801159a:	68a0      	ldr	r0, [r4, #8]
 801159c:	3508      	adds	r5, #8
 801159e:	b928      	cbnz	r0, 80115ac <__sprint_r+0x28>
 80115a0:	2300      	movs	r3, #0
 80115a2:	60a3      	str	r3, [r4, #8]
 80115a4:	2300      	movs	r3, #0
 80115a6:	6063      	str	r3, [r4, #4]
 80115a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ac:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80115b0:	f04f 0900 	mov.w	r9, #0
 80115b4:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80115b8:	45ca      	cmp	sl, r9
 80115ba:	dc05      	bgt.n	80115c8 <__sprint_r+0x44>
 80115bc:	68a3      	ldr	r3, [r4, #8]
 80115be:	f027 0703 	bic.w	r7, r7, #3
 80115c2:	1bdb      	subs	r3, r3, r7
 80115c4:	60a3      	str	r3, [r4, #8]
 80115c6:	e7e8      	b.n	801159a <__sprint_r+0x16>
 80115c8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80115cc:	4632      	mov	r2, r6
 80115ce:	4640      	mov	r0, r8
 80115d0:	f000 fd13 	bl	8011ffa <_fputwc_r>
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d0e3      	beq.n	80115a0 <__sprint_r+0x1c>
 80115d8:	f109 0901 	add.w	r9, r9, #1
 80115dc:	e7ec      	b.n	80115b8 <__sprint_r+0x34>
 80115de:	f7fc fa67 	bl	800dab0 <__sfvwrite_r>
 80115e2:	e7dd      	b.n	80115a0 <__sprint_r+0x1c>
 80115e4:	4618      	mov	r0, r3
 80115e6:	e7dd      	b.n	80115a4 <__sprint_r+0x20>

080115e8 <_vfiprintf_r>:
 80115e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ec:	b0bb      	sub	sp, #236	@ 0xec
 80115ee:	460f      	mov	r7, r1
 80115f0:	4693      	mov	fp, r2
 80115f2:	461c      	mov	r4, r3
 80115f4:	461d      	mov	r5, r3
 80115f6:	9000      	str	r0, [sp, #0]
 80115f8:	b118      	cbz	r0, 8011602 <_vfiprintf_r+0x1a>
 80115fa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80115fc:	b90b      	cbnz	r3, 8011602 <_vfiprintf_r+0x1a>
 80115fe:	f7f9 fa03 	bl	800aa08 <__sinit>
 8011602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011604:	07db      	lsls	r3, r3, #31
 8011606:	d405      	bmi.n	8011614 <_vfiprintf_r+0x2c>
 8011608:	89bb      	ldrh	r3, [r7, #12]
 801160a:	059e      	lsls	r6, r3, #22
 801160c:	d402      	bmi.n	8011614 <_vfiprintf_r+0x2c>
 801160e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011610:	f7f9 fc38 	bl	800ae84 <__retarget_lock_acquire_recursive>
 8011614:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011618:	0498      	lsls	r0, r3, #18
 801161a:	d406      	bmi.n	801162a <_vfiprintf_r+0x42>
 801161c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011620:	81bb      	strh	r3, [r7, #12]
 8011622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011624:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011628:	667b      	str	r3, [r7, #100]	@ 0x64
 801162a:	89bb      	ldrh	r3, [r7, #12]
 801162c:	0719      	lsls	r1, r3, #28
 801162e:	d501      	bpl.n	8011634 <_vfiprintf_r+0x4c>
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	b9ab      	cbnz	r3, 8011660 <_vfiprintf_r+0x78>
 8011634:	9800      	ldr	r0, [sp, #0]
 8011636:	4639      	mov	r1, r7
 8011638:	f7fc fd74 	bl	800e124 <__swsetup_r>
 801163c:	b180      	cbz	r0, 8011660 <_vfiprintf_r+0x78>
 801163e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011640:	07da      	lsls	r2, r3, #31
 8011642:	d506      	bpl.n	8011652 <_vfiprintf_r+0x6a>
 8011644:	f04f 33ff 	mov.w	r3, #4294967295
 8011648:	9303      	str	r3, [sp, #12]
 801164a:	9803      	ldr	r0, [sp, #12]
 801164c:	b03b      	add	sp, #236	@ 0xec
 801164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011652:	89bb      	ldrh	r3, [r7, #12]
 8011654:	059b      	lsls	r3, r3, #22
 8011656:	d4f5      	bmi.n	8011644 <_vfiprintf_r+0x5c>
 8011658:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801165a:	f7f9 fc14 	bl	800ae86 <__retarget_lock_release_recursive>
 801165e:	e7f1      	b.n	8011644 <_vfiprintf_r+0x5c>
 8011660:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011664:	f003 021a 	and.w	r2, r3, #26
 8011668:	2a0a      	cmp	r2, #10
 801166a:	d114      	bne.n	8011696 <_vfiprintf_r+0xae>
 801166c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011670:	2a00      	cmp	r2, #0
 8011672:	db10      	blt.n	8011696 <_vfiprintf_r+0xae>
 8011674:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011676:	07d6      	lsls	r6, r2, #31
 8011678:	d404      	bmi.n	8011684 <_vfiprintf_r+0x9c>
 801167a:	059d      	lsls	r5, r3, #22
 801167c:	d402      	bmi.n	8011684 <_vfiprintf_r+0x9c>
 801167e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011680:	f7f9 fc01 	bl	800ae86 <__retarget_lock_release_recursive>
 8011684:	9800      	ldr	r0, [sp, #0]
 8011686:	4623      	mov	r3, r4
 8011688:	465a      	mov	r2, fp
 801168a:	4639      	mov	r1, r7
 801168c:	b03b      	add	sp, #236	@ 0xec
 801168e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011692:	f000 bc31 	b.w	8011ef8 <__sbprintf>
 8011696:	2300      	movs	r3, #0
 8011698:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801169c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80116a0:	ae11      	add	r6, sp, #68	@ 0x44
 80116a2:	960e      	str	r6, [sp, #56]	@ 0x38
 80116a4:	9307      	str	r3, [sp, #28]
 80116a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80116a8:	9303      	str	r3, [sp, #12]
 80116aa:	465b      	mov	r3, fp
 80116ac:	461c      	mov	r4, r3
 80116ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116b2:	b10a      	cbz	r2, 80116b8 <_vfiprintf_r+0xd0>
 80116b4:	2a25      	cmp	r2, #37	@ 0x25
 80116b6:	d1f9      	bne.n	80116ac <_vfiprintf_r+0xc4>
 80116b8:	ebb4 080b 	subs.w	r8, r4, fp
 80116bc:	d00d      	beq.n	80116da <_vfiprintf_r+0xf2>
 80116be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80116c0:	4443      	add	r3, r8
 80116c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80116c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116c6:	3301      	adds	r3, #1
 80116c8:	2b07      	cmp	r3, #7
 80116ca:	e9c6 b800 	strd	fp, r8, [r6]
 80116ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80116d0:	dc75      	bgt.n	80117be <_vfiprintf_r+0x1d6>
 80116d2:	3608      	adds	r6, #8
 80116d4:	9b03      	ldr	r3, [sp, #12]
 80116d6:	4443      	add	r3, r8
 80116d8:	9303      	str	r3, [sp, #12]
 80116da:	7823      	ldrb	r3, [r4, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f000 83cd 	beq.w	8011e7c <_vfiprintf_r+0x894>
 80116e2:	2300      	movs	r3, #0
 80116e4:	f04f 32ff 	mov.w	r2, #4294967295
 80116e8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80116ec:	3401      	adds	r4, #1
 80116ee:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80116f2:	469a      	mov	sl, r3
 80116f4:	46a3      	mov	fp, r4
 80116f6:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80116fa:	f1a3 0220 	sub.w	r2, r3, #32
 80116fe:	2a5a      	cmp	r2, #90	@ 0x5a
 8011700:	f200 8316 	bhi.w	8011d30 <_vfiprintf_r+0x748>
 8011704:	e8df f012 	tbh	[pc, r2, lsl #1]
 8011708:	0314009a 	.word	0x0314009a
 801170c:	00a20314 	.word	0x00a20314
 8011710:	03140314 	.word	0x03140314
 8011714:	00820314 	.word	0x00820314
 8011718:	03140314 	.word	0x03140314
 801171c:	00af00a5 	.word	0x00af00a5
 8011720:	00ac0314 	.word	0x00ac0314
 8011724:	031400b1 	.word	0x031400b1
 8011728:	00d000cd 	.word	0x00d000cd
 801172c:	00d000d0 	.word	0x00d000d0
 8011730:	00d000d0 	.word	0x00d000d0
 8011734:	00d000d0 	.word	0x00d000d0
 8011738:	00d000d0 	.word	0x00d000d0
 801173c:	03140314 	.word	0x03140314
 8011740:	03140314 	.word	0x03140314
 8011744:	03140314 	.word	0x03140314
 8011748:	03140314 	.word	0x03140314
 801174c:	00f70314 	.word	0x00f70314
 8011750:	03140104 	.word	0x03140104
 8011754:	03140314 	.word	0x03140314
 8011758:	03140314 	.word	0x03140314
 801175c:	03140314 	.word	0x03140314
 8011760:	03140314 	.word	0x03140314
 8011764:	01520314 	.word	0x01520314
 8011768:	03140314 	.word	0x03140314
 801176c:	019a0314 	.word	0x019a0314
 8011770:	027a0314 	.word	0x027a0314
 8011774:	03140314 	.word	0x03140314
 8011778:	0314029a 	.word	0x0314029a
 801177c:	03140314 	.word	0x03140314
 8011780:	03140314 	.word	0x03140314
 8011784:	03140314 	.word	0x03140314
 8011788:	03140314 	.word	0x03140314
 801178c:	00f70314 	.word	0x00f70314
 8011790:	03140106 	.word	0x03140106
 8011794:	03140314 	.word	0x03140314
 8011798:	010600e0 	.word	0x010600e0
 801179c:	031400f1 	.word	0x031400f1
 80117a0:	031400eb 	.word	0x031400eb
 80117a4:	01540132 	.word	0x01540132
 80117a8:	00f10189 	.word	0x00f10189
 80117ac:	019a0314 	.word	0x019a0314
 80117b0:	027c0098 	.word	0x027c0098
 80117b4:	03140314 	.word	0x03140314
 80117b8:	03140065 	.word	0x03140065
 80117bc:	0098      	.short	0x0098
 80117be:	9800      	ldr	r0, [sp, #0]
 80117c0:	aa0e      	add	r2, sp, #56	@ 0x38
 80117c2:	4639      	mov	r1, r7
 80117c4:	f7ff fede 	bl	8011584 <__sprint_r>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	f040 8336 	bne.w	8011e3a <_vfiprintf_r+0x852>
 80117ce:	ae11      	add	r6, sp, #68	@ 0x44
 80117d0:	e780      	b.n	80116d4 <_vfiprintf_r+0xec>
 80117d2:	4a99      	ldr	r2, [pc, #612]	@ (8011a38 <_vfiprintf_r+0x450>)
 80117d4:	9205      	str	r2, [sp, #20]
 80117d6:	f01a 0220 	ands.w	r2, sl, #32
 80117da:	f000 8231 	beq.w	8011c40 <_vfiprintf_r+0x658>
 80117de:	3507      	adds	r5, #7
 80117e0:	f025 0507 	bic.w	r5, r5, #7
 80117e4:	46a8      	mov	r8, r5
 80117e6:	686d      	ldr	r5, [r5, #4]
 80117e8:	f858 4b08 	ldr.w	r4, [r8], #8
 80117ec:	f01a 0f01 	tst.w	sl, #1
 80117f0:	d009      	beq.n	8011806 <_vfiprintf_r+0x21e>
 80117f2:	ea54 0205 	orrs.w	r2, r4, r5
 80117f6:	bf1f      	itttt	ne
 80117f8:	2230      	movne	r2, #48	@ 0x30
 80117fa:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80117fe:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8011802:	f04a 0a02 	orrne.w	sl, sl, #2
 8011806:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801180a:	e112      	b.n	8011a32 <_vfiprintf_r+0x44a>
 801180c:	9800      	ldr	r0, [sp, #0]
 801180e:	f7fc fd13 	bl	800e238 <_localeconv_r>
 8011812:	6843      	ldr	r3, [r0, #4]
 8011814:	9309      	str	r3, [sp, #36]	@ 0x24
 8011816:	4618      	mov	r0, r3
 8011818:	f7ee fd02 	bl	8000220 <strlen>
 801181c:	9007      	str	r0, [sp, #28]
 801181e:	9800      	ldr	r0, [sp, #0]
 8011820:	f7fc fd0a 	bl	800e238 <_localeconv_r>
 8011824:	6883      	ldr	r3, [r0, #8]
 8011826:	9306      	str	r3, [sp, #24]
 8011828:	9b07      	ldr	r3, [sp, #28]
 801182a:	b12b      	cbz	r3, 8011838 <_vfiprintf_r+0x250>
 801182c:	9b06      	ldr	r3, [sp, #24]
 801182e:	b11b      	cbz	r3, 8011838 <_vfiprintf_r+0x250>
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	b10b      	cbz	r3, 8011838 <_vfiprintf_r+0x250>
 8011834:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8011838:	465c      	mov	r4, fp
 801183a:	e75b      	b.n	80116f4 <_vfiprintf_r+0x10c>
 801183c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1f9      	bne.n	8011838 <_vfiprintf_r+0x250>
 8011844:	2320      	movs	r3, #32
 8011846:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801184a:	e7f5      	b.n	8011838 <_vfiprintf_r+0x250>
 801184c:	f04a 0a01 	orr.w	sl, sl, #1
 8011850:	e7f2      	b.n	8011838 <_vfiprintf_r+0x250>
 8011852:	f855 3b04 	ldr.w	r3, [r5], #4
 8011856:	9302      	str	r3, [sp, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	daed      	bge.n	8011838 <_vfiprintf_r+0x250>
 801185c:	425b      	negs	r3, r3
 801185e:	9302      	str	r3, [sp, #8]
 8011860:	f04a 0a04 	orr.w	sl, sl, #4
 8011864:	e7e8      	b.n	8011838 <_vfiprintf_r+0x250>
 8011866:	232b      	movs	r3, #43	@ 0x2b
 8011868:	e7ed      	b.n	8011846 <_vfiprintf_r+0x25e>
 801186a:	465a      	mov	r2, fp
 801186c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011870:	2b2a      	cmp	r3, #42	@ 0x2a
 8011872:	d112      	bne.n	801189a <_vfiprintf_r+0x2b2>
 8011874:	f855 3b04 	ldr.w	r3, [r5], #4
 8011878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801187c:	9301      	str	r3, [sp, #4]
 801187e:	4693      	mov	fp, r2
 8011880:	e7da      	b.n	8011838 <_vfiprintf_r+0x250>
 8011882:	9b01      	ldr	r3, [sp, #4]
 8011884:	fb00 1303 	mla	r3, r0, r3, r1
 8011888:	9301      	str	r3, [sp, #4]
 801188a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801188e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8011892:	2909      	cmp	r1, #9
 8011894:	d9f5      	bls.n	8011882 <_vfiprintf_r+0x29a>
 8011896:	4693      	mov	fp, r2
 8011898:	e72f      	b.n	80116fa <_vfiprintf_r+0x112>
 801189a:	2100      	movs	r1, #0
 801189c:	9101      	str	r1, [sp, #4]
 801189e:	200a      	movs	r0, #10
 80118a0:	e7f5      	b.n	801188e <_vfiprintf_r+0x2a6>
 80118a2:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80118a6:	e7c7      	b.n	8011838 <_vfiprintf_r+0x250>
 80118a8:	2100      	movs	r1, #0
 80118aa:	465a      	mov	r2, fp
 80118ac:	9102      	str	r1, [sp, #8]
 80118ae:	200a      	movs	r0, #10
 80118b0:	9902      	ldr	r1, [sp, #8]
 80118b2:	3b30      	subs	r3, #48	@ 0x30
 80118b4:	fb00 3301 	mla	r3, r0, r1, r3
 80118b8:	9302      	str	r3, [sp, #8]
 80118ba:	f812 3b01 	ldrb.w	r3, [r2], #1
 80118be:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80118c2:	2909      	cmp	r1, #9
 80118c4:	d9f4      	bls.n	80118b0 <_vfiprintf_r+0x2c8>
 80118c6:	e7e6      	b.n	8011896 <_vfiprintf_r+0x2ae>
 80118c8:	f89b 3000 	ldrb.w	r3, [fp]
 80118cc:	2b68      	cmp	r3, #104	@ 0x68
 80118ce:	bf06      	itte	eq
 80118d0:	f10b 0b01 	addeq.w	fp, fp, #1
 80118d4:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 80118d8:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 80118dc:	e7ac      	b.n	8011838 <_vfiprintf_r+0x250>
 80118de:	f89b 3000 	ldrb.w	r3, [fp]
 80118e2:	2b6c      	cmp	r3, #108	@ 0x6c
 80118e4:	d104      	bne.n	80118f0 <_vfiprintf_r+0x308>
 80118e6:	f10b 0b01 	add.w	fp, fp, #1
 80118ea:	f04a 0a20 	orr.w	sl, sl, #32
 80118ee:	e7a3      	b.n	8011838 <_vfiprintf_r+0x250>
 80118f0:	f04a 0a10 	orr.w	sl, sl, #16
 80118f4:	e7a0      	b.n	8011838 <_vfiprintf_r+0x250>
 80118f6:	46a8      	mov	r8, r5
 80118f8:	2400      	movs	r4, #0
 80118fa:	f858 3b04 	ldr.w	r3, [r8], #4
 80118fe:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011902:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8011906:	2301      	movs	r3, #1
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801190e:	e0ab      	b.n	8011a68 <_vfiprintf_r+0x480>
 8011910:	f04a 0a10 	orr.w	sl, sl, #16
 8011914:	f01a 0f20 	tst.w	sl, #32
 8011918:	d011      	beq.n	801193e <_vfiprintf_r+0x356>
 801191a:	3507      	adds	r5, #7
 801191c:	f025 0507 	bic.w	r5, r5, #7
 8011920:	46a8      	mov	r8, r5
 8011922:	686d      	ldr	r5, [r5, #4]
 8011924:	f858 4b08 	ldr.w	r4, [r8], #8
 8011928:	2d00      	cmp	r5, #0
 801192a:	da06      	bge.n	801193a <_vfiprintf_r+0x352>
 801192c:	4264      	negs	r4, r4
 801192e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8011932:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8011936:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801193a:	2301      	movs	r3, #1
 801193c:	e048      	b.n	80119d0 <_vfiprintf_r+0x3e8>
 801193e:	46a8      	mov	r8, r5
 8011940:	f01a 0f10 	tst.w	sl, #16
 8011944:	f858 5b04 	ldr.w	r5, [r8], #4
 8011948:	d002      	beq.n	8011950 <_vfiprintf_r+0x368>
 801194a:	462c      	mov	r4, r5
 801194c:	17ed      	asrs	r5, r5, #31
 801194e:	e7eb      	b.n	8011928 <_vfiprintf_r+0x340>
 8011950:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8011954:	d003      	beq.n	801195e <_vfiprintf_r+0x376>
 8011956:	b22c      	sxth	r4, r5
 8011958:	f345 35c0 	sbfx	r5, r5, #15, #1
 801195c:	e7e4      	b.n	8011928 <_vfiprintf_r+0x340>
 801195e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8011962:	d0f2      	beq.n	801194a <_vfiprintf_r+0x362>
 8011964:	b26c      	sxtb	r4, r5
 8011966:	f345 15c0 	sbfx	r5, r5, #7, #1
 801196a:	e7dd      	b.n	8011928 <_vfiprintf_r+0x340>
 801196c:	f01a 0f20 	tst.w	sl, #32
 8011970:	d007      	beq.n	8011982 <_vfiprintf_r+0x39a>
 8011972:	9a03      	ldr	r2, [sp, #12]
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	9903      	ldr	r1, [sp, #12]
 8011978:	17d2      	asrs	r2, r2, #31
 801197a:	e9c3 1200 	strd	r1, r2, [r3]
 801197e:	3504      	adds	r5, #4
 8011980:	e693      	b.n	80116aa <_vfiprintf_r+0xc2>
 8011982:	f01a 0f10 	tst.w	sl, #16
 8011986:	d003      	beq.n	8011990 <_vfiprintf_r+0x3a8>
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	9a03      	ldr	r2, [sp, #12]
 801198c:	601a      	str	r2, [r3, #0]
 801198e:	e7f6      	b.n	801197e <_vfiprintf_r+0x396>
 8011990:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8011994:	d003      	beq.n	801199e <_vfiprintf_r+0x3b6>
 8011996:	682b      	ldr	r3, [r5, #0]
 8011998:	9a03      	ldr	r2, [sp, #12]
 801199a:	801a      	strh	r2, [r3, #0]
 801199c:	e7ef      	b.n	801197e <_vfiprintf_r+0x396>
 801199e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80119a2:	d0f1      	beq.n	8011988 <_vfiprintf_r+0x3a0>
 80119a4:	682b      	ldr	r3, [r5, #0]
 80119a6:	9a03      	ldr	r2, [sp, #12]
 80119a8:	701a      	strb	r2, [r3, #0]
 80119aa:	e7e8      	b.n	801197e <_vfiprintf_r+0x396>
 80119ac:	f04a 0a10 	orr.w	sl, sl, #16
 80119b0:	f01a 0320 	ands.w	r3, sl, #32
 80119b4:	d01f      	beq.n	80119f6 <_vfiprintf_r+0x40e>
 80119b6:	3507      	adds	r5, #7
 80119b8:	f025 0507 	bic.w	r5, r5, #7
 80119bc:	46a8      	mov	r8, r5
 80119be:	686d      	ldr	r5, [r5, #4]
 80119c0:	f858 4b08 	ldr.w	r4, [r8], #8
 80119c4:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80119c8:	2300      	movs	r3, #0
 80119ca:	2200      	movs	r2, #0
 80119cc:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80119d0:	9a01      	ldr	r2, [sp, #4]
 80119d2:	3201      	adds	r2, #1
 80119d4:	f000 825f 	beq.w	8011e96 <_vfiprintf_r+0x8ae>
 80119d8:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 80119dc:	9204      	str	r2, [sp, #16]
 80119de:	ea54 0205 	orrs.w	r2, r4, r5
 80119e2:	f040 825e 	bne.w	8011ea2 <_vfiprintf_r+0x8ba>
 80119e6:	9a01      	ldr	r2, [sp, #4]
 80119e8:	2a00      	cmp	r2, #0
 80119ea:	f000 8198 	beq.w	8011d1e <_vfiprintf_r+0x736>
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	f040 825a 	bne.w	8011ea8 <_vfiprintf_r+0x8c0>
 80119f4:	e13b      	b.n	8011c6e <_vfiprintf_r+0x686>
 80119f6:	46a8      	mov	r8, r5
 80119f8:	f01a 0510 	ands.w	r5, sl, #16
 80119fc:	f858 4b04 	ldr.w	r4, [r8], #4
 8011a00:	d001      	beq.n	8011a06 <_vfiprintf_r+0x41e>
 8011a02:	461d      	mov	r5, r3
 8011a04:	e7de      	b.n	80119c4 <_vfiprintf_r+0x3dc>
 8011a06:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8011a0a:	d001      	beq.n	8011a10 <_vfiprintf_r+0x428>
 8011a0c:	b2a4      	uxth	r4, r4
 8011a0e:	e7d9      	b.n	80119c4 <_vfiprintf_r+0x3dc>
 8011a10:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011a14:	d0d6      	beq.n	80119c4 <_vfiprintf_r+0x3dc>
 8011a16:	b2e4      	uxtb	r4, r4
 8011a18:	e7f3      	b.n	8011a02 <_vfiprintf_r+0x41a>
 8011a1a:	46a8      	mov	r8, r5
 8011a1c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8011a20:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8011a24:	f858 4b04 	ldr.w	r4, [r8], #4
 8011a28:	4b03      	ldr	r3, [pc, #12]	@ (8011a38 <_vfiprintf_r+0x450>)
 8011a2a:	9305      	str	r3, [sp, #20]
 8011a2c:	2500      	movs	r5, #0
 8011a2e:	f04a 0a02 	orr.w	sl, sl, #2
 8011a32:	2302      	movs	r3, #2
 8011a34:	e7c9      	b.n	80119ca <_vfiprintf_r+0x3e2>
 8011a36:	bf00      	nop
 8011a38:	080132d4 	.word	0x080132d4
 8011a3c:	9b01      	ldr	r3, [sp, #4]
 8011a3e:	46a8      	mov	r8, r5
 8011a40:	1c5c      	adds	r4, r3, #1
 8011a42:	f04f 0500 	mov.w	r5, #0
 8011a46:	f858 9b04 	ldr.w	r9, [r8], #4
 8011a4a:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8011a4e:	f000 80d0 	beq.w	8011bf2 <_vfiprintf_r+0x60a>
 8011a52:	461a      	mov	r2, r3
 8011a54:	4629      	mov	r1, r5
 8011a56:	4648      	mov	r0, r9
 8011a58:	f7ee fbea 	bl	8000230 <memchr>
 8011a5c:	4604      	mov	r4, r0
 8011a5e:	b118      	cbz	r0, 8011a68 <_vfiprintf_r+0x480>
 8011a60:	eba0 0309 	sub.w	r3, r0, r9
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	462c      	mov	r4, r5
 8011a68:	9b01      	ldr	r3, [sp, #4]
 8011a6a:	42a3      	cmp	r3, r4
 8011a6c:	bfb8      	it	lt
 8011a6e:	4623      	movlt	r3, r4
 8011a70:	9304      	str	r3, [sp, #16]
 8011a72:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8011a76:	b113      	cbz	r3, 8011a7e <_vfiprintf_r+0x496>
 8011a78:	9b04      	ldr	r3, [sp, #16]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	9304      	str	r3, [sp, #16]
 8011a7e:	f01a 0302 	ands.w	r3, sl, #2
 8011a82:	9308      	str	r3, [sp, #32]
 8011a84:	bf1e      	ittt	ne
 8011a86:	9b04      	ldrne	r3, [sp, #16]
 8011a88:	3302      	addne	r3, #2
 8011a8a:	9304      	strne	r3, [sp, #16]
 8011a8c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8011a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a92:	d11f      	bne.n	8011ad4 <_vfiprintf_r+0x4ec>
 8011a94:	9b02      	ldr	r3, [sp, #8]
 8011a96:	9a04      	ldr	r2, [sp, #16]
 8011a98:	1a9d      	subs	r5, r3, r2
 8011a9a:	2d00      	cmp	r5, #0
 8011a9c:	dd1a      	ble.n	8011ad4 <_vfiprintf_r+0x4ec>
 8011a9e:	4ba9      	ldr	r3, [pc, #676]	@ (8011d44 <_vfiprintf_r+0x75c>)
 8011aa0:	6033      	str	r3, [r6, #0]
 8011aa2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8011aa6:	2d10      	cmp	r5, #16
 8011aa8:	f102 0201 	add.w	r2, r2, #1
 8011aac:	f106 0008 	add.w	r0, r6, #8
 8011ab0:	f300 814e 	bgt.w	8011d50 <_vfiprintf_r+0x768>
 8011ab4:	6075      	str	r5, [r6, #4]
 8011ab6:	2a07      	cmp	r2, #7
 8011ab8:	4465      	add	r5, ip
 8011aba:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8011abe:	f340 815a 	ble.w	8011d76 <_vfiprintf_r+0x78e>
 8011ac2:	9800      	ldr	r0, [sp, #0]
 8011ac4:	aa0e      	add	r2, sp, #56	@ 0x38
 8011ac6:	4639      	mov	r1, r7
 8011ac8:	f7ff fd5c 	bl	8011584 <__sprint_r>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	f040 81b4 	bne.w	8011e3a <_vfiprintf_r+0x852>
 8011ad2:	ae11      	add	r6, sp, #68	@ 0x44
 8011ad4:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8011ad8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011adc:	b161      	cbz	r1, 8011af8 <_vfiprintf_r+0x510>
 8011ade:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	6031      	str	r1, [r6, #0]
 8011ae6:	2101      	movs	r1, #1
 8011ae8:	440a      	add	r2, r1
 8011aea:	2b07      	cmp	r3, #7
 8011aec:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011af0:	6071      	str	r1, [r6, #4]
 8011af2:	f300 8142 	bgt.w	8011d7a <_vfiprintf_r+0x792>
 8011af6:	3608      	adds	r6, #8
 8011af8:	9908      	ldr	r1, [sp, #32]
 8011afa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011afe:	b159      	cbz	r1, 8011b18 <_vfiprintf_r+0x530>
 8011b00:	a90d      	add	r1, sp, #52	@ 0x34
 8011b02:	3301      	adds	r3, #1
 8011b04:	6031      	str	r1, [r6, #0]
 8011b06:	2102      	movs	r1, #2
 8011b08:	440a      	add	r2, r1
 8011b0a:	2b07      	cmp	r3, #7
 8011b0c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011b10:	6071      	str	r1, [r6, #4]
 8011b12:	f300 813b 	bgt.w	8011d8c <_vfiprintf_r+0x7a4>
 8011b16:	3608      	adds	r6, #8
 8011b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b1a:	2b80      	cmp	r3, #128	@ 0x80
 8011b1c:	d11f      	bne.n	8011b5e <_vfiprintf_r+0x576>
 8011b1e:	9b02      	ldr	r3, [sp, #8]
 8011b20:	9a04      	ldr	r2, [sp, #16]
 8011b22:	1a9d      	subs	r5, r3, r2
 8011b24:	2d00      	cmp	r5, #0
 8011b26:	dd1a      	ble.n	8011b5e <_vfiprintf_r+0x576>
 8011b28:	4b87      	ldr	r3, [pc, #540]	@ (8011d48 <_vfiprintf_r+0x760>)
 8011b2a:	6033      	str	r3, [r6, #0]
 8011b2c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8011b30:	2d10      	cmp	r5, #16
 8011b32:	f102 0201 	add.w	r2, r2, #1
 8011b36:	f106 0008 	add.w	r0, r6, #8
 8011b3a:	f300 8130 	bgt.w	8011d9e <_vfiprintf_r+0x7b6>
 8011b3e:	6075      	str	r5, [r6, #4]
 8011b40:	2a07      	cmp	r2, #7
 8011b42:	4465      	add	r5, ip
 8011b44:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8011b48:	f340 813c 	ble.w	8011dc4 <_vfiprintf_r+0x7dc>
 8011b4c:	9800      	ldr	r0, [sp, #0]
 8011b4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8011b50:	4639      	mov	r1, r7
 8011b52:	f7ff fd17 	bl	8011584 <__sprint_r>
 8011b56:	2800      	cmp	r0, #0
 8011b58:	f040 816f 	bne.w	8011e3a <_vfiprintf_r+0x852>
 8011b5c:	ae11      	add	r6, sp, #68	@ 0x44
 8011b5e:	9b01      	ldr	r3, [sp, #4]
 8011b60:	1ae4      	subs	r4, r4, r3
 8011b62:	2c00      	cmp	r4, #0
 8011b64:	dd1a      	ble.n	8011b9c <_vfiprintf_r+0x5b4>
 8011b66:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011b6a:	4877      	ldr	r0, [pc, #476]	@ (8011d48 <_vfiprintf_r+0x760>)
 8011b6c:	6030      	str	r0, [r6, #0]
 8011b6e:	2c10      	cmp	r4, #16
 8011b70:	f103 0301 	add.w	r3, r3, #1
 8011b74:	f106 0108 	add.w	r1, r6, #8
 8011b78:	f300 8126 	bgt.w	8011dc8 <_vfiprintf_r+0x7e0>
 8011b7c:	6074      	str	r4, [r6, #4]
 8011b7e:	2b07      	cmp	r3, #7
 8011b80:	4414      	add	r4, r2
 8011b82:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8011b86:	f340 8130 	ble.w	8011dea <_vfiprintf_r+0x802>
 8011b8a:	9800      	ldr	r0, [sp, #0]
 8011b8c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011b8e:	4639      	mov	r1, r7
 8011b90:	f7ff fcf8 	bl	8011584 <__sprint_r>
 8011b94:	2800      	cmp	r0, #0
 8011b96:	f040 8150 	bne.w	8011e3a <_vfiprintf_r+0x852>
 8011b9a:	ae11      	add	r6, sp, #68	@ 0x44
 8011b9c:	9b01      	ldr	r3, [sp, #4]
 8011b9e:	9a01      	ldr	r2, [sp, #4]
 8011ba0:	6073      	str	r3, [r6, #4]
 8011ba2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ba4:	f8c6 9000 	str.w	r9, [r6]
 8011ba8:	4413      	add	r3, r2
 8011baa:	9310      	str	r3, [sp, #64]	@ 0x40
 8011bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bae:	3301      	adds	r3, #1
 8011bb0:	2b07      	cmp	r3, #7
 8011bb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011bb4:	f300 811b 	bgt.w	8011dee <_vfiprintf_r+0x806>
 8011bb8:	f106 0308 	add.w	r3, r6, #8
 8011bbc:	f01a 0f04 	tst.w	sl, #4
 8011bc0:	f040 811d 	bne.w	8011dfe <_vfiprintf_r+0x816>
 8011bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011bc8:	9904      	ldr	r1, [sp, #16]
 8011bca:	428a      	cmp	r2, r1
 8011bcc:	bfac      	ite	ge
 8011bce:	189b      	addge	r3, r3, r2
 8011bd0:	185b      	addlt	r3, r3, r1
 8011bd2:	9303      	str	r3, [sp, #12]
 8011bd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011bd6:	b13b      	cbz	r3, 8011be8 <_vfiprintf_r+0x600>
 8011bd8:	9800      	ldr	r0, [sp, #0]
 8011bda:	aa0e      	add	r2, sp, #56	@ 0x38
 8011bdc:	4639      	mov	r1, r7
 8011bde:	f7ff fcd1 	bl	8011584 <__sprint_r>
 8011be2:	2800      	cmp	r0, #0
 8011be4:	f040 8129 	bne.w	8011e3a <_vfiprintf_r+0x852>
 8011be8:	2300      	movs	r3, #0
 8011bea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011bec:	4645      	mov	r5, r8
 8011bee:	ae11      	add	r6, sp, #68	@ 0x44
 8011bf0:	e55b      	b.n	80116aa <_vfiprintf_r+0xc2>
 8011bf2:	4648      	mov	r0, r9
 8011bf4:	f7ee fb14 	bl	8000220 <strlen>
 8011bf8:	9001      	str	r0, [sp, #4]
 8011bfa:	e734      	b.n	8011a66 <_vfiprintf_r+0x47e>
 8011bfc:	f04a 0a10 	orr.w	sl, sl, #16
 8011c00:	f01a 0320 	ands.w	r3, sl, #32
 8011c04:	d008      	beq.n	8011c18 <_vfiprintf_r+0x630>
 8011c06:	3507      	adds	r5, #7
 8011c08:	f025 0507 	bic.w	r5, r5, #7
 8011c0c:	46a8      	mov	r8, r5
 8011c0e:	686d      	ldr	r5, [r5, #4]
 8011c10:	f858 4b08 	ldr.w	r4, [r8], #8
 8011c14:	2301      	movs	r3, #1
 8011c16:	e6d8      	b.n	80119ca <_vfiprintf_r+0x3e2>
 8011c18:	46a8      	mov	r8, r5
 8011c1a:	f01a 0510 	ands.w	r5, sl, #16
 8011c1e:	f858 4b04 	ldr.w	r4, [r8], #4
 8011c22:	d001      	beq.n	8011c28 <_vfiprintf_r+0x640>
 8011c24:	461d      	mov	r5, r3
 8011c26:	e7f5      	b.n	8011c14 <_vfiprintf_r+0x62c>
 8011c28:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8011c2c:	d001      	beq.n	8011c32 <_vfiprintf_r+0x64a>
 8011c2e:	b2a4      	uxth	r4, r4
 8011c30:	e7f0      	b.n	8011c14 <_vfiprintf_r+0x62c>
 8011c32:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011c36:	d0ed      	beq.n	8011c14 <_vfiprintf_r+0x62c>
 8011c38:	b2e4      	uxtb	r4, r4
 8011c3a:	e7f3      	b.n	8011c24 <_vfiprintf_r+0x63c>
 8011c3c:	4a43      	ldr	r2, [pc, #268]	@ (8011d4c <_vfiprintf_r+0x764>)
 8011c3e:	e5c9      	b.n	80117d4 <_vfiprintf_r+0x1ec>
 8011c40:	46a8      	mov	r8, r5
 8011c42:	f01a 0510 	ands.w	r5, sl, #16
 8011c46:	f858 4b04 	ldr.w	r4, [r8], #4
 8011c4a:	d001      	beq.n	8011c50 <_vfiprintf_r+0x668>
 8011c4c:	4615      	mov	r5, r2
 8011c4e:	e5cd      	b.n	80117ec <_vfiprintf_r+0x204>
 8011c50:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8011c54:	d001      	beq.n	8011c5a <_vfiprintf_r+0x672>
 8011c56:	b2a4      	uxth	r4, r4
 8011c58:	e5c8      	b.n	80117ec <_vfiprintf_r+0x204>
 8011c5a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011c5e:	f43f adc5 	beq.w	80117ec <_vfiprintf_r+0x204>
 8011c62:	b2e4      	uxtb	r4, r4
 8011c64:	e7f2      	b.n	8011c4c <_vfiprintf_r+0x664>
 8011c66:	2c0a      	cmp	r4, #10
 8011c68:	f175 0300 	sbcs.w	r3, r5, #0
 8011c6c:	d206      	bcs.n	8011c7c <_vfiprintf_r+0x694>
 8011c6e:	3430      	adds	r4, #48	@ 0x30
 8011c70:	b2e4      	uxtb	r4, r4
 8011c72:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8011c76:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8011c7a:	e131      	b.n	8011ee0 <_vfiprintf_r+0x8f8>
 8011c7c:	ab3a      	add	r3, sp, #232	@ 0xe8
 8011c7e:	9308      	str	r3, [sp, #32]
 8011c80:	9b04      	ldr	r3, [sp, #16]
 8011c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011c86:	f04f 0a00 	mov.w	sl, #0
 8011c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c8c:	220a      	movs	r2, #10
 8011c8e:	2300      	movs	r3, #0
 8011c90:	4620      	mov	r0, r4
 8011c92:	4629      	mov	r1, r5
 8011c94:	f7ef f820 	bl	8000cd8 <__aeabi_uldivmod>
 8011c98:	460b      	mov	r3, r1
 8011c9a:	9908      	ldr	r1, [sp, #32]
 8011c9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011c9e:	3230      	adds	r2, #48	@ 0x30
 8011ca0:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ca6:	f101 39ff 	add.w	r9, r1, #4294967295
 8011caa:	f10a 0a01 	add.w	sl, sl, #1
 8011cae:	b1e2      	cbz	r2, 8011cea <_vfiprintf_r+0x702>
 8011cb0:	9a06      	ldr	r2, [sp, #24]
 8011cb2:	7812      	ldrb	r2, [r2, #0]
 8011cb4:	4552      	cmp	r2, sl
 8011cb6:	d118      	bne.n	8011cea <_vfiprintf_r+0x702>
 8011cb8:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011cbc:	d015      	beq.n	8011cea <_vfiprintf_r+0x702>
 8011cbe:	2c0a      	cmp	r4, #10
 8011cc0:	f175 0200 	sbcs.w	r2, r5, #0
 8011cc4:	d311      	bcc.n	8011cea <_vfiprintf_r+0x702>
 8011cc6:	9308      	str	r3, [sp, #32]
 8011cc8:	9b07      	ldr	r3, [sp, #28]
 8011cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ccc:	eba9 0903 	sub.w	r9, r9, r3
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	4648      	mov	r0, r9
 8011cd4:	f7fc fa96 	bl	800e204 <strncpy>
 8011cd8:	9b06      	ldr	r3, [sp, #24]
 8011cda:	785a      	ldrb	r2, [r3, #1]
 8011cdc:	9b08      	ldr	r3, [sp, #32]
 8011cde:	b172      	cbz	r2, 8011cfe <_vfiprintf_r+0x716>
 8011ce0:	9a06      	ldr	r2, [sp, #24]
 8011ce2:	3201      	adds	r2, #1
 8011ce4:	9206      	str	r2, [sp, #24]
 8011ce6:	f04f 0a00 	mov.w	sl, #0
 8011cea:	2c0a      	cmp	r4, #10
 8011cec:	f175 0500 	sbcs.w	r5, r5, #0
 8011cf0:	f0c0 80f6 	bcc.w	8011ee0 <_vfiprintf_r+0x8f8>
 8011cf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011cf6:	f8cd 9020 	str.w	r9, [sp, #32]
 8011cfa:	461d      	mov	r5, r3
 8011cfc:	e7c6      	b.n	8011c8c <_vfiprintf_r+0x6a4>
 8011cfe:	4692      	mov	sl, r2
 8011d00:	e7f3      	b.n	8011cea <_vfiprintf_r+0x702>
 8011d02:	f004 030f 	and.w	r3, r4, #15
 8011d06:	9a05      	ldr	r2, [sp, #20]
 8011d08:	0924      	lsrs	r4, r4, #4
 8011d0a:	5cd3      	ldrb	r3, [r2, r3]
 8011d0c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011d10:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8011d14:	092d      	lsrs	r5, r5, #4
 8011d16:	ea54 0305 	orrs.w	r3, r4, r5
 8011d1a:	d1f2      	bne.n	8011d02 <_vfiprintf_r+0x71a>
 8011d1c:	e0e0      	b.n	8011ee0 <_vfiprintf_r+0x8f8>
 8011d1e:	b923      	cbnz	r3, 8011d2a <_vfiprintf_r+0x742>
 8011d20:	f01a 0f01 	tst.w	sl, #1
 8011d24:	d001      	beq.n	8011d2a <_vfiprintf_r+0x742>
 8011d26:	2430      	movs	r4, #48	@ 0x30
 8011d28:	e7a3      	b.n	8011c72 <_vfiprintf_r+0x68a>
 8011d2a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011d2e:	e0d7      	b.n	8011ee0 <_vfiprintf_r+0x8f8>
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f000 80a3 	beq.w	8011e7c <_vfiprintf_r+0x894>
 8011d36:	2400      	movs	r4, #0
 8011d38:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011d3c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8011d40:	46a8      	mov	r8, r5
 8011d42:	e5e0      	b.n	8011906 <_vfiprintf_r+0x31e>
 8011d44:	08013715 	.word	0x08013715
 8011d48:	08013705 	.word	0x08013705
 8011d4c:	080132e5 	.word	0x080132e5
 8011d50:	2110      	movs	r1, #16
 8011d52:	6071      	str	r1, [r6, #4]
 8011d54:	2a07      	cmp	r2, #7
 8011d56:	4461      	add	r1, ip
 8011d58:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011d5c:	dd08      	ble.n	8011d70 <_vfiprintf_r+0x788>
 8011d5e:	9800      	ldr	r0, [sp, #0]
 8011d60:	aa0e      	add	r2, sp, #56	@ 0x38
 8011d62:	4639      	mov	r1, r7
 8011d64:	f7ff fc0e 	bl	8011584 <__sprint_r>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d166      	bne.n	8011e3a <_vfiprintf_r+0x852>
 8011d6c:	4b60      	ldr	r3, [pc, #384]	@ (8011ef0 <_vfiprintf_r+0x908>)
 8011d6e:	a811      	add	r0, sp, #68	@ 0x44
 8011d70:	3d10      	subs	r5, #16
 8011d72:	4606      	mov	r6, r0
 8011d74:	e694      	b.n	8011aa0 <_vfiprintf_r+0x4b8>
 8011d76:	4606      	mov	r6, r0
 8011d78:	e6ac      	b.n	8011ad4 <_vfiprintf_r+0x4ec>
 8011d7a:	9800      	ldr	r0, [sp, #0]
 8011d7c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011d7e:	4639      	mov	r1, r7
 8011d80:	f7ff fc00 	bl	8011584 <__sprint_r>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	d158      	bne.n	8011e3a <_vfiprintf_r+0x852>
 8011d88:	ae11      	add	r6, sp, #68	@ 0x44
 8011d8a:	e6b5      	b.n	8011af8 <_vfiprintf_r+0x510>
 8011d8c:	9800      	ldr	r0, [sp, #0]
 8011d8e:	aa0e      	add	r2, sp, #56	@ 0x38
 8011d90:	4639      	mov	r1, r7
 8011d92:	f7ff fbf7 	bl	8011584 <__sprint_r>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d14f      	bne.n	8011e3a <_vfiprintf_r+0x852>
 8011d9a:	ae11      	add	r6, sp, #68	@ 0x44
 8011d9c:	e6bc      	b.n	8011b18 <_vfiprintf_r+0x530>
 8011d9e:	2110      	movs	r1, #16
 8011da0:	6071      	str	r1, [r6, #4]
 8011da2:	2a07      	cmp	r2, #7
 8011da4:	4461      	add	r1, ip
 8011da6:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011daa:	dd08      	ble.n	8011dbe <_vfiprintf_r+0x7d6>
 8011dac:	9800      	ldr	r0, [sp, #0]
 8011dae:	aa0e      	add	r2, sp, #56	@ 0x38
 8011db0:	4639      	mov	r1, r7
 8011db2:	f7ff fbe7 	bl	8011584 <__sprint_r>
 8011db6:	2800      	cmp	r0, #0
 8011db8:	d13f      	bne.n	8011e3a <_vfiprintf_r+0x852>
 8011dba:	4b4e      	ldr	r3, [pc, #312]	@ (8011ef4 <_vfiprintf_r+0x90c>)
 8011dbc:	a811      	add	r0, sp, #68	@ 0x44
 8011dbe:	3d10      	subs	r5, #16
 8011dc0:	4606      	mov	r6, r0
 8011dc2:	e6b2      	b.n	8011b2a <_vfiprintf_r+0x542>
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	e6ca      	b.n	8011b5e <_vfiprintf_r+0x576>
 8011dc8:	2010      	movs	r0, #16
 8011dca:	4402      	add	r2, r0
 8011dcc:	2b07      	cmp	r3, #7
 8011dce:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011dd2:	6070      	str	r0, [r6, #4]
 8011dd4:	dd06      	ble.n	8011de4 <_vfiprintf_r+0x7fc>
 8011dd6:	9800      	ldr	r0, [sp, #0]
 8011dd8:	aa0e      	add	r2, sp, #56	@ 0x38
 8011dda:	4639      	mov	r1, r7
 8011ddc:	f7ff fbd2 	bl	8011584 <__sprint_r>
 8011de0:	bb58      	cbnz	r0, 8011e3a <_vfiprintf_r+0x852>
 8011de2:	a911      	add	r1, sp, #68	@ 0x44
 8011de4:	3c10      	subs	r4, #16
 8011de6:	460e      	mov	r6, r1
 8011de8:	e6bd      	b.n	8011b66 <_vfiprintf_r+0x57e>
 8011dea:	460e      	mov	r6, r1
 8011dec:	e6d6      	b.n	8011b9c <_vfiprintf_r+0x5b4>
 8011dee:	9800      	ldr	r0, [sp, #0]
 8011df0:	aa0e      	add	r2, sp, #56	@ 0x38
 8011df2:	4639      	mov	r1, r7
 8011df4:	f7ff fbc6 	bl	8011584 <__sprint_r>
 8011df8:	b9f8      	cbnz	r0, 8011e3a <_vfiprintf_r+0x852>
 8011dfa:	ab11      	add	r3, sp, #68	@ 0x44
 8011dfc:	e6de      	b.n	8011bbc <_vfiprintf_r+0x5d4>
 8011dfe:	9a02      	ldr	r2, [sp, #8]
 8011e00:	9904      	ldr	r1, [sp, #16]
 8011e02:	1a54      	subs	r4, r2, r1
 8011e04:	2c00      	cmp	r4, #0
 8011e06:	f77f aedd 	ble.w	8011bc4 <_vfiprintf_r+0x5dc>
 8011e0a:	4d39      	ldr	r5, [pc, #228]	@ (8011ef0 <_vfiprintf_r+0x908>)
 8011e0c:	2610      	movs	r6, #16
 8011e0e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8011e12:	2c10      	cmp	r4, #16
 8011e14:	f102 0201 	add.w	r2, r2, #1
 8011e18:	601d      	str	r5, [r3, #0]
 8011e1a:	dc1d      	bgt.n	8011e58 <_vfiprintf_r+0x870>
 8011e1c:	605c      	str	r4, [r3, #4]
 8011e1e:	2a07      	cmp	r2, #7
 8011e20:	440c      	add	r4, r1
 8011e22:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8011e26:	f77f aecd 	ble.w	8011bc4 <_vfiprintf_r+0x5dc>
 8011e2a:	9800      	ldr	r0, [sp, #0]
 8011e2c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011e2e:	4639      	mov	r1, r7
 8011e30:	f7ff fba8 	bl	8011584 <__sprint_r>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	f43f aec5 	beq.w	8011bc4 <_vfiprintf_r+0x5dc>
 8011e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e3c:	07d9      	lsls	r1, r3, #31
 8011e3e:	d405      	bmi.n	8011e4c <_vfiprintf_r+0x864>
 8011e40:	89bb      	ldrh	r3, [r7, #12]
 8011e42:	059a      	lsls	r2, r3, #22
 8011e44:	d402      	bmi.n	8011e4c <_vfiprintf_r+0x864>
 8011e46:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011e48:	f7f9 f81d 	bl	800ae86 <__retarget_lock_release_recursive>
 8011e4c:	89bb      	ldrh	r3, [r7, #12]
 8011e4e:	065b      	lsls	r3, r3, #25
 8011e50:	f57f abfb 	bpl.w	801164a <_vfiprintf_r+0x62>
 8011e54:	f7ff bbf6 	b.w	8011644 <_vfiprintf_r+0x5c>
 8011e58:	3110      	adds	r1, #16
 8011e5a:	2a07      	cmp	r2, #7
 8011e5c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011e60:	605e      	str	r6, [r3, #4]
 8011e62:	dc02      	bgt.n	8011e6a <_vfiprintf_r+0x882>
 8011e64:	3308      	adds	r3, #8
 8011e66:	3c10      	subs	r4, #16
 8011e68:	e7d1      	b.n	8011e0e <_vfiprintf_r+0x826>
 8011e6a:	9800      	ldr	r0, [sp, #0]
 8011e6c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011e6e:	4639      	mov	r1, r7
 8011e70:	f7ff fb88 	bl	8011584 <__sprint_r>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d1e0      	bne.n	8011e3a <_vfiprintf_r+0x852>
 8011e78:	ab11      	add	r3, sp, #68	@ 0x44
 8011e7a:	e7f4      	b.n	8011e66 <_vfiprintf_r+0x87e>
 8011e7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e7e:	b913      	cbnz	r3, 8011e86 <_vfiprintf_r+0x89e>
 8011e80:	2300      	movs	r3, #0
 8011e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e84:	e7d9      	b.n	8011e3a <_vfiprintf_r+0x852>
 8011e86:	9800      	ldr	r0, [sp, #0]
 8011e88:	aa0e      	add	r2, sp, #56	@ 0x38
 8011e8a:	4639      	mov	r1, r7
 8011e8c:	f7ff fb7a 	bl	8011584 <__sprint_r>
 8011e90:	2800      	cmp	r0, #0
 8011e92:	d0f5      	beq.n	8011e80 <_vfiprintf_r+0x898>
 8011e94:	e7d1      	b.n	8011e3a <_vfiprintf_r+0x852>
 8011e96:	ea54 0205 	orrs.w	r2, r4, r5
 8011e9a:	f8cd a010 	str.w	sl, [sp, #16]
 8011e9e:	f43f ada6 	beq.w	80119ee <_vfiprintf_r+0x406>
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	f43f aedf 	beq.w	8011c66 <_vfiprintf_r+0x67e>
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011eae:	f43f af28 	beq.w	8011d02 <_vfiprintf_r+0x71a>
 8011eb2:	f004 0307 	and.w	r3, r4, #7
 8011eb6:	08e4      	lsrs	r4, r4, #3
 8011eb8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8011ebc:	08ed      	lsrs	r5, r5, #3
 8011ebe:	3330      	adds	r3, #48	@ 0x30
 8011ec0:	ea54 0105 	orrs.w	r1, r4, r5
 8011ec4:	464a      	mov	r2, r9
 8011ec6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011eca:	d1f2      	bne.n	8011eb2 <_vfiprintf_r+0x8ca>
 8011ecc:	9904      	ldr	r1, [sp, #16]
 8011ece:	07c8      	lsls	r0, r1, #31
 8011ed0:	d506      	bpl.n	8011ee0 <_vfiprintf_r+0x8f8>
 8011ed2:	2b30      	cmp	r3, #48	@ 0x30
 8011ed4:	d004      	beq.n	8011ee0 <_vfiprintf_r+0x8f8>
 8011ed6:	2330      	movs	r3, #48	@ 0x30
 8011ed8:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011edc:	f1a2 0902 	sub.w	r9, r2, #2
 8011ee0:	ab3a      	add	r3, sp, #232	@ 0xe8
 8011ee2:	eba3 0309 	sub.w	r3, r3, r9
 8011ee6:	9c01      	ldr	r4, [sp, #4]
 8011ee8:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011eec:	9301      	str	r3, [sp, #4]
 8011eee:	e5bb      	b.n	8011a68 <_vfiprintf_r+0x480>
 8011ef0:	08013715 	.word	0x08013715
 8011ef4:	08013705 	.word	0x08013705

08011ef8 <__sbprintf>:
 8011ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011efa:	461f      	mov	r7, r3
 8011efc:	898b      	ldrh	r3, [r1, #12]
 8011efe:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8011f02:	f023 0302 	bic.w	r3, r3, #2
 8011f06:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011f0a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011f0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8011f0e:	89cb      	ldrh	r3, [r1, #14]
 8011f10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011f14:	69cb      	ldr	r3, [r1, #28]
 8011f16:	9307      	str	r3, [sp, #28]
 8011f18:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8011f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f1c:	ab1a      	add	r3, sp, #104	@ 0x68
 8011f1e:	9300      	str	r3, [sp, #0]
 8011f20:	9304      	str	r3, [sp, #16]
 8011f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f26:	4615      	mov	r5, r2
 8011f28:	4606      	mov	r6, r0
 8011f2a:	9302      	str	r3, [sp, #8]
 8011f2c:	9305      	str	r3, [sp, #20]
 8011f2e:	a816      	add	r0, sp, #88	@ 0x58
 8011f30:	2300      	movs	r3, #0
 8011f32:	460c      	mov	r4, r1
 8011f34:	9306      	str	r3, [sp, #24]
 8011f36:	f7f8 ffa3 	bl	800ae80 <__retarget_lock_init_recursive>
 8011f3a:	462a      	mov	r2, r5
 8011f3c:	463b      	mov	r3, r7
 8011f3e:	4669      	mov	r1, sp
 8011f40:	4630      	mov	r0, r6
 8011f42:	f7ff fb51 	bl	80115e8 <_vfiprintf_r>
 8011f46:	1e05      	subs	r5, r0, #0
 8011f48:	db07      	blt.n	8011f5a <__sbprintf+0x62>
 8011f4a:	4669      	mov	r1, sp
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7fb fd21 	bl	800d994 <_fflush_r>
 8011f52:	2800      	cmp	r0, #0
 8011f54:	bf18      	it	ne
 8011f56:	f04f 35ff 	movne.w	r5, #4294967295
 8011f5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011f5e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8011f60:	065b      	lsls	r3, r3, #25
 8011f62:	bf42      	ittt	mi
 8011f64:	89a3      	ldrhmi	r3, [r4, #12]
 8011f66:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8011f6a:	81a3      	strhmi	r3, [r4, #12]
 8011f6c:	f7f8 ff89 	bl	800ae82 <__retarget_lock_close_recursive>
 8011f70:	4628      	mov	r0, r5
 8011f72:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8011f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f78 <__fputwc>:
 8011f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f7c:	4680      	mov	r8, r0
 8011f7e:	460f      	mov	r7, r1
 8011f80:	4614      	mov	r4, r2
 8011f82:	f7fc f953 	bl	800e22c <__locale_mb_cur_max>
 8011f86:	2801      	cmp	r0, #1
 8011f88:	4605      	mov	r5, r0
 8011f8a:	d11b      	bne.n	8011fc4 <__fputwc+0x4c>
 8011f8c:	1e7b      	subs	r3, r7, #1
 8011f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011f90:	d818      	bhi.n	8011fc4 <__fputwc+0x4c>
 8011f92:	f88d 7004 	strb.w	r7, [sp, #4]
 8011f96:	2600      	movs	r6, #0
 8011f98:	f10d 0904 	add.w	r9, sp, #4
 8011f9c:	42ae      	cmp	r6, r5
 8011f9e:	d021      	beq.n	8011fe4 <__fputwc+0x6c>
 8011fa0:	68a3      	ldr	r3, [r4, #8]
 8011fa2:	f816 1009 	ldrb.w	r1, [r6, r9]
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	60a3      	str	r3, [r4, #8]
 8011fac:	da04      	bge.n	8011fb8 <__fputwc+0x40>
 8011fae:	69a2      	ldr	r2, [r4, #24]
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	db1b      	blt.n	8011fec <__fputwc+0x74>
 8011fb4:	290a      	cmp	r1, #10
 8011fb6:	d019      	beq.n	8011fec <__fputwc+0x74>
 8011fb8:	6823      	ldr	r3, [r4, #0]
 8011fba:	1c5a      	adds	r2, r3, #1
 8011fbc:	6022      	str	r2, [r4, #0]
 8011fbe:	7019      	strb	r1, [r3, #0]
 8011fc0:	3601      	adds	r6, #1
 8011fc2:	e7eb      	b.n	8011f9c <__fputwc+0x24>
 8011fc4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8011fc8:	463a      	mov	r2, r7
 8011fca:	a901      	add	r1, sp, #4
 8011fcc:	4640      	mov	r0, r8
 8011fce:	f000 f845 	bl	801205c <_wcrtomb_r>
 8011fd2:	1c43      	adds	r3, r0, #1
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	d1de      	bne.n	8011f96 <__fputwc+0x1e>
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fde:	81a3      	strh	r3, [r4, #12]
 8011fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8011fe4:	4638      	mov	r0, r7
 8011fe6:	b003      	add	sp, #12
 8011fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fec:	4622      	mov	r2, r4
 8011fee:	4640      	mov	r0, r8
 8011ff0:	f000 f84a 	bl	8012088 <__swbuf_r>
 8011ff4:	3001      	adds	r0, #1
 8011ff6:	d1e3      	bne.n	8011fc0 <__fputwc+0x48>
 8011ff8:	e7f2      	b.n	8011fe0 <__fputwc+0x68>

08011ffa <_fputwc_r>:
 8011ffa:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8011ffc:	07db      	lsls	r3, r3, #31
 8011ffe:	b570      	push	{r4, r5, r6, lr}
 8012000:	4605      	mov	r5, r0
 8012002:	460e      	mov	r6, r1
 8012004:	4614      	mov	r4, r2
 8012006:	d405      	bmi.n	8012014 <_fputwc_r+0x1a>
 8012008:	8993      	ldrh	r3, [r2, #12]
 801200a:	0598      	lsls	r0, r3, #22
 801200c:	d402      	bmi.n	8012014 <_fputwc_r+0x1a>
 801200e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8012010:	f7f8 ff38 	bl	800ae84 <__retarget_lock_acquire_recursive>
 8012014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012018:	0499      	lsls	r1, r3, #18
 801201a:	d406      	bmi.n	801202a <_fputwc_r+0x30>
 801201c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012020:	81a3      	strh	r3, [r4, #12]
 8012022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012024:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012028:	6663      	str	r3, [r4, #100]	@ 0x64
 801202a:	4622      	mov	r2, r4
 801202c:	4628      	mov	r0, r5
 801202e:	4631      	mov	r1, r6
 8012030:	f7ff ffa2 	bl	8011f78 <__fputwc>
 8012034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012036:	07da      	lsls	r2, r3, #31
 8012038:	4605      	mov	r5, r0
 801203a:	d405      	bmi.n	8012048 <_fputwc_r+0x4e>
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	059b      	lsls	r3, r3, #22
 8012040:	d402      	bmi.n	8012048 <_fputwc_r+0x4e>
 8012042:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012044:	f7f8 ff1f 	bl	800ae86 <__retarget_lock_release_recursive>
 8012048:	4628      	mov	r0, r5
 801204a:	bd70      	pop	{r4, r5, r6, pc}

0801204c <abort>:
 801204c:	b508      	push	{r3, lr}
 801204e:	2006      	movs	r0, #6
 8012050:	f000 f88c 	bl	801216c <raise>
 8012054:	2001      	movs	r0, #1
 8012056:	f7f0 fc5d 	bl	8002914 <_exit>
	...

0801205c <_wcrtomb_r>:
 801205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801205e:	4c09      	ldr	r4, [pc, #36]	@ (8012084 <_wcrtomb_r+0x28>)
 8012060:	b085      	sub	sp, #20
 8012062:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8012066:	4605      	mov	r5, r0
 8012068:	461e      	mov	r6, r3
 801206a:	b909      	cbnz	r1, 8012070 <_wcrtomb_r+0x14>
 801206c:	460a      	mov	r2, r1
 801206e:	a901      	add	r1, sp, #4
 8012070:	47b8      	blx	r7
 8012072:	1c43      	adds	r3, r0, #1
 8012074:	bf01      	itttt	eq
 8012076:	2300      	moveq	r3, #0
 8012078:	6033      	streq	r3, [r6, #0]
 801207a:	238a      	moveq	r3, #138	@ 0x8a
 801207c:	602b      	streq	r3, [r5, #0]
 801207e:	b005      	add	sp, #20
 8012080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012082:	bf00      	nop
 8012084:	20000564 	.word	0x20000564

08012088 <__swbuf_r>:
 8012088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208a:	460e      	mov	r6, r1
 801208c:	4614      	mov	r4, r2
 801208e:	4605      	mov	r5, r0
 8012090:	b118      	cbz	r0, 801209a <__swbuf_r+0x12>
 8012092:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012094:	b90b      	cbnz	r3, 801209a <__swbuf_r+0x12>
 8012096:	f7f8 fcb7 	bl	800aa08 <__sinit>
 801209a:	69a3      	ldr	r3, [r4, #24]
 801209c:	60a3      	str	r3, [r4, #8]
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	0719      	lsls	r1, r3, #28
 80120a2:	d501      	bpl.n	80120a8 <__swbuf_r+0x20>
 80120a4:	6923      	ldr	r3, [r4, #16]
 80120a6:	b943      	cbnz	r3, 80120ba <__swbuf_r+0x32>
 80120a8:	4621      	mov	r1, r4
 80120aa:	4628      	mov	r0, r5
 80120ac:	f7fc f83a 	bl	800e124 <__swsetup_r>
 80120b0:	b118      	cbz	r0, 80120ba <__swbuf_r+0x32>
 80120b2:	f04f 37ff 	mov.w	r7, #4294967295
 80120b6:	4638      	mov	r0, r7
 80120b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120be:	b2f6      	uxtb	r6, r6
 80120c0:	049a      	lsls	r2, r3, #18
 80120c2:	4637      	mov	r7, r6
 80120c4:	d406      	bmi.n	80120d4 <__swbuf_r+0x4c>
 80120c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80120ca:	81a3      	strh	r3, [r4, #12]
 80120cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80120d2:	6663      	str	r3, [r4, #100]	@ 0x64
 80120d4:	6823      	ldr	r3, [r4, #0]
 80120d6:	6922      	ldr	r2, [r4, #16]
 80120d8:	1a98      	subs	r0, r3, r2
 80120da:	6963      	ldr	r3, [r4, #20]
 80120dc:	4283      	cmp	r3, r0
 80120de:	dc05      	bgt.n	80120ec <__swbuf_r+0x64>
 80120e0:	4621      	mov	r1, r4
 80120e2:	4628      	mov	r0, r5
 80120e4:	f7fb fc56 	bl	800d994 <_fflush_r>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	d1e2      	bne.n	80120b2 <__swbuf_r+0x2a>
 80120ec:	68a3      	ldr	r3, [r4, #8]
 80120ee:	3b01      	subs	r3, #1
 80120f0:	60a3      	str	r3, [r4, #8]
 80120f2:	6823      	ldr	r3, [r4, #0]
 80120f4:	1c5a      	adds	r2, r3, #1
 80120f6:	6022      	str	r2, [r4, #0]
 80120f8:	701e      	strb	r6, [r3, #0]
 80120fa:	6962      	ldr	r2, [r4, #20]
 80120fc:	1c43      	adds	r3, r0, #1
 80120fe:	429a      	cmp	r2, r3
 8012100:	d004      	beq.n	801210c <__swbuf_r+0x84>
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	07db      	lsls	r3, r3, #31
 8012106:	d5d6      	bpl.n	80120b6 <__swbuf_r+0x2e>
 8012108:	2e0a      	cmp	r6, #10
 801210a:	d1d4      	bne.n	80120b6 <__swbuf_r+0x2e>
 801210c:	4621      	mov	r1, r4
 801210e:	4628      	mov	r0, r5
 8012110:	f7fb fc40 	bl	800d994 <_fflush_r>
 8012114:	2800      	cmp	r0, #0
 8012116:	d0ce      	beq.n	80120b6 <__swbuf_r+0x2e>
 8012118:	e7cb      	b.n	80120b2 <__swbuf_r+0x2a>

0801211a <_raise_r>:
 801211a:	291f      	cmp	r1, #31
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	4605      	mov	r5, r0
 8012120:	460c      	mov	r4, r1
 8012122:	d904      	bls.n	801212e <_raise_r+0x14>
 8012124:	2316      	movs	r3, #22
 8012126:	6003      	str	r3, [r0, #0]
 8012128:	f04f 30ff 	mov.w	r0, #4294967295
 801212c:	bd38      	pop	{r3, r4, r5, pc}
 801212e:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8012132:	b112      	cbz	r2, 801213a <_raise_r+0x20>
 8012134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012138:	b94b      	cbnz	r3, 801214e <_raise_r+0x34>
 801213a:	4628      	mov	r0, r5
 801213c:	f000 f830 	bl	80121a0 <_getpid_r>
 8012140:	4622      	mov	r2, r4
 8012142:	4601      	mov	r1, r0
 8012144:	4628      	mov	r0, r5
 8012146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801214a:	f000 b817 	b.w	801217c <_kill_r>
 801214e:	2b01      	cmp	r3, #1
 8012150:	d00a      	beq.n	8012168 <_raise_r+0x4e>
 8012152:	1c59      	adds	r1, r3, #1
 8012154:	d103      	bne.n	801215e <_raise_r+0x44>
 8012156:	2316      	movs	r3, #22
 8012158:	6003      	str	r3, [r0, #0]
 801215a:	2001      	movs	r0, #1
 801215c:	e7e6      	b.n	801212c <_raise_r+0x12>
 801215e:	2100      	movs	r1, #0
 8012160:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012164:	4620      	mov	r0, r4
 8012166:	4798      	blx	r3
 8012168:	2000      	movs	r0, #0
 801216a:	e7df      	b.n	801212c <_raise_r+0x12>

0801216c <raise>:
 801216c:	4b02      	ldr	r3, [pc, #8]	@ (8012178 <raise+0xc>)
 801216e:	4601      	mov	r1, r0
 8012170:	6818      	ldr	r0, [r3, #0]
 8012172:	f7ff bfd2 	b.w	801211a <_raise_r>
 8012176:	bf00      	nop
 8012178:	20000438 	.word	0x20000438

0801217c <_kill_r>:
 801217c:	b538      	push	{r3, r4, r5, lr}
 801217e:	4d07      	ldr	r5, [pc, #28]	@ (801219c <_kill_r+0x20>)
 8012180:	2300      	movs	r3, #0
 8012182:	4604      	mov	r4, r0
 8012184:	4608      	mov	r0, r1
 8012186:	4611      	mov	r1, r2
 8012188:	602b      	str	r3, [r5, #0]
 801218a:	f7f0 fbb3 	bl	80028f4 <_kill>
 801218e:	1c43      	adds	r3, r0, #1
 8012190:	d102      	bne.n	8012198 <_kill_r+0x1c>
 8012192:	682b      	ldr	r3, [r5, #0]
 8012194:	b103      	cbz	r3, 8012198 <_kill_r+0x1c>
 8012196:	6023      	str	r3, [r4, #0]
 8012198:	bd38      	pop	{r3, r4, r5, pc}
 801219a:	bf00      	nop
 801219c:	20002d88 	.word	0x20002d88

080121a0 <_getpid_r>:
 80121a0:	f7f0 bba0 	b.w	80028e4 <_getpid>
 80121a4:	0000      	movs	r0, r0
	...

080121a8 <sin>:
 80121a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121aa:	ec53 2b10 	vmov	r2, r3, d0
 80121ae:	4826      	ldr	r0, [pc, #152]	@ (8012248 <sin+0xa0>)
 80121b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80121b4:	4281      	cmp	r1, r0
 80121b6:	d807      	bhi.n	80121c8 <sin+0x20>
 80121b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012240 <sin+0x98>
 80121bc:	2000      	movs	r0, #0
 80121be:	b005      	add	sp, #20
 80121c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80121c4:	f000 b90c 	b.w	80123e0 <__kernel_sin>
 80121c8:	4820      	ldr	r0, [pc, #128]	@ (801224c <sin+0xa4>)
 80121ca:	4281      	cmp	r1, r0
 80121cc:	d908      	bls.n	80121e0 <sin+0x38>
 80121ce:	4610      	mov	r0, r2
 80121d0:	4619      	mov	r1, r3
 80121d2:	f7ee f881 	bl	80002d8 <__aeabi_dsub>
 80121d6:	ec41 0b10 	vmov	d0, r0, r1
 80121da:	b005      	add	sp, #20
 80121dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80121e0:	4668      	mov	r0, sp
 80121e2:	f000 f9b9 	bl	8012558 <__ieee754_rem_pio2>
 80121e6:	f000 0003 	and.w	r0, r0, #3
 80121ea:	2801      	cmp	r0, #1
 80121ec:	d00c      	beq.n	8012208 <sin+0x60>
 80121ee:	2802      	cmp	r0, #2
 80121f0:	d011      	beq.n	8012216 <sin+0x6e>
 80121f2:	b9e8      	cbnz	r0, 8012230 <sin+0x88>
 80121f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80121f8:	ed9d 0b00 	vldr	d0, [sp]
 80121fc:	2001      	movs	r0, #1
 80121fe:	f000 f8ef 	bl	80123e0 <__kernel_sin>
 8012202:	ec51 0b10 	vmov	r0, r1, d0
 8012206:	e7e6      	b.n	80121d6 <sin+0x2e>
 8012208:	ed9d 1b02 	vldr	d1, [sp, #8]
 801220c:	ed9d 0b00 	vldr	d0, [sp]
 8012210:	f000 f81e 	bl	8012250 <__kernel_cos>
 8012214:	e7f5      	b.n	8012202 <sin+0x5a>
 8012216:	ed9d 1b02 	vldr	d1, [sp, #8]
 801221a:	ed9d 0b00 	vldr	d0, [sp]
 801221e:	2001      	movs	r0, #1
 8012220:	f000 f8de 	bl	80123e0 <__kernel_sin>
 8012224:	ec53 2b10 	vmov	r2, r3, d0
 8012228:	4610      	mov	r0, r2
 801222a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801222e:	e7d2      	b.n	80121d6 <sin+0x2e>
 8012230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012234:	ed9d 0b00 	vldr	d0, [sp]
 8012238:	f000 f80a 	bl	8012250 <__kernel_cos>
 801223c:	e7f2      	b.n	8012224 <sin+0x7c>
 801223e:	bf00      	nop
	...
 8012248:	3fe921fb 	.word	0x3fe921fb
 801224c:	7fefffff 	.word	0x7fefffff

08012250 <__kernel_cos>:
 8012250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012254:	ec57 6b10 	vmov	r6, r7, d0
 8012258:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801225c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012260:	ed8d 1b00 	vstr	d1, [sp]
 8012264:	d206      	bcs.n	8012274 <__kernel_cos+0x24>
 8012266:	4630      	mov	r0, r6
 8012268:	4639      	mov	r1, r7
 801226a:	f7ee fc9d 	bl	8000ba8 <__aeabi_d2iz>
 801226e:	2800      	cmp	r0, #0
 8012270:	f000 8088 	beq.w	8012384 <__kernel_cos+0x134>
 8012274:	4632      	mov	r2, r6
 8012276:	463b      	mov	r3, r7
 8012278:	4630      	mov	r0, r6
 801227a:	4639      	mov	r1, r7
 801227c:	f7ee f9e4 	bl	8000648 <__aeabi_dmul>
 8012280:	4b51      	ldr	r3, [pc, #324]	@ (80123c8 <__kernel_cos+0x178>)
 8012282:	2200      	movs	r2, #0
 8012284:	4604      	mov	r4, r0
 8012286:	460d      	mov	r5, r1
 8012288:	f7ee f9de 	bl	8000648 <__aeabi_dmul>
 801228c:	a340      	add	r3, pc, #256	@ (adr r3, 8012390 <__kernel_cos+0x140>)
 801228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012292:	4682      	mov	sl, r0
 8012294:	468b      	mov	fp, r1
 8012296:	4620      	mov	r0, r4
 8012298:	4629      	mov	r1, r5
 801229a:	f7ee f9d5 	bl	8000648 <__aeabi_dmul>
 801229e:	a33e      	add	r3, pc, #248	@ (adr r3, 8012398 <__kernel_cos+0x148>)
 80122a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a4:	f7ee f81a 	bl	80002dc <__adddf3>
 80122a8:	4622      	mov	r2, r4
 80122aa:	462b      	mov	r3, r5
 80122ac:	f7ee f9cc 	bl	8000648 <__aeabi_dmul>
 80122b0:	a33b      	add	r3, pc, #236	@ (adr r3, 80123a0 <__kernel_cos+0x150>)
 80122b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b6:	f7ee f80f 	bl	80002d8 <__aeabi_dsub>
 80122ba:	4622      	mov	r2, r4
 80122bc:	462b      	mov	r3, r5
 80122be:	f7ee f9c3 	bl	8000648 <__aeabi_dmul>
 80122c2:	a339      	add	r3, pc, #228	@ (adr r3, 80123a8 <__kernel_cos+0x158>)
 80122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c8:	f7ee f808 	bl	80002dc <__adddf3>
 80122cc:	4622      	mov	r2, r4
 80122ce:	462b      	mov	r3, r5
 80122d0:	f7ee f9ba 	bl	8000648 <__aeabi_dmul>
 80122d4:	a336      	add	r3, pc, #216	@ (adr r3, 80123b0 <__kernel_cos+0x160>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	f7ed fffd 	bl	80002d8 <__aeabi_dsub>
 80122de:	4622      	mov	r2, r4
 80122e0:	462b      	mov	r3, r5
 80122e2:	f7ee f9b1 	bl	8000648 <__aeabi_dmul>
 80122e6:	a334      	add	r3, pc, #208	@ (adr r3, 80123b8 <__kernel_cos+0x168>)
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	f7ed fff6 	bl	80002dc <__adddf3>
 80122f0:	4622      	mov	r2, r4
 80122f2:	462b      	mov	r3, r5
 80122f4:	f7ee f9a8 	bl	8000648 <__aeabi_dmul>
 80122f8:	4622      	mov	r2, r4
 80122fa:	462b      	mov	r3, r5
 80122fc:	f7ee f9a4 	bl	8000648 <__aeabi_dmul>
 8012300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012304:	4604      	mov	r4, r0
 8012306:	460d      	mov	r5, r1
 8012308:	4630      	mov	r0, r6
 801230a:	4639      	mov	r1, r7
 801230c:	f7ee f99c 	bl	8000648 <__aeabi_dmul>
 8012310:	460b      	mov	r3, r1
 8012312:	4602      	mov	r2, r0
 8012314:	4629      	mov	r1, r5
 8012316:	4620      	mov	r0, r4
 8012318:	f7ed ffde 	bl	80002d8 <__aeabi_dsub>
 801231c:	4b2b      	ldr	r3, [pc, #172]	@ (80123cc <__kernel_cos+0x17c>)
 801231e:	4598      	cmp	r8, r3
 8012320:	4606      	mov	r6, r0
 8012322:	460f      	mov	r7, r1
 8012324:	d810      	bhi.n	8012348 <__kernel_cos+0xf8>
 8012326:	4602      	mov	r2, r0
 8012328:	460b      	mov	r3, r1
 801232a:	4650      	mov	r0, sl
 801232c:	4659      	mov	r1, fp
 801232e:	f7ed ffd3 	bl	80002d8 <__aeabi_dsub>
 8012332:	460b      	mov	r3, r1
 8012334:	4926      	ldr	r1, [pc, #152]	@ (80123d0 <__kernel_cos+0x180>)
 8012336:	4602      	mov	r2, r0
 8012338:	2000      	movs	r0, #0
 801233a:	f7ed ffcd 	bl	80002d8 <__aeabi_dsub>
 801233e:	ec41 0b10 	vmov	d0, r0, r1
 8012342:	b003      	add	sp, #12
 8012344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012348:	4b22      	ldr	r3, [pc, #136]	@ (80123d4 <__kernel_cos+0x184>)
 801234a:	4921      	ldr	r1, [pc, #132]	@ (80123d0 <__kernel_cos+0x180>)
 801234c:	4598      	cmp	r8, r3
 801234e:	bf8c      	ite	hi
 8012350:	4d21      	ldrhi	r5, [pc, #132]	@ (80123d8 <__kernel_cos+0x188>)
 8012352:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012356:	2400      	movs	r4, #0
 8012358:	4622      	mov	r2, r4
 801235a:	462b      	mov	r3, r5
 801235c:	2000      	movs	r0, #0
 801235e:	f7ed ffbb 	bl	80002d8 <__aeabi_dsub>
 8012362:	4622      	mov	r2, r4
 8012364:	4680      	mov	r8, r0
 8012366:	4689      	mov	r9, r1
 8012368:	462b      	mov	r3, r5
 801236a:	4650      	mov	r0, sl
 801236c:	4659      	mov	r1, fp
 801236e:	f7ed ffb3 	bl	80002d8 <__aeabi_dsub>
 8012372:	4632      	mov	r2, r6
 8012374:	463b      	mov	r3, r7
 8012376:	f7ed ffaf 	bl	80002d8 <__aeabi_dsub>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4640      	mov	r0, r8
 8012380:	4649      	mov	r1, r9
 8012382:	e7da      	b.n	801233a <__kernel_cos+0xea>
 8012384:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80123c0 <__kernel_cos+0x170>
 8012388:	e7db      	b.n	8012342 <__kernel_cos+0xf2>
 801238a:	bf00      	nop
 801238c:	f3af 8000 	nop.w
 8012390:	be8838d4 	.word	0xbe8838d4
 8012394:	bda8fae9 	.word	0xbda8fae9
 8012398:	bdb4b1c4 	.word	0xbdb4b1c4
 801239c:	3e21ee9e 	.word	0x3e21ee9e
 80123a0:	809c52ad 	.word	0x809c52ad
 80123a4:	3e927e4f 	.word	0x3e927e4f
 80123a8:	19cb1590 	.word	0x19cb1590
 80123ac:	3efa01a0 	.word	0x3efa01a0
 80123b0:	16c15177 	.word	0x16c15177
 80123b4:	3f56c16c 	.word	0x3f56c16c
 80123b8:	5555554c 	.word	0x5555554c
 80123bc:	3fa55555 	.word	0x3fa55555
 80123c0:	00000000 	.word	0x00000000
 80123c4:	3ff00000 	.word	0x3ff00000
 80123c8:	3fe00000 	.word	0x3fe00000
 80123cc:	3fd33332 	.word	0x3fd33332
 80123d0:	3ff00000 	.word	0x3ff00000
 80123d4:	3fe90000 	.word	0x3fe90000
 80123d8:	3fd20000 	.word	0x3fd20000
 80123dc:	00000000 	.word	0x00000000

080123e0 <__kernel_sin>:
 80123e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123e4:	ec55 4b10 	vmov	r4, r5, d0
 80123e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80123ec:	b085      	sub	sp, #20
 80123ee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80123f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80123f6:	4680      	mov	r8, r0
 80123f8:	d205      	bcs.n	8012406 <__kernel_sin+0x26>
 80123fa:	4620      	mov	r0, r4
 80123fc:	4629      	mov	r1, r5
 80123fe:	f7ee fbd3 	bl	8000ba8 <__aeabi_d2iz>
 8012402:	2800      	cmp	r0, #0
 8012404:	d052      	beq.n	80124ac <__kernel_sin+0xcc>
 8012406:	4622      	mov	r2, r4
 8012408:	462b      	mov	r3, r5
 801240a:	4620      	mov	r0, r4
 801240c:	4629      	mov	r1, r5
 801240e:	f7ee f91b 	bl	8000648 <__aeabi_dmul>
 8012412:	4682      	mov	sl, r0
 8012414:	468b      	mov	fp, r1
 8012416:	4602      	mov	r2, r0
 8012418:	460b      	mov	r3, r1
 801241a:	4620      	mov	r0, r4
 801241c:	4629      	mov	r1, r5
 801241e:	f7ee f913 	bl	8000648 <__aeabi_dmul>
 8012422:	a342      	add	r3, pc, #264	@ (adr r3, 801252c <__kernel_sin+0x14c>)
 8012424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012428:	e9cd 0100 	strd	r0, r1, [sp]
 801242c:	4650      	mov	r0, sl
 801242e:	4659      	mov	r1, fp
 8012430:	f7ee f90a 	bl	8000648 <__aeabi_dmul>
 8012434:	a33f      	add	r3, pc, #252	@ (adr r3, 8012534 <__kernel_sin+0x154>)
 8012436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243a:	f7ed ff4d 	bl	80002d8 <__aeabi_dsub>
 801243e:	4652      	mov	r2, sl
 8012440:	465b      	mov	r3, fp
 8012442:	f7ee f901 	bl	8000648 <__aeabi_dmul>
 8012446:	a33d      	add	r3, pc, #244	@ (adr r3, 801253c <__kernel_sin+0x15c>)
 8012448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244c:	f7ed ff46 	bl	80002dc <__adddf3>
 8012450:	4652      	mov	r2, sl
 8012452:	465b      	mov	r3, fp
 8012454:	f7ee f8f8 	bl	8000648 <__aeabi_dmul>
 8012458:	a33a      	add	r3, pc, #232	@ (adr r3, 8012544 <__kernel_sin+0x164>)
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	f7ed ff3b 	bl	80002d8 <__aeabi_dsub>
 8012462:	4652      	mov	r2, sl
 8012464:	465b      	mov	r3, fp
 8012466:	f7ee f8ef 	bl	8000648 <__aeabi_dmul>
 801246a:	a338      	add	r3, pc, #224	@ (adr r3, 801254c <__kernel_sin+0x16c>)
 801246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012470:	f7ed ff34 	bl	80002dc <__adddf3>
 8012474:	4606      	mov	r6, r0
 8012476:	460f      	mov	r7, r1
 8012478:	f1b8 0f00 	cmp.w	r8, #0
 801247c:	d11b      	bne.n	80124b6 <__kernel_sin+0xd6>
 801247e:	4602      	mov	r2, r0
 8012480:	460b      	mov	r3, r1
 8012482:	4650      	mov	r0, sl
 8012484:	4659      	mov	r1, fp
 8012486:	f7ee f8df 	bl	8000648 <__aeabi_dmul>
 801248a:	a325      	add	r3, pc, #148	@ (adr r3, 8012520 <__kernel_sin+0x140>)
 801248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012490:	f7ed ff22 	bl	80002d8 <__aeabi_dsub>
 8012494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012498:	f7ee f8d6 	bl	8000648 <__aeabi_dmul>
 801249c:	4602      	mov	r2, r0
 801249e:	460b      	mov	r3, r1
 80124a0:	4620      	mov	r0, r4
 80124a2:	4629      	mov	r1, r5
 80124a4:	f7ed ff1a 	bl	80002dc <__adddf3>
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	ec45 4b10 	vmov	d0, r4, r5
 80124b0:	b005      	add	sp, #20
 80124b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124ba:	4b1b      	ldr	r3, [pc, #108]	@ (8012528 <__kernel_sin+0x148>)
 80124bc:	2200      	movs	r2, #0
 80124be:	f7ee f8c3 	bl	8000648 <__aeabi_dmul>
 80124c2:	4632      	mov	r2, r6
 80124c4:	4680      	mov	r8, r0
 80124c6:	4689      	mov	r9, r1
 80124c8:	463b      	mov	r3, r7
 80124ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124ce:	f7ee f8bb 	bl	8000648 <__aeabi_dmul>
 80124d2:	4602      	mov	r2, r0
 80124d4:	460b      	mov	r3, r1
 80124d6:	4640      	mov	r0, r8
 80124d8:	4649      	mov	r1, r9
 80124da:	f7ed fefd 	bl	80002d8 <__aeabi_dsub>
 80124de:	4652      	mov	r2, sl
 80124e0:	465b      	mov	r3, fp
 80124e2:	f7ee f8b1 	bl	8000648 <__aeabi_dmul>
 80124e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124ea:	f7ed fef5 	bl	80002d8 <__aeabi_dsub>
 80124ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8012520 <__kernel_sin+0x140>)
 80124f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f4:	4606      	mov	r6, r0
 80124f6:	460f      	mov	r7, r1
 80124f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124fc:	f7ee f8a4 	bl	8000648 <__aeabi_dmul>
 8012500:	4602      	mov	r2, r0
 8012502:	460b      	mov	r3, r1
 8012504:	4630      	mov	r0, r6
 8012506:	4639      	mov	r1, r7
 8012508:	f7ed fee8 	bl	80002dc <__adddf3>
 801250c:	4602      	mov	r2, r0
 801250e:	460b      	mov	r3, r1
 8012510:	4620      	mov	r0, r4
 8012512:	4629      	mov	r1, r5
 8012514:	f7ed fee0 	bl	80002d8 <__aeabi_dsub>
 8012518:	e7c6      	b.n	80124a8 <__kernel_sin+0xc8>
 801251a:	bf00      	nop
 801251c:	f3af 8000 	nop.w
 8012520:	55555549 	.word	0x55555549
 8012524:	3fc55555 	.word	0x3fc55555
 8012528:	3fe00000 	.word	0x3fe00000
 801252c:	5acfd57c 	.word	0x5acfd57c
 8012530:	3de5d93a 	.word	0x3de5d93a
 8012534:	8a2b9ceb 	.word	0x8a2b9ceb
 8012538:	3e5ae5e6 	.word	0x3e5ae5e6
 801253c:	57b1fe7d 	.word	0x57b1fe7d
 8012540:	3ec71de3 	.word	0x3ec71de3
 8012544:	19c161d5 	.word	0x19c161d5
 8012548:	3f2a01a0 	.word	0x3f2a01a0
 801254c:	1110f8a6 	.word	0x1110f8a6
 8012550:	3f811111 	.word	0x3f811111
 8012554:	00000000 	.word	0x00000000

08012558 <__ieee754_rem_pio2>:
 8012558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255c:	ec57 6b10 	vmov	r6, r7, d0
 8012560:	4bc5      	ldr	r3, [pc, #788]	@ (8012878 <__ieee754_rem_pio2+0x320>)
 8012562:	b08d      	sub	sp, #52	@ 0x34
 8012564:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012568:	4598      	cmp	r8, r3
 801256a:	4604      	mov	r4, r0
 801256c:	9704      	str	r7, [sp, #16]
 801256e:	d807      	bhi.n	8012580 <__ieee754_rem_pio2+0x28>
 8012570:	2200      	movs	r2, #0
 8012572:	2300      	movs	r3, #0
 8012574:	ed80 0b00 	vstr	d0, [r0]
 8012578:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801257c:	2500      	movs	r5, #0
 801257e:	e028      	b.n	80125d2 <__ieee754_rem_pio2+0x7a>
 8012580:	4bbe      	ldr	r3, [pc, #760]	@ (801287c <__ieee754_rem_pio2+0x324>)
 8012582:	4598      	cmp	r8, r3
 8012584:	d878      	bhi.n	8012678 <__ieee754_rem_pio2+0x120>
 8012586:	9b04      	ldr	r3, [sp, #16]
 8012588:	4dbd      	ldr	r5, [pc, #756]	@ (8012880 <__ieee754_rem_pio2+0x328>)
 801258a:	2b00      	cmp	r3, #0
 801258c:	4630      	mov	r0, r6
 801258e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012840 <__ieee754_rem_pio2+0x2e8>)
 8012590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012594:	4639      	mov	r1, r7
 8012596:	dd38      	ble.n	801260a <__ieee754_rem_pio2+0xb2>
 8012598:	f7ed fe9e 	bl	80002d8 <__aeabi_dsub>
 801259c:	45a8      	cmp	r8, r5
 801259e:	4606      	mov	r6, r0
 80125a0:	460f      	mov	r7, r1
 80125a2:	d01a      	beq.n	80125da <__ieee754_rem_pio2+0x82>
 80125a4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012848 <__ieee754_rem_pio2+0x2f0>)
 80125a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125aa:	f7ed fe95 	bl	80002d8 <__aeabi_dsub>
 80125ae:	4602      	mov	r2, r0
 80125b0:	460b      	mov	r3, r1
 80125b2:	4680      	mov	r8, r0
 80125b4:	4689      	mov	r9, r1
 80125b6:	4630      	mov	r0, r6
 80125b8:	4639      	mov	r1, r7
 80125ba:	f7ed fe8d 	bl	80002d8 <__aeabi_dsub>
 80125be:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012848 <__ieee754_rem_pio2+0x2f0>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	f7ed fe88 	bl	80002d8 <__aeabi_dsub>
 80125c8:	e9c4 8900 	strd	r8, r9, [r4]
 80125cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80125d0:	2501      	movs	r5, #1
 80125d2:	4628      	mov	r0, r5
 80125d4:	b00d      	add	sp, #52	@ 0x34
 80125d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125da:	a39d      	add	r3, pc, #628	@ (adr r3, 8012850 <__ieee754_rem_pio2+0x2f8>)
 80125dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e0:	f7ed fe7a 	bl	80002d8 <__aeabi_dsub>
 80125e4:	a39c      	add	r3, pc, #624	@ (adr r3, 8012858 <__ieee754_rem_pio2+0x300>)
 80125e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ea:	4606      	mov	r6, r0
 80125ec:	460f      	mov	r7, r1
 80125ee:	f7ed fe73 	bl	80002d8 <__aeabi_dsub>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	4680      	mov	r8, r0
 80125f8:	4689      	mov	r9, r1
 80125fa:	4630      	mov	r0, r6
 80125fc:	4639      	mov	r1, r7
 80125fe:	f7ed fe6b 	bl	80002d8 <__aeabi_dsub>
 8012602:	a395      	add	r3, pc, #596	@ (adr r3, 8012858 <__ieee754_rem_pio2+0x300>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	e7dc      	b.n	80125c4 <__ieee754_rem_pio2+0x6c>
 801260a:	f7ed fe67 	bl	80002dc <__adddf3>
 801260e:	45a8      	cmp	r8, r5
 8012610:	4606      	mov	r6, r0
 8012612:	460f      	mov	r7, r1
 8012614:	d018      	beq.n	8012648 <__ieee754_rem_pio2+0xf0>
 8012616:	a38c      	add	r3, pc, #560	@ (adr r3, 8012848 <__ieee754_rem_pio2+0x2f0>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	f7ed fe5e 	bl	80002dc <__adddf3>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	4680      	mov	r8, r0
 8012626:	4689      	mov	r9, r1
 8012628:	4630      	mov	r0, r6
 801262a:	4639      	mov	r1, r7
 801262c:	f7ed fe54 	bl	80002d8 <__aeabi_dsub>
 8012630:	a385      	add	r3, pc, #532	@ (adr r3, 8012848 <__ieee754_rem_pio2+0x2f0>)
 8012632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012636:	f7ed fe51 	bl	80002dc <__adddf3>
 801263a:	f04f 35ff 	mov.w	r5, #4294967295
 801263e:	e9c4 8900 	strd	r8, r9, [r4]
 8012642:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012646:	e7c4      	b.n	80125d2 <__ieee754_rem_pio2+0x7a>
 8012648:	a381      	add	r3, pc, #516	@ (adr r3, 8012850 <__ieee754_rem_pio2+0x2f8>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	f7ed fe45 	bl	80002dc <__adddf3>
 8012652:	a381      	add	r3, pc, #516	@ (adr r3, 8012858 <__ieee754_rem_pio2+0x300>)
 8012654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012658:	4606      	mov	r6, r0
 801265a:	460f      	mov	r7, r1
 801265c:	f7ed fe3e 	bl	80002dc <__adddf3>
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	4680      	mov	r8, r0
 8012666:	4689      	mov	r9, r1
 8012668:	4630      	mov	r0, r6
 801266a:	4639      	mov	r1, r7
 801266c:	f7ed fe34 	bl	80002d8 <__aeabi_dsub>
 8012670:	a379      	add	r3, pc, #484	@ (adr r3, 8012858 <__ieee754_rem_pio2+0x300>)
 8012672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012676:	e7de      	b.n	8012636 <__ieee754_rem_pio2+0xde>
 8012678:	4b82      	ldr	r3, [pc, #520]	@ (8012884 <__ieee754_rem_pio2+0x32c>)
 801267a:	4598      	cmp	r8, r3
 801267c:	f200 80d1 	bhi.w	8012822 <__ieee754_rem_pio2+0x2ca>
 8012680:	f000 f966 	bl	8012950 <fabs>
 8012684:	ec57 6b10 	vmov	r6, r7, d0
 8012688:	a375      	add	r3, pc, #468	@ (adr r3, 8012860 <__ieee754_rem_pio2+0x308>)
 801268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268e:	4630      	mov	r0, r6
 8012690:	4639      	mov	r1, r7
 8012692:	f7ed ffd9 	bl	8000648 <__aeabi_dmul>
 8012696:	4b7c      	ldr	r3, [pc, #496]	@ (8012888 <__ieee754_rem_pio2+0x330>)
 8012698:	2200      	movs	r2, #0
 801269a:	f7ed fe1f 	bl	80002dc <__adddf3>
 801269e:	f7ee fa83 	bl	8000ba8 <__aeabi_d2iz>
 80126a2:	4605      	mov	r5, r0
 80126a4:	f7ed ff66 	bl	8000574 <__aeabi_i2d>
 80126a8:	4602      	mov	r2, r0
 80126aa:	460b      	mov	r3, r1
 80126ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126b0:	a363      	add	r3, pc, #396	@ (adr r3, 8012840 <__ieee754_rem_pio2+0x2e8>)
 80126b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b6:	f7ed ffc7 	bl	8000648 <__aeabi_dmul>
 80126ba:	4602      	mov	r2, r0
 80126bc:	460b      	mov	r3, r1
 80126be:	4630      	mov	r0, r6
 80126c0:	4639      	mov	r1, r7
 80126c2:	f7ed fe09 	bl	80002d8 <__aeabi_dsub>
 80126c6:	a360      	add	r3, pc, #384	@ (adr r3, 8012848 <__ieee754_rem_pio2+0x2f0>)
 80126c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126cc:	4682      	mov	sl, r0
 80126ce:	468b      	mov	fp, r1
 80126d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126d4:	f7ed ffb8 	bl	8000648 <__aeabi_dmul>
 80126d8:	2d1f      	cmp	r5, #31
 80126da:	4606      	mov	r6, r0
 80126dc:	460f      	mov	r7, r1
 80126de:	dc0c      	bgt.n	80126fa <__ieee754_rem_pio2+0x1a2>
 80126e0:	4b6a      	ldr	r3, [pc, #424]	@ (801288c <__ieee754_rem_pio2+0x334>)
 80126e2:	1e6a      	subs	r2, r5, #1
 80126e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126e8:	4543      	cmp	r3, r8
 80126ea:	d006      	beq.n	80126fa <__ieee754_rem_pio2+0x1a2>
 80126ec:	4632      	mov	r2, r6
 80126ee:	463b      	mov	r3, r7
 80126f0:	4650      	mov	r0, sl
 80126f2:	4659      	mov	r1, fp
 80126f4:	f7ed fdf0 	bl	80002d8 <__aeabi_dsub>
 80126f8:	e00e      	b.n	8012718 <__ieee754_rem_pio2+0x1c0>
 80126fa:	463b      	mov	r3, r7
 80126fc:	4632      	mov	r2, r6
 80126fe:	4650      	mov	r0, sl
 8012700:	4659      	mov	r1, fp
 8012702:	f7ed fde9 	bl	80002d8 <__aeabi_dsub>
 8012706:	ea4f 5328 	mov.w	r3, r8, asr #20
 801270a:	9305      	str	r3, [sp, #20]
 801270c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012710:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012714:	2b10      	cmp	r3, #16
 8012716:	dc02      	bgt.n	801271e <__ieee754_rem_pio2+0x1c6>
 8012718:	e9c4 0100 	strd	r0, r1, [r4]
 801271c:	e039      	b.n	8012792 <__ieee754_rem_pio2+0x23a>
 801271e:	a34c      	add	r3, pc, #304	@ (adr r3, 8012850 <__ieee754_rem_pio2+0x2f8>)
 8012720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012728:	f7ed ff8e 	bl	8000648 <__aeabi_dmul>
 801272c:	4606      	mov	r6, r0
 801272e:	460f      	mov	r7, r1
 8012730:	4602      	mov	r2, r0
 8012732:	460b      	mov	r3, r1
 8012734:	4650      	mov	r0, sl
 8012736:	4659      	mov	r1, fp
 8012738:	f7ed fdce 	bl	80002d8 <__aeabi_dsub>
 801273c:	4602      	mov	r2, r0
 801273e:	460b      	mov	r3, r1
 8012740:	4680      	mov	r8, r0
 8012742:	4689      	mov	r9, r1
 8012744:	4650      	mov	r0, sl
 8012746:	4659      	mov	r1, fp
 8012748:	f7ed fdc6 	bl	80002d8 <__aeabi_dsub>
 801274c:	4632      	mov	r2, r6
 801274e:	463b      	mov	r3, r7
 8012750:	f7ed fdc2 	bl	80002d8 <__aeabi_dsub>
 8012754:	a340      	add	r3, pc, #256	@ (adr r3, 8012858 <__ieee754_rem_pio2+0x300>)
 8012756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275a:	4606      	mov	r6, r0
 801275c:	460f      	mov	r7, r1
 801275e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012762:	f7ed ff71 	bl	8000648 <__aeabi_dmul>
 8012766:	4632      	mov	r2, r6
 8012768:	463b      	mov	r3, r7
 801276a:	f7ed fdb5 	bl	80002d8 <__aeabi_dsub>
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	4606      	mov	r6, r0
 8012774:	460f      	mov	r7, r1
 8012776:	4640      	mov	r0, r8
 8012778:	4649      	mov	r1, r9
 801277a:	f7ed fdad 	bl	80002d8 <__aeabi_dsub>
 801277e:	9a05      	ldr	r2, [sp, #20]
 8012780:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	2b31      	cmp	r3, #49	@ 0x31
 8012788:	dc20      	bgt.n	80127cc <__ieee754_rem_pio2+0x274>
 801278a:	e9c4 0100 	strd	r0, r1, [r4]
 801278e:	46c2      	mov	sl, r8
 8012790:	46cb      	mov	fp, r9
 8012792:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012796:	4650      	mov	r0, sl
 8012798:	4642      	mov	r2, r8
 801279a:	464b      	mov	r3, r9
 801279c:	4659      	mov	r1, fp
 801279e:	f7ed fd9b 	bl	80002d8 <__aeabi_dsub>
 80127a2:	463b      	mov	r3, r7
 80127a4:	4632      	mov	r2, r6
 80127a6:	f7ed fd97 	bl	80002d8 <__aeabi_dsub>
 80127aa:	9b04      	ldr	r3, [sp, #16]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80127b2:	f6bf af0e 	bge.w	80125d2 <__ieee754_rem_pio2+0x7a>
 80127b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80127ba:	6063      	str	r3, [r4, #4]
 80127bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80127c0:	f8c4 8000 	str.w	r8, [r4]
 80127c4:	60a0      	str	r0, [r4, #8]
 80127c6:	60e3      	str	r3, [r4, #12]
 80127c8:	426d      	negs	r5, r5
 80127ca:	e702      	b.n	80125d2 <__ieee754_rem_pio2+0x7a>
 80127cc:	a326      	add	r3, pc, #152	@ (adr r3, 8012868 <__ieee754_rem_pio2+0x310>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127d6:	f7ed ff37 	bl	8000648 <__aeabi_dmul>
 80127da:	4606      	mov	r6, r0
 80127dc:	460f      	mov	r7, r1
 80127de:	4602      	mov	r2, r0
 80127e0:	460b      	mov	r3, r1
 80127e2:	4640      	mov	r0, r8
 80127e4:	4649      	mov	r1, r9
 80127e6:	f7ed fd77 	bl	80002d8 <__aeabi_dsub>
 80127ea:	4602      	mov	r2, r0
 80127ec:	460b      	mov	r3, r1
 80127ee:	4682      	mov	sl, r0
 80127f0:	468b      	mov	fp, r1
 80127f2:	4640      	mov	r0, r8
 80127f4:	4649      	mov	r1, r9
 80127f6:	f7ed fd6f 	bl	80002d8 <__aeabi_dsub>
 80127fa:	4632      	mov	r2, r6
 80127fc:	463b      	mov	r3, r7
 80127fe:	f7ed fd6b 	bl	80002d8 <__aeabi_dsub>
 8012802:	a31b      	add	r3, pc, #108	@ (adr r3, 8012870 <__ieee754_rem_pio2+0x318>)
 8012804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012808:	4606      	mov	r6, r0
 801280a:	460f      	mov	r7, r1
 801280c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012810:	f7ed ff1a 	bl	8000648 <__aeabi_dmul>
 8012814:	4632      	mov	r2, r6
 8012816:	463b      	mov	r3, r7
 8012818:	f7ed fd5e 	bl	80002d8 <__aeabi_dsub>
 801281c:	4606      	mov	r6, r0
 801281e:	460f      	mov	r7, r1
 8012820:	e764      	b.n	80126ec <__ieee754_rem_pio2+0x194>
 8012822:	4b1b      	ldr	r3, [pc, #108]	@ (8012890 <__ieee754_rem_pio2+0x338>)
 8012824:	4598      	cmp	r8, r3
 8012826:	d935      	bls.n	8012894 <__ieee754_rem_pio2+0x33c>
 8012828:	4632      	mov	r2, r6
 801282a:	463b      	mov	r3, r7
 801282c:	4630      	mov	r0, r6
 801282e:	4639      	mov	r1, r7
 8012830:	f7ed fd52 	bl	80002d8 <__aeabi_dsub>
 8012834:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012838:	e9c4 0100 	strd	r0, r1, [r4]
 801283c:	e69e      	b.n	801257c <__ieee754_rem_pio2+0x24>
 801283e:	bf00      	nop
 8012840:	54400000 	.word	0x54400000
 8012844:	3ff921fb 	.word	0x3ff921fb
 8012848:	1a626331 	.word	0x1a626331
 801284c:	3dd0b461 	.word	0x3dd0b461
 8012850:	1a600000 	.word	0x1a600000
 8012854:	3dd0b461 	.word	0x3dd0b461
 8012858:	2e037073 	.word	0x2e037073
 801285c:	3ba3198a 	.word	0x3ba3198a
 8012860:	6dc9c883 	.word	0x6dc9c883
 8012864:	3fe45f30 	.word	0x3fe45f30
 8012868:	2e000000 	.word	0x2e000000
 801286c:	3ba3198a 	.word	0x3ba3198a
 8012870:	252049c1 	.word	0x252049c1
 8012874:	397b839a 	.word	0x397b839a
 8012878:	3fe921fb 	.word	0x3fe921fb
 801287c:	4002d97b 	.word	0x4002d97b
 8012880:	3ff921fb 	.word	0x3ff921fb
 8012884:	413921fb 	.word	0x413921fb
 8012888:	3fe00000 	.word	0x3fe00000
 801288c:	08013728 	.word	0x08013728
 8012890:	7fefffff 	.word	0x7fefffff
 8012894:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012898:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801289c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80128a0:	4630      	mov	r0, r6
 80128a2:	460f      	mov	r7, r1
 80128a4:	f7ee f980 	bl	8000ba8 <__aeabi_d2iz>
 80128a8:	f7ed fe64 	bl	8000574 <__aeabi_i2d>
 80128ac:	4602      	mov	r2, r0
 80128ae:	460b      	mov	r3, r1
 80128b0:	4630      	mov	r0, r6
 80128b2:	4639      	mov	r1, r7
 80128b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80128b8:	f7ed fd0e 	bl	80002d8 <__aeabi_dsub>
 80128bc:	4b22      	ldr	r3, [pc, #136]	@ (8012948 <__ieee754_rem_pio2+0x3f0>)
 80128be:	2200      	movs	r2, #0
 80128c0:	f7ed fec2 	bl	8000648 <__aeabi_dmul>
 80128c4:	460f      	mov	r7, r1
 80128c6:	4606      	mov	r6, r0
 80128c8:	f7ee f96e 	bl	8000ba8 <__aeabi_d2iz>
 80128cc:	f7ed fe52 	bl	8000574 <__aeabi_i2d>
 80128d0:	4602      	mov	r2, r0
 80128d2:	460b      	mov	r3, r1
 80128d4:	4630      	mov	r0, r6
 80128d6:	4639      	mov	r1, r7
 80128d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80128dc:	f7ed fcfc 	bl	80002d8 <__aeabi_dsub>
 80128e0:	4b19      	ldr	r3, [pc, #100]	@ (8012948 <__ieee754_rem_pio2+0x3f0>)
 80128e2:	2200      	movs	r2, #0
 80128e4:	f7ed feb0 	bl	8000648 <__aeabi_dmul>
 80128e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80128ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80128f0:	f04f 0803 	mov.w	r8, #3
 80128f4:	2600      	movs	r6, #0
 80128f6:	2700      	movs	r7, #0
 80128f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80128fc:	4632      	mov	r2, r6
 80128fe:	463b      	mov	r3, r7
 8012900:	46c2      	mov	sl, r8
 8012902:	f108 38ff 	add.w	r8, r8, #4294967295
 8012906:	f7ee f907 	bl	8000b18 <__aeabi_dcmpeq>
 801290a:	2800      	cmp	r0, #0
 801290c:	d1f4      	bne.n	80128f8 <__ieee754_rem_pio2+0x3a0>
 801290e:	4b0f      	ldr	r3, [pc, #60]	@ (801294c <__ieee754_rem_pio2+0x3f4>)
 8012910:	9301      	str	r3, [sp, #4]
 8012912:	2302      	movs	r3, #2
 8012914:	9300      	str	r3, [sp, #0]
 8012916:	462a      	mov	r2, r5
 8012918:	4653      	mov	r3, sl
 801291a:	4621      	mov	r1, r4
 801291c:	a806      	add	r0, sp, #24
 801291e:	f000 f81f 	bl	8012960 <__kernel_rem_pio2>
 8012922:	9b04      	ldr	r3, [sp, #16]
 8012924:	2b00      	cmp	r3, #0
 8012926:	4605      	mov	r5, r0
 8012928:	f6bf ae53 	bge.w	80125d2 <__ieee754_rem_pio2+0x7a>
 801292c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012930:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012934:	e9c4 2300 	strd	r2, r3, [r4]
 8012938:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801293c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012940:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012944:	e740      	b.n	80127c8 <__ieee754_rem_pio2+0x270>
 8012946:	bf00      	nop
 8012948:	41700000 	.word	0x41700000
 801294c:	080137a8 	.word	0x080137a8

08012950 <fabs>:
 8012950:	ec51 0b10 	vmov	r0, r1, d0
 8012954:	4602      	mov	r2, r0
 8012956:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801295a:	ec43 2b10 	vmov	d0, r2, r3
 801295e:	4770      	bx	lr

08012960 <__kernel_rem_pio2>:
 8012960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012964:	ed2d 8b02 	vpush	{d8}
 8012968:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801296c:	f112 0f14 	cmn.w	r2, #20
 8012970:	9306      	str	r3, [sp, #24]
 8012972:	9104      	str	r1, [sp, #16]
 8012974:	4bbe      	ldr	r3, [pc, #760]	@ (8012c70 <__kernel_rem_pio2+0x310>)
 8012976:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012978:	9008      	str	r0, [sp, #32]
 801297a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	9b06      	ldr	r3, [sp, #24]
 8012982:	f103 33ff 	add.w	r3, r3, #4294967295
 8012986:	bfa8      	it	ge
 8012988:	1ed4      	subge	r4, r2, #3
 801298a:	9305      	str	r3, [sp, #20]
 801298c:	bfb2      	itee	lt
 801298e:	2400      	movlt	r4, #0
 8012990:	2318      	movge	r3, #24
 8012992:	fb94 f4f3 	sdivge	r4, r4, r3
 8012996:	f06f 0317 	mvn.w	r3, #23
 801299a:	fb04 3303 	mla	r3, r4, r3, r3
 801299e:	eb03 0b02 	add.w	fp, r3, r2
 80129a2:	9b00      	ldr	r3, [sp, #0]
 80129a4:	9a05      	ldr	r2, [sp, #20]
 80129a6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8012c60 <__kernel_rem_pio2+0x300>
 80129aa:	eb03 0802 	add.w	r8, r3, r2
 80129ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80129b0:	1aa7      	subs	r7, r4, r2
 80129b2:	ae20      	add	r6, sp, #128	@ 0x80
 80129b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80129b8:	2500      	movs	r5, #0
 80129ba:	4545      	cmp	r5, r8
 80129bc:	dd13      	ble.n	80129e6 <__kernel_rem_pio2+0x86>
 80129be:	9b06      	ldr	r3, [sp, #24]
 80129c0:	aa20      	add	r2, sp, #128	@ 0x80
 80129c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80129c6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80129ca:	f04f 0800 	mov.w	r8, #0
 80129ce:	9b00      	ldr	r3, [sp, #0]
 80129d0:	4598      	cmp	r8, r3
 80129d2:	dc31      	bgt.n	8012a38 <__kernel_rem_pio2+0xd8>
 80129d4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8012c60 <__kernel_rem_pio2+0x300>
 80129d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80129dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129e0:	462f      	mov	r7, r5
 80129e2:	2600      	movs	r6, #0
 80129e4:	e01b      	b.n	8012a1e <__kernel_rem_pio2+0xbe>
 80129e6:	42ef      	cmn	r7, r5
 80129e8:	d407      	bmi.n	80129fa <__kernel_rem_pio2+0x9a>
 80129ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80129ee:	f7ed fdc1 	bl	8000574 <__aeabi_i2d>
 80129f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80129f6:	3501      	adds	r5, #1
 80129f8:	e7df      	b.n	80129ba <__kernel_rem_pio2+0x5a>
 80129fa:	ec51 0b18 	vmov	r0, r1, d8
 80129fe:	e7f8      	b.n	80129f2 <__kernel_rem_pio2+0x92>
 8012a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012a08:	f7ed fe1e 	bl	8000648 <__aeabi_dmul>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	460b      	mov	r3, r1
 8012a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a14:	f7ed fc62 	bl	80002dc <__adddf3>
 8012a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a1c:	3601      	adds	r6, #1
 8012a1e:	9b05      	ldr	r3, [sp, #20]
 8012a20:	429e      	cmp	r6, r3
 8012a22:	f1a7 0708 	sub.w	r7, r7, #8
 8012a26:	ddeb      	ble.n	8012a00 <__kernel_rem_pio2+0xa0>
 8012a28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a2c:	f108 0801 	add.w	r8, r8, #1
 8012a30:	ecaa 7b02 	vstmia	sl!, {d7}
 8012a34:	3508      	adds	r5, #8
 8012a36:	e7ca      	b.n	80129ce <__kernel_rem_pio2+0x6e>
 8012a38:	9b00      	ldr	r3, [sp, #0]
 8012a3a:	f8dd 8000 	ldr.w	r8, [sp]
 8012a3e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012a40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a44:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012a48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012a52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a54:	ab98      	add	r3, sp, #608	@ 0x260
 8012a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012a5a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012a5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a62:	ac0c      	add	r4, sp, #48	@ 0x30
 8012a64:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012a66:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012a6a:	46a1      	mov	r9, r4
 8012a6c:	46c2      	mov	sl, r8
 8012a6e:	f1ba 0f00 	cmp.w	sl, #0
 8012a72:	f1a5 0508 	sub.w	r5, r5, #8
 8012a76:	dc77      	bgt.n	8012b68 <__kernel_rem_pio2+0x208>
 8012a78:	4658      	mov	r0, fp
 8012a7a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012a7e:	f000 fac7 	bl	8013010 <scalbn>
 8012a82:	ec57 6b10 	vmov	r6, r7, d0
 8012a86:	2200      	movs	r2, #0
 8012a88:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012a8c:	4630      	mov	r0, r6
 8012a8e:	4639      	mov	r1, r7
 8012a90:	f7ed fdda 	bl	8000648 <__aeabi_dmul>
 8012a94:	ec41 0b10 	vmov	d0, r0, r1
 8012a98:	f000 fb3a 	bl	8013110 <floor>
 8012a9c:	4b75      	ldr	r3, [pc, #468]	@ (8012c74 <__kernel_rem_pio2+0x314>)
 8012a9e:	ec51 0b10 	vmov	r0, r1, d0
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f7ed fdd0 	bl	8000648 <__aeabi_dmul>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4630      	mov	r0, r6
 8012aae:	4639      	mov	r1, r7
 8012ab0:	f7ed fc12 	bl	80002d8 <__aeabi_dsub>
 8012ab4:	460f      	mov	r7, r1
 8012ab6:	4606      	mov	r6, r0
 8012ab8:	f7ee f876 	bl	8000ba8 <__aeabi_d2iz>
 8012abc:	9002      	str	r0, [sp, #8]
 8012abe:	f7ed fd59 	bl	8000574 <__aeabi_i2d>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	4639      	mov	r1, r7
 8012aca:	f7ed fc05 	bl	80002d8 <__aeabi_dsub>
 8012ace:	f1bb 0f00 	cmp.w	fp, #0
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	460f      	mov	r7, r1
 8012ad6:	dd6c      	ble.n	8012bb2 <__kernel_rem_pio2+0x252>
 8012ad8:	f108 31ff 	add.w	r1, r8, #4294967295
 8012adc:	ab0c      	add	r3, sp, #48	@ 0x30
 8012ade:	9d02      	ldr	r5, [sp, #8]
 8012ae0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ae4:	f1cb 0018 	rsb	r0, fp, #24
 8012ae8:	fa43 f200 	asr.w	r2, r3, r0
 8012aec:	4415      	add	r5, r2
 8012aee:	4082      	lsls	r2, r0
 8012af0:	1a9b      	subs	r3, r3, r2
 8012af2:	aa0c      	add	r2, sp, #48	@ 0x30
 8012af4:	9502      	str	r5, [sp, #8]
 8012af6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012afa:	f1cb 0217 	rsb	r2, fp, #23
 8012afe:	fa43 f902 	asr.w	r9, r3, r2
 8012b02:	f1b9 0f00 	cmp.w	r9, #0
 8012b06:	dd64      	ble.n	8012bd2 <__kernel_rem_pio2+0x272>
 8012b08:	9b02      	ldr	r3, [sp, #8]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	9302      	str	r3, [sp, #8]
 8012b10:	4615      	mov	r5, r2
 8012b12:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012b16:	4590      	cmp	r8, r2
 8012b18:	f300 80b8 	bgt.w	8012c8c <__kernel_rem_pio2+0x32c>
 8012b1c:	f1bb 0f00 	cmp.w	fp, #0
 8012b20:	dd07      	ble.n	8012b32 <__kernel_rem_pio2+0x1d2>
 8012b22:	f1bb 0f01 	cmp.w	fp, #1
 8012b26:	f000 80bf 	beq.w	8012ca8 <__kernel_rem_pio2+0x348>
 8012b2a:	f1bb 0f02 	cmp.w	fp, #2
 8012b2e:	f000 80c6 	beq.w	8012cbe <__kernel_rem_pio2+0x35e>
 8012b32:	f1b9 0f02 	cmp.w	r9, #2
 8012b36:	d14c      	bne.n	8012bd2 <__kernel_rem_pio2+0x272>
 8012b38:	4632      	mov	r2, r6
 8012b3a:	463b      	mov	r3, r7
 8012b3c:	494e      	ldr	r1, [pc, #312]	@ (8012c78 <__kernel_rem_pio2+0x318>)
 8012b3e:	2000      	movs	r0, #0
 8012b40:	f7ed fbca 	bl	80002d8 <__aeabi_dsub>
 8012b44:	4606      	mov	r6, r0
 8012b46:	460f      	mov	r7, r1
 8012b48:	2d00      	cmp	r5, #0
 8012b4a:	d042      	beq.n	8012bd2 <__kernel_rem_pio2+0x272>
 8012b4c:	4658      	mov	r0, fp
 8012b4e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8012c68 <__kernel_rem_pio2+0x308>
 8012b52:	f000 fa5d 	bl	8013010 <scalbn>
 8012b56:	4630      	mov	r0, r6
 8012b58:	4639      	mov	r1, r7
 8012b5a:	ec53 2b10 	vmov	r2, r3, d0
 8012b5e:	f7ed fbbb 	bl	80002d8 <__aeabi_dsub>
 8012b62:	4606      	mov	r6, r0
 8012b64:	460f      	mov	r7, r1
 8012b66:	e034      	b.n	8012bd2 <__kernel_rem_pio2+0x272>
 8012b68:	4b44      	ldr	r3, [pc, #272]	@ (8012c7c <__kernel_rem_pio2+0x31c>)
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b70:	f7ed fd6a 	bl	8000648 <__aeabi_dmul>
 8012b74:	f7ee f818 	bl	8000ba8 <__aeabi_d2iz>
 8012b78:	f7ed fcfc 	bl	8000574 <__aeabi_i2d>
 8012b7c:	4b40      	ldr	r3, [pc, #256]	@ (8012c80 <__kernel_rem_pio2+0x320>)
 8012b7e:	2200      	movs	r2, #0
 8012b80:	4606      	mov	r6, r0
 8012b82:	460f      	mov	r7, r1
 8012b84:	f7ed fd60 	bl	8000648 <__aeabi_dmul>
 8012b88:	4602      	mov	r2, r0
 8012b8a:	460b      	mov	r3, r1
 8012b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b90:	f7ed fba2 	bl	80002d8 <__aeabi_dsub>
 8012b94:	f7ee f808 	bl	8000ba8 <__aeabi_d2iz>
 8012b98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b9c:	f849 0b04 	str.w	r0, [r9], #4
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f7ed fb9a 	bl	80002dc <__adddf3>
 8012ba8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bb0:	e75d      	b.n	8012a6e <__kernel_rem_pio2+0x10e>
 8012bb2:	d107      	bne.n	8012bc4 <__kernel_rem_pio2+0x264>
 8012bb4:	f108 33ff 	add.w	r3, r8, #4294967295
 8012bb8:	aa0c      	add	r2, sp, #48	@ 0x30
 8012bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bbe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8012bc2:	e79e      	b.n	8012b02 <__kernel_rem_pio2+0x1a2>
 8012bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8012c84 <__kernel_rem_pio2+0x324>)
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	f7ed ffc4 	bl	8000b54 <__aeabi_dcmpge>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	d143      	bne.n	8012c58 <__kernel_rem_pio2+0x2f8>
 8012bd0:	4681      	mov	r9, r0
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	4639      	mov	r1, r7
 8012bda:	f7ed ff9d 	bl	8000b18 <__aeabi_dcmpeq>
 8012bde:	2800      	cmp	r0, #0
 8012be0:	f000 80bf 	beq.w	8012d62 <__kernel_rem_pio2+0x402>
 8012be4:	f108 33ff 	add.w	r3, r8, #4294967295
 8012be8:	2200      	movs	r2, #0
 8012bea:	9900      	ldr	r1, [sp, #0]
 8012bec:	428b      	cmp	r3, r1
 8012bee:	da6e      	bge.n	8012cce <__kernel_rem_pio2+0x36e>
 8012bf0:	2a00      	cmp	r2, #0
 8012bf2:	f000 8089 	beq.w	8012d08 <__kernel_rem_pio2+0x3a8>
 8012bf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8012bfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8012bfc:	f1ab 0b18 	sub.w	fp, fp, #24
 8012c00:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d0f6      	beq.n	8012bf6 <__kernel_rem_pio2+0x296>
 8012c08:	4658      	mov	r0, fp
 8012c0a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012c68 <__kernel_rem_pio2+0x308>
 8012c0e:	f000 f9ff 	bl	8013010 <scalbn>
 8012c12:	f108 0301 	add.w	r3, r8, #1
 8012c16:	00da      	lsls	r2, r3, #3
 8012c18:	9205      	str	r2, [sp, #20]
 8012c1a:	ec55 4b10 	vmov	r4, r5, d0
 8012c1e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012c20:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8012c7c <__kernel_rem_pio2+0x31c>
 8012c24:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012c28:	4646      	mov	r6, r8
 8012c2a:	f04f 0a00 	mov.w	sl, #0
 8012c2e:	2e00      	cmp	r6, #0
 8012c30:	f280 80cf 	bge.w	8012dd2 <__kernel_rem_pio2+0x472>
 8012c34:	4644      	mov	r4, r8
 8012c36:	2c00      	cmp	r4, #0
 8012c38:	f2c0 80fd 	blt.w	8012e36 <__kernel_rem_pio2+0x4d6>
 8012c3c:	4b12      	ldr	r3, [pc, #72]	@ (8012c88 <__kernel_rem_pio2+0x328>)
 8012c3e:	461f      	mov	r7, r3
 8012c40:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c46:	9306      	str	r3, [sp, #24]
 8012c48:	f04f 0a00 	mov.w	sl, #0
 8012c4c:	f04f 0b00 	mov.w	fp, #0
 8012c50:	2600      	movs	r6, #0
 8012c52:	eba8 0504 	sub.w	r5, r8, r4
 8012c56:	e0e2      	b.n	8012e1e <__kernel_rem_pio2+0x4be>
 8012c58:	f04f 0902 	mov.w	r9, #2
 8012c5c:	e754      	b.n	8012b08 <__kernel_rem_pio2+0x1a8>
 8012c5e:	bf00      	nop
	...
 8012c6c:	3ff00000 	.word	0x3ff00000
 8012c70:	080138f0 	.word	0x080138f0
 8012c74:	40200000 	.word	0x40200000
 8012c78:	3ff00000 	.word	0x3ff00000
 8012c7c:	3e700000 	.word	0x3e700000
 8012c80:	41700000 	.word	0x41700000
 8012c84:	3fe00000 	.word	0x3fe00000
 8012c88:	080138b0 	.word	0x080138b0
 8012c8c:	f854 3b04 	ldr.w	r3, [r4], #4
 8012c90:	b945      	cbnz	r5, 8012ca4 <__kernel_rem_pio2+0x344>
 8012c92:	b123      	cbz	r3, 8012c9e <__kernel_rem_pio2+0x33e>
 8012c94:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012c98:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	3201      	adds	r2, #1
 8012ca0:	461d      	mov	r5, r3
 8012ca2:	e738      	b.n	8012b16 <__kernel_rem_pio2+0x1b6>
 8012ca4:	1acb      	subs	r3, r1, r3
 8012ca6:	e7f7      	b.n	8012c98 <__kernel_rem_pio2+0x338>
 8012ca8:	f108 32ff 	add.w	r2, r8, #4294967295
 8012cac:	ab0c      	add	r3, sp, #48	@ 0x30
 8012cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012cb6:	a90c      	add	r1, sp, #48	@ 0x30
 8012cb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012cbc:	e739      	b.n	8012b32 <__kernel_rem_pio2+0x1d2>
 8012cbe:	f108 32ff 	add.w	r2, r8, #4294967295
 8012cc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8012cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012ccc:	e7f3      	b.n	8012cb6 <__kernel_rem_pio2+0x356>
 8012cce:	a90c      	add	r1, sp, #48	@ 0x30
 8012cd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	430a      	orrs	r2, r1
 8012cd8:	e787      	b.n	8012bea <__kernel_rem_pio2+0x28a>
 8012cda:	3401      	adds	r4, #1
 8012cdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012ce0:	2a00      	cmp	r2, #0
 8012ce2:	d0fa      	beq.n	8012cda <__kernel_rem_pio2+0x37a>
 8012ce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ce6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012cea:	eb0d 0503 	add.w	r5, sp, r3
 8012cee:	9b06      	ldr	r3, [sp, #24]
 8012cf0:	aa20      	add	r2, sp, #128	@ 0x80
 8012cf2:	4443      	add	r3, r8
 8012cf4:	f108 0701 	add.w	r7, r8, #1
 8012cf8:	3d98      	subs	r5, #152	@ 0x98
 8012cfa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012cfe:	4444      	add	r4, r8
 8012d00:	42bc      	cmp	r4, r7
 8012d02:	da04      	bge.n	8012d0e <__kernel_rem_pio2+0x3ae>
 8012d04:	46a0      	mov	r8, r4
 8012d06:	e6a2      	b.n	8012a4e <__kernel_rem_pio2+0xee>
 8012d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d0a:	2401      	movs	r4, #1
 8012d0c:	e7e6      	b.n	8012cdc <__kernel_rem_pio2+0x37c>
 8012d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d10:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012d14:	f7ed fc2e 	bl	8000574 <__aeabi_i2d>
 8012d18:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8012fe0 <__kernel_rem_pio2+0x680>
 8012d1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012d20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d28:	46b2      	mov	sl, r6
 8012d2a:	f04f 0800 	mov.w	r8, #0
 8012d2e:	9b05      	ldr	r3, [sp, #20]
 8012d30:	4598      	cmp	r8, r3
 8012d32:	dd05      	ble.n	8012d40 <__kernel_rem_pio2+0x3e0>
 8012d34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d38:	3701      	adds	r7, #1
 8012d3a:	eca5 7b02 	vstmia	r5!, {d7}
 8012d3e:	e7df      	b.n	8012d00 <__kernel_rem_pio2+0x3a0>
 8012d40:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012d44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012d48:	f7ed fc7e 	bl	8000648 <__aeabi_dmul>
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	460b      	mov	r3, r1
 8012d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d54:	f7ed fac2 	bl	80002dc <__adddf3>
 8012d58:	f108 0801 	add.w	r8, r8, #1
 8012d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d60:	e7e5      	b.n	8012d2e <__kernel_rem_pio2+0x3ce>
 8012d62:	f1cb 0000 	rsb	r0, fp, #0
 8012d66:	ec47 6b10 	vmov	d0, r6, r7
 8012d6a:	f000 f951 	bl	8013010 <scalbn>
 8012d6e:	ec55 4b10 	vmov	r4, r5, d0
 8012d72:	4b9d      	ldr	r3, [pc, #628]	@ (8012fe8 <__kernel_rem_pio2+0x688>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	4620      	mov	r0, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	f7ed feeb 	bl	8000b54 <__aeabi_dcmpge>
 8012d7e:	b300      	cbz	r0, 8012dc2 <__kernel_rem_pio2+0x462>
 8012d80:	4b9a      	ldr	r3, [pc, #616]	@ (8012fec <__kernel_rem_pio2+0x68c>)
 8012d82:	2200      	movs	r2, #0
 8012d84:	4620      	mov	r0, r4
 8012d86:	4629      	mov	r1, r5
 8012d88:	f7ed fc5e 	bl	8000648 <__aeabi_dmul>
 8012d8c:	f7ed ff0c 	bl	8000ba8 <__aeabi_d2iz>
 8012d90:	4606      	mov	r6, r0
 8012d92:	f7ed fbef 	bl	8000574 <__aeabi_i2d>
 8012d96:	4b94      	ldr	r3, [pc, #592]	@ (8012fe8 <__kernel_rem_pio2+0x688>)
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f7ed fc55 	bl	8000648 <__aeabi_dmul>
 8012d9e:	460b      	mov	r3, r1
 8012da0:	4602      	mov	r2, r0
 8012da2:	4629      	mov	r1, r5
 8012da4:	4620      	mov	r0, r4
 8012da6:	f7ed fa97 	bl	80002d8 <__aeabi_dsub>
 8012daa:	f7ed fefd 	bl	8000ba8 <__aeabi_d2iz>
 8012dae:	ab0c      	add	r3, sp, #48	@ 0x30
 8012db0:	f10b 0b18 	add.w	fp, fp, #24
 8012db4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012db8:	f108 0801 	add.w	r8, r8, #1
 8012dbc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012dc0:	e722      	b.n	8012c08 <__kernel_rem_pio2+0x2a8>
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	f7ed feef 	bl	8000ba8 <__aeabi_d2iz>
 8012dca:	ab0c      	add	r3, sp, #48	@ 0x30
 8012dcc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012dd0:	e71a      	b.n	8012c08 <__kernel_rem_pio2+0x2a8>
 8012dd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8012dd4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012dd8:	f7ed fbcc 	bl	8000574 <__aeabi_i2d>
 8012ddc:	4622      	mov	r2, r4
 8012dde:	462b      	mov	r3, r5
 8012de0:	f7ed fc32 	bl	8000648 <__aeabi_dmul>
 8012de4:	4652      	mov	r2, sl
 8012de6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012dea:	465b      	mov	r3, fp
 8012dec:	4620      	mov	r0, r4
 8012dee:	4629      	mov	r1, r5
 8012df0:	f7ed fc2a 	bl	8000648 <__aeabi_dmul>
 8012df4:	3e01      	subs	r6, #1
 8012df6:	4604      	mov	r4, r0
 8012df8:	460d      	mov	r5, r1
 8012dfa:	e718      	b.n	8012c2e <__kernel_rem_pio2+0x2ce>
 8012dfc:	9906      	ldr	r1, [sp, #24]
 8012dfe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8012e02:	9106      	str	r1, [sp, #24]
 8012e04:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012e08:	f7ed fc1e 	bl	8000648 <__aeabi_dmul>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	460b      	mov	r3, r1
 8012e10:	4650      	mov	r0, sl
 8012e12:	4659      	mov	r1, fp
 8012e14:	f7ed fa62 	bl	80002dc <__adddf3>
 8012e18:	3601      	adds	r6, #1
 8012e1a:	4682      	mov	sl, r0
 8012e1c:	468b      	mov	fp, r1
 8012e1e:	9b00      	ldr	r3, [sp, #0]
 8012e20:	429e      	cmp	r6, r3
 8012e22:	dc01      	bgt.n	8012e28 <__kernel_rem_pio2+0x4c8>
 8012e24:	42b5      	cmp	r5, r6
 8012e26:	dae9      	bge.n	8012dfc <__kernel_rem_pio2+0x49c>
 8012e28:	ab48      	add	r3, sp, #288	@ 0x120
 8012e2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012e2e:	e9c5 ab00 	strd	sl, fp, [r5]
 8012e32:	3c01      	subs	r4, #1
 8012e34:	e6ff      	b.n	8012c36 <__kernel_rem_pio2+0x2d6>
 8012e36:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012e38:	2b02      	cmp	r3, #2
 8012e3a:	dc0b      	bgt.n	8012e54 <__kernel_rem_pio2+0x4f4>
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	dc39      	bgt.n	8012eb4 <__kernel_rem_pio2+0x554>
 8012e40:	d05d      	beq.n	8012efe <__kernel_rem_pio2+0x59e>
 8012e42:	9b02      	ldr	r3, [sp, #8]
 8012e44:	f003 0007 	and.w	r0, r3, #7
 8012e48:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8012e4c:	ecbd 8b02 	vpop	{d8}
 8012e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e54:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	d1f3      	bne.n	8012e42 <__kernel_rem_pio2+0x4e2>
 8012e5a:	9b05      	ldr	r3, [sp, #20]
 8012e5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012e60:	eb0d 0403 	add.w	r4, sp, r3
 8012e64:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012e68:	4625      	mov	r5, r4
 8012e6a:	46c2      	mov	sl, r8
 8012e6c:	f1ba 0f00 	cmp.w	sl, #0
 8012e70:	f1a5 0508 	sub.w	r5, r5, #8
 8012e74:	dc6b      	bgt.n	8012f4e <__kernel_rem_pio2+0x5ee>
 8012e76:	4645      	mov	r5, r8
 8012e78:	2d01      	cmp	r5, #1
 8012e7a:	f1a4 0408 	sub.w	r4, r4, #8
 8012e7e:	f300 8087 	bgt.w	8012f90 <__kernel_rem_pio2+0x630>
 8012e82:	9c05      	ldr	r4, [sp, #20]
 8012e84:	ab48      	add	r3, sp, #288	@ 0x120
 8012e86:	441c      	add	r4, r3
 8012e88:	2000      	movs	r0, #0
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	f1b8 0f01 	cmp.w	r8, #1
 8012e90:	f300 809c 	bgt.w	8012fcc <__kernel_rem_pio2+0x66c>
 8012e94:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8012e98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8012e9c:	f1b9 0f00 	cmp.w	r9, #0
 8012ea0:	f040 80a6 	bne.w	8012ff0 <__kernel_rem_pio2+0x690>
 8012ea4:	9b04      	ldr	r3, [sp, #16]
 8012ea6:	e9c3 7800 	strd	r7, r8, [r3]
 8012eaa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012eae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012eb2:	e7c6      	b.n	8012e42 <__kernel_rem_pio2+0x4e2>
 8012eb4:	9d05      	ldr	r5, [sp, #20]
 8012eb6:	ab48      	add	r3, sp, #288	@ 0x120
 8012eb8:	441d      	add	r5, r3
 8012eba:	4644      	mov	r4, r8
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	2c00      	cmp	r4, #0
 8012ec2:	da35      	bge.n	8012f30 <__kernel_rem_pio2+0x5d0>
 8012ec4:	f1b9 0f00 	cmp.w	r9, #0
 8012ec8:	d038      	beq.n	8012f3c <__kernel_rem_pio2+0x5dc>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012ed0:	9c04      	ldr	r4, [sp, #16]
 8012ed2:	e9c4 2300 	strd	r2, r3, [r4]
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	460b      	mov	r3, r1
 8012eda:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8012ede:	f7ed f9fb 	bl	80002d8 <__aeabi_dsub>
 8012ee2:	ad4a      	add	r5, sp, #296	@ 0x128
 8012ee4:	2401      	movs	r4, #1
 8012ee6:	45a0      	cmp	r8, r4
 8012ee8:	da2b      	bge.n	8012f42 <__kernel_rem_pio2+0x5e2>
 8012eea:	f1b9 0f00 	cmp.w	r9, #0
 8012eee:	d002      	beq.n	8012ef6 <__kernel_rem_pio2+0x596>
 8012ef0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	9b04      	ldr	r3, [sp, #16]
 8012ef8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012efc:	e7a1      	b.n	8012e42 <__kernel_rem_pio2+0x4e2>
 8012efe:	9c05      	ldr	r4, [sp, #20]
 8012f00:	ab48      	add	r3, sp, #288	@ 0x120
 8012f02:	441c      	add	r4, r3
 8012f04:	2000      	movs	r0, #0
 8012f06:	2100      	movs	r1, #0
 8012f08:	f1b8 0f00 	cmp.w	r8, #0
 8012f0c:	da09      	bge.n	8012f22 <__kernel_rem_pio2+0x5c2>
 8012f0e:	f1b9 0f00 	cmp.w	r9, #0
 8012f12:	d002      	beq.n	8012f1a <__kernel_rem_pio2+0x5ba>
 8012f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f18:	4619      	mov	r1, r3
 8012f1a:	9b04      	ldr	r3, [sp, #16]
 8012f1c:	e9c3 0100 	strd	r0, r1, [r3]
 8012f20:	e78f      	b.n	8012e42 <__kernel_rem_pio2+0x4e2>
 8012f22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012f26:	f7ed f9d9 	bl	80002dc <__adddf3>
 8012f2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f2e:	e7eb      	b.n	8012f08 <__kernel_rem_pio2+0x5a8>
 8012f30:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012f34:	f7ed f9d2 	bl	80002dc <__adddf3>
 8012f38:	3c01      	subs	r4, #1
 8012f3a:	e7c1      	b.n	8012ec0 <__kernel_rem_pio2+0x560>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	460b      	mov	r3, r1
 8012f40:	e7c6      	b.n	8012ed0 <__kernel_rem_pio2+0x570>
 8012f42:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012f46:	f7ed f9c9 	bl	80002dc <__adddf3>
 8012f4a:	3401      	adds	r4, #1
 8012f4c:	e7cb      	b.n	8012ee6 <__kernel_rem_pio2+0x586>
 8012f4e:	ed95 7b00 	vldr	d7, [r5]
 8012f52:	ed8d 7b00 	vstr	d7, [sp]
 8012f56:	ed95 7b02 	vldr	d7, [r5, #8]
 8012f5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f5e:	ec53 2b17 	vmov	r2, r3, d7
 8012f62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f66:	f7ed f9b9 	bl	80002dc <__adddf3>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	4606      	mov	r6, r0
 8012f70:	460f      	mov	r7, r1
 8012f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f76:	f7ed f9af 	bl	80002d8 <__aeabi_dsub>
 8012f7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012f7e:	f7ed f9ad 	bl	80002dc <__adddf3>
 8012f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f86:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8012f8a:	e9c5 6700 	strd	r6, r7, [r5]
 8012f8e:	e76d      	b.n	8012e6c <__kernel_rem_pio2+0x50c>
 8012f90:	ed94 7b00 	vldr	d7, [r4]
 8012f94:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012f98:	ec51 0b17 	vmov	r0, r1, d7
 8012f9c:	4652      	mov	r2, sl
 8012f9e:	465b      	mov	r3, fp
 8012fa0:	ed8d 7b00 	vstr	d7, [sp]
 8012fa4:	f7ed f99a 	bl	80002dc <__adddf3>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	4606      	mov	r6, r0
 8012fae:	460f      	mov	r7, r1
 8012fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fb4:	f7ed f990 	bl	80002d8 <__aeabi_dsub>
 8012fb8:	4652      	mov	r2, sl
 8012fba:	465b      	mov	r3, fp
 8012fbc:	f7ed f98e 	bl	80002dc <__adddf3>
 8012fc0:	3d01      	subs	r5, #1
 8012fc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012fc6:	e9c4 6700 	strd	r6, r7, [r4]
 8012fca:	e755      	b.n	8012e78 <__kernel_rem_pio2+0x518>
 8012fcc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012fd0:	f7ed f984 	bl	80002dc <__adddf3>
 8012fd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fd8:	e758      	b.n	8012e8c <__kernel_rem_pio2+0x52c>
 8012fda:	bf00      	nop
 8012fdc:	f3af 8000 	nop.w
	...
 8012fe8:	41700000 	.word	0x41700000
 8012fec:	3e700000 	.word	0x3e700000
 8012ff0:	9b04      	ldr	r3, [sp, #16]
 8012ff2:	9a04      	ldr	r2, [sp, #16]
 8012ff4:	601f      	str	r7, [r3, #0]
 8012ff6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8012ffa:	605c      	str	r4, [r3, #4]
 8012ffc:	609d      	str	r5, [r3, #8]
 8012ffe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013002:	60d3      	str	r3, [r2, #12]
 8013004:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013008:	6110      	str	r0, [r2, #16]
 801300a:	6153      	str	r3, [r2, #20]
 801300c:	e719      	b.n	8012e42 <__kernel_rem_pio2+0x4e2>
 801300e:	bf00      	nop

08013010 <scalbn>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	ec55 4b10 	vmov	r4, r5, d0
 8013016:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801301a:	4606      	mov	r6, r0
 801301c:	462b      	mov	r3, r5
 801301e:	b991      	cbnz	r1, 8013046 <scalbn+0x36>
 8013020:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013024:	4323      	orrs	r3, r4
 8013026:	d03d      	beq.n	80130a4 <scalbn+0x94>
 8013028:	4b35      	ldr	r3, [pc, #212]	@ (8013100 <scalbn+0xf0>)
 801302a:	4620      	mov	r0, r4
 801302c:	4629      	mov	r1, r5
 801302e:	2200      	movs	r2, #0
 8013030:	f7ed fb0a 	bl	8000648 <__aeabi_dmul>
 8013034:	4b33      	ldr	r3, [pc, #204]	@ (8013104 <scalbn+0xf4>)
 8013036:	429e      	cmp	r6, r3
 8013038:	4604      	mov	r4, r0
 801303a:	460d      	mov	r5, r1
 801303c:	da0f      	bge.n	801305e <scalbn+0x4e>
 801303e:	a328      	add	r3, pc, #160	@ (adr r3, 80130e0 <scalbn+0xd0>)
 8013040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013044:	e01e      	b.n	8013084 <scalbn+0x74>
 8013046:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801304a:	4291      	cmp	r1, r2
 801304c:	d10b      	bne.n	8013066 <scalbn+0x56>
 801304e:	4622      	mov	r2, r4
 8013050:	4620      	mov	r0, r4
 8013052:	4629      	mov	r1, r5
 8013054:	f7ed f942 	bl	80002dc <__adddf3>
 8013058:	4604      	mov	r4, r0
 801305a:	460d      	mov	r5, r1
 801305c:	e022      	b.n	80130a4 <scalbn+0x94>
 801305e:	460b      	mov	r3, r1
 8013060:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013064:	3936      	subs	r1, #54	@ 0x36
 8013066:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801306a:	4296      	cmp	r6, r2
 801306c:	dd0d      	ble.n	801308a <scalbn+0x7a>
 801306e:	2d00      	cmp	r5, #0
 8013070:	a11d      	add	r1, pc, #116	@ (adr r1, 80130e8 <scalbn+0xd8>)
 8013072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013076:	da02      	bge.n	801307e <scalbn+0x6e>
 8013078:	a11d      	add	r1, pc, #116	@ (adr r1, 80130f0 <scalbn+0xe0>)
 801307a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801307e:	a31a      	add	r3, pc, #104	@ (adr r3, 80130e8 <scalbn+0xd8>)
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	f7ed fae0 	bl	8000648 <__aeabi_dmul>
 8013088:	e7e6      	b.n	8013058 <scalbn+0x48>
 801308a:	1872      	adds	r2, r6, r1
 801308c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013090:	428a      	cmp	r2, r1
 8013092:	dcec      	bgt.n	801306e <scalbn+0x5e>
 8013094:	2a00      	cmp	r2, #0
 8013096:	dd08      	ble.n	80130aa <scalbn+0x9a>
 8013098:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801309c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80130a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130a4:	ec45 4b10 	vmov	d0, r4, r5
 80130a8:	bd70      	pop	{r4, r5, r6, pc}
 80130aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80130ae:	da08      	bge.n	80130c2 <scalbn+0xb2>
 80130b0:	2d00      	cmp	r5, #0
 80130b2:	a10b      	add	r1, pc, #44	@ (adr r1, 80130e0 <scalbn+0xd0>)
 80130b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130b8:	dac1      	bge.n	801303e <scalbn+0x2e>
 80130ba:	a10f      	add	r1, pc, #60	@ (adr r1, 80130f8 <scalbn+0xe8>)
 80130bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130c0:	e7bd      	b.n	801303e <scalbn+0x2e>
 80130c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80130c6:	3236      	adds	r2, #54	@ 0x36
 80130c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80130cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130d0:	4620      	mov	r0, r4
 80130d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013108 <scalbn+0xf8>)
 80130d4:	4629      	mov	r1, r5
 80130d6:	2200      	movs	r2, #0
 80130d8:	e7d4      	b.n	8013084 <scalbn+0x74>
 80130da:	bf00      	nop
 80130dc:	f3af 8000 	nop.w
 80130e0:	c2f8f359 	.word	0xc2f8f359
 80130e4:	01a56e1f 	.word	0x01a56e1f
 80130e8:	8800759c 	.word	0x8800759c
 80130ec:	7e37e43c 	.word	0x7e37e43c
 80130f0:	8800759c 	.word	0x8800759c
 80130f4:	fe37e43c 	.word	0xfe37e43c
 80130f8:	c2f8f359 	.word	0xc2f8f359
 80130fc:	81a56e1f 	.word	0x81a56e1f
 8013100:	43500000 	.word	0x43500000
 8013104:	ffff3cb0 	.word	0xffff3cb0
 8013108:	3c900000 	.word	0x3c900000
 801310c:	00000000 	.word	0x00000000

08013110 <floor>:
 8013110:	ec51 0b10 	vmov	r0, r1, d0
 8013114:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801311c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013120:	2e13      	cmp	r6, #19
 8013122:	460c      	mov	r4, r1
 8013124:	4605      	mov	r5, r0
 8013126:	4680      	mov	r8, r0
 8013128:	dc34      	bgt.n	8013194 <floor+0x84>
 801312a:	2e00      	cmp	r6, #0
 801312c:	da17      	bge.n	801315e <floor+0x4e>
 801312e:	a332      	add	r3, pc, #200	@ (adr r3, 80131f8 <floor+0xe8>)
 8013130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013134:	f7ed f8d2 	bl	80002dc <__adddf3>
 8013138:	2200      	movs	r2, #0
 801313a:	2300      	movs	r3, #0
 801313c:	f7ed fd14 	bl	8000b68 <__aeabi_dcmpgt>
 8013140:	b150      	cbz	r0, 8013158 <floor+0x48>
 8013142:	2c00      	cmp	r4, #0
 8013144:	da55      	bge.n	80131f2 <floor+0xe2>
 8013146:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801314a:	432c      	orrs	r4, r5
 801314c:	2500      	movs	r5, #0
 801314e:	42ac      	cmp	r4, r5
 8013150:	4c2b      	ldr	r4, [pc, #172]	@ (8013200 <floor+0xf0>)
 8013152:	bf08      	it	eq
 8013154:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013158:	4621      	mov	r1, r4
 801315a:	4628      	mov	r0, r5
 801315c:	e023      	b.n	80131a6 <floor+0x96>
 801315e:	4f29      	ldr	r7, [pc, #164]	@ (8013204 <floor+0xf4>)
 8013160:	4137      	asrs	r7, r6
 8013162:	ea01 0307 	and.w	r3, r1, r7
 8013166:	4303      	orrs	r3, r0
 8013168:	d01d      	beq.n	80131a6 <floor+0x96>
 801316a:	a323      	add	r3, pc, #140	@ (adr r3, 80131f8 <floor+0xe8>)
 801316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013170:	f7ed f8b4 	bl	80002dc <__adddf3>
 8013174:	2200      	movs	r2, #0
 8013176:	2300      	movs	r3, #0
 8013178:	f7ed fcf6 	bl	8000b68 <__aeabi_dcmpgt>
 801317c:	2800      	cmp	r0, #0
 801317e:	d0eb      	beq.n	8013158 <floor+0x48>
 8013180:	2c00      	cmp	r4, #0
 8013182:	bfbe      	ittt	lt
 8013184:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013188:	4133      	asrlt	r3, r6
 801318a:	18e4      	addlt	r4, r4, r3
 801318c:	ea24 0407 	bic.w	r4, r4, r7
 8013190:	2500      	movs	r5, #0
 8013192:	e7e1      	b.n	8013158 <floor+0x48>
 8013194:	2e33      	cmp	r6, #51	@ 0x33
 8013196:	dd0a      	ble.n	80131ae <floor+0x9e>
 8013198:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801319c:	d103      	bne.n	80131a6 <floor+0x96>
 801319e:	4602      	mov	r2, r0
 80131a0:	460b      	mov	r3, r1
 80131a2:	f7ed f89b 	bl	80002dc <__adddf3>
 80131a6:	ec41 0b10 	vmov	d0, r0, r1
 80131aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80131b2:	f04f 37ff 	mov.w	r7, #4294967295
 80131b6:	40df      	lsrs	r7, r3
 80131b8:	4207      	tst	r7, r0
 80131ba:	d0f4      	beq.n	80131a6 <floor+0x96>
 80131bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80131f8 <floor+0xe8>)
 80131be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c2:	f7ed f88b 	bl	80002dc <__adddf3>
 80131c6:	2200      	movs	r2, #0
 80131c8:	2300      	movs	r3, #0
 80131ca:	f7ed fccd 	bl	8000b68 <__aeabi_dcmpgt>
 80131ce:	2800      	cmp	r0, #0
 80131d0:	d0c2      	beq.n	8013158 <floor+0x48>
 80131d2:	2c00      	cmp	r4, #0
 80131d4:	da0a      	bge.n	80131ec <floor+0xdc>
 80131d6:	2e14      	cmp	r6, #20
 80131d8:	d101      	bne.n	80131de <floor+0xce>
 80131da:	3401      	adds	r4, #1
 80131dc:	e006      	b.n	80131ec <floor+0xdc>
 80131de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80131e2:	2301      	movs	r3, #1
 80131e4:	40b3      	lsls	r3, r6
 80131e6:	441d      	add	r5, r3
 80131e8:	4545      	cmp	r5, r8
 80131ea:	d3f6      	bcc.n	80131da <floor+0xca>
 80131ec:	ea25 0507 	bic.w	r5, r5, r7
 80131f0:	e7b2      	b.n	8013158 <floor+0x48>
 80131f2:	2500      	movs	r5, #0
 80131f4:	462c      	mov	r4, r5
 80131f6:	e7af      	b.n	8013158 <floor+0x48>
 80131f8:	8800759c 	.word	0x8800759c
 80131fc:	7e37e43c 	.word	0x7e37e43c
 8013200:	bff00000 	.word	0xbff00000
 8013204:	000fffff 	.word	0x000fffff

08013208 <_init>:
 8013208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801320a:	bf00      	nop
 801320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801320e:	bc08      	pop	{r3}
 8013210:	469e      	mov	lr, r3
 8013212:	4770      	bx	lr

08013214 <_fini>:
 8013214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013216:	bf00      	nop
 8013218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801321a:	bc08      	pop	{r3}
 801321c:	469e      	mov	lr, r3
 801321e:	4770      	bx	lr
