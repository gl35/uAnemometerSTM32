
uAnemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010060  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08010240  08010240  00011240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010828  08010828  000126c8  2**0
                  CONTENTS
  4 .ARM          00000008  08010828  08010828  00011828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010830  08010830  000126c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010830  08010830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010838  08010838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c8  20000000  0801083c  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d08  200006c8  08010f04  000126c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d0  08010f04  000133d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000126c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e603  00000000  00000000  000126f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003951  00000000  00000000  00030cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00034650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e2  00000000  00000000  00036110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022acd  00000000  00000000  000375f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020950  00000000  00000000  0005a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e373d  00000000  00000000  0007aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e14c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008990  00000000  00000000  0015e190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00166b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006c8 	.word	0x200006c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010228 	.word	0x08010228

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006cc 	.word	0x200006cc
 800021c:	08010228 	.word	0x08010228

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	2364      	movs	r3, #100	@ 0x64
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2304      	movs	r3, #4
 8001012:	214e      	movs	r1, #78	@ 0x4e
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <lcd_send_cmd+0x5c>)
 8001016:	f004 fe93 	bl	8005d40 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000824 	.word	0x20000824

08001028 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f023 030f 	bic.w	r3, r3, #15
 8001038:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 030d 	orr.w	r3, r3, #13
 8001046:	b2db      	uxtb	r3, r3
 8001048:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0309 	orr.w	r3, r3, #9
 8001050:	b2db      	uxtb	r3, r3
 8001052:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	f043 030d 	orr.w	r3, r3, #13
 800105a:	b2db      	uxtb	r3, r3
 800105c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	f043 0309 	orr.w	r3, r3, #9
 8001064:	b2db      	uxtb	r3, r3
 8001066:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	2364      	movs	r3, #100	@ 0x64
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2304      	movs	r3, #4
 8001072:	214e      	movs	r1, #78	@ 0x4e
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <lcd_send_data+0x5c>)
 8001076:	f004 fe63 	bl	8005d40 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000824 	.word	0x20000824

08001088 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    switch (row)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <lcd_put_cur+0x18>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <lcd_put_cur+0x22>
 800109e:	e009      	b.n	80010b4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a6:	603b      	str	r3, [r7, #0]
            break;
 80010a8:	e004      	b.n	80010b4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010b0:	603b      	str	r3, [r7, #0]
            break;
 80010b2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff85 	bl	8000fc8 <lcd_send_cmd>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <lcd_init>:


void lcd_init (void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010ca:	2032      	movs	r0, #50	@ 0x32
 80010cc:	f001 fe7c 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010d0:	2030      	movs	r0, #48	@ 0x30
 80010d2:	f7ff ff79 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010d6:	2005      	movs	r0, #5
 80010d8:	f001 fe76 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010dc:	2030      	movs	r0, #48	@ 0x30
 80010de:	f7ff ff73 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010e2:	2001      	movs	r0, #1
 80010e4:	f001 fe70 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010e8:	2030      	movs	r0, #48	@ 0x30
 80010ea:	f7ff ff6d 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f001 fe6a 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80010f4:	2020      	movs	r0, #32
 80010f6:	f7ff ff67 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fe64 	bl	8002dc8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001100:	2028      	movs	r0, #40	@ 0x28
 8001102:	f7ff ff61 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f001 fe5e 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800110c:	2008      	movs	r0, #8
 800110e:	f7ff ff5b 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f001 fe58 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff55 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f001 fe52 	bl	8002dc8 <HAL_Delay>
	HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f001 fe4f 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800112a:	2006      	movs	r0, #6
 800112c:	f7ff ff4c 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f001 fe49 	bl	8002dc8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001136:	200c      	movs	r0, #12
 8001138:	f7ff ff46 	bl	8000fc8 <lcd_send_cmd>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001148:	e006      	b.n	8001158 <lcd_send_string+0x18>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff68 	bl	8001028 <lcd_send_data>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f4      	bne.n	800114a <lcd_send_string+0xa>
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <blinkLED>:
/*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6); //pin 6 are for rising edges
}*/

void blinkLED ()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <blinkLED+0x1c>)
 8001176:	f004 fd2d 	bl	8005bd4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800117a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800117e:	f001 fe23 	bl	8002dc8 <HAL_Delay>
	return;
 8001182:	bf00      	nop
}
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400

0800118c <HAL_UART_RxHalfCpltCallback>:
int HTC = 0, FTC = 0;

char inp;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	HTC=1;  // half transfer complete callback was called
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_UART_RxHalfCpltCallback+0x20>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
	FTC=0;
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_UART_RxHalfCpltCallback+0x24>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000d88 	.word	0x20000d88
 80011b0:	20000d8c 	.word	0x20000d8c

080011b4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	  HTC=0;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_UART_RxCpltCallback+0x20>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
	  FTC=1;
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_UART_RxCpltCallback+0x24>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	20000d88 	.word	0x20000d88
 80011d8:	20000d8c 	.word	0x20000d8c

080011dc <uart_dma>:

void uart_dma(void);
void uart_dma(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	4907      	ldr	r1, [pc, #28]	@ (8001200 <uart_dma+0x24>)
 80011e4:	4807      	ldr	r0, [pc, #28]	@ (8001204 <uart_dma+0x28>)
 80011e6:	f009 f913 	bl	800a410 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit_DMA(&huart2, RxData, 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	4904      	ldr	r1, [pc, #16]	@ (8001200 <uart_dma+0x24>)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <uart_dma+0x28>)
 80011f0:	f008 f88c 	bl	800930c <HAL_UART_Transmit_DMA>
	  		  FTC = 0;
	  		  HAL_UART_DMAStop(&huart2);
	  		  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
	  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
	  	  }*/
	    inp = RxData[0];
 80011f4:	4b02      	ldr	r3, [pc, #8]	@ (8001200 <uart_dma+0x24>)
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <uart_dma+0x2c>)
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000d84 	.word	0x20000d84
 8001204:	20000a7c 	.word	0x20000a7c
 8001208:	20000d90 	.word	0x20000d90

0800120c <pulseWavg>:
//calculate the pulseW average  - this is to remove the noise and jittering in the pulse - oct 22, 2024
float pulseW_arr[100];
float pulseW_avg;

void pulseWavg (void)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
	uint8_t i = 0 ;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
	float sum = 0;
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
	if (pulseW != 0)
 800121c:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <pulseWavg+0x78>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d01b      	beq.n	8001264 <pulseWavg+0x58>
	{
		for (i = 0; i <=100; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	e015      	b.n	800125e <pulseWavg+0x52>
		{
			pulseW_arr[i] = pulseW;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <pulseWavg+0x78>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	4913      	ldr	r1, [pc, #76]	@ (8001288 <pulseWavg+0x7c>)
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	601a      	str	r2, [r3, #0]
			sum += pulseW_arr[i];
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <pulseWavg+0x7c>)
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ed97 7a00 	vldr	s14, [r7]
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	edc7 7a00 	vstr	s15, [r7]
		for (i = 0; i <=100; i++)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	3301      	adds	r3, #1
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b64      	cmp	r3, #100	@ 0x64
 8001262:	d9e6      	bls.n	8001232 <pulseWavg+0x26>
		}
	}
	pulseW_avg = sum/100;
 8001264:	ed97 7a00 	vldr	s14, [r7]
 8001268:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800128c <pulseWavg+0x80>
 800126c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <pulseWavg+0x84>)
 8001272:	edc3 7a00 	vstr	s15, [r3]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000d6c 	.word	0x20000d6c
 8001288:	20000d94 	.word	0x20000d94
 800128c:	42c80000 	.word	0x42c80000
 8001290:	20000f24 	.word	0x20000f24
 8001294:	00000000 	.word	0x00000000

08001298 <HAL_TIM_IC_CaptureCallback>:
//Tim1 input capture callback function for calculating the pulseW
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	//if the interrupt is triggered by 1st Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7f1b      	ldrb	r3, [r3, #28]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d102      	bne.n	80012ae <HAL_TIM_IC_CaptureCallback+0x16>
	{
		riseCaptured = 1;
 80012a8:	4b8d      	ldr	r3, [pc, #564]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
	}
	//if the interrupt is triggered by 2nd Channel
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f1b      	ldrb	r3, [r3, #28]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d102      	bne.n	80012bc <HAL_TIM_IC_CaptureCallback+0x24>
	{
		fallCaptured = 1;
 80012b6:	4b8b      	ldr	r3, [pc, #556]	@ (80014e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
	}

	if ((riseCaptured) && (fallCaptured))
 80012bc:	4b88      	ldr	r3, [pc, #544]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8206 	beq.w	80016d2 <HAL_TIM_IC_CaptureCallback+0x43a>
 80012c6:	4b87      	ldr	r3, [pc, #540]	@ (80014e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8201 	beq.w	80016d2 <HAL_TIM_IC_CaptureCallback+0x43a>
	{
		// calculate the reference clock
		//float refClock = TIMCLOCK/(PSCALAR+1);
		int indxr = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
		int indxf = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
		int countr = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
		int countrf = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
		float riseavg = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
		float rfavg = 0;
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
		 /*In case of high Frequencies, the DMA sometimes captures 0's in the beginning.
		 * increment the index until some useful data shows up*/

		while (riseData[indxr] == 0) indxr++;
 80012ec:	e002      	b.n	80012f4 <HAL_TIM_IC_CaptureCallback+0x5c>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	4a7c      	ldr	r2, [pc, #496]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f6      	beq.n	80012ee <HAL_TIM_IC_CaptureCallback+0x56>

		 /*Again at very high frequencies, sometimes the values don't change
		* So we will wait for the update among the values*/

		while ( (MIN( (riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]) ) ) == 0) indxr++;
 8001300:	e002      	b.n	8001308 <HAL_TIM_IC_CaptureCallback+0x70>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3302      	adds	r3, #2
 800130c:	4a76      	ldr	r2, [pc, #472]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800130e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	4974      	ldr	r1, [pc, #464]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001318:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800131c:	1ad2      	subs	r2, r2, r3
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	4971      	ldr	r1, [pc, #452]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001324:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001328:	486f      	ldr	r0, [pc, #444]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001330:	1acb      	subs	r3, r1, r3
 8001332:	4293      	cmp	r3, r2
 8001334:	bf28      	it	cs
 8001336:	4613      	movcs	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0e2      	beq.n	8001302 <HAL_TIM_IC_CaptureCallback+0x6a>
		 //riseavg is the difference in the 2 consecutive rise Time

		 //Assign a start value to riseavg
		riseavg += MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3301      	adds	r3, #1
 8001340:	4a69      	ldr	r2, [pc, #420]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001346:	4968      	ldr	r1, [pc, #416]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3302      	adds	r3, #2
 8001354:	4964      	ldr	r1, [pc, #400]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001356:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	4862      	ldr	r0, [pc, #392]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001364:	1acb      	subs	r3, r1, r3
 8001366:	429a      	cmp	r2, r3
 8001368:	d20e      	bcs.n	8001388 <HAL_TIM_IC_CaptureCallback+0xf0>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	4a5e      	ldr	r2, [pc, #376]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001374:	495c      	ldr	r1, [pc, #368]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001386:	e00e      	b.n	80013a6 <HAL_TIM_IC_CaptureCallback+0x10e>
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	3302      	adds	r3, #2
 800138c:	4a56      	ldr	r2, [pc, #344]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800138e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	4954      	ldr	r1, [pc, #336]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	edc7 7a03 	vstr	s15, [r7, #12]
		indxr++;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
		countr++;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
		// start adding the values to the riseavg
		while (indxr < (numval))
 80013be:	e03f      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x1a8>
		{
			riseavg += MIN((riseData[indxr+1]-riseData[indxr]), riseavg/countr);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a48      	ldr	r2, [pc, #288]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ca:	4947      	ldr	r1, [pc, #284]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80013ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d50e      	bpl.n	8001416 <HAL_TIM_IC_CaptureCallback+0x17e>
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a3a      	ldr	r2, [pc, #232]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001402:	4939      	ldr	r1, [pc, #228]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001414:	e008      	b.n	8001428 <HAL_TIM_IC_CaptureCallback+0x190>
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001420:	edd7 6a03 	vldr	s13, [r7, #12]
 8001424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001428:	ed97 7a03 	vldr	s14, [r7, #12]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	edc7 7a03 	vstr	s15, [r7, #12]
			countr++;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
			indxr++;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
		while (indxr < (numval))
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b31      	cmp	r3, #49	@ 0x31
 8001444:	ddbc      	ble.n	80013c0 <HAL_TIM_IC_CaptureCallback+0x128>
		}
		/* Find the average riseavg, the average time between 2 RISE*/
		riseavg = riseavg/countr;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001450:	edd7 6a03 	vldr	s13, [r7, #12]
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001458:	edc7 7a03 	vstr	s15, [r7, #12]
		indxr = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
		 //The calculation for the Falling pulse on second channel
		 //If the fall time is lower than rise time,
		// Then there must be some error and we will increment
		 // both, until the error is gone

		if (fallData[indxf] < riseData[indxr])
 8001460:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001468:	491f      	ldr	r1, [pc, #124]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001470:	429a      	cmp	r2, r3
 8001472:	d214      	bcs.n	800149e <HAL_TIM_IC_CaptureCallback+0x206>
		{
			indxf+=2;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3302      	adds	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
			indxr+=2;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3302      	adds	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
			while (fallData[indxf] < riseData[indxr]) indxf++;
 8001480:	e002      	b.n	8001488 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001490:	4915      	ldr	r1, [pc, #84]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3f2      	bcc.n	8001482 <HAL_TIM_IC_CaptureCallback+0x1ea>
 800149c:	e0a7      	b.n	80015ee <HAL_TIM_IC_CaptureCallback+0x356>
		}

		else if (fallData[indxf] > riseData[indxr])
 800149e:	4a13      	ldr	r2, [pc, #76]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014a6:	4910      	ldr	r1, [pc, #64]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	f240 809d 	bls.w	80015ee <HAL_TIM_IC_CaptureCallback+0x356>
		{
			indxf+=2;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3302      	adds	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
			indxr+=2;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3302      	adds	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
			while (fallData[indxf] > riseData[indxr+1]) indxr++;
 80014c0:	e002      	b.n	80014c8 <HAL_TIM_IC_CaptureCallback+0x230>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4904      	ldr	r1, [pc, #16]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80014d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d8f1      	bhi.n	80014c2 <HAL_TIM_IC_CaptureCallback+0x22a>
		 /*The method used for the calculation below is as follows:
		* If Fall time < Rise Time, increment Fall counter
		* If Fall time - Rise Time is in between 0 and (difference between 2 Rise times), then its a success
		 * If fall time > Rise time, but is also > (difference between 2 Rise times), then increment Rise Counter*/

		while ((indxf < (numval)) && (indxr < (numval)))
 80014de:	e086      	b.n	80015ee <HAL_TIM_IC_CaptureCallback+0x356>
 80014e0:	20000bd0 	.word	0x20000bd0
 80014e4:	20000bd4 	.word	0x20000bd4
 80014e8:	20000bd8 	.word	0x20000bd8
 80014ec:	20000ca0 	.word	0x20000ca0
		{
			//If the Fall time is lower than rise time, increment the fall indx
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
			{
				indxf++;
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
			while ((int16_t)(fallData[indxf]-riseData[indxr]) < 0)
 80014f6:	4a80      	ldr	r2, [pc, #512]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	497e      	ldr	r1, [pc, #504]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001508:	b29b      	uxth	r3, r3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	b21b      	sxth	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	dbed      	blt.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x258>
			}
			/* If the Difference in fall time and rise time is >0 and less than rise average,
			 * Then we will register it as a success and increment the countrf (the number of successes)*/

			if (((int16_t)(fallData[indxf]-riseData[indxr]) >= 0) && (((int16_t)(fallData[indxf]-riseData[indxr]) <= riseavg)))
 8001514:	4a78      	ldr	r2, [pc, #480]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	b29a      	uxth	r2, r3
 800151e:	4977      	ldr	r1, [pc, #476]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001526:	b29b      	uxth	r3, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	db5a      	blt.n	80015e8 <HAL_TIM_IC_CaptureCallback+0x350>
 8001532:	4a71      	ldr	r2, [pc, #452]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	b29a      	uxth	r2, r3
 800153c:	496f      	ldr	r1, [pc, #444]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001544:	b29b      	uxth	r3, r3
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b29b      	uxth	r3, r3
 800154a:	b21b      	sxth	r3, r3
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001554:	ed97 7a03 	vldr	s14, [r7, #12]
 8001558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	db42      	blt.n	80015e8 <HAL_TIM_IC_CaptureCallback+0x350>
			{
				rfavg += MIN((fallData[indxf]-riseData[indxr]), (fallData[indxf+1]-riseData[indxr+1]));
 8001562:	4a65      	ldr	r2, [pc, #404]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800156a:	4964      	ldr	r1, [pc, #400]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001572:	1ad2      	subs	r2, r2, r3
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3301      	adds	r3, #1
 8001578:	495f      	ldr	r1, [pc, #380]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 800157a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	485e      	ldr	r0, [pc, #376]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 8001584:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001588:	1acb      	subs	r3, r1, r3
 800158a:	429a      	cmp	r2, r3
 800158c:	d20d      	bcs.n	80015aa <HAL_TIM_IC_CaptureCallback+0x312>
 800158e:	4a5a      	ldr	r2, [pc, #360]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001596:	4959      	ldr	r1, [pc, #356]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a8:	e00e      	b.n	80015c8 <HAL_TIM_IC_CaptureCallback+0x330>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x460>)
 80015b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4950      	ldr	r1, [pc, #320]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x464>)
 80015ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]
				indxf++;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
				indxr++;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
				countrf++;
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	3301      	adds	r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	e002      	b.n	80015ee <HAL_TIM_IC_CaptureCallback+0x356>
			}
			else
			{
				indxr++;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	3301      	adds	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
		while ((indxf < (numval)) && (indxr < (numval)))
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b31      	cmp	r3, #49	@ 0x31
 80015f2:	dc03      	bgt.n	80015fc <HAL_TIM_IC_CaptureCallback+0x364>
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b31      	cmp	r3, #49	@ 0x31
 80015f8:	f77f af7d 	ble.w	80014f6 <HAL_TIM_IC_CaptureCallback+0x25e>
			}
		}
		//Calculate the Average time between 2 Rise
		rfavg = rfavg/countrf;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	edd7 6a02 	vldr	s13, [r7, #8]
 800160a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160e:	edc7 7a02 	vstr	s15, [r7, #8]
		v_sound = 331+0.61*temp;
 8001612:	4b3b      	ldr	r3, [pc, #236]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x468>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffbe 	bl	8000598 <__aeabi_f2d>
 800161c:	a330      	add	r3, pc, #192	@ (adr r3, 80016e0 <HAL_TIM_IC_CaptureCallback+0x448>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff f811 	bl	8000648 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	a32e      	add	r3, pc, #184	@ (adr r3, 80016e8 <HAL_TIM_IC_CaptureCallback+0x450>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fe52 	bl	80002dc <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fafa 	bl	8000c38 <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	4a2f      	ldr	r2, [pc, #188]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001648:	6013      	str	r3, [r2, #0]
		//pulseW = *deltaT * timeFactor/1000000000;
		pulseW = (rfavg)*timeFactor/1000000000;  //converting ns to s
 800164a:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <HAL_TIM_IC_CaptureCallback+0x470>)
 800164c:	ed93 7a00 	vldr	s14, [r3]
 8001650:	edd7 7a02 	vldr	s15, [r7, #8]
 8001654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001658:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800170c <HAL_TIM_IC_CaptureCallback+0x474>
 800165c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <HAL_TIM_IC_CaptureCallback+0x478>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
		pulseWavg();
 8001666:	f7ff fdd1 	bl	800120c <pulseWavg>
//		deltaT_real = *delta_T_alg(pulseW);
		//windspeed = dist/((pulseW)*cali_val);  //d/(t*path diff)
//		windspeed = dist/(deltaT_real*cal_val) - v_sound; //might need to make this an array and take the average
		windspeed = DIST/(pulseW_avg*cal_val) - v_sound; //might need to make this an array and take the average
 800166a:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <HAL_TIM_IC_CaptureCallback+0x47c>)
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7fe ff8b 	bl	8000598 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	a11a      	add	r1, pc, #104	@ (adr r1, 80016f0 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800168c:	f7ff f906 	bl	800089c <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	461d      	mov	r5, r3
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x46c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff7b 	bl	8000598 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe fe15 	bl	80002d8 <__aeabi_dsub>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fabf 	bl	8000c38 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a17      	ldr	r2, [pc, #92]	@ (800171c <HAL_TIM_IC_CaptureCallback+0x484>)
 80016be:	6013      	str	r3, [r2, #0]
		riseCaptured = 0;
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0x488>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
		fallCaptured = 0;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_TIM_IC_CaptureCallback+0x48c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
		isMeasured = 1;
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_TIM_IC_CaptureCallback+0x490>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
		}
	}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	bf00      	nop
 80016dc:	f3af 8000 	nop.w
 80016e0:	b851eb85 	.word	0xb851eb85
 80016e4:	3fe3851e 	.word	0x3fe3851e
 80016e8:	00000000 	.word	0x00000000
 80016ec:	4074b000 	.word	0x4074b000
 80016f0:	47ae147b 	.word	0x47ae147b
 80016f4:	3f847ae1 	.word	0x3f847ae1
 80016f8:	20000ca0 	.word	0x20000ca0
 80016fc:	20000bd8 	.word	0x20000bd8
 8001700:	20000d78 	.word	0x20000d78
 8001704:	20000004 	.word	0x20000004
 8001708:	20000000 	.word	0x20000000
 800170c:	4e6e6b28 	.word	0x4e6e6b28
 8001710:	20000d6c 	.word	0x20000d6c
 8001714:	20000f24 	.word	0x20000f24
 8001718:	20000d70 	.word	0x20000d70
 800171c:	20000d80 	.word	0x20000d80
 8001720:	20000bd0 	.word	0x20000bd0
 8001724:	20000bd4 	.word	0x20000bd4
 8001728:	20000d68 	.word	0x20000d68

0800172c <adc_dma>:

//adc in dma mode -get adc value for temperature

uint32_t adc_val[1];
void adc_dma(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	// calibrate ADC for better accuracy and start it w/ interrupt
	 if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001730:	217f      	movs	r1, #127	@ 0x7f
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <adc_dma+0x5c>)
 8001734:	f002 fffc 	bl	8004730 <HAL_ADCEx_Calibration_Start>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <adc_dma+0x16>
	 {
		 Error_Handler();
 800173e:	f000 fddd 	bl	80022fc <Error_Handler>
	 /*if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
	 {
	 	 Error_Handler();
	}*/
	 // start pwm generation
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4811      	ldr	r0, [pc, #68]	@ (800178c <adc_dma+0x60>)
 8001746:	f005 ffb3 	bl	80076b0 <HAL_TIM_PWM_Start>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <adc_dma+0x28>
	{
		Error_Handler();
 8001750:	f000 fdd4 	bl	80022fc <Error_Handler>
	 }
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1) != HAL_OK)
 8001754:	2201      	movs	r2, #1
 8001756:	490e      	ldr	r1, [pc, #56]	@ (8001790 <adc_dma+0x64>)
 8001758:	480b      	ldr	r0, [pc, #44]	@ (8001788 <adc_dma+0x5c>)
 800175a:	f001 ff41 	bl	80035e0 <HAL_ADC_Start_DMA>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <adc_dma+0x3c>
	 {
		Error_Handler();
 8001764:	f000 fdca 	bl	80022fc <Error_Handler>
	}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001768:	217f      	movs	r1, #127	@ 0x7f
 800176a:	4807      	ldr	r0, [pc, #28]	@ (8001788 <adc_dma+0x5c>)
 800176c:	f002 ffe0 	bl	8004730 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	4907      	ldr	r1, [pc, #28]	@ (8001790 <adc_dma+0x64>)
 8001774:	4804      	ldr	r0, [pc, #16]	@ (8001788 <adc_dma+0x5c>)
 8001776:	f001 ff33 	bl	80035e0 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800177a:	2100      	movs	r1, #0
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <adc_dma+0x60>)
 800177e:	f005 ff97 	bl	80076b0 <HAL_TIM_PWM_Start>
	return;
 8001782:	bf00      	nop
}
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200006e4 	.word	0x200006e4
 800178c:	20000970 	.word	0x20000970
 8001790:	20000f28 	.word	0x20000f28

08001794 <getTemp>:
#define V_REF 3300 // mV
#define OFFSET 0.5
float adc_val_f;

float *getTemp(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
	float reading_mV = 0;
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//adc_val_f = adc_val[0];
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//temp = (adc_val_f/4095) *(125 - -40);
	reading_mV = adc_val[0] *  V_REF  / 4095 ;
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <getTemp+0x5c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80017a8:	fb03 f202 	mul.w	r2, r3, r2
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <getTemp+0x60>)
 80017ae:	fba3 1302 	umull	r1, r3, r3, r2
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	0852      	lsrs	r2, r2, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	0adb      	lsrs	r3, r3, #11
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	edc7 7a01 	vstr	s15, [r7, #4]
	temp =(reading_mV - 500) / 10; // 10mV/degree_C
 80017c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80017f8 <getTemp+0x64>
 80017ce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017d2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <getTemp+0x68>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	return &temp;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <getTemp+0x68>)
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000f28 	.word	0x20000f28
 80017f4:	00100101 	.word	0x00100101
 80017f8:	43fa0000 	.word	0x43fa0000
 80017fc:	20000d78 	.word	0x20000d78

08001800 <startSineW>:
#define PI 3.1415926
float dac_val = 1.2;
uint32_t var;

void startSineW(bool start)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af02      	add	r7, sp, #8
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	if (!start)
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <startSineW+0x20>
	{
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001816:	2100      	movs	r1, #0
 8001818:	482b      	ldr	r0, [pc, #172]	@ (80018c8 <startSineW+0xc8>)
 800181a:	f003 fac7 	bl	8004dac <HAL_DAC_Stop_DMA>
		 for (int i=0; i<100; i++)
		 {
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
		 }
	}
}
 800181e:	e048      	b.n	80018b2 <startSineW+0xb2>
		 HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8001820:	2300      	movs	r3, #0
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2364      	movs	r3, #100	@ 0x64
 8001826:	4a29      	ldr	r2, [pc, #164]	@ (80018cc <startSineW+0xcc>)
 8001828:	2100      	movs	r1, #0
 800182a:	4827      	ldr	r0, [pc, #156]	@ (80018c8 <startSineW+0xc8>)
 800182c:	f003 f9ea 	bl	8004c04 <HAL_DAC_Start_DMA>
		 for (int i=0; i<100; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e03a      	b.n	80018ac <startSineW+0xac>
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe9a 	bl	8000574 <__aeabi_i2d>
 8001840:	a31f      	add	r3, pc, #124	@ (adr r3, 80018c0 <startSineW+0xc0>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe feff 	bl	8000648 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <startSineW+0xd0>)
 8001858:	f7ff f820 	bl	800089c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ec43 2b17 	vmov	d7, r2, r3
 8001864:	eeb0 0a47 	vmov.f32	s0, s14
 8001868:	eef0 0a67 	vmov.f32	s1, s15
 800186c:	f00d fcac 	bl	800f1c8 <sin>
 8001870:	ec51 0b10 	vmov	r0, r1, d0
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <startSineW+0xd4>)
 800187a:	f7fe fd2f 	bl	80002dc <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <startSineW+0xd8>)
 800188c:	f7fe fedc 	bl	8000648 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f9ae 	bl	8000bf8 <__aeabi_d2uiz>
 800189c:	4602      	mov	r2, r0
 800189e:	490b      	ldr	r1, [pc, #44]	@ (80018cc <startSineW+0xcc>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 for (int i=0; i<100; i++)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b63      	cmp	r3, #99	@ 0x63
 80018b0:	ddc1      	ble.n	8001836 <startSineW+0x36>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	4d12d84a 	.word	0x4d12d84a
 80018c4:	400921fb 	.word	0x400921fb
 80018c8:	200007b0 	.word	0x200007b0
 80018cc:	20000f2c 	.word	0x20000f2c
 80018d0:	40590000 	.word	0x40590000
 80018d4:	3ff00000 	.word	0x3ff00000
 80018d8:	40a00000 	.word	0x40a00000

080018dc <lcd_disp>:
/******************************************************************/

// lcd display*****************************************************/
void lcd_disp(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	char * fltChar = malloc (sizeof (char) * 7);
 80018e2:	2007      	movs	r0, #7
 80018e4:	f008 fe36 	bl	800a554 <malloc>
 80018e8:	4603      	mov	r3, r0
 80018ea:	607b      	str	r3, [r7, #4]
	//lcd_send_cmd (0x80);
	//char fltChar [7];
	sprintf(fltChar, "%.4f", windspeed);
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <lcd_disp+0x4c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe51 	bl	8000598 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	490c      	ldr	r1, [pc, #48]	@ (800192c <lcd_disp+0x50>)
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f009 fa41 	bl	800ad84 <sprintf>
	lcd_put_cur(0,11);
 8001902:	210b      	movs	r1, #11
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff fbbf 	bl	8001088 <lcd_put_cur>
	//lcd_send_string("Windspeed=");
	//lcd_send_data((windspeed/10) +48);
	lcd_send_string(fltChar);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fc18 	bl	8001140 <lcd_send_string>
	lcd_send_string(" ");
 8001910:	4807      	ldr	r0, [pc, #28]	@ (8001930 <lcd_disp+0x54>)
 8001912:	f7ff fc15 	bl	8001140 <lcd_send_string>
	//lcd_put_cur(1,0);
	//lcd_send_string("m/s");
	HAL_Delay(500);
 8001916:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800191a:	f001 fa55 	bl	8002dc8 <HAL_Delay>
	return;
 800191e:	bf00      	nop
}
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000d80 	.word	0x20000d80
 800192c:	08010244 	.word	0x08010244
 8001930:	0801024c 	.word	0x0801024c
 8001934:	00000000 	.word	0x00000000

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
 enum State {IDLE = 0, START = 1, CALTIME = 2, STOP = 3}; //define the number of states
 char State = IDLE;
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]


 setvbuf(stdin, NULL, _IONBF, 0);
 8001942:	4b79      	ldr	r3, [pc, #484]	@ (8001b28 <main+0x1f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6858      	ldr	r0, [r3, #4]
 8001948:	2300      	movs	r3, #0
 800194a:	2202      	movs	r2, #2
 800194c:	2100      	movs	r1, #0
 800194e:	f009 f95f 	bl	800ac10 <setvbuf>

lambda = v_sound/FREQ;  //wavelength
 8001952:	4b76      	ldr	r3, [pc, #472]	@ (8001b2c <main+0x1f4>)
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001b30 <main+0x1f8>
 800195c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001960:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <main+0x1fc>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
pathDiff = (DIST/lambda)-0.5;  //destructive interference, L/lambda-0.5=delta_L
 8001966:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <main+0x1fc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe14 	bl	8000598 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	a16a      	add	r1, pc, #424	@ (adr r1, 8001b20 <main+0x1e8>)
 8001976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800197a:	f7fe ff8f 	bl	800089c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b38 <main+0x200>)
 800198c:	f7fe fca4 	bl	80002d8 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f94e 	bl	8000c38 <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4a67      	ldr	r2, [pc, #412]	@ (8001b3c <main+0x204>)
 80019a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a2:	f001 f9a0 	bl	8002ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a6:	f000 f8e7 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019aa:	f000 fc47 	bl	800223c <MX_GPIO_Init>
  MX_DMA_Init();
 80019ae:	f000 fbdf 	bl	8002170 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019b2:	f000 fb8f 	bl	80020d4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80019b6:	f000 fb17 	bl	8001fe8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80019ba:	f000 fa1d 	bl	8001df8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80019be:	f000 f927 	bl	8001c10 <MX_ADC1_Init>
  MX_DAC1_Init();
 80019c2:	f000 f99f 	bl	8001d04 <MX_DAC1_Init>
  MX_TIM2_Init();
 80019c6:	f000 fa9d 	bl	8001f04 <MX_TIM2_Init>
  MX_I2C1_Init();
 80019ca:	f000 f9d5 	bl	8001d78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 80019ce:	2332      	movs	r3, #50	@ 0x32
 80019d0:	4a5b      	ldr	r2, [pc, #364]	@ (8001b40 <main+0x208>)
 80019d2:	2100      	movs	r1, #0
 80019d4:	485b      	ldr	r0, [pc, #364]	@ (8001b44 <main+0x20c>)
 80019d6:	f005 ffcd 	bl	8007974 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 80019da:	2332      	movs	r3, #50	@ 0x32
 80019dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001b48 <main+0x210>)
 80019de:	2104      	movs	r1, #4
 80019e0:	4858      	ldr	r0, [pc, #352]	@ (8001b44 <main+0x20c>)
 80019e2:	f005 ffc7 	bl	8007974 <HAL_TIM_IC_Start_DMA>
  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  //start pwm timer
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //start TIM4 pwm ch1 - macro expan 0x00000000U

  lcd_init(); 														//initialize the lcd
 80019e6:	f7ff fb6e 	bl	80010c6 <lcd_init>
  //start timer 2 for the sinewave
  HAL_TIM_Base_Start(&htim2);
 80019ea:	4858      	ldr	r0, [pc, #352]	@ (8001b4c <main+0x214>)
 80019ec:	f005 fd9c 	bl	8007528 <HAL_TIM_Base_Start>

  //start adc dma
  adc_dma();
 80019f0:	f7ff fe9c 	bl	800172c <adc_dma>
  //start uarat dma
  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
  uart_dma();
 80019f4:	f7ff fbf2 	bl	80011dc <uart_dma>

  //preprint something on the lcd
  lcd_put_cur(0,0);
 80019f8:	2100      	movs	r1, #0
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fb44 	bl	8001088 <lcd_put_cur>
  lcd_send_string("Windspeed=");
 8001a00:	4853      	ldr	r0, [pc, #332]	@ (8001b50 <main+0x218>)
 8001a02:	f7ff fb9d 	bl	8001140 <lcd_send_string>
  lcd_put_cur(1,0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fb3d 	bl	8001088 <lcd_put_cur>
  lcd_send_string("m/s");
 8001a0e:	4851      	ldr	r0, [pc, #324]	@ (8001b54 <main+0x21c>)
 8001a10:	f7ff fb96 	bl	8001140 <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blinkLED();  //call the blinkLED function
 8001a14:	f7ff fbaa 	bl	800116c <blinkLED>
	  getTemp();
 8001a18:	f7ff febc 	bl	8001794 <getTemp>
	  lcd_disp();
 8001a1c:	f7ff ff5e 	bl	80018dc <lcd_disp>
	  //uart_dma();

	  if (isMeasured)
 8001a20:	4b4d      	ldr	r3, [pc, #308]	@ (8001b58 <main+0x220>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d011      	beq.n	8001a4c <main+0x114>
	  {
		  TIM1->CNT = 0;
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <main+0x224>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval);
 8001a2e:	2332      	movs	r3, #50	@ 0x32
 8001a30:	4a43      	ldr	r2, [pc, #268]	@ (8001b40 <main+0x208>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4843      	ldr	r0, [pc, #268]	@ (8001b44 <main+0x20c>)
 8001a36:	f005 ff9d 	bl	8007974 <HAL_TIM_IC_Start_DMA>
		  HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval);
 8001a3a:	2332      	movs	r3, #50	@ 0x32
 8001a3c:	4a42      	ldr	r2, [pc, #264]	@ (8001b48 <main+0x210>)
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4840      	ldr	r0, [pc, #256]	@ (8001b44 <main+0x20c>)
 8001a42:	f005 ff97 	bl	8007974 <HAL_TIM_IC_Start_DMA>
		  isMeasured = 0;
 8001a46:	4b44      	ldr	r3, [pc, #272]	@ (8001b58 <main+0x220>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	  //scan for user inpt for the state machine

	 //inp = *scanInp();
	  //wait again so we don't flood the serial terminal
	  //HAL_Delay(100);
	  inp = RxData[0];
 8001a4c:	4b44      	ldr	r3, [pc, #272]	@ (8001b60 <main+0x228>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <main+0x22c>)
 8001a52:	701a      	strb	r2, [r3, #0]
	  if (inp == 'i')
 8001a54:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <main+0x22c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b69      	cmp	r3, #105	@ 0x69
 8001a5a:	d102      	bne.n	8001a62 <main+0x12a>
	  {
		  State = IDLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	e00c      	b.n	8001a7c <main+0x144>
	  }
	  else if (inp == 's')
 8001a62:	4b40      	ldr	r3, [pc, #256]	@ (8001b64 <main+0x22c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b73      	cmp	r3, #115	@ 0x73
 8001a68:	d102      	bne.n	8001a70 <main+0x138>
	  {
		  State = START;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e005      	b.n	8001a7c <main+0x144>
	  }
	  else if (inp == 't')
 8001a70:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <main+0x22c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b74      	cmp	r3, #116	@ 0x74
 8001a76:	d101      	bne.n	8001a7c <main+0x144>
	  {
		  State = STOP;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	71fb      	strb	r3, [r7, #7]
	  } else {};

	  //State Machine starts here
	  switch (State)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d844      	bhi.n	8001b0c <main+0x1d4>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <main+0x150>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001aaf 	.word	0x08001aaf
 8001a90:	08001b1b 	.word	0x08001b1b
 8001a94:	08001af9 	.word	0x08001af9
		 // uart_buf_len = sprintf(uart_buf, "In IDLE state\r\n");
		  //printf("In IDLE State\r\n");
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); /// disable nShutdown pin for digital amp
		  //startSpeaker(0); //turn off speaker
		  startSineW(0); //using sinewave instead
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff feb1 	bl	8001800 <startSineW>
		  RxData[0] = '\0';
 8001a9e:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <main+0x228>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]

		  HAL_Delay(1000);
 8001aa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa8:	f001 f98e 	bl	8002dc8 <HAL_Delay>

		  break;
 8001aac:	e036      	b.n	8001b1c <main+0x1e4>
	  case START:
		  //nShutdownDamp = 1; // start digital amplifier
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		  //printf("In START State\r\n"); // print status in terminal
		  //startSpeaker(1);
		  startSineW(1); //using sinewave instead
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fea6 	bl	8001800 <startSineW>
		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		  /*the following is use to do pulse output and measure the very beginning****
		  //HAL_Delay(100);  //wait 20ms
		  //startSpeaker(0);
		   */
		  cal_val = DIST/(pulseW*v_sound);  //get the calibration value from the drift and temperature
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <main+0x230>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <main+0x1f4>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	ee17 0a90 	vmov	r0, s15
 8001ac8:	f7fe fd66 	bl	8000598 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	a113      	add	r1, pc, #76	@ (adr r1, 8001b20 <main+0x1e8>)
 8001ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad6:	f7fe fee1 	bl	800089c <__aeabi_ddiv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f8a9 	bl	8000c38 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <main+0x234>)
 8001aea:	6013      	str	r3, [r2, #0]
		  RxData[0] = '\0';
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <main+0x228>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
		  State = CALTIME;
 8001af2:	2302      	movs	r3, #2
 8001af4:	71fb      	strb	r3, [r7, #7]

		  break;
 8001af6:	e011      	b.n	8001b1c <main+0x1e4>
		  break;

	  case STOP:
		  //nShutdownDamp = 0; //stop digital amplifier
		  //startSpeaker(0);
		  startSineW(0); //using sinewave instead
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fe81 	bl	8001800 <startSineW>
		  printf("In STOP State\r\n"); // print status in terminal
 8001afe:	481c      	ldr	r0, [pc, #112]	@ (8001b70 <main+0x238>)
 8001b00:	f009 f87e 	bl	800ac00 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001b04:	2064      	movs	r0, #100	@ 0x64
 8001b06:	f001 f95f 	bl	8002dc8 <HAL_Delay>
		  break;
 8001b0a:	e007      	b.n	8001b1c <main+0x1e4>

	  default:
		  /*uart_buf_len = sprintf(uart_buf, "In Default State\r\n");
  		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
		  printf("In DEFAULT State\r\n"); // print status in terminal
 8001b0c:	4819      	ldr	r0, [pc, #100]	@ (8001b74 <main+0x23c>)
 8001b0e:	f009 f877 	bl	800ac00 <puts>
		  HAL_Delay(100);  //wait 100ms
 8001b12:	2064      	movs	r0, #100	@ 0x64
 8001b14:	f001 f958 	bl	8002dc8 <HAL_Delay>
		  break;
 8001b18:	e000      	b.n	8001b1c <main+0x1e4>
		  break;
 8001b1a:	bf00      	nop
	  blinkLED();  //call the blinkLED function
 8001b1c:	e77a      	b.n	8001a14 <main+0xdc>
 8001b1e:	bf00      	nop
 8001b20:	47ae147b 	.word	0x47ae147b
 8001b24:	3f847ae1 	.word	0x3f847ae1
 8001b28:	20000430 	.word	0x20000430
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	46c35000 	.word	0x46c35000
 8001b34:	20000d74 	.word	0x20000d74
 8001b38:	3fe00000 	.word	0x3fe00000
 8001b3c:	20000d7c 	.word	0x20000d7c
 8001b40:	20000bd8 	.word	0x20000bd8
 8001b44:	200008d8 	.word	0x200008d8
 8001b48:	20000ca0 	.word	0x20000ca0
 8001b4c:	20000924 	.word	0x20000924
 8001b50:	08010250 	.word	0x08010250
 8001b54:	0801025c 	.word	0x0801025c
 8001b58:	20000d68 	.word	0x20000d68
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	20000d84 	.word	0x20000d84
 8001b64:	20000d90 	.word	0x20000d90
 8001b68:	20000d6c 	.word	0x20000d6c
 8001b6c:	20000d70 	.word	0x20000d70
 8001b70:	08010260 	.word	0x08010260
 8001b74:	08010270 	.word	0x08010270

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	@ 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0318 	add.w	r3, r7, #24
 8001b82:	2238      	movs	r2, #56	@ 0x38
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f009 f95f 	bl	800ae4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f004 fc9a 	bl	80064d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001baa:	2340      	movs	r3, #64	@ 0x40
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001bba:	2355      	movs	r3, #85	@ 0x55
 8001bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 fd34 	bl	800663c <HAL_RCC_OscConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bda:	f000 fb8f 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bde:	230f      	movs	r3, #15
 8001be0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be2:	2303      	movs	r3, #3
 8001be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f005 f832 	bl	8006c60 <HAL_RCC_ClockConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c02:	f000 fb7b 	bl	80022fc <Error_Handler>
  }
}
 8001c06:	bf00      	nop
 8001c08:	3750      	adds	r7, #80	@ 0x50
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	@ 0x30
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2220      	movs	r2, #32
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f009 f90e 	bl	800ae4a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c2e:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001c36:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c38:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c58:	2204      	movs	r2, #4
 8001c5a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c62:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c78:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c84:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c9c:	4817      	ldr	r0, [pc, #92]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001c9e:	f001 fb1b 	bl	80032d8 <HAL_ADC_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001ca8:	f000 fb28 	bl	80022fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001cb8:	f002 fdce 	bl	8004858 <HAL_ADCEx_MultiModeConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001cc2:	f000 fb1b 	bl	80022fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_ADC1_Init+0xf0>)
 8001cc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cca:	2306      	movs	r3, #6
 8001ccc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cd2:	237f      	movs	r3, #127	@ 0x7f
 8001cd4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4806      	ldr	r0, [pc, #24]	@ (8001cfc <MX_ADC1_Init+0xec>)
 8001ce4:	f001 ff68 	bl	8003bb8 <HAL_ADC_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001cee:	f000 fb05 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	3730      	adds	r7, #48	@ 0x30
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200006e4 	.word	0x200006e4
 8001d00:	04300002 	.word	0x04300002

08001d04 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	@ 0x30
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2230      	movs	r2, #48	@ 0x30
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f009 f89a 	bl	800ae4a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_DAC1_Init+0x6c>)
 8001d18:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <MX_DAC1_Init+0x70>)
 8001d1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d1c:	4814      	ldr	r0, [pc, #80]	@ (8001d70 <MX_DAC1_Init+0x6c>)
 8001d1e:	f002 ff4e 	bl	8004bbe <HAL_DAC_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d28:	f000 fae8 	bl	80022fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4806      	ldr	r0, [pc, #24]	@ (8001d70 <MX_DAC1_Init+0x6c>)
 8001d58:	f003 f894 	bl	8004e84 <HAL_DAC_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001d62:	f000 facb 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	@ 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200007b0 	.word	0x200007b0
 8001d74:	50000800 	.word	0x50000800

08001d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <MX_I2C1_Init+0x78>)
 8001d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001d84:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <MX_I2C1_Init+0x7c>)
 8001d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d88:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001db4:	f003 ff28 	bl	8005c08 <HAL_I2C_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dbe:	f000 fa9d 	bl	80022fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4809      	ldr	r0, [pc, #36]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001dc6:	f004 faed 	bl	80063a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dd0:	f000 fa94 	bl	80022fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_I2C1_Init+0x74>)
 8001dd8:	f004 fb2f 	bl	800643a <HAL_I2CEx_ConfigDigitalFilter>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001de2:	f000 fa8b 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000824 	.word	0x20000824
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40b285c2 	.word	0x40b285c2

08001df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */
 // timer for PLL pulse width input capture. If we use prescaler 0, fclk = 170Mhz, then 5.882ns/tick
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e24:	4b35      	ldr	r3, [pc, #212]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e26:	4a36      	ldr	r2, [pc, #216]	@ (8001f00 <MX_TIM1_Init+0x108>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e36:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e50:	482a      	ldr	r0, [pc, #168]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e52:	f005 fb11 	bl	8007478 <HAL_TIM_Base_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001e5c:	f000 fa4e 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e64:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4823      	ldr	r0, [pc, #140]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e6e:	f006 f9ab 	bl	80081c8 <HAL_TIM_ConfigClockSource>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001e78:	f000 fa40 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001e7c:	481f      	ldr	r0, [pc, #124]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001e7e:	f005 fd17 	bl	80078b0 <HAL_TIM_IC_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001e88:	f000 fa38 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4817      	ldr	r0, [pc, #92]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001ea0:	f007 f91c 	bl	80090dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001eaa:	f000 fa27 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001ec6:	f006 f8e3 	bl	8008090 <HAL_TIM_IC_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ed0:	f000 fa14 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <MX_TIM1_Init+0x104>)
 8001ee4:	f006 f8d4 	bl	8008090 <HAL_TIM_IC_ConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001eee:	f000 fa05 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	@ 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200008d8 	.word	0x200008d8
 8001f00:	40012c00 	.word	0x40012c00

08001f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	@ 0x38
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//this is used to generate a sinewave, f_sys_clk/(prescalar * 100)/4 = 25khz
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f36:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8001f3e:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f40:	2210      	movs	r2, #16
 8001f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5c:	4821      	ldr	r0, [pc, #132]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f5e:	f005 fa8b 	bl	8007478 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f68:	f000 f9c8 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f76:	4619      	mov	r1, r3
 8001f78:	481a      	ldr	r0, [pc, #104]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f7a:	f006 f925 	bl	80081c8 <HAL_TIM_ConfigClockSource>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f84:	f000 f9ba 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001f88:	4816      	ldr	r0, [pc, #88]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001f8a:	f005 fb2f 	bl	80075ec <HAL_TIM_OC_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f94:	f000 f9b2 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480f      	ldr	r0, [pc, #60]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001fa8:	f007 f898 	bl	80090dc <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fb2:	f000 f9a3 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <MX_TIM2_Init+0xe0>)
 8001fce:	f005 ffe5 	bl	8007f9c <HAL_TIM_OC_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fd8:	f000 f990 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	3738      	adds	r7, #56	@ 0x38
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000924 	.word	0x20000924

08001fe8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	@ 0x38
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	615a      	str	r2, [r3, #20]
 8002018:	619a      	str	r2, [r3, #24]
  //arr/2-1 = 6800/2-1
  //timer 4 is unused right now since we are using the sinewave from timer 2
  // timer 4 is used for adc trigger event

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800201a:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <MX_TIM4_Init+0xe4>)
 800201c:	4a2c      	ldr	r2, [pc, #176]	@ (80020d0 <MX_TIM4_Init+0xe8>)
 800201e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002020:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <MX_TIM4_Init+0xe4>)
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <MX_TIM4_Init+0xe4>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6799;
 800202c:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <MX_TIM4_Init+0xe4>)
 800202e:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8002032:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b25      	ldr	r3, [pc, #148]	@ (80020cc <MX_TIM4_Init+0xe4>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <MX_TIM4_Init+0xe4>)
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002040:	4822      	ldr	r0, [pc, #136]	@ (80020cc <MX_TIM4_Init+0xe4>)
 8002042:	f005 fa19 	bl	8007478 <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800204c:	f000 f956 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	4619      	mov	r1, r3
 800205c:	481b      	ldr	r0, [pc, #108]	@ (80020cc <MX_TIM4_Init+0xe4>)
 800205e:	f006 f8b3 	bl	80081c8 <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002068:	f000 f948 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800206c:	4817      	ldr	r0, [pc, #92]	@ (80020cc <MX_TIM4_Init+0xe4>)
 800206e:	f005 fabd 	bl	80075ec <HAL_TIM_OC_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002078:	f000 f940 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800207c:	2320      	movs	r3, #32
 800207e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4810      	ldr	r0, [pc, #64]	@ (80020cc <MX_TIM4_Init+0xe4>)
 800208c:	f007 f826 	bl	80090dc <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002096:	f000 f931 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3399;
 800209e:	f640 5347 	movw	r3, #3399	@ 0xd47
 80020a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4806      	ldr	r0, [pc, #24]	@ (80020cc <MX_TIM4_Init+0xe4>)
 80020b4:	f005 ff72 	bl	8007f9c <HAL_TIM_OC_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80020be:	f000 f91d 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	3738      	adds	r7, #56	@ 0x38
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000970 	.word	0x20000970
 80020d0:	40000800 	.word	0x40000800

080020d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 80020da:	4a24      	ldr	r2, [pc, #144]	@ (800216c <MX_USART2_UART_Init+0x98>)
 80020dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 80020e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 800210c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002110:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800211e:	4812      	ldr	r0, [pc, #72]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002120:	f007 f8a4 	bl	800926c <HAL_UART_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800212a:	f000 f8e7 	bl	80022fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212e:	2100      	movs	r1, #0
 8002130:	480d      	ldr	r0, [pc, #52]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002132:	f008 f8f1 	bl	800a318 <HAL_UARTEx_SetTxFifoThreshold>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800213c:	f000 f8de 	bl	80022fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002140:	2100      	movs	r1, #0
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002144:	f008 f926 	bl	800a394 <HAL_UARTEx_SetRxFifoThreshold>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800214e:	f000 f8d5 	bl	80022fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	@ (8002168 <MX_USART2_UART_Init+0x94>)
 8002154:	f008 f8a7 	bl	800a2a6 <HAL_UARTEx_DisableFifoMode>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800215e:	f000 f8cd 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000a7c 	.word	0x20000a7c
 800216c:	40004400 	.word	0x40004400

08002170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002176:	4b30      	ldr	r3, [pc, #192]	@ (8002238 <MX_DMA_Init+0xc8>)
 8002178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217a:	4a2f      	ldr	r2, [pc, #188]	@ (8002238 <MX_DMA_Init+0xc8>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6493      	str	r3, [r2, #72]	@ 0x48
 8002182:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <MX_DMA_Init+0xc8>)
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218e:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <MX_DMA_Init+0xc8>)
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	4a29      	ldr	r2, [pc, #164]	@ (8002238 <MX_DMA_Init+0xc8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6493      	str	r3, [r2, #72]	@ 0x48
 800219a:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <MX_DMA_Init+0xc8>)
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021a6:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <MX_DMA_Init+0xc8>)
 80021a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021aa:	4a23      	ldr	r2, [pc, #140]	@ (8002238 <MX_DMA_Init+0xc8>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <MX_DMA_Init+0xc8>)
 80021b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	200b      	movs	r0, #11
 80021c4:	f002 fcc7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021c8:	200b      	movs	r0, #11
 80021ca:	f002 fcde 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	200c      	movs	r0, #12
 80021d4:	f002 fcbf 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021d8:	200c      	movs	r0, #12
 80021da:	f002 fcd6 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	200d      	movs	r0, #13
 80021e4:	f002 fcb7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021e8:	200d      	movs	r0, #13
 80021ea:	f002 fcce 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	200e      	movs	r0, #14
 80021f4:	f002 fcaf 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80021f8:	200e      	movs	r0, #14
 80021fa:	f002 fcc6 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	200f      	movs	r0, #15
 8002204:	f002 fca7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002208:	200f      	movs	r0, #15
 800220a:	f002 fcbe 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2038      	movs	r0, #56	@ 0x38
 8002214:	f002 fc9f 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002218:	2038      	movs	r0, #56	@ 0x38
 800221a:	f002 fcb6 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2039      	movs	r0, #57	@ 0x39
 8002224:	f002 fc97 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002228:	2039      	movs	r0, #57	@ 0x39
 800222a:	f002 fcae 	bl	8004b8a <HAL_NVIC_EnableIRQ>

}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000

0800223c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <MX_GPIO_Init+0x94>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <MX_GPIO_Init+0x94>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225e:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <MX_GPIO_Init+0x94>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <MX_GPIO_Init+0x94>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	4a18      	ldr	r2, [pc, #96]	@ (80022d0 <MX_GPIO_Init+0x94>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <MX_GPIO_Init+0x94>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002288:	4812      	ldr	r0, [pc, #72]	@ (80022d4 <MX_GPIO_Init+0x98>)
 800228a:	f003 fc8b 	bl	8005ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800228e:	2360      	movs	r3, #96	@ 0x60
 8002290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a4:	f003 fafc 	bl	80058a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80022a8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80022ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4619      	mov	r1, r3
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <MX_GPIO_Init+0x98>)
 80022c2:	f003 faed 	bl	80058a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	48000400 	.word	0x48000400

080022d8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//adc dma callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	//adc_val[0] = HAL_ADC_GetValue(&hadc1);
	//adc_val_f = adc_val;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	4904      	ldr	r1, [pc, #16]	@ (80022f4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80022e4:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <HAL_ADC_ConvCpltCallback+0x20>)
 80022e6:	f001 f97b 	bl	80035e0 <HAL_ADC_Start_DMA>
	return;
 80022ea:	bf00      	nop
}
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000f28 	.word	0x20000f28
 80022f8:	200006e4 	.word	0x200006e4

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <Error_Handler+0x8>

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_MspInit+0x44>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_MspInit+0x44>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6613      	str	r3, [r2, #96]	@ 0x60
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_MspInit+0x44>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_MspInit+0x44>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_MspInit+0x44>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_MspInit+0x44>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800233e:	f004 f96d 	bl	800661c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09a      	sub	sp, #104	@ 0x68
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2244      	movs	r2, #68	@ 0x44
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f008 fd6a 	bl	800ae4a <memset>
  if(hadc->Instance==ADC1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800237e:	d167      	bne.n	8002450 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002384:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002386:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f004 fe81 	bl	8007098 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800239c:	f7ff ffae 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <HAL_ADC_MspInit+0x108>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002458 <HAL_ADC_MspInit+0x108>)
 80023a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <HAL_ADC_MspInit+0x108>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_ADC_MspInit+0x108>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	4a26      	ldr	r2, [pc, #152]	@ (8002458 <HAL_ADC_MspInit+0x108>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_ADC_MspInit+0x108>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023d0:	2301      	movs	r3, #1
 80023d2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d4:	2303      	movs	r3, #3
 80023d6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e6:	f003 fa5b 	bl	80058a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 80023ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002460 <HAL_ADC_MspInit+0x110>)
 80023ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 80023f2:	2205      	movs	r2, #5
 80023f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 8002404:	2280      	movs	r2, #128	@ 0x80
 8002406:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 800240a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800240e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 8002412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002416:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 800241a:	2220      	movs	r2, #32
 800241c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002424:	480d      	ldr	r0, [pc, #52]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 8002426:	f002 ff6f 	bl	8005308 <HAL_DMA_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002430:	f7ff ff64 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a09      	ldr	r2, [pc, #36]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
 800243a:	4a08      	ldr	r2, [pc, #32]	@ (800245c <HAL_ADC_MspInit+0x10c>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2012      	movs	r0, #18
 8002446:	f002 fb86 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800244a:	2012      	movs	r0, #18
 800244c:	f002 fb9d 	bl	8004b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002450:	bf00      	nop
 8002452:	3768      	adds	r7, #104	@ 0x68
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	20000750 	.word	0x20000750
 8002460:	40020058 	.word	0x40020058

08002464 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2b      	ldr	r2, [pc, #172]	@ (8002530 <HAL_DAC_MspInit+0xcc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d14f      	bne.n	8002526 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002486:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_DAC_MspInit+0xd0>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	4a2a      	ldr	r2, [pc, #168]	@ (8002534 <HAL_DAC_MspInit+0xd0>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002492:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_DAC_MspInit+0xd0>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <HAL_DAC_MspInit+0xd0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	4a24      	ldr	r2, [pc, #144]	@ (8002534 <HAL_DAC_MspInit+0xd0>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_DAC_MspInit+0xd0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b6:	2310      	movs	r3, #16
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ba:	2303      	movs	r3, #3
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024cc:	f003 f9e8 	bl	80058a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024d2:	4a1a      	ldr	r2, [pc, #104]	@ (800253c <HAL_DAC_MspInit+0xd8>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80024d6:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024d8:	2206      	movs	r2, #6
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024de:	2210      	movs	r2, #16
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024ea:	2280      	movs	r2, #128	@ 0x80
 80024ec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ee:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 80024f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 8002500:	2220      	movs	r2, #32
 8002502:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 8002506:	2200      	movs	r2, #0
 8002508:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800250a:	480b      	ldr	r0, [pc, #44]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 800250c:	f002 fefc 	bl	8005308 <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002516:	f7ff fef1 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a06      	ldr	r2, [pc, #24]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <HAL_DAC_MspInit+0xd4>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	@ 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	50000800 	.word	0x50000800
 8002534:	40021000 	.word	0x40021000
 8002538:	200007c4 	.word	0x200007c4
 800253c:	40020030 	.word	0x40020030

08002540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b09c      	sub	sp, #112	@ 0x70
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	2244      	movs	r2, #68	@ 0x44
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f008 fc72 	bl	800ae4a <memset>
  if(hi2c->Instance==I2C1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_I2C_MspInit+0x134>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d17c      	bne.n	800266a <HAL_I2C_MspInit+0x12a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002570:	2340      	movs	r3, #64	@ 0x40
 8002572:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002578:	f107 0318 	add.w	r3, r7, #24
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fd8b 	bl	8007098 <HAL_RCCEx_PeriphCLKConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002588:	f7ff feb8 	bl	80022fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258c:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002590:	4a39      	ldr	r2, [pc, #228]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a8:	4a33      	ldr	r2, [pc, #204]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b0:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c2:	2312      	movs	r3, #18
 80025c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ce:	2304      	movs	r3, #4
 80025d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025dc:	f003 f960 	bl	80058a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e4:	2312      	movs	r3, #18
 80025e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025f0:	2304      	movs	r3, #4
 80025f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025f8:	4619      	mov	r1, r3
 80025fa:	4820      	ldr	r0, [pc, #128]	@ (800267c <HAL_I2C_MspInit+0x13c>)
 80025fc:	f003 f950 	bl	80058a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 8002606:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800260a:	6593      	str	r3, [r2, #88]	@ 0x58
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <HAL_I2C_MspInit+0x138>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 800261a:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_I2C_MspInit+0x144>)
 800261c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002620:	2211      	movs	r2, #17
 8002622:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002626:	2210      	movs	r2, #16
 8002628:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002644:	2220      	movs	r2, #32
 8002646:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800264e:	480c      	ldr	r0, [pc, #48]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002650:	f002 fe5a 	bl	8005308 <HAL_DMA_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 800265a:	f7ff fe4f 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a07      	ldr	r2, [pc, #28]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002662:	639a      	str	r2, [r3, #56]	@ 0x38
 8002664:	4a06      	ldr	r2, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0x140>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800266a:	bf00      	nop
 800266c:	3770      	adds	r7, #112	@ 0x70
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40005400 	.word	0x40005400
 8002678:	40021000 	.word	0x40021000
 800267c:	48000400 	.word	0x48000400
 8002680:	20000878 	.word	0x20000878
 8002684:	40020044 	.word	0x40020044

08002688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	@ 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	@ (8002848 <HAL_TIM_Base_MspInit+0x1c0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f040 808b 	bne.w	80027c2 <HAL_TIM_Base_MspInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ac:	4b67      	ldr	r3, [pc, #412]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80026ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b0:	4a66      	ldr	r2, [pc, #408]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80026b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026b8:	4b64      	ldr	r3, [pc, #400]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80026ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b61      	ldr	r3, [pc, #388]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a60      	ldr	r2, [pc, #384]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d0:	4b5e      	ldr	r3, [pc, #376]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026ee:	2306      	movs	r3, #6
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fc:	f003 f8d0 	bl	80058a0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002700:	4b53      	ldr	r3, [pc, #332]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002702:	4a54      	ldr	r2, [pc, #336]	@ (8002854 <HAL_TIM_Base_MspInit+0x1cc>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002706:	4b52      	ldr	r3, [pc, #328]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002708:	222a      	movs	r2, #42	@ 0x2a
 800270a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270c:	4b50      	ldr	r3, [pc, #320]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b4f      	ldr	r3, [pc, #316]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 800271a:	2280      	movs	r2, #128	@ 0x80
 800271c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800271e:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002724:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002726:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002728:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800272c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800272e:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002730:	2220      	movs	r2, #32
 8002732:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002734:	4b46      	ldr	r3, [pc, #280]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002736:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800273a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800273c:	4844      	ldr	r0, [pc, #272]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 800273e:	f002 fde3 	bl	8005308 <HAL_DMA_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 8002748:	f7ff fdd8 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a40      	ldr	r2, [pc, #256]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24
 8002752:	4a3f      	ldr	r2, [pc, #252]	@ (8002850 <HAL_TIM_Base_MspInit+0x1c8>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8002758:	4b3f      	ldr	r3, [pc, #252]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 800275a:	4a40      	ldr	r2, [pc, #256]	@ (800285c <HAL_TIM_Base_MspInit+0x1d4>)
 800275c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 800275e:	4b3e      	ldr	r3, [pc, #248]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002760:	222b      	movs	r2, #43	@ 0x2b
 8002762:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002776:	4b38      	ldr	r3, [pc, #224]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800277e:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002784:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002786:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002788:	2220      	movs	r2, #32
 800278a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800278c:	4b32      	ldr	r3, [pc, #200]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 800278e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002792:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002794:	4830      	ldr	r0, [pc, #192]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 8002796:	f002 fdb7 	bl	8005308 <HAL_DMA_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_TIM_Base_MspInit+0x11c>
    {
      Error_Handler();
 80027a0:	f7ff fdac 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80027aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <HAL_TIM_Base_MspInit+0x1d0>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	201b      	movs	r0, #27
 80027b6:	f002 f9ce 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80027ba:	201b      	movs	r0, #27
 80027bc:	f002 f9e5 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027c0:	e03e      	b.n	8002840 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ca:	d10c      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027cc:	4b1f      	ldr	r3, [pc, #124]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
}
 80027e4:	e02c      	b.n	8002840 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d127      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f0:	4b16      	ldr	r3, [pc, #88]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	4a15      	ldr	r2, [pc, #84]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280c:	4a0f      	ldr	r2, [pc, #60]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_TIM_Base_MspInit+0x1c4>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002820:	2340      	movs	r3, #64	@ 0x40
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002830:	2302      	movs	r3, #2
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	480a      	ldr	r0, [pc, #40]	@ (8002864 <HAL_TIM_Base_MspInit+0x1dc>)
 800283c:	f003 f830 	bl	80058a0 <HAL_GPIO_Init>
}
 8002840:	bf00      	nop
 8002842:	3730      	adds	r7, #48	@ 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40021000 	.word	0x40021000
 8002850:	200009bc 	.word	0x200009bc
 8002854:	40020008 	.word	0x40020008
 8002858:	20000a1c 	.word	0x20000a1c
 800285c:	4002001c 	.word	0x4002001c
 8002860:	40000800 	.word	0x40000800
 8002864:	48000400 	.word	0x48000400

08002868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b09a      	sub	sp, #104	@ 0x68
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	2244      	movs	r2, #68	@ 0x44
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f008 fade 	bl	800ae4a <memset>
  if(huart->Instance==USART2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a49      	ldr	r2, [pc, #292]	@ (80029b8 <HAL_UART_MspInit+0x150>)
 8002894:	4293      	cmp	r3, r2
 8002896:	f040 808a 	bne.w	80029ae <HAL_UART_MspInit+0x146>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800289a:	2302      	movs	r3, #2
 800289c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fbf6 	bl	8007098 <HAL_RCCEx_PeriphCLKConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028b2:	f7ff fd23 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028b6:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <HAL_UART_MspInit+0x154>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	4a40      	ldr	r2, [pc, #256]	@ (80029bc <HAL_UART_MspInit+0x154>)
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_UART_MspInit+0x154>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <HAL_UART_MspInit+0x154>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	4a3a      	ldr	r2, [pc, #232]	@ (80029bc <HAL_UART_MspInit+0x154>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028da:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <HAL_UART_MspInit+0x154>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80028e6:	230c      	movs	r3, #12
 80028e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028f6:	2307      	movs	r3, #7
 80028f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028fe:	4619      	mov	r1, r3
 8002900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002904:	f002 ffcc 	bl	80058a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel2;
 8002908:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 800290a:	4a2e      	ldr	r2, [pc, #184]	@ (80029c4 <HAL_UART_MspInit+0x15c>)
 800290c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002910:	221a      	movs	r2, #26
 8002912:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002920:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002922:	2280      	movs	r2, #128	@ 0x80
 8002924:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002932:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002934:	2220      	movs	r2, #32
 8002936:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 800293a:	2200      	movs	r2, #0
 800293c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800293e:	4820      	ldr	r0, [pc, #128]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002940:	f002 fce2 	bl	8005308 <HAL_DMA_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800294a:	f7ff fcd7 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002956:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_UART_MspInit+0x158>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Channel1;
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 800295e:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_UART_MspInit+0x164>)
 8002960:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 8002964:	221b      	movs	r2, #27
 8002966:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 800296a:	2210      	movs	r2, #16
 800296c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297a:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002992:	480d      	ldr	r0, [pc, #52]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 8002994:	f002 fcb8 	bl	8005308 <HAL_DMA_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800299e:	f7ff fcad 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a08      	ldr	r2, [pc, #32]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 80029a6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029a8:	4a07      	ldr	r2, [pc, #28]	@ (80029c8 <HAL_UART_MspInit+0x160>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80029ae:	bf00      	nop
 80029b0:	3768      	adds	r7, #104	@ 0x68
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40004400 	.word	0x40004400
 80029bc:	40021000 	.word	0x40021000
 80029c0:	20000b10 	.word	0x20000b10
 80029c4:	4002041c 	.word	0x4002041c
 80029c8:	20000b70 	.word	0x20000b70
 80029cc:	40020408 	.word	0x40020408

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <NMI_Handler+0x4>

080029d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <HardFault_Handler+0x4>

080029e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <MemManage_Handler+0x4>

080029e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <BusFault_Handler+0x4>

080029f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <UsageFault_Handler+0x4>

080029f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a26:	f000 f9b1 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <DMA1_Channel1_IRQHandler+0x10>)
 8002a36:	f002 fde3 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200009bc 	.word	0x200009bc

08002a44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <DMA1_Channel2_IRQHandler+0x10>)
 8002a4a:	f002 fdd9 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000a1c 	.word	0x20000a1c

08002a58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <DMA1_Channel3_IRQHandler+0x10>)
 8002a5e:	f002 fdcf 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200007c4 	.word	0x200007c4

08002a6c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <DMA1_Channel4_IRQHandler+0x10>)
 8002a72:	f002 fdc5 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000878 	.word	0x20000878

08002a80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <DMA1_Channel5_IRQHandler+0x10>)
 8002a86:	f002 fdbb 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000750 	.word	0x20000750

08002a94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <ADC1_2_IRQHandler+0x10>)
 8002a9a:	f000 fe55 	bl	8003748 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200006e4 	.word	0x200006e4

08002aa8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <TIM1_CC_IRQHandler+0x10>)
 8002aae:	f005 f925 	bl	8007cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200008d8 	.word	0x200008d8

08002abc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <DMA2_Channel1_IRQHandler+0x10>)
 8002ac2:	f002 fd9d 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000b70 	.word	0x20000b70

08002ad0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <DMA2_Channel2_IRQHandler+0x10>)
 8002ad6:	f002 fd93 	bl	8005600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000b10 	.word	0x20000b10

08002ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return 1;
 8002ae8:	2301      	movs	r3, #1
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_kill>:

int _kill(int pid, int sig)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002afe:	f008 fa03 	bl	800af08 <__errno>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2216      	movs	r2, #22
 8002b06:	601a      	str	r2, [r3, #0]
  return -1;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_exit>:

void _exit (int status)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ffe7 	bl	8002af4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b26:	bf00      	nop
 8002b28:	e7fd      	b.n	8002b26 <_exit+0x12>

08002b2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e00a      	b.n	8002b52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b3c:	f3af 8000 	nop.w
 8002b40:	4601      	mov	r1, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	b2ca      	uxtb	r2, r1
 8002b4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dbf0      	blt.n	8002b3c <_read+0x12>
  }

  return len;
 8002b5a:	687b      	ldr	r3, [r7, #4]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e009      	b.n	8002b8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	60ba      	str	r2, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbf1      	blt.n	8002b76 <_write+0x12>
  }
  return len;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_close>:

int _close(int file)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bc4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_isatty>:

int _isatty(int file)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bdc:	2301      	movs	r3, #1
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <_sbrk+0x5c>)
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <_sbrk+0x60>)
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <_sbrk+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c20:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <_sbrk+0x64>)
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <_sbrk+0x68>)
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <_sbrk+0x64>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d207      	bcs.n	8002c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c34:	f008 f968 	bl	800af08 <__errno>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	e009      	b.n	8002c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c44:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <_sbrk+0x64>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <_sbrk+0x64>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <_sbrk+0x64>)
 8002c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20008000 	.word	0x20008000
 8002c64:	00000400 	.word	0x00000400
 8002c68:	200010bc 	.word	0x200010bc
 8002c6c:	200013d0 	.word	0x200013d0

08002c70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <SystemInit+0x20>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7a:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <SystemInit+0x20>)
 8002c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c94:	480d      	ldr	r0, [pc, #52]	@ (8002ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c98:	f7ff ffea 	bl	8002c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c9e:	490d      	ldr	r1, [pc, #52]	@ (8002cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd8 <LoopForever+0xe>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce0 <LoopForever+0x16>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f008 f927 	bl	800af14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cc6:	f7fe fe37 	bl	8001938 <main>

08002cca <LoopForever>:

LoopForever:
    b LoopForever
 8002cca:	e7fe      	b.n	8002cca <LoopForever>
  ldr   r0, =_estack
 8002ccc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd4:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 8002cd8:	0801083c 	.word	0x0801083c
  ldr r2, =_sbss
 8002cdc:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 8002ce0:	200013d0 	.word	0x200013d0

08002ce4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <COMP1_2_3_IRQHandler>

08002ce6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f001 ff25 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f000 f80e 	bl	8002d18 <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	71fb      	strb	r3, [r7, #7]
 8002d06:	e001      	b.n	8002d0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d08:	f7ff fafe 	bl	8002308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d0c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d24:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <HAL_InitTick+0x68>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d022      	beq.n	8002d72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d2c:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <HAL_InitTick+0x6c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <HAL_InitTick+0x68>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 ff30 	bl	8004ba6 <HAL_SYSTICK_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10f      	bne.n	8002d6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	d809      	bhi.n	8002d66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d52:	2200      	movs	r2, #0
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5a:	f001 fefc 	bl	8004b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <HAL_InitTick+0x70>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e007      	b.n	8002d76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e004      	b.n	8002d76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000010 	.word	0x20000010
 8002d84:	20000008 	.word	0x20000008
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_IncTick+0x1c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_IncTick+0x20>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a03      	ldr	r2, [pc, #12]	@ (8002da8 <HAL_IncTick+0x1c>)
 8002d9c:	6013      	str	r3, [r2, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	200010c0 	.word	0x200010c0
 8002dac:	20000010 	.word	0x20000010

08002db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <HAL_GetTick+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200010c0 	.word	0x200010c0

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff ffee 	bl	8002db0 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d004      	beq.n	8002dec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de2:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <HAL_Delay+0x40>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dec:	bf00      	nop
 8002dee:	f7ff ffdf 	bl	8002db0 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d8f7      	bhi.n	8002dee <HAL_Delay+0x26>
  {
  }
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000010 	.word	0x20000010

08002e0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3360      	adds	r3, #96	@ 0x60
 8002e86:	461a      	mov	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <LL_ADC_SetOffset+0x44>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	03fff000 	.word	0x03fff000

08002ebc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3360      	adds	r3, #96	@ 0x60
 8002eca:	461a      	mov	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3360      	adds	r3, #96	@ 0x60
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3360      	adds	r3, #96	@ 0x60
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3360      	adds	r3, #96	@ 0x60
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	615a      	str	r2, [r3, #20]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3330      	adds	r3, #48	@ 0x30
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	4413      	add	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	211f      	movs	r1, #31
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	f003 011f 	and.w	r1, r3, #31
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3314      	adds	r3, #20
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	0e5b      	lsrs	r3, r3, #25
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0d1b      	lsrs	r3, r3, #20
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2107      	movs	r1, #7
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	401a      	ands	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0d1b      	lsrs	r3, r3, #20
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	431a      	orrs	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0318 	and.w	r3, r3, #24
 80030ce:	4908      	ldr	r1, [pc, #32]	@ (80030f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030d0:	40d9      	lsrs	r1, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	400b      	ands	r3, r1
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	0007ffff 	.word	0x0007ffff

080030f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 031f 	and.w	r3, r3, #31
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800313c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6093      	str	r3, [r2, #8]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003164:	d101      	bne.n	800316a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003188:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800318c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b4:	d101      	bne.n	80031ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003204:	f043 0202 	orr.w	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <LL_ADC_IsEnabled+0x18>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_ADC_IsEnabled+0x1a>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d101      	bne.n	8003256 <LL_ADC_IsDisableOngoing+0x18>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_ADC_IsDisableOngoing+0x1a>
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003274:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003278:	f043 0204 	orr.w	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d101      	bne.n	80032a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d101      	bne.n	80032ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b089      	sub	sp, #36	@ 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e167      	b.n	80035c2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff f825 	bl	8002350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff19 	bl	8003150 <LL_ADC_IsDeepPowerDownEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff feff 	bl	800312c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff34 	bl	80031a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d115      	bne.n	800336a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff18 	bl	8003178 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003348:	4ba0      	ldr	r3, [pc, #640]	@ (80035cc <HAL_ADC_Init+0x2f4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	4aa0      	ldr	r2, [pc, #640]	@ (80035d0 <HAL_ADC_Init+0x2f8>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800335c:	e002      	b.n	8003364 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b01      	subs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f9      	bne.n	800335e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff16 	bl	80031a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff76 	bl	800328c <LL_ADC_REG_IsConversionOngoing>
 80033a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 8100 	bne.w	80035b0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 80fc 	bne.w	80035b0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033c0:	f043 0202 	orr.w	r2, r3, #2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff23 	bl	8003218 <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033dc:	f7ff ff1c 	bl	8003218 <LL_ADC_IsEnabled>
 80033e0:	4604      	mov	r4, r0
 80033e2:	487c      	ldr	r0, [pc, #496]	@ (80035d4 <HAL_ADC_Init+0x2fc>)
 80033e4:	f7ff ff18 	bl	8003218 <LL_ADC_IsEnabled>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4323      	orrs	r3, r4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4619      	mov	r1, r3
 80033f6:	4878      	ldr	r0, [pc, #480]	@ (80035d8 <HAL_ADC_Init+0x300>)
 80033f8:	f7ff fd08 	bl	8002e0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7f5b      	ldrb	r3, [r3, #29]
 8003400:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003406:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800340c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003412:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800341a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003426:	2b01      	cmp	r3, #1
 8003428:	d106      	bne.n	8003438 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	045b      	lsls	r3, r3, #17
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	4b60      	ldr	r3, [pc, #384]	@ (80035dc <HAL_ADC_Init+0x304>)
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	430b      	orrs	r3, r1
 8003466:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff15 	bl	80032b2 <LL_ADC_INJ_IsConversionOngoing>
 8003488:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d16d      	bne.n	800356c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d16a      	bne.n	800356c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800349a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b2:	f023 0302 	bic.w	r3, r3, #2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	430b      	orrs	r3, r1
 80034be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d017      	beq.n	80034f8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80034d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6911      	ldr	r1, [r2, #16]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80034f6:	e013      	b.n	8003520 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003506:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800351c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003526:	2b01      	cmp	r3, #1
 8003528:	d118      	bne.n	800355c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003540:	4311      	orrs	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800354c:	430a      	orrs	r2, r1
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	611a      	str	r2, [r3, #16]
 800355a:	e007      	b.n	800356c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10c      	bne.n	800358e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	f023 010f 	bic.w	r1, r3, #15
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	1e5a      	subs	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
 800358c:	e007      	b.n	800359e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 020f 	bic.w	r2, r2, #15
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035ae:	e007      	b.n	80035c0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f043 0210 	orr.w	r2, r3, #16
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000008 	.word	0x20000008
 80035d0:	053e2d63 	.word	0x053e2d63
 80035d4:	50000100 	.word	0x50000100
 80035d8:	50000300 	.word	0x50000300
 80035dc:	fff04007 	.word	0xfff04007

080035e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ec:	4851      	ldr	r0, [pc, #324]	@ (8003734 <HAL_ADC_Start_DMA+0x154>)
 80035ee:	f7ff fd81 	bl	80030f4 <LL_ADC_GetMultimode>
 80035f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fe47 	bl	800328c <LL_ADC_REG_IsConversionOngoing>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 808f 	bne.w	8003724 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_ADC_Start_DMA+0x34>
 8003610:	2302      	movs	r3, #2
 8003612:	e08a      	b.n	800372a <HAL_ADC_Start_DMA+0x14a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b05      	cmp	r3, #5
 8003626:	d002      	beq.n	800362e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b09      	cmp	r3, #9
 800362c:	d173      	bne.n	8003716 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 feb2 	bl	8004398 <ADC_Enable>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d166      	bne.n	800370c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a38      	ldr	r2, [pc, #224]	@ (8003738 <HAL_ADC_Start_DMA+0x158>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d002      	beq.n	8003662 <HAL_ADC_Start_DMA+0x82>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	e001      	b.n	8003666 <HAL_ADC_Start_DMA+0x86>
 8003662:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	4293      	cmp	r3, r2
 800366c:	d002      	beq.n	8003674 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f023 0206 	bic.w	r2, r3, #6
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
 8003698:	e002      	b.n	80036a0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	4a25      	ldr	r2, [pc, #148]	@ (800373c <HAL_ADC_Start_DMA+0x15c>)
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	4a24      	ldr	r2, [pc, #144]	@ (8003740 <HAL_ADC_Start_DMA+0x160>)
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	4a23      	ldr	r2, [pc, #140]	@ (8003744 <HAL_ADC_Start_DMA+0x164>)
 80036b6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	221c      	movs	r2, #28
 80036be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0210 	orr.w	r2, r2, #16
 80036d6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3340      	adds	r3, #64	@ 0x40
 80036f2:	4619      	mov	r1, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f001 feae 	bl	8005458 <HAL_DMA_Start_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fdad 	bl	8003264 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800370a:	e00d      	b.n	8003728 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003714:	e008      	b.n	8003728 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003722:	e001      	b.n	8003728 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003724:	2302      	movs	r3, #2
 8003726:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	50000300 	.word	0x50000300
 8003738:	50000100 	.word	0x50000100
 800373c:	08004563 	.word	0x08004563
 8003740:	0800463b 	.word	0x0800463b
 8003744:	08004657 	.word	0x08004657

08003748 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	@ 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003764:	4883      	ldr	r0, [pc, #524]	@ (8003974 <HAL_ADC_IRQHandler+0x22c>)
 8003766:	f7ff fcc5 	bl	80030f4 <LL_ADC_GetMultimode>
 800376a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d017      	beq.n	80037a6 <HAL_ADC_IRQHandler+0x5e>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f001 f853 	bl	8004844 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2202      	movs	r2, #2
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_ADC_IRQHandler+0x72>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8085 	beq.w	80038d0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d07f      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fbdf 	bl	8002fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d064      	beq.n	80038c2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003978 <HAL_ADC_IRQHandler+0x230>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d002      	beq.n	8003808 <HAL_ADC_IRQHandler+0xc0>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	e001      	b.n	800380c <HAL_ADC_IRQHandler+0xc4>
 8003808:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	4293      	cmp	r3, r2
 8003812:	d008      	beq.n	8003826 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d002      	beq.n	8003826 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b09      	cmp	r3, #9
 8003824:	d104      	bne.n	8003830 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	e00d      	b.n	800384c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <HAL_ADC_IRQHandler+0x230>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d002      	beq.n	8003840 <HAL_ADC_IRQHandler+0xf8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e001      	b.n	8003844 <HAL_ADC_IRQHandler+0xfc>
 8003840:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003844:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d135      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d12e      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fd0f 	bl	800328c <LL_ADC_REG_IsConversionOngoing>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11a      	bne.n	80038aa <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 020c 	bic.w	r2, r2, #12
 8003882:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d112      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038a8:	e00b      	b.n	80038c2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe fd08 	bl	80022d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	220c      	movs	r2, #12
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x19c>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 809e 	beq.w	8003a2c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8098 	beq.w	8003a2c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fb88 	bl	800302e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800391e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fb43 	bl	8002fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800392a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a11      	ldr	r2, [pc, #68]	@ (8003978 <HAL_ADC_IRQHandler+0x230>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d002      	beq.n	800393c <HAL_ADC_IRQHandler+0x1f4>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	e001      	b.n	8003940 <HAL_ADC_IRQHandler+0x1f8>
 800393c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	4293      	cmp	r3, r2
 8003946:	d008      	beq.n	800395a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d002      	beq.n	800395a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b07      	cmp	r3, #7
 8003958:	d104      	bne.n	8003964 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	e011      	b.n	8003988 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a03      	ldr	r2, [pc, #12]	@ (8003978 <HAL_ADC_IRQHandler+0x230>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d006      	beq.n	800397c <HAL_ADC_IRQHandler+0x234>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	e005      	b.n	8003980 <HAL_ADC_IRQHandler+0x238>
 8003974:	50000300 	.word	0x50000300
 8003978:	50000100 	.word	0x50000100
 800397c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003980:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d047      	beq.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x260>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03f      	beq.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13a      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b40      	cmp	r3, #64	@ 0x40
 80039b4:	d133      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d12e      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fc74 	bl	80032b2 <LL_ADC_INJ_IsConversionOngoing>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11a      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039de:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d112      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a04:	e00b      	b.n	8003a1e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	f043 0210 	orr.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fee8 	bl	80047f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2260      	movs	r2, #96	@ 0x60
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <HAL_ADC_IRQHandler+0x312>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f89f 	bl	8003b90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2280      	movs	r2, #128	@ 0x80
 8003a58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x342>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fece 	bl	800481c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <HAL_ADC_IRQHandler+0x372>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00d      	beq.n	8003aba <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fec0 	bl	8004830 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d036      	beq.n	8003b32 <HAL_ADC_IRQHandler+0x3ea>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d031      	beq.n	8003b32 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ada:	e014      	b.n	8003b06 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ae2:	4825      	ldr	r0, [pc, #148]	@ (8003b78 <HAL_ADC_IRQHandler+0x430>)
 8003ae4:	f7ff fb14 	bl	8003110 <LL_ADC_GetMultiDMATransfer>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003aee:	2301      	movs	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	e008      	b.n	8003b06 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003b02:	2301      	movs	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10e      	bne.n	8003b2a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f83d 	bl	8003ba4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2210      	movs	r2, #16
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d018      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x426>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0208 	orr.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fe4d 	bl	8004808 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b6e:	bf00      	nop
 8003b70:	3728      	adds	r7, #40	@ 0x28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	50000300 	.word	0x50000300

08003b7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0b6      	sub	sp, #216	@ 0xd8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x22>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e3c8      	b.n	800436c <HAL_ADC_ConfigChannel+0x7b4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fb50 	bl	800328c <LL_ADC_REG_IsConversionOngoing>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 83ad 	bne.w	800434e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f7ff f9e8 	bl	8002fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fb3e 	bl	800328c <LL_ADC_REG_IsConversionOngoing>
 8003c10:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fb4a 	bl	80032b2 <LL_ADC_INJ_IsConversionOngoing>
 8003c1e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 81d9 	bne.w	8003fde <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f040 81d4 	bne.w	8003fde <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c3e:	d10f      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7ff fa02 	bl	8003054 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff f996 	bl	8002f8a <LL_ADC_SetSamplingTimeCommonConfig>
 8003c5e:	e00e      	b.n	8003c7e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6819      	ldr	r1, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f7ff f9f1 	bl	8003054 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff f986 	bl	8002f8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d022      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6919      	ldr	r1, [r3, #16]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cb0:	f7ff f8e0 	bl	8002e74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6919      	ldr	r1, [r3, #16]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f7ff f92c 	bl	8002f1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x124>
 8003cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cda:	e000      	b.n	8003cde <HAL_ADC_ConfigChannel+0x126>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7ff f938 	bl	8002f54 <LL_ADC_SetOffsetSaturation>
 8003ce4:	e17b      	b.n	8003fde <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f8e5 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x15a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f8da 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	0e9b      	lsrs	r3, r3, #26
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	e01e      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x198>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff f8cf 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e004      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1b0>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	e018      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x1e2>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d106      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f89e 	bl	8002ee8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f882 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x220>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff f877 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	e01e      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x25e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f86c 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003e06:	2320      	movs	r3, #32
 8003e08:	e004      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x276>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	e018      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x2a8>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d106      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff f83b 	bl	8002ee8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2102      	movs	r1, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff f81f 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x2e6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f814 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	0e9b      	lsrs	r3, r3, #26
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	e01e      	b.n	8003edc <HAL_ADC_ConfigChannel+0x324>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff f809 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e004      	b.n	8003eda <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x33c>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	e016      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x36a>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003f14:	2320      	movs	r3, #32
 8003f16:	e004      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d106      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe ffda 	bl	8002ee8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2103      	movs	r1, #3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe ffbe 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x3a8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2103      	movs	r1, #3
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe ffb3 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 021f 	and.w	r2, r3, #31
 8003f5e:	e017      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x3d8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2103      	movs	r1, #3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe ffa8 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003f82:	2320      	movs	r3, #32
 8003f84:	e003      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003f86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x3f0>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	e011      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x414>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003fb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e003      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d106      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe ff85 	bl	8002ee8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f918 	bl	8003218 <LL_ADC_IsEnabled>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 8140 	bne.w	8004270 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f7ff f855 	bl	80030ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4a8f      	ldr	r2, [pc, #572]	@ (8004244 <HAL_ADC_ConfigChannel+0x68c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	f040 8131 	bne.w	8004270 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x47e>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0e9b      	lsrs	r3, r3, #26
 8004024:	3301      	adds	r3, #1
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2b09      	cmp	r3, #9
 800402c:	bf94      	ite	ls
 800402e:	2301      	movls	r3, #1
 8004030:	2300      	movhi	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e019      	b.n	800406a <HAL_ADC_ConfigChannel+0x4b2>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004046:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800404e:	2320      	movs	r3, #32
 8004050:	e003      	b.n	800405a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2b09      	cmp	r3, #9
 8004062:	bf94      	ite	ls
 8004064:	2301      	movls	r3, #1
 8004066:	2300      	movhi	r3, #0
 8004068:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800406a:	2b00      	cmp	r3, #0
 800406c:	d079      	beq.n	8004162 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_ADC_ConfigChannel+0x4d2>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	0e9b      	lsrs	r3, r3, #26
 8004080:	3301      	adds	r3, #1
 8004082:	069b      	lsls	r3, r3, #26
 8004084:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004088:	e015      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x4fe>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800409a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800409c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80040a2:	2320      	movs	r3, #32
 80040a4:	e003      	b.n	80040ae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	3301      	adds	r3, #1
 80040b0:	069b      	lsls	r3, r3, #26
 80040b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x51e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	3301      	adds	r3, #1
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	e017      	b.n	8004106 <HAL_ADC_ConfigChannel+0x54e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80040ee:	2320      	movs	r3, #32
 80040f0:	e003      	b.n	80040fa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80040f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f4:	fab3 f383 	clz	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2101      	movs	r1, #1
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	ea42 0103 	orr.w	r1, r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x574>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	0e9b      	lsrs	r3, r3, #26
 800411c:	3301      	adds	r3, #1
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	051b      	lsls	r3, r3, #20
 800412a:	e018      	b.n	800415e <HAL_ADC_ConfigChannel+0x5a6>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800413a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800413e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3301      	adds	r3, #1
 8004152:	f003 021f 	and.w	r2, r3, #31
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800415e:	430b      	orrs	r3, r1
 8004160:	e081      	b.n	8004266 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_ADC_ConfigChannel+0x5c6>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	3301      	adds	r3, #1
 8004176:	069b      	lsls	r3, r3, #26
 8004178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800417c:	e015      	b.n	80041aa <HAL_ADC_ConfigChannel+0x5f2>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800418c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004196:	2320      	movs	r3, #32
 8004198:	e003      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	069b      	lsls	r3, r3, #26
 80041a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x612>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	3301      	adds	r3, #1
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f303 	lsl.w	r3, r1, r3
 80041c8:	e017      	b.n	80041fa <HAL_ADC_ConfigChannel+0x642>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	61fb      	str	r3, [r7, #28]
  return result;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e003      	b.n	80041ee <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	ea42 0103 	orr.w	r1, r2, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x66e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0e9b      	lsrs	r3, r3, #26
 8004210:	3301      	adds	r3, #1
 8004212:	f003 021f 	and.w	r2, r3, #31
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	3b1e      	subs	r3, #30
 800421e:	051b      	lsls	r3, r3, #20
 8004220:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004224:	e01e      	b.n	8004264 <HAL_ADC_ConfigChannel+0x6ac>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	613b      	str	r3, [r7, #16]
  return result;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800423e:	2320      	movs	r3, #32
 8004240:	e006      	b.n	8004250 <HAL_ADC_ConfigChannel+0x698>
 8004242:	bf00      	nop
 8004244:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	f003 021f 	and.w	r2, r3, #31
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	3b1e      	subs	r3, #30
 800425e:	051b      	lsls	r3, r3, #20
 8004260:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004264:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426a:	4619      	mov	r1, r3
 800426c:	f7fe fef2 	bl	8003054 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b3f      	ldr	r3, [pc, #252]	@ (8004374 <HAL_ADC_ConfigChannel+0x7bc>)
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d071      	beq.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800427c:	483e      	ldr	r0, [pc, #248]	@ (8004378 <HAL_ADC_ConfigChannel+0x7c0>)
 800427e:	f7fe fdeb 	bl	8002e58 <LL_ADC_GetCommonPathInternalCh>
 8004282:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a3c      	ldr	r2, [pc, #240]	@ (800437c <HAL_ADC_ConfigChannel+0x7c4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_ADC_ConfigChannel+0x6e2>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3a      	ldr	r2, [pc, #232]	@ (8004380 <HAL_ADC_ConfigChannel+0x7c8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d127      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800429a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800429e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d121      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ae:	d157      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042b8:	4619      	mov	r1, r3
 80042ba:	482f      	ldr	r0, [pc, #188]	@ (8004378 <HAL_ADC_ConfigChannel+0x7c0>)
 80042bc:	f7fe fdb9 	bl	8002e32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c0:	4b30      	ldr	r3, [pc, #192]	@ (8004384 <HAL_ADC_ConfigChannel+0x7cc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	4a30      	ldr	r2, [pc, #192]	@ (8004388 <HAL_ADC_ConfigChannel+0x7d0>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042da:	e002      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f9      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e8:	e03a      	b.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a27      	ldr	r2, [pc, #156]	@ (800438c <HAL_ADC_ConfigChannel+0x7d4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d113      	bne.n	800431c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a22      	ldr	r2, [pc, #136]	@ (8004390 <HAL_ADC_ConfigChannel+0x7d8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02a      	beq.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800430a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004312:	4619      	mov	r1, r3
 8004314:	4818      	ldr	r0, [pc, #96]	@ (8004378 <HAL_ADC_ConfigChannel+0x7c0>)
 8004316:	f7fe fd8c 	bl	8002e32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800431a:	e021      	b.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1c      	ldr	r2, [pc, #112]	@ (8004394 <HAL_ADC_ConfigChannel+0x7dc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d11c      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800432a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d116      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <HAL_ADC_ConfigChannel+0x7d8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d011      	beq.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800433c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004340:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004344:	4619      	mov	r1, r3
 8004346:	480c      	ldr	r0, [pc, #48]	@ (8004378 <HAL_ADC_ConfigChannel+0x7c0>)
 8004348:	f7fe fd73 	bl	8002e32 <LL_ADC_SetCommonPathInternalCh>
 800434c:	e008      	b.n	8004360 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004368:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800436c:	4618      	mov	r0, r3
 800436e:	37d8      	adds	r7, #216	@ 0xd8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	80080000 	.word	0x80080000
 8004378:	50000300 	.word	0x50000300
 800437c:	c3210000 	.word	0xc3210000
 8004380:	90c00010 	.word	0x90c00010
 8004384:	20000008 	.word	0x20000008
 8004388:	053e2d63 	.word	0x053e2d63
 800438c:	c7520000 	.word	0xc7520000
 8004390:	50000100 	.word	0x50000100
 8004394:	cb840000 	.word	0xcb840000

08004398 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe ff35 	bl	8003218 <LL_ADC_IsEnabled>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d169      	bne.n	8004488 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <ADC_Enable+0xfc>)
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c6:	f043 0210 	orr.w	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d2:	f043 0201 	orr.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e055      	b.n	800448a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fef0 	bl	80031c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043e8:	482b      	ldr	r0, [pc, #172]	@ (8004498 <ADC_Enable+0x100>)
 80043ea:	f7fe fd35 	bl	8002e58 <LL_ADC_GetCommonPathInternalCh>
 80043ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043f8:	4b28      	ldr	r3, [pc, #160]	@ (800449c <ADC_Enable+0x104>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	4a28      	ldr	r2, [pc, #160]	@ (80044a0 <ADC_Enable+0x108>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004412:	e002      	b.n	800441a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3b01      	subs	r3, #1
 8004418:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f9      	bne.n	8004414 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004420:	f7fe fcc6 	bl	8002db0 <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004426:	e028      	b.n	800447a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe fef3 	bl	8003218 <LL_ADC_IsEnabled>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fec3 	bl	80031c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004442:	f7fe fcb5 	bl	8002db0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d914      	bls.n	800447a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d00d      	beq.n	800447a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004462:	f043 0210 	orr.w	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e007      	b.n	800448a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d1cf      	bne.n	8004428 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	8000003f 	.word	0x8000003f
 8004498:	50000300 	.word	0x50000300
 800449c:	20000008 	.word	0x20000008
 80044a0:	053e2d63 	.word	0x053e2d63

080044a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fec4 	bl	800323e <LL_ADC_IsDisableOngoing>
 80044b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe feab 	bl	8003218 <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d047      	beq.n	8004558 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d144      	bne.n	8004558 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030d 	and.w	r3, r3, #13
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10c      	bne.n	80044f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fe85 	bl	80031f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2203      	movs	r2, #3
 80044ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044ee:	f7fe fc5f 	bl	8002db0 <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044f4:	e029      	b.n	800454a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	f043 0210 	orr.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e023      	b.n	800455a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004512:	f7fe fc4d 	bl	8002db0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d914      	bls.n	800454a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e007      	b.n	800455a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1dc      	bne.n	8004512 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004578:	2b00      	cmp	r3, #0
 800457a:	d14b      	bne.n	8004614 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fd08 	bl	8002fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d032      	beq.n	800460c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d12b      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11f      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045d8:	e018      	b.n	800460c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d111      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7fd fe63 	bl	80022d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004612:	e00e      	b.n	8004632 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fabf 	bl	8003ba4 <HAL_ADC_ErrorCallback>
}
 8004626:	e004      	b.n	8004632 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fa97 	bl	8003b7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fa91 	bl	8003ba4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <LL_ADC_IsEnabled>:
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <LL_ADC_IsEnabled+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_IsEnabled+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_ADC_StartCalibration>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80046c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f6:	d101      	bne.n	80046fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_ADC_REG_IsConversionOngoing>:
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d101      	bne.n	8004722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_ADCEx_Calibration_Start+0x1c>
 8004748:	2302      	movs	r3, #2
 800474a:	e04d      	b.n	80047e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fea5 	bl	80044a4 <ADC_Disable>
 800475a:	4603      	mov	r3, r0
 800475c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d136      	bne.n	80047d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800476c:	f023 0302 	bic.w	r3, r3, #2
 8004770:	f043 0202 	orr.w	r2, r3, #2
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff96 	bl	80046b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004784:	e014      	b.n	80047b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d90d      	bls.n	80047b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f023 0312 	bic.w	r3, r3, #18
 800479c:	f043 0210 	orr.w	r2, r3, #16
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01b      	b.n	80047e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff94 	bl	80046e2 <LL_ADC_IsCalibrationOnGoing>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e2      	bne.n	8004786 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047d0:	e005      	b.n	80047de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0004de01 	.word	0x0004de01

080047f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b0a1      	sub	sp, #132	@ 0x84
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e08b      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800487e:	2300      	movs	r3, #0
 8004880:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004882:	2300      	movs	r3, #0
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800488e:	d102      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004890:	4b41      	ldr	r3, [pc, #260]	@ (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	e001      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e06a      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff25 	bl	800470a <LL_ADC_REG_IsConversionOngoing>
 80048c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ff1f 	bl	800470a <LL_ADC_REG_IsConversionOngoing>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d14c      	bne.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d149      	bne.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048d8:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80048da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d028      	beq.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048f6:	035b      	lsls	r3, r3, #13
 80048f8:	430b      	orrs	r3, r1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004900:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004904:	f7ff fec1 	bl	800468a <LL_ADC_IsEnabled>
 8004908:	4604      	mov	r4, r0
 800490a:	4823      	ldr	r0, [pc, #140]	@ (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800490c:	f7ff febd 	bl	800468a <LL_ADC_IsEnabled>
 8004910:	4603      	mov	r3, r0
 8004912:	4323      	orrs	r3, r4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d133      	bne.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004918:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004920:	f023 030f 	bic.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	6811      	ldr	r1, [r2, #0]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	6892      	ldr	r2, [r2, #8]
 800492c:	430a      	orrs	r2, r1
 800492e:	431a      	orrs	r2, r3
 8004930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004932:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004934:	e024      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800493e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004940:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004942:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004946:	f7ff fea0 	bl	800468a <LL_ADC_IsEnabled>
 800494a:	4604      	mov	r4, r0
 800494c:	4812      	ldr	r0, [pc, #72]	@ (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800494e:	f7ff fe9c 	bl	800468a <LL_ADC_IsEnabled>
 8004952:	4603      	mov	r3, r0
 8004954:	4323      	orrs	r3, r4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d112      	bne.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800495a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004968:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800496a:	e009      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800497e:	e000      	b.n	8004982 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004980:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800498a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800498e:	4618      	mov	r0, r3
 8004990:	3784      	adds	r7, #132	@ 0x84
 8004992:	46bd      	mov	sp, r7
 8004994:	bd90      	pop	{r4, r7, pc}
 8004996:	bf00      	nop
 8004998:	50000100 	.word	0x50000100
 800499c:	50000300 	.word	0x50000300

080049a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049bc:	4013      	ands	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d2:	4a04      	ldr	r2, [pc, #16]	@ (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	60d3      	str	r3, [r2, #12]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <__NVIC_GetPriorityGrouping+0x18>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 0307 	and.w	r3, r3, #7
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db0b      	blt.n	8004a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	f003 021f 	and.w	r2, r3, #31
 8004a1c:	4907      	ldr	r1, [pc, #28]	@ (8004a3c <__NVIC_EnableIRQ+0x38>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2001      	movs	r0, #1
 8004a26:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	@ (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	@ (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	@ 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	@ 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b0c:	d301      	bcc.n	8004b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b12:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <SysTick_Config+0x40>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f7ff ff8e 	bl	8004a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <SysTick_Config+0x40>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	4b04      	ldr	r3, [pc, #16]	@ (8004b3c <SysTick_Config+0x40>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff29 	bl	80049a0 <__NVIC_SetPriorityGrouping>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b64:	f7ff ff40 	bl	80049e8 <__NVIC_GetPriorityGrouping>
 8004b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff90 	bl	8004a94 <NVIC_EncodePriority>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5f 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff33 	bl	8004a04 <__NVIC_EnableIRQ>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ffa4 	bl	8004afc <SysTick_Config>
 8004bb4:	4603      	mov	r3, r0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e014      	b.n	8004bfa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fd fc3f 	bl	8002464 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b2      	b.n	8004d82 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	795b      	ldrb	r3, [r3, #5]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_DAC_Start_DMA+0x24>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0ac      	b.n	8004d82 <HAL_DAC_Start_DMA+0x17e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2202      	movs	r2, #2
 8004c32:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d129      	bne.n	8004c8e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a53      	ldr	r2, [pc, #332]	@ (8004d8c <HAL_DAC_Start_DMA+0x188>)
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a52      	ldr	r2, [pc, #328]	@ (8004d90 <HAL_DAC_Start_DMA+0x18c>)
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a51      	ldr	r2, [pc, #324]	@ (8004d94 <HAL_DAC_Start_DMA+0x190>)
 8004c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c60:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_DAC_Start_DMA+0x6c>
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d005      	beq.n	8004c7a <HAL_DAC_Start_DMA+0x76>
 8004c6e:	e009      	b.n	8004c84 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	61bb      	str	r3, [r7, #24]
        break;
 8004c78:	e033      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	61bb      	str	r3, [r7, #24]
        break;
 8004c82:	e02e      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3310      	adds	r3, #16
 8004c8a:	61bb      	str	r3, [r7, #24]
        break;
 8004c8c:	e029      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4a41      	ldr	r2, [pc, #260]	@ (8004d98 <HAL_DAC_Start_DMA+0x194>)
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a40      	ldr	r2, [pc, #256]	@ (8004d9c <HAL_DAC_Start_DMA+0x198>)
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8004da0 <HAL_DAC_Start_DMA+0x19c>)
 8004ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_DAC_Start_DMA+0xc0>
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d005      	beq.n	8004cce <HAL_DAC_Start_DMA+0xca>
 8004cc2:	e009      	b.n	8004cd8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	61bb      	str	r3, [r7, #24]
        break;
 8004ccc:	e009      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	61bb      	str	r3, [r7, #24]
        break;
 8004cd6:	e004      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	331c      	adds	r3, #28
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6898      	ldr	r0, [r3, #8]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	f000 fba9 	bl	8005458 <HAL_DMA_Start_IT>
 8004d06:	4603      	mov	r3, r0
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e010      	b.n	8004d2e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68d8      	ldr	r0, [r3, #12]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	f000 fb97 	bl	8005458 <HAL_DMA_Start_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11c      	bne.n	8004d74 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2201      	movs	r2, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <HAL_DAC_Start_DMA+0x1a0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	4a13      	ldr	r2, [pc, #76]	@ (8004da8 <HAL_DAC_Start_DMA+0x1a4>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	3301      	adds	r3, #1
 8004d62:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d64:	e002      	b.n	8004d6c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f9      	bne.n	8004d66 <HAL_DAC_Start_DMA+0x162>
 8004d72:	e005      	b.n	8004d80 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f043 0204 	orr.w	r2, r3, #4
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	080051f5 	.word	0x080051f5
 8004d90:	08005217 	.word	0x08005217
 8004d94:	08005233 	.word	0x08005233
 8004d98:	0800529d 	.word	0x0800529d
 8004d9c:	080052bf 	.word	0x080052bf
 8004da0:	080052db 	.word	0x080052db
 8004da4:	20000008 	.word	0x20000008
 8004da8:	053e2d63 	.word	0x053e2d63

08004dac <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e03e      	b.n	8004e3e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	400a      	ands	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2201      	movs	r2, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43da      	mvns	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	400a      	ands	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10d      	bne.n	8004e1c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fba2 	bl	800554e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e00c      	b.n	8004e36 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fb94 	bl	800554e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004e34:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	@ 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_DAC_ConfigChannel+0x1c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e19e      	b.n	80051e2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	795b      	ldrb	r3, [r3, #5]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_DAC_ConfigChannel+0x2c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e198      	b.n	80051e2 <HAL_DAC_ConfigChannel+0x35e>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d17a      	bne.n	8004fba <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ec4:	f7fd ff74 	bl	8002db0 <HAL_GetTick>
 8004ec8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d13d      	bne.n	8004f4c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ed0:	e018      	b.n	8004f04 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ed2:	f7fd ff6d 	bl	8002db0 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d911      	bls.n	8004f04 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f043 0208 	orr.w	r2, r3, #8
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2203      	movs	r2, #3
 8004efe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e16e      	b.n	80051e2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1df      	bne.n	8004ed2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f1c:	e020      	b.n	8004f60 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f1e:	f7fd ff47 	bl	8002db0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d90f      	bls.n	8004f4c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da0a      	bge.n	8004f4c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f043 0208 	orr.w	r2, r3, #8
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2203      	movs	r2, #3
 8004f46:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e14a      	b.n	80051e2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dbe3      	blt.n	8004f1e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f70:	fa01 f303 	lsl.w	r3, r1, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	ea02 0103 	and.w	r1, r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	409a      	lsls	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	21ff      	movs	r1, #255	@ 0xff
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	ea02 0103 	and.w	r1, r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d11d      	bne.n	8004ffe <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	221f      	movs	r2, #31
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fda:	4013      	ands	r3, r2
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2207      	movs	r2, #7
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005016:	4013      	ands	r3, r2
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005022:	2300      	movs	r3, #0
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	e00f      	b.n	8005048 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d102      	bne.n	8005036 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005030:	2301      	movs	r3, #1
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	e008      	b.n	8005048 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800503e:	2301      	movs	r3, #1
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	e001      	b.n	8005048 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	4013      	ands	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	791b      	ldrb	r3, [r3, #4]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d102      	bne.n	800507c <HAL_DAC_ConfigChannel+0x1f8>
 8005076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800507a:	e000      	b.n	800507e <HAL_DAC_ConfigChannel+0x1fa>
 800507c:	2300      	movs	r3, #0
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43db      	mvns	r3, r3
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	4013      	ands	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	795b      	ldrb	r3, [r3, #5]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <HAL_DAC_ConfigChannel+0x224>
 80050a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050a6:	e000      	b.n	80050aa <HAL_DAC_ConfigChannel+0x226>
 80050a8:	2300      	movs	r3, #0
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d114      	bne.n	80050ea <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80050c0:	f001 ff6c 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 80050c4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4a48      	ldr	r2, [pc, #288]	@ (80051ec <HAL_DAC_ConfigChannel+0x368>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d904      	bls.n	80050d8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	e00f      	b.n	80050f8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4a45      	ldr	r2, [pc, #276]	@ (80051f0 <HAL_DAC_ConfigChannel+0x36c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d90a      	bls.n	80050f6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e8:	e006      	b.n	80050f8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f0:	4313      	orrs	r3, r2
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f4:	e000      	b.n	80050f8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80050f6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005106:	4313      	orrs	r3, r2
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43da      	mvns	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	400a      	ands	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514a:	4013      	ands	r3, r2
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005162:	4313      	orrs	r3, r2
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	22c0      	movs	r2, #192	@ 0xc0
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43da      	mvns	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	400a      	ands	r2, r1
 8005188:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	ea02 0103 	and.w	r1, r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80051e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3728      	adds	r7, #40	@ 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	09896800 	.word	0x09896800
 80051f0:	04c4b400 	.word	0x04c4b400

080051f4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fe1f 	bl	8004e46 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	711a      	strb	r2, [r3, #4]
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fe18 	bl	8004e5a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f043 0204 	orr.w	r2, r3, #4
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff fe0e 	bl	8004e6e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	711a      	strb	r2, [r3, #4]
}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ffd8 	bl	8005260 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	711a      	strb	r2, [r3, #4]
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ffd1 	bl	8005274 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f043 0204 	orr.w	r2, r3, #4
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff ffc7 	bl	8005288 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	711a      	strb	r2, [r3, #4]
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e08d      	b.n	8005436 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	4b47      	ldr	r3, [pc, #284]	@ (8005440 <HAL_DMA_Init+0x138>)
 8005322:	429a      	cmp	r2, r3
 8005324:	d80f      	bhi.n	8005346 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	4b45      	ldr	r3, [pc, #276]	@ (8005444 <HAL_DMA_Init+0x13c>)
 800532e:	4413      	add	r3, r2
 8005330:	4a45      	ldr	r2, [pc, #276]	@ (8005448 <HAL_DMA_Init+0x140>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	009a      	lsls	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a42      	ldr	r2, [pc, #264]	@ (800544c <HAL_DMA_Init+0x144>)
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40
 8005344:	e00e      	b.n	8005364 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	4b40      	ldr	r3, [pc, #256]	@ (8005450 <HAL_DMA_Init+0x148>)
 800534e:	4413      	add	r3, r2
 8005350:	4a3d      	ldr	r2, [pc, #244]	@ (8005448 <HAL_DMA_Init+0x140>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	009a      	lsls	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a3c      	ldr	r2, [pc, #240]	@ (8005454 <HAL_DMA_Init+0x14c>)
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa10 	bl	80057dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053c4:	d102      	bne.n	80053cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d010      	beq.n	800540c <HAL_DMA_Init+0x104>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d80c      	bhi.n	800540c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fa30 	bl	8005858 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e008      	b.n	800541e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40020407 	.word	0x40020407
 8005444:	bffdfff8 	.word	0xbffdfff8
 8005448:	cccccccd 	.word	0xcccccccd
 800544c:	40020000 	.word	0x40020000
 8005450:	bffdfbf8 	.word	0xbffdfbf8
 8005454:	40020400 	.word	0x40020400

08005458 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_DMA_Start_IT+0x20>
 8005474:	2302      	movs	r3, #2
 8005476:	e066      	b.n	8005546 <HAL_DMA_Start_IT+0xee>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d155      	bne.n	8005538 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f954 	bl	800575e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 020e 	orr.w	r2, r2, #14
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e00f      	b.n	80054f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0204 	bic.w	r2, r2, #4
 80054de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 020a 	orr.w	r2, r2, #10
 80054ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800550c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005524:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e005      	b.n	8005544 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005544:	7dfb      	ldrb	r3, [r7, #23]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d005      	beq.n	8005572 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e037      	b.n	80055e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 020e 	bic.w	r2, r2, #14
 8005580:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005590:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a6:	f003 021f 	and.w	r2, r3, #31
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f202 	lsl.w	r2, r1, r2
 80055b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2204      	movs	r2, #4
 8005622:	409a      	lsls	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d026      	beq.n	800567a <HAL_DMA_IRQHandler+0x7a>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d021      	beq.n	800567a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0204 	bic.w	r2, r2, #4
 8005652:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005658:	f003 021f 	and.w	r2, r3, #31
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	2104      	movs	r1, #4
 8005662:	fa01 f202 	lsl.w	r2, r1, r2
 8005666:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d071      	beq.n	8005754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005678:	e06c      	b.n	8005754 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2202      	movs	r2, #2
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02e      	beq.n	80056ec <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d029      	beq.n	80056ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 020a 	bic.w	r2, r2, #10
 80056b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	f003 021f 	and.w	r2, r3, #31
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	2102      	movs	r1, #2
 80056cc:	fa01 f202 	lsl.w	r2, r1, r2
 80056d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d038      	beq.n	8005754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80056ea:	e033      	b.n	8005754 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2208      	movs	r2, #8
 80056f6:	409a      	lsls	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02a      	beq.n	8005756 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d025      	beq.n	8005756 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 020e 	bic.w	r2, r2, #14
 8005718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f003 021f 	and.w	r2, r3, #31
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f202 	lsl.w	r2, r1, r2
 800572c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005754:	bf00      	nop
 8005756:	bf00      	nop
}
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005774:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005786:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	f003 021f 	and.w	r2, r3, #31
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f202 	lsl.w	r2, r1, r2
 800579a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d108      	bne.n	80057be <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057bc:	e007      	b.n	80057ce <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b16      	ldr	r3, [pc, #88]	@ (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d802      	bhi.n	80057f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e001      	b.n	80057fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80057f6:	4b15      	ldr	r3, [pc, #84]	@ (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80057f8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3b08      	subs	r3, #8
 8005806:	4a12      	ldr	r2, [pc, #72]	@ (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	009a      	lsls	r2, r3, #2
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a0b      	ldr	r2, [pc, #44]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005826:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2201      	movs	r2, #1
 8005830:	409a      	lsls	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40020407 	.word	0x40020407
 8005848:	40020800 	.word	0x40020800
 800584c:	40020820 	.word	0x40020820
 8005850:	cccccccd 	.word	0xcccccccd
 8005854:	40020880 	.word	0x40020880

08005858 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	461a      	mov	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a08      	ldr	r2, [pc, #32]	@ (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800587a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3b01      	subs	r3, #1
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2201      	movs	r2, #1
 8005886:	409a      	lsls	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	1000823f 	.word	0x1000823f
 800589c:	40020940 	.word	0x40020940

080058a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058ae:	e15a      	b.n	8005b66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	2101      	movs	r1, #1
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	4013      	ands	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 814c 	beq.w	8005b60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d005      	beq.n	80058e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d130      	bne.n	8005942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005916:	2201      	movs	r2, #1
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	f003 0201 	and.w	r2, r3, #1
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	2b03      	cmp	r3, #3
 800594c:	d017      	beq.n	800597e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	2203      	movs	r2, #3
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4013      	ands	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d123      	bne.n	80059d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	08da      	lsrs	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3208      	adds	r2, #8
 8005992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	220f      	movs	r2, #15
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	08da      	lsrs	r2, r3, #3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3208      	adds	r2, #8
 80059cc:	6939      	ldr	r1, [r7, #16]
 80059ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	2203      	movs	r2, #3
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43db      	mvns	r3, r3
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4013      	ands	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0203 	and.w	r2, r3, #3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80a6 	beq.w	8005b60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a14:	4b5b      	ldr	r3, [pc, #364]	@ (8005b84 <HAL_GPIO_Init+0x2e4>)
 8005a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a18:	4a5a      	ldr	r2, [pc, #360]	@ (8005b84 <HAL_GPIO_Init+0x2e4>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a20:	4b58      	ldr	r3, [pc, #352]	@ (8005b84 <HAL_GPIO_Init+0x2e4>)
 8005a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a2c:	4a56      	ldr	r2, [pc, #344]	@ (8005b88 <HAL_GPIO_Init+0x2e8>)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	089b      	lsrs	r3, r3, #2
 8005a32:	3302      	adds	r3, #2
 8005a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	220f      	movs	r2, #15
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a56:	d01f      	beq.n	8005a98 <HAL_GPIO_Init+0x1f8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8005b8c <HAL_GPIO_Init+0x2ec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d019      	beq.n	8005a94 <HAL_GPIO_Init+0x1f4>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a4b      	ldr	r2, [pc, #300]	@ (8005b90 <HAL_GPIO_Init+0x2f0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <HAL_GPIO_Init+0x1f0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b94 <HAL_GPIO_Init+0x2f4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00d      	beq.n	8005a8c <HAL_GPIO_Init+0x1ec>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a49      	ldr	r2, [pc, #292]	@ (8005b98 <HAL_GPIO_Init+0x2f8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <HAL_GPIO_Init+0x1e8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a48      	ldr	r2, [pc, #288]	@ (8005b9c <HAL_GPIO_Init+0x2fc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d101      	bne.n	8005a84 <HAL_GPIO_Init+0x1e4>
 8005a80:	2305      	movs	r3, #5
 8005a82:	e00a      	b.n	8005a9a <HAL_GPIO_Init+0x1fa>
 8005a84:	2306      	movs	r3, #6
 8005a86:	e008      	b.n	8005a9a <HAL_GPIO_Init+0x1fa>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	e006      	b.n	8005a9a <HAL_GPIO_Init+0x1fa>
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e004      	b.n	8005a9a <HAL_GPIO_Init+0x1fa>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e002      	b.n	8005a9a <HAL_GPIO_Init+0x1fa>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_GPIO_Init+0x1fa>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	f002 0203 	and.w	r2, r2, #3
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	4093      	lsls	r3, r2
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aaa:	4937      	ldr	r1, [pc, #220]	@ (8005b88 <HAL_GPIO_Init+0x2e8>)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ab8:	4b39      	ldr	r3, [pc, #228]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005adc:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4013      	ands	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b06:	4a26      	ldr	r2, [pc, #152]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b5a:	4a11      	ldr	r2, [pc, #68]	@ (8005ba0 <HAL_GPIO_Init+0x300>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3301      	adds	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f ae9d 	bne.w	80058b0 <HAL_GPIO_Init+0x10>
  }
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	48000400 	.word	0x48000400
 8005b90:	48000800 	.word	0x48000800
 8005b94:	48000c00 	.word	0x48000c00
 8005b98:	48001000 	.word	0x48001000
 8005b9c:	48001400 	.word	0x48001400
 8005ba0:	40010400 	.word	0x40010400

08005ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bb4:	787b      	ldrb	r3, [r7, #1]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bba:	887a      	ldrh	r2, [r7, #2]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bc0:	e002      	b.n	8005bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bc2:	887a      	ldrh	r2, [r7, #2]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005be6:	887a      	ldrh	r2, [r7, #2]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4013      	ands	r3, r2
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	43d9      	mvns	r1, r3
 8005bf2:	887b      	ldrh	r3, [r7, #2]
 8005bf4:	400b      	ands	r3, r1
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	619a      	str	r2, [r3, #24]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e08d      	b.n	8005d36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fc fc86 	bl	8002540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	@ 0x24
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d107      	bne.n	8005c82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c7e:	609a      	str	r2, [r3, #8]
 8005c80:	e006      	b.n	8005c90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d108      	bne.n	8005caa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	e007      	b.n	8005cba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	817b      	strh	r3, [r7, #10]
 8005d50:	4613      	mov	r3, r2
 8005d52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	f040 80fd 	bne.w	8005f5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_I2C_Master_Transmit+0x30>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0f6      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x21e>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d78:	f7fd f81a 	bl	8002db0 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	2319      	movs	r3, #25
 8005d84:	2201      	movs	r2, #1
 8005d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f914 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e0e1      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2221      	movs	r2, #33	@ 0x21
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2210      	movs	r2, #16
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	893a      	ldrh	r2, [r7, #8]
 8005dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2bff      	cmp	r3, #255	@ 0xff
 8005dca:	d906      	bls.n	8005dda <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	22ff      	movs	r2, #255	@ 0xff
 8005dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e007      	b.n	8005dea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005de4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005de8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d024      	beq.n	8005e3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3301      	adds	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	8979      	ldrh	r1, [r7, #10]
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f68 <HAL_I2C_Master_Transmit+0x228>)
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fa83 	bl	8006340 <I2C_TransferConfig>
 8005e3a:	e066      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	8979      	ldrh	r1, [r7, #10]
 8005e44:	4b48      	ldr	r3, [pc, #288]	@ (8005f68 <HAL_I2C_Master_Transmit+0x228>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fa78 	bl	8006340 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e50:	e05b      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	6a39      	ldr	r1, [r7, #32]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f907 	bl	800606a <I2C_WaitOnTXISFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e07b      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d034      	beq.n	8005f0a <HAL_I2C_Master_Transmit+0x1ca>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d130      	bne.n	8005f0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2180      	movs	r1, #128	@ 0x80
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f880 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e04d      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2bff      	cmp	r3, #255	@ 0xff
 8005eca:	d90e      	bls.n	8005eea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	22ff      	movs	r2, #255	@ 0xff
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	8979      	ldrh	r1, [r7, #10]
 8005eda:	2300      	movs	r3, #0
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fa2c 	bl	8006340 <I2C_TransferConfig>
 8005ee8:	e00f      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	8979      	ldrh	r1, [r7, #10]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fa1b 	bl	8006340 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d19e      	bne.n	8005e52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	6a39      	ldr	r1, [r7, #32]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f8ed 	bl	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e01a      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <HAL_I2C_Master_Transmit+0x22c>)
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005f5c:	2302      	movs	r3, #2
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	80002000 	.word	0x80002000
 8005f6c:	fe00e800 	.word	0xfe00e800

08005f70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d103      	bne.n	8005f8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d007      	beq.n	8005fac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	619a      	str	r2, [r3, #24]
  }
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc8:	e03b      	b.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f8d6 	bl	8006180 <I2C_IsErrorOccurred>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e041      	b.n	8006062 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d02d      	beq.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fc fee3 	bl	8002db0 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0x44>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d122      	bne.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4013      	ands	r3, r2
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	429a      	cmp	r2, r3
 8006018:	d113      	bne.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e00f      	b.n	8006062 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0b4      	beq.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006076:	e033      	b.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f87f 	bl	8006180 <I2C_IsErrorOccurred>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e031      	b.n	80060f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d025      	beq.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006094:	f7fc fe8c 	bl	8002db0 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11a      	bne.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d013      	beq.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e007      	b.n	80060f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d1c4      	bne.n	8006078 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006104:	e02f      	b.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f838 	bl	8006180 <I2C_IsErrorOccurred>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e02d      	b.n	8006176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611a:	f7fc fe49 	bl	8002db0 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11a      	bne.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b20      	cmp	r3, #32
 800613c:	d013      	beq.n	8006166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0220 	orr.w	r2, r3, #32
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e007      	b.n	8006176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b20      	cmp	r3, #32
 8006172:	d1c8      	bne.n	8006106 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d068      	beq.n	800627e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2210      	movs	r2, #16
 80061b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061b4:	e049      	b.n	800624a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d045      	beq.n	800624a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fc fdf7 	bl	8002db0 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <I2C_IsErrorOccurred+0x54>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d13a      	bne.n	800624a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f6:	d121      	bne.n	800623c <I2C_IsErrorOccurred+0xbc>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061fe:	d01d      	beq.n	800623c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b20      	cmp	r3, #32
 8006204:	d01a      	beq.n	800623c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006214:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006216:	f7fc fdcb 	bl	8002db0 <HAL_GetTick>
 800621a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800621c:	e00e      	b.n	800623c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800621e:	f7fc fdc7 	bl	8002db0 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b19      	cmp	r3, #25
 800622a:	d907      	bls.n	800623c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f043 0320 	orr.w	r3, r3, #32
 8006232:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800623a:	e006      	b.n	800624a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b20      	cmp	r3, #32
 8006248:	d1e9      	bne.n	800621e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b20      	cmp	r3, #32
 8006256:	d003      	beq.n	8006260 <I2C_IsErrorOccurred+0xe0>
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0aa      	beq.n	80061b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2220      	movs	r2, #32
 800626e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	f043 0304 	orr.w	r3, r3, #4
 8006276:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f043 0308 	orr.w	r3, r3, #8
 80062b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f043 0302 	orr.w	r3, r3, #2
 80062da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80062ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01c      	beq.n	800632e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fe3b 	bl	8005f70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b0d      	ldr	r3, [pc, #52]	@ (800633c <I2C_IsErrorOccurred+0x1bc>)
 8006306:	400b      	ands	r3, r1
 8006308:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	431a      	orrs	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800632e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006332:	4618      	mov	r0, r3
 8006334:	3728      	adds	r7, #40	@ 0x28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	fe00e800 	.word	0xfe00e800

08006340 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	817b      	strh	r3, [r7, #10]
 800634e:	4613      	mov	r3, r2
 8006350:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006352:	897b      	ldrh	r3, [r7, #10]
 8006354:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006358:	7a7b      	ldrb	r3, [r7, #9]
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006360:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	4313      	orrs	r3, r2
 800636a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800636e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	0d5b      	lsrs	r3, r3, #21
 800637a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800637e:	4b08      	ldr	r3, [pc, #32]	@ (80063a0 <I2C_TransferConfig+0x60>)
 8006380:	430b      	orrs	r3, r1
 8006382:	43db      	mvns	r3, r3
 8006384:	ea02 0103 	and.w	r1, r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	03ff63ff 	.word	0x03ff63ff

080063a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d138      	bne.n	800642c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e032      	b.n	800642e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	@ 0x24
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b20      	cmp	r3, #32
 800644e:	d139      	bne.n	80064c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800645a:	2302      	movs	r3, #2
 800645c:	e033      	b.n	80064c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	@ 0x24
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800648c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e000      	b.n	80064c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064c4:	2302      	movs	r3, #2
  }
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d141      	bne.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ee:	d131      	bne.n	8006554 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064f0:	4b47      	ldr	r3, [pc, #284]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f6:	4a46      	ldr	r2, [pc, #280]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006500:	4b43      	ldr	r3, [pc, #268]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006508:	4a41      	ldr	r2, [pc, #260]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800650a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800650e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006510:	4b40      	ldr	r3, [pc, #256]	@ (8006614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2232      	movs	r2, #50	@ 0x32
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	4a3f      	ldr	r2, [pc, #252]	@ (8006618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	0c9b      	lsrs	r3, r3, #18
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006526:	e002      	b.n	800652e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3b01      	subs	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800652e:	4b38      	ldr	r3, [pc, #224]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800653a:	d102      	bne.n	8006542 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f2      	bne.n	8006528 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006542:	4b33      	ldr	r3, [pc, #204]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800654e:	d158      	bne.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e057      	b.n	8006604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006554:	4b2e      	ldr	r3, [pc, #184]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655a:	4a2d      	ldr	r2, [pc, #180]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800655c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006564:	e04d      	b.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800656c:	d141      	bne.n	80065f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800656e:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657a:	d131      	bne.n	80065e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800657c:	4b24      	ldr	r3, [pc, #144]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006582:	4a23      	ldr	r2, [pc, #140]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800658c:	4b20      	ldr	r3, [pc, #128]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006594:	4a1e      	ldr	r2, [pc, #120]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800659a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800659c:	4b1d      	ldr	r3, [pc, #116]	@ (8006614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2232      	movs	r2, #50	@ 0x32
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065a8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ac:	0c9b      	lsrs	r3, r3, #18
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065b2:	e002      	b.n	80065ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ba:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c6:	d102      	bne.n	80065ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f2      	bne.n	80065b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065ce:	4b10      	ldr	r3, [pc, #64]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065da:	d112      	bne.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e011      	b.n	8006604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065f0:	e007      	b.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065fa:	4a05      	ldr	r2, [pc, #20]	@ (8006610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006600:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	40007000 	.word	0x40007000
 8006614:	20000008 	.word	0x20000008
 8006618:	431bde83 	.word	0x431bde83

0800661c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800662a:	6093      	str	r3, [r2, #8]
}
 800662c:	bf00      	nop
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40007000 	.word	0x40007000

0800663c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e2fe      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d075      	beq.n	8006746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800665a:	4b97      	ldr	r3, [pc, #604]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006664:	4b94      	ldr	r3, [pc, #592]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d102      	bne.n	800667a <HAL_RCC_OscConfig+0x3e>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d002      	beq.n	8006680 <HAL_RCC_OscConfig+0x44>
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d10b      	bne.n	8006698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006680:	4b8d      	ldr	r3, [pc, #564]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05b      	beq.n	8006744 <HAL_RCC_OscConfig+0x108>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d157      	bne.n	8006744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e2d9      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a0:	d106      	bne.n	80066b0 <HAL_RCC_OscConfig+0x74>
 80066a2:	4b85      	ldr	r3, [pc, #532]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a84      	ldr	r2, [pc, #528]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	e01d      	b.n	80066ec <HAL_RCC_OscConfig+0xb0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCC_OscConfig+0x98>
 80066ba:	4b7f      	ldr	r3, [pc, #508]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7e      	ldr	r2, [pc, #504]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	4b7c      	ldr	r3, [pc, #496]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a7b      	ldr	r2, [pc, #492]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	e00b      	b.n	80066ec <HAL_RCC_OscConfig+0xb0>
 80066d4:	4b78      	ldr	r3, [pc, #480]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a77      	ldr	r2, [pc, #476]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	4b75      	ldr	r3, [pc, #468]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a74      	ldr	r2, [pc, #464]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80066e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d013      	beq.n	800671c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fc fb5c 	bl	8002db0 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fc fb58 	bl	8002db0 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	@ 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e29e      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800670e:	4b6a      	ldr	r3, [pc, #424]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0xc0>
 800671a:	e014      	b.n	8006746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc fb48 	bl	8002db0 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006724:	f7fc fb44 	bl	8002db0 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b64      	cmp	r3, #100	@ 0x64
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e28a      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006736:	4b60      	ldr	r3, [pc, #384]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0xe8>
 8006742:	e000      	b.n	8006746 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d075      	beq.n	800683e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006752:	4b59      	ldr	r3, [pc, #356]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800675c:	4b56      	ldr	r3, [pc, #344]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b0c      	cmp	r3, #12
 800676a:	d102      	bne.n	8006772 <HAL_RCC_OscConfig+0x136>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d002      	beq.n	8006778 <HAL_RCC_OscConfig+0x13c>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d11f      	bne.n	80067b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006778:	4b4f      	ldr	r3, [pc, #316]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_RCC_OscConfig+0x154>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e25d      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006790:	4b49      	ldr	r3, [pc, #292]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	061b      	lsls	r3, r3, #24
 800679e:	4946      	ldr	r1, [pc, #280]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067a4:	4b45      	ldr	r3, [pc, #276]	@ (80068bc <HAL_RCC_OscConfig+0x280>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fc fab5 	bl	8002d18 <HAL_InitTick>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d043      	beq.n	800683c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e249      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d023      	beq.n	8006808 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c0:	4b3d      	ldr	r3, [pc, #244]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3c      	ldr	r2, [pc, #240]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80067c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fc faf0 	bl	8002db0 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fc faec 	bl	8002db0 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e232      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e6:	4b34      	ldr	r3, [pc, #208]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f2:	4b31      	ldr	r3, [pc, #196]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	492d      	ldr	r1, [pc, #180]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006802:	4313      	orrs	r3, r2
 8006804:	604b      	str	r3, [r1, #4]
 8006806:	e01a      	b.n	800683e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006808:	4b2b      	ldr	r3, [pc, #172]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2a      	ldr	r2, [pc, #168]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800680e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fc facc 	bl	8002db0 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681c:	f7fc fac8 	bl	8002db0 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e20e      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800682e:	4b22      	ldr	r3, [pc, #136]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x1e0>
 800683a:	e000      	b.n	800683e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800683c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d041      	beq.n	80068ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01c      	beq.n	800688c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006852:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006862:	f7fc faa5 	bl	8002db0 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686a:	f7fc faa1 	bl	8002db0 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e1e7      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800687c:	4b0e      	ldr	r3, [pc, #56]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800687e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0ef      	beq.n	800686a <HAL_RCC_OscConfig+0x22e>
 800688a:	e020      	b.n	80068ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006892:	4a09      	ldr	r2, [pc, #36]	@ (80068b8 <HAL_RCC_OscConfig+0x27c>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689c:	f7fc fa88 	bl	8002db0 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068a2:	e00d      	b.n	80068c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a4:	f7fc fa84 	bl	8002db0 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d906      	bls.n	80068c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e1ca      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
 80068b6:	bf00      	nop
 80068b8:	40021000 	.word	0x40021000
 80068bc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068c0:	4b8c      	ldr	r3, [pc, #560]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80068c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1ea      	bne.n	80068a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80a6 	beq.w	8006a28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068dc:	2300      	movs	r3, #0
 80068de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068e0:	4b84      	ldr	r3, [pc, #528]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_RCC_OscConfig+0x2b4>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x2b6>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00d      	beq.n	8006912 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068f6:	4b7f      	ldr	r3, [pc, #508]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80068f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fa:	4a7e      	ldr	r2, [pc, #504]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006900:	6593      	str	r3, [r2, #88]	@ 0x58
 8006902:	4b7c      	ldr	r3, [pc, #496]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800690e:	2301      	movs	r3, #1
 8006910:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006912:	4b79      	ldr	r3, [pc, #484]	@ (8006af8 <HAL_RCC_OscConfig+0x4bc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d118      	bne.n	8006950 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800691e:	4b76      	ldr	r3, [pc, #472]	@ (8006af8 <HAL_RCC_OscConfig+0x4bc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a75      	ldr	r2, [pc, #468]	@ (8006af8 <HAL_RCC_OscConfig+0x4bc>)
 8006924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800692a:	f7fc fa41 	bl	8002db0 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006932:	f7fc fa3d 	bl	8002db0 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e183      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006944:	4b6c      	ldr	r3, [pc, #432]	@ (8006af8 <HAL_RCC_OscConfig+0x4bc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <HAL_RCC_OscConfig+0x32e>
 8006958:	4b66      	ldr	r3, [pc, #408]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695e:	4a65      	ldr	r2, [pc, #404]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006968:	e024      	b.n	80069b4 <HAL_RCC_OscConfig+0x378>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b05      	cmp	r3, #5
 8006970:	d110      	bne.n	8006994 <HAL_RCC_OscConfig+0x358>
 8006972:	4b60      	ldr	r3, [pc, #384]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006978:	4a5e      	ldr	r2, [pc, #376]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 800697a:	f043 0304 	orr.w	r3, r3, #4
 800697e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006982:	4b5c      	ldr	r3, [pc, #368]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006988:	4a5a      	ldr	r2, [pc, #360]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006992:	e00f      	b.n	80069b4 <HAL_RCC_OscConfig+0x378>
 8006994:	4b57      	ldr	r3, [pc, #348]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699a:	4a56      	ldr	r2, [pc, #344]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069a4:	4b53      	ldr	r3, [pc, #332]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069aa:	4a52      	ldr	r2, [pc, #328]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80069ac:	f023 0304 	bic.w	r3, r3, #4
 80069b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069bc:	f7fc f9f8 	bl	8002db0 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c4:	f7fc f9f4 	bl	8002db0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e138      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069da:	4b46      	ldr	r3, [pc, #280]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 80069dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0ed      	beq.n	80069c4 <HAL_RCC_OscConfig+0x388>
 80069e8:	e015      	b.n	8006a16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ea:	f7fc f9e1 	bl	8002db0 <HAL_GetTick>
 80069ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069f0:	e00a      	b.n	8006a08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f2:	f7fc f9dd 	bl	8002db0 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e121      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a08:	4b3a      	ldr	r3, [pc, #232]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1ed      	bne.n	80069f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a16:	7ffb      	ldrb	r3, [r7, #31]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d105      	bne.n	8006a28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1c:	4b35      	ldr	r3, [pc, #212]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	4a34      	ldr	r2, [pc, #208]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d03c      	beq.n	8006aae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01c      	beq.n	8006a76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a42:	4a2c      	ldr	r2, [pc, #176]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fc f9b0 	bl	8002db0 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a54:	f7fc f9ac 	bl	8002db0 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0f2      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a66:	4b23      	ldr	r3, [pc, #140]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0ef      	beq.n	8006a54 <HAL_RCC_OscConfig+0x418>
 8006a74:	e01b      	b.n	8006aae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a76:	4b1f      	ldr	r3, [pc, #124]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a86:	f7fc f993 	bl	8002db0 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a8e:	f7fc f98f 	bl	8002db0 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e0d5      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006aa0:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1ef      	bne.n	8006a8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80c9 	beq.w	8006c4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 030c 	and.w	r3, r3, #12
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	f000 8083 	beq.w	8006bcc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d15e      	bne.n	8006b8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a08      	ldr	r2, [pc, #32]	@ (8006af4 <HAL_RCC_OscConfig+0x4b8>)
 8006ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fc f969 	bl	8002db0 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae0:	e00c      	b.n	8006afc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae2:	f7fc f965 	bl	8002db0 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d905      	bls.n	8006afc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e0ab      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006afc:	4b55      	ldr	r3, [pc, #340]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1ec      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b08:	4b52      	ldr	r3, [pc, #328]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	4b52      	ldr	r3, [pc, #328]	@ (8006c58 <HAL_RCC_OscConfig+0x61c>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6a11      	ldr	r1, [r2, #32]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b18:	3a01      	subs	r2, #1
 8006b1a:	0112      	lsls	r2, r2, #4
 8006b1c:	4311      	orrs	r1, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b22:	0212      	lsls	r2, r2, #8
 8006b24:	4311      	orrs	r1, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b2a:	0852      	lsrs	r2, r2, #1
 8006b2c:	3a01      	subs	r2, #1
 8006b2e:	0552      	lsls	r2, r2, #21
 8006b30:	4311      	orrs	r1, r2
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b36:	0852      	lsrs	r2, r2, #1
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	0652      	lsls	r2, r2, #25
 8006b3c:	4311      	orrs	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b42:	06d2      	lsls	r2, r2, #27
 8006b44:	430a      	orrs	r2, r1
 8006b46:	4943      	ldr	r1, [pc, #268]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b4c:	4b41      	ldr	r3, [pc, #260]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a40      	ldr	r2, [pc, #256]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b58:	4b3e      	ldr	r3, [pc, #248]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fc f924 	bl	8002db0 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6c:	f7fc f920 	bl	8002db0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e066      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b7e:	4b35      	ldr	r3, [pc, #212]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x530>
 8006b8a:	e05e      	b.n	8006c4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8c:	4b31      	ldr	r3, [pc, #196]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a30      	ldr	r2, [pc, #192]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fc f90a 	bl	8002db0 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fc f906 	bl	8002db0 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e04c      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb2:	4b28      	ldr	r3, [pc, #160]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006bbe:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	4924      	ldr	r1, [pc, #144]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006bc4:	4b25      	ldr	r3, [pc, #148]	@ (8006c5c <HAL_RCC_OscConfig+0x620>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	60cb      	str	r3, [r1, #12]
 8006bca:	e03e      	b.n	8006c4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e039      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c54 <HAL_RCC_OscConfig+0x618>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f003 0203 	and.w	r2, r3, #3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d12c      	bne.n	8006c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d123      	bne.n	8006c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d11b      	bne.n	8006c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d113      	bne.n	8006c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d109      	bne.n	8006c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d001      	beq.n	8006c4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40021000 	.word	0x40021000
 8006c58:	019f800c 	.word	0x019f800c
 8006c5c:	feeefffc 	.word	0xfeeefffc

08006c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e11e      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c78:	4b91      	ldr	r3, [pc, #580]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d910      	bls.n	8006ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c86:	4b8e      	ldr	r3, [pc, #568]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f023 020f 	bic.w	r2, r3, #15
 8006c8e:	498c      	ldr	r1, [pc, #560]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c96:	4b8a      	ldr	r3, [pc, #552]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d001      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e106      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d073      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d129      	bne.n	8006d10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cbc:	4b81      	ldr	r3, [pc, #516]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0f4      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ccc:	f000 f99e 	bl	800700c <RCC_GetSysClockFreqFromPLLSource>
 8006cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec8 <HAL_RCC_ClockConfig+0x268>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d93f      	bls.n	8006d5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cda:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d033      	beq.n	8006d5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d12f      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cfa:	4b72      	ldr	r3, [pc, #456]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d02:	4a70      	ldr	r2, [pc, #448]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d0a:	2380      	movs	r3, #128	@ 0x80
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	e024      	b.n	8006d5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d107      	bne.n	8006d28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d18:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0c6      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d28:	4b66      	ldr	r3, [pc, #408]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0be      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d38:	f000 f8ce 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8006d3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4a61      	ldr	r2, [pc, #388]	@ (8006ec8 <HAL_RCC_ClockConfig+0x268>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d909      	bls.n	8006d5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d46:	4b5f      	ldr	r3, [pc, #380]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d56:	2380      	movs	r3, #128	@ 0x80
 8006d58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 0203 	bic.w	r2, r3, #3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4957      	ldr	r1, [pc, #348]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6c:	f7fc f820 	bl	8002db0 <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d72:	e00a      	b.n	8006d8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d74:	f7fc f81c 	bl	8002db0 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e095      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 020c 	and.w	r2, r3, #12
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d1eb      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d023      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006db4:	4b43      	ldr	r3, [pc, #268]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4a42      	ldr	r2, [pc, #264]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006dbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ddc:	4b39      	ldr	r3, [pc, #228]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4936      	ldr	r1, [pc, #216]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b80      	cmp	r3, #128	@ 0x80
 8006df4:	d105      	bne.n	8006e02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006df6:	4b33      	ldr	r3, [pc, #204]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	4a32      	ldr	r2, [pc, #200]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e02:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d21d      	bcs.n	8006e4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e10:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f023 020f 	bic.w	r2, r3, #15
 8006e18:	4929      	ldr	r1, [pc, #164]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e20:	f7fb ffc6 	bl	8002db0 <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e26:	e00a      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e28:	f7fb ffc2 	bl	8002db0 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e03b      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b20      	ldr	r3, [pc, #128]	@ (8006ec0 <HAL_RCC_ClockConfig+0x260>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d1ed      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e58:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4917      	ldr	r1, [pc, #92]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e76:	4b13      	ldr	r3, [pc, #76]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	490f      	ldr	r1, [pc, #60]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e8a:	f000 f825 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec4 <HAL_RCC_ClockConfig+0x264>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	490c      	ldr	r1, [pc, #48]	@ (8006ecc <HAL_RCC_ClockConfig+0x26c>)
 8006e9c:	5ccb      	ldrb	r3, [r1, r3]
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed0 <HAL_RCC_ClockConfig+0x270>)
 8006ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <HAL_RCC_ClockConfig+0x274>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fb ff32 	bl	8002d18 <HAL_InitTick>
 8006eb4:	4603      	mov	r3, r0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40022000 	.word	0x40022000
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	04c4b400 	.word	0x04c4b400
 8006ecc:	08010284 	.word	0x08010284
 8006ed0:	20000008 	.word	0x20000008
 8006ed4:	2000000c 	.word	0x2000000c

08006ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ede:	4b2c      	ldr	r3, [pc, #176]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d102      	bne.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006eea:	4b2a      	ldr	r3, [pc, #168]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e047      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ef0:	4b27      	ldr	r3, [pc, #156]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d102      	bne.n	8006f02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006efc:	4b26      	ldr	r3, [pc, #152]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	e03e      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006f02:	4b23      	ldr	r3, [pc, #140]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 030c 	and.w	r3, r3, #12
 8006f0a:	2b0c      	cmp	r3, #12
 8006f0c:	d136      	bne.n	8006f7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f0e:	4b20      	ldr	r3, [pc, #128]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	3301      	adds	r3, #1
 8006f24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d10c      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	4a16      	ldr	r2, [pc, #88]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f36:	68d2      	ldr	r2, [r2, #12]
 8006f38:	0a12      	lsrs	r2, r2, #8
 8006f3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	617b      	str	r3, [r7, #20]
      break;
 8006f44:	e00c      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f46:	4a13      	ldr	r2, [pc, #76]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4e:	4a10      	ldr	r2, [pc, #64]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f50:	68d2      	ldr	r2, [r2, #12]
 8006f52:	0a12      	lsrs	r2, r2, #8
 8006f54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f58:	fb02 f303 	mul.w	r3, r2, r3
 8006f5c:	617b      	str	r3, [r7, #20]
      break;
 8006f5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f60:	4b0b      	ldr	r3, [pc, #44]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	0e5b      	lsrs	r3, r3, #25
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	e001      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f80:	693b      	ldr	r3, [r7, #16]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40021000 	.word	0x40021000
 8006f94:	00f42400 	.word	0x00f42400
 8006f98:	007a1200 	.word	0x007a1200

08006f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	@ (8006fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000008 	.word	0x20000008

08006fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fb8:	f7ff fff0 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	4904      	ldr	r1, [pc, #16]	@ (8006fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fca:	5ccb      	ldrb	r3, [r1, r3]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	08010294 	.word	0x08010294

08006fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fe4:	f7ff ffda 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b06      	ldr	r3, [pc, #24]	@ (8007004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	0adb      	lsrs	r3, r3, #11
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4904      	ldr	r1, [pc, #16]	@ (8007008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40021000 	.word	0x40021000
 8007008:	08010294 	.word	0x08010294

0800700c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007012:	4b1e      	ldr	r3, [pc, #120]	@ (800708c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800701c:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	091b      	lsrs	r3, r3, #4
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b03      	cmp	r3, #3
 800702e:	d10c      	bne.n	800704a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007030:	4a17      	ldr	r2, [pc, #92]	@ (8007090 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	4a14      	ldr	r2, [pc, #80]	@ (800708c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800703a:	68d2      	ldr	r2, [r2, #12]
 800703c:	0a12      	lsrs	r2, r2, #8
 800703e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	617b      	str	r3, [r7, #20]
    break;
 8007048:	e00c      	b.n	8007064 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800704a:	4a12      	ldr	r2, [pc, #72]	@ (8007094 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007052:	4a0e      	ldr	r2, [pc, #56]	@ (800708c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007054:	68d2      	ldr	r2, [r2, #12]
 8007056:	0a12      	lsrs	r2, r2, #8
 8007058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800705c:	fb02 f303 	mul.w	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
    break;
 8007062:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007064:	4b09      	ldr	r3, [pc, #36]	@ (800708c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	0e5b      	lsrs	r3, r3, #25
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	3301      	adds	r3, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800707e:	687b      	ldr	r3, [r7, #4]
}
 8007080:	4618      	mov	r0, r3
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40021000 	.word	0x40021000
 8007090:	007a1200 	.word	0x007a1200
 8007094:	00f42400 	.word	0x00f42400

08007098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070a0:	2300      	movs	r3, #0
 80070a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070a4:	2300      	movs	r3, #0
 80070a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8098 	beq.w	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070b6:	2300      	movs	r3, #0
 80070b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ba:	4b43      	ldr	r3, [pc, #268]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10d      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070c6:	4b40      	ldr	r3, [pc, #256]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ca:	4a3f      	ldr	r2, [pc, #252]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80070d2:	4b3d      	ldr	r3, [pc, #244]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070de:	2301      	movs	r3, #1
 80070e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070e2:	4b3a      	ldr	r3, [pc, #232]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a39      	ldr	r2, [pc, #228]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070ee:	f7fb fe5f 	bl	8002db0 <HAL_GetTick>
 80070f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070f4:	e009      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f6:	f7fb fe5b 	bl	8002db0 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d902      	bls.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	74fb      	strb	r3, [r7, #19]
        break;
 8007108:	e005      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800710a:	4b30      	ldr	r3, [pc, #192]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0ef      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007116:	7cfb      	ldrb	r3, [r7, #19]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d159      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800711c:	4b2a      	ldr	r3, [pc, #168]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007126:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d01e      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	429a      	cmp	r2, r3
 8007136:	d019      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007138:	4b23      	ldr	r3, [pc, #140]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007144:	4b20      	ldr	r3, [pc, #128]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714a:	4a1f      	ldr	r2, [pc, #124]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800714c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007154:	4b1c      	ldr	r3, [pc, #112]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715a:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800715c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007164:	4a18      	ldr	r2, [pc, #96]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d016      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007176:	f7fb fe1b 	bl	8002db0 <HAL_GetTick>
 800717a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800717c:	e00b      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717e:	f7fb fe17 	bl	8002db0 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800718c:	4293      	cmp	r3, r2
 800718e:	d902      	bls.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	74fb      	strb	r3, [r7, #19]
            break;
 8007194:	e006      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007196:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0ec      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071aa:	4b07      	ldr	r3, [pc, #28]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	4903      	ldr	r1, [pc, #12]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071c0:	e008      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071c2:	7cfb      	ldrb	r3, [r7, #19]
 80071c4:	74bb      	strb	r3, [r7, #18]
 80071c6:	e005      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80071c8:	40021000 	.word	0x40021000
 80071cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071d4:	7c7b      	ldrb	r3, [r7, #17]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d105      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071da:	4ba6      	ldr	r3, [pc, #664]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071de:	4aa5      	ldr	r2, [pc, #660]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071f2:	4ba0      	ldr	r3, [pc, #640]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f8:	f023 0203 	bic.w	r2, r3, #3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	499c      	ldr	r1, [pc, #624]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007214:	4b97      	ldr	r3, [pc, #604]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f023 020c 	bic.w	r2, r3, #12
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4994      	ldr	r1, [pc, #592]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007236:	4b8f      	ldr	r3, [pc, #572]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	498b      	ldr	r1, [pc, #556]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007258:	4b86      	ldr	r3, [pc, #536]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	4983      	ldr	r1, [pc, #524]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800727a:	4b7e      	ldr	r3, [pc, #504]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	497a      	ldr	r1, [pc, #488]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800729c:	4b75      	ldr	r3, [pc, #468]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	4972      	ldr	r1, [pc, #456]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072be:	4b6d      	ldr	r3, [pc, #436]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	4969      	ldr	r1, [pc, #420]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072e0:	4b64      	ldr	r3, [pc, #400]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	4961      	ldr	r1, [pc, #388]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007302:	4b5c      	ldr	r3, [pc, #368]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	4958      	ldr	r1, [pc, #352]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007320:	2b00      	cmp	r3, #0
 8007322:	d015      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007324:	4b53      	ldr	r3, [pc, #332]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	4950      	ldr	r1, [pc, #320]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007342:	d105      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007344:	4b4b      	ldr	r3, [pc, #300]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4a4a      	ldr	r2, [pc, #296]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800734a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800734e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007358:	2b00      	cmp	r3, #0
 800735a:	d015      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800735c:	4b45      	ldr	r3, [pc, #276]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	4942      	ldr	r1, [pc, #264]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737a:	d105      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800737c:	4b3d      	ldr	r3, [pc, #244]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4a3c      	ldr	r2, [pc, #240]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007386:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007394:	4b37      	ldr	r3, [pc, #220]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a2:	4934      	ldr	r1, [pc, #208]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073b2:	d105      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d015      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073cc:	4b29      	ldr	r3, [pc, #164]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073da:	4926      	ldr	r1, [pc, #152]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073ea:	d105      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ec:	4b21      	ldr	r3, [pc, #132]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a20      	ldr	r2, [pc, #128]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d015      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007404:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	4918      	ldr	r1, [pc, #96]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007422:	d105      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007424:	4b13      	ldr	r3, [pc, #76]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4a12      	ldr	r2, [pc, #72]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800742a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800742e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d015      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800743c:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800743e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	490a      	ldr	r1, [pc, #40]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800745a:	d105      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800745c:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	4a04      	ldr	r2, [pc, #16]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007466:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007468:	7cbb      	ldrb	r3, [r7, #18]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40021000 	.word	0x40021000

08007478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e049      	b.n	800751e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb f8f2 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f001 f89e 	bl	80085f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	d001      	beq.n	8007540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e042      	b.n	80075c6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a21      	ldr	r2, [pc, #132]	@ (80075d4 <HAL_TIM_Base_Start+0xac>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_TIM_Base_Start+0x5c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800755a:	d013      	beq.n	8007584 <HAL_TIM_Base_Start+0x5c>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1d      	ldr	r2, [pc, #116]	@ (80075d8 <HAL_TIM_Base_Start+0xb0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_TIM_Base_Start+0x5c>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a1c      	ldr	r2, [pc, #112]	@ (80075dc <HAL_TIM_Base_Start+0xb4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_TIM_Base_Start+0x5c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1a      	ldr	r2, [pc, #104]	@ (80075e0 <HAL_TIM_Base_Start+0xb8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_TIM_Base_Start+0x5c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a19      	ldr	r2, [pc, #100]	@ (80075e4 <HAL_TIM_Base_Start+0xbc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d115      	bne.n	80075b0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	4b17      	ldr	r3, [pc, #92]	@ (80075e8 <HAL_TIM_Base_Start+0xc0>)
 800758c:	4013      	ands	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b06      	cmp	r3, #6
 8007594:	d015      	beq.n	80075c2 <HAL_TIM_Base_Start+0x9a>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800759c:	d011      	beq.n	80075c2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0201 	orr.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ae:	e008      	b.n	80075c2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e000      	b.n	80075c4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40012c00 	.word	0x40012c00
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40013400 	.word	0x40013400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	00010007 	.word	0x00010007

080075ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e049      	b.n	8007692 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f841 	bl	800769a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f000 ffe4 	bl	80085f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <HAL_TIM_PWM_Start+0x24>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	bf14      	ite	ne
 80076cc:	2301      	movne	r3, #1
 80076ce:	2300      	moveq	r3, #0
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	e03c      	b.n	800774e <HAL_TIM_PWM_Start+0x9e>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d109      	bne.n	80076ee <HAL_TIM_PWM_Start+0x3e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	bf14      	ite	ne
 80076e6:	2301      	movne	r3, #1
 80076e8:	2300      	moveq	r3, #0
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	e02f      	b.n	800774e <HAL_TIM_PWM_Start+0x9e>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d109      	bne.n	8007708 <HAL_TIM_PWM_Start+0x58>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	bf14      	ite	ne
 8007700:	2301      	movne	r3, #1
 8007702:	2300      	moveq	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	e022      	b.n	800774e <HAL_TIM_PWM_Start+0x9e>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b0c      	cmp	r3, #12
 800770c:	d109      	bne.n	8007722 <HAL_TIM_PWM_Start+0x72>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	bf14      	ite	ne
 800771a:	2301      	movne	r3, #1
 800771c:	2300      	moveq	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	e015      	b.n	800774e <HAL_TIM_PWM_Start+0x9e>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b10      	cmp	r3, #16
 8007726:	d109      	bne.n	800773c <HAL_TIM_PWM_Start+0x8c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	e008      	b.n	800774e <HAL_TIM_PWM_Start+0x9e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b01      	cmp	r3, #1
 8007746:	bf14      	ite	ne
 8007748:	2301      	movne	r3, #1
 800774a:	2300      	moveq	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e097      	b.n	8007886 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <HAL_TIM_PWM_Start+0xb6>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007764:	e023      	b.n	80077ae <HAL_TIM_PWM_Start+0xfe>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d104      	bne.n	8007776 <HAL_TIM_PWM_Start+0xc6>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007774:	e01b      	b.n	80077ae <HAL_TIM_PWM_Start+0xfe>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b08      	cmp	r3, #8
 800777a:	d104      	bne.n	8007786 <HAL_TIM_PWM_Start+0xd6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007784:	e013      	b.n	80077ae <HAL_TIM_PWM_Start+0xfe>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b0c      	cmp	r3, #12
 800778a:	d104      	bne.n	8007796 <HAL_TIM_PWM_Start+0xe6>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007794:	e00b      	b.n	80077ae <HAL_TIM_PWM_Start+0xfe>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b10      	cmp	r3, #16
 800779a:	d104      	bne.n	80077a6 <HAL_TIM_PWM_Start+0xf6>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a4:	e003      	b.n	80077ae <HAL_TIM_PWM_Start+0xfe>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2201      	movs	r2, #1
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fc6a 	bl	8009090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a33      	ldr	r2, [pc, #204]	@ (8007890 <HAL_TIM_PWM_Start+0x1e0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_TIM_PWM_Start+0x13e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a32      	ldr	r2, [pc, #200]	@ (8007894 <HAL_TIM_PWM_Start+0x1e4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_TIM_PWM_Start+0x13e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a30      	ldr	r2, [pc, #192]	@ (8007898 <HAL_TIM_PWM_Start+0x1e8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_TIM_PWM_Start+0x13e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a2f      	ldr	r2, [pc, #188]	@ (800789c <HAL_TIM_PWM_Start+0x1ec>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_TIM_PWM_Start+0x13e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a2d      	ldr	r2, [pc, #180]	@ (80078a0 <HAL_TIM_PWM_Start+0x1f0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d101      	bne.n	80077f2 <HAL_TIM_PWM_Start+0x142>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <HAL_TIM_PWM_Start+0x144>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d007      	beq.n	8007808 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007806:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <HAL_TIM_PWM_Start+0x1e0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d018      	beq.n	8007844 <HAL_TIM_PWM_Start+0x194>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781a:	d013      	beq.n	8007844 <HAL_TIM_PWM_Start+0x194>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a20      	ldr	r2, [pc, #128]	@ (80078a4 <HAL_TIM_PWM_Start+0x1f4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00e      	beq.n	8007844 <HAL_TIM_PWM_Start+0x194>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1f      	ldr	r2, [pc, #124]	@ (80078a8 <HAL_TIM_PWM_Start+0x1f8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d009      	beq.n	8007844 <HAL_TIM_PWM_Start+0x194>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a17      	ldr	r2, [pc, #92]	@ (8007894 <HAL_TIM_PWM_Start+0x1e4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <HAL_TIM_PWM_Start+0x194>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a16      	ldr	r2, [pc, #88]	@ (8007898 <HAL_TIM_PWM_Start+0x1e8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d115      	bne.n	8007870 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	4b18      	ldr	r3, [pc, #96]	@ (80078ac <HAL_TIM_PWM_Start+0x1fc>)
 800784c:	4013      	ands	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b06      	cmp	r3, #6
 8007854:	d015      	beq.n	8007882 <HAL_TIM_PWM_Start+0x1d2>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800785c:	d011      	beq.n	8007882 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0201 	orr.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786e:	e008      	b.n	8007882 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	e000      	b.n	8007884 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	00010007 	.word	0x00010007

080078b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e049      	b.n	8007956 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f841 	bl	800795e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f000 fe82 	bl	80085f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <HAL_TIM_IC_Start_DMA+0x22>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007992:	b2db      	uxtb	r3, r3
 8007994:	e023      	b.n	80079de <HAL_TIM_IC_Start_DMA+0x6a>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b04      	cmp	r3, #4
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_IC_Start_DMA+0x32>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	e01b      	b.n	80079de <HAL_TIM_IC_Start_DMA+0x6a>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start_DMA+0x42>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	e013      	b.n	80079de <HAL_TIM_IC_Start_DMA+0x6a>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b0c      	cmp	r3, #12
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_IC_Start_DMA+0x52>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	e00b      	b.n	80079de <HAL_TIM_IC_Start_DMA+0x6a>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b10      	cmp	r3, #16
 80079ca:	d104      	bne.n	80079d6 <HAL_TIM_IC_Start_DMA+0x62>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	e003      	b.n	80079de <HAL_TIM_IC_Start_DMA+0x6a>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <HAL_TIM_IC_Start_DMA+0x7c>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	e013      	b.n	8007a18 <HAL_TIM_IC_Start_DMA+0xa4>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d104      	bne.n	8007a00 <HAL_TIM_IC_Start_DMA+0x8c>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	e00b      	b.n	8007a18 <HAL_TIM_IC_Start_DMA+0xa4>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d104      	bne.n	8007a10 <HAL_TIM_IC_Start_DMA+0x9c>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e003      	b.n	8007a18 <HAL_TIM_IC_Start_DMA+0xa4>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007a1a:	7dbb      	ldrb	r3, [r7, #22]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d002      	beq.n	8007a26 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007a20:	7d7b      	ldrb	r3, [r7, #21]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d101      	bne.n	8007a2a <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
 8007a28:	e152      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007a2a:	7dbb      	ldrb	r3, [r7, #22]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d153      	bne.n	8007ad8 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007a30:	7d7b      	ldrb	r3, [r7, #21]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d150      	bne.n	8007ad8 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_TIM_IC_Start_DMA+0xce>
 8007a3c:	887b      	ldrh	r3, [r7, #2]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e144      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <HAL_TIM_IC_Start_DMA+0xe2>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a54:	e023      	b.n	8007a9e <HAL_TIM_IC_Start_DMA+0x12a>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d104      	bne.n	8007a66 <HAL_TIM_IC_Start_DMA+0xf2>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a64:	e01b      	b.n	8007a9e <HAL_TIM_IC_Start_DMA+0x12a>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d104      	bne.n	8007a76 <HAL_TIM_IC_Start_DMA+0x102>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a74:	e013      	b.n	8007a9e <HAL_TIM_IC_Start_DMA+0x12a>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d104      	bne.n	8007a86 <HAL_TIM_IC_Start_DMA+0x112>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a84:	e00b      	b.n	8007a9e <HAL_TIM_IC_Start_DMA+0x12a>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d104      	bne.n	8007a96 <HAL_TIM_IC_Start_DMA+0x122>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a94:	e003      	b.n	8007a9e <HAL_TIM_IC_Start_DMA+0x12a>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_IC_Start_DMA+0x13a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8007aac:	e016      	b.n	8007adc <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_IC_Start_DMA+0x14a>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8007abc:	e00e      	b.n	8007adc <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_IC_Start_DMA+0x15a>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8007acc:	e006      	b.n	8007adc <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8007ad6:	e001      	b.n	8007adc <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e0f9      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fad3 	bl	8009090 <TIM_CCxChannelCmd>

  switch (Channel)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b0c      	cmp	r3, #12
 8007aee:	f200 80ad 	bhi.w	8007c4c <HAL_TIM_IC_Start_DMA+0x2d8>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <HAL_TIM_IC_Start_DMA+0x184>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b2d 	.word	0x08007b2d
 8007afc:	08007c4d 	.word	0x08007c4d
 8007b00:	08007c4d 	.word	0x08007c4d
 8007b04:	08007c4d 	.word	0x08007c4d
 8007b08:	08007b75 	.word	0x08007b75
 8007b0c:	08007c4d 	.word	0x08007c4d
 8007b10:	08007c4d 	.word	0x08007c4d
 8007b14:	08007c4d 	.word	0x08007c4d
 8007b18:	08007bbd 	.word	0x08007bbd
 8007b1c:	08007c4d 	.word	0x08007c4d
 8007b20:	08007c4d 	.word	0x08007c4d
 8007b24:	08007c4d 	.word	0x08007c4d
 8007b28:	08007c05 	.word	0x08007c05
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b30:	4a69      	ldr	r2, [pc, #420]	@ (8007cd8 <HAL_TIM_IC_Start_DMA+0x364>)
 8007b32:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b38:	4a68      	ldr	r2, [pc, #416]	@ (8007cdc <HAL_TIM_IC_Start_DMA+0x368>)
 8007b3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	4a67      	ldr	r2, [pc, #412]	@ (8007ce0 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007b42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3334      	adds	r3, #52	@ 0x34
 8007b4e:	4619      	mov	r1, r3
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	887b      	ldrh	r3, [r7, #2]
 8007b54:	f7fd fc80 	bl	8005458 <HAL_DMA_Start_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e0b6      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b70:	60da      	str	r2, [r3, #12]
      break;
 8007b72:	e06e      	b.n	8007c52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	4a57      	ldr	r2, [pc, #348]	@ (8007cd8 <HAL_TIM_IC_Start_DMA+0x364>)
 8007b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	4a56      	ldr	r2, [pc, #344]	@ (8007cdc <HAL_TIM_IC_Start_DMA+0x368>)
 8007b82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	4a55      	ldr	r2, [pc, #340]	@ (8007ce0 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3338      	adds	r3, #56	@ 0x38
 8007b96:	4619      	mov	r1, r3
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	887b      	ldrh	r3, [r7, #2]
 8007b9c:	f7fd fc5c 	bl	8005458 <HAL_DMA_Start_IT>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e092      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bb8:	60da      	str	r2, [r3, #12]
      break;
 8007bba:	e04a      	b.n	8007c52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	4a45      	ldr	r2, [pc, #276]	@ (8007cd8 <HAL_TIM_IC_Start_DMA+0x364>)
 8007bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	4a44      	ldr	r2, [pc, #272]	@ (8007cdc <HAL_TIM_IC_Start_DMA+0x368>)
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	4a43      	ldr	r2, [pc, #268]	@ (8007ce0 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007bd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	333c      	adds	r3, #60	@ 0x3c
 8007bde:	4619      	mov	r1, r3
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	f7fd fc38 	bl	8005458 <HAL_DMA_Start_IT>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e06e      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c00:	60da      	str	r2, [r3, #12]
      break;
 8007c02:	e026      	b.n	8007c52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	4a33      	ldr	r2, [pc, #204]	@ (8007cd8 <HAL_TIM_IC_Start_DMA+0x364>)
 8007c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c10:	4a32      	ldr	r2, [pc, #200]	@ (8007cdc <HAL_TIM_IC_Start_DMA+0x368>)
 8007c12:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	4a31      	ldr	r2, [pc, #196]	@ (8007ce0 <HAL_TIM_IC_Start_DMA+0x36c>)
 8007c1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3340      	adds	r3, #64	@ 0x40
 8007c26:	4619      	mov	r1, r3
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	887b      	ldrh	r3, [r7, #2]
 8007c2c:	f7fd fc14 	bl	8005458 <HAL_DMA_Start_IT>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e04a      	b.n	8007cd0 <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c48:	60da      	str	r2, [r3, #12]
      break;
 8007c4a:	e002      	b.n	8007c52 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c50:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a23      	ldr	r2, [pc, #140]	@ (8007ce4 <HAL_TIM_IC_Start_DMA+0x370>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d018      	beq.n	8007c8e <HAL_TIM_IC_Start_DMA+0x31a>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c64:	d013      	beq.n	8007c8e <HAL_TIM_IC_Start_DMA+0x31a>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce8 <HAL_TIM_IC_Start_DMA+0x374>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00e      	beq.n	8007c8e <HAL_TIM_IC_Start_DMA+0x31a>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	@ (8007cec <HAL_TIM_IC_Start_DMA+0x378>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <HAL_TIM_IC_Start_DMA+0x31a>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf0 <HAL_TIM_IC_Start_DMA+0x37c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_TIM_IC_Start_DMA+0x31a>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf4 <HAL_TIM_IC_Start_DMA+0x380>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d115      	bne.n	8007cba <HAL_TIM_IC_Start_DMA+0x346>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	4b18      	ldr	r3, [pc, #96]	@ (8007cf8 <HAL_TIM_IC_Start_DMA+0x384>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b06      	cmp	r3, #6
 8007c9e:	d015      	beq.n	8007ccc <HAL_TIM_IC_Start_DMA+0x358>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca6:	d011      	beq.n	8007ccc <HAL_TIM_IC_Start_DMA+0x358>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb8:	e008      	b.n	8007ccc <HAL_TIM_IC_Start_DMA+0x358>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0201 	orr.w	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e000      	b.n	8007cce <HAL_TIM_IC_Start_DMA+0x35a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ccc:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	080084c7 	.word	0x080084c7
 8007cdc:	0800858f 	.word	0x0800858f
 8007ce0:	08008435 	.word	0x08008435
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40013400 	.word	0x40013400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	00010007 	.word	0x00010007

08007cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d020      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01b      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0202 	mvn.w	r2, #2
 8007d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7f9 faa6 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8007d4c:	e005      	b.n	8007d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fb3e 	bl	80083d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fb4f 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01b      	beq.n	8007dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0204 	mvn.w	r2, #4
 8007d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7f9 fa80 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb18 	bl	80083d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb29 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d020      	beq.n	8007df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01b      	beq.n	8007df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0208 	mvn.w	r2, #8
 8007dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2204      	movs	r2, #4
 8007dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7f9 fa5a 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8007de4:	e005      	b.n	8007df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 faf2 	bl	80083d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fb03 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d020      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0210 	mvn.w	r2, #16
 8007e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7f9 fa34 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8007e30:	e005      	b.n	8007e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 facc 	bl	80083d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fadd 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0201 	mvn.w	r2, #1
 8007e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 faaa 	bl	80083bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d104      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00c      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 f9af 	bl	80091f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00c      	beq.n	8007eba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f9a7 	bl	8009208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00c      	beq.n	8007ede <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa97 	bl	800840c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f06f 0220 	mvn.w	r2, #32
 8007efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f96f 	bl	80091e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00c      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 f97b 	bl	800921c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f973 	bl	8009230 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f96b 	bl	8009244 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00c      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f963 	bl	8009258 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_TIM_OC_ConfigChannel+0x1e>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e066      	b.n	8008088 <HAL_TIM_OC_ConfigChannel+0xec>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b14      	cmp	r3, #20
 8007fc6:	d857      	bhi.n	8008078 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fce:	bf00      	nop
 8007fd0:	08008025 	.word	0x08008025
 8007fd4:	08008079 	.word	0x08008079
 8007fd8:	08008079 	.word	0x08008079
 8007fdc:	08008079 	.word	0x08008079
 8007fe0:	08008033 	.word	0x08008033
 8007fe4:	08008079 	.word	0x08008079
 8007fe8:	08008079 	.word	0x08008079
 8007fec:	08008079 	.word	0x08008079
 8007ff0:	08008041 	.word	0x08008041
 8007ff4:	08008079 	.word	0x08008079
 8007ff8:	08008079 	.word	0x08008079
 8007ffc:	08008079 	.word	0x08008079
 8008000:	0800804f 	.word	0x0800804f
 8008004:	08008079 	.word	0x08008079
 8008008:	08008079 	.word	0x08008079
 800800c:	08008079 	.word	0x08008079
 8008010:	0800805d 	.word	0x0800805d
 8008014:	08008079 	.word	0x08008079
 8008018:	08008079 	.word	0x08008079
 800801c:	08008079 	.word	0x08008079
 8008020:	0800806b 	.word	0x0800806b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fb80 	bl	8008730 <TIM_OC1_SetConfig>
      break;
 8008030:	e025      	b.n	800807e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fc09 	bl	8008850 <TIM_OC2_SetConfig>
      break;
 800803e:	e01e      	b.n	800807e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fc8c 	bl	8008964 <TIM_OC3_SetConfig>
      break;
 800804c:	e017      	b.n	800807e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fd0d 	bl	8008a74 <TIM_OC4_SetConfig>
      break;
 800805a:	e010      	b.n	800807e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fd90 	bl	8008b88 <TIM_OC5_SetConfig>
      break;
 8008068:	e009      	b.n	800807e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 fded 	bl	8008c50 <TIM_OC6_SetConfig>
      break;
 8008076:	e002      	b.n	800807e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d101      	bne.n	80080ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e088      	b.n	80081c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11b      	bne.n	80080f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80080cc:	f000 fe26 	bl	8008d1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 020c 	bic.w	r2, r2, #12
 80080de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6999      	ldr	r1, [r3, #24]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	619a      	str	r2, [r3, #24]
 80080f2:	e060      	b.n	80081b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d11c      	bne.n	8008134 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800810a:	f000 fe9e 	bl	8008e4a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800811c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6999      	ldr	r1, [r3, #24]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	021a      	lsls	r2, r3, #8
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	619a      	str	r2, [r3, #24]
 8008132:	e040      	b.n	80081b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b08      	cmp	r3, #8
 8008138:	d11b      	bne.n	8008172 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800814a:	f000 feeb 	bl	8008f24 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 020c 	bic.w	r2, r2, #12
 800815c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69d9      	ldr	r1, [r3, #28]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	61da      	str	r2, [r3, #28]
 8008170:	e021      	b.n	80081b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b0c      	cmp	r3, #12
 8008176:	d11c      	bne.n	80081b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008188:	f000 ff08 	bl	8008f9c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800819a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69d9      	ldr	r1, [r3, #28]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	021a      	lsls	r2, r3, #8
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	61da      	str	r2, [r3, #28]
 80081b0:	e001      	b.n	80081b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_TIM_ConfigClockSource+0x1c>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e0de      	b.n	80083a2 <HAL_TIM_ConfigClockSource+0x1da>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008202:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800820e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a63      	ldr	r2, [pc, #396]	@ (80083ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	f000 80a9 	beq.w	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 8008224:	4a61      	ldr	r2, [pc, #388]	@ (80083ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	f200 80ae 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 800822c:	4a60      	ldr	r2, [pc, #384]	@ (80083b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	f000 80a1 	beq.w	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 8008234:	4a5e      	ldr	r2, [pc, #376]	@ (80083b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	f200 80a6 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 800823c:	4a5d      	ldr	r2, [pc, #372]	@ (80083b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800823e:	4293      	cmp	r3, r2
 8008240:	f000 8099 	beq.w	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 8008244:	4a5b      	ldr	r2, [pc, #364]	@ (80083b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008246:	4293      	cmp	r3, r2
 8008248:	f200 809e 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 800824c:	4a5a      	ldr	r2, [pc, #360]	@ (80083b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	f000 8091 	beq.w	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 8008254:	4a58      	ldr	r2, [pc, #352]	@ (80083b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	f200 8096 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 800825c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008260:	f000 8089 	beq.w	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 8008264:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008268:	f200 808e 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 800826c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008270:	d03e      	beq.n	80082f0 <HAL_TIM_ConfigClockSource+0x128>
 8008272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008276:	f200 8087 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827e:	f000 8086 	beq.w	800838e <HAL_TIM_ConfigClockSource+0x1c6>
 8008282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008286:	d87f      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 8008288:	2b70      	cmp	r3, #112	@ 0x70
 800828a:	d01a      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0xfa>
 800828c:	2b70      	cmp	r3, #112	@ 0x70
 800828e:	d87b      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 8008290:	2b60      	cmp	r3, #96	@ 0x60
 8008292:	d050      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x16e>
 8008294:	2b60      	cmp	r3, #96	@ 0x60
 8008296:	d877      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 8008298:	2b50      	cmp	r3, #80	@ 0x50
 800829a:	d03c      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x14e>
 800829c:	2b50      	cmp	r3, #80	@ 0x50
 800829e:	d873      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 80082a0:	2b40      	cmp	r3, #64	@ 0x40
 80082a2:	d058      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x18e>
 80082a4:	2b40      	cmp	r3, #64	@ 0x40
 80082a6:	d86f      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 80082a8:	2b30      	cmp	r3, #48	@ 0x30
 80082aa:	d064      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 80082ac:	2b30      	cmp	r3, #48	@ 0x30
 80082ae:	d86b      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d060      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d867      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05c      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d05a      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x1ae>
 80082c0:	e062      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082d2:	f000 febd 	bl	8009050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80082e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	609a      	str	r2, [r3, #8]
      break;
 80082ee:	e04f      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008300:	f000 fea6 	bl	8009050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008312:	609a      	str	r2, [r3, #8]
      break;
 8008314:	e03c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008322:	461a      	mov	r2, r3
 8008324:	f000 fd62 	bl	8008dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2150      	movs	r1, #80	@ 0x50
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fe71 	bl	8009016 <TIM_ITRx_SetConfig>
      break;
 8008334:	e02c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008342:	461a      	mov	r2, r3
 8008344:	f000 fdbe 	bl	8008ec4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2160      	movs	r1, #96	@ 0x60
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fe61 	bl	8009016 <TIM_ITRx_SetConfig>
      break;
 8008354:	e01c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008362:	461a      	mov	r2, r3
 8008364:	f000 fd42 	bl	8008dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2140      	movs	r1, #64	@ 0x40
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fe51 	bl	8009016 <TIM_ITRx_SetConfig>
      break;
 8008374:	e00c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f000 fe48 	bl	8009016 <TIM_ITRx_SetConfig>
      break;
 8008386:	e003      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
      break;
 800838c:	e000      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800838e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	00100070 	.word	0x00100070
 80083b0:	00100040 	.word	0x00100040
 80083b4:	00100030 	.word	0x00100030
 80083b8:	00100020 	.word	0x00100020

080083bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008440:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d107      	bne.n	800845c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800845a:	e02a      	b.n	80084b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d107      	bne.n	8008476 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2202      	movs	r2, #2
 800846a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008474:	e01d      	b.n	80084b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d107      	bne.n	8008490 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2204      	movs	r2, #4
 8008484:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800848e:	e010      	b.n	80084b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d107      	bne.n	80084aa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2208      	movs	r2, #8
 800849e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084a8:	e003      	b.n	80084b2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff ffb4 	bl	8008420 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	771a      	strb	r2, [r3, #28]
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d10f      	bne.n	80084fe <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d146      	bne.n	800857a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084fc:	e03d      	b.n	800857a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d10f      	bne.n	8008528 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2202      	movs	r2, #2
 800850c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d131      	bne.n	800857a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008526:	e028      	b.n	800857a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	429a      	cmp	r2, r3
 8008530:	d10f      	bne.n	8008552 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2204      	movs	r2, #4
 8008536:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d11c      	bne.n	800857a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008550:	e013      	b.n	800857a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	d10e      	bne.n	800857a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2208      	movs	r2, #8
 8008560:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7f8 fe8c 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	771a      	strb	r2, [r3, #28]
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d103      	bne.n	80085ae <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	771a      	strb	r2, [r3, #28]
 80085ac:	e019      	b.n	80085e2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d103      	bne.n	80085c0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2202      	movs	r2, #2
 80085bc:	771a      	strb	r2, [r3, #28]
 80085be:	e010      	b.n	80085e2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d103      	bne.n	80085d2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2204      	movs	r2, #4
 80085ce:	771a      	strb	r2, [r3, #28]
 80085d0:	e007      	b.n	80085e2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d102      	bne.n	80085e2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2208      	movs	r2, #8
 80085e0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fefe 	bl	80083e4 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	771a      	strb	r2, [r3, #28]
}
 80085ee:	bf00      	nop
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a42      	ldr	r2, [pc, #264]	@ (8008714 <TIM_Base_SetConfig+0x11c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00f      	beq.n	8008630 <TIM_Base_SetConfig+0x38>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008616:	d00b      	beq.n	8008630 <TIM_Base_SetConfig+0x38>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a3f      	ldr	r2, [pc, #252]	@ (8008718 <TIM_Base_SetConfig+0x120>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_Base_SetConfig+0x38>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a3e      	ldr	r2, [pc, #248]	@ (800871c <TIM_Base_SetConfig+0x124>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_Base_SetConfig+0x38>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a3d      	ldr	r2, [pc, #244]	@ (8008720 <TIM_Base_SetConfig+0x128>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d108      	bne.n	8008642 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a33      	ldr	r2, [pc, #204]	@ (8008714 <TIM_Base_SetConfig+0x11c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d01b      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008650:	d017      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a30      	ldr	r2, [pc, #192]	@ (8008718 <TIM_Base_SetConfig+0x120>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d013      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a2f      	ldr	r2, [pc, #188]	@ (800871c <TIM_Base_SetConfig+0x124>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00f      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a2e      	ldr	r2, [pc, #184]	@ (8008720 <TIM_Base_SetConfig+0x128>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00b      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2d      	ldr	r2, [pc, #180]	@ (8008724 <TIM_Base_SetConfig+0x12c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d007      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a2c      	ldr	r2, [pc, #176]	@ (8008728 <TIM_Base_SetConfig+0x130>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d003      	beq.n	8008682 <TIM_Base_SetConfig+0x8a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2b      	ldr	r2, [pc, #172]	@ (800872c <TIM_Base_SetConfig+0x134>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d108      	bne.n	8008694 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a16      	ldr	r2, [pc, #88]	@ (8008714 <TIM_Base_SetConfig+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d00f      	beq.n	80086e0 <TIM_Base_SetConfig+0xe8>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a17      	ldr	r2, [pc, #92]	@ (8008720 <TIM_Base_SetConfig+0x128>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00b      	beq.n	80086e0 <TIM_Base_SetConfig+0xe8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a16      	ldr	r2, [pc, #88]	@ (8008724 <TIM_Base_SetConfig+0x12c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d007      	beq.n	80086e0 <TIM_Base_SetConfig+0xe8>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a15      	ldr	r2, [pc, #84]	@ (8008728 <TIM_Base_SetConfig+0x130>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_Base_SetConfig+0xe8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a14      	ldr	r2, [pc, #80]	@ (800872c <TIM_Base_SetConfig+0x134>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d103      	bne.n	80086e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d105      	bne.n	8008706 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f023 0201 	bic.w	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	611a      	str	r2, [r3, #16]
  }
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40012c00 	.word	0x40012c00
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40013400 	.word	0x40013400
 8008724:	40014000 	.word	0x40014000
 8008728:	40014400 	.word	0x40014400
 800872c:	40014800 	.word	0x40014800

08008730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	f023 0201 	bic.w	r2, r3, #1
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800875e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f023 0302 	bic.w	r3, r3, #2
 800877c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a2c      	ldr	r2, [pc, #176]	@ (800883c <TIM_OC1_SetConfig+0x10c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d00f      	beq.n	80087b0 <TIM_OC1_SetConfig+0x80>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a2b      	ldr	r2, [pc, #172]	@ (8008840 <TIM_OC1_SetConfig+0x110>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00b      	beq.n	80087b0 <TIM_OC1_SetConfig+0x80>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a2a      	ldr	r2, [pc, #168]	@ (8008844 <TIM_OC1_SetConfig+0x114>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d007      	beq.n	80087b0 <TIM_OC1_SetConfig+0x80>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a29      	ldr	r2, [pc, #164]	@ (8008848 <TIM_OC1_SetConfig+0x118>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d003      	beq.n	80087b0 <TIM_OC1_SetConfig+0x80>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a28      	ldr	r2, [pc, #160]	@ (800884c <TIM_OC1_SetConfig+0x11c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10c      	bne.n	80087ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f023 0308 	bic.w	r3, r3, #8
 80087b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	4313      	orrs	r3, r2
 80087c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f023 0304 	bic.w	r3, r3, #4
 80087c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a1b      	ldr	r2, [pc, #108]	@ (800883c <TIM_OC1_SetConfig+0x10c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00f      	beq.n	80087f2 <TIM_OC1_SetConfig+0xc2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008840 <TIM_OC1_SetConfig+0x110>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00b      	beq.n	80087f2 <TIM_OC1_SetConfig+0xc2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a19      	ldr	r2, [pc, #100]	@ (8008844 <TIM_OC1_SetConfig+0x114>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d007      	beq.n	80087f2 <TIM_OC1_SetConfig+0xc2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a18      	ldr	r2, [pc, #96]	@ (8008848 <TIM_OC1_SetConfig+0x118>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d003      	beq.n	80087f2 <TIM_OC1_SetConfig+0xc2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a17      	ldr	r2, [pc, #92]	@ (800884c <TIM_OC1_SetConfig+0x11c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d111      	bne.n	8008816 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	621a      	str	r2, [r3, #32]
}
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	40012c00 	.word	0x40012c00
 8008840:	40013400 	.word	0x40013400
 8008844:	40014000 	.word	0x40014000
 8008848:	40014400 	.word	0x40014400
 800884c:	40014800 	.word	0x40014800

08008850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	f023 0210 	bic.w	r2, r3, #16
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800888a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f023 0320 	bic.w	r3, r3, #32
 800889e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a28      	ldr	r2, [pc, #160]	@ (8008950 <TIM_OC2_SetConfig+0x100>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC2_SetConfig+0x6c>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a27      	ldr	r2, [pc, #156]	@ (8008954 <TIM_OC2_SetConfig+0x104>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d10d      	bne.n	80088d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <TIM_OC2_SetConfig+0x100>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00f      	beq.n	8008900 <TIM_OC2_SetConfig+0xb0>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <TIM_OC2_SetConfig+0x104>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00b      	beq.n	8008900 <TIM_OC2_SetConfig+0xb0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <TIM_OC2_SetConfig+0x108>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d007      	beq.n	8008900 <TIM_OC2_SetConfig+0xb0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1a      	ldr	r2, [pc, #104]	@ (800895c <TIM_OC2_SetConfig+0x10c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_OC2_SetConfig+0xb0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a19      	ldr	r2, [pc, #100]	@ (8008960 <TIM_OC2_SetConfig+0x110>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d113      	bne.n	8008928 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800890e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	621a      	str	r2, [r3, #32]
}
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40013400 	.word	0x40013400
 8008958:	40014000 	.word	0x40014000
 800895c:	40014400 	.word	0x40014400
 8008960:	40014800 	.word	0x40014800

08008964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0303 	bic.w	r3, r3, #3
 800899e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a27      	ldr	r2, [pc, #156]	@ (8008a60 <TIM_OC3_SetConfig+0xfc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d003      	beq.n	80089ce <TIM_OC3_SetConfig+0x6a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a26      	ldr	r2, [pc, #152]	@ (8008a64 <TIM_OC3_SetConfig+0x100>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d10d      	bne.n	80089ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008a60 <TIM_OC3_SetConfig+0xfc>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00f      	beq.n	8008a12 <TIM_OC3_SetConfig+0xae>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a64 <TIM_OC3_SetConfig+0x100>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00b      	beq.n	8008a12 <TIM_OC3_SetConfig+0xae>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008a68 <TIM_OC3_SetConfig+0x104>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d007      	beq.n	8008a12 <TIM_OC3_SetConfig+0xae>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a19      	ldr	r2, [pc, #100]	@ (8008a6c <TIM_OC3_SetConfig+0x108>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d003      	beq.n	8008a12 <TIM_OC3_SetConfig+0xae>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a18      	ldr	r2, [pc, #96]	@ (8008a70 <TIM_OC3_SetConfig+0x10c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d113      	bne.n	8008a3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	621a      	str	r2, [r3, #32]
}
 8008a54:	bf00      	nop
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	40012c00 	.word	0x40012c00
 8008a64:	40013400 	.word	0x40013400
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400
 8008a70:	40014800 	.word	0x40014800

08008a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	031b      	lsls	r3, r3, #12
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a28      	ldr	r2, [pc, #160]	@ (8008b74 <TIM_OC4_SetConfig+0x100>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC4_SetConfig+0x6c>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a27      	ldr	r2, [pc, #156]	@ (8008b78 <TIM_OC4_SetConfig+0x104>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10d      	bne.n	8008afc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	031b      	lsls	r3, r3, #12
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a1d      	ldr	r2, [pc, #116]	@ (8008b74 <TIM_OC4_SetConfig+0x100>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00f      	beq.n	8008b24 <TIM_OC4_SetConfig+0xb0>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a1c      	ldr	r2, [pc, #112]	@ (8008b78 <TIM_OC4_SetConfig+0x104>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00b      	beq.n	8008b24 <TIM_OC4_SetConfig+0xb0>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008b7c <TIM_OC4_SetConfig+0x108>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d007      	beq.n	8008b24 <TIM_OC4_SetConfig+0xb0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a1a      	ldr	r2, [pc, #104]	@ (8008b80 <TIM_OC4_SetConfig+0x10c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d003      	beq.n	8008b24 <TIM_OC4_SetConfig+0xb0>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a19      	ldr	r2, [pc, #100]	@ (8008b84 <TIM_OC4_SetConfig+0x110>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d113      	bne.n	8008b4c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	019b      	lsls	r3, r3, #6
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	019b      	lsls	r3, r3, #6
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	621a      	str	r2, [r3, #32]
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40012c00 	.word	0x40012c00
 8008b78:	40013400 	.word	0x40013400
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	40014400 	.word	0x40014400
 8008b84:	40014800 	.word	0x40014800

08008b88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008bcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	041b      	lsls	r3, r3, #16
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a17      	ldr	r2, [pc, #92]	@ (8008c3c <TIM_OC5_SetConfig+0xb4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00f      	beq.n	8008c02 <TIM_OC5_SetConfig+0x7a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a16      	ldr	r2, [pc, #88]	@ (8008c40 <TIM_OC5_SetConfig+0xb8>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <TIM_OC5_SetConfig+0x7a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a15      	ldr	r2, [pc, #84]	@ (8008c44 <TIM_OC5_SetConfig+0xbc>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <TIM_OC5_SetConfig+0x7a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a14      	ldr	r2, [pc, #80]	@ (8008c48 <TIM_OC5_SetConfig+0xc0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_OC5_SetConfig+0x7a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a13      	ldr	r2, [pc, #76]	@ (8008c4c <TIM_OC5_SetConfig+0xc4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d109      	bne.n	8008c16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	621a      	str	r2, [r3, #32]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800

08008c50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	051b      	lsls	r3, r3, #20
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a18      	ldr	r2, [pc, #96]	@ (8008d08 <TIM_OC6_SetConfig+0xb8>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00f      	beq.n	8008ccc <TIM_OC6_SetConfig+0x7c>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a17      	ldr	r2, [pc, #92]	@ (8008d0c <TIM_OC6_SetConfig+0xbc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00b      	beq.n	8008ccc <TIM_OC6_SetConfig+0x7c>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a16      	ldr	r2, [pc, #88]	@ (8008d10 <TIM_OC6_SetConfig+0xc0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d007      	beq.n	8008ccc <TIM_OC6_SetConfig+0x7c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	@ (8008d14 <TIM_OC6_SetConfig+0xc4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_OC6_SetConfig+0x7c>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a14      	ldr	r2, [pc, #80]	@ (8008d18 <TIM_OC6_SetConfig+0xc8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d109      	bne.n	8008ce0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	029b      	lsls	r3, r3, #10
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	621a      	str	r2, [r3, #32]
}
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40012c00 	.word	0x40012c00
 8008d0c:	40013400 	.word	0x40013400
 8008d10:	40014000 	.word	0x40014000
 8008d14:	40014400 	.word	0x40014400
 8008d18:	40014800 	.word	0x40014800

08008d1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f023 0201 	bic.w	r2, r3, #1
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4a24      	ldr	r2, [pc, #144]	@ (8008dd8 <TIM_TI1_SetConfig+0xbc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <TIM_TI1_SetConfig+0x56>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d50:	d00f      	beq.n	8008d72 <TIM_TI1_SetConfig+0x56>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4a21      	ldr	r2, [pc, #132]	@ (8008ddc <TIM_TI1_SetConfig+0xc0>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <TIM_TI1_SetConfig+0x56>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4a20      	ldr	r2, [pc, #128]	@ (8008de0 <TIM_TI1_SetConfig+0xc4>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d007      	beq.n	8008d72 <TIM_TI1_SetConfig+0x56>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4a1f      	ldr	r2, [pc, #124]	@ (8008de4 <TIM_TI1_SetConfig+0xc8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_TI1_SetConfig+0x56>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008de8 <TIM_TI1_SetConfig+0xcc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d101      	bne.n	8008d76 <TIM_TI1_SetConfig+0x5a>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <TIM_TI1_SetConfig+0x5c>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f023 0303 	bic.w	r3, r3, #3
 8008d82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e003      	b.n	8008d96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f023 030a 	bic.w	r3, r3, #10
 8008db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f003 030a 	and.w	r3, r3, #10
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	621a      	str	r2, [r3, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40012c00 	.word	0x40012c00
 8008ddc:	40000400 	.word	0x40000400
 8008de0:	40000800 	.word	0x40000800
 8008de4:	40013400 	.word	0x40013400
 8008de8:	40014000 	.word	0x40014000

08008dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	f023 0201 	bic.w	r2, r3, #1
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f023 030a 	bic.w	r3, r3, #10
 8008e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	621a      	str	r2, [r3, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
 8008e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f023 0210 	bic.w	r2, r3, #16
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	031b      	lsls	r3, r3, #12
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	621a      	str	r2, [r3, #32]
}
 8008eb8:	bf00      	nop
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	f023 0210 	bic.w	r2, r3, #16
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	031b      	lsls	r3, r3, #12
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	621a      	str	r2, [r3, #32]
}
 8008f18:	bf00      	nop
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	bf00      	nop
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	031b      	lsls	r3, r3, #12
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008fee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	031b      	lsls	r3, r3, #12
 8008ff4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	621a      	str	r2, [r3, #32]
}
 800900a:	bf00      	nop
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009016:	b480      	push	{r7}
 8009018:	b085      	sub	sp, #20
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800902c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	f043 0307 	orr.w	r3, r3, #7
 800903c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	609a      	str	r2, [r3, #8]
}
 8009044:	bf00      	nop
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800906a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	021a      	lsls	r2, r3, #8
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	431a      	orrs	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4313      	orrs	r3, r2
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	609a      	str	r2, [r3, #8]
}
 8009084:	bf00      	nop
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f003 031f 	and.w	r3, r3, #31
 80090a2:	2201      	movs	r2, #1
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a1a      	ldr	r2, [r3, #32]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	43db      	mvns	r3, r3
 80090b2:	401a      	ands	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a1a      	ldr	r2, [r3, #32]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	fa01 f303 	lsl.w	r3, r1, r3
 80090c8:	431a      	orrs	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e065      	b.n	80091c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2c      	ldr	r2, [pc, #176]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a2b      	ldr	r2, [pc, #172]	@ (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d108      	bne.n	800913a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800912e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a1b      	ldr	r2, [pc, #108]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d018      	beq.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800916a:	d013      	beq.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a18      	ldr	r2, [pc, #96]	@ (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00e      	beq.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a17      	ldr	r2, [pc, #92]	@ (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d009      	beq.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a12      	ldr	r2, [pc, #72]	@ (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a13      	ldr	r2, [pc, #76]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d10c      	bne.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800919a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	40012c00 	.word	0x40012c00
 80091d0:	40013400 	.word	0x40013400
 80091d4:	40000400 	.word	0x40000400
 80091d8:	40000800 	.word	0x40000800
 80091dc:	40014000 	.word	0x40014000

080091e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e042      	b.n	8009304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7f9 fae9 	bl	8002868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2224      	movs	r2, #36	@ 0x24
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f022 0201 	bic.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fb9e 	bl	80099f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f8cf 	bl	8009460 <UART_SetConfig>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e01b      	b.n	8009304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0201 	orr.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc1d 	bl	8009b3c <UART_CheckIdleState>
 8009302:	4603      	mov	r3, r0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	@ 0x28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	4613      	mov	r3, r2
 8009318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009320:	2b20      	cmp	r3, #32
 8009322:	d167      	bne.n	80093f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <HAL_UART_Transmit_DMA+0x24>
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e060      	b.n	80093f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	88fa      	ldrh	r2, [r7, #6]
 800933e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	88fa      	ldrh	r2, [r7, #6]
 8009346:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2221      	movs	r2, #33	@ 0x21
 8009356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d028      	beq.n	80093b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009366:	4a26      	ldr	r2, [pc, #152]	@ (8009400 <HAL_UART_Transmit_DMA+0xf4>)
 8009368:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800936e:	4a25      	ldr	r2, [pc, #148]	@ (8009404 <HAL_UART_Transmit_DMA+0xf8>)
 8009370:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009376:	4a24      	ldr	r2, [pc, #144]	@ (8009408 <HAL_UART_Transmit_DMA+0xfc>)
 8009378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800937e:	2200      	movs	r2, #0
 8009380:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938a:	4619      	mov	r1, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3328      	adds	r3, #40	@ 0x28
 8009392:	461a      	mov	r2, r3
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	f7fc f85f 	bl	8005458 <HAL_DMA_Start_IT>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d009      	beq.n	80093b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2210      	movs	r2, #16
 80093a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e020      	b.n	80093f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2240      	movs	r2, #64	@ 0x40
 80093ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3308      	adds	r3, #8
 80093c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	613b      	str	r3, [r7, #16]
   return(result);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3308      	adds	r3, #8
 80093da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093dc:	623a      	str	r2, [r7, #32]
 80093de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	6a3a      	ldr	r2, [r7, #32]
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e5      	bne.n	80093bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e000      	b.n	80093f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80093f4:	2302      	movs	r3, #2
  }
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3728      	adds	r7, #40	@ 0x28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	0800a007 	.word	0x0800a007
 8009404:	0800a0a1 	.word	0x0800a0a1
 8009408:	0800a227 	.word	0x0800a227

0800940c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009464:	b08c      	sub	sp, #48	@ 0x30
 8009466:	af00      	add	r7, sp, #0
 8009468:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	689a      	ldr	r2, [r3, #8]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	431a      	orrs	r2, r3
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	431a      	orrs	r2, r3
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	4313      	orrs	r3, r2
 8009486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4bab      	ldr	r3, [pc, #684]	@ (800973c <UART_SetConfig+0x2dc>)
 8009490:	4013      	ands	r3, r2
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	6812      	ldr	r2, [r2, #0]
 8009496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009498:	430b      	orrs	r3, r1
 800949a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4aa0      	ldr	r2, [pc, #640]	@ (8009740 <UART_SetConfig+0x2e0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d004      	beq.n	80094cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094c8:	4313      	orrs	r3, r2
 80094ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80094d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	6812      	ldr	r2, [r2, #0]
 80094de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	f023 010f 	bic.w	r1, r3, #15
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a91      	ldr	r2, [pc, #580]	@ (8009744 <UART_SetConfig+0x2e4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d125      	bne.n	8009550 <UART_SetConfig+0xf0>
 8009504:	4b90      	ldr	r3, [pc, #576]	@ (8009748 <UART_SetConfig+0x2e8>)
 8009506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d81a      	bhi.n	8009548 <UART_SetConfig+0xe8>
 8009512:	a201      	add	r2, pc, #4	@ (adr r2, 8009518 <UART_SetConfig+0xb8>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	08009529 	.word	0x08009529
 800951c:	08009539 	.word	0x08009539
 8009520:	08009531 	.word	0x08009531
 8009524:	08009541 	.word	0x08009541
 8009528:	2301      	movs	r3, #1
 800952a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800952e:	e0d6      	b.n	80096de <UART_SetConfig+0x27e>
 8009530:	2302      	movs	r3, #2
 8009532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009536:	e0d2      	b.n	80096de <UART_SetConfig+0x27e>
 8009538:	2304      	movs	r3, #4
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800953e:	e0ce      	b.n	80096de <UART_SetConfig+0x27e>
 8009540:	2308      	movs	r3, #8
 8009542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009546:	e0ca      	b.n	80096de <UART_SetConfig+0x27e>
 8009548:	2310      	movs	r3, #16
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800954e:	e0c6      	b.n	80096de <UART_SetConfig+0x27e>
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a7d      	ldr	r2, [pc, #500]	@ (800974c <UART_SetConfig+0x2ec>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d138      	bne.n	80095cc <UART_SetConfig+0x16c>
 800955a:	4b7b      	ldr	r3, [pc, #492]	@ (8009748 <UART_SetConfig+0x2e8>)
 800955c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009560:	f003 030c 	and.w	r3, r3, #12
 8009564:	2b0c      	cmp	r3, #12
 8009566:	d82d      	bhi.n	80095c4 <UART_SetConfig+0x164>
 8009568:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <UART_SetConfig+0x110>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	080095a5 	.word	0x080095a5
 8009574:	080095c5 	.word	0x080095c5
 8009578:	080095c5 	.word	0x080095c5
 800957c:	080095c5 	.word	0x080095c5
 8009580:	080095b5 	.word	0x080095b5
 8009584:	080095c5 	.word	0x080095c5
 8009588:	080095c5 	.word	0x080095c5
 800958c:	080095c5 	.word	0x080095c5
 8009590:	080095ad 	.word	0x080095ad
 8009594:	080095c5 	.word	0x080095c5
 8009598:	080095c5 	.word	0x080095c5
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095bd 	.word	0x080095bd
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095aa:	e098      	b.n	80096de <UART_SetConfig+0x27e>
 80095ac:	2302      	movs	r3, #2
 80095ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b2:	e094      	b.n	80096de <UART_SetConfig+0x27e>
 80095b4:	2304      	movs	r3, #4
 80095b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ba:	e090      	b.n	80096de <UART_SetConfig+0x27e>
 80095bc:	2308      	movs	r3, #8
 80095be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c2:	e08c      	b.n	80096de <UART_SetConfig+0x27e>
 80095c4:	2310      	movs	r3, #16
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ca:	e088      	b.n	80096de <UART_SetConfig+0x27e>
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a5f      	ldr	r2, [pc, #380]	@ (8009750 <UART_SetConfig+0x2f0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d125      	bne.n	8009622 <UART_SetConfig+0x1c2>
 80095d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009748 <UART_SetConfig+0x2e8>)
 80095d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095e0:	2b30      	cmp	r3, #48	@ 0x30
 80095e2:	d016      	beq.n	8009612 <UART_SetConfig+0x1b2>
 80095e4:	2b30      	cmp	r3, #48	@ 0x30
 80095e6:	d818      	bhi.n	800961a <UART_SetConfig+0x1ba>
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d00a      	beq.n	8009602 <UART_SetConfig+0x1a2>
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d814      	bhi.n	800961a <UART_SetConfig+0x1ba>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <UART_SetConfig+0x19a>
 80095f4:	2b10      	cmp	r3, #16
 80095f6:	d008      	beq.n	800960a <UART_SetConfig+0x1aa>
 80095f8:	e00f      	b.n	800961a <UART_SetConfig+0x1ba>
 80095fa:	2300      	movs	r3, #0
 80095fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009600:	e06d      	b.n	80096de <UART_SetConfig+0x27e>
 8009602:	2302      	movs	r3, #2
 8009604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009608:	e069      	b.n	80096de <UART_SetConfig+0x27e>
 800960a:	2304      	movs	r3, #4
 800960c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009610:	e065      	b.n	80096de <UART_SetConfig+0x27e>
 8009612:	2308      	movs	r3, #8
 8009614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009618:	e061      	b.n	80096de <UART_SetConfig+0x27e>
 800961a:	2310      	movs	r3, #16
 800961c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009620:	e05d      	b.n	80096de <UART_SetConfig+0x27e>
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a4b      	ldr	r2, [pc, #300]	@ (8009754 <UART_SetConfig+0x2f4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d125      	bne.n	8009678 <UART_SetConfig+0x218>
 800962c:	4b46      	ldr	r3, [pc, #280]	@ (8009748 <UART_SetConfig+0x2e8>)
 800962e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009632:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009636:	2bc0      	cmp	r3, #192	@ 0xc0
 8009638:	d016      	beq.n	8009668 <UART_SetConfig+0x208>
 800963a:	2bc0      	cmp	r3, #192	@ 0xc0
 800963c:	d818      	bhi.n	8009670 <UART_SetConfig+0x210>
 800963e:	2b80      	cmp	r3, #128	@ 0x80
 8009640:	d00a      	beq.n	8009658 <UART_SetConfig+0x1f8>
 8009642:	2b80      	cmp	r3, #128	@ 0x80
 8009644:	d814      	bhi.n	8009670 <UART_SetConfig+0x210>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <UART_SetConfig+0x1f0>
 800964a:	2b40      	cmp	r3, #64	@ 0x40
 800964c:	d008      	beq.n	8009660 <UART_SetConfig+0x200>
 800964e:	e00f      	b.n	8009670 <UART_SetConfig+0x210>
 8009650:	2300      	movs	r3, #0
 8009652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009656:	e042      	b.n	80096de <UART_SetConfig+0x27e>
 8009658:	2302      	movs	r3, #2
 800965a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800965e:	e03e      	b.n	80096de <UART_SetConfig+0x27e>
 8009660:	2304      	movs	r3, #4
 8009662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009666:	e03a      	b.n	80096de <UART_SetConfig+0x27e>
 8009668:	2308      	movs	r3, #8
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800966e:	e036      	b.n	80096de <UART_SetConfig+0x27e>
 8009670:	2310      	movs	r3, #16
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009676:	e032      	b.n	80096de <UART_SetConfig+0x27e>
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a30      	ldr	r2, [pc, #192]	@ (8009740 <UART_SetConfig+0x2e0>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d12a      	bne.n	80096d8 <UART_SetConfig+0x278>
 8009682:	4b31      	ldr	r3, [pc, #196]	@ (8009748 <UART_SetConfig+0x2e8>)
 8009684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800968c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009690:	d01a      	beq.n	80096c8 <UART_SetConfig+0x268>
 8009692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009696:	d81b      	bhi.n	80096d0 <UART_SetConfig+0x270>
 8009698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800969c:	d00c      	beq.n	80096b8 <UART_SetConfig+0x258>
 800969e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096a2:	d815      	bhi.n	80096d0 <UART_SetConfig+0x270>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <UART_SetConfig+0x250>
 80096a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ac:	d008      	beq.n	80096c0 <UART_SetConfig+0x260>
 80096ae:	e00f      	b.n	80096d0 <UART_SetConfig+0x270>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b6:	e012      	b.n	80096de <UART_SetConfig+0x27e>
 80096b8:	2302      	movs	r3, #2
 80096ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096be:	e00e      	b.n	80096de <UART_SetConfig+0x27e>
 80096c0:	2304      	movs	r3, #4
 80096c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096c6:	e00a      	b.n	80096de <UART_SetConfig+0x27e>
 80096c8:	2308      	movs	r3, #8
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ce:	e006      	b.n	80096de <UART_SetConfig+0x27e>
 80096d0:	2310      	movs	r3, #16
 80096d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096d6:	e002      	b.n	80096de <UART_SetConfig+0x27e>
 80096d8:	2310      	movs	r3, #16
 80096da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a17      	ldr	r2, [pc, #92]	@ (8009740 <UART_SetConfig+0x2e0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	f040 80a8 	bne.w	800983a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	d834      	bhi.n	800975c <UART_SetConfig+0x2fc>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0x298>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	0800971d 	.word	0x0800971d
 80096fc:	0800975d 	.word	0x0800975d
 8009700:	08009725 	.word	0x08009725
 8009704:	0800975d 	.word	0x0800975d
 8009708:	0800972b 	.word	0x0800972b
 800970c:	0800975d 	.word	0x0800975d
 8009710:	0800975d 	.word	0x0800975d
 8009714:	0800975d 	.word	0x0800975d
 8009718:	08009733 	.word	0x08009733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800971c:	f7fd fc4a 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 8009720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009722:	e021      	b.n	8009768 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009724:	4b0c      	ldr	r3, [pc, #48]	@ (8009758 <UART_SetConfig+0x2f8>)
 8009726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009728:	e01e      	b.n	8009768 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800972a:	f7fd fbd5 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 800972e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009730:	e01a      	b.n	8009768 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009738:	e016      	b.n	8009768 <UART_SetConfig+0x308>
 800973a:	bf00      	nop
 800973c:	cfff69f3 	.word	0xcfff69f3
 8009740:	40008000 	.word	0x40008000
 8009744:	40013800 	.word	0x40013800
 8009748:	40021000 	.word	0x40021000
 800974c:	40004400 	.word	0x40004400
 8009750:	40004800 	.word	0x40004800
 8009754:	40004c00 	.word	0x40004c00
 8009758:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009766:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 812a 	beq.w	80099c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	4a9e      	ldr	r2, [pc, #632]	@ (80099f0 <UART_SetConfig+0x590>)
 8009776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800977a:	461a      	mov	r2, r3
 800977c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009782:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	4613      	mov	r3, r2
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	4413      	add	r3, r2
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	429a      	cmp	r2, r3
 8009792:	d305      	bcc.n	80097a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	429a      	cmp	r2, r3
 800979e:	d903      	bls.n	80097a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097a6:	e10d      	b.n	80099c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	2200      	movs	r2, #0
 80097ac:	60bb      	str	r3, [r7, #8]
 80097ae:	60fa      	str	r2, [r7, #12]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	4a8e      	ldr	r2, [pc, #568]	@ (80099f0 <UART_SetConfig+0x590>)
 80097b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2200      	movs	r2, #0
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097ca:	f7f7 fa85 	bl	8000cd8 <__aeabi_uldivmod>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4610      	mov	r0, r2
 80097d4:	4619      	mov	r1, r3
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	f04f 0300 	mov.w	r3, #0
 80097de:	020b      	lsls	r3, r1, #8
 80097e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097e4:	0202      	lsls	r2, r0, #8
 80097e6:	6979      	ldr	r1, [r7, #20]
 80097e8:	6849      	ldr	r1, [r1, #4]
 80097ea:	0849      	lsrs	r1, r1, #1
 80097ec:	2000      	movs	r0, #0
 80097ee:	460c      	mov	r4, r1
 80097f0:	4605      	mov	r5, r0
 80097f2:	eb12 0804 	adds.w	r8, r2, r4
 80097f6:	eb43 0905 	adc.w	r9, r3, r5
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	469a      	mov	sl, r3
 8009802:	4693      	mov	fp, r2
 8009804:	4652      	mov	r2, sl
 8009806:	465b      	mov	r3, fp
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	f7f7 fa64 	bl	8000cd8 <__aeabi_uldivmod>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4613      	mov	r3, r2
 8009816:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800981e:	d308      	bcc.n	8009832 <UART_SetConfig+0x3d2>
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009826:	d204      	bcs.n	8009832 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6a3a      	ldr	r2, [r7, #32]
 800982e:	60da      	str	r2, [r3, #12]
 8009830:	e0c8      	b.n	80099c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009838:	e0c4      	b.n	80099c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009842:	d167      	bne.n	8009914 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009844:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009848:	2b08      	cmp	r3, #8
 800984a:	d828      	bhi.n	800989e <UART_SetConfig+0x43e>
 800984c:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <UART_SetConfig+0x3f4>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	0800989f 	.word	0x0800989f
 8009864:	0800988f 	.word	0x0800988f
 8009868:	0800989f 	.word	0x0800989f
 800986c:	0800989f 	.word	0x0800989f
 8009870:	0800989f 	.word	0x0800989f
 8009874:	08009897 	.word	0x08009897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009878:	f7fd fb9c 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 800987c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800987e:	e014      	b.n	80098aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009880:	f7fd fbae 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 8009884:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009886:	e010      	b.n	80098aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009888:	4b5a      	ldr	r3, [pc, #360]	@ (80099f4 <UART_SetConfig+0x594>)
 800988a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800988c:	e00d      	b.n	80098aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800988e:	f7fd fb23 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8009892:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009894:	e009      	b.n	80098aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800989a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800989c:	e005      	b.n	80098aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8089 	beq.w	80099c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b6:	4a4e      	ldr	r2, [pc, #312]	@ (80099f0 <UART_SetConfig+0x590>)
 80098b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098bc:	461a      	mov	r2, r3
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c4:	005a      	lsls	r2, r3, #1
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	085b      	lsrs	r3, r3, #1
 80098cc:	441a      	add	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	2b0f      	cmp	r3, #15
 80098dc:	d916      	bls.n	800990c <UART_SetConfig+0x4ac>
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e4:	d212      	bcs.n	800990c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f023 030f 	bic.w	r3, r3, #15
 80098ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	085b      	lsrs	r3, r3, #1
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	8bfb      	ldrh	r3, [r7, #30]
 80098fe:	4313      	orrs	r3, r2
 8009900:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	8bfa      	ldrh	r2, [r7, #30]
 8009908:	60da      	str	r2, [r3, #12]
 800990a:	e05b      	b.n	80099c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009912:	e057      	b.n	80099c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009914:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009918:	2b08      	cmp	r3, #8
 800991a:	d828      	bhi.n	800996e <UART_SetConfig+0x50e>
 800991c:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0x4c4>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	08009949 	.word	0x08009949
 8009928:	08009951 	.word	0x08009951
 800992c:	08009959 	.word	0x08009959
 8009930:	0800996f 	.word	0x0800996f
 8009934:	0800995f 	.word	0x0800995f
 8009938:	0800996f 	.word	0x0800996f
 800993c:	0800996f 	.word	0x0800996f
 8009940:	0800996f 	.word	0x0800996f
 8009944:	08009967 	.word	0x08009967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009948:	f7fd fb34 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 800994c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800994e:	e014      	b.n	800997a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009950:	f7fd fb46 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 8009954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009956:	e010      	b.n	800997a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009958:	4b26      	ldr	r3, [pc, #152]	@ (80099f4 <UART_SetConfig+0x594>)
 800995a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800995c:	e00d      	b.n	800997a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800995e:	f7fd fabb 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8009962:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009964:	e009      	b.n	800997a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800996a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800996c:	e005      	b.n	800997a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009978:	bf00      	nop
    }

    if (pclk != 0U)
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d021      	beq.n	80099c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009984:	4a1a      	ldr	r2, [pc, #104]	@ (80099f0 <UART_SetConfig+0x590>)
 8009986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800998a:	461a      	mov	r2, r3
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	085b      	lsrs	r3, r3, #1
 8009998:	441a      	add	r2, r3
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	2b0f      	cmp	r3, #15
 80099a8:	d909      	bls.n	80099be <UART_SetConfig+0x55e>
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099b0:	d205      	bcs.n	80099be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60da      	str	r2, [r3, #12]
 80099bc:	e002      	b.n	80099c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2200      	movs	r2, #0
 80099d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2200      	movs	r2, #0
 80099de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3730      	adds	r7, #48	@ 0x30
 80099e8:	46bd      	mov	sp, r7
 80099ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ee:	bf00      	nop
 80099f0:	0801029c 	.word	0x0801029c
 80099f4:	00f42400 	.word	0x00f42400

080099f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a04:	f003 0308 	and.w	r3, r3, #8
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00a      	beq.n	8009a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00a      	beq.n	8009a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	f003 0310 	and.w	r3, r3, #16
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00a      	beq.n	8009aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01a      	beq.n	8009b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009af6:	d10a      	bne.n	8009b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]
  }
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b098      	sub	sp, #96	@ 0x60
 8009b40:	af02      	add	r7, sp, #8
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b4c:	f7f9 f930 	bl	8002db0 <HAL_GetTick>
 8009b50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b08      	cmp	r3, #8
 8009b5e:	d12f      	bne.n	8009bc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f88e 	bl	8009c90 <UART_WaitOnFlagUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d022      	beq.n	8009bc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e6      	bne.n	8009b7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e063      	b.n	8009c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d149      	bne.n	8009c62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f857 	bl	8009c90 <UART_WaitOnFlagUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d03c      	beq.n	8009c62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e6      	bne.n	8009be8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c3a:	61fa      	str	r2, [r7, #28]
 8009c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	69b9      	ldr	r1, [r7, #24]
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	617b      	str	r3, [r7, #20]
   return(result);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e5      	bne.n	8009c1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e012      	b.n	8009c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2220      	movs	r2, #32
 8009c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3758      	adds	r7, #88	@ 0x58
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ca0:	e04f      	b.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d04b      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009caa:	f7f9 f881 	bl	8002db0 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d302      	bcc.n	8009cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e04e      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0304 	and.w	r3, r3, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d037      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2b80      	cmp	r3, #128	@ 0x80
 8009cd6:	d034      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b40      	cmp	r3, #64	@ 0x40
 8009cdc:	d031      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d110      	bne.n	8009d0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f920 	bl	8009f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e029      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d1c:	d111      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f906 	bl	8009f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e00f      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	69da      	ldr	r2, [r3, #28]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	bf0c      	ite	eq
 8009d52:	2301      	moveq	r3, #1
 8009d54:	2300      	movne	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	461a      	mov	r2, r3
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d0a0      	beq.n	8009ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b096      	sub	sp, #88	@ 0x58
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	88fa      	ldrh	r2, [r7, #6]
 8009d84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2222      	movs	r2, #34	@ 0x22
 8009d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d02d      	beq.n	8009dfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da8:	4a40      	ldr	r2, [pc, #256]	@ (8009eac <UART_Start_Receive_DMA+0x140>)
 8009daa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db2:	4a3f      	ldr	r2, [pc, #252]	@ (8009eb0 <UART_Start_Receive_DMA+0x144>)
 8009db4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8009eb4 <UART_Start_Receive_DMA+0x148>)
 8009dbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3324      	adds	r3, #36	@ 0x24
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ddc:	461a      	mov	r2, r3
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	f7fb fb3a 	bl	8005458 <HAL_DMA_Start_IT>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2210      	movs	r2, #16
 8009dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e051      	b.n	8009ea2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d018      	beq.n	8009e38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e26:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e6      	bne.n	8009e06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	f043 0301 	orr.w	r3, r3, #1
 8009e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3308      	adds	r3, #8
 8009e56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e58:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e5      	bne.n	8009e38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3308      	adds	r3, #8
 8009e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3308      	adds	r3, #8
 8009e8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e8c:	623a      	str	r2, [r7, #32]
 8009e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	69f9      	ldr	r1, [r7, #28]
 8009e92:	6a3a      	ldr	r2, [r7, #32]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e5      	bne.n	8009e6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3758      	adds	r7, #88	@ 0x58
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800a0bd 	.word	0x0800a0bd
 8009eb0:	0800a1e9 	.word	0x0800a1e9
 8009eb4:	0800a227 	.word	0x0800a227

08009eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b08f      	sub	sp, #60	@ 0x3c
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ee0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e6      	bne.n	8009ec0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f12:	61ba      	str	r2, [r7, #24]
 8009f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6979      	ldr	r1, [r7, #20]
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009f2e:	bf00      	nop
 8009f30:	373c      	adds	r7, #60	@ 0x3c
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b095      	sub	sp, #84	@ 0x54
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8a:	f023 0301 	bic.w	r3, r3, #1
 8009f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e3      	bne.n	8009f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d118      	bne.n	8009fe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f023 0310 	bic.w	r3, r3, #16
 8009fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd2:	61bb      	str	r3, [r7, #24]
 8009fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6979      	ldr	r1, [r7, #20]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e6      	bne.n	8009fb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ffa:	bf00      	nop
 8009ffc:	3754      	adds	r7, #84	@ 0x54
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b090      	sub	sp, #64	@ 0x40
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d137      	bne.n	800a092 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a024:	2200      	movs	r2, #0
 800a026:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3308      	adds	r3, #8
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	623b      	str	r3, [r7, #32]
   return(result);
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a040:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3308      	adds	r3, #8
 800a048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a04a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e5      	bne.n	800a02a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07c:	61fb      	str	r3, [r7, #28]
 800a07e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	69b9      	ldr	r1, [r7, #24]
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	617b      	str	r3, [r7, #20]
   return(result);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a090:	e002      	b.n	800a098 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a092:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a094:	f7ff f9ba 	bl	800940c <HAL_UART_TxCpltCallback>
}
 800a098:	bf00      	nop
 800a09a:	3740      	adds	r7, #64	@ 0x40
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff f9b6 	bl	8009420 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b09c      	sub	sp, #112	@ 0x70
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0320 	and.w	r3, r3, #32
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d171      	bne.n	800a1bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a0d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a100:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a10c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e6      	bne.n	800a0e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3308      	adds	r3, #8
 800a118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a124:	f023 0301 	bic.w	r3, r3, #1
 800a128:	667b      	str	r3, [r7, #100]	@ 0x64
 800a12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3308      	adds	r3, #8
 800a130:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a132:	647a      	str	r2, [r7, #68]	@ 0x44
 800a134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e5      	bne.n	800a112 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3308      	adds	r3, #8
 800a14c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	623b      	str	r3, [r7, #32]
   return(result);
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a15c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a15e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a166:	633a      	str	r2, [r7, #48]	@ 0x30
 800a168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a16c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e5      	bne.n	800a146 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d118      	bne.n	800a1bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	60fb      	str	r3, [r7, #12]
   return(result);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0310 	bic.w	r3, r3, #16
 800a19e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1a8:	61fb      	str	r3, [r7, #28]
 800a1aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	69b9      	ldr	r1, [r7, #24]
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	e841 2300 	strex	r3, r2, [r1]
 800a1b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1e6      	bne.n	800a18a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1be:	2200      	movs	r2, #0
 800a1c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d107      	bne.n	800a1da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1d4:	f7ff f938 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1d8:	e002      	b.n	800a1e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a1da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1dc:	f7f6 ffea 	bl	80011b4 <HAL_UART_RxCpltCallback>
}
 800a1e0:	bf00      	nop
 800a1e2:	3770      	adds	r7, #112	@ 0x70
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a200:	2b01      	cmp	r3, #1
 800a202:	d109      	bne.n	800a218 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a20a:	085b      	lsrs	r3, r3, #1
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7ff f919 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a216:	e002      	b.n	800a21e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7f6 ffb7 	bl	800118c <HAL_UART_RxHalfCpltCallback>
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a232:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a23a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a242:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a24e:	2b80      	cmp	r3, #128	@ 0x80
 800a250:	d109      	bne.n	800a266 <UART_DMAError+0x40>
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	2b21      	cmp	r3, #33	@ 0x21
 800a256:	d106      	bne.n	800a266 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a260:	6978      	ldr	r0, [r7, #20]
 800a262:	f7ff fe29 	bl	8009eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a270:	2b40      	cmp	r3, #64	@ 0x40
 800a272:	d109      	bne.n	800a288 <UART_DMAError+0x62>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b22      	cmp	r3, #34	@ 0x22
 800a278:	d106      	bne.n	800a288 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a282:	6978      	ldr	r0, [r7, #20]
 800a284:	f7ff fe59 	bl	8009f3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a28e:	f043 0210 	orr.w	r2, r3, #16
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a298:	6978      	ldr	r0, [r7, #20]
 800a29a:	f7ff f8cb 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a29e:	bf00      	nop
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_UARTEx_DisableFifoMode+0x16>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e027      	b.n	800a30c <HAL_UARTEx_DisableFifoMode+0x66>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2224      	movs	r2, #36	@ 0x24
 800a2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0201 	bic.w	r2, r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a2ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e02d      	b.n	800a38c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2224      	movs	r2, #36	@ 0x24
 800a33c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 0201 	bic.w	r2, r2, #1
 800a356:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f8a3 	bl	800a4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e02d      	b.n	800a408 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2224      	movs	r2, #36	@ 0x24
 800a3b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0201 	bic.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f865 	bl	800a4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08c      	sub	sp, #48	@ 0x30
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a424:	2b20      	cmp	r3, #32
 800a426:	d142      	bne.n	800a4ae <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e03b      	b.n	800a4b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2201      	movs	r2, #1
 800a43c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a444:	88fb      	ldrh	r3, [r7, #6]
 800a446:	461a      	mov	r2, r3
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff fc8e 	bl	8009d6c <UART_Start_Receive_DMA>
 800a450:	4603      	mov	r3, r0
 800a452:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a456:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d124      	bne.n	800a4a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a462:	2b01      	cmp	r3, #1
 800a464:	d11d      	bne.n	800a4a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2210      	movs	r2, #16
 800a46c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	617b      	str	r3, [r7, #20]
   return(result);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f043 0310 	orr.w	r3, r3, #16
 800a482:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6a39      	ldr	r1, [r7, #32]
 800a492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	61fb      	str	r3, [r7, #28]
   return(result);
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e6      	bne.n	800a46e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a4a0:	e002      	b.n	800a4a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a4a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4ac:	e000      	b.n	800a4b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a4ae:	2302      	movs	r3, #2
  }
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3730      	adds	r7, #48	@ 0x30
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d108      	bne.n	800a4da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4d8:	e031      	b.n	800a53e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4da:	2308      	movs	r3, #8
 800a4dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4de:	2308      	movs	r3, #8
 800a4e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	0e5b      	lsrs	r3, r3, #25
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	f003 0307 	and.w	r3, r3, #7
 800a4f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	0f5b      	lsrs	r3, r3, #29
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	f003 0307 	and.w	r3, r3, #7
 800a500:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	7b3a      	ldrb	r2, [r7, #12]
 800a506:	4911      	ldr	r1, [pc, #68]	@ (800a54c <UARTEx_SetNbDataToProcess+0x94>)
 800a508:	5c8a      	ldrb	r2, [r1, r2]
 800a50a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a50e:	7b3a      	ldrb	r2, [r7, #12]
 800a510:	490f      	ldr	r1, [pc, #60]	@ (800a550 <UARTEx_SetNbDataToProcess+0x98>)
 800a512:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a514:	fb93 f3f2 	sdiv	r3, r3, r2
 800a518:	b29a      	uxth	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	7b7a      	ldrb	r2, [r7, #13]
 800a524:	4909      	ldr	r1, [pc, #36]	@ (800a54c <UARTEx_SetNbDataToProcess+0x94>)
 800a526:	5c8a      	ldrb	r2, [r1, r2]
 800a528:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a52c:	7b7a      	ldrb	r2, [r7, #13]
 800a52e:	4908      	ldr	r1, [pc, #32]	@ (800a550 <UARTEx_SetNbDataToProcess+0x98>)
 800a530:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a532:	fb93 f3f2 	sdiv	r3, r3, r2
 800a536:	b29a      	uxth	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a53e:	bf00      	nop
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	080102b4 	.word	0x080102b4
 800a550:	080102bc 	.word	0x080102bc

0800a554 <malloc>:
 800a554:	4b02      	ldr	r3, [pc, #8]	@ (800a560 <malloc+0xc>)
 800a556:	4601      	mov	r1, r0
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	f000 b803 	b.w	800a564 <_malloc_r>
 800a55e:	bf00      	nop
 800a560:	20000430 	.word	0x20000430

0800a564 <_malloc_r>:
 800a564:	f101 030b 	add.w	r3, r1, #11
 800a568:	2b16      	cmp	r3, #22
 800a56a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56e:	4605      	mov	r5, r0
 800a570:	d906      	bls.n	800a580 <_malloc_r+0x1c>
 800a572:	f033 0707 	bics.w	r7, r3, #7
 800a576:	d504      	bpl.n	800a582 <_malloc_r+0x1e>
 800a578:	230c      	movs	r3, #12
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	2400      	movs	r4, #0
 800a57e:	e1a3      	b.n	800a8c8 <_malloc_r+0x364>
 800a580:	2710      	movs	r7, #16
 800a582:	42b9      	cmp	r1, r7
 800a584:	d8f8      	bhi.n	800a578 <_malloc_r+0x14>
 800a586:	4628      	mov	r0, r5
 800a588:	f000 fa26 	bl	800a9d8 <__malloc_lock>
 800a58c:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800a590:	4eaf      	ldr	r6, [pc, #700]	@ (800a850 <_malloc_r+0x2ec>)
 800a592:	d237      	bcs.n	800a604 <_malloc_r+0xa0>
 800a594:	f107 0208 	add.w	r2, r7, #8
 800a598:	4432      	add	r2, r6
 800a59a:	f1a2 0108 	sub.w	r1, r2, #8
 800a59e:	6854      	ldr	r4, [r2, #4]
 800a5a0:	428c      	cmp	r4, r1
 800a5a2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a5a6:	d102      	bne.n	800a5ae <_malloc_r+0x4a>
 800a5a8:	68d4      	ldr	r4, [r2, #12]
 800a5aa:	42a2      	cmp	r2, r4
 800a5ac:	d010      	beq.n	800a5d0 <_malloc_r+0x6c>
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a5b4:	f023 0303 	bic.w	r3, r3, #3
 800a5b8:	60ca      	str	r2, [r1, #12]
 800a5ba:	4423      	add	r3, r4
 800a5bc:	6091      	str	r1, [r2, #8]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	f042 0201 	orr.w	r2, r2, #1
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 fa0c 	bl	800a9e4 <__malloc_unlock>
 800a5cc:	3408      	adds	r4, #8
 800a5ce:	e17b      	b.n	800a8c8 <_malloc_r+0x364>
 800a5d0:	3302      	adds	r3, #2
 800a5d2:	6934      	ldr	r4, [r6, #16]
 800a5d4:	499f      	ldr	r1, [pc, #636]	@ (800a854 <_malloc_r+0x2f0>)
 800a5d6:	428c      	cmp	r4, r1
 800a5d8:	d077      	beq.n	800a6ca <_malloc_r+0x166>
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	f022 0c03 	bic.w	ip, r2, #3
 800a5e0:	ebac 0007 	sub.w	r0, ip, r7
 800a5e4:	280f      	cmp	r0, #15
 800a5e6:	dd48      	ble.n	800a67a <_malloc_r+0x116>
 800a5e8:	19e2      	adds	r2, r4, r7
 800a5ea:	f040 0301 	orr.w	r3, r0, #1
 800a5ee:	f047 0701 	orr.w	r7, r7, #1
 800a5f2:	6067      	str	r7, [r4, #4]
 800a5f4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a5f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a5fc:	6053      	str	r3, [r2, #4]
 800a5fe:	f844 000c 	str.w	r0, [r4, ip]
 800a602:	e7e0      	b.n	800a5c6 <_malloc_r+0x62>
 800a604:	0a7b      	lsrs	r3, r7, #9
 800a606:	d02a      	beq.n	800a65e <_malloc_r+0xfa>
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d812      	bhi.n	800a632 <_malloc_r+0xce>
 800a60c:	09bb      	lsrs	r3, r7, #6
 800a60e:	3338      	adds	r3, #56	@ 0x38
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a616:	f1a2 0c08 	sub.w	ip, r2, #8
 800a61a:	6854      	ldr	r4, [r2, #4]
 800a61c:	4564      	cmp	r4, ip
 800a61e:	d006      	beq.n	800a62e <_malloc_r+0xca>
 800a620:	6862      	ldr	r2, [r4, #4]
 800a622:	f022 0203 	bic.w	r2, r2, #3
 800a626:	1bd0      	subs	r0, r2, r7
 800a628:	280f      	cmp	r0, #15
 800a62a:	dd1c      	ble.n	800a666 <_malloc_r+0x102>
 800a62c:	3b01      	subs	r3, #1
 800a62e:	3301      	adds	r3, #1
 800a630:	e7cf      	b.n	800a5d2 <_malloc_r+0x6e>
 800a632:	2b14      	cmp	r3, #20
 800a634:	d801      	bhi.n	800a63a <_malloc_r+0xd6>
 800a636:	335b      	adds	r3, #91	@ 0x5b
 800a638:	e7ea      	b.n	800a610 <_malloc_r+0xac>
 800a63a:	2b54      	cmp	r3, #84	@ 0x54
 800a63c:	d802      	bhi.n	800a644 <_malloc_r+0xe0>
 800a63e:	0b3b      	lsrs	r3, r7, #12
 800a640:	336e      	adds	r3, #110	@ 0x6e
 800a642:	e7e5      	b.n	800a610 <_malloc_r+0xac>
 800a644:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800a648:	d802      	bhi.n	800a650 <_malloc_r+0xec>
 800a64a:	0bfb      	lsrs	r3, r7, #15
 800a64c:	3377      	adds	r3, #119	@ 0x77
 800a64e:	e7df      	b.n	800a610 <_malloc_r+0xac>
 800a650:	f240 5254 	movw	r2, #1364	@ 0x554
 800a654:	4293      	cmp	r3, r2
 800a656:	d804      	bhi.n	800a662 <_malloc_r+0xfe>
 800a658:	0cbb      	lsrs	r3, r7, #18
 800a65a:	337c      	adds	r3, #124	@ 0x7c
 800a65c:	e7d8      	b.n	800a610 <_malloc_r+0xac>
 800a65e:	233f      	movs	r3, #63	@ 0x3f
 800a660:	e7d6      	b.n	800a610 <_malloc_r+0xac>
 800a662:	237e      	movs	r3, #126	@ 0x7e
 800a664:	e7d4      	b.n	800a610 <_malloc_r+0xac>
 800a666:	2800      	cmp	r0, #0
 800a668:	68e1      	ldr	r1, [r4, #12]
 800a66a:	db04      	blt.n	800a676 <_malloc_r+0x112>
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	60d9      	str	r1, [r3, #12]
 800a670:	608b      	str	r3, [r1, #8]
 800a672:	18a3      	adds	r3, r4, r2
 800a674:	e7a3      	b.n	800a5be <_malloc_r+0x5a>
 800a676:	460c      	mov	r4, r1
 800a678:	e7d0      	b.n	800a61c <_malloc_r+0xb8>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a680:	db07      	blt.n	800a692 <_malloc_r+0x12e>
 800a682:	44a4      	add	ip, r4
 800a684:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a688:	f043 0301 	orr.w	r3, r3, #1
 800a68c:	f8cc 3004 	str.w	r3, [ip, #4]
 800a690:	e799      	b.n	800a5c6 <_malloc_r+0x62>
 800a692:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800a696:	6870      	ldr	r0, [r6, #4]
 800a698:	f080 8095 	bcs.w	800a7c6 <_malloc_r+0x262>
 800a69c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a6a0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a6a4:	f04f 0c01 	mov.w	ip, #1
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a6ae:	ea4c 0000 	orr.w	r0, ip, r0
 800a6b2:	6070      	str	r0, [r6, #4]
 800a6b4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a6b8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a6bc:	3808      	subs	r0, #8
 800a6be:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a6c2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800a6c6:	f8cc 400c 	str.w	r4, [ip, #12]
 800a6ca:	1098      	asrs	r0, r3, #2
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	4082      	lsls	r2, r0
 800a6d0:	6870      	ldr	r0, [r6, #4]
 800a6d2:	4290      	cmp	r0, r2
 800a6d4:	d326      	bcc.n	800a724 <_malloc_r+0x1c0>
 800a6d6:	4210      	tst	r0, r2
 800a6d8:	d106      	bne.n	800a6e8 <_malloc_r+0x184>
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	0052      	lsls	r2, r2, #1
 800a6e0:	4210      	tst	r0, r2
 800a6e2:	f103 0304 	add.w	r3, r3, #4
 800a6e6:	d0fa      	beq.n	800a6de <_malloc_r+0x17a>
 800a6e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800a6ec:	46c1      	mov	r9, r8
 800a6ee:	469e      	mov	lr, r3
 800a6f0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a6f4:	454c      	cmp	r4, r9
 800a6f6:	f040 80b9 	bne.w	800a86c <_malloc_r+0x308>
 800a6fa:	f10e 0e01 	add.w	lr, lr, #1
 800a6fe:	f01e 0f03 	tst.w	lr, #3
 800a702:	f109 0908 	add.w	r9, r9, #8
 800a706:	d1f3      	bne.n	800a6f0 <_malloc_r+0x18c>
 800a708:	0798      	lsls	r0, r3, #30
 800a70a:	f040 80e3 	bne.w	800a8d4 <_malloc_r+0x370>
 800a70e:	6873      	ldr	r3, [r6, #4]
 800a710:	ea23 0302 	bic.w	r3, r3, r2
 800a714:	6073      	str	r3, [r6, #4]
 800a716:	6870      	ldr	r0, [r6, #4]
 800a718:	0052      	lsls	r2, r2, #1
 800a71a:	4290      	cmp	r0, r2
 800a71c:	d302      	bcc.n	800a724 <_malloc_r+0x1c0>
 800a71e:	2a00      	cmp	r2, #0
 800a720:	f040 80e5 	bne.w	800a8ee <_malloc_r+0x38a>
 800a724:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800a728:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a72c:	f023 0903 	bic.w	r9, r3, #3
 800a730:	45b9      	cmp	r9, r7
 800a732:	d304      	bcc.n	800a73e <_malloc_r+0x1da>
 800a734:	eba9 0207 	sub.w	r2, r9, r7
 800a738:	2a0f      	cmp	r2, #15
 800a73a:	f300 8141 	bgt.w	800a9c0 <_malloc_r+0x45c>
 800a73e:	4b46      	ldr	r3, [pc, #280]	@ (800a858 <_malloc_r+0x2f4>)
 800a740:	6819      	ldr	r1, [r3, #0]
 800a742:	3110      	adds	r1, #16
 800a744:	4439      	add	r1, r7
 800a746:	2008      	movs	r0, #8
 800a748:	9101      	str	r1, [sp, #4]
 800a74a:	f000 fc0b 	bl	800af64 <sysconf>
 800a74e:	4a43      	ldr	r2, [pc, #268]	@ (800a85c <_malloc_r+0x2f8>)
 800a750:	9901      	ldr	r1, [sp, #4]
 800a752:	6813      	ldr	r3, [r2, #0]
 800a754:	3301      	adds	r3, #1
 800a756:	bf1f      	itttt	ne
 800a758:	f101 31ff 	addne.w	r1, r1, #4294967295
 800a75c:	1809      	addne	r1, r1, r0
 800a75e:	4243      	negne	r3, r0
 800a760:	4019      	andne	r1, r3
 800a762:	4680      	mov	r8, r0
 800a764:	4628      	mov	r0, r5
 800a766:	9101      	str	r1, [sp, #4]
 800a768:	f000 fbac 	bl	800aec4 <_sbrk_r>
 800a76c:	1c42      	adds	r2, r0, #1
 800a76e:	eb0a 0b09 	add.w	fp, sl, r9
 800a772:	4604      	mov	r4, r0
 800a774:	f000 80f7 	beq.w	800a966 <_malloc_r+0x402>
 800a778:	4583      	cmp	fp, r0
 800a77a:	9901      	ldr	r1, [sp, #4]
 800a77c:	4a37      	ldr	r2, [pc, #220]	@ (800a85c <_malloc_r+0x2f8>)
 800a77e:	d902      	bls.n	800a786 <_malloc_r+0x222>
 800a780:	45b2      	cmp	sl, r6
 800a782:	f040 80f0 	bne.w	800a966 <_malloc_r+0x402>
 800a786:	4b36      	ldr	r3, [pc, #216]	@ (800a860 <_malloc_r+0x2fc>)
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	45a3      	cmp	fp, r4
 800a78c:	eb00 0e01 	add.w	lr, r0, r1
 800a790:	f8c3 e000 	str.w	lr, [r3]
 800a794:	f108 3cff 	add.w	ip, r8, #4294967295
 800a798:	f040 80ab 	bne.w	800a8f2 <_malloc_r+0x38e>
 800a79c:	ea1b 0f0c 	tst.w	fp, ip
 800a7a0:	f040 80a7 	bne.w	800a8f2 <_malloc_r+0x38e>
 800a7a4:	68b2      	ldr	r2, [r6, #8]
 800a7a6:	4449      	add	r1, r9
 800a7a8:	f041 0101 	orr.w	r1, r1, #1
 800a7ac:	6051      	str	r1, [r2, #4]
 800a7ae:	4a2d      	ldr	r2, [pc, #180]	@ (800a864 <_malloc_r+0x300>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6811      	ldr	r1, [r2, #0]
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	bf88      	it	hi
 800a7b8:	6013      	strhi	r3, [r2, #0]
 800a7ba:	4a2b      	ldr	r2, [pc, #172]	@ (800a868 <_malloc_r+0x304>)
 800a7bc:	6811      	ldr	r1, [r2, #0]
 800a7be:	428b      	cmp	r3, r1
 800a7c0:	bf88      	it	hi
 800a7c2:	6013      	strhi	r3, [r2, #0]
 800a7c4:	e0cf      	b.n	800a966 <_malloc_r+0x402>
 800a7c6:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800a7ca:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a7ce:	d218      	bcs.n	800a802 <_malloc_r+0x29e>
 800a7d0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a7d4:	3238      	adds	r2, #56	@ 0x38
 800a7d6:	f102 0e01 	add.w	lr, r2, #1
 800a7da:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800a7de:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800a7e2:	45f0      	cmp	r8, lr
 800a7e4:	d12b      	bne.n	800a83e <_malloc_r+0x2da>
 800a7e6:	1092      	asrs	r2, r2, #2
 800a7e8:	f04f 0c01 	mov.w	ip, #1
 800a7ec:	fa0c f202 	lsl.w	r2, ip, r2
 800a7f0:	4302      	orrs	r2, r0
 800a7f2:	6072      	str	r2, [r6, #4]
 800a7f4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a7f8:	f8c8 4008 	str.w	r4, [r8, #8]
 800a7fc:	f8ce 400c 	str.w	r4, [lr, #12]
 800a800:	e763      	b.n	800a6ca <_malloc_r+0x166>
 800a802:	2a14      	cmp	r2, #20
 800a804:	d801      	bhi.n	800a80a <_malloc_r+0x2a6>
 800a806:	325b      	adds	r2, #91	@ 0x5b
 800a808:	e7e5      	b.n	800a7d6 <_malloc_r+0x272>
 800a80a:	2a54      	cmp	r2, #84	@ 0x54
 800a80c:	d803      	bhi.n	800a816 <_malloc_r+0x2b2>
 800a80e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a812:	326e      	adds	r2, #110	@ 0x6e
 800a814:	e7df      	b.n	800a7d6 <_malloc_r+0x272>
 800a816:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800a81a:	d803      	bhi.n	800a824 <_malloc_r+0x2c0>
 800a81c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a820:	3277      	adds	r2, #119	@ 0x77
 800a822:	e7d8      	b.n	800a7d6 <_malloc_r+0x272>
 800a824:	f240 5e54 	movw	lr, #1364	@ 0x554
 800a828:	4572      	cmp	r2, lr
 800a82a:	bf9a      	itte	ls
 800a82c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a830:	327c      	addls	r2, #124	@ 0x7c
 800a832:	227e      	movhi	r2, #126	@ 0x7e
 800a834:	e7cf      	b.n	800a7d6 <_malloc_r+0x272>
 800a836:	f8de e008 	ldr.w	lr, [lr, #8]
 800a83a:	45f0      	cmp	r8, lr
 800a83c:	d005      	beq.n	800a84a <_malloc_r+0x2e6>
 800a83e:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a842:	f022 0203 	bic.w	r2, r2, #3
 800a846:	4562      	cmp	r2, ip
 800a848:	d8f5      	bhi.n	800a836 <_malloc_r+0x2d2>
 800a84a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a84e:	e7d1      	b.n	800a7f4 <_malloc_r+0x290>
 800a850:	2000001c 	.word	0x2000001c
 800a854:	20000024 	.word	0x20000024
 800a858:	200010f4 	.word	0x200010f4
 800a85c:	20000014 	.word	0x20000014
 800a860:	200010c4 	.word	0x200010c4
 800a864:	200010f0 	.word	0x200010f0
 800a868:	200010ec 	.word	0x200010ec
 800a86c:	6860      	ldr	r0, [r4, #4]
 800a86e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a872:	f020 0003 	bic.w	r0, r0, #3
 800a876:	eba0 0a07 	sub.w	sl, r0, r7
 800a87a:	f1ba 0f0f 	cmp.w	sl, #15
 800a87e:	dd12      	ble.n	800a8a6 <_malloc_r+0x342>
 800a880:	68a3      	ldr	r3, [r4, #8]
 800a882:	19e2      	adds	r2, r4, r7
 800a884:	f047 0701 	orr.w	r7, r7, #1
 800a888:	6067      	str	r7, [r4, #4]
 800a88a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a88e:	f8cc 3008 	str.w	r3, [ip, #8]
 800a892:	f04a 0301 	orr.w	r3, sl, #1
 800a896:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a89a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a89e:	6053      	str	r3, [r2, #4]
 800a8a0:	f844 a000 	str.w	sl, [r4, r0]
 800a8a4:	e68f      	b.n	800a5c6 <_malloc_r+0x62>
 800a8a6:	f1ba 0f00 	cmp.w	sl, #0
 800a8aa:	db11      	blt.n	800a8d0 <_malloc_r+0x36c>
 800a8ac:	4420      	add	r0, r4
 800a8ae:	6843      	ldr	r3, [r0, #4]
 800a8b0:	f043 0301 	orr.w	r3, r3, #1
 800a8b4:	6043      	str	r3, [r0, #4]
 800a8b6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a8c0:	f8cc 3008 	str.w	r3, [ip, #8]
 800a8c4:	f000 f88e 	bl	800a9e4 <__malloc_unlock>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	b003      	add	sp, #12
 800a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d0:	4664      	mov	r4, ip
 800a8d2:	e70f      	b.n	800a6f4 <_malloc_r+0x190>
 800a8d4:	f858 0908 	ldr.w	r0, [r8], #-8
 800a8d8:	4540      	cmp	r0, r8
 800a8da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8de:	f43f af13 	beq.w	800a708 <_malloc_r+0x1a4>
 800a8e2:	e718      	b.n	800a716 <_malloc_r+0x1b2>
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	0052      	lsls	r2, r2, #1
 800a8e8:	4210      	tst	r0, r2
 800a8ea:	d0fb      	beq.n	800a8e4 <_malloc_r+0x380>
 800a8ec:	e6fc      	b.n	800a6e8 <_malloc_r+0x184>
 800a8ee:	4673      	mov	r3, lr
 800a8f0:	e7fa      	b.n	800a8e8 <_malloc_r+0x384>
 800a8f2:	6810      	ldr	r0, [r2, #0]
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	bf1b      	ittet	ne
 800a8f8:	eba4 0b0b 	subne.w	fp, r4, fp
 800a8fc:	eb0b 020e 	addne.w	r2, fp, lr
 800a900:	6014      	streq	r4, [r2, #0]
 800a902:	601a      	strne	r2, [r3, #0]
 800a904:	f014 0b07 	ands.w	fp, r4, #7
 800a908:	bf1a      	itte	ne
 800a90a:	f1cb 0008 	rsbne	r0, fp, #8
 800a90e:	1824      	addne	r4, r4, r0
 800a910:	4658      	moveq	r0, fp
 800a912:	1862      	adds	r2, r4, r1
 800a914:	ea02 010c 	and.w	r1, r2, ip
 800a918:	4480      	add	r8, r0
 800a91a:	eba8 0801 	sub.w	r8, r8, r1
 800a91e:	ea08 080c 	and.w	r8, r8, ip
 800a922:	4641      	mov	r1, r8
 800a924:	4628      	mov	r0, r5
 800a926:	9201      	str	r2, [sp, #4]
 800a928:	f000 facc 	bl	800aec4 <_sbrk_r>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	9a01      	ldr	r2, [sp, #4]
 800a930:	4b28      	ldr	r3, [pc, #160]	@ (800a9d4 <_malloc_r+0x470>)
 800a932:	d107      	bne.n	800a944 <_malloc_r+0x3e0>
 800a934:	f1bb 0f00 	cmp.w	fp, #0
 800a938:	d023      	beq.n	800a982 <_malloc_r+0x41e>
 800a93a:	f1ab 0008 	sub.w	r0, fp, #8
 800a93e:	4410      	add	r0, r2
 800a940:	f04f 0800 	mov.w	r8, #0
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	60b4      	str	r4, [r6, #8]
 800a948:	1b00      	subs	r0, r0, r4
 800a94a:	4440      	add	r0, r8
 800a94c:	4442      	add	r2, r8
 800a94e:	f040 0001 	orr.w	r0, r0, #1
 800a952:	45b2      	cmp	sl, r6
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	6060      	str	r0, [r4, #4]
 800a958:	f43f af29 	beq.w	800a7ae <_malloc_r+0x24a>
 800a95c:	f1b9 0f0f 	cmp.w	r9, #15
 800a960:	d812      	bhi.n	800a988 <_malloc_r+0x424>
 800a962:	2301      	movs	r3, #1
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	68b3      	ldr	r3, [r6, #8]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f023 0303 	bic.w	r3, r3, #3
 800a96e:	42bb      	cmp	r3, r7
 800a970:	eba3 0207 	sub.w	r2, r3, r7
 800a974:	d301      	bcc.n	800a97a <_malloc_r+0x416>
 800a976:	2a0f      	cmp	r2, #15
 800a978:	dc22      	bgt.n	800a9c0 <_malloc_r+0x45c>
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f832 	bl	800a9e4 <__malloc_unlock>
 800a980:	e5fc      	b.n	800a57c <_malloc_r+0x18>
 800a982:	4610      	mov	r0, r2
 800a984:	46d8      	mov	r8, fp
 800a986:	e7dd      	b.n	800a944 <_malloc_r+0x3e0>
 800a988:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a98c:	f1a9 090c 	sub.w	r9, r9, #12
 800a990:	f029 0907 	bic.w	r9, r9, #7
 800a994:	f002 0201 	and.w	r2, r2, #1
 800a998:	ea42 0209 	orr.w	r2, r2, r9
 800a99c:	f8ca 2004 	str.w	r2, [sl, #4]
 800a9a0:	2105      	movs	r1, #5
 800a9a2:	eb0a 0209 	add.w	r2, sl, r9
 800a9a6:	f1b9 0f0f 	cmp.w	r9, #15
 800a9aa:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800a9ae:	f67f aefe 	bls.w	800a7ae <_malloc_r+0x24a>
 800a9b2:	f10a 0108 	add.w	r1, sl, #8
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fb46 	bl	800b048 <_free_r>
 800a9bc:	4b05      	ldr	r3, [pc, #20]	@ (800a9d4 <_malloc_r+0x470>)
 800a9be:	e6f6      	b.n	800a7ae <_malloc_r+0x24a>
 800a9c0:	68b4      	ldr	r4, [r6, #8]
 800a9c2:	f047 0301 	orr.w	r3, r7, #1
 800a9c6:	4427      	add	r7, r4
 800a9c8:	f042 0201 	orr.w	r2, r2, #1
 800a9cc:	6063      	str	r3, [r4, #4]
 800a9ce:	60b7      	str	r7, [r6, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	e5f8      	b.n	800a5c6 <_malloc_r+0x62>
 800a9d4:	200010c4 	.word	0x200010c4

0800a9d8 <__malloc_lock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	@ (800a9e0 <__malloc_lock+0x8>)
 800a9da:	f000 bac1 	b.w	800af60 <__retarget_lock_acquire_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20001238 	.word	0x20001238

0800a9e4 <__malloc_unlock>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	@ (800a9ec <__malloc_unlock+0x8>)
 800a9e6:	f000 babc 	b.w	800af62 <__retarget_lock_release_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	20001238 	.word	0x20001238

0800a9f0 <std>:
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9fe:	6083      	str	r3, [r0, #8]
 800aa00:	8181      	strh	r1, [r0, #12]
 800aa02:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa04:	81c2      	strh	r2, [r0, #14]
 800aa06:	6183      	str	r3, [r0, #24]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	305c      	adds	r0, #92	@ 0x5c
 800aa0e:	f000 fa1c 	bl	800ae4a <memset>
 800aa12:	4b0d      	ldr	r3, [pc, #52]	@ (800aa48 <std+0x58>)
 800aa14:	6223      	str	r3, [r4, #32]
 800aa16:	4b0d      	ldr	r3, [pc, #52]	@ (800aa4c <std+0x5c>)
 800aa18:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa1a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa50 <std+0x60>)
 800aa1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <std+0x64>)
 800aa20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa22:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <std+0x68>)
 800aa24:	61e4      	str	r4, [r4, #28]
 800aa26:	429c      	cmp	r4, r3
 800aa28:	d006      	beq.n	800aa38 <std+0x48>
 800aa2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa2e:	4294      	cmp	r4, r2
 800aa30:	d002      	beq.n	800aa38 <std+0x48>
 800aa32:	33d0      	adds	r3, #208	@ 0xd0
 800aa34:	429c      	cmp	r4, r3
 800aa36:	d105      	bne.n	800aa44 <std+0x54>
 800aa38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa40:	f000 ba8c 	b.w	800af5c <__retarget_lock_init_recursive>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	bf00      	nop
 800aa48:	0800adc5 	.word	0x0800adc5
 800aa4c:	0800ade7 	.word	0x0800ade7
 800aa50:	0800ae1f 	.word	0x0800ae1f
 800aa54:	0800ae43 	.word	0x0800ae43
 800aa58:	200010f8 	.word	0x200010f8

0800aa5c <stdio_exit_handler>:
 800aa5c:	4a02      	ldr	r2, [pc, #8]	@ (800aa68 <stdio_exit_handler+0xc>)
 800aa5e:	4903      	ldr	r1, [pc, #12]	@ (800aa6c <stdio_exit_handler+0x10>)
 800aa60:	4803      	ldr	r0, [pc, #12]	@ (800aa70 <stdio_exit_handler+0x14>)
 800aa62:	f000 b869 	b.w	800ab38 <_fwalk_sglue>
 800aa66:	bf00      	nop
 800aa68:	20000424 	.word	0x20000424
 800aa6c:	0800c585 	.word	0x0800c585
 800aa70:	20000438 	.word	0x20000438

0800aa74 <cleanup_stdio>:
 800aa74:	6841      	ldr	r1, [r0, #4]
 800aa76:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa8 <cleanup_stdio+0x34>)
 800aa78:	4299      	cmp	r1, r3
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	d001      	beq.n	800aa84 <cleanup_stdio+0x10>
 800aa80:	f001 fd80 	bl	800c584 <_fclose_r>
 800aa84:	68a1      	ldr	r1, [r4, #8]
 800aa86:	4b09      	ldr	r3, [pc, #36]	@ (800aaac <cleanup_stdio+0x38>)
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	d002      	beq.n	800aa92 <cleanup_stdio+0x1e>
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f001 fd79 	bl	800c584 <_fclose_r>
 800aa92:	68e1      	ldr	r1, [r4, #12]
 800aa94:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <cleanup_stdio+0x3c>)
 800aa96:	4299      	cmp	r1, r3
 800aa98:	d004      	beq.n	800aaa4 <cleanup_stdio+0x30>
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa0:	f001 bd70 	b.w	800c584 <_fclose_r>
 800aaa4:	bd10      	pop	{r4, pc}
 800aaa6:	bf00      	nop
 800aaa8:	200010f8 	.word	0x200010f8
 800aaac:	20001160 	.word	0x20001160
 800aab0:	200011c8 	.word	0x200011c8

0800aab4 <global_stdio_init.part.0>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4b0b      	ldr	r3, [pc, #44]	@ (800aae4 <global_stdio_init.part.0+0x30>)
 800aab8:	4c0b      	ldr	r4, [pc, #44]	@ (800aae8 <global_stdio_init.part.0+0x34>)
 800aaba:	4a0c      	ldr	r2, [pc, #48]	@ (800aaec <global_stdio_init.part.0+0x38>)
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	4620      	mov	r0, r4
 800aac0:	2200      	movs	r2, #0
 800aac2:	2104      	movs	r1, #4
 800aac4:	f7ff ff94 	bl	800a9f0 <std>
 800aac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aacc:	2201      	movs	r2, #1
 800aace:	2109      	movs	r1, #9
 800aad0:	f7ff ff8e 	bl	800a9f0 <std>
 800aad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aad8:	2202      	movs	r2, #2
 800aada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aade:	2112      	movs	r1, #18
 800aae0:	f7ff bf86 	b.w	800a9f0 <std>
 800aae4:	20001230 	.word	0x20001230
 800aae8:	200010f8 	.word	0x200010f8
 800aaec:	0800aa5d 	.word	0x0800aa5d

0800aaf0 <__sfp_lock_acquire>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	@ (800aaf8 <__sfp_lock_acquire+0x8>)
 800aaf2:	f000 ba35 	b.w	800af60 <__retarget_lock_acquire_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	2000123a 	.word	0x2000123a

0800aafc <__sfp_lock_release>:
 800aafc:	4801      	ldr	r0, [pc, #4]	@ (800ab04 <__sfp_lock_release+0x8>)
 800aafe:	f000 ba30 	b.w	800af62 <__retarget_lock_release_recursive>
 800ab02:	bf00      	nop
 800ab04:	2000123a 	.word	0x2000123a

0800ab08 <__sinit>:
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	f7ff fff0 	bl	800aaf0 <__sfp_lock_acquire>
 800ab10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab12:	b11b      	cbz	r3, 800ab1c <__sinit+0x14>
 800ab14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab18:	f7ff bff0 	b.w	800aafc <__sfp_lock_release>
 800ab1c:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <__sinit+0x28>)
 800ab1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab20:	4b04      	ldr	r3, [pc, #16]	@ (800ab34 <__sinit+0x2c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f5      	bne.n	800ab14 <__sinit+0xc>
 800ab28:	f7ff ffc4 	bl	800aab4 <global_stdio_init.part.0>
 800ab2c:	e7f2      	b.n	800ab14 <__sinit+0xc>
 800ab2e:	bf00      	nop
 800ab30:	0800aa75 	.word	0x0800aa75
 800ab34:	20001230 	.word	0x20001230

0800ab38 <_fwalk_sglue>:
 800ab38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	4688      	mov	r8, r1
 800ab40:	4614      	mov	r4, r2
 800ab42:	2600      	movs	r6, #0
 800ab44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab48:	f1b9 0901 	subs.w	r9, r9, #1
 800ab4c:	d505      	bpl.n	800ab5a <_fwalk_sglue+0x22>
 800ab4e:	6824      	ldr	r4, [r4, #0]
 800ab50:	2c00      	cmp	r4, #0
 800ab52:	d1f7      	bne.n	800ab44 <_fwalk_sglue+0xc>
 800ab54:	4630      	mov	r0, r6
 800ab56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d907      	bls.n	800ab70 <_fwalk_sglue+0x38>
 800ab60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab64:	3301      	adds	r3, #1
 800ab66:	d003      	beq.n	800ab70 <_fwalk_sglue+0x38>
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	47c0      	blx	r8
 800ab6e:	4306      	orrs	r6, r0
 800ab70:	3568      	adds	r5, #104	@ 0x68
 800ab72:	e7e9      	b.n	800ab48 <_fwalk_sglue+0x10>

0800ab74 <_puts_r>:
 800ab74:	b530      	push	{r4, r5, lr}
 800ab76:	4605      	mov	r5, r0
 800ab78:	b089      	sub	sp, #36	@ 0x24
 800ab7a:	4608      	mov	r0, r1
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	f7f5 fb4f 	bl	8000220 <strlen>
 800ab82:	4b1e      	ldr	r3, [pc, #120]	@ (800abfc <_puts_r+0x88>)
 800ab84:	9306      	str	r3, [sp, #24]
 800ab86:	2301      	movs	r3, #1
 800ab88:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800ab8c:	9307      	str	r3, [sp, #28]
 800ab8e:	4418      	add	r0, r3
 800ab90:	ab04      	add	r3, sp, #16
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	2302      	movs	r3, #2
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ab9a:	68ac      	ldr	r4, [r5, #8]
 800ab9c:	9003      	str	r0, [sp, #12]
 800ab9e:	b913      	cbnz	r3, 800aba6 <_puts_r+0x32>
 800aba0:	4628      	mov	r0, r5
 800aba2:	f7ff ffb1 	bl	800ab08 <__sinit>
 800aba6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aba8:	07db      	lsls	r3, r3, #31
 800abaa:	d405      	bmi.n	800abb8 <_puts_r+0x44>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	0598      	lsls	r0, r3, #22
 800abb0:	d402      	bmi.n	800abb8 <_puts_r+0x44>
 800abb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abb4:	f000 f9d4 	bl	800af60 <__retarget_lock_acquire_recursive>
 800abb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abbc:	0499      	lsls	r1, r3, #18
 800abbe:	d406      	bmi.n	800abce <_puts_r+0x5a>
 800abc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800abcc:	6663      	str	r3, [r4, #100]	@ 0x64
 800abce:	4628      	mov	r0, r5
 800abd0:	aa01      	add	r2, sp, #4
 800abd2:	4621      	mov	r1, r4
 800abd4:	f001 fdda 	bl	800c78c <__sfvwrite_r>
 800abd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abda:	2800      	cmp	r0, #0
 800abdc:	bf0c      	ite	eq
 800abde:	250a      	moveq	r5, #10
 800abe0:	f04f 35ff 	movne.w	r5, #4294967295
 800abe4:	07da      	lsls	r2, r3, #31
 800abe6:	d405      	bmi.n	800abf4 <_puts_r+0x80>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	059b      	lsls	r3, r3, #22
 800abec:	d402      	bmi.n	800abf4 <_puts_r+0x80>
 800abee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf0:	f000 f9b7 	bl	800af62 <__retarget_lock_release_recursive>
 800abf4:	4628      	mov	r0, r5
 800abf6:	b009      	add	sp, #36	@ 0x24
 800abf8:	bd30      	pop	{r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	0801062b 	.word	0x0801062b

0800ac00 <puts>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	@ (800ac0c <puts+0xc>)
 800ac02:	4601      	mov	r1, r0
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f7ff bfb5 	b.w	800ab74 <_puts_r>
 800ac0a:	bf00      	nop
 800ac0c:	20000430 	.word	0x20000430

0800ac10 <setvbuf>:
 800ac10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	461d      	mov	r5, r3
 800ac16:	4b5a      	ldr	r3, [pc, #360]	@ (800ad80 <setvbuf+0x170>)
 800ac18:	681f      	ldr	r7, [r3, #0]
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460e      	mov	r6, r1
 800ac1e:	4690      	mov	r8, r2
 800ac20:	b127      	cbz	r7, 800ac2c <setvbuf+0x1c>
 800ac22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac24:	b913      	cbnz	r3, 800ac2c <setvbuf+0x1c>
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7ff ff6e 	bl	800ab08 <__sinit>
 800ac2c:	f1b8 0f02 	cmp.w	r8, #2
 800ac30:	d006      	beq.n	800ac40 <setvbuf+0x30>
 800ac32:	f1b8 0f01 	cmp.w	r8, #1
 800ac36:	f200 80a0 	bhi.w	800ad7a <setvbuf+0x16a>
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	f2c0 809d 	blt.w	800ad7a <setvbuf+0x16a>
 800ac40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac42:	07d9      	lsls	r1, r3, #31
 800ac44:	d405      	bmi.n	800ac52 <setvbuf+0x42>
 800ac46:	89a3      	ldrh	r3, [r4, #12]
 800ac48:	059a      	lsls	r2, r3, #22
 800ac4a:	d402      	bmi.n	800ac52 <setvbuf+0x42>
 800ac4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac4e:	f000 f987 	bl	800af60 <__retarget_lock_acquire_recursive>
 800ac52:	4621      	mov	r1, r4
 800ac54:	4638      	mov	r0, r7
 800ac56:	f001 fd73 	bl	800c740 <_fflush_r>
 800ac5a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac5c:	b141      	cbz	r1, 800ac70 <setvbuf+0x60>
 800ac5e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800ac62:	4299      	cmp	r1, r3
 800ac64:	d002      	beq.n	800ac6c <setvbuf+0x5c>
 800ac66:	4638      	mov	r0, r7
 800ac68:	f000 f9ee 	bl	800b048 <_free_r>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac70:	2300      	movs	r3, #0
 800ac72:	61a3      	str	r3, [r4, #24]
 800ac74:	6063      	str	r3, [r4, #4]
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	061b      	lsls	r3, r3, #24
 800ac7a:	d503      	bpl.n	800ac84 <setvbuf+0x74>
 800ac7c:	6921      	ldr	r1, [r4, #16]
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f000 f9e2 	bl	800b048 <_free_r>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ac8a:	f023 0303 	bic.w	r3, r3, #3
 800ac8e:	f1b8 0f02 	cmp.w	r8, #2
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	d067      	beq.n	800ad66 <setvbuf+0x156>
 800ac96:	ab01      	add	r3, sp, #4
 800ac98:	466a      	mov	r2, sp
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	f001 fec1 	bl	800ca24 <__swhatbuf_r>
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	4318      	orrs	r0, r3
 800aca6:	81a0      	strh	r0, [r4, #12]
 800aca8:	bb2d      	cbnz	r5, 800acf6 <setvbuf+0xe6>
 800acaa:	9d00      	ldr	r5, [sp, #0]
 800acac:	4628      	mov	r0, r5
 800acae:	f7ff fc51 	bl	800a554 <malloc>
 800acb2:	4606      	mov	r6, r0
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d158      	bne.n	800ad6a <setvbuf+0x15a>
 800acb8:	f8dd 9000 	ldr.w	r9, [sp]
 800acbc:	45a9      	cmp	r9, r5
 800acbe:	d146      	bne.n	800ad4e <setvbuf+0x13e>
 800acc0:	f04f 35ff 	mov.w	r5, #4294967295
 800acc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc8:	f043 0202 	orr.w	r2, r3, #2
 800accc:	81a2      	strh	r2, [r4, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	60a2      	str	r2, [r4, #8]
 800acd2:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	6122      	str	r2, [r4, #16]
 800acda:	2201      	movs	r2, #1
 800acdc:	6162      	str	r2, [r4, #20]
 800acde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ace0:	07d6      	lsls	r6, r2, #31
 800ace2:	d404      	bmi.n	800acee <setvbuf+0xde>
 800ace4:	0598      	lsls	r0, r3, #22
 800ace6:	d402      	bmi.n	800acee <setvbuf+0xde>
 800ace8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acea:	f000 f93a 	bl	800af62 <__retarget_lock_release_recursive>
 800acee:	4628      	mov	r0, r5
 800acf0:	b003      	add	sp, #12
 800acf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acf6:	2e00      	cmp	r6, #0
 800acf8:	d0d8      	beq.n	800acac <setvbuf+0x9c>
 800acfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfc:	b913      	cbnz	r3, 800ad04 <setvbuf+0xf4>
 800acfe:	4638      	mov	r0, r7
 800ad00:	f7ff ff02 	bl	800ab08 <__sinit>
 800ad04:	9b00      	ldr	r3, [sp, #0]
 800ad06:	6026      	str	r6, [r4, #0]
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	bf1e      	ittt	ne
 800ad0c:	89a3      	ldrhne	r3, [r4, #12]
 800ad0e:	f443 6300 	orrne.w	r3, r3, #2048	@ 0x800
 800ad12:	81a3      	strhne	r3, [r4, #12]
 800ad14:	f1b8 0f01 	cmp.w	r8, #1
 800ad18:	bf02      	ittt	eq
 800ad1a:	89a3      	ldrheq	r3, [r4, #12]
 800ad1c:	f043 0301 	orreq.w	r3, r3, #1
 800ad20:	81a3      	strheq	r3, [r4, #12]
 800ad22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad26:	f013 0208 	ands.w	r2, r3, #8
 800ad2a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ad2e:	d01e      	beq.n	800ad6e <setvbuf+0x15e>
 800ad30:	07d9      	lsls	r1, r3, #31
 800ad32:	bf41      	itttt	mi
 800ad34:	2200      	movmi	r2, #0
 800ad36:	426d      	negmi	r5, r5
 800ad38:	60a2      	strmi	r2, [r4, #8]
 800ad3a:	61a5      	strmi	r5, [r4, #24]
 800ad3c:	bf58      	it	pl
 800ad3e:	60a5      	strpl	r5, [r4, #8]
 800ad40:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad42:	07d2      	lsls	r2, r2, #31
 800ad44:	d401      	bmi.n	800ad4a <setvbuf+0x13a>
 800ad46:	059b      	lsls	r3, r3, #22
 800ad48:	d513      	bpl.n	800ad72 <setvbuf+0x162>
 800ad4a:	2500      	movs	r5, #0
 800ad4c:	e7cf      	b.n	800acee <setvbuf+0xde>
 800ad4e:	4648      	mov	r0, r9
 800ad50:	f7ff fc00 	bl	800a554 <malloc>
 800ad54:	4606      	mov	r6, r0
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d0b2      	beq.n	800acc0 <setvbuf+0xb0>
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad60:	81a3      	strh	r3, [r4, #12]
 800ad62:	464d      	mov	r5, r9
 800ad64:	e7c9      	b.n	800acfa <setvbuf+0xea>
 800ad66:	2500      	movs	r5, #0
 800ad68:	e7ac      	b.n	800acc4 <setvbuf+0xb4>
 800ad6a:	46a9      	mov	r9, r5
 800ad6c:	e7f5      	b.n	800ad5a <setvbuf+0x14a>
 800ad6e:	60a2      	str	r2, [r4, #8]
 800ad70:	e7e6      	b.n	800ad40 <setvbuf+0x130>
 800ad72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad74:	f000 f8f5 	bl	800af62 <__retarget_lock_release_recursive>
 800ad78:	e7e7      	b.n	800ad4a <setvbuf+0x13a>
 800ad7a:	f04f 35ff 	mov.w	r5, #4294967295
 800ad7e:	e7b6      	b.n	800acee <setvbuf+0xde>
 800ad80:	20000430 	.word	0x20000430

0800ad84 <sprintf>:
 800ad84:	b40e      	push	{r1, r2, r3}
 800ad86:	b500      	push	{lr}
 800ad88:	b09c      	sub	sp, #112	@ 0x70
 800ad8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad8c:	9002      	str	r0, [sp, #8]
 800ad8e:	9006      	str	r0, [sp, #24]
 800ad90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad94:	4809      	ldr	r0, [pc, #36]	@ (800adbc <sprintf+0x38>)
 800ad96:	9107      	str	r1, [sp, #28]
 800ad98:	9104      	str	r1, [sp, #16]
 800ad9a:	4909      	ldr	r1, [pc, #36]	@ (800adc0 <sprintf+0x3c>)
 800ad9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada0:	9105      	str	r1, [sp, #20]
 800ada2:	6800      	ldr	r0, [r0, #0]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	a902      	add	r1, sp, #8
 800ada8:	f000 fa0e 	bl	800b1c8 <_svfprintf_r>
 800adac:	9b02      	ldr	r3, [sp, #8]
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	b01c      	add	sp, #112	@ 0x70
 800adb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adb8:	b003      	add	sp, #12
 800adba:	4770      	bx	lr
 800adbc:	20000430 	.word	0x20000430
 800adc0:	ffff0208 	.word	0xffff0208

0800adc4 <__sread>:
 800adc4:	b510      	push	{r4, lr}
 800adc6:	460c      	mov	r4, r1
 800adc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adcc:	f000 f868 	bl	800aea0 <_read_r>
 800add0:	2800      	cmp	r0, #0
 800add2:	bfab      	itete	ge
 800add4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800add6:	89a3      	ldrhlt	r3, [r4, #12]
 800add8:	181b      	addge	r3, r3, r0
 800adda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adde:	bfac      	ite	ge
 800ade0:	6523      	strge	r3, [r4, #80]	@ 0x50
 800ade2:	81a3      	strhlt	r3, [r4, #12]
 800ade4:	bd10      	pop	{r4, pc}

0800ade6 <__swrite>:
 800ade6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adea:	461f      	mov	r7, r3
 800adec:	898b      	ldrh	r3, [r1, #12]
 800adee:	05db      	lsls	r3, r3, #23
 800adf0:	4605      	mov	r5, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4616      	mov	r6, r2
 800adf6:	d505      	bpl.n	800ae04 <__swrite+0x1e>
 800adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfc:	2302      	movs	r3, #2
 800adfe:	2200      	movs	r2, #0
 800ae00:	f000 f83c 	bl	800ae7c <_lseek_r>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	4632      	mov	r2, r6
 800ae12:	463b      	mov	r3, r7
 800ae14:	4628      	mov	r0, r5
 800ae16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1a:	f000 b863 	b.w	800aee4 <_write_r>

0800ae1e <__sseek>:
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	460c      	mov	r4, r1
 800ae22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae26:	f000 f829 	bl	800ae7c <_lseek_r>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	bf15      	itete	ne
 800ae30:	6520      	strne	r0, [r4, #80]	@ 0x50
 800ae32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae3a:	81a3      	strheq	r3, [r4, #12]
 800ae3c:	bf18      	it	ne
 800ae3e:	81a3      	strhne	r3, [r4, #12]
 800ae40:	bd10      	pop	{r4, pc}

0800ae42 <__sclose>:
 800ae42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae46:	f000 b809 	b.w	800ae5c <_close_r>

0800ae4a <memset>:
 800ae4a:	4402      	add	r2, r0
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d100      	bne.n	800ae54 <memset+0xa>
 800ae52:	4770      	bx	lr
 800ae54:	f803 1b01 	strb.w	r1, [r3], #1
 800ae58:	e7f9      	b.n	800ae4e <memset+0x4>
	...

0800ae5c <_close_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d06      	ldr	r5, [pc, #24]	@ (800ae78 <_close_r+0x1c>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	f7f7 fe98 	bl	8002b9c <_close>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_close_r+0x1a>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_close_r+0x1a>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20001234 	.word	0x20001234

0800ae7c <_lseek_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	@ (800ae9c <_lseek_r+0x20>)
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7f7 fead 	bl	8002bea <_lseek>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_lseek_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_lseek_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20001234 	.word	0x20001234

0800aea0 <_read_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d07      	ldr	r5, [pc, #28]	@ (800aec0 <_read_r+0x20>)
 800aea4:	4604      	mov	r4, r0
 800aea6:	4608      	mov	r0, r1
 800aea8:	4611      	mov	r1, r2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	602a      	str	r2, [r5, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f7f7 fe3b 	bl	8002b2a <_read>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_read_r+0x1e>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_read_r+0x1e>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	20001234 	.word	0x20001234

0800aec4 <_sbrk_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d06      	ldr	r5, [pc, #24]	@ (800aee0 <_sbrk_r+0x1c>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	602b      	str	r3, [r5, #0]
 800aed0:	f7f7 fe98 	bl	8002c04 <_sbrk>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_sbrk_r+0x1a>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	b103      	cbz	r3, 800aede <_sbrk_r+0x1a>
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	20001234 	.word	0x20001234

0800aee4 <_write_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d07      	ldr	r5, [pc, #28]	@ (800af04 <_write_r+0x20>)
 800aee8:	4604      	mov	r4, r0
 800aeea:	4608      	mov	r0, r1
 800aeec:	4611      	mov	r1, r2
 800aeee:	2200      	movs	r2, #0
 800aef0:	602a      	str	r2, [r5, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	f7f7 fe36 	bl	8002b64 <_write>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_write_r+0x1e>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_write_r+0x1e>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	20001234 	.word	0x20001234

0800af08 <__errno>:
 800af08:	4b01      	ldr	r3, [pc, #4]	@ (800af10 <__errno+0x8>)
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	20000430 	.word	0x20000430

0800af14 <__libc_init_array>:
 800af14:	b570      	push	{r4, r5, r6, lr}
 800af16:	4d0d      	ldr	r5, [pc, #52]	@ (800af4c <__libc_init_array+0x38>)
 800af18:	4c0d      	ldr	r4, [pc, #52]	@ (800af50 <__libc_init_array+0x3c>)
 800af1a:	1b64      	subs	r4, r4, r5
 800af1c:	10a4      	asrs	r4, r4, #2
 800af1e:	2600      	movs	r6, #0
 800af20:	42a6      	cmp	r6, r4
 800af22:	d109      	bne.n	800af38 <__libc_init_array+0x24>
 800af24:	4d0b      	ldr	r5, [pc, #44]	@ (800af54 <__libc_init_array+0x40>)
 800af26:	4c0c      	ldr	r4, [pc, #48]	@ (800af58 <__libc_init_array+0x44>)
 800af28:	f005 f97e 	bl	8010228 <_init>
 800af2c:	1b64      	subs	r4, r4, r5
 800af2e:	10a4      	asrs	r4, r4, #2
 800af30:	2600      	movs	r6, #0
 800af32:	42a6      	cmp	r6, r4
 800af34:	d105      	bne.n	800af42 <__libc_init_array+0x2e>
 800af36:	bd70      	pop	{r4, r5, r6, pc}
 800af38:	f855 3b04 	ldr.w	r3, [r5], #4
 800af3c:	4798      	blx	r3
 800af3e:	3601      	adds	r6, #1
 800af40:	e7ee      	b.n	800af20 <__libc_init_array+0xc>
 800af42:	f855 3b04 	ldr.w	r3, [r5], #4
 800af46:	4798      	blx	r3
 800af48:	3601      	adds	r6, #1
 800af4a:	e7f2      	b.n	800af32 <__libc_init_array+0x1e>
 800af4c:	08010830 	.word	0x08010830
 800af50:	08010830 	.word	0x08010830
 800af54:	08010830 	.word	0x08010830
 800af58:	08010838 	.word	0x08010838

0800af5c <__retarget_lock_init_recursive>:
 800af5c:	4770      	bx	lr

0800af5e <__retarget_lock_close_recursive>:
 800af5e:	4770      	bx	lr

0800af60 <__retarget_lock_acquire_recursive>:
 800af60:	4770      	bx	lr

0800af62 <__retarget_lock_release_recursive>:
 800af62:	4770      	bx	lr

0800af64 <sysconf>:
 800af64:	2808      	cmp	r0, #8
 800af66:	b508      	push	{r3, lr}
 800af68:	d006      	beq.n	800af78 <sysconf+0x14>
 800af6a:	f7ff ffcd 	bl	800af08 <__errno>
 800af6e:	2316      	movs	r3, #22
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	f04f 30ff 	mov.w	r0, #4294967295
 800af76:	bd08      	pop	{r3, pc}
 800af78:	2080      	movs	r0, #128	@ 0x80
 800af7a:	e7fc      	b.n	800af76 <sysconf+0x12>

0800af7c <register_fini>:
 800af7c:	4b02      	ldr	r3, [pc, #8]	@ (800af88 <register_fini+0xc>)
 800af7e:	b113      	cbz	r3, 800af86 <register_fini+0xa>
 800af80:	4802      	ldr	r0, [pc, #8]	@ (800af8c <register_fini+0x10>)
 800af82:	f000 b805 	b.w	800af90 <atexit>
 800af86:	4770      	bx	lr
 800af88:	00000000 	.word	0x00000000
 800af8c:	0800cc4d 	.word	0x0800cc4d

0800af90 <atexit>:
 800af90:	2300      	movs	r3, #0
 800af92:	4601      	mov	r1, r0
 800af94:	461a      	mov	r2, r3
 800af96:	4618      	mov	r0, r3
 800af98:	f001 beb0 	b.w	800ccfc <__register_exitproc>

0800af9c <_malloc_trim_r>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4606      	mov	r6, r0
 800afa2:	2008      	movs	r0, #8
 800afa4:	4689      	mov	r9, r1
 800afa6:	f7ff ffdd 	bl	800af64 <sysconf>
 800afaa:	4f24      	ldr	r7, [pc, #144]	@ (800b03c <_malloc_trim_r+0xa0>)
 800afac:	4680      	mov	r8, r0
 800afae:	4630      	mov	r0, r6
 800afb0:	f7ff fd12 	bl	800a9d8 <__malloc_lock>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	685d      	ldr	r5, [r3, #4]
 800afb8:	f025 0503 	bic.w	r5, r5, #3
 800afbc:	f1a5 0411 	sub.w	r4, r5, #17
 800afc0:	eba4 0409 	sub.w	r4, r4, r9
 800afc4:	4444      	add	r4, r8
 800afc6:	fbb4 f4f8 	udiv	r4, r4, r8
 800afca:	3c01      	subs	r4, #1
 800afcc:	fb08 f404 	mul.w	r4, r8, r4
 800afd0:	45a0      	cmp	r8, r4
 800afd2:	dd05      	ble.n	800afe0 <_malloc_trim_r+0x44>
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7ff fd05 	bl	800a9e4 <__malloc_unlock>
 800afda:	2000      	movs	r0, #0
 800afdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe0:	2100      	movs	r1, #0
 800afe2:	4630      	mov	r0, r6
 800afe4:	f7ff ff6e 	bl	800aec4 <_sbrk_r>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	442b      	add	r3, r5
 800afec:	4298      	cmp	r0, r3
 800afee:	d1f1      	bne.n	800afd4 <_malloc_trim_r+0x38>
 800aff0:	4261      	negs	r1, r4
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7ff ff66 	bl	800aec4 <_sbrk_r>
 800aff8:	3001      	adds	r0, #1
 800affa:	d110      	bne.n	800b01e <_malloc_trim_r+0x82>
 800affc:	2100      	movs	r1, #0
 800affe:	4630      	mov	r0, r6
 800b000:	f7ff ff60 	bl	800aec4 <_sbrk_r>
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	1a83      	subs	r3, r0, r2
 800b008:	2b0f      	cmp	r3, #15
 800b00a:	dde3      	ble.n	800afd4 <_malloc_trim_r+0x38>
 800b00c:	490c      	ldr	r1, [pc, #48]	@ (800b040 <_malloc_trim_r+0xa4>)
 800b00e:	6809      	ldr	r1, [r1, #0]
 800b010:	1a40      	subs	r0, r0, r1
 800b012:	490c      	ldr	r1, [pc, #48]	@ (800b044 <_malloc_trim_r+0xa8>)
 800b014:	f043 0301 	orr.w	r3, r3, #1
 800b018:	6008      	str	r0, [r1, #0]
 800b01a:	6053      	str	r3, [r2, #4]
 800b01c:	e7da      	b.n	800afd4 <_malloc_trim_r+0x38>
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4a08      	ldr	r2, [pc, #32]	@ (800b044 <_malloc_trim_r+0xa8>)
 800b022:	1b2d      	subs	r5, r5, r4
 800b024:	f045 0501 	orr.w	r5, r5, #1
 800b028:	605d      	str	r5, [r3, #4]
 800b02a:	6813      	ldr	r3, [r2, #0]
 800b02c:	4630      	mov	r0, r6
 800b02e:	1b1b      	subs	r3, r3, r4
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	f7ff fcd7 	bl	800a9e4 <__malloc_unlock>
 800b036:	2001      	movs	r0, #1
 800b038:	e7d0      	b.n	800afdc <_malloc_trim_r+0x40>
 800b03a:	bf00      	nop
 800b03c:	2000001c 	.word	0x2000001c
 800b040:	20000014 	.word	0x20000014
 800b044:	200010c4 	.word	0x200010c4

0800b048 <_free_r>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	2900      	cmp	r1, #0
 800b050:	f000 80b1 	beq.w	800b1b6 <_free_r+0x16e>
 800b054:	f7ff fcc0 	bl	800a9d8 <__malloc_lock>
 800b058:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b05c:	4d56      	ldr	r5, [pc, #344]	@ (800b1b8 <_free_r+0x170>)
 800b05e:	f022 0001 	bic.w	r0, r2, #1
 800b062:	f1a7 0308 	sub.w	r3, r7, #8
 800b066:	eb03 0c00 	add.w	ip, r3, r0
 800b06a:	68a9      	ldr	r1, [r5, #8]
 800b06c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800b070:	4561      	cmp	r1, ip
 800b072:	f026 0603 	bic.w	r6, r6, #3
 800b076:	f002 0201 	and.w	r2, r2, #1
 800b07a:	d11b      	bne.n	800b0b4 <_free_r+0x6c>
 800b07c:	4406      	add	r6, r0
 800b07e:	b93a      	cbnz	r2, 800b090 <_free_r+0x48>
 800b080:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	4416      	add	r6, r2
 800b088:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800b08c:	60ca      	str	r2, [r1, #12]
 800b08e:	6091      	str	r1, [r2, #8]
 800b090:	f046 0201 	orr.w	r2, r6, #1
 800b094:	605a      	str	r2, [r3, #4]
 800b096:	60ab      	str	r3, [r5, #8]
 800b098:	4b48      	ldr	r3, [pc, #288]	@ (800b1bc <_free_r+0x174>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	42b3      	cmp	r3, r6
 800b09e:	d804      	bhi.n	800b0aa <_free_r+0x62>
 800b0a0:	4b47      	ldr	r3, [pc, #284]	@ (800b1c0 <_free_r+0x178>)
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	6819      	ldr	r1, [r3, #0]
 800b0a6:	f7ff ff79 	bl	800af9c <_malloc_trim_r>
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0b0:	f7ff bc98 	b.w	800a9e4 <__malloc_unlock>
 800b0b4:	f8cc 6004 	str.w	r6, [ip, #4]
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	d138      	bne.n	800b12e <_free_r+0xe6>
 800b0bc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800b0c0:	1a5b      	subs	r3, r3, r1
 800b0c2:	4408      	add	r0, r1
 800b0c4:	6899      	ldr	r1, [r3, #8]
 800b0c6:	f105 0708 	add.w	r7, r5, #8
 800b0ca:	42b9      	cmp	r1, r7
 800b0cc:	d031      	beq.n	800b132 <_free_r+0xea>
 800b0ce:	68df      	ldr	r7, [r3, #12]
 800b0d0:	60cf      	str	r7, [r1, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	eb0c 0106 	add.w	r1, ip, r6
 800b0d8:	6849      	ldr	r1, [r1, #4]
 800b0da:	07c9      	lsls	r1, r1, #31
 800b0dc:	d40b      	bmi.n	800b0f6 <_free_r+0xae>
 800b0de:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b0e2:	4430      	add	r0, r6
 800b0e4:	bb3a      	cbnz	r2, 800b136 <_free_r+0xee>
 800b0e6:	4e37      	ldr	r6, [pc, #220]	@ (800b1c4 <_free_r+0x17c>)
 800b0e8:	42b1      	cmp	r1, r6
 800b0ea:	d124      	bne.n	800b136 <_free_r+0xee>
 800b0ec:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800b0f0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f040 0101 	orr.w	r1, r0, #1
 800b0fa:	6059      	str	r1, [r3, #4]
 800b0fc:	5018      	str	r0, [r3, r0]
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	d1d3      	bne.n	800b0aa <_free_r+0x62>
 800b102:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800b106:	d21b      	bcs.n	800b140 <_free_r+0xf8>
 800b108:	08c2      	lsrs	r2, r0, #3
 800b10a:	2101      	movs	r1, #1
 800b10c:	0940      	lsrs	r0, r0, #5
 800b10e:	4081      	lsls	r1, r0
 800b110:	6868      	ldr	r0, [r5, #4]
 800b112:	3201      	adds	r2, #1
 800b114:	4301      	orrs	r1, r0
 800b116:	6069      	str	r1, [r5, #4]
 800b118:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800b11c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800b120:	3908      	subs	r1, #8
 800b122:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b126:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800b12a:	60c3      	str	r3, [r0, #12]
 800b12c:	e7bd      	b.n	800b0aa <_free_r+0x62>
 800b12e:	2200      	movs	r2, #0
 800b130:	e7d0      	b.n	800b0d4 <_free_r+0x8c>
 800b132:	2201      	movs	r2, #1
 800b134:	e7ce      	b.n	800b0d4 <_free_r+0x8c>
 800b136:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800b13a:	60ce      	str	r6, [r1, #12]
 800b13c:	60b1      	str	r1, [r6, #8]
 800b13e:	e7da      	b.n	800b0f6 <_free_r+0xae>
 800b140:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800b144:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800b148:	d214      	bcs.n	800b174 <_free_r+0x12c>
 800b14a:	0982      	lsrs	r2, r0, #6
 800b14c:	3238      	adds	r2, #56	@ 0x38
 800b14e:	1c51      	adds	r1, r2, #1
 800b150:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b154:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b158:	428e      	cmp	r6, r1
 800b15a:	d125      	bne.n	800b1a8 <_free_r+0x160>
 800b15c:	2001      	movs	r0, #1
 800b15e:	1092      	asrs	r2, r2, #2
 800b160:	fa00 f202 	lsl.w	r2, r0, r2
 800b164:	6868      	ldr	r0, [r5, #4]
 800b166:	4302      	orrs	r2, r0
 800b168:	606a      	str	r2, [r5, #4]
 800b16a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800b16e:	60b3      	str	r3, [r6, #8]
 800b170:	60cb      	str	r3, [r1, #12]
 800b172:	e79a      	b.n	800b0aa <_free_r+0x62>
 800b174:	2a14      	cmp	r2, #20
 800b176:	d801      	bhi.n	800b17c <_free_r+0x134>
 800b178:	325b      	adds	r2, #91	@ 0x5b
 800b17a:	e7e8      	b.n	800b14e <_free_r+0x106>
 800b17c:	2a54      	cmp	r2, #84	@ 0x54
 800b17e:	d802      	bhi.n	800b186 <_free_r+0x13e>
 800b180:	0b02      	lsrs	r2, r0, #12
 800b182:	326e      	adds	r2, #110	@ 0x6e
 800b184:	e7e3      	b.n	800b14e <_free_r+0x106>
 800b186:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800b18a:	d802      	bhi.n	800b192 <_free_r+0x14a>
 800b18c:	0bc2      	lsrs	r2, r0, #15
 800b18e:	3277      	adds	r2, #119	@ 0x77
 800b190:	e7dd      	b.n	800b14e <_free_r+0x106>
 800b192:	f240 5154 	movw	r1, #1364	@ 0x554
 800b196:	428a      	cmp	r2, r1
 800b198:	bf9a      	itte	ls
 800b19a:	0c82      	lsrls	r2, r0, #18
 800b19c:	327c      	addls	r2, #124	@ 0x7c
 800b19e:	227e      	movhi	r2, #126	@ 0x7e
 800b1a0:	e7d5      	b.n	800b14e <_free_r+0x106>
 800b1a2:	6889      	ldr	r1, [r1, #8]
 800b1a4:	428e      	cmp	r6, r1
 800b1a6:	d004      	beq.n	800b1b2 <_free_r+0x16a>
 800b1a8:	684a      	ldr	r2, [r1, #4]
 800b1aa:	f022 0203 	bic.w	r2, r2, #3
 800b1ae:	4282      	cmp	r2, r0
 800b1b0:	d8f7      	bhi.n	800b1a2 <_free_r+0x15a>
 800b1b2:	68ce      	ldr	r6, [r1, #12]
 800b1b4:	e7d9      	b.n	800b16a <_free_r+0x122>
 800b1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b8:	2000001c 	.word	0x2000001c
 800b1bc:	20000018 	.word	0x20000018
 800b1c0:	200010f4 	.word	0x200010f4
 800b1c4:	20000024 	.word	0x20000024

0800b1c8 <_svfprintf_r>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	b0d3      	sub	sp, #332	@ 0x14c
 800b1ce:	468b      	mov	fp, r1
 800b1d0:	4691      	mov	r9, r2
 800b1d2:	461e      	mov	r6, r3
 800b1d4:	9003      	str	r0, [sp, #12]
 800b1d6:	f001 fd13 	bl	800cc00 <_localeconv_r>
 800b1da:	6803      	ldr	r3, [r0, #0]
 800b1dc:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f5 f81e 	bl	8000220 <strlen>
 800b1e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b1e8:	900d      	str	r0, [sp, #52]	@ 0x34
 800b1ea:	061b      	lsls	r3, r3, #24
 800b1ec:	d515      	bpl.n	800b21a <_svfprintf_r+0x52>
 800b1ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b1f2:	b993      	cbnz	r3, 800b21a <_svfprintf_r+0x52>
 800b1f4:	9803      	ldr	r0, [sp, #12]
 800b1f6:	2140      	movs	r1, #64	@ 0x40
 800b1f8:	f7ff f9b4 	bl	800a564 <_malloc_r>
 800b1fc:	f8cb 0000 	str.w	r0, [fp]
 800b200:	f8cb 0010 	str.w	r0, [fp, #16]
 800b204:	b930      	cbnz	r0, 800b214 <_svfprintf_r+0x4c>
 800b206:	9a03      	ldr	r2, [sp, #12]
 800b208:	230c      	movs	r3, #12
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	f04f 33ff 	mov.w	r3, #4294967295
 800b210:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b212:	e1f7      	b.n	800b604 <_svfprintf_r+0x43c>
 800b214:	2340      	movs	r3, #64	@ 0x40
 800b216:	f8cb 3014 	str.w	r3, [fp, #20]
 800b21a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800b468 <_svfprintf_r+0x2a0>
 800b21e:	2300      	movs	r3, #0
 800b220:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800b224:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b228:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800b22c:	ac29      	add	r4, sp, #164	@ 0xa4
 800b22e:	9426      	str	r4, [sp, #152]	@ 0x98
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	9309      	str	r3, [sp, #36]	@ 0x24
 800b234:	9312      	str	r3, [sp, #72]	@ 0x48
 800b236:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b238:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b23a:	464b      	mov	r3, r9
 800b23c:	461d      	mov	r5, r3
 800b23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b242:	b10a      	cbz	r2, 800b248 <_svfprintf_r+0x80>
 800b244:	2a25      	cmp	r2, #37	@ 0x25
 800b246:	d1f9      	bne.n	800b23c <_svfprintf_r+0x74>
 800b248:	ebb5 0709 	subs.w	r7, r5, r9
 800b24c:	d00d      	beq.n	800b26a <_svfprintf_r+0xa2>
 800b24e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b250:	443b      	add	r3, r7
 800b252:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b254:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b256:	3301      	adds	r3, #1
 800b258:	2b07      	cmp	r3, #7
 800b25a:	e9c4 9700 	strd	r9, r7, [r4]
 800b25e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b260:	dc75      	bgt.n	800b34e <_svfprintf_r+0x186>
 800b262:	3408      	adds	r4, #8
 800b264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b266:	443b      	add	r3, r7
 800b268:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b26a:	782b      	ldrb	r3, [r5, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f001 8148 	beq.w	800c502 <_svfprintf_r+0x133a>
 800b272:	2200      	movs	r2, #0
 800b274:	1c6b      	adds	r3, r5, #1
 800b276:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800b27a:	f04f 38ff 	mov.w	r8, #4294967295
 800b27e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b280:	4615      	mov	r5, r2
 800b282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b286:	9206      	str	r2, [sp, #24]
 800b288:	930c      	str	r3, [sp, #48]	@ 0x30
 800b28a:	9b06      	ldr	r3, [sp, #24]
 800b28c:	3b20      	subs	r3, #32
 800b28e:	2b5a      	cmp	r3, #90	@ 0x5a
 800b290:	f200 85a4 	bhi.w	800bddc <_svfprintf_r+0xc14>
 800b294:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b298:	05a2009d 	.word	0x05a2009d
 800b29c:	00a505a2 	.word	0x00a505a2
 800b2a0:	05a205a2 	.word	0x05a205a2
 800b2a4:	008505a2 	.word	0x008505a2
 800b2a8:	05a205a2 	.word	0x05a205a2
 800b2ac:	00b200a8 	.word	0x00b200a8
 800b2b0:	00af05a2 	.word	0x00af05a2
 800b2b4:	05a200b4 	.word	0x05a200b4
 800b2b8:	00d100ce 	.word	0x00d100ce
 800b2bc:	00d100d1 	.word	0x00d100d1
 800b2c0:	00d100d1 	.word	0x00d100d1
 800b2c4:	00d100d1 	.word	0x00d100d1
 800b2c8:	00d100d1 	.word	0x00d100d1
 800b2cc:	05a205a2 	.word	0x05a205a2
 800b2d0:	05a205a2 	.word	0x05a205a2
 800b2d4:	05a205a2 	.word	0x05a205a2
 800b2d8:	014705a2 	.word	0x014705a2
 800b2dc:	010805a2 	.word	0x010805a2
 800b2e0:	0147011b 	.word	0x0147011b
 800b2e4:	01470147 	.word	0x01470147
 800b2e8:	05a205a2 	.word	0x05a205a2
 800b2ec:	05a205a2 	.word	0x05a205a2
 800b2f0:	05a200e2 	.word	0x05a200e2
 800b2f4:	049d05a2 	.word	0x049d05a2
 800b2f8:	05a205a2 	.word	0x05a205a2
 800b2fc:	04e705a2 	.word	0x04e705a2
 800b300:	050805a2 	.word	0x050805a2
 800b304:	05a205a2 	.word	0x05a205a2
 800b308:	05a2052a 	.word	0x05a2052a
 800b30c:	05a205a2 	.word	0x05a205a2
 800b310:	05a205a2 	.word	0x05a205a2
 800b314:	05a205a2 	.word	0x05a205a2
 800b318:	014705a2 	.word	0x014705a2
 800b31c:	010805a2 	.word	0x010805a2
 800b320:	0147011d 	.word	0x0147011d
 800b324:	01470147 	.word	0x01470147
 800b328:	011d00ee 	.word	0x011d00ee
 800b32c:	05a20102 	.word	0x05a20102
 800b330:	05a200fb 	.word	0x05a200fb
 800b334:	049f047e 	.word	0x049f047e
 800b338:	010204d6 	.word	0x010204d6
 800b33c:	04e705a2 	.word	0x04e705a2
 800b340:	050a009b 	.word	0x050a009b
 800b344:	05a205a2 	.word	0x05a205a2
 800b348:	05a20065 	.word	0x05a20065
 800b34c:	009b      	.short	0x009b
 800b34e:	9803      	ldr	r0, [sp, #12]
 800b350:	aa26      	add	r2, sp, #152	@ 0x98
 800b352:	4659      	mov	r1, fp
 800b354:	f003 f843 	bl	800e3de <__ssprint_r>
 800b358:	2800      	cmp	r0, #0
 800b35a:	f040 814e 	bne.w	800b5fa <_svfprintf_r+0x432>
 800b35e:	ac29      	add	r4, sp, #164	@ 0xa4
 800b360:	e780      	b.n	800b264 <_svfprintf_r+0x9c>
 800b362:	4b43      	ldr	r3, [pc, #268]	@ (800b470 <_svfprintf_r+0x2a8>)
 800b364:	9319      	str	r3, [sp, #100]	@ 0x64
 800b366:	f015 0320 	ands.w	r3, r5, #32
 800b36a:	f000 84c2 	beq.w	800bcf2 <_svfprintf_r+0xb2a>
 800b36e:	3607      	adds	r6, #7
 800b370:	f026 0307 	bic.w	r3, r6, #7
 800b374:	461a      	mov	r2, r3
 800b376:	685f      	ldr	r7, [r3, #4]
 800b378:	f852 6b08 	ldr.w	r6, [r2], #8
 800b37c:	9207      	str	r2, [sp, #28]
 800b37e:	07eb      	lsls	r3, r5, #31
 800b380:	d50a      	bpl.n	800b398 <_svfprintf_r+0x1d0>
 800b382:	ea56 0307 	orrs.w	r3, r6, r7
 800b386:	d007      	beq.n	800b398 <_svfprintf_r+0x1d0>
 800b388:	2330      	movs	r3, #48	@ 0x30
 800b38a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800b394:	f045 0502 	orr.w	r5, r5, #2
 800b398:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800b39c:	2302      	movs	r3, #2
 800b39e:	f000 bc28 	b.w	800bbf2 <_svfprintf_r+0xa2a>
 800b3a2:	9803      	ldr	r0, [sp, #12]
 800b3a4:	f001 fc2c 	bl	800cc00 <_localeconv_r>
 800b3a8:	6843      	ldr	r3, [r0, #4]
 800b3aa:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7f4 ff37 	bl	8000220 <strlen>
 800b3b2:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3b4:	9803      	ldr	r0, [sp, #12]
 800b3b6:	f001 fc23 	bl	800cc00 <_localeconv_r>
 800b3ba:	6883      	ldr	r3, [r0, #8]
 800b3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3c0:	b12b      	cbz	r3, 800b3ce <_svfprintf_r+0x206>
 800b3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c4:	b11b      	cbz	r3, 800b3ce <_svfprintf_r+0x206>
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b10b      	cbz	r3, 800b3ce <_svfprintf_r+0x206>
 800b3ca:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800b3ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3d0:	e757      	b.n	800b282 <_svfprintf_r+0xba>
 800b3d2:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1f9      	bne.n	800b3ce <_svfprintf_r+0x206>
 800b3da:	2320      	movs	r3, #32
 800b3dc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b3e0:	e7f5      	b.n	800b3ce <_svfprintf_r+0x206>
 800b3e2:	f045 0501 	orr.w	r5, r5, #1
 800b3e6:	e7f2      	b.n	800b3ce <_svfprintf_r+0x206>
 800b3e8:	f856 3b04 	ldr.w	r3, [r6], #4
 800b3ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	daed      	bge.n	800b3ce <_svfprintf_r+0x206>
 800b3f2:	425b      	negs	r3, r3
 800b3f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3f6:	f045 0504 	orr.w	r5, r5, #4
 800b3fa:	e7e8      	b.n	800b3ce <_svfprintf_r+0x206>
 800b3fc:	232b      	movs	r3, #43	@ 0x2b
 800b3fe:	e7ed      	b.n	800b3dc <_svfprintf_r+0x214>
 800b400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b406:	9206      	str	r2, [sp, #24]
 800b408:	2a2a      	cmp	r2, #42	@ 0x2a
 800b40a:	d10f      	bne.n	800b42c <_svfprintf_r+0x264>
 800b40c:	f856 2b04 	ldr.w	r2, [r6], #4
 800b410:	930c      	str	r3, [sp, #48]	@ 0x30
 800b412:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800b416:	e7da      	b.n	800b3ce <_svfprintf_r+0x206>
 800b418:	fb01 2808 	mla	r8, r1, r8, r2
 800b41c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b420:	9206      	str	r2, [sp, #24]
 800b422:	9a06      	ldr	r2, [sp, #24]
 800b424:	3a30      	subs	r2, #48	@ 0x30
 800b426:	2a09      	cmp	r2, #9
 800b428:	d9f6      	bls.n	800b418 <_svfprintf_r+0x250>
 800b42a:	e72d      	b.n	800b288 <_svfprintf_r+0xc0>
 800b42c:	f04f 0800 	mov.w	r8, #0
 800b430:	210a      	movs	r1, #10
 800b432:	e7f6      	b.n	800b422 <_svfprintf_r+0x25a>
 800b434:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800b438:	e7c9      	b.n	800b3ce <_svfprintf_r+0x206>
 800b43a:	2200      	movs	r2, #0
 800b43c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b43e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b440:	210a      	movs	r1, #10
 800b442:	9a06      	ldr	r2, [sp, #24]
 800b444:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b446:	3a30      	subs	r2, #48	@ 0x30
 800b448:	fb01 2200 	mla	r2, r1, r0, r2
 800b44c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b452:	9206      	str	r2, [sp, #24]
 800b454:	3a30      	subs	r2, #48	@ 0x30
 800b456:	2a09      	cmp	r2, #9
 800b458:	d9f3      	bls.n	800b442 <_svfprintf_r+0x27a>
 800b45a:	e715      	b.n	800b288 <_svfprintf_r+0xc0>
 800b45c:	f045 0508 	orr.w	r5, r5, #8
 800b460:	e7b5      	b.n	800b3ce <_svfprintf_r+0x206>
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
	...
 800b470:	080102d4 	.word	0x080102d4
 800b474:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b68      	cmp	r3, #104	@ 0x68
 800b47a:	bf01      	itttt	eq
 800b47c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800b47e:	3301      	addeq	r3, #1
 800b480:	930c      	streq	r3, [sp, #48]	@ 0x30
 800b482:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800b486:	bf18      	it	ne
 800b488:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800b48c:	e79f      	b.n	800b3ce <_svfprintf_r+0x206>
 800b48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b6c      	cmp	r3, #108	@ 0x6c
 800b494:	d105      	bne.n	800b4a2 <_svfprintf_r+0x2da>
 800b496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b498:	3301      	adds	r3, #1
 800b49a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b49c:	f045 0520 	orr.w	r5, r5, #32
 800b4a0:	e795      	b.n	800b3ce <_svfprintf_r+0x206>
 800b4a2:	f045 0510 	orr.w	r5, r5, #16
 800b4a6:	e792      	b.n	800b3ce <_svfprintf_r+0x206>
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	f852 3b04 	ldr.w	r3, [r2], #4
 800b4ae:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9207      	str	r2, [sp, #28]
 800b4b6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b4ba:	469a      	mov	sl, r3
 800b4bc:	f04f 0801 	mov.w	r8, #1
 800b4c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4c2:	461f      	mov	r7, r3
 800b4c4:	9308      	str	r3, [sp, #32]
 800b4c6:	461e      	mov	r6, r3
 800b4c8:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800b4cc:	e1d2      	b.n	800b874 <_svfprintf_r+0x6ac>
 800b4ce:	f045 0510 	orr.w	r5, r5, #16
 800b4d2:	06af      	lsls	r7, r5, #26
 800b4d4:	d512      	bpl.n	800b4fc <_svfprintf_r+0x334>
 800b4d6:	3607      	adds	r6, #7
 800b4d8:	f026 0307 	bic.w	r3, r6, #7
 800b4dc:	461a      	mov	r2, r3
 800b4de:	685f      	ldr	r7, [r3, #4]
 800b4e0:	f852 6b08 	ldr.w	r6, [r2], #8
 800b4e4:	9207      	str	r2, [sp, #28]
 800b4e6:	2f00      	cmp	r7, #0
 800b4e8:	da06      	bge.n	800b4f8 <_svfprintf_r+0x330>
 800b4ea:	4276      	negs	r6, r6
 800b4ec:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800b4f0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800b4f4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e37d      	b.n	800bbf8 <_svfprintf_r+0xa30>
 800b4fc:	4633      	mov	r3, r6
 800b4fe:	06ee      	lsls	r6, r5, #27
 800b500:	f853 7b04 	ldr.w	r7, [r3], #4
 800b504:	9307      	str	r3, [sp, #28]
 800b506:	d502      	bpl.n	800b50e <_svfprintf_r+0x346>
 800b508:	463e      	mov	r6, r7
 800b50a:	17ff      	asrs	r7, r7, #31
 800b50c:	e7eb      	b.n	800b4e6 <_svfprintf_r+0x31e>
 800b50e:	0668      	lsls	r0, r5, #25
 800b510:	d503      	bpl.n	800b51a <_svfprintf_r+0x352>
 800b512:	b23e      	sxth	r6, r7
 800b514:	f347 37c0 	sbfx	r7, r7, #15, #1
 800b518:	e7e5      	b.n	800b4e6 <_svfprintf_r+0x31e>
 800b51a:	05a9      	lsls	r1, r5, #22
 800b51c:	d5f4      	bpl.n	800b508 <_svfprintf_r+0x340>
 800b51e:	b27e      	sxtb	r6, r7
 800b520:	f347 17c0 	sbfx	r7, r7, #7, #1
 800b524:	e7df      	b.n	800b4e6 <_svfprintf_r+0x31e>
 800b526:	3607      	adds	r6, #7
 800b528:	f026 0307 	bic.w	r3, r6, #7
 800b52c:	ecb3 7b02 	vldmia	r3!, {d7}
 800b530:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b538:	931a      	str	r3, [sp, #104]	@ 0x68
 800b53a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b53c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b540:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b542:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800b546:	4b81      	ldr	r3, [pc, #516]	@ (800b74c <_svfprintf_r+0x584>)
 800b548:	f04f 32ff 	mov.w	r2, #4294967295
 800b54c:	f7f5 fb16 	bl	8000b7c <__aeabi_dcmpun>
 800b550:	bb10      	cbnz	r0, 800b598 <_svfprintf_r+0x3d0>
 800b552:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800b556:	4b7d      	ldr	r3, [pc, #500]	@ (800b74c <_svfprintf_r+0x584>)
 800b558:	f04f 32ff 	mov.w	r2, #4294967295
 800b55c:	f7f5 faf0 	bl	8000b40 <__aeabi_dcmple>
 800b560:	b9d0      	cbnz	r0, 800b598 <_svfprintf_r+0x3d0>
 800b562:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b566:	2200      	movs	r2, #0
 800b568:	2300      	movs	r3, #0
 800b56a:	f7f5 fadf 	bl	8000b2c <__aeabi_dcmplt>
 800b56e:	b110      	cbz	r0, 800b576 <_svfprintf_r+0x3ae>
 800b570:	232d      	movs	r3, #45	@ 0x2d
 800b572:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800b576:	4a76      	ldr	r2, [pc, #472]	@ (800b750 <_svfprintf_r+0x588>)
 800b578:	4b76      	ldr	r3, [pc, #472]	@ (800b754 <_svfprintf_r+0x58c>)
 800b57a:	9906      	ldr	r1, [sp, #24]
 800b57c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800b580:	2947      	cmp	r1, #71	@ 0x47
 800b582:	bfd4      	ite	le
 800b584:	4691      	movle	r9, r2
 800b586:	4699      	movgt	r9, r3
 800b588:	f04f 0a00 	mov.w	sl, #0
 800b58c:	f04f 0803 	mov.w	r8, #3
 800b590:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800b594:	f000 bfec 	b.w	800c570 <_svfprintf_r+0x13a8>
 800b598:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b59c:	4610      	mov	r0, r2
 800b59e:	4619      	mov	r1, r3
 800b5a0:	f7f5 faec 	bl	8000b7c <__aeabi_dcmpun>
 800b5a4:	4682      	mov	sl, r0
 800b5a6:	b140      	cbz	r0, 800b5ba <_svfprintf_r+0x3f2>
 800b5a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5aa:	4a6b      	ldr	r2, [pc, #428]	@ (800b758 <_svfprintf_r+0x590>)
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bfbc      	itt	lt
 800b5b0:	232d      	movlt	r3, #45	@ 0x2d
 800b5b2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800b5b6:	4b69      	ldr	r3, [pc, #420]	@ (800b75c <_svfprintf_r+0x594>)
 800b5b8:	e7df      	b.n	800b57a <_svfprintf_r+0x3b2>
 800b5ba:	9b06      	ldr	r3, [sp, #24]
 800b5bc:	2b61      	cmp	r3, #97	@ 0x61
 800b5be:	d025      	beq.n	800b60c <_svfprintf_r+0x444>
 800b5c0:	2b41      	cmp	r3, #65	@ 0x41
 800b5c2:	d125      	bne.n	800b610 <_svfprintf_r+0x448>
 800b5c4:	2358      	movs	r3, #88	@ 0x58
 800b5c6:	2230      	movs	r2, #48	@ 0x30
 800b5c8:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800b5cc:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800b5d0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800b5d4:	f045 0502 	orr.w	r5, r5, #2
 800b5d8:	f340 80a5 	ble.w	800b726 <_svfprintf_r+0x55e>
 800b5dc:	9803      	ldr	r0, [sp, #12]
 800b5de:	f108 0101 	add.w	r1, r8, #1
 800b5e2:	f7fe ffbf 	bl	800a564 <_malloc_r>
 800b5e6:	4681      	mov	r9, r0
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	f040 80a1 	bne.w	800b730 <_svfprintf_r+0x568>
 800b5ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5f6:	f8ab 300c 	strh.w	r3, [fp, #12]
 800b5fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b5fe:	065b      	lsls	r3, r3, #25
 800b600:	f53f ae04 	bmi.w	800b20c <_svfprintf_r+0x44>
 800b604:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b606:	b053      	add	sp, #332	@ 0x14c
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60c:	2378      	movs	r3, #120	@ 0x78
 800b60e:	e7da      	b.n	800b5c6 <_svfprintf_r+0x3fe>
 800b610:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b614:	f000 808e 	beq.w	800b734 <_svfprintf_r+0x56c>
 800b618:	9b06      	ldr	r3, [sp, #24]
 800b61a:	f023 0320 	bic.w	r3, r3, #32
 800b61e:	2b47      	cmp	r3, #71	@ 0x47
 800b620:	d105      	bne.n	800b62e <_svfprintf_r+0x466>
 800b622:	f1b8 0f00 	cmp.w	r8, #0
 800b626:	d102      	bne.n	800b62e <_svfprintf_r+0x466>
 800b628:	46c2      	mov	sl, r8
 800b62a:	f04f 0801 	mov.w	r8, #1
 800b62e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800b632:	9311      	str	r3, [sp, #68]	@ 0x44
 800b634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b636:	2b00      	cmp	r3, #0
 800b638:	da7f      	bge.n	800b73a <_svfprintf_r+0x572>
 800b63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b63c:	9314      	str	r3, [sp, #80]	@ 0x50
 800b63e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b640:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b644:	9315      	str	r3, [sp, #84]	@ 0x54
 800b646:	232d      	movs	r3, #45	@ 0x2d
 800b648:	931c      	str	r3, [sp, #112]	@ 0x70
 800b64a:	9b06      	ldr	r3, [sp, #24]
 800b64c:	f023 0320 	bic.w	r3, r3, #32
 800b650:	2b41      	cmp	r3, #65	@ 0x41
 800b652:	9308      	str	r3, [sp, #32]
 800b654:	f040 81e6 	bne.w	800ba24 <_svfprintf_r+0x85c>
 800b658:	a820      	add	r0, sp, #128	@ 0x80
 800b65a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800b65e:	f001 fb17 	bl	800cc90 <frexp>
 800b662:	2200      	movs	r2, #0
 800b664:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b668:	ec51 0b10 	vmov	r0, r1, d0
 800b66c:	f7f4 ffec 	bl	8000648 <__aeabi_dmul>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b678:	2200      	movs	r2, #0
 800b67a:	2300      	movs	r3, #0
 800b67c:	f7f5 fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 800b680:	b108      	cbz	r0, 800b686 <_svfprintf_r+0x4be>
 800b682:	2301      	movs	r3, #1
 800b684:	9320      	str	r3, [sp, #128]	@ 0x80
 800b686:	4a36      	ldr	r2, [pc, #216]	@ (800b760 <_svfprintf_r+0x598>)
 800b688:	4b36      	ldr	r3, [pc, #216]	@ (800b764 <_svfprintf_r+0x59c>)
 800b68a:	9906      	ldr	r1, [sp, #24]
 800b68c:	2961      	cmp	r1, #97	@ 0x61
 800b68e:	bf18      	it	ne
 800b690:	461a      	movne	r2, r3
 800b692:	9210      	str	r2, [sp, #64]	@ 0x40
 800b694:	f108 37ff 	add.w	r7, r8, #4294967295
 800b698:	464e      	mov	r6, r9
 800b69a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b69e:	4b32      	ldr	r3, [pc, #200]	@ (800b768 <_svfprintf_r+0x5a0>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f7f4 ffd1 	bl	8000648 <__aeabi_dmul>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6ae:	f7f5 fa7b 	bl	8000ba8 <__aeabi_d2iz>
 800b6b2:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b6b4:	f7f4 ff5e 	bl	8000574 <__aeabi_i2d>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c0:	f7f4 fe0a 	bl	80002d8 <__aeabi_dsub>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6d0:	5c9b      	ldrb	r3, [r3, r2]
 800b6d2:	f806 3b01 	strb.w	r3, [r6], #1
 800b6d6:	1c7a      	adds	r2, r7, #1
 800b6d8:	d006      	beq.n	800b6e8 <_svfprintf_r+0x520>
 800b6da:	1e7b      	subs	r3, r7, #1
 800b6dc:	931d      	str	r3, [sp, #116]	@ 0x74
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f7f5 fa19 	bl	8000b18 <__aeabi_dcmpeq>
 800b6e6:	b370      	cbz	r0, 800b746 <_svfprintf_r+0x57e>
 800b6e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6ec:	4b1f      	ldr	r3, [pc, #124]	@ (800b76c <_svfprintf_r+0x5a4>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f7f5 fa3a 	bl	8000b68 <__aeabi_dcmpgt>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d13b      	bne.n	800b770 <_svfprintf_r+0x5a8>
 800b6f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b76c <_svfprintf_r+0x5a4>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	f7f5 fa0a 	bl	8000b18 <__aeabi_dcmpeq>
 800b704:	b110      	cbz	r0, 800b70c <_svfprintf_r+0x544>
 800b706:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b708:	07db      	lsls	r3, r3, #31
 800b70a:	d431      	bmi.n	800b770 <_svfprintf_r+0x5a8>
 800b70c:	4633      	mov	r3, r6
 800b70e:	19f1      	adds	r1, r6, r7
 800b710:	2030      	movs	r0, #48	@ 0x30
 800b712:	1aca      	subs	r2, r1, r3
 800b714:	2a00      	cmp	r2, #0
 800b716:	f280 8182 	bge.w	800ba1e <_svfprintf_r+0x856>
 800b71a:	1c7b      	adds	r3, r7, #1
 800b71c:	3701      	adds	r7, #1
 800b71e:	bfb8      	it	lt
 800b720:	2300      	movlt	r3, #0
 800b722:	441e      	add	r6, r3
 800b724:	e038      	b.n	800b798 <_svfprintf_r+0x5d0>
 800b726:	f04f 0a00 	mov.w	sl, #0
 800b72a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800b72e:	e77e      	b.n	800b62e <_svfprintf_r+0x466>
 800b730:	4682      	mov	sl, r0
 800b732:	e77c      	b.n	800b62e <_svfprintf_r+0x466>
 800b734:	f04f 0806 	mov.w	r8, #6
 800b738:	e779      	b.n	800b62e <_svfprintf_r+0x466>
 800b73a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800b73e:	2300      	movs	r3, #0
 800b740:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800b744:	e780      	b.n	800b648 <_svfprintf_r+0x480>
 800b746:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800b748:	e7a7      	b.n	800b69a <_svfprintf_r+0x4d2>
 800b74a:	bf00      	nop
 800b74c:	7fefffff 	.word	0x7fefffff
 800b750:	080102c4 	.word	0x080102c4
 800b754:	080102c8 	.word	0x080102c8
 800b758:	080102cc 	.word	0x080102cc
 800b75c:	080102d0 	.word	0x080102d0
 800b760:	080102d4 	.word	0x080102d4
 800b764:	080102e5 	.word	0x080102e5
 800b768:	40300000 	.word	0x40300000
 800b76c:	3fe00000 	.word	0x3fe00000
 800b770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b772:	9624      	str	r6, [sp, #144]	@ 0x90
 800b774:	7bd9      	ldrb	r1, [r3, #15]
 800b776:	2030      	movs	r0, #48	@ 0x30
 800b778:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b77a:	1e53      	subs	r3, r2, #1
 800b77c:	9324      	str	r3, [sp, #144]	@ 0x90
 800b77e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800b782:	428b      	cmp	r3, r1
 800b784:	f000 8148 	beq.w	800ba18 <_svfprintf_r+0x850>
 800b788:	2b39      	cmp	r3, #57	@ 0x39
 800b78a:	bf0b      	itete	eq
 800b78c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800b78e:	3301      	addne	r3, #1
 800b790:	7a9b      	ldrbeq	r3, [r3, #10]
 800b792:	b2db      	uxtbne	r3, r3
 800b794:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b798:	eba6 0309 	sub.w	r3, r6, r9
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	9b08      	ldr	r3, [sp, #32]
 800b7a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b7a2:	2b47      	cmp	r3, #71	@ 0x47
 800b7a4:	f040 8187 	bne.w	800bab6 <_svfprintf_r+0x8ee>
 800b7a8:	1cf1      	adds	r1, r6, #3
 800b7aa:	db02      	blt.n	800b7b2 <_svfprintf_r+0x5ea>
 800b7ac:	4546      	cmp	r6, r8
 800b7ae:	f340 81a5 	ble.w	800bafc <_svfprintf_r+0x934>
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	3b02      	subs	r3, #2
 800b7b6:	9306      	str	r3, [sp, #24]
 800b7b8:	9906      	ldr	r1, [sp, #24]
 800b7ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800b7be:	f021 0120 	bic.w	r1, r1, #32
 800b7c2:	2941      	cmp	r1, #65	@ 0x41
 800b7c4:	bf08      	it	eq
 800b7c6:	320f      	addeq	r2, #15
 800b7c8:	f106 33ff 	add.w	r3, r6, #4294967295
 800b7cc:	bf06      	itte	eq
 800b7ce:	b2d2      	uxtbeq	r2, r2
 800b7d0:	2101      	moveq	r1, #1
 800b7d2:	2100      	movne	r1, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	9320      	str	r3, [sp, #128]	@ 0x80
 800b7d8:	bfb8      	it	lt
 800b7da:	f1c6 0301 	rsblt	r3, r6, #1
 800b7de:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800b7e2:	bfb4      	ite	lt
 800b7e4:	222d      	movlt	r2, #45	@ 0x2d
 800b7e6:	222b      	movge	r2, #43	@ 0x2b
 800b7e8:	2b09      	cmp	r3, #9
 800b7ea:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800b7ee:	f340 8178 	ble.w	800bae2 <_svfprintf_r+0x91a>
 800b7f2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800b7f6:	270a      	movs	r7, #10
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	fbb3 f6f7 	udiv	r6, r3, r7
 800b7fe:	fb07 3116 	mls	r1, r7, r6, r3
 800b802:	3130      	adds	r1, #48	@ 0x30
 800b804:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b808:	4619      	mov	r1, r3
 800b80a:	2963      	cmp	r1, #99	@ 0x63
 800b80c:	f100 30ff 	add.w	r0, r0, #4294967295
 800b810:	4633      	mov	r3, r6
 800b812:	dcf1      	bgt.n	800b7f8 <_svfprintf_r+0x630>
 800b814:	3330      	adds	r3, #48	@ 0x30
 800b816:	1e91      	subs	r1, r2, #2
 800b818:	f800 3c01 	strb.w	r3, [r0, #-1]
 800b81c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800b820:	460b      	mov	r3, r1
 800b822:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800b826:	4283      	cmp	r3, r0
 800b828:	f0c0 8156 	bcc.w	800bad8 <_svfprintf_r+0x910>
 800b82c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	4281      	cmp	r1, r0
 800b834:	bf88      	it	hi
 800b836:	2300      	movhi	r3, #0
 800b838:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800b83c:	441a      	add	r2, r3
 800b83e:	ab22      	add	r3, sp, #136	@ 0x88
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	9a04      	ldr	r2, [sp, #16]
 800b844:	9318      	str	r3, [sp, #96]	@ 0x60
 800b846:	2a01      	cmp	r2, #1
 800b848:	eb03 0802 	add.w	r8, r3, r2
 800b84c:	dc01      	bgt.n	800b852 <_svfprintf_r+0x68a>
 800b84e:	07ea      	lsls	r2, r5, #31
 800b850:	d501      	bpl.n	800b856 <_svfprintf_r+0x68e>
 800b852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b854:	4498      	add	r8, r3
 800b856:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800b85a:	2700      	movs	r7, #0
 800b85c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800b860:	9311      	str	r3, [sp, #68]	@ 0x44
 800b862:	9708      	str	r7, [sp, #32]
 800b864:	463e      	mov	r6, r7
 800b866:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f040 818f 	bne.w	800bb8c <_svfprintf_r+0x9c4>
 800b86e:	2300      	movs	r3, #0
 800b870:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b872:	9310      	str	r3, [sp, #64]	@ 0x40
 800b874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b876:	4543      	cmp	r3, r8
 800b878:	bfb8      	it	lt
 800b87a:	4643      	movlt	r3, r8
 800b87c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b87e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800b882:	b113      	cbz	r3, 800b88a <_svfprintf_r+0x6c2>
 800b884:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b886:	3301      	adds	r3, #1
 800b888:	9311      	str	r3, [sp, #68]	@ 0x44
 800b88a:	f015 0302 	ands.w	r3, r5, #2
 800b88e:	931c      	str	r3, [sp, #112]	@ 0x70
 800b890:	bf1e      	ittt	ne
 800b892:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800b894:	3302      	addne	r3, #2
 800b896:	9311      	strne	r3, [sp, #68]	@ 0x44
 800b898:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800b89c:	931d      	str	r3, [sp, #116]	@ 0x74
 800b89e:	d122      	bne.n	800b8e6 <_svfprintf_r+0x71e>
 800b8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8aa:	dd1c      	ble.n	800b8e6 <_svfprintf_r+0x71e>
 800b8ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b8ae:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800b8b2:	2810      	cmp	r0, #16
 800b8b4:	489e      	ldr	r0, [pc, #632]	@ (800bb30 <_svfprintf_r+0x968>)
 800b8b6:	6020      	str	r0, [r4, #0]
 800b8b8:	f102 0201 	add.w	r2, r2, #1
 800b8bc:	f104 0108 	add.w	r1, r4, #8
 800b8c0:	f300 8298 	bgt.w	800bdf4 <_svfprintf_r+0xc2c>
 800b8c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b8c6:	6060      	str	r0, [r4, #4]
 800b8c8:	4403      	add	r3, r0
 800b8ca:	2a07      	cmp	r2, #7
 800b8cc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b8d0:	f340 82a5 	ble.w	800be1e <_svfprintf_r+0xc56>
 800b8d4:	9803      	ldr	r0, [sp, #12]
 800b8d6:	aa26      	add	r2, sp, #152	@ 0x98
 800b8d8:	4659      	mov	r1, fp
 800b8da:	f002 fd80 	bl	800e3de <__ssprint_r>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f040 85ed 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800b8e4:	ac29      	add	r4, sp, #164	@ 0xa4
 800b8e6:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800b8ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b8ec:	b16a      	cbz	r2, 800b90a <_svfprintf_r+0x742>
 800b8ee:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b8fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b8fc:	6062      	str	r2, [r4, #4]
 800b8fe:	4413      	add	r3, r2
 800b900:	2b07      	cmp	r3, #7
 800b902:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b904:	f300 828d 	bgt.w	800be22 <_svfprintf_r+0xc5a>
 800b908:	3408      	adds	r4, #8
 800b90a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b90c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b90e:	b162      	cbz	r2, 800b92a <_svfprintf_r+0x762>
 800b910:	aa1f      	add	r2, sp, #124	@ 0x7c
 800b912:	6022      	str	r2, [r4, #0]
 800b914:	2202      	movs	r2, #2
 800b916:	4413      	add	r3, r2
 800b918:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b91a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b91c:	6062      	str	r2, [r4, #4]
 800b91e:	3301      	adds	r3, #1
 800b920:	2b07      	cmp	r3, #7
 800b922:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b924:	f300 8287 	bgt.w	800be36 <_svfprintf_r+0xc6e>
 800b928:	3408      	adds	r4, #8
 800b92a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b92c:	2b80      	cmp	r3, #128	@ 0x80
 800b92e:	d122      	bne.n	800b976 <_svfprintf_r+0x7ae>
 800b930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b932:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	2b00      	cmp	r3, #0
 800b938:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b93a:	dd1c      	ble.n	800b976 <_svfprintf_r+0x7ae>
 800b93c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b93e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800b942:	2810      	cmp	r0, #16
 800b944:	487b      	ldr	r0, [pc, #492]	@ (800bb34 <_svfprintf_r+0x96c>)
 800b946:	6020      	str	r0, [r4, #0]
 800b948:	f102 0201 	add.w	r2, r2, #1
 800b94c:	f104 0108 	add.w	r1, r4, #8
 800b950:	f300 827b 	bgt.w	800be4a <_svfprintf_r+0xc82>
 800b954:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b956:	6060      	str	r0, [r4, #4]
 800b958:	4403      	add	r3, r0
 800b95a:	2a07      	cmp	r2, #7
 800b95c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b960:	f340 8288 	ble.w	800be74 <_svfprintf_r+0xcac>
 800b964:	9803      	ldr	r0, [sp, #12]
 800b966:	aa26      	add	r2, sp, #152	@ 0x98
 800b968:	4659      	mov	r1, fp
 800b96a:	f002 fd38 	bl	800e3de <__ssprint_r>
 800b96e:	2800      	cmp	r0, #0
 800b970:	f040 85a5 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800b974:	ac29      	add	r4, sp, #164	@ 0xa4
 800b976:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b978:	eba3 0308 	sub.w	r3, r3, r8
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b980:	dd1c      	ble.n	800b9bc <_svfprintf_r+0x7f4>
 800b982:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b984:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800b988:	2810      	cmp	r0, #16
 800b98a:	486a      	ldr	r0, [pc, #424]	@ (800bb34 <_svfprintf_r+0x96c>)
 800b98c:	6020      	str	r0, [r4, #0]
 800b98e:	f102 0201 	add.w	r2, r2, #1
 800b992:	f104 0108 	add.w	r1, r4, #8
 800b996:	f300 826f 	bgt.w	800be78 <_svfprintf_r+0xcb0>
 800b99a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b99c:	6060      	str	r0, [r4, #4]
 800b99e:	4403      	add	r3, r0
 800b9a0:	2a07      	cmp	r2, #7
 800b9a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b9a6:	f340 827c 	ble.w	800bea2 <_svfprintf_r+0xcda>
 800b9aa:	9803      	ldr	r0, [sp, #12]
 800b9ac:	aa26      	add	r2, sp, #152	@ 0x98
 800b9ae:	4659      	mov	r1, fp
 800b9b0:	f002 fd15 	bl	800e3de <__ssprint_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f040 8582 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800b9ba:	ac29      	add	r4, sp, #164	@ 0xa4
 800b9bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b9be:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9c0:	05ea      	lsls	r2, r5, #23
 800b9c2:	f100 8275 	bmi.w	800beb0 <_svfprintf_r+0xce8>
 800b9c6:	4443      	add	r3, r8
 800b9c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b9ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	2b07      	cmp	r3, #7
 800b9d0:	e9c4 9800 	strd	r9, r8, [r4]
 800b9d4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b9d6:	f300 82b1 	bgt.w	800bf3c <_svfprintf_r+0xd74>
 800b9da:	3408      	adds	r4, #8
 800b9dc:	076a      	lsls	r2, r5, #29
 800b9de:	f100 8550 	bmi.w	800c482 <_svfprintf_r+0x12ba>
 800b9e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b9e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b9e8:	428a      	cmp	r2, r1
 800b9ea:	bfac      	ite	ge
 800b9ec:	189b      	addge	r3, r3, r2
 800b9ee:	185b      	addlt	r3, r3, r1
 800b9f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b9f4:	b13b      	cbz	r3, 800ba06 <_svfprintf_r+0x83e>
 800b9f6:	9803      	ldr	r0, [sp, #12]
 800b9f8:	aa26      	add	r2, sp, #152	@ 0x98
 800b9fa:	4659      	mov	r1, fp
 800b9fc:	f002 fcef 	bl	800e3de <__ssprint_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	f040 855c 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800ba06:	2300      	movs	r3, #0
 800ba08:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ba0a:	f1ba 0f00 	cmp.w	sl, #0
 800ba0e:	f040 8572 	bne.w	800c4f6 <_svfprintf_r+0x132e>
 800ba12:	9e07      	ldr	r6, [sp, #28]
 800ba14:	ac29      	add	r4, sp, #164	@ 0xa4
 800ba16:	e0c6      	b.n	800bba6 <_svfprintf_r+0x9de>
 800ba18:	f802 0c01 	strb.w	r0, [r2, #-1]
 800ba1c:	e6ac      	b.n	800b778 <_svfprintf_r+0x5b0>
 800ba1e:	f803 0b01 	strb.w	r0, [r3], #1
 800ba22:	e676      	b.n	800b712 <_svfprintf_r+0x54a>
 800ba24:	9b08      	ldr	r3, [sp, #32]
 800ba26:	2b46      	cmp	r3, #70	@ 0x46
 800ba28:	d005      	beq.n	800ba36 <_svfprintf_r+0x86e>
 800ba2a:	2b45      	cmp	r3, #69	@ 0x45
 800ba2c:	d11a      	bne.n	800ba64 <_svfprintf_r+0x89c>
 800ba2e:	f108 0601 	add.w	r6, r8, #1
 800ba32:	2102      	movs	r1, #2
 800ba34:	e001      	b.n	800ba3a <_svfprintf_r+0x872>
 800ba36:	4646      	mov	r6, r8
 800ba38:	2103      	movs	r1, #3
 800ba3a:	ab24      	add	r3, sp, #144	@ 0x90
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	ab21      	add	r3, sp, #132	@ 0x84
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800ba46:	ab20      	add	r3, sp, #128	@ 0x80
 800ba48:	9803      	ldr	r0, [sp, #12]
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	f001 fa20 	bl	800ce90 <_dtoa_r>
 800ba50:	9b08      	ldr	r3, [sp, #32]
 800ba52:	2b47      	cmp	r3, #71	@ 0x47
 800ba54:	4681      	mov	r9, r0
 800ba56:	d119      	bne.n	800ba8c <_svfprintf_r+0x8c4>
 800ba58:	07e8      	lsls	r0, r5, #31
 800ba5a:	d405      	bmi.n	800ba68 <_svfprintf_r+0x8a0>
 800ba5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba5e:	eba3 0309 	sub.w	r3, r3, r9
 800ba62:	e69b      	b.n	800b79c <_svfprintf_r+0x5d4>
 800ba64:	4646      	mov	r6, r8
 800ba66:	e7e4      	b.n	800ba32 <_svfprintf_r+0x86a>
 800ba68:	eb09 0706 	add.w	r7, r9, r6
 800ba6c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800ba70:	2200      	movs	r2, #0
 800ba72:	2300      	movs	r3, #0
 800ba74:	f7f5 f850 	bl	8000b18 <__aeabi_dcmpeq>
 800ba78:	b100      	cbz	r0, 800ba7c <_svfprintf_r+0x8b4>
 800ba7a:	9724      	str	r7, [sp, #144]	@ 0x90
 800ba7c:	2230      	movs	r2, #48	@ 0x30
 800ba7e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba80:	429f      	cmp	r7, r3
 800ba82:	d9eb      	bls.n	800ba5c <_svfprintf_r+0x894>
 800ba84:	1c59      	adds	r1, r3, #1
 800ba86:	9124      	str	r1, [sp, #144]	@ 0x90
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	e7f8      	b.n	800ba7e <_svfprintf_r+0x8b6>
 800ba8c:	9b08      	ldr	r3, [sp, #32]
 800ba8e:	2b46      	cmp	r3, #70	@ 0x46
 800ba90:	eb00 0706 	add.w	r7, r0, r6
 800ba94:	d1ea      	bne.n	800ba6c <_svfprintf_r+0x8a4>
 800ba96:	7803      	ldrb	r3, [r0, #0]
 800ba98:	2b30      	cmp	r3, #48	@ 0x30
 800ba9a:	d109      	bne.n	800bab0 <_svfprintf_r+0x8e8>
 800ba9c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800baa0:	2200      	movs	r2, #0
 800baa2:	2300      	movs	r3, #0
 800baa4:	f7f5 f838 	bl	8000b18 <__aeabi_dcmpeq>
 800baa8:	b910      	cbnz	r0, 800bab0 <_svfprintf_r+0x8e8>
 800baaa:	f1c6 0601 	rsb	r6, r6, #1
 800baae:	9620      	str	r6, [sp, #128]	@ 0x80
 800bab0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bab2:	441f      	add	r7, r3
 800bab4:	e7da      	b.n	800ba6c <_svfprintf_r+0x8a4>
 800bab6:	9b08      	ldr	r3, [sp, #32]
 800bab8:	2b46      	cmp	r3, #70	@ 0x46
 800baba:	f47f ae7d 	bne.w	800b7b8 <_svfprintf_r+0x5f0>
 800babe:	f005 0301 	and.w	r3, r5, #1
 800bac2:	2e00      	cmp	r6, #0
 800bac4:	ea43 0308 	orr.w	r3, r3, r8
 800bac8:	dd25      	ble.n	800bb16 <_svfprintf_r+0x94e>
 800baca:	b37b      	cbz	r3, 800bb2c <_svfprintf_r+0x964>
 800bacc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bace:	18f3      	adds	r3, r6, r3
 800bad0:	4498      	add	r8, r3
 800bad2:	2366      	movs	r3, #102	@ 0x66
 800bad4:	9306      	str	r3, [sp, #24]
 800bad6:	e033      	b.n	800bb40 <_svfprintf_r+0x978>
 800bad8:	f813 7b01 	ldrb.w	r7, [r3], #1
 800badc:	f806 7f01 	strb.w	r7, [r6, #1]!
 800bae0:	e6a1      	b.n	800b826 <_svfprintf_r+0x65e>
 800bae2:	b941      	cbnz	r1, 800baf6 <_svfprintf_r+0x92e>
 800bae4:	2230      	movs	r2, #48	@ 0x30
 800bae6:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800baea:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800baee:	3330      	adds	r3, #48	@ 0x30
 800baf0:	f802 3b01 	strb.w	r3, [r2], #1
 800baf4:	e6a3      	b.n	800b83e <_svfprintf_r+0x676>
 800baf6:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800bafa:	e7f8      	b.n	800baee <_svfprintf_r+0x926>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	429e      	cmp	r6, r3
 800bb00:	da0d      	bge.n	800bb1e <_svfprintf_r+0x956>
 800bb02:	9b04      	ldr	r3, [sp, #16]
 800bb04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb06:	2e00      	cmp	r6, #0
 800bb08:	eb03 0802 	add.w	r8, r3, r2
 800bb0c:	dc0c      	bgt.n	800bb28 <_svfprintf_r+0x960>
 800bb0e:	f1c6 0301 	rsb	r3, r6, #1
 800bb12:	4498      	add	r8, r3
 800bb14:	e008      	b.n	800bb28 <_svfprintf_r+0x960>
 800bb16:	b17b      	cbz	r3, 800bb38 <_svfprintf_r+0x970>
 800bb18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	e7d8      	b.n	800bad0 <_svfprintf_r+0x908>
 800bb1e:	07eb      	lsls	r3, r5, #31
 800bb20:	d521      	bpl.n	800bb66 <_svfprintf_r+0x99e>
 800bb22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb24:	eb06 0803 	add.w	r8, r6, r3
 800bb28:	2367      	movs	r3, #103	@ 0x67
 800bb2a:	e7d3      	b.n	800bad4 <_svfprintf_r+0x90c>
 800bb2c:	46b0      	mov	r8, r6
 800bb2e:	e7d0      	b.n	800bad2 <_svfprintf_r+0x90a>
 800bb30:	08010308 	.word	0x08010308
 800bb34:	080102f8 	.word	0x080102f8
 800bb38:	2366      	movs	r3, #102	@ 0x66
 800bb3a:	9306      	str	r3, [sp, #24]
 800bb3c:	f04f 0801 	mov.w	r8, #1
 800bb40:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800bb44:	9308      	str	r3, [sp, #32]
 800bb46:	d01f      	beq.n	800bb88 <_svfprintf_r+0x9c0>
 800bb48:	2700      	movs	r7, #0
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	9708      	str	r7, [sp, #32]
 800bb4e:	f77f ae8a 	ble.w	800b866 <_svfprintf_r+0x69e>
 800bb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2bff      	cmp	r3, #255	@ 0xff
 800bb58:	d107      	bne.n	800bb6a <_svfprintf_r+0x9a2>
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb5e:	443b      	add	r3, r7
 800bb60:	fb02 8803 	mla	r8, r2, r3, r8
 800bb64:	e67f      	b.n	800b866 <_svfprintf_r+0x69e>
 800bb66:	46b0      	mov	r8, r6
 800bb68:	e7de      	b.n	800bb28 <_svfprintf_r+0x960>
 800bb6a:	42b3      	cmp	r3, r6
 800bb6c:	daf5      	bge.n	800bb5a <_svfprintf_r+0x992>
 800bb6e:	1af6      	subs	r6, r6, r3
 800bb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb72:	785b      	ldrb	r3, [r3, #1]
 800bb74:	b133      	cbz	r3, 800bb84 <_svfprintf_r+0x9bc>
 800bb76:	9b08      	ldr	r3, [sp, #32]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	9308      	str	r3, [sp, #32]
 800bb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb7e:	3301      	adds	r3, #1
 800bb80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb82:	e7e6      	b.n	800bb52 <_svfprintf_r+0x98a>
 800bb84:	3701      	adds	r7, #1
 800bb86:	e7e4      	b.n	800bb52 <_svfprintf_r+0x98a>
 800bb88:	9f08      	ldr	r7, [sp, #32]
 800bb8a:	e66c      	b.n	800b866 <_svfprintf_r+0x69e>
 800bb8c:	232d      	movs	r3, #45	@ 0x2d
 800bb8e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bb92:	e66c      	b.n	800b86e <_svfprintf_r+0x6a6>
 800bb94:	06af      	lsls	r7, r5, #26
 800bb96:	d50a      	bpl.n	800bbae <_svfprintf_r+0x9e6>
 800bb98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb9a:	6833      	ldr	r3, [r6, #0]
 800bb9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb9e:	17d2      	asrs	r2, r2, #31
 800bba0:	e9c3 1200 	strd	r1, r2, [r3]
 800bba4:	3604      	adds	r6, #4
 800bba6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800bbaa:	f7ff bb46 	b.w	800b23a <_svfprintf_r+0x72>
 800bbae:	06e8      	lsls	r0, r5, #27
 800bbb0:	d503      	bpl.n	800bbba <_svfprintf_r+0x9f2>
 800bbb2:	6833      	ldr	r3, [r6, #0]
 800bbb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	e7f4      	b.n	800bba4 <_svfprintf_r+0x9dc>
 800bbba:	0669      	lsls	r1, r5, #25
 800bbbc:	d503      	bpl.n	800bbc6 <_svfprintf_r+0x9fe>
 800bbbe:	6833      	ldr	r3, [r6, #0]
 800bbc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbc2:	801a      	strh	r2, [r3, #0]
 800bbc4:	e7ee      	b.n	800bba4 <_svfprintf_r+0x9dc>
 800bbc6:	05aa      	lsls	r2, r5, #22
 800bbc8:	d5f3      	bpl.n	800bbb2 <_svfprintf_r+0x9ea>
 800bbca:	6833      	ldr	r3, [r6, #0]
 800bbcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbce:	701a      	strb	r2, [r3, #0]
 800bbd0:	e7e8      	b.n	800bba4 <_svfprintf_r+0x9dc>
 800bbd2:	f045 0510 	orr.w	r5, r5, #16
 800bbd6:	f015 0320 	ands.w	r3, r5, #32
 800bbda:	d020      	beq.n	800bc1e <_svfprintf_r+0xa56>
 800bbdc:	3607      	adds	r6, #7
 800bbde:	f026 0307 	bic.w	r3, r6, #7
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	685f      	ldr	r7, [r3, #4]
 800bbe6:	f852 6b08 	ldr.w	r6, [r2], #8
 800bbea:	9207      	str	r2, [sp, #28]
 800bbec:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800bbf8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bbfc:	f000 848c 	beq.w	800c518 <_svfprintf_r+0x1350>
 800bc00:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800bc04:	9208      	str	r2, [sp, #32]
 800bc06:	ea56 0207 	orrs.w	r2, r6, r7
 800bc0a:	f040 848a 	bne.w	800c522 <_svfprintf_r+0x135a>
 800bc0e:	f1b8 0f00 	cmp.w	r8, #0
 800bc12:	f000 80db 	beq.w	800bdcc <_svfprintf_r+0xc04>
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	f040 8486 	bne.w	800c528 <_svfprintf_r+0x1360>
 800bc1c:	e083      	b.n	800bd26 <_svfprintf_r+0xb5e>
 800bc1e:	4632      	mov	r2, r6
 800bc20:	f015 0710 	ands.w	r7, r5, #16
 800bc24:	f852 6b04 	ldr.w	r6, [r2], #4
 800bc28:	9207      	str	r2, [sp, #28]
 800bc2a:	d001      	beq.n	800bc30 <_svfprintf_r+0xa68>
 800bc2c:	461f      	mov	r7, r3
 800bc2e:	e7dd      	b.n	800bbec <_svfprintf_r+0xa24>
 800bc30:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800bc34:	d001      	beq.n	800bc3a <_svfprintf_r+0xa72>
 800bc36:	b2b6      	uxth	r6, r6
 800bc38:	e7d8      	b.n	800bbec <_svfprintf_r+0xa24>
 800bc3a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800bc3e:	d0d5      	beq.n	800bbec <_svfprintf_r+0xa24>
 800bc40:	b2f6      	uxtb	r6, r6
 800bc42:	e7f3      	b.n	800bc2c <_svfprintf_r+0xa64>
 800bc44:	4633      	mov	r3, r6
 800bc46:	2278      	movs	r2, #120	@ 0x78
 800bc48:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc4c:	9307      	str	r3, [sp, #28]
 800bc4e:	f647 0330 	movw	r3, #30768	@ 0x7830
 800bc52:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800bc56:	4b94      	ldr	r3, [pc, #592]	@ (800bea8 <_svfprintf_r+0xce0>)
 800bc58:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc5a:	2700      	movs	r7, #0
 800bc5c:	f045 0502 	orr.w	r5, r5, #2
 800bc60:	2302      	movs	r3, #2
 800bc62:	9206      	str	r2, [sp, #24]
 800bc64:	e7c5      	b.n	800bbf2 <_svfprintf_r+0xa2a>
 800bc66:	4633      	mov	r3, r6
 800bc68:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bc6c:	f853 9b04 	ldr.w	r9, [r3], #4
 800bc70:	9307      	str	r3, [sp, #28]
 800bc72:	f04f 0600 	mov.w	r6, #0
 800bc76:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800bc7a:	d00f      	beq.n	800bc9c <_svfprintf_r+0xad4>
 800bc7c:	4642      	mov	r2, r8
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4648      	mov	r0, r9
 800bc82:	f7f4 fad5 	bl	8000230 <memchr>
 800bc86:	4682      	mov	sl, r0
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	f43f ac81 	beq.w	800b590 <_svfprintf_r+0x3c8>
 800bc8e:	eba0 0809 	sub.w	r8, r0, r9
 800bc92:	46b2      	mov	sl, r6
 800bc94:	9610      	str	r6, [sp, #64]	@ 0x40
 800bc96:	4637      	mov	r7, r6
 800bc98:	9608      	str	r6, [sp, #32]
 800bc9a:	e5eb      	b.n	800b874 <_svfprintf_r+0x6ac>
 800bc9c:	4648      	mov	r0, r9
 800bc9e:	f7f4 fabf 	bl	8000220 <strlen>
 800bca2:	46b2      	mov	sl, r6
 800bca4:	4680      	mov	r8, r0
 800bca6:	e473      	b.n	800b590 <_svfprintf_r+0x3c8>
 800bca8:	f045 0510 	orr.w	r5, r5, #16
 800bcac:	f015 0320 	ands.w	r3, r5, #32
 800bcb0:	d009      	beq.n	800bcc6 <_svfprintf_r+0xafe>
 800bcb2:	3607      	adds	r6, #7
 800bcb4:	f026 0307 	bic.w	r3, r6, #7
 800bcb8:	461a      	mov	r2, r3
 800bcba:	685f      	ldr	r7, [r3, #4]
 800bcbc:	f852 6b08 	ldr.w	r6, [r2], #8
 800bcc0:	9207      	str	r2, [sp, #28]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e795      	b.n	800bbf2 <_svfprintf_r+0xa2a>
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	f015 0710 	ands.w	r7, r5, #16
 800bccc:	f852 6b04 	ldr.w	r6, [r2], #4
 800bcd0:	9207      	str	r2, [sp, #28]
 800bcd2:	d001      	beq.n	800bcd8 <_svfprintf_r+0xb10>
 800bcd4:	461f      	mov	r7, r3
 800bcd6:	e7f4      	b.n	800bcc2 <_svfprintf_r+0xafa>
 800bcd8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800bcdc:	d001      	beq.n	800bce2 <_svfprintf_r+0xb1a>
 800bcde:	b2b6      	uxth	r6, r6
 800bce0:	e7ef      	b.n	800bcc2 <_svfprintf_r+0xafa>
 800bce2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800bce6:	d0ec      	beq.n	800bcc2 <_svfprintf_r+0xafa>
 800bce8:	b2f6      	uxtb	r6, r6
 800bcea:	e7f3      	b.n	800bcd4 <_svfprintf_r+0xb0c>
 800bcec:	4b6f      	ldr	r3, [pc, #444]	@ (800beac <_svfprintf_r+0xce4>)
 800bcee:	f7ff bb39 	b.w	800b364 <_svfprintf_r+0x19c>
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	f015 0710 	ands.w	r7, r5, #16
 800bcf8:	f852 6b04 	ldr.w	r6, [r2], #4
 800bcfc:	9207      	str	r2, [sp, #28]
 800bcfe:	d002      	beq.n	800bd06 <_svfprintf_r+0xb3e>
 800bd00:	461f      	mov	r7, r3
 800bd02:	f7ff bb3c 	b.w	800b37e <_svfprintf_r+0x1b6>
 800bd06:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800bd0a:	d002      	beq.n	800bd12 <_svfprintf_r+0xb4a>
 800bd0c:	b2b6      	uxth	r6, r6
 800bd0e:	f7ff bb36 	b.w	800b37e <_svfprintf_r+0x1b6>
 800bd12:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800bd16:	f43f ab32 	beq.w	800b37e <_svfprintf_r+0x1b6>
 800bd1a:	b2f6      	uxtb	r6, r6
 800bd1c:	e7f0      	b.n	800bd00 <_svfprintf_r+0xb38>
 800bd1e:	2e0a      	cmp	r6, #10
 800bd20:	f177 0300 	sbcs.w	r3, r7, #0
 800bd24:	d207      	bcs.n	800bd36 <_svfprintf_r+0xb6e>
 800bd26:	3630      	adds	r6, #48	@ 0x30
 800bd28:	b2f6      	uxtb	r6, r6
 800bd2a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800bd2e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800bd32:	f000 bc15 	b.w	800c560 <_svfprintf_r+0x1398>
 800bd36:	2300      	movs	r3, #0
 800bd38:	9304      	str	r3, [sp, #16]
 800bd3a:	9b08      	ldr	r3, [sp, #32]
 800bd3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd40:	ad52      	add	r5, sp, #328	@ 0x148
 800bd42:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd44:	220a      	movs	r2, #10
 800bd46:	2300      	movs	r3, #0
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 ffc4 	bl	8000cd8 <__aeabi_uldivmod>
 800bd50:	9b04      	ldr	r3, [sp, #16]
 800bd52:	9011      	str	r0, [sp, #68]	@ 0x44
 800bd54:	3301      	adds	r3, #1
 800bd56:	9304      	str	r3, [sp, #16]
 800bd58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd5a:	3230      	adds	r2, #48	@ 0x30
 800bd5c:	468a      	mov	sl, r1
 800bd5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800bd62:	f805 2c01 	strb.w	r2, [r5, #-1]
 800bd66:	b1d3      	cbz	r3, 800bd9e <_svfprintf_r+0xbd6>
 800bd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d115      	bne.n	800bd9e <_svfprintf_r+0xbd6>
 800bd72:	2aff      	cmp	r2, #255	@ 0xff
 800bd74:	d013      	beq.n	800bd9e <_svfprintf_r+0xbd6>
 800bd76:	2e0a      	cmp	r6, #10
 800bd78:	f177 0300 	sbcs.w	r3, r7, #0
 800bd7c:	d30f      	bcc.n	800bd9e <_svfprintf_r+0xbd6>
 800bd7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd80:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bd82:	eba9 0903 	sub.w	r9, r9, r3
 800bd86:	461a      	mov	r2, r3
 800bd88:	4648      	mov	r0, r9
 800bd8a:	f000 ff1f 	bl	800cbcc <strncpy>
 800bd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd90:	785b      	ldrb	r3, [r3, #1]
 800bd92:	b11b      	cbz	r3, 800bd9c <_svfprintf_r+0xbd4>
 800bd94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd96:	3301      	adds	r3, #1
 800bd98:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	2e0a      	cmp	r6, #10
 800bda0:	f177 0700 	sbcs.w	r7, r7, #0
 800bda4:	f0c0 83dc 	bcc.w	800c560 <_svfprintf_r+0x1398>
 800bda8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bdaa:	4657      	mov	r7, sl
 800bdac:	464d      	mov	r5, r9
 800bdae:	e7c9      	b.n	800bd44 <_svfprintf_r+0xb7c>
 800bdb0:	f006 030f 	and.w	r3, r6, #15
 800bdb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bdb6:	0936      	lsrs	r6, r6, #4
 800bdb8:	5cd3      	ldrb	r3, [r2, r3]
 800bdba:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800bdbe:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800bdc2:	093f      	lsrs	r7, r7, #4
 800bdc4:	ea56 0307 	orrs.w	r3, r6, r7
 800bdc8:	d1f2      	bne.n	800bdb0 <_svfprintf_r+0xbe8>
 800bdca:	e3c9      	b.n	800c560 <_svfprintf_r+0x1398>
 800bdcc:	b91b      	cbnz	r3, 800bdd6 <_svfprintf_r+0xc0e>
 800bdce:	07e9      	lsls	r1, r5, #31
 800bdd0:	d501      	bpl.n	800bdd6 <_svfprintf_r+0xc0e>
 800bdd2:	2630      	movs	r6, #48	@ 0x30
 800bdd4:	e7a9      	b.n	800bd2a <_svfprintf_r+0xb62>
 800bdd6:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800bdda:	e3c1      	b.n	800c560 <_svfprintf_r+0x1398>
 800bddc:	9b06      	ldr	r3, [sp, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f000 838f 	beq.w	800c502 <_svfprintf_r+0x133a>
 800bde4:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800bde8:	2300      	movs	r3, #0
 800bdea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bdee:	9607      	str	r6, [sp, #28]
 800bdf0:	f7ff bb63 	b.w	800b4ba <_svfprintf_r+0x2f2>
 800bdf4:	2010      	movs	r0, #16
 800bdf6:	4403      	add	r3, r0
 800bdf8:	2a07      	cmp	r2, #7
 800bdfa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800bdfe:	6060      	str	r0, [r4, #4]
 800be00:	dd08      	ble.n	800be14 <_svfprintf_r+0xc4c>
 800be02:	9803      	ldr	r0, [sp, #12]
 800be04:	aa26      	add	r2, sp, #152	@ 0x98
 800be06:	4659      	mov	r1, fp
 800be08:	f002 fae9 	bl	800e3de <__ssprint_r>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	f040 8356 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800be12:	a929      	add	r1, sp, #164	@ 0xa4
 800be14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be16:	3b10      	subs	r3, #16
 800be18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be1a:	460c      	mov	r4, r1
 800be1c:	e546      	b.n	800b8ac <_svfprintf_r+0x6e4>
 800be1e:	460c      	mov	r4, r1
 800be20:	e561      	b.n	800b8e6 <_svfprintf_r+0x71e>
 800be22:	9803      	ldr	r0, [sp, #12]
 800be24:	aa26      	add	r2, sp, #152	@ 0x98
 800be26:	4659      	mov	r1, fp
 800be28:	f002 fad9 	bl	800e3de <__ssprint_r>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	f040 8346 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800be32:	ac29      	add	r4, sp, #164	@ 0xa4
 800be34:	e569      	b.n	800b90a <_svfprintf_r+0x742>
 800be36:	9803      	ldr	r0, [sp, #12]
 800be38:	aa26      	add	r2, sp, #152	@ 0x98
 800be3a:	4659      	mov	r1, fp
 800be3c:	f002 facf 	bl	800e3de <__ssprint_r>
 800be40:	2800      	cmp	r0, #0
 800be42:	f040 833c 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800be46:	ac29      	add	r4, sp, #164	@ 0xa4
 800be48:	e56f      	b.n	800b92a <_svfprintf_r+0x762>
 800be4a:	2010      	movs	r0, #16
 800be4c:	4403      	add	r3, r0
 800be4e:	2a07      	cmp	r2, #7
 800be50:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800be54:	6060      	str	r0, [r4, #4]
 800be56:	dd08      	ble.n	800be6a <_svfprintf_r+0xca2>
 800be58:	9803      	ldr	r0, [sp, #12]
 800be5a:	aa26      	add	r2, sp, #152	@ 0x98
 800be5c:	4659      	mov	r1, fp
 800be5e:	f002 fabe 	bl	800e3de <__ssprint_r>
 800be62:	2800      	cmp	r0, #0
 800be64:	f040 832b 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800be68:	a929      	add	r1, sp, #164	@ 0xa4
 800be6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be6c:	3b10      	subs	r3, #16
 800be6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be70:	460c      	mov	r4, r1
 800be72:	e563      	b.n	800b93c <_svfprintf_r+0x774>
 800be74:	460c      	mov	r4, r1
 800be76:	e57e      	b.n	800b976 <_svfprintf_r+0x7ae>
 800be78:	2010      	movs	r0, #16
 800be7a:	4403      	add	r3, r0
 800be7c:	2a07      	cmp	r2, #7
 800be7e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800be82:	6060      	str	r0, [r4, #4]
 800be84:	dd08      	ble.n	800be98 <_svfprintf_r+0xcd0>
 800be86:	9803      	ldr	r0, [sp, #12]
 800be88:	aa26      	add	r2, sp, #152	@ 0x98
 800be8a:	4659      	mov	r1, fp
 800be8c:	f002 faa7 	bl	800e3de <__ssprint_r>
 800be90:	2800      	cmp	r0, #0
 800be92:	f040 8314 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800be96:	a929      	add	r1, sp, #164	@ 0xa4
 800be98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be9a:	3b10      	subs	r3, #16
 800be9c:	9310      	str	r3, [sp, #64]	@ 0x40
 800be9e:	460c      	mov	r4, r1
 800bea0:	e56f      	b.n	800b982 <_svfprintf_r+0x7ba>
 800bea2:	460c      	mov	r4, r1
 800bea4:	e58a      	b.n	800b9bc <_svfprintf_r+0x7f4>
 800bea6:	bf00      	nop
 800bea8:	080102d4 	.word	0x080102d4
 800beac:	080102e5 	.word	0x080102e5
 800beb0:	9b06      	ldr	r3, [sp, #24]
 800beb2:	2b65      	cmp	r3, #101	@ 0x65
 800beb4:	f340 8246 	ble.w	800c344 <_svfprintf_r+0x117c>
 800beb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bebc:	2200      	movs	r2, #0
 800bebe:	2300      	movs	r3, #0
 800bec0:	f7f4 fe2a 	bl	8000b18 <__aeabi_dcmpeq>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d06a      	beq.n	800bf9e <_svfprintf_r+0xdd6>
 800bec8:	4b73      	ldr	r3, [pc, #460]	@ (800c098 <_svfprintf_r+0xed0>)
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	2301      	movs	r3, #1
 800bece:	6063      	str	r3, [r4, #4]
 800bed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bed2:	3301      	adds	r3, #1
 800bed4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800bed6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bed8:	3301      	adds	r3, #1
 800beda:	2b07      	cmp	r3, #7
 800bedc:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bede:	dc37      	bgt.n	800bf50 <_svfprintf_r+0xd88>
 800bee0:	3408      	adds	r4, #8
 800bee2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bee4:	9a04      	ldr	r2, [sp, #16]
 800bee6:	4293      	cmp	r3, r2
 800bee8:	db02      	blt.n	800bef0 <_svfprintf_r+0xd28>
 800beea:	07ef      	lsls	r7, r5, #31
 800beec:	f57f ad76 	bpl.w	800b9dc <_svfprintf_r+0x814>
 800bef0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bef6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bef8:	6063      	str	r3, [r4, #4]
 800befa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800befc:	4413      	add	r3, r2
 800befe:	9328      	str	r3, [sp, #160]	@ 0xa0
 800bf00:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bf02:	3301      	adds	r3, #1
 800bf04:	2b07      	cmp	r3, #7
 800bf06:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bf08:	dc2c      	bgt.n	800bf64 <_svfprintf_r+0xd9c>
 800bf0a:	3408      	adds	r4, #8
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	1e5e      	subs	r6, r3, #1
 800bf10:	2e00      	cmp	r6, #0
 800bf12:	f77f ad63 	ble.w	800b9dc <_svfprintf_r+0x814>
 800bf16:	4f61      	ldr	r7, [pc, #388]	@ (800c09c <_svfprintf_r+0xed4>)
 800bf18:	f04f 0810 	mov.w	r8, #16
 800bf1c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800bf20:	2e10      	cmp	r6, #16
 800bf22:	f103 0301 	add.w	r3, r3, #1
 800bf26:	f104 0108 	add.w	r1, r4, #8
 800bf2a:	6027      	str	r7, [r4, #0]
 800bf2c:	dc24      	bgt.n	800bf78 <_svfprintf_r+0xdb0>
 800bf2e:	6066      	str	r6, [r4, #4]
 800bf30:	2b07      	cmp	r3, #7
 800bf32:	4416      	add	r6, r2
 800bf34:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800bf38:	f340 82a0 	ble.w	800c47c <_svfprintf_r+0x12b4>
 800bf3c:	9803      	ldr	r0, [sp, #12]
 800bf3e:	aa26      	add	r2, sp, #152	@ 0x98
 800bf40:	4659      	mov	r1, fp
 800bf42:	f002 fa4c 	bl	800e3de <__ssprint_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f040 82b9 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800bf4c:	ac29      	add	r4, sp, #164	@ 0xa4
 800bf4e:	e545      	b.n	800b9dc <_svfprintf_r+0x814>
 800bf50:	9803      	ldr	r0, [sp, #12]
 800bf52:	aa26      	add	r2, sp, #152	@ 0x98
 800bf54:	4659      	mov	r1, fp
 800bf56:	f002 fa42 	bl	800e3de <__ssprint_r>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	f040 82af 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800bf60:	ac29      	add	r4, sp, #164	@ 0xa4
 800bf62:	e7be      	b.n	800bee2 <_svfprintf_r+0xd1a>
 800bf64:	9803      	ldr	r0, [sp, #12]
 800bf66:	aa26      	add	r2, sp, #152	@ 0x98
 800bf68:	4659      	mov	r1, fp
 800bf6a:	f002 fa38 	bl	800e3de <__ssprint_r>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f040 82a5 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800bf74:	ac29      	add	r4, sp, #164	@ 0xa4
 800bf76:	e7c9      	b.n	800bf0c <_svfprintf_r+0xd44>
 800bf78:	3210      	adds	r2, #16
 800bf7a:	2b07      	cmp	r3, #7
 800bf7c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800bf80:	f8c4 8004 	str.w	r8, [r4, #4]
 800bf84:	dd08      	ble.n	800bf98 <_svfprintf_r+0xdd0>
 800bf86:	9803      	ldr	r0, [sp, #12]
 800bf88:	aa26      	add	r2, sp, #152	@ 0x98
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	f002 fa27 	bl	800e3de <__ssprint_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f040 8294 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800bf96:	a929      	add	r1, sp, #164	@ 0xa4
 800bf98:	3e10      	subs	r6, #16
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	e7be      	b.n	800bf1c <_svfprintf_r+0xd54>
 800bf9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc7d      	bgt.n	800c0a0 <_svfprintf_r+0xed8>
 800bfa4:	4b3c      	ldr	r3, [pc, #240]	@ (800c098 <_svfprintf_r+0xed0>)
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800bfb2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	2b07      	cmp	r3, #7
 800bfb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bfba:	dc46      	bgt.n	800c04a <_svfprintf_r+0xe82>
 800bfbc:	3408      	adds	r4, #8
 800bfbe:	9904      	ldr	r1, [sp, #16]
 800bfc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfc2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800bfc4:	430b      	orrs	r3, r1
 800bfc6:	f005 0101 	and.w	r1, r5, #1
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	f43f ad06 	beq.w	800b9dc <_svfprintf_r+0x814>
 800bfd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfd6:	6063      	str	r3, [r4, #4]
 800bfd8:	441a      	add	r2, r3
 800bfda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800bfdc:	9228      	str	r2, [sp, #160]	@ 0xa0
 800bfde:	3301      	adds	r3, #1
 800bfe0:	2b07      	cmp	r3, #7
 800bfe2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bfe4:	dc3b      	bgt.n	800c05e <_svfprintf_r+0xe96>
 800bfe6:	f104 0308 	add.w	r3, r4, #8
 800bfea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	da1b      	bge.n	800c028 <_svfprintf_r+0xe60>
 800bff0:	4f2a      	ldr	r7, [pc, #168]	@ (800c09c <_svfprintf_r+0xed4>)
 800bff2:	4276      	negs	r6, r6
 800bff4:	461a      	mov	r2, r3
 800bff6:	2410      	movs	r4, #16
 800bff8:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800bffc:	2e10      	cmp	r6, #16
 800bffe:	f101 0101 	add.w	r1, r1, #1
 800c002:	f103 0308 	add.w	r3, r3, #8
 800c006:	6017      	str	r7, [r2, #0]
 800c008:	dc33      	bgt.n	800c072 <_svfprintf_r+0xeaa>
 800c00a:	6056      	str	r6, [r2, #4]
 800c00c:	2907      	cmp	r1, #7
 800c00e:	4406      	add	r6, r0
 800c010:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800c014:	dd08      	ble.n	800c028 <_svfprintf_r+0xe60>
 800c016:	9803      	ldr	r0, [sp, #12]
 800c018:	aa26      	add	r2, sp, #152	@ 0x98
 800c01a:	4659      	mov	r1, fp
 800c01c:	f002 f9df 	bl	800e3de <__ssprint_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	f040 824c 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c026:	ab29      	add	r3, sp, #164	@ 0xa4
 800c028:	9a04      	ldr	r2, [sp, #16]
 800c02a:	9904      	ldr	r1, [sp, #16]
 800c02c:	605a      	str	r2, [r3, #4]
 800c02e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c030:	f8c3 9000 	str.w	r9, [r3]
 800c034:	440a      	add	r2, r1
 800c036:	9228      	str	r2, [sp, #160]	@ 0xa0
 800c038:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800c03a:	3201      	adds	r2, #1
 800c03c:	2a07      	cmp	r2, #7
 800c03e:	9227      	str	r2, [sp, #156]	@ 0x9c
 800c040:	f73f af7c 	bgt.w	800bf3c <_svfprintf_r+0xd74>
 800c044:	f103 0408 	add.w	r4, r3, #8
 800c048:	e4c8      	b.n	800b9dc <_svfprintf_r+0x814>
 800c04a:	9803      	ldr	r0, [sp, #12]
 800c04c:	aa26      	add	r2, sp, #152	@ 0x98
 800c04e:	4659      	mov	r1, fp
 800c050:	f002 f9c5 	bl	800e3de <__ssprint_r>
 800c054:	2800      	cmp	r0, #0
 800c056:	f040 8232 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c05a:	ac29      	add	r4, sp, #164	@ 0xa4
 800c05c:	e7af      	b.n	800bfbe <_svfprintf_r+0xdf6>
 800c05e:	9803      	ldr	r0, [sp, #12]
 800c060:	aa26      	add	r2, sp, #152	@ 0x98
 800c062:	4659      	mov	r1, fp
 800c064:	f002 f9bb 	bl	800e3de <__ssprint_r>
 800c068:	2800      	cmp	r0, #0
 800c06a:	f040 8228 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c06e:	ab29      	add	r3, sp, #164	@ 0xa4
 800c070:	e7bb      	b.n	800bfea <_svfprintf_r+0xe22>
 800c072:	3010      	adds	r0, #16
 800c074:	2907      	cmp	r1, #7
 800c076:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800c07a:	6054      	str	r4, [r2, #4]
 800c07c:	dd08      	ble.n	800c090 <_svfprintf_r+0xec8>
 800c07e:	9803      	ldr	r0, [sp, #12]
 800c080:	aa26      	add	r2, sp, #152	@ 0x98
 800c082:	4659      	mov	r1, fp
 800c084:	f002 f9ab 	bl	800e3de <__ssprint_r>
 800c088:	2800      	cmp	r0, #0
 800c08a:	f040 8218 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c08e:	ab29      	add	r3, sp, #164	@ 0xa4
 800c090:	3e10      	subs	r6, #16
 800c092:	461a      	mov	r2, r3
 800c094:	e7b0      	b.n	800bff8 <_svfprintf_r+0xe30>
 800c096:	bf00      	nop
 800c098:	080102f6 	.word	0x080102f6
 800c09c:	080102f8 	.word	0x080102f8
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	444b      	add	r3, r9
 800c0a4:	9306      	str	r3, [sp, #24]
 800c0a6:	9b04      	ldr	r3, [sp, #16]
 800c0a8:	42b3      	cmp	r3, r6
 800c0aa:	bfa8      	it	ge
 800c0ac:	4633      	movge	r3, r6
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	4698      	mov	r8, r3
 800c0b2:	dd0b      	ble.n	800c0cc <_svfprintf_r+0xf04>
 800c0b4:	e9c4 9300 	strd	r9, r3, [r4]
 800c0b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0ba:	4443      	add	r3, r8
 800c0bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c0be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	2b07      	cmp	r3, #7
 800c0c4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c0c6:	f300 8089 	bgt.w	800c1dc <_svfprintf_r+0x1014>
 800c0ca:	3408      	adds	r4, #8
 800c0cc:	4643      	mov	r3, r8
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	bfac      	ite	ge
 800c0d2:	eba6 0808 	subge.w	r8, r6, r8
 800c0d6:	46b0      	movlt	r8, r6
 800c0d8:	f1b8 0f00 	cmp.w	r8, #0
 800c0dc:	dd1b      	ble.n	800c116 <_svfprintf_r+0xf4e>
 800c0de:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800c0e2:	4897      	ldr	r0, [pc, #604]	@ (800c340 <_svfprintf_r+0x1178>)
 800c0e4:	6020      	str	r0, [r4, #0]
 800c0e6:	f1b8 0f10 	cmp.w	r8, #16
 800c0ea:	f102 0201 	add.w	r2, r2, #1
 800c0ee:	f104 0108 	add.w	r1, r4, #8
 800c0f2:	dc7d      	bgt.n	800c1f0 <_svfprintf_r+0x1028>
 800c0f4:	4443      	add	r3, r8
 800c0f6:	2a07      	cmp	r2, #7
 800c0f8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c0fc:	f8c4 8004 	str.w	r8, [r4, #4]
 800c100:	f340 808a 	ble.w	800c218 <_svfprintf_r+0x1050>
 800c104:	9803      	ldr	r0, [sp, #12]
 800c106:	aa26      	add	r2, sp, #152	@ 0x98
 800c108:	4659      	mov	r1, fp
 800c10a:	f002 f968 	bl	800e3de <__ssprint_r>
 800c10e:	2800      	cmp	r0, #0
 800c110:	f040 81d5 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c114:	ac29      	add	r4, sp, #164	@ 0xa4
 800c116:	eb09 0806 	add.w	r8, r9, r6
 800c11a:	056e      	lsls	r6, r5, #21
 800c11c:	d508      	bpl.n	800c130 <_svfprintf_r+0xf68>
 800c11e:	9b08      	ldr	r3, [sp, #32]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d17b      	bne.n	800c21c <_svfprintf_r+0x1054>
 800c124:	2f00      	cmp	r7, #0
 800c126:	d17b      	bne.n	800c220 <_svfprintf_r+0x1058>
 800c128:	9b06      	ldr	r3, [sp, #24]
 800c12a:	4598      	cmp	r8, r3
 800c12c:	bf28      	it	cs
 800c12e:	4698      	movcs	r8, r3
 800c130:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c132:	9a04      	ldr	r2, [sp, #16]
 800c134:	4293      	cmp	r3, r2
 800c136:	db01      	blt.n	800c13c <_svfprintf_r+0xf74>
 800c138:	07e8      	lsls	r0, r5, #31
 800c13a:	d50e      	bpl.n	800c15a <_svfprintf_r+0xf92>
 800c13c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c142:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c144:	6063      	str	r3, [r4, #4]
 800c146:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c148:	4413      	add	r3, r2
 800c14a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c14c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c14e:	3301      	adds	r3, #1
 800c150:	2b07      	cmp	r3, #7
 800c152:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c154:	f300 80df 	bgt.w	800c316 <_svfprintf_r+0x114e>
 800c158:	3408      	adds	r4, #8
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800c15e:	1bdf      	subs	r7, r3, r7
 800c160:	9b06      	ldr	r3, [sp, #24]
 800c162:	eba3 0308 	sub.w	r3, r3, r8
 800c166:	429f      	cmp	r7, r3
 800c168:	bfa8      	it	ge
 800c16a:	461f      	movge	r7, r3
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c170:	dd0a      	ble.n	800c188 <_svfprintf_r+0xfc0>
 800c172:	443b      	add	r3, r7
 800c174:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c176:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c178:	3301      	adds	r3, #1
 800c17a:	2b07      	cmp	r3, #7
 800c17c:	e9c4 8700 	strd	r8, r7, [r4]
 800c180:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c182:	f300 80d2 	bgt.w	800c32a <_svfprintf_r+0x1162>
 800c186:	3408      	adds	r4, #8
 800c188:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c18a:	9b04      	ldr	r3, [sp, #16]
 800c18c:	2f00      	cmp	r7, #0
 800c18e:	eba3 0606 	sub.w	r6, r3, r6
 800c192:	bfa8      	it	ge
 800c194:	1bf6      	subge	r6, r6, r7
 800c196:	2e00      	cmp	r6, #0
 800c198:	f77f ac20 	ble.w	800b9dc <_svfprintf_r+0x814>
 800c19c:	4f68      	ldr	r7, [pc, #416]	@ (800c340 <_svfprintf_r+0x1178>)
 800c19e:	f04f 0810 	mov.w	r8, #16
 800c1a2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c1a6:	2e10      	cmp	r6, #16
 800c1a8:	f103 0301 	add.w	r3, r3, #1
 800c1ac:	f104 0108 	add.w	r1, r4, #8
 800c1b0:	6027      	str	r7, [r4, #0]
 800c1b2:	f77f aebc 	ble.w	800bf2e <_svfprintf_r+0xd66>
 800c1b6:	3210      	adds	r2, #16
 800c1b8:	2b07      	cmp	r3, #7
 800c1ba:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c1be:	f8c4 8004 	str.w	r8, [r4, #4]
 800c1c2:	dd08      	ble.n	800c1d6 <_svfprintf_r+0x100e>
 800c1c4:	9803      	ldr	r0, [sp, #12]
 800c1c6:	aa26      	add	r2, sp, #152	@ 0x98
 800c1c8:	4659      	mov	r1, fp
 800c1ca:	f002 f908 	bl	800e3de <__ssprint_r>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f040 8175 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c1d4:	a929      	add	r1, sp, #164	@ 0xa4
 800c1d6:	3e10      	subs	r6, #16
 800c1d8:	460c      	mov	r4, r1
 800c1da:	e7e2      	b.n	800c1a2 <_svfprintf_r+0xfda>
 800c1dc:	9803      	ldr	r0, [sp, #12]
 800c1de:	aa26      	add	r2, sp, #152	@ 0x98
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	f002 f8fc 	bl	800e3de <__ssprint_r>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f040 8169 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c1ec:	ac29      	add	r4, sp, #164	@ 0xa4
 800c1ee:	e76d      	b.n	800c0cc <_svfprintf_r+0xf04>
 800c1f0:	2010      	movs	r0, #16
 800c1f2:	4403      	add	r3, r0
 800c1f4:	2a07      	cmp	r2, #7
 800c1f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c1fa:	6060      	str	r0, [r4, #4]
 800c1fc:	dd08      	ble.n	800c210 <_svfprintf_r+0x1048>
 800c1fe:	9803      	ldr	r0, [sp, #12]
 800c200:	aa26      	add	r2, sp, #152	@ 0x98
 800c202:	4659      	mov	r1, fp
 800c204:	f002 f8eb 	bl	800e3de <__ssprint_r>
 800c208:	2800      	cmp	r0, #0
 800c20a:	f040 8158 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c20e:	a929      	add	r1, sp, #164	@ 0xa4
 800c210:	f1a8 0810 	sub.w	r8, r8, #16
 800c214:	460c      	mov	r4, r1
 800c216:	e762      	b.n	800c0de <_svfprintf_r+0xf16>
 800c218:	460c      	mov	r4, r1
 800c21a:	e77c      	b.n	800c116 <_svfprintf_r+0xf4e>
 800c21c:	2f00      	cmp	r7, #0
 800c21e:	d04a      	beq.n	800c2b6 <_svfprintf_r+0x10ee>
 800c220:	3f01      	subs	r7, #1
 800c222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c228:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c22a:	6063      	str	r3, [r4, #4]
 800c22c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c22e:	4413      	add	r3, r2
 800c230:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c232:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c234:	3301      	adds	r3, #1
 800c236:	2b07      	cmp	r3, #7
 800c238:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c23a:	dc43      	bgt.n	800c2c4 <_svfprintf_r+0x10fc>
 800c23c:	3408      	adds	r4, #8
 800c23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c240:	781a      	ldrb	r2, [r3, #0]
 800c242:	9b06      	ldr	r3, [sp, #24]
 800c244:	eba3 0308 	sub.w	r3, r3, r8
 800c248:	429a      	cmp	r2, r3
 800c24a:	bfa8      	it	ge
 800c24c:	461a      	movge	r2, r3
 800c24e:	2a00      	cmp	r2, #0
 800c250:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c252:	4691      	mov	r9, r2
 800c254:	dd09      	ble.n	800c26a <_svfprintf_r+0x10a2>
 800c256:	4413      	add	r3, r2
 800c258:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c25a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c25c:	3301      	adds	r3, #1
 800c25e:	2b07      	cmp	r3, #7
 800c260:	e9c4 8200 	strd	r8, r2, [r4]
 800c264:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c266:	dc37      	bgt.n	800c2d8 <_svfprintf_r+0x1110>
 800c268:	3408      	adds	r4, #8
 800c26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c26c:	781e      	ldrb	r6, [r3, #0]
 800c26e:	f1b9 0f00 	cmp.w	r9, #0
 800c272:	bfa8      	it	ge
 800c274:	eba6 0609 	subge.w	r6, r6, r9
 800c278:	2e00      	cmp	r6, #0
 800c27a:	dd18      	ble.n	800c2ae <_svfprintf_r+0x10e6>
 800c27c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c280:	482f      	ldr	r0, [pc, #188]	@ (800c340 <_svfprintf_r+0x1178>)
 800c282:	6020      	str	r0, [r4, #0]
 800c284:	2e10      	cmp	r6, #16
 800c286:	f103 0301 	add.w	r3, r3, #1
 800c28a:	f104 0108 	add.w	r1, r4, #8
 800c28e:	dc2d      	bgt.n	800c2ec <_svfprintf_r+0x1124>
 800c290:	6066      	str	r6, [r4, #4]
 800c292:	2b07      	cmp	r3, #7
 800c294:	4416      	add	r6, r2
 800c296:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800c29a:	dd3a      	ble.n	800c312 <_svfprintf_r+0x114a>
 800c29c:	9803      	ldr	r0, [sp, #12]
 800c29e:	aa26      	add	r2, sp, #152	@ 0x98
 800c2a0:	4659      	mov	r1, fp
 800c2a2:	f002 f89c 	bl	800e3de <__ssprint_r>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f040 8109 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c2ac:	ac29      	add	r4, sp, #164	@ 0xa4
 800c2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	4498      	add	r8, r3
 800c2b4:	e733      	b.n	800c11e <_svfprintf_r+0xf56>
 800c2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2bc:	9b08      	ldr	r3, [sp, #32]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	9308      	str	r3, [sp, #32]
 800c2c2:	e7ae      	b.n	800c222 <_svfprintf_r+0x105a>
 800c2c4:	9803      	ldr	r0, [sp, #12]
 800c2c6:	aa26      	add	r2, sp, #152	@ 0x98
 800c2c8:	4659      	mov	r1, fp
 800c2ca:	f002 f888 	bl	800e3de <__ssprint_r>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f040 80f5 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c2d4:	ac29      	add	r4, sp, #164	@ 0xa4
 800c2d6:	e7b2      	b.n	800c23e <_svfprintf_r+0x1076>
 800c2d8:	9803      	ldr	r0, [sp, #12]
 800c2da:	aa26      	add	r2, sp, #152	@ 0x98
 800c2dc:	4659      	mov	r1, fp
 800c2de:	f002 f87e 	bl	800e3de <__ssprint_r>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f040 80eb 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c2e8:	ac29      	add	r4, sp, #164	@ 0xa4
 800c2ea:	e7be      	b.n	800c26a <_svfprintf_r+0x10a2>
 800c2ec:	2010      	movs	r0, #16
 800c2ee:	4402      	add	r2, r0
 800c2f0:	2b07      	cmp	r3, #7
 800c2f2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c2f6:	6060      	str	r0, [r4, #4]
 800c2f8:	dd08      	ble.n	800c30c <_svfprintf_r+0x1144>
 800c2fa:	9803      	ldr	r0, [sp, #12]
 800c2fc:	aa26      	add	r2, sp, #152	@ 0x98
 800c2fe:	4659      	mov	r1, fp
 800c300:	f002 f86d 	bl	800e3de <__ssprint_r>
 800c304:	2800      	cmp	r0, #0
 800c306:	f040 80da 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c30a:	a929      	add	r1, sp, #164	@ 0xa4
 800c30c:	3e10      	subs	r6, #16
 800c30e:	460c      	mov	r4, r1
 800c310:	e7b4      	b.n	800c27c <_svfprintf_r+0x10b4>
 800c312:	460c      	mov	r4, r1
 800c314:	e7cb      	b.n	800c2ae <_svfprintf_r+0x10e6>
 800c316:	9803      	ldr	r0, [sp, #12]
 800c318:	aa26      	add	r2, sp, #152	@ 0x98
 800c31a:	4659      	mov	r1, fp
 800c31c:	f002 f85f 	bl	800e3de <__ssprint_r>
 800c320:	2800      	cmp	r0, #0
 800c322:	f040 80cc 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c326:	ac29      	add	r4, sp, #164	@ 0xa4
 800c328:	e717      	b.n	800c15a <_svfprintf_r+0xf92>
 800c32a:	9803      	ldr	r0, [sp, #12]
 800c32c:	aa26      	add	r2, sp, #152	@ 0x98
 800c32e:	4659      	mov	r1, fp
 800c330:	f002 f855 	bl	800e3de <__ssprint_r>
 800c334:	2800      	cmp	r0, #0
 800c336:	f040 80c2 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c33a:	ac29      	add	r4, sp, #164	@ 0xa4
 800c33c:	e724      	b.n	800c188 <_svfprintf_r+0xfc0>
 800c33e:	bf00      	nop
 800c340:	080102f8 	.word	0x080102f8
 800c344:	9904      	ldr	r1, [sp, #16]
 800c346:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c348:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800c34a:	2901      	cmp	r1, #1
 800c34c:	f103 0301 	add.w	r3, r3, #1
 800c350:	f102 0201 	add.w	r2, r2, #1
 800c354:	f104 0608 	add.w	r6, r4, #8
 800c358:	dc02      	bgt.n	800c360 <_svfprintf_r+0x1198>
 800c35a:	07e9      	lsls	r1, r5, #31
 800c35c:	f140 8083 	bpl.w	800c466 <_svfprintf_r+0x129e>
 800c360:	2101      	movs	r1, #1
 800c362:	2a07      	cmp	r2, #7
 800c364:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c368:	f8c4 9000 	str.w	r9, [r4]
 800c36c:	6061      	str	r1, [r4, #4]
 800c36e:	dd08      	ble.n	800c382 <_svfprintf_r+0x11ba>
 800c370:	9803      	ldr	r0, [sp, #12]
 800c372:	aa26      	add	r2, sp, #152	@ 0x98
 800c374:	4659      	mov	r1, fp
 800c376:	f002 f832 	bl	800e3de <__ssprint_r>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f040 809f 	bne.w	800c4be <_svfprintf_r+0x12f6>
 800c380:	ae29      	add	r6, sp, #164	@ 0xa4
 800c382:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c384:	6033      	str	r3, [r6, #0]
 800c386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c388:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c38a:	6073      	str	r3, [r6, #4]
 800c38c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c38e:	4413      	add	r3, r2
 800c390:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c392:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c394:	3301      	adds	r3, #1
 800c396:	2b07      	cmp	r3, #7
 800c398:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c39a:	dc33      	bgt.n	800c404 <_svfprintf_r+0x123c>
 800c39c:	3608      	adds	r6, #8
 800c39e:	9b04      	ldr	r3, [sp, #16]
 800c3a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c3a4:	1e5c      	subs	r4, r3, #1
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800c3ae:	f7f4 fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d12f      	bne.n	800c416 <_svfprintf_r+0x124e>
 800c3b6:	f109 0201 	add.w	r2, r9, #1
 800c3ba:	e9c6 2400 	strd	r2, r4, [r6]
 800c3be:	9a04      	ldr	r2, [sp, #16]
 800c3c0:	f108 0301 	add.w	r3, r8, #1
 800c3c4:	3f01      	subs	r7, #1
 800c3c6:	4417      	add	r7, r2
 800c3c8:	2b07      	cmp	r3, #7
 800c3ca:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800c3ce:	dd53      	ble.n	800c478 <_svfprintf_r+0x12b0>
 800c3d0:	9803      	ldr	r0, [sp, #12]
 800c3d2:	aa26      	add	r2, sp, #152	@ 0x98
 800c3d4:	4659      	mov	r1, fp
 800c3d6:	f002 f802 	bl	800e3de <__ssprint_r>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d16f      	bne.n	800c4be <_svfprintf_r+0x12f6>
 800c3de:	ae29      	add	r6, sp, #164	@ 0xa4
 800c3e0:	ab22      	add	r3, sp, #136	@ 0x88
 800c3e2:	6033      	str	r3, [r6, #0]
 800c3e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c3e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c3e8:	6073      	str	r3, [r6, #4]
 800c3ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c3ec:	4413      	add	r3, r2
 800c3ee:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c3f0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c3f8:	f73f ada0 	bgt.w	800bf3c <_svfprintf_r+0xd74>
 800c3fc:	f106 0408 	add.w	r4, r6, #8
 800c400:	f7ff baec 	b.w	800b9dc <_svfprintf_r+0x814>
 800c404:	9803      	ldr	r0, [sp, #12]
 800c406:	aa26      	add	r2, sp, #152	@ 0x98
 800c408:	4659      	mov	r1, fp
 800c40a:	f001 ffe8 	bl	800e3de <__ssprint_r>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d155      	bne.n	800c4be <_svfprintf_r+0x12f6>
 800c412:	ae29      	add	r6, sp, #164	@ 0xa4
 800c414:	e7c3      	b.n	800c39e <_svfprintf_r+0x11d6>
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	dde1      	ble.n	800c3e0 <_svfprintf_r+0x1218>
 800c41c:	4f57      	ldr	r7, [pc, #348]	@ (800c57c <_svfprintf_r+0x13b4>)
 800c41e:	f04f 0810 	mov.w	r8, #16
 800c422:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c426:	2c10      	cmp	r4, #16
 800c428:	f103 0301 	add.w	r3, r3, #1
 800c42c:	f106 0108 	add.w	r1, r6, #8
 800c430:	6037      	str	r7, [r6, #0]
 800c432:	dc07      	bgt.n	800c444 <_svfprintf_r+0x127c>
 800c434:	6074      	str	r4, [r6, #4]
 800c436:	2b07      	cmp	r3, #7
 800c438:	4414      	add	r4, r2
 800c43a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800c43e:	dcc7      	bgt.n	800c3d0 <_svfprintf_r+0x1208>
 800c440:	460e      	mov	r6, r1
 800c442:	e7cd      	b.n	800c3e0 <_svfprintf_r+0x1218>
 800c444:	3210      	adds	r2, #16
 800c446:	2b07      	cmp	r3, #7
 800c448:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c44c:	f8c6 8004 	str.w	r8, [r6, #4]
 800c450:	dd06      	ble.n	800c460 <_svfprintf_r+0x1298>
 800c452:	9803      	ldr	r0, [sp, #12]
 800c454:	aa26      	add	r2, sp, #152	@ 0x98
 800c456:	4659      	mov	r1, fp
 800c458:	f001 ffc1 	bl	800e3de <__ssprint_r>
 800c45c:	bb78      	cbnz	r0, 800c4be <_svfprintf_r+0x12f6>
 800c45e:	a929      	add	r1, sp, #164	@ 0xa4
 800c460:	3c10      	subs	r4, #16
 800c462:	460e      	mov	r6, r1
 800c464:	e7dd      	b.n	800c422 <_svfprintf_r+0x125a>
 800c466:	2101      	movs	r1, #1
 800c468:	2a07      	cmp	r2, #7
 800c46a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c46e:	f8c4 9000 	str.w	r9, [r4]
 800c472:	6061      	str	r1, [r4, #4]
 800c474:	ddb4      	ble.n	800c3e0 <_svfprintf_r+0x1218>
 800c476:	e7ab      	b.n	800c3d0 <_svfprintf_r+0x1208>
 800c478:	3608      	adds	r6, #8
 800c47a:	e7b1      	b.n	800c3e0 <_svfprintf_r+0x1218>
 800c47c:	460c      	mov	r4, r1
 800c47e:	f7ff baad 	b.w	800b9dc <_svfprintf_r+0x814>
 800c482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c484:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c486:	1a9d      	subs	r5, r3, r2
 800c488:	2d00      	cmp	r5, #0
 800c48a:	f77f aaaa 	ble.w	800b9e2 <_svfprintf_r+0x81a>
 800c48e:	4e3c      	ldr	r6, [pc, #240]	@ (800c580 <_svfprintf_r+0x13b8>)
 800c490:	2710      	movs	r7, #16
 800c492:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c496:	2d10      	cmp	r5, #16
 800c498:	f103 0301 	add.w	r3, r3, #1
 800c49c:	6026      	str	r6, [r4, #0]
 800c49e:	dc18      	bgt.n	800c4d2 <_svfprintf_r+0x130a>
 800c4a0:	442a      	add	r2, r5
 800c4a2:	2b07      	cmp	r3, #7
 800c4a4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c4a8:	6065      	str	r5, [r4, #4]
 800c4aa:	f77f aa9a 	ble.w	800b9e2 <_svfprintf_r+0x81a>
 800c4ae:	9803      	ldr	r0, [sp, #12]
 800c4b0:	aa26      	add	r2, sp, #152	@ 0x98
 800c4b2:	4659      	mov	r1, fp
 800c4b4:	f001 ff93 	bl	800e3de <__ssprint_r>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f43f aa92 	beq.w	800b9e2 <_svfprintf_r+0x81a>
 800c4be:	f1ba 0f00 	cmp.w	sl, #0
 800c4c2:	f43f a89a 	beq.w	800b5fa <_svfprintf_r+0x432>
 800c4c6:	9803      	ldr	r0, [sp, #12]
 800c4c8:	4651      	mov	r1, sl
 800c4ca:	f7fe fdbd 	bl	800b048 <_free_r>
 800c4ce:	f7ff b894 	b.w	800b5fa <_svfprintf_r+0x432>
 800c4d2:	3210      	adds	r2, #16
 800c4d4:	2b07      	cmp	r3, #7
 800c4d6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c4da:	6067      	str	r7, [r4, #4]
 800c4dc:	dc02      	bgt.n	800c4e4 <_svfprintf_r+0x131c>
 800c4de:	3408      	adds	r4, #8
 800c4e0:	3d10      	subs	r5, #16
 800c4e2:	e7d6      	b.n	800c492 <_svfprintf_r+0x12ca>
 800c4e4:	9803      	ldr	r0, [sp, #12]
 800c4e6:	aa26      	add	r2, sp, #152	@ 0x98
 800c4e8:	4659      	mov	r1, fp
 800c4ea:	f001 ff78 	bl	800e3de <__ssprint_r>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d1e5      	bne.n	800c4be <_svfprintf_r+0x12f6>
 800c4f2:	ac29      	add	r4, sp, #164	@ 0xa4
 800c4f4:	e7f4      	b.n	800c4e0 <_svfprintf_r+0x1318>
 800c4f6:	9803      	ldr	r0, [sp, #12]
 800c4f8:	4651      	mov	r1, sl
 800c4fa:	f7fe fda5 	bl	800b048 <_free_r>
 800c4fe:	f7ff ba88 	b.w	800ba12 <_svfprintf_r+0x84a>
 800c502:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c504:	2b00      	cmp	r3, #0
 800c506:	f43f a878 	beq.w	800b5fa <_svfprintf_r+0x432>
 800c50a:	9803      	ldr	r0, [sp, #12]
 800c50c:	aa26      	add	r2, sp, #152	@ 0x98
 800c50e:	4659      	mov	r1, fp
 800c510:	f001 ff65 	bl	800e3de <__ssprint_r>
 800c514:	f7ff b871 	b.w	800b5fa <_svfprintf_r+0x432>
 800c518:	ea56 0207 	orrs.w	r2, r6, r7
 800c51c:	9508      	str	r5, [sp, #32]
 800c51e:	f43f ab7a 	beq.w	800bc16 <_svfprintf_r+0xa4e>
 800c522:	2b01      	cmp	r3, #1
 800c524:	f43f abfb 	beq.w	800bd1e <_svfprintf_r+0xb56>
 800c528:	2b02      	cmp	r3, #2
 800c52a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800c52e:	f43f ac3f 	beq.w	800bdb0 <_svfprintf_r+0xbe8>
 800c532:	f006 0307 	and.w	r3, r6, #7
 800c536:	08f6      	lsrs	r6, r6, #3
 800c538:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800c53c:	08ff      	lsrs	r7, r7, #3
 800c53e:	3330      	adds	r3, #48	@ 0x30
 800c540:	ea56 0107 	orrs.w	r1, r6, r7
 800c544:	464a      	mov	r2, r9
 800c546:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c54a:	d1f2      	bne.n	800c532 <_svfprintf_r+0x136a>
 800c54c:	9908      	ldr	r1, [sp, #32]
 800c54e:	07c8      	lsls	r0, r1, #31
 800c550:	d506      	bpl.n	800c560 <_svfprintf_r+0x1398>
 800c552:	2b30      	cmp	r3, #48	@ 0x30
 800c554:	d004      	beq.n	800c560 <_svfprintf_r+0x1398>
 800c556:	2330      	movs	r3, #48	@ 0x30
 800c558:	f809 3c01 	strb.w	r3, [r9, #-1]
 800c55c:	f1a2 0902 	sub.w	r9, r2, #2
 800c560:	ab52      	add	r3, sp, #328	@ 0x148
 800c562:	9d08      	ldr	r5, [sp, #32]
 800c564:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800c568:	f04f 0a00 	mov.w	sl, #0
 800c56c:	eba3 0809 	sub.w	r8, r3, r9
 800c570:	4657      	mov	r7, sl
 800c572:	f8cd a020 	str.w	sl, [sp, #32]
 800c576:	4656      	mov	r6, sl
 800c578:	f7ff b97c 	b.w	800b874 <_svfprintf_r+0x6ac>
 800c57c:	080102f8 	.word	0x080102f8
 800c580:	08010308 	.word	0x08010308

0800c584 <_fclose_r>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	4605      	mov	r5, r0
 800c588:	460c      	mov	r4, r1
 800c58a:	b1b1      	cbz	r1, 800c5ba <_fclose_r+0x36>
 800c58c:	b118      	cbz	r0, 800c596 <_fclose_r+0x12>
 800c58e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c590:	b90b      	cbnz	r3, 800c596 <_fclose_r+0x12>
 800c592:	f7fe fab9 	bl	800ab08 <__sinit>
 800c596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c598:	07de      	lsls	r6, r3, #31
 800c59a:	d405      	bmi.n	800c5a8 <_fclose_r+0x24>
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	0598      	lsls	r0, r3, #22
 800c5a0:	d402      	bmi.n	800c5a8 <_fclose_r+0x24>
 800c5a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5a4:	f7fe fcdc 	bl	800af60 <__retarget_lock_acquire_recursive>
 800c5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ac:	b943      	cbnz	r3, 800c5c0 <_fclose_r+0x3c>
 800c5ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5b0:	07d9      	lsls	r1, r3, #31
 800c5b2:	d402      	bmi.n	800c5ba <_fclose_r+0x36>
 800c5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5b6:	f7fe fcd4 	bl	800af62 <__retarget_lock_release_recursive>
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	4630      	mov	r0, r6
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 f834 	bl	800c630 <__sflush_r>
 800c5c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	b133      	cbz	r3, 800c5dc <_fclose_r+0x58>
 800c5ce:	69e1      	ldr	r1, [r4, #28]
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	4798      	blx	r3
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	bfb8      	it	lt
 800c5d8:	f04f 36ff 	movlt.w	r6, #4294967295
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	061a      	lsls	r2, r3, #24
 800c5e0:	d503      	bpl.n	800c5ea <_fclose_r+0x66>
 800c5e2:	6921      	ldr	r1, [r4, #16]
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f7fe fd2f 	bl	800b048 <_free_r>
 800c5ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c5ec:	b141      	cbz	r1, 800c600 <_fclose_r+0x7c>
 800c5ee:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	d002      	beq.n	800c5fc <_fclose_r+0x78>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f7fe fd26 	bl	800b048 <_free_r>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	6323      	str	r3, [r4, #48]	@ 0x30
 800c600:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c602:	b121      	cbz	r1, 800c60e <_fclose_r+0x8a>
 800c604:	4628      	mov	r0, r5
 800c606:	f7fe fd1f 	bl	800b048 <_free_r>
 800c60a:	2300      	movs	r3, #0
 800c60c:	6463      	str	r3, [r4, #68]	@ 0x44
 800c60e:	f7fe fa6f 	bl	800aaf0 <__sfp_lock_acquire>
 800c612:	2300      	movs	r3, #0
 800c614:	81a3      	strh	r3, [r4, #12]
 800c616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c618:	07db      	lsls	r3, r3, #31
 800c61a:	d402      	bmi.n	800c622 <_fclose_r+0x9e>
 800c61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c61e:	f7fe fca0 	bl	800af62 <__retarget_lock_release_recursive>
 800c622:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c624:	f7fe fc9b 	bl	800af5e <__retarget_lock_close_recursive>
 800c628:	f7fe fa68 	bl	800aafc <__sfp_lock_release>
 800c62c:	e7c6      	b.n	800c5bc <_fclose_r+0x38>
	...

0800c630 <__sflush_r>:
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	4605      	mov	r5, r0
 800c636:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800c63a:	0706      	lsls	r6, r0, #28
 800c63c:	460c      	mov	r4, r1
 800c63e:	d457      	bmi.n	800c6f0 <__sflush_r+0xc0>
 800c640:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800c644:	818b      	strh	r3, [r1, #12]
 800c646:	684b      	ldr	r3, [r1, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dc02      	bgt.n	800c652 <__sflush_r+0x22>
 800c64c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	dd4c      	ble.n	800c6ec <__sflush_r+0xbc>
 800c652:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c654:	2e00      	cmp	r6, #0
 800c656:	d049      	beq.n	800c6ec <__sflush_r+0xbc>
 800c658:	2300      	movs	r3, #0
 800c65a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800c65e:	682f      	ldr	r7, [r5, #0]
 800c660:	69e1      	ldr	r1, [r4, #28]
 800c662:	602b      	str	r3, [r5, #0]
 800c664:	d034      	beq.n	800c6d0 <__sflush_r+0xa0>
 800c666:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	0759      	lsls	r1, r3, #29
 800c66c:	d505      	bpl.n	800c67a <__sflush_r+0x4a>
 800c66e:	6863      	ldr	r3, [r4, #4]
 800c670:	1ad2      	subs	r2, r2, r3
 800c672:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c674:	b10b      	cbz	r3, 800c67a <__sflush_r+0x4a>
 800c676:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c678:	1ad2      	subs	r2, r2, r3
 800c67a:	2300      	movs	r3, #0
 800c67c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c67e:	69e1      	ldr	r1, [r4, #28]
 800c680:	4628      	mov	r0, r5
 800c682:	47b0      	blx	r6
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d106      	bne.n	800c696 <__sflush_r+0x66>
 800c688:	682a      	ldr	r2, [r5, #0]
 800c68a:	2a1d      	cmp	r2, #29
 800c68c:	d848      	bhi.n	800c720 <__sflush_r+0xf0>
 800c68e:	4b2b      	ldr	r3, [pc, #172]	@ (800c73c <__sflush_r+0x10c>)
 800c690:	4113      	asrs	r3, r2
 800c692:	07de      	lsls	r6, r3, #31
 800c694:	d444      	bmi.n	800c720 <__sflush_r+0xf0>
 800c696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c69a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c69e:	81a2      	strh	r2, [r4, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	6062      	str	r2, [r4, #4]
 800c6a4:	04d9      	lsls	r1, r3, #19
 800c6a6:	6922      	ldr	r2, [r4, #16]
 800c6a8:	6022      	str	r2, [r4, #0]
 800c6aa:	d504      	bpl.n	800c6b6 <__sflush_r+0x86>
 800c6ac:	1c42      	adds	r2, r0, #1
 800c6ae:	d101      	bne.n	800c6b4 <__sflush_r+0x84>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b903      	cbnz	r3, 800c6b6 <__sflush_r+0x86>
 800c6b4:	6520      	str	r0, [r4, #80]	@ 0x50
 800c6b6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c6b8:	602f      	str	r7, [r5, #0]
 800c6ba:	b1b9      	cbz	r1, 800c6ec <__sflush_r+0xbc>
 800c6bc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800c6c0:	4299      	cmp	r1, r3
 800c6c2:	d002      	beq.n	800c6ca <__sflush_r+0x9a>
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f7fe fcbf 	bl	800b048 <_free_r>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6ce:	e00d      	b.n	800c6ec <__sflush_r+0xbc>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	47b0      	blx	r6
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	1c50      	adds	r0, r2, #1
 800c6da:	d1c5      	bne.n	800c668 <__sflush_r+0x38>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0c2      	beq.n	800c668 <__sflush_r+0x38>
 800c6e2:	2b1d      	cmp	r3, #29
 800c6e4:	d001      	beq.n	800c6ea <__sflush_r+0xba>
 800c6e6:	2b16      	cmp	r3, #22
 800c6e8:	d11a      	bne.n	800c720 <__sflush_r+0xf0>
 800c6ea:	602f      	str	r7, [r5, #0]
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e01e      	b.n	800c72e <__sflush_r+0xfe>
 800c6f0:	690f      	ldr	r7, [r1, #16]
 800c6f2:	2f00      	cmp	r7, #0
 800c6f4:	d0fa      	beq.n	800c6ec <__sflush_r+0xbc>
 800c6f6:	0783      	lsls	r3, r0, #30
 800c6f8:	680e      	ldr	r6, [r1, #0]
 800c6fa:	bf08      	it	eq
 800c6fc:	694b      	ldreq	r3, [r1, #20]
 800c6fe:	600f      	str	r7, [r1, #0]
 800c700:	bf18      	it	ne
 800c702:	2300      	movne	r3, #0
 800c704:	eba6 0807 	sub.w	r8, r6, r7
 800c708:	608b      	str	r3, [r1, #8]
 800c70a:	f1b8 0f00 	cmp.w	r8, #0
 800c70e:	dded      	ble.n	800c6ec <__sflush_r+0xbc>
 800c710:	69e1      	ldr	r1, [r4, #28]
 800c712:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800c714:	4643      	mov	r3, r8
 800c716:	463a      	mov	r2, r7
 800c718:	4628      	mov	r0, r5
 800c71a:	47b0      	blx	r6
 800c71c:	2800      	cmp	r0, #0
 800c71e:	dc08      	bgt.n	800c732 <__sflush_r+0x102>
 800c720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	f04f 30ff 	mov.w	r0, #4294967295
 800c72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c732:	4407      	add	r7, r0
 800c734:	eba8 0800 	sub.w	r8, r8, r0
 800c738:	e7e7      	b.n	800c70a <__sflush_r+0xda>
 800c73a:	bf00      	nop
 800c73c:	dfbffffe 	.word	0xdfbffffe

0800c740 <_fflush_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	4605      	mov	r5, r0
 800c746:	b118      	cbz	r0, 800c750 <_fflush_r+0x10>
 800c748:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c74a:	b90b      	cbnz	r3, 800c750 <_fflush_r+0x10>
 800c74c:	f7fe f9dc 	bl	800ab08 <__sinit>
 800c750:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800c754:	b1b8      	cbz	r0, 800c786 <_fflush_r+0x46>
 800c756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c758:	07db      	lsls	r3, r3, #31
 800c75a:	d404      	bmi.n	800c766 <_fflush_r+0x26>
 800c75c:	0581      	lsls	r1, r0, #22
 800c75e:	d402      	bmi.n	800c766 <_fflush_r+0x26>
 800c760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c762:	f7fe fbfd 	bl	800af60 <__retarget_lock_acquire_recursive>
 800c766:	4628      	mov	r0, r5
 800c768:	4621      	mov	r1, r4
 800c76a:	f7ff ff61 	bl	800c630 <__sflush_r>
 800c76e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c770:	07da      	lsls	r2, r3, #31
 800c772:	4605      	mov	r5, r0
 800c774:	d405      	bmi.n	800c782 <_fflush_r+0x42>
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	059b      	lsls	r3, r3, #22
 800c77a:	d402      	bmi.n	800c782 <_fflush_r+0x42>
 800c77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c77e:	f7fe fbf0 	bl	800af62 <__retarget_lock_release_recursive>
 800c782:	4628      	mov	r0, r5
 800c784:	bd38      	pop	{r3, r4, r5, pc}
 800c786:	4605      	mov	r5, r0
 800c788:	e7fb      	b.n	800c782 <_fflush_r+0x42>
	...

0800c78c <__sfvwrite_r>:
 800c78c:	6893      	ldr	r3, [r2, #8]
 800c78e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c792:	4606      	mov	r6, r0
 800c794:	460c      	mov	r4, r1
 800c796:	4691      	mov	r9, r2
 800c798:	b91b      	cbnz	r3, 800c7a2 <__sfvwrite_r+0x16>
 800c79a:	2000      	movs	r0, #0
 800c79c:	b003      	add	sp, #12
 800c79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a2:	898b      	ldrh	r3, [r1, #12]
 800c7a4:	0718      	lsls	r0, r3, #28
 800c7a6:	d550      	bpl.n	800c84a <__sfvwrite_r+0xbe>
 800c7a8:	690b      	ldr	r3, [r1, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d04d      	beq.n	800c84a <__sfvwrite_r+0xbe>
 800c7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b2:	f8d9 8000 	ldr.w	r8, [r9]
 800c7b6:	f013 0702 	ands.w	r7, r3, #2
 800c7ba:	d16b      	bne.n	800c894 <__sfvwrite_r+0x108>
 800c7bc:	f013 0301 	ands.w	r3, r3, #1
 800c7c0:	f000 809c 	beq.w	800c8fc <__sfvwrite_r+0x170>
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	46ba      	mov	sl, r7
 800c7c8:	46bb      	mov	fp, r7
 800c7ca:	f1bb 0f00 	cmp.w	fp, #0
 800c7ce:	f000 8103 	beq.w	800c9d8 <__sfvwrite_r+0x24c>
 800c7d2:	b950      	cbnz	r0, 800c7ea <__sfvwrite_r+0x5e>
 800c7d4:	465a      	mov	r2, fp
 800c7d6:	210a      	movs	r1, #10
 800c7d8:	4650      	mov	r0, sl
 800c7da:	f7f3 fd29 	bl	8000230 <memchr>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f000 8100 	beq.w	800c9e4 <__sfvwrite_r+0x258>
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	eba0 070a 	sub.w	r7, r0, sl
 800c7ea:	6820      	ldr	r0, [r4, #0]
 800c7ec:	6921      	ldr	r1, [r4, #16]
 800c7ee:	68a5      	ldr	r5, [r4, #8]
 800c7f0:	6963      	ldr	r3, [r4, #20]
 800c7f2:	455f      	cmp	r7, fp
 800c7f4:	463a      	mov	r2, r7
 800c7f6:	bf28      	it	cs
 800c7f8:	465a      	movcs	r2, fp
 800c7fa:	4288      	cmp	r0, r1
 800c7fc:	f240 80f5 	bls.w	800c9ea <__sfvwrite_r+0x25e>
 800c800:	441d      	add	r5, r3
 800c802:	42aa      	cmp	r2, r5
 800c804:	f340 80f1 	ble.w	800c9ea <__sfvwrite_r+0x25e>
 800c808:	4651      	mov	r1, sl
 800c80a:	462a      	mov	r2, r5
 800c80c:	f000 f9c4 	bl	800cb98 <memmove>
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	442b      	add	r3, r5
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	4621      	mov	r1, r4
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff ff91 	bl	800c740 <_fflush_r>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d167      	bne.n	800c8f2 <__sfvwrite_r+0x166>
 800c822:	1b7f      	subs	r7, r7, r5
 800c824:	f040 80f9 	bne.w	800ca1a <__sfvwrite_r+0x28e>
 800c828:	4621      	mov	r1, r4
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7ff ff88 	bl	800c740 <_fflush_r>
 800c830:	2800      	cmp	r0, #0
 800c832:	d15e      	bne.n	800c8f2 <__sfvwrite_r+0x166>
 800c834:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c838:	1b5b      	subs	r3, r3, r5
 800c83a:	44aa      	add	sl, r5
 800c83c:	ebab 0b05 	sub.w	fp, fp, r5
 800c840:	f8c9 3008 	str.w	r3, [r9, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1c0      	bne.n	800c7ca <__sfvwrite_r+0x3e>
 800c848:	e7a7      	b.n	800c79a <__sfvwrite_r+0xe>
 800c84a:	4621      	mov	r1, r4
 800c84c:	4630      	mov	r0, r6
 800c84e:	f000 f94d 	bl	800caec <__swsetup_r>
 800c852:	2800      	cmp	r0, #0
 800c854:	d0ab      	beq.n	800c7ae <__sfvwrite_r+0x22>
 800c856:	f04f 30ff 	mov.w	r0, #4294967295
 800c85a:	e79f      	b.n	800c79c <__sfvwrite_r+0x10>
 800c85c:	e9d8 a500 	ldrd	sl, r5, [r8]
 800c860:	f108 0808 	add.w	r8, r8, #8
 800c864:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c868:	69e1      	ldr	r1, [r4, #28]
 800c86a:	2d00      	cmp	r5, #0
 800c86c:	d0f6      	beq.n	800c85c <__sfvwrite_r+0xd0>
 800c86e:	42bd      	cmp	r5, r7
 800c870:	462b      	mov	r3, r5
 800c872:	4652      	mov	r2, sl
 800c874:	bf28      	it	cs
 800c876:	463b      	movcs	r3, r7
 800c878:	4630      	mov	r0, r6
 800c87a:	47d8      	blx	fp
 800c87c:	2800      	cmp	r0, #0
 800c87e:	dd38      	ble.n	800c8f2 <__sfvwrite_r+0x166>
 800c880:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c884:	1a1b      	subs	r3, r3, r0
 800c886:	4482      	add	sl, r0
 800c888:	1a2d      	subs	r5, r5, r0
 800c88a:	f8c9 3008 	str.w	r3, [r9, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1e8      	bne.n	800c864 <__sfvwrite_r+0xd8>
 800c892:	e782      	b.n	800c79a <__sfvwrite_r+0xe>
 800c894:	f04f 0a00 	mov.w	sl, #0
 800c898:	4f61      	ldr	r7, [pc, #388]	@ (800ca20 <__sfvwrite_r+0x294>)
 800c89a:	4655      	mov	r5, sl
 800c89c:	e7e2      	b.n	800c864 <__sfvwrite_r+0xd8>
 800c89e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800c8a2:	f108 0808 	add.w	r8, r8, #8
 800c8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8aa:	6820      	ldr	r0, [r4, #0]
 800c8ac:	68a2      	ldr	r2, [r4, #8]
 800c8ae:	f1ba 0f00 	cmp.w	sl, #0
 800c8b2:	d0f4      	beq.n	800c89e <__sfvwrite_r+0x112>
 800c8b4:	0599      	lsls	r1, r3, #22
 800c8b6:	d563      	bpl.n	800c980 <__sfvwrite_r+0x1f4>
 800c8b8:	4552      	cmp	r2, sl
 800c8ba:	d836      	bhi.n	800c92a <__sfvwrite_r+0x19e>
 800c8bc:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800c8c0:	d033      	beq.n	800c92a <__sfvwrite_r+0x19e>
 800c8c2:	6921      	ldr	r1, [r4, #16]
 800c8c4:	6965      	ldr	r5, [r4, #20]
 800c8c6:	eba0 0b01 	sub.w	fp, r0, r1
 800c8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8d2:	f10b 0201 	add.w	r2, fp, #1
 800c8d6:	106d      	asrs	r5, r5, #1
 800c8d8:	4452      	add	r2, sl
 800c8da:	4295      	cmp	r5, r2
 800c8dc:	bf38      	it	cc
 800c8de:	4615      	movcc	r5, r2
 800c8e0:	055b      	lsls	r3, r3, #21
 800c8e2:	d53d      	bpl.n	800c960 <__sfvwrite_r+0x1d4>
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7fd fe3c 	bl	800a564 <_malloc_r>
 800c8ec:	b948      	cbnz	r0, 800c902 <__sfvwrite_r+0x176>
 800c8ee:	230c      	movs	r3, #12
 800c8f0:	6033      	str	r3, [r6, #0]
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f8:	81a3      	strh	r3, [r4, #12]
 800c8fa:	e7ac      	b.n	800c856 <__sfvwrite_r+0xca>
 800c8fc:	461f      	mov	r7, r3
 800c8fe:	469a      	mov	sl, r3
 800c900:	e7d1      	b.n	800c8a6 <__sfvwrite_r+0x11a>
 800c902:	465a      	mov	r2, fp
 800c904:	6921      	ldr	r1, [r4, #16]
 800c906:	9001      	str	r0, [sp, #4]
 800c908:	f000 f9b4 	bl	800cc74 <memcpy>
 800c90c:	89a2      	ldrh	r2, [r4, #12]
 800c90e:	9b01      	ldr	r3, [sp, #4]
 800c910:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800c914:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c918:	81a2      	strh	r2, [r4, #12]
 800c91a:	6123      	str	r3, [r4, #16]
 800c91c:	6165      	str	r5, [r4, #20]
 800c91e:	445b      	add	r3, fp
 800c920:	eba5 050b 	sub.w	r5, r5, fp
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	4652      	mov	r2, sl
 800c928:	60a5      	str	r5, [r4, #8]
 800c92a:	4552      	cmp	r2, sl
 800c92c:	bf28      	it	cs
 800c92e:	4652      	movcs	r2, sl
 800c930:	6820      	ldr	r0, [r4, #0]
 800c932:	9201      	str	r2, [sp, #4]
 800c934:	4639      	mov	r1, r7
 800c936:	f000 f92f 	bl	800cb98 <memmove>
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	9a01      	ldr	r2, [sp, #4]
 800c93e:	1a9b      	subs	r3, r3, r2
 800c940:	60a3      	str	r3, [r4, #8]
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	4413      	add	r3, r2
 800c946:	4655      	mov	r5, sl
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c94e:	1b5b      	subs	r3, r3, r5
 800c950:	442f      	add	r7, r5
 800c952:	ebaa 0a05 	sub.w	sl, sl, r5
 800c956:	f8c9 3008 	str.w	r3, [r9, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1a3      	bne.n	800c8a6 <__sfvwrite_r+0x11a>
 800c95e:	e71c      	b.n	800c79a <__sfvwrite_r+0xe>
 800c960:	462a      	mov	r2, r5
 800c962:	4630      	mov	r0, r6
 800c964:	f001 fb86 	bl	800e074 <_realloc_r>
 800c968:	4603      	mov	r3, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d1d5      	bne.n	800c91a <__sfvwrite_r+0x18e>
 800c96e:	6921      	ldr	r1, [r4, #16]
 800c970:	4630      	mov	r0, r6
 800c972:	f7fe fb69 	bl	800b048 <_free_r>
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c97c:	81a3      	strh	r3, [r4, #12]
 800c97e:	e7b6      	b.n	800c8ee <__sfvwrite_r+0x162>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	4283      	cmp	r3, r0
 800c984:	d302      	bcc.n	800c98c <__sfvwrite_r+0x200>
 800c986:	6961      	ldr	r1, [r4, #20]
 800c988:	4551      	cmp	r1, sl
 800c98a:	d915      	bls.n	800c9b8 <__sfvwrite_r+0x22c>
 800c98c:	4552      	cmp	r2, sl
 800c98e:	bf28      	it	cs
 800c990:	4652      	movcs	r2, sl
 800c992:	4639      	mov	r1, r7
 800c994:	4615      	mov	r5, r2
 800c996:	f000 f8ff 	bl	800cb98 <memmove>
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	6822      	ldr	r2, [r4, #0]
 800c99e:	1b5b      	subs	r3, r3, r5
 800c9a0:	442a      	add	r2, r5
 800c9a2:	60a3      	str	r3, [r4, #8]
 800c9a4:	6022      	str	r2, [r4, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1cf      	bne.n	800c94a <__sfvwrite_r+0x1be>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff fec7 	bl	800c740 <_fflush_r>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0c9      	beq.n	800c94a <__sfvwrite_r+0x1be>
 800c9b6:	e79c      	b.n	800c8f2 <__sfvwrite_r+0x166>
 800c9b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c9bc:	4553      	cmp	r3, sl
 800c9be:	bf28      	it	cs
 800c9c0:	4653      	movcs	r3, sl
 800c9c2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c9c4:	fb93 f3f1 	sdiv	r3, r3, r1
 800c9c8:	463a      	mov	r2, r7
 800c9ca:	434b      	muls	r3, r1
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	69e1      	ldr	r1, [r4, #28]
 800c9d0:	47a8      	blx	r5
 800c9d2:	1e05      	subs	r5, r0, #0
 800c9d4:	dcb9      	bgt.n	800c94a <__sfvwrite_r+0x1be>
 800c9d6:	e78c      	b.n	800c8f2 <__sfvwrite_r+0x166>
 800c9d8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f108 0808 	add.w	r8, r8, #8
 800c9e2:	e6f2      	b.n	800c7ca <__sfvwrite_r+0x3e>
 800c9e4:	f10b 0701 	add.w	r7, fp, #1
 800c9e8:	e6ff      	b.n	800c7ea <__sfvwrite_r+0x5e>
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	dc08      	bgt.n	800ca00 <__sfvwrite_r+0x274>
 800c9ee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c9f0:	69e1      	ldr	r1, [r4, #28]
 800c9f2:	4652      	mov	r2, sl
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	47a8      	blx	r5
 800c9f8:	1e05      	subs	r5, r0, #0
 800c9fa:	f73f af12 	bgt.w	800c822 <__sfvwrite_r+0x96>
 800c9fe:	e778      	b.n	800c8f2 <__sfvwrite_r+0x166>
 800ca00:	4651      	mov	r1, sl
 800ca02:	9201      	str	r2, [sp, #4]
 800ca04:	f000 f8c8 	bl	800cb98 <memmove>
 800ca08:	9a01      	ldr	r2, [sp, #4]
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	1a9b      	subs	r3, r3, r2
 800ca0e:	60a3      	str	r3, [r4, #8]
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	4413      	add	r3, r2
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	4615      	mov	r5, r2
 800ca18:	e703      	b.n	800c822 <__sfvwrite_r+0x96>
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	e70a      	b.n	800c834 <__sfvwrite_r+0xa8>
 800ca1e:	bf00      	nop
 800ca20:	7ffffc00 	.word	0x7ffffc00

0800ca24 <__swhatbuf_r>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	460c      	mov	r4, r1
 800ca28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	b096      	sub	sp, #88	@ 0x58
 800ca30:	4615      	mov	r5, r2
 800ca32:	461e      	mov	r6, r3
 800ca34:	da07      	bge.n	800ca46 <__swhatbuf_r+0x22>
 800ca36:	89a1      	ldrh	r1, [r4, #12]
 800ca38:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800ca3c:	d117      	bne.n	800ca6e <__swhatbuf_r+0x4a>
 800ca3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca42:	4608      	mov	r0, r1
 800ca44:	e00f      	b.n	800ca66 <__swhatbuf_r+0x42>
 800ca46:	466a      	mov	r2, sp
 800ca48:	f000 f8de 	bl	800cc08 <_fstat_r>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	dbf2      	blt.n	800ca36 <__swhatbuf_r+0x12>
 800ca50:	9901      	ldr	r1, [sp, #4]
 800ca52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca5a:	4259      	negs	r1, r3
 800ca5c:	4159      	adcs	r1, r3
 800ca5e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ca62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca66:	6031      	str	r1, [r6, #0]
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	b016      	add	sp, #88	@ 0x58
 800ca6c:	bd70      	pop	{r4, r5, r6, pc}
 800ca6e:	2100      	movs	r1, #0
 800ca70:	2340      	movs	r3, #64	@ 0x40
 800ca72:	e7e6      	b.n	800ca42 <__swhatbuf_r+0x1e>

0800ca74 <__smakebuf_r>:
 800ca74:	898b      	ldrh	r3, [r1, #12]
 800ca76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca78:	079d      	lsls	r5, r3, #30
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	d507      	bpl.n	800ca90 <__smakebuf_r+0x1c>
 800ca80:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	6123      	str	r3, [r4, #16]
 800ca88:	2301      	movs	r3, #1
 800ca8a:	6163      	str	r3, [r4, #20]
 800ca8c:	b003      	add	sp, #12
 800ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca90:	ab01      	add	r3, sp, #4
 800ca92:	466a      	mov	r2, sp
 800ca94:	f7ff ffc6 	bl	800ca24 <__swhatbuf_r>
 800ca98:	9f00      	ldr	r7, [sp, #0]
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7fd fd60 	bl	800a564 <_malloc_r>
 800caa4:	b948      	cbnz	r0, 800caba <__smakebuf_r+0x46>
 800caa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caaa:	059a      	lsls	r2, r3, #22
 800caac:	d4ee      	bmi.n	800ca8c <__smakebuf_r+0x18>
 800caae:	f023 0303 	bic.w	r3, r3, #3
 800cab2:	f043 0302 	orr.w	r3, r3, #2
 800cab6:	81a3      	strh	r3, [r4, #12]
 800cab8:	e7e2      	b.n	800ca80 <__smakebuf_r+0xc>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	6020      	str	r0, [r4, #0]
 800cabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac2:	81a3      	strh	r3, [r4, #12]
 800cac4:	9b01      	ldr	r3, [sp, #4]
 800cac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800caca:	b15b      	cbz	r3, 800cae4 <__smakebuf_r+0x70>
 800cacc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad0:	4630      	mov	r0, r6
 800cad2:	f000 f8ab 	bl	800cc2c <_isatty_r>
 800cad6:	b128      	cbz	r0, 800cae4 <__smakebuf_r+0x70>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f023 0303 	bic.w	r3, r3, #3
 800cade:	f043 0301 	orr.w	r3, r3, #1
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	431d      	orrs	r5, r3
 800cae8:	81a5      	strh	r5, [r4, #12]
 800caea:	e7cf      	b.n	800ca8c <__smakebuf_r+0x18>

0800caec <__swsetup_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4b29      	ldr	r3, [pc, #164]	@ (800cb94 <__swsetup_r+0xa8>)
 800caf0:	4605      	mov	r5, r0
 800caf2:	6818      	ldr	r0, [r3, #0]
 800caf4:	460c      	mov	r4, r1
 800caf6:	b118      	cbz	r0, 800cb00 <__swsetup_r+0x14>
 800caf8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cafa:	b90b      	cbnz	r3, 800cb00 <__swsetup_r+0x14>
 800cafc:	f7fe f804 	bl	800ab08 <__sinit>
 800cb00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb04:	0719      	lsls	r1, r3, #28
 800cb06:	d422      	bmi.n	800cb4e <__swsetup_r+0x62>
 800cb08:	06da      	lsls	r2, r3, #27
 800cb0a:	d407      	bmi.n	800cb1c <__swsetup_r+0x30>
 800cb0c:	2209      	movs	r2, #9
 800cb0e:	602a      	str	r2, [r5, #0]
 800cb10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1a:	e033      	b.n	800cb84 <__swsetup_r+0x98>
 800cb1c:	0758      	lsls	r0, r3, #29
 800cb1e:	d512      	bpl.n	800cb46 <__swsetup_r+0x5a>
 800cb20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cb22:	b141      	cbz	r1, 800cb36 <__swsetup_r+0x4a>
 800cb24:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800cb28:	4299      	cmp	r1, r3
 800cb2a:	d002      	beq.n	800cb32 <__swsetup_r+0x46>
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f7fe fa8b 	bl	800b048 <_free_r>
 800cb32:	2300      	movs	r3, #0
 800cb34:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6063      	str	r3, [r4, #4]
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	f043 0308 	orr.w	r3, r3, #8
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	b94b      	cbnz	r3, 800cb66 <__swsetup_r+0x7a>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb5c:	d003      	beq.n	800cb66 <__swsetup_r+0x7a>
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4628      	mov	r0, r5
 800cb62:	f7ff ff87 	bl	800ca74 <__smakebuf_r>
 800cb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb6a:	f013 0201 	ands.w	r2, r3, #1
 800cb6e:	d00a      	beq.n	800cb86 <__swsetup_r+0x9a>
 800cb70:	2200      	movs	r2, #0
 800cb72:	60a2      	str	r2, [r4, #8]
 800cb74:	6962      	ldr	r2, [r4, #20]
 800cb76:	4252      	negs	r2, r2
 800cb78:	61a2      	str	r2, [r4, #24]
 800cb7a:	6922      	ldr	r2, [r4, #16]
 800cb7c:	b942      	cbnz	r2, 800cb90 <__swsetup_r+0xa4>
 800cb7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb82:	d1c5      	bne.n	800cb10 <__swsetup_r+0x24>
 800cb84:	bd38      	pop	{r3, r4, r5, pc}
 800cb86:	0799      	lsls	r1, r3, #30
 800cb88:	bf58      	it	pl
 800cb8a:	6962      	ldrpl	r2, [r4, #20]
 800cb8c:	60a2      	str	r2, [r4, #8]
 800cb8e:	e7f4      	b.n	800cb7a <__swsetup_r+0x8e>
 800cb90:	2000      	movs	r0, #0
 800cb92:	e7f7      	b.n	800cb84 <__swsetup_r+0x98>
 800cb94:	20000430 	.word	0x20000430

0800cb98 <memmove>:
 800cb98:	4288      	cmp	r0, r1
 800cb9a:	b510      	push	{r4, lr}
 800cb9c:	eb01 0402 	add.w	r4, r1, r2
 800cba0:	d902      	bls.n	800cba8 <memmove+0x10>
 800cba2:	4284      	cmp	r4, r0
 800cba4:	4623      	mov	r3, r4
 800cba6:	d807      	bhi.n	800cbb8 <memmove+0x20>
 800cba8:	1e43      	subs	r3, r0, #1
 800cbaa:	42a1      	cmp	r1, r4
 800cbac:	d008      	beq.n	800cbc0 <memmove+0x28>
 800cbae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbb6:	e7f8      	b.n	800cbaa <memmove+0x12>
 800cbb8:	4402      	add	r2, r0
 800cbba:	4601      	mov	r1, r0
 800cbbc:	428a      	cmp	r2, r1
 800cbbe:	d100      	bne.n	800cbc2 <memmove+0x2a>
 800cbc0:	bd10      	pop	{r4, pc}
 800cbc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbca:	e7f7      	b.n	800cbbc <memmove+0x24>

0800cbcc <strncpy>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	3901      	subs	r1, #1
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	b132      	cbz	r2, 800cbe2 <strncpy+0x16>
 800cbd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cbd8:	f803 4b01 	strb.w	r4, [r3], #1
 800cbdc:	3a01      	subs	r2, #1
 800cbde:	2c00      	cmp	r4, #0
 800cbe0:	d1f7      	bne.n	800cbd2 <strncpy+0x6>
 800cbe2:	441a      	add	r2, r3
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d100      	bne.n	800cbec <strncpy+0x20>
 800cbea:	bd10      	pop	{r4, pc}
 800cbec:	f803 1b01 	strb.w	r1, [r3], #1
 800cbf0:	e7f9      	b.n	800cbe6 <strncpy+0x1a>
	...

0800cbf4 <__locale_mb_cur_max>:
 800cbf4:	4b01      	ldr	r3, [pc, #4]	@ (800cbfc <__locale_mb_cur_max+0x8>)
 800cbf6:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800cbfa:	4770      	bx	lr
 800cbfc:	2000055c 	.word	0x2000055c

0800cc00 <_localeconv_r>:
 800cc00:	4800      	ldr	r0, [pc, #0]	@ (800cc04 <_localeconv_r+0x4>)
 800cc02:	4770      	bx	lr
 800cc04:	2000064c 	.word	0x2000064c

0800cc08 <_fstat_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	4d07      	ldr	r5, [pc, #28]	@ (800cc28 <_fstat_r+0x20>)
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4604      	mov	r4, r0
 800cc10:	4608      	mov	r0, r1
 800cc12:	4611      	mov	r1, r2
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	f7f5 ffcd 	bl	8002bb4 <_fstat>
 800cc1a:	1c43      	adds	r3, r0, #1
 800cc1c:	d102      	bne.n	800cc24 <_fstat_r+0x1c>
 800cc1e:	682b      	ldr	r3, [r5, #0]
 800cc20:	b103      	cbz	r3, 800cc24 <_fstat_r+0x1c>
 800cc22:	6023      	str	r3, [r4, #0]
 800cc24:	bd38      	pop	{r3, r4, r5, pc}
 800cc26:	bf00      	nop
 800cc28:	20001234 	.word	0x20001234

0800cc2c <_isatty_r>:
 800cc2c:	b538      	push	{r3, r4, r5, lr}
 800cc2e:	4d06      	ldr	r5, [pc, #24]	@ (800cc48 <_isatty_r+0x1c>)
 800cc30:	2300      	movs	r3, #0
 800cc32:	4604      	mov	r4, r0
 800cc34:	4608      	mov	r0, r1
 800cc36:	602b      	str	r3, [r5, #0]
 800cc38:	f7f5 ffcc 	bl	8002bd4 <_isatty>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	d102      	bne.n	800cc46 <_isatty_r+0x1a>
 800cc40:	682b      	ldr	r3, [r5, #0]
 800cc42:	b103      	cbz	r3, 800cc46 <_isatty_r+0x1a>
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	bd38      	pop	{r3, r4, r5, pc}
 800cc48:	20001234 	.word	0x20001234

0800cc4c <__libc_fini_array>:
 800cc4c:	b538      	push	{r3, r4, r5, lr}
 800cc4e:	4d07      	ldr	r5, [pc, #28]	@ (800cc6c <__libc_fini_array+0x20>)
 800cc50:	4c07      	ldr	r4, [pc, #28]	@ (800cc70 <__libc_fini_array+0x24>)
 800cc52:	1b64      	subs	r4, r4, r5
 800cc54:	10a4      	asrs	r4, r4, #2
 800cc56:	b91c      	cbnz	r4, 800cc60 <__libc_fini_array+0x14>
 800cc58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc5c:	f003 baea 	b.w	8010234 <_fini>
 800cc60:	3c01      	subs	r4, #1
 800cc62:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cc66:	4798      	blx	r3
 800cc68:	e7f5      	b.n	800cc56 <__libc_fini_array+0xa>
 800cc6a:	bf00      	nop
 800cc6c:	08010838 	.word	0x08010838
 800cc70:	0801083c 	.word	0x0801083c

0800cc74 <memcpy>:
 800cc74:	440a      	add	r2, r1
 800cc76:	4291      	cmp	r1, r2
 800cc78:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc7c:	d100      	bne.n	800cc80 <memcpy+0xc>
 800cc7e:	4770      	bx	lr
 800cc80:	b510      	push	{r4, lr}
 800cc82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc8a:	4291      	cmp	r1, r2
 800cc8c:	d1f9      	bne.n	800cc82 <memcpy+0xe>
 800cc8e:	bd10      	pop	{r4, pc}

0800cc90 <frexp>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	2100      	movs	r1, #0
 800cc94:	ec55 4b10 	vmov	r4, r5, d0
 800cc98:	6001      	str	r1, [r0, #0]
 800cc9a:	4915      	ldr	r1, [pc, #84]	@ (800ccf0 <frexp+0x60>)
 800cc9c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cca0:	428a      	cmp	r2, r1
 800cca2:	4606      	mov	r6, r0
 800cca4:	462b      	mov	r3, r5
 800cca6:	d820      	bhi.n	800ccea <frexp+0x5a>
 800cca8:	4621      	mov	r1, r4
 800ccaa:	4311      	orrs	r1, r2
 800ccac:	d01d      	beq.n	800ccea <frexp+0x5a>
 800ccae:	4911      	ldr	r1, [pc, #68]	@ (800ccf4 <frexp+0x64>)
 800ccb0:	4029      	ands	r1, r5
 800ccb2:	b961      	cbnz	r1, 800ccce <frexp+0x3e>
 800ccb4:	4b10      	ldr	r3, [pc, #64]	@ (800ccf8 <frexp+0x68>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4629      	mov	r1, r5
 800ccbc:	f7f3 fcc4 	bl	8000648 <__aeabi_dmul>
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ccc6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800ccca:	4604      	mov	r4, r0
 800cccc:	6031      	str	r1, [r6, #0]
 800ccce:	6831      	ldr	r1, [r6, #0]
 800ccd0:	1512      	asrs	r2, r2, #20
 800ccd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ccd6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800ccda:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ccde:	4411      	add	r1, r2
 800cce0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800cce4:	6031      	str	r1, [r6, #0]
 800cce6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800ccea:	ec45 4b10 	vmov	d0, r4, r5
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	7fefffff 	.word	0x7fefffff
 800ccf4:	7ff00000 	.word	0x7ff00000
 800ccf8:	43500000 	.word	0x43500000

0800ccfc <__register_exitproc>:
 800ccfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd00:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800cd78 <__register_exitproc+0x7c>
 800cd04:	4606      	mov	r6, r0
 800cd06:	f8da 0000 	ldr.w	r0, [sl]
 800cd0a:	4698      	mov	r8, r3
 800cd0c:	460f      	mov	r7, r1
 800cd0e:	4691      	mov	r9, r2
 800cd10:	f7fe f926 	bl	800af60 <__retarget_lock_acquire_recursive>
 800cd14:	4b16      	ldr	r3, [pc, #88]	@ (800cd70 <__register_exitproc+0x74>)
 800cd16:	681c      	ldr	r4, [r3, #0]
 800cd18:	b90c      	cbnz	r4, 800cd1e <__register_exitproc+0x22>
 800cd1a:	4c16      	ldr	r4, [pc, #88]	@ (800cd74 <__register_exitproc+0x78>)
 800cd1c:	601c      	str	r4, [r3, #0]
 800cd1e:	6865      	ldr	r5, [r4, #4]
 800cd20:	f8da 0000 	ldr.w	r0, [sl]
 800cd24:	2d1f      	cmp	r5, #31
 800cd26:	dd05      	ble.n	800cd34 <__register_exitproc+0x38>
 800cd28:	f7fe f91b 	bl	800af62 <__retarget_lock_release_recursive>
 800cd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd34:	b19e      	cbz	r6, 800cd5e <__register_exitproc+0x62>
 800cd36:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800cd40:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800cd44:	40aa      	lsls	r2, r5
 800cd46:	4313      	orrs	r3, r2
 800cd48:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800cd4c:	2e02      	cmp	r6, #2
 800cd4e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800cd52:	bf02      	ittt	eq
 800cd54:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800cd58:	4313      	orreq	r3, r2
 800cd5a:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800cd5e:	1c6b      	adds	r3, r5, #1
 800cd60:	3502      	adds	r5, #2
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800cd68:	f7fe f8fb 	bl	800af62 <__retarget_lock_release_recursive>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7df      	b.n	800cd30 <__register_exitproc+0x34>
 800cd70:	2000123c 	.word	0x2000123c
 800cd74:	20001240 	.word	0x20001240
 800cd78:	20000558 	.word	0x20000558

0800cd7c <quorem>:
 800cd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	6903      	ldr	r3, [r0, #16]
 800cd82:	690c      	ldr	r4, [r1, #16]
 800cd84:	42a3      	cmp	r3, r4
 800cd86:	4607      	mov	r7, r0
 800cd88:	db7e      	blt.n	800ce88 <quorem+0x10c>
 800cd8a:	3c01      	subs	r4, #1
 800cd8c:	f101 0814 	add.w	r8, r1, #20
 800cd90:	00a3      	lsls	r3, r4, #2
 800cd92:	f100 0514 	add.w	r5, r0, #20
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cda2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cda6:	3301      	adds	r3, #1
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdae:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdb2:	d32e      	bcc.n	800ce12 <quorem+0x96>
 800cdb4:	f04f 0a00 	mov.w	sl, #0
 800cdb8:	46c4      	mov	ip, r8
 800cdba:	46ae      	mov	lr, r5
 800cdbc:	46d3      	mov	fp, sl
 800cdbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cdc2:	b298      	uxth	r0, r3
 800cdc4:	fb06 a000 	mla	r0, r6, r0, sl
 800cdc8:	0c02      	lsrs	r2, r0, #16
 800cdca:	0c1b      	lsrs	r3, r3, #16
 800cdcc:	fb06 2303 	mla	r3, r6, r3, r2
 800cdd0:	f8de 2000 	ldr.w	r2, [lr]
 800cdd4:	b280      	uxth	r0, r0
 800cdd6:	b292      	uxth	r2, r2
 800cdd8:	1a12      	subs	r2, r2, r0
 800cdda:	445a      	add	r2, fp
 800cddc:	f8de 0000 	ldr.w	r0, [lr]
 800cde0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cdea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cdee:	b292      	uxth	r2, r2
 800cdf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cdf4:	45e1      	cmp	r9, ip
 800cdf6:	f84e 2b04 	str.w	r2, [lr], #4
 800cdfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cdfe:	d2de      	bcs.n	800cdbe <quorem+0x42>
 800ce00:	9b00      	ldr	r3, [sp, #0]
 800ce02:	58eb      	ldr	r3, [r5, r3]
 800ce04:	b92b      	cbnz	r3, 800ce12 <quorem+0x96>
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	3b04      	subs	r3, #4
 800ce0a:	429d      	cmp	r5, r3
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	d32f      	bcc.n	800ce70 <quorem+0xf4>
 800ce10:	613c      	str	r4, [r7, #16]
 800ce12:	4638      	mov	r0, r7
 800ce14:	f001 f826 	bl	800de64 <__mcmp>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	db25      	blt.n	800ce68 <quorem+0xec>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce24:	f8d1 c000 	ldr.w	ip, [r1]
 800ce28:	fa1f fe82 	uxth.w	lr, r2
 800ce2c:	fa1f f38c 	uxth.w	r3, ip
 800ce30:	eba3 030e 	sub.w	r3, r3, lr
 800ce34:	4403      	add	r3, r0
 800ce36:	0c12      	lsrs	r2, r2, #16
 800ce38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ce3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce46:	45c1      	cmp	r9, r8
 800ce48:	f841 3b04 	str.w	r3, [r1], #4
 800ce4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce50:	d2e6      	bcs.n	800ce20 <quorem+0xa4>
 800ce52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce5a:	b922      	cbnz	r2, 800ce66 <quorem+0xea>
 800ce5c:	3b04      	subs	r3, #4
 800ce5e:	429d      	cmp	r5, r3
 800ce60:	461a      	mov	r2, r3
 800ce62:	d30b      	bcc.n	800ce7c <quorem+0x100>
 800ce64:	613c      	str	r4, [r7, #16]
 800ce66:	3601      	adds	r6, #1
 800ce68:	4630      	mov	r0, r6
 800ce6a:	b003      	add	sp, #12
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce70:	6812      	ldr	r2, [r2, #0]
 800ce72:	3b04      	subs	r3, #4
 800ce74:	2a00      	cmp	r2, #0
 800ce76:	d1cb      	bne.n	800ce10 <quorem+0x94>
 800ce78:	3c01      	subs	r4, #1
 800ce7a:	e7c6      	b.n	800ce0a <quorem+0x8e>
 800ce7c:	6812      	ldr	r2, [r2, #0]
 800ce7e:	3b04      	subs	r3, #4
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	d1ef      	bne.n	800ce64 <quorem+0xe8>
 800ce84:	3c01      	subs	r4, #1
 800ce86:	e7ea      	b.n	800ce5e <quorem+0xe2>
 800ce88:	2000      	movs	r0, #0
 800ce8a:	e7ee      	b.n	800ce6a <quorem+0xee>
 800ce8c:	0000      	movs	r0, r0
	...

0800ce90 <_dtoa_r>:
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	b099      	sub	sp, #100	@ 0x64
 800ce96:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce9c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800ce9e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cea0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cea2:	ec55 4b10 	vmov	r4, r5, d0
 800cea6:	4683      	mov	fp, r0
 800cea8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceaa:	b149      	cbz	r1, 800cec0 <_dtoa_r+0x30>
 800ceac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ceae:	604a      	str	r2, [r1, #4]
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	4093      	lsls	r3, r2
 800ceb4:	608b      	str	r3, [r1, #8]
 800ceb6:	f000 fdce 	bl	800da56 <_Bfree>
 800ceba:	2300      	movs	r3, #0
 800cebc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800cec0:	1e2b      	subs	r3, r5, #0
 800cec2:	bfb9      	ittee	lt
 800cec4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cec8:	9303      	strlt	r3, [sp, #12]
 800ceca:	2300      	movge	r3, #0
 800cecc:	6033      	strge	r3, [r6, #0]
 800cece:	9f03      	ldr	r7, [sp, #12]
 800ced0:	4b97      	ldr	r3, [pc, #604]	@ (800d130 <_dtoa_r+0x2a0>)
 800ced2:	bfbc      	itt	lt
 800ced4:	2201      	movlt	r2, #1
 800ced6:	6032      	strlt	r2, [r6, #0]
 800ced8:	43bb      	bics	r3, r7
 800ceda:	d114      	bne.n	800cf06 <_dtoa_r+0x76>
 800cedc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cede:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cee8:	4323      	orrs	r3, r4
 800ceea:	f000 854c 	beq.w	800d986 <_dtoa_r+0xaf6>
 800ceee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cef0:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d148 <_dtoa_r+0x2b8>
 800cef4:	b11b      	cbz	r3, 800cefe <_dtoa_r+0x6e>
 800cef6:	f10a 0303 	add.w	r3, sl, #3
 800cefa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	4650      	mov	r0, sl
 800cf00:	b019      	add	sp, #100	@ 0x64
 800cf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	ec51 0b17 	vmov	r0, r1, d7
 800cf10:	2300      	movs	r3, #0
 800cf12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cf16:	f7f3 fdff 	bl	8000b18 <__aeabi_dcmpeq>
 800cf1a:	4680      	mov	r8, r0
 800cf1c:	b150      	cbz	r0, 800cf34 <_dtoa_r+0xa4>
 800cf1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf20:	2301      	movs	r3, #1
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf26:	b113      	cbz	r3, 800cf2e <_dtoa_r+0x9e>
 800cf28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf2a:	4b82      	ldr	r3, [pc, #520]	@ (800d134 <_dtoa_r+0x2a4>)
 800cf2c:	6013      	str	r3, [r2, #0]
 800cf2e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d14c <_dtoa_r+0x2bc>
 800cf32:	e7e4      	b.n	800cefe <_dtoa_r+0x6e>
 800cf34:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cf38:	aa16      	add	r2, sp, #88	@ 0x58
 800cf3a:	a917      	add	r1, sp, #92	@ 0x5c
 800cf3c:	4658      	mov	r0, fp
 800cf3e:	f001 f841 	bl	800dfc4 <__d2b>
 800cf42:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cf46:	4681      	mov	r9, r0
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	d077      	beq.n	800d03c <_dtoa_r+0x1ac>
 800cf4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf4e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cf52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf5a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cf5e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cf62:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cf66:	4619      	mov	r1, r3
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4b73      	ldr	r3, [pc, #460]	@ (800d138 <_dtoa_r+0x2a8>)
 800cf6c:	f7f3 f9b4 	bl	80002d8 <__aeabi_dsub>
 800cf70:	a369      	add	r3, pc, #420	@ (adr r3, 800d118 <_dtoa_r+0x288>)
 800cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf76:	f7f3 fb67 	bl	8000648 <__aeabi_dmul>
 800cf7a:	a369      	add	r3, pc, #420	@ (adr r3, 800d120 <_dtoa_r+0x290>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f7f3 f9ac 	bl	80002dc <__adddf3>
 800cf84:	4604      	mov	r4, r0
 800cf86:	4630      	mov	r0, r6
 800cf88:	460d      	mov	r5, r1
 800cf8a:	f7f3 faf3 	bl	8000574 <__aeabi_i2d>
 800cf8e:	a366      	add	r3, pc, #408	@ (adr r3, 800d128 <_dtoa_r+0x298>)
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	f7f3 fb58 	bl	8000648 <__aeabi_dmul>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	f7f3 f99c 	bl	80002dc <__adddf3>
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	460d      	mov	r5, r1
 800cfa8:	f7f3 fdfe 	bl	8000ba8 <__aeabi_d2iz>
 800cfac:	2200      	movs	r2, #0
 800cfae:	4607      	mov	r7, r0
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	f7f3 fdb9 	bl	8000b2c <__aeabi_dcmplt>
 800cfba:	b140      	cbz	r0, 800cfce <_dtoa_r+0x13e>
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f7f3 fad9 	bl	8000574 <__aeabi_i2d>
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	462b      	mov	r3, r5
 800cfc6:	f7f3 fda7 	bl	8000b18 <__aeabi_dcmpeq>
 800cfca:	b900      	cbnz	r0, 800cfce <_dtoa_r+0x13e>
 800cfcc:	3f01      	subs	r7, #1
 800cfce:	2f16      	cmp	r7, #22
 800cfd0:	d851      	bhi.n	800d076 <_dtoa_r+0x1e6>
 800cfd2:	4b5a      	ldr	r3, [pc, #360]	@ (800d13c <_dtoa_r+0x2ac>)
 800cfd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfe0:	f7f3 fda4 	bl	8000b2c <__aeabi_dcmplt>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d048      	beq.n	800d07a <_dtoa_r+0x1ea>
 800cfe8:	3f01      	subs	r7, #1
 800cfea:	2300      	movs	r3, #0
 800cfec:	9312      	str	r3, [sp, #72]	@ 0x48
 800cfee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cff0:	1b9b      	subs	r3, r3, r6
 800cff2:	1e5a      	subs	r2, r3, #1
 800cff4:	bf44      	itt	mi
 800cff6:	f1c3 0801 	rsbmi	r8, r3, #1
 800cffa:	2300      	movmi	r3, #0
 800cffc:	9208      	str	r2, [sp, #32]
 800cffe:	bf54      	ite	pl
 800d000:	f04f 0800 	movpl.w	r8, #0
 800d004:	9308      	strmi	r3, [sp, #32]
 800d006:	2f00      	cmp	r7, #0
 800d008:	db39      	blt.n	800d07e <_dtoa_r+0x1ee>
 800d00a:	9b08      	ldr	r3, [sp, #32]
 800d00c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d00e:	443b      	add	r3, r7
 800d010:	9308      	str	r3, [sp, #32]
 800d012:	2300      	movs	r3, #0
 800d014:	930a      	str	r3, [sp, #40]	@ 0x28
 800d016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d018:	2b09      	cmp	r3, #9
 800d01a:	d865      	bhi.n	800d0e8 <_dtoa_r+0x258>
 800d01c:	2b05      	cmp	r3, #5
 800d01e:	bfc4      	itt	gt
 800d020:	3b04      	subgt	r3, #4
 800d022:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d026:	f1a3 0302 	sub.w	r3, r3, #2
 800d02a:	bfcc      	ite	gt
 800d02c:	2400      	movgt	r4, #0
 800d02e:	2401      	movle	r4, #1
 800d030:	2b03      	cmp	r3, #3
 800d032:	d864      	bhi.n	800d0fe <_dtoa_r+0x26e>
 800d034:	e8df f003 	tbb	[pc, r3]
 800d038:	5635372a 	.word	0x5635372a
 800d03c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d040:	441e      	add	r6, r3
 800d042:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d046:	2b20      	cmp	r3, #32
 800d048:	bfc1      	itttt	gt
 800d04a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d04e:	409f      	lslgt	r7, r3
 800d050:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d054:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d058:	bfd6      	itet	le
 800d05a:	f1c3 0320 	rsble	r3, r3, #32
 800d05e:	ea47 0003 	orrgt.w	r0, r7, r3
 800d062:	fa04 f003 	lslle.w	r0, r4, r3
 800d066:	f7f3 fa75 	bl	8000554 <__aeabi_ui2d>
 800d06a:	2201      	movs	r2, #1
 800d06c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d070:	3e01      	subs	r6, #1
 800d072:	9214      	str	r2, [sp, #80]	@ 0x50
 800d074:	e777      	b.n	800cf66 <_dtoa_r+0xd6>
 800d076:	2301      	movs	r3, #1
 800d078:	e7b8      	b.n	800cfec <_dtoa_r+0x15c>
 800d07a:	9012      	str	r0, [sp, #72]	@ 0x48
 800d07c:	e7b7      	b.n	800cfee <_dtoa_r+0x15e>
 800d07e:	427b      	negs	r3, r7
 800d080:	930a      	str	r3, [sp, #40]	@ 0x28
 800d082:	2300      	movs	r3, #0
 800d084:	eba8 0807 	sub.w	r8, r8, r7
 800d088:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d08a:	e7c4      	b.n	800d016 <_dtoa_r+0x186>
 800d08c:	2300      	movs	r3, #0
 800d08e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d092:	2b00      	cmp	r3, #0
 800d094:	dc36      	bgt.n	800d104 <_dtoa_r+0x274>
 800d096:	2301      	movs	r3, #1
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	9307      	str	r3, [sp, #28]
 800d09c:	461a      	mov	r2, r3
 800d09e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0a0:	e00b      	b.n	800d0ba <_dtoa_r+0x22a>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e7f3      	b.n	800d08e <_dtoa_r+0x1fe>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0ac:	18fb      	adds	r3, r7, r3
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	9307      	str	r3, [sp, #28]
 800d0b6:	bfb8      	it	lt
 800d0b8:	2301      	movlt	r3, #1
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	2204      	movs	r2, #4
 800d0be:	f102 0014 	add.w	r0, r2, #20
 800d0c2:	4298      	cmp	r0, r3
 800d0c4:	d922      	bls.n	800d10c <_dtoa_r+0x27c>
 800d0c6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800d0ca:	4658      	mov	r0, fp
 800d0cc:	f000 fc9e 	bl	800da0c <_Balloc>
 800d0d0:	4682      	mov	sl, r0
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d13c      	bne.n	800d150 <_dtoa_r+0x2c0>
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d140 <_dtoa_r+0x2b0>)
 800d0d8:	4602      	mov	r2, r0
 800d0da:	f240 11af 	movw	r1, #431	@ 0x1af
 800d0de:	4819      	ldr	r0, [pc, #100]	@ (800d144 <_dtoa_r+0x2b4>)
 800d0e0:	f001 f9fa 	bl	800e4d8 <__assert_func>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e7df      	b.n	800d0a8 <_dtoa_r+0x218>
 800d0e8:	2401      	movs	r4, #1
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	9307      	str	r3, [sp, #28]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2312      	movs	r3, #18
 800d0fc:	e7cf      	b.n	800d09e <_dtoa_r+0x20e>
 800d0fe:	2301      	movs	r3, #1
 800d100:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d102:	e7f5      	b.n	800d0f0 <_dtoa_r+0x260>
 800d104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	9307      	str	r3, [sp, #28]
 800d10a:	e7d6      	b.n	800d0ba <_dtoa_r+0x22a>
 800d10c:	3101      	adds	r1, #1
 800d10e:	0052      	lsls	r2, r2, #1
 800d110:	e7d5      	b.n	800d0be <_dtoa_r+0x22e>
 800d112:	bf00      	nop
 800d114:	f3af 8000 	nop.w
 800d118:	636f4361 	.word	0x636f4361
 800d11c:	3fd287a7 	.word	0x3fd287a7
 800d120:	8b60c8b3 	.word	0x8b60c8b3
 800d124:	3fc68a28 	.word	0x3fc68a28
 800d128:	509f79fb 	.word	0x509f79fb
 800d12c:	3fd34413 	.word	0x3fd34413
 800d130:	7ff00000 	.word	0x7ff00000
 800d134:	080102f7 	.word	0x080102f7
 800d138:	3ff80000 	.word	0x3ff80000
 800d13c:	08010428 	.word	0x08010428
 800d140:	0801032f 	.word	0x0801032f
 800d144:	08010340 	.word	0x08010340
 800d148:	0801032b 	.word	0x0801032b
 800d14c:	080102f6 	.word	0x080102f6
 800d150:	9b07      	ldr	r3, [sp, #28]
 800d152:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800d156:	2b0e      	cmp	r3, #14
 800d158:	f200 80a4 	bhi.w	800d2a4 <_dtoa_r+0x414>
 800d15c:	2c00      	cmp	r4, #0
 800d15e:	f000 80a1 	beq.w	800d2a4 <_dtoa_r+0x414>
 800d162:	2f00      	cmp	r7, #0
 800d164:	dd33      	ble.n	800d1ce <_dtoa_r+0x33e>
 800d166:	4bae      	ldr	r3, [pc, #696]	@ (800d420 <_dtoa_r+0x590>)
 800d168:	f007 020f 	and.w	r2, r7, #15
 800d16c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d170:	ed93 7b00 	vldr	d7, [r3]
 800d174:	05f8      	lsls	r0, r7, #23
 800d176:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d17a:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d17e:	d516      	bpl.n	800d1ae <_dtoa_r+0x31e>
 800d180:	4ba8      	ldr	r3, [pc, #672]	@ (800d424 <_dtoa_r+0x594>)
 800d182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d186:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d18a:	f7f3 fb87 	bl	800089c <__aeabi_ddiv>
 800d18e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d192:	f004 040f 	and.w	r4, r4, #15
 800d196:	2603      	movs	r6, #3
 800d198:	4da2      	ldr	r5, [pc, #648]	@ (800d424 <_dtoa_r+0x594>)
 800d19a:	b954      	cbnz	r4, 800d1b2 <_dtoa_r+0x322>
 800d19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1a4:	f7f3 fb7a 	bl	800089c <__aeabi_ddiv>
 800d1a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1ac:	e028      	b.n	800d200 <_dtoa_r+0x370>
 800d1ae:	2602      	movs	r6, #2
 800d1b0:	e7f2      	b.n	800d198 <_dtoa_r+0x308>
 800d1b2:	07e1      	lsls	r1, r4, #31
 800d1b4:	d508      	bpl.n	800d1c8 <_dtoa_r+0x338>
 800d1b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1be:	f7f3 fa43 	bl	8000648 <__aeabi_dmul>
 800d1c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1c6:	3601      	adds	r6, #1
 800d1c8:	1064      	asrs	r4, r4, #1
 800d1ca:	3508      	adds	r5, #8
 800d1cc:	e7e5      	b.n	800d19a <_dtoa_r+0x30a>
 800d1ce:	f000 80d2 	beq.w	800d376 <_dtoa_r+0x4e6>
 800d1d2:	427c      	negs	r4, r7
 800d1d4:	4b92      	ldr	r3, [pc, #584]	@ (800d420 <_dtoa_r+0x590>)
 800d1d6:	4d93      	ldr	r5, [pc, #588]	@ (800d424 <_dtoa_r+0x594>)
 800d1d8:	f004 020f 	and.w	r2, r4, #15
 800d1dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1e8:	f7f3 fa2e 	bl	8000648 <__aeabi_dmul>
 800d1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1f0:	1124      	asrs	r4, r4, #4
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	2602      	movs	r6, #2
 800d1f6:	2c00      	cmp	r4, #0
 800d1f8:	f040 80b2 	bne.w	800d360 <_dtoa_r+0x4d0>
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1d3      	bne.n	800d1a8 <_dtoa_r+0x318>
 800d200:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d202:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	f000 80b7 	beq.w	800d37a <_dtoa_r+0x4ea>
 800d20c:	4b86      	ldr	r3, [pc, #536]	@ (800d428 <_dtoa_r+0x598>)
 800d20e:	2200      	movs	r2, #0
 800d210:	4620      	mov	r0, r4
 800d212:	4629      	mov	r1, r5
 800d214:	f7f3 fc8a 	bl	8000b2c <__aeabi_dcmplt>
 800d218:	2800      	cmp	r0, #0
 800d21a:	f000 80ae 	beq.w	800d37a <_dtoa_r+0x4ea>
 800d21e:	9b07      	ldr	r3, [sp, #28]
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 80aa 	beq.w	800d37a <_dtoa_r+0x4ea>
 800d226:	9b00      	ldr	r3, [sp, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	dd37      	ble.n	800d29c <_dtoa_r+0x40c>
 800d22c:	1e7b      	subs	r3, r7, #1
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	4620      	mov	r0, r4
 800d232:	4b7e      	ldr	r3, [pc, #504]	@ (800d42c <_dtoa_r+0x59c>)
 800d234:	2200      	movs	r2, #0
 800d236:	4629      	mov	r1, r5
 800d238:	f7f3 fa06 	bl	8000648 <__aeabi_dmul>
 800d23c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d240:	9c00      	ldr	r4, [sp, #0]
 800d242:	3601      	adds	r6, #1
 800d244:	4630      	mov	r0, r6
 800d246:	f7f3 f995 	bl	8000574 <__aeabi_i2d>
 800d24a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d24e:	f7f3 f9fb 	bl	8000648 <__aeabi_dmul>
 800d252:	4b77      	ldr	r3, [pc, #476]	@ (800d430 <_dtoa_r+0x5a0>)
 800d254:	2200      	movs	r2, #0
 800d256:	f7f3 f841 	bl	80002dc <__adddf3>
 800d25a:	4605      	mov	r5, r0
 800d25c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d260:	2c00      	cmp	r4, #0
 800d262:	f040 808d 	bne.w	800d380 <_dtoa_r+0x4f0>
 800d266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d26a:	4b72      	ldr	r3, [pc, #456]	@ (800d434 <_dtoa_r+0x5a4>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	f7f3 f833 	bl	80002d8 <__aeabi_dsub>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d27a:	462a      	mov	r2, r5
 800d27c:	4633      	mov	r3, r6
 800d27e:	f7f3 fc73 	bl	8000b68 <__aeabi_dcmpgt>
 800d282:	2800      	cmp	r0, #0
 800d284:	f040 828c 	bne.w	800d7a0 <_dtoa_r+0x910>
 800d288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d28c:	462a      	mov	r2, r5
 800d28e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d292:	f7f3 fc4b 	bl	8000b2c <__aeabi_dcmplt>
 800d296:	2800      	cmp	r0, #0
 800d298:	f040 8129 	bne.w	800d4ee <_dtoa_r+0x65e>
 800d29c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d2a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d2a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f2c0 815b 	blt.w	800d562 <_dtoa_r+0x6d2>
 800d2ac:	2f0e      	cmp	r7, #14
 800d2ae:	f300 8158 	bgt.w	800d562 <_dtoa_r+0x6d2>
 800d2b2:	4b5b      	ldr	r3, [pc, #364]	@ (800d420 <_dtoa_r+0x590>)
 800d2b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2b8:	ed93 7b00 	vldr	d7, [r3]
 800d2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	ed8d 7b00 	vstr	d7, [sp]
 800d2c4:	da03      	bge.n	800d2ce <_dtoa_r+0x43e>
 800d2c6:	9b07      	ldr	r3, [sp, #28]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f340 8102 	ble.w	800d4d2 <_dtoa_r+0x642>
 800d2ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d2d2:	4656      	mov	r6, sl
 800d2d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2d8:	4620      	mov	r0, r4
 800d2da:	4629      	mov	r1, r5
 800d2dc:	f7f3 fade 	bl	800089c <__aeabi_ddiv>
 800d2e0:	f7f3 fc62 	bl	8000ba8 <__aeabi_d2iz>
 800d2e4:	4680      	mov	r8, r0
 800d2e6:	f7f3 f945 	bl	8000574 <__aeabi_i2d>
 800d2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ee:	f7f3 f9ab 	bl	8000648 <__aeabi_dmul>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d2fe:	f7f2 ffeb 	bl	80002d8 <__aeabi_dsub>
 800d302:	f806 4b01 	strb.w	r4, [r6], #1
 800d306:	9d07      	ldr	r5, [sp, #28]
 800d308:	eba6 040a 	sub.w	r4, r6, sl
 800d30c:	42a5      	cmp	r5, r4
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	f040 8118 	bne.w	800d546 <_dtoa_r+0x6b6>
 800d316:	f7f2 ffe1 	bl	80002dc <__adddf3>
 800d31a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d31e:	4604      	mov	r4, r0
 800d320:	460d      	mov	r5, r1
 800d322:	f7f3 fc21 	bl	8000b68 <__aeabi_dcmpgt>
 800d326:	2800      	cmp	r0, #0
 800d328:	f040 80fa 	bne.w	800d520 <_dtoa_r+0x690>
 800d32c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	f7f3 fbf0 	bl	8000b18 <__aeabi_dcmpeq>
 800d338:	b118      	cbz	r0, 800d342 <_dtoa_r+0x4b2>
 800d33a:	f018 0f01 	tst.w	r8, #1
 800d33e:	f040 80ef 	bne.w	800d520 <_dtoa_r+0x690>
 800d342:	4649      	mov	r1, r9
 800d344:	4658      	mov	r0, fp
 800d346:	f000 fb86 	bl	800da56 <_Bfree>
 800d34a:	2300      	movs	r3, #0
 800d34c:	7033      	strb	r3, [r6, #0]
 800d34e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d350:	3701      	adds	r7, #1
 800d352:	601f      	str	r7, [r3, #0]
 800d354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d356:	2b00      	cmp	r3, #0
 800d358:	f43f add1 	beq.w	800cefe <_dtoa_r+0x6e>
 800d35c:	601e      	str	r6, [r3, #0]
 800d35e:	e5ce      	b.n	800cefe <_dtoa_r+0x6e>
 800d360:	07e2      	lsls	r2, r4, #31
 800d362:	d505      	bpl.n	800d370 <_dtoa_r+0x4e0>
 800d364:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d368:	f7f3 f96e 	bl	8000648 <__aeabi_dmul>
 800d36c:	3601      	adds	r6, #1
 800d36e:	2301      	movs	r3, #1
 800d370:	1064      	asrs	r4, r4, #1
 800d372:	3508      	adds	r5, #8
 800d374:	e73f      	b.n	800d1f6 <_dtoa_r+0x366>
 800d376:	2602      	movs	r6, #2
 800d378:	e742      	b.n	800d200 <_dtoa_r+0x370>
 800d37a:	9c07      	ldr	r4, [sp, #28]
 800d37c:	9704      	str	r7, [sp, #16]
 800d37e:	e761      	b.n	800d244 <_dtoa_r+0x3b4>
 800d380:	4b27      	ldr	r3, [pc, #156]	@ (800d420 <_dtoa_r+0x590>)
 800d382:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d38c:	4454      	add	r4, sl
 800d38e:	2900      	cmp	r1, #0
 800d390:	d054      	beq.n	800d43c <_dtoa_r+0x5ac>
 800d392:	4929      	ldr	r1, [pc, #164]	@ (800d438 <_dtoa_r+0x5a8>)
 800d394:	2000      	movs	r0, #0
 800d396:	f7f3 fa81 	bl	800089c <__aeabi_ddiv>
 800d39a:	4633      	mov	r3, r6
 800d39c:	462a      	mov	r2, r5
 800d39e:	f7f2 ff9b 	bl	80002d8 <__aeabi_dsub>
 800d3a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d3a6:	4656      	mov	r6, sl
 800d3a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ac:	f7f3 fbfc 	bl	8000ba8 <__aeabi_d2iz>
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	f7f3 f8df 	bl	8000574 <__aeabi_i2d>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3be:	f7f2 ff8b 	bl	80002d8 <__aeabi_dsub>
 800d3c2:	3530      	adds	r5, #48	@ 0x30
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d3cc:	f806 5b01 	strb.w	r5, [r6], #1
 800d3d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d3d4:	f7f3 fbaa 	bl	8000b2c <__aeabi_dcmplt>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d172      	bne.n	800d4c2 <_dtoa_r+0x632>
 800d3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3e0:	4911      	ldr	r1, [pc, #68]	@ (800d428 <_dtoa_r+0x598>)
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f7f2 ff78 	bl	80002d8 <__aeabi_dsub>
 800d3e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d3ec:	f7f3 fb9e 	bl	8000b2c <__aeabi_dcmplt>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	f040 8096 	bne.w	800d522 <_dtoa_r+0x692>
 800d3f6:	42a6      	cmp	r6, r4
 800d3f8:	f43f af50 	beq.w	800d29c <_dtoa_r+0x40c>
 800d3fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d400:	4b0a      	ldr	r3, [pc, #40]	@ (800d42c <_dtoa_r+0x59c>)
 800d402:	2200      	movs	r2, #0
 800d404:	f7f3 f920 	bl	8000648 <__aeabi_dmul>
 800d408:	4b08      	ldr	r3, [pc, #32]	@ (800d42c <_dtoa_r+0x59c>)
 800d40a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d40e:	2200      	movs	r2, #0
 800d410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d414:	f7f3 f918 	bl	8000648 <__aeabi_dmul>
 800d418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d41c:	e7c4      	b.n	800d3a8 <_dtoa_r+0x518>
 800d41e:	bf00      	nop
 800d420:	08010428 	.word	0x08010428
 800d424:	08010400 	.word	0x08010400
 800d428:	3ff00000 	.word	0x3ff00000
 800d42c:	40240000 	.word	0x40240000
 800d430:	401c0000 	.word	0x401c0000
 800d434:	40140000 	.word	0x40140000
 800d438:	3fe00000 	.word	0x3fe00000
 800d43c:	4631      	mov	r1, r6
 800d43e:	4628      	mov	r0, r5
 800d440:	f7f3 f902 	bl	8000648 <__aeabi_dmul>
 800d444:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d448:	9415      	str	r4, [sp, #84]	@ 0x54
 800d44a:	4656      	mov	r6, sl
 800d44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d450:	f7f3 fbaa 	bl	8000ba8 <__aeabi_d2iz>
 800d454:	4605      	mov	r5, r0
 800d456:	f7f3 f88d 	bl	8000574 <__aeabi_i2d>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d462:	f7f2 ff39 	bl	80002d8 <__aeabi_dsub>
 800d466:	3530      	adds	r5, #48	@ 0x30
 800d468:	f806 5b01 	strb.w	r5, [r6], #1
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	42a6      	cmp	r6, r4
 800d472:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d476:	f04f 0200 	mov.w	r2, #0
 800d47a:	d124      	bne.n	800d4c6 <_dtoa_r+0x636>
 800d47c:	4bac      	ldr	r3, [pc, #688]	@ (800d730 <_dtoa_r+0x8a0>)
 800d47e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d482:	f7f2 ff2b 	bl	80002dc <__adddf3>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d48e:	f7f3 fb6b 	bl	8000b68 <__aeabi_dcmpgt>
 800d492:	2800      	cmp	r0, #0
 800d494:	d145      	bne.n	800d522 <_dtoa_r+0x692>
 800d496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d49a:	49a5      	ldr	r1, [pc, #660]	@ (800d730 <_dtoa_r+0x8a0>)
 800d49c:	2000      	movs	r0, #0
 800d49e:	f7f2 ff1b 	bl	80002d8 <__aeabi_dsub>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4aa:	f7f3 fb3f 	bl	8000b2c <__aeabi_dcmplt>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	f43f aef4 	beq.w	800d29c <_dtoa_r+0x40c>
 800d4b4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d4b6:	1e73      	subs	r3, r6, #1
 800d4b8:	9315      	str	r3, [sp, #84]	@ 0x54
 800d4ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d4be:	2b30      	cmp	r3, #48	@ 0x30
 800d4c0:	d0f8      	beq.n	800d4b4 <_dtoa_r+0x624>
 800d4c2:	9f04      	ldr	r7, [sp, #16]
 800d4c4:	e73d      	b.n	800d342 <_dtoa_r+0x4b2>
 800d4c6:	4b9b      	ldr	r3, [pc, #620]	@ (800d734 <_dtoa_r+0x8a4>)
 800d4c8:	f7f3 f8be 	bl	8000648 <__aeabi_dmul>
 800d4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d0:	e7bc      	b.n	800d44c <_dtoa_r+0x5bc>
 800d4d2:	d10c      	bne.n	800d4ee <_dtoa_r+0x65e>
 800d4d4:	4b98      	ldr	r3, [pc, #608]	@ (800d738 <_dtoa_r+0x8a8>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4dc:	f7f3 f8b4 	bl	8000648 <__aeabi_dmul>
 800d4e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4e4:	f7f3 fb36 	bl	8000b54 <__aeabi_dcmpge>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f000 8157 	beq.w	800d79c <_dtoa_r+0x90c>
 800d4ee:	2400      	movs	r4, #0
 800d4f0:	4625      	mov	r5, r4
 800d4f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4f4:	43db      	mvns	r3, r3
 800d4f6:	9304      	str	r3, [sp, #16]
 800d4f8:	4656      	mov	r6, sl
 800d4fa:	2700      	movs	r7, #0
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	4658      	mov	r0, fp
 800d500:	f000 faa9 	bl	800da56 <_Bfree>
 800d504:	2d00      	cmp	r5, #0
 800d506:	d0dc      	beq.n	800d4c2 <_dtoa_r+0x632>
 800d508:	b12f      	cbz	r7, 800d516 <_dtoa_r+0x686>
 800d50a:	42af      	cmp	r7, r5
 800d50c:	d003      	beq.n	800d516 <_dtoa_r+0x686>
 800d50e:	4639      	mov	r1, r7
 800d510:	4658      	mov	r0, fp
 800d512:	f000 faa0 	bl	800da56 <_Bfree>
 800d516:	4629      	mov	r1, r5
 800d518:	4658      	mov	r0, fp
 800d51a:	f000 fa9c 	bl	800da56 <_Bfree>
 800d51e:	e7d0      	b.n	800d4c2 <_dtoa_r+0x632>
 800d520:	9704      	str	r7, [sp, #16]
 800d522:	4633      	mov	r3, r6
 800d524:	461e      	mov	r6, r3
 800d526:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d52a:	2a39      	cmp	r2, #57	@ 0x39
 800d52c:	d107      	bne.n	800d53e <_dtoa_r+0x6ae>
 800d52e:	459a      	cmp	sl, r3
 800d530:	d1f8      	bne.n	800d524 <_dtoa_r+0x694>
 800d532:	9a04      	ldr	r2, [sp, #16]
 800d534:	3201      	adds	r2, #1
 800d536:	9204      	str	r2, [sp, #16]
 800d538:	2230      	movs	r2, #48	@ 0x30
 800d53a:	f88a 2000 	strb.w	r2, [sl]
 800d53e:	781a      	ldrb	r2, [r3, #0]
 800d540:	3201      	adds	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]
 800d544:	e7bd      	b.n	800d4c2 <_dtoa_r+0x632>
 800d546:	4b7b      	ldr	r3, [pc, #492]	@ (800d734 <_dtoa_r+0x8a4>)
 800d548:	2200      	movs	r2, #0
 800d54a:	f7f3 f87d 	bl	8000648 <__aeabi_dmul>
 800d54e:	2200      	movs	r2, #0
 800d550:	2300      	movs	r3, #0
 800d552:	4604      	mov	r4, r0
 800d554:	460d      	mov	r5, r1
 800d556:	f7f3 fadf 	bl	8000b18 <__aeabi_dcmpeq>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	f43f aeba 	beq.w	800d2d4 <_dtoa_r+0x444>
 800d560:	e6ef      	b.n	800d342 <_dtoa_r+0x4b2>
 800d562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d564:	2a00      	cmp	r2, #0
 800d566:	f000 80db 	beq.w	800d720 <_dtoa_r+0x890>
 800d56a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d56c:	2a01      	cmp	r2, #1
 800d56e:	f300 80bf 	bgt.w	800d6f0 <_dtoa_r+0x860>
 800d572:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d574:	2a00      	cmp	r2, #0
 800d576:	f000 80b7 	beq.w	800d6e8 <_dtoa_r+0x858>
 800d57a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d57e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d580:	4646      	mov	r6, r8
 800d582:	9a08      	ldr	r2, [sp, #32]
 800d584:	2101      	movs	r1, #1
 800d586:	441a      	add	r2, r3
 800d588:	4658      	mov	r0, fp
 800d58a:	4498      	add	r8, r3
 800d58c:	9208      	str	r2, [sp, #32]
 800d58e:	f000 fafd 	bl	800db8c <__i2b>
 800d592:	4605      	mov	r5, r0
 800d594:	b15e      	cbz	r6, 800d5ae <_dtoa_r+0x71e>
 800d596:	9b08      	ldr	r3, [sp, #32]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	dd08      	ble.n	800d5ae <_dtoa_r+0x71e>
 800d59c:	42b3      	cmp	r3, r6
 800d59e:	9a08      	ldr	r2, [sp, #32]
 800d5a0:	bfa8      	it	ge
 800d5a2:	4633      	movge	r3, r6
 800d5a4:	eba8 0803 	sub.w	r8, r8, r3
 800d5a8:	1af6      	subs	r6, r6, r3
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	9308      	str	r3, [sp, #32]
 800d5ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5b0:	b1f3      	cbz	r3, 800d5f0 <_dtoa_r+0x760>
 800d5b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80b7 	beq.w	800d728 <_dtoa_r+0x898>
 800d5ba:	b18c      	cbz	r4, 800d5e0 <_dtoa_r+0x750>
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4658      	mov	r0, fp
 800d5c2:	f000 fba3 	bl	800dd0c <__pow5mult>
 800d5c6:	464a      	mov	r2, r9
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	4658      	mov	r0, fp
 800d5ce:	f000 faf3 	bl	800dbb8 <__multiply>
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	9004      	str	r0, [sp, #16]
 800d5d6:	4658      	mov	r0, fp
 800d5d8:	f000 fa3d 	bl	800da56 <_Bfree>
 800d5dc:	9b04      	ldr	r3, [sp, #16]
 800d5de:	4699      	mov	r9, r3
 800d5e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5e2:	1b1a      	subs	r2, r3, r4
 800d5e4:	d004      	beq.n	800d5f0 <_dtoa_r+0x760>
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	4658      	mov	r0, fp
 800d5ea:	f000 fb8f 	bl	800dd0c <__pow5mult>
 800d5ee:	4681      	mov	r9, r0
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	4658      	mov	r0, fp
 800d5f4:	f000 faca 	bl	800db8c <__i2b>
 800d5f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 81cc 	beq.w	800d99a <_dtoa_r+0xb0a>
 800d602:	461a      	mov	r2, r3
 800d604:	4601      	mov	r1, r0
 800d606:	4658      	mov	r0, fp
 800d608:	f000 fb80 	bl	800dd0c <__pow5mult>
 800d60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60e:	2b01      	cmp	r3, #1
 800d610:	4604      	mov	r4, r0
 800d612:	f300 8095 	bgt.w	800d740 <_dtoa_r+0x8b0>
 800d616:	9b02      	ldr	r3, [sp, #8]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f040 8087 	bne.w	800d72c <_dtoa_r+0x89c>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d624:	2b00      	cmp	r3, #0
 800d626:	f040 8089 	bne.w	800d73c <_dtoa_r+0x8ac>
 800d62a:	9b03      	ldr	r3, [sp, #12]
 800d62c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d630:	0d1b      	lsrs	r3, r3, #20
 800d632:	051b      	lsls	r3, r3, #20
 800d634:	b12b      	cbz	r3, 800d642 <_dtoa_r+0x7b2>
 800d636:	9b08      	ldr	r3, [sp, #32]
 800d638:	3301      	adds	r3, #1
 800d63a:	9308      	str	r3, [sp, #32]
 800d63c:	f108 0801 	add.w	r8, r8, #1
 800d640:	2301      	movs	r3, #1
 800d642:	930a      	str	r3, [sp, #40]	@ 0x28
 800d644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 81ad 	beq.w	800d9a6 <_dtoa_r+0xb16>
 800d64c:	6923      	ldr	r3, [r4, #16]
 800d64e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d652:	6918      	ldr	r0, [r3, #16]
 800d654:	f000 fa4e 	bl	800daf4 <__hi0bits>
 800d658:	f1c0 0020 	rsb	r0, r0, #32
 800d65c:	9b08      	ldr	r3, [sp, #32]
 800d65e:	4418      	add	r0, r3
 800d660:	f010 001f 	ands.w	r0, r0, #31
 800d664:	d077      	beq.n	800d756 <_dtoa_r+0x8c6>
 800d666:	f1c0 0320 	rsb	r3, r0, #32
 800d66a:	2b04      	cmp	r3, #4
 800d66c:	dd6b      	ble.n	800d746 <_dtoa_r+0x8b6>
 800d66e:	9b08      	ldr	r3, [sp, #32]
 800d670:	f1c0 001c 	rsb	r0, r0, #28
 800d674:	4403      	add	r3, r0
 800d676:	4480      	add	r8, r0
 800d678:	4406      	add	r6, r0
 800d67a:	9308      	str	r3, [sp, #32]
 800d67c:	f1b8 0f00 	cmp.w	r8, #0
 800d680:	dd05      	ble.n	800d68e <_dtoa_r+0x7fe>
 800d682:	4649      	mov	r1, r9
 800d684:	4642      	mov	r2, r8
 800d686:	4658      	mov	r0, fp
 800d688:	f000 fb80 	bl	800dd8c <__lshift>
 800d68c:	4681      	mov	r9, r0
 800d68e:	9b08      	ldr	r3, [sp, #32]
 800d690:	2b00      	cmp	r3, #0
 800d692:	dd05      	ble.n	800d6a0 <_dtoa_r+0x810>
 800d694:	4621      	mov	r1, r4
 800d696:	461a      	mov	r2, r3
 800d698:	4658      	mov	r0, fp
 800d69a:	f000 fb77 	bl	800dd8c <__lshift>
 800d69e:	4604      	mov	r4, r0
 800d6a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d059      	beq.n	800d75a <_dtoa_r+0x8ca>
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4648      	mov	r0, r9
 800d6aa:	f000 fbdb 	bl	800de64 <__mcmp>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	da53      	bge.n	800d75a <_dtoa_r+0x8ca>
 800d6b2:	1e7b      	subs	r3, r7, #1
 800d6b4:	9304      	str	r3, [sp, #16]
 800d6b6:	4649      	mov	r1, r9
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	220a      	movs	r2, #10
 800d6bc:	4658      	mov	r0, fp
 800d6be:	f000 f9d3 	bl	800da68 <__multadd>
 800d6c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6c4:	4681      	mov	r9, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 816f 	beq.w	800d9aa <_dtoa_r+0xb1a>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	220a      	movs	r2, #10
 800d6d2:	4658      	mov	r0, fp
 800d6d4:	f000 f9c8 	bl	800da68 <__multadd>
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	4605      	mov	r5, r0
 800d6de:	dc67      	bgt.n	800d7b0 <_dtoa_r+0x920>
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	dc41      	bgt.n	800d76a <_dtoa_r+0x8da>
 800d6e6:	e063      	b.n	800d7b0 <_dtoa_r+0x920>
 800d6e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d6ea:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d6ee:	e746      	b.n	800d57e <_dtoa_r+0x6ee>
 800d6f0:	9b07      	ldr	r3, [sp, #28]
 800d6f2:	1e5c      	subs	r4, r3, #1
 800d6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6f6:	42a3      	cmp	r3, r4
 800d6f8:	bfbf      	itttt	lt
 800d6fa:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d6fc:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d6fe:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d700:	1ae3      	sublt	r3, r4, r3
 800d702:	bfb4      	ite	lt
 800d704:	18d2      	addlt	r2, r2, r3
 800d706:	1b1c      	subge	r4, r3, r4
 800d708:	9b07      	ldr	r3, [sp, #28]
 800d70a:	bfbc      	itt	lt
 800d70c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d70e:	2400      	movlt	r4, #0
 800d710:	2b00      	cmp	r3, #0
 800d712:	bfb5      	itete	lt
 800d714:	eba8 0603 	sublt.w	r6, r8, r3
 800d718:	9b07      	ldrge	r3, [sp, #28]
 800d71a:	2300      	movlt	r3, #0
 800d71c:	4646      	movge	r6, r8
 800d71e:	e730      	b.n	800d582 <_dtoa_r+0x6f2>
 800d720:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d722:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d724:	4646      	mov	r6, r8
 800d726:	e735      	b.n	800d594 <_dtoa_r+0x704>
 800d728:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d72a:	e75c      	b.n	800d5e6 <_dtoa_r+0x756>
 800d72c:	2300      	movs	r3, #0
 800d72e:	e788      	b.n	800d642 <_dtoa_r+0x7b2>
 800d730:	3fe00000 	.word	0x3fe00000
 800d734:	40240000 	.word	0x40240000
 800d738:	40140000 	.word	0x40140000
 800d73c:	9b02      	ldr	r3, [sp, #8]
 800d73e:	e780      	b.n	800d642 <_dtoa_r+0x7b2>
 800d740:	2300      	movs	r3, #0
 800d742:	930a      	str	r3, [sp, #40]	@ 0x28
 800d744:	e782      	b.n	800d64c <_dtoa_r+0x7bc>
 800d746:	d099      	beq.n	800d67c <_dtoa_r+0x7ec>
 800d748:	9a08      	ldr	r2, [sp, #32]
 800d74a:	331c      	adds	r3, #28
 800d74c:	441a      	add	r2, r3
 800d74e:	4498      	add	r8, r3
 800d750:	441e      	add	r6, r3
 800d752:	9208      	str	r2, [sp, #32]
 800d754:	e792      	b.n	800d67c <_dtoa_r+0x7ec>
 800d756:	4603      	mov	r3, r0
 800d758:	e7f6      	b.n	800d748 <_dtoa_r+0x8b8>
 800d75a:	9b07      	ldr	r3, [sp, #28]
 800d75c:	9704      	str	r7, [sp, #16]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	dc20      	bgt.n	800d7a4 <_dtoa_r+0x914>
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d766:	2b02      	cmp	r3, #2
 800d768:	dd1e      	ble.n	800d7a8 <_dtoa_r+0x918>
 800d76a:	9b00      	ldr	r3, [sp, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f47f aec0 	bne.w	800d4f2 <_dtoa_r+0x662>
 800d772:	4621      	mov	r1, r4
 800d774:	2205      	movs	r2, #5
 800d776:	4658      	mov	r0, fp
 800d778:	f000 f976 	bl	800da68 <__multadd>
 800d77c:	4601      	mov	r1, r0
 800d77e:	4604      	mov	r4, r0
 800d780:	4648      	mov	r0, r9
 800d782:	f000 fb6f 	bl	800de64 <__mcmp>
 800d786:	2800      	cmp	r0, #0
 800d788:	f77f aeb3 	ble.w	800d4f2 <_dtoa_r+0x662>
 800d78c:	4656      	mov	r6, sl
 800d78e:	2331      	movs	r3, #49	@ 0x31
 800d790:	f806 3b01 	strb.w	r3, [r6], #1
 800d794:	9b04      	ldr	r3, [sp, #16]
 800d796:	3301      	adds	r3, #1
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	e6ae      	b.n	800d4fa <_dtoa_r+0x66a>
 800d79c:	9c07      	ldr	r4, [sp, #28]
 800d79e:	9704      	str	r7, [sp, #16]
 800d7a0:	4625      	mov	r5, r4
 800d7a2:	e7f3      	b.n	800d78c <_dtoa_r+0x8fc>
 800d7a4:	9b07      	ldr	r3, [sp, #28]
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f000 8101 	beq.w	800d9b2 <_dtoa_r+0xb22>
 800d7b0:	2e00      	cmp	r6, #0
 800d7b2:	dd05      	ble.n	800d7c0 <_dtoa_r+0x930>
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4632      	mov	r2, r6
 800d7b8:	4658      	mov	r0, fp
 800d7ba:	f000 fae7 	bl	800dd8c <__lshift>
 800d7be:	4605      	mov	r5, r0
 800d7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d059      	beq.n	800d87a <_dtoa_r+0x9ea>
 800d7c6:	6869      	ldr	r1, [r5, #4]
 800d7c8:	4658      	mov	r0, fp
 800d7ca:	f000 f91f 	bl	800da0c <_Balloc>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	b920      	cbnz	r0, 800d7dc <_dtoa_r+0x94c>
 800d7d2:	4b83      	ldr	r3, [pc, #524]	@ (800d9e0 <_dtoa_r+0xb50>)
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d7da:	e480      	b.n	800d0de <_dtoa_r+0x24e>
 800d7dc:	692a      	ldr	r2, [r5, #16]
 800d7de:	3202      	adds	r2, #2
 800d7e0:	0092      	lsls	r2, r2, #2
 800d7e2:	f105 010c 	add.w	r1, r5, #12
 800d7e6:	300c      	adds	r0, #12
 800d7e8:	f7ff fa44 	bl	800cc74 <memcpy>
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4658      	mov	r0, fp
 800d7f2:	f000 facb 	bl	800dd8c <__lshift>
 800d7f6:	f10a 0301 	add.w	r3, sl, #1
 800d7fa:	9307      	str	r3, [sp, #28]
 800d7fc:	9b00      	ldr	r3, [sp, #0]
 800d7fe:	4453      	add	r3, sl
 800d800:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d802:	9b02      	ldr	r3, [sp, #8]
 800d804:	f003 0301 	and.w	r3, r3, #1
 800d808:	462f      	mov	r7, r5
 800d80a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d80c:	4605      	mov	r5, r0
 800d80e:	9b07      	ldr	r3, [sp, #28]
 800d810:	4621      	mov	r1, r4
 800d812:	3b01      	subs	r3, #1
 800d814:	4648      	mov	r0, r9
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	f7ff fab0 	bl	800cd7c <quorem>
 800d81c:	4639      	mov	r1, r7
 800d81e:	9002      	str	r0, [sp, #8]
 800d820:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d824:	4648      	mov	r0, r9
 800d826:	f000 fb1d 	bl	800de64 <__mcmp>
 800d82a:	462a      	mov	r2, r5
 800d82c:	9008      	str	r0, [sp, #32]
 800d82e:	4621      	mov	r1, r4
 800d830:	4658      	mov	r0, fp
 800d832:	f000 fb33 	bl	800de9c <__mdiff>
 800d836:	68c2      	ldr	r2, [r0, #12]
 800d838:	4606      	mov	r6, r0
 800d83a:	bb02      	cbnz	r2, 800d87e <_dtoa_r+0x9ee>
 800d83c:	4601      	mov	r1, r0
 800d83e:	4648      	mov	r0, r9
 800d840:	f000 fb10 	bl	800de64 <__mcmp>
 800d844:	4602      	mov	r2, r0
 800d846:	4631      	mov	r1, r6
 800d848:	4658      	mov	r0, fp
 800d84a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d84c:	f000 f903 	bl	800da56 <_Bfree>
 800d850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d854:	9e07      	ldr	r6, [sp, #28]
 800d856:	ea43 0102 	orr.w	r1, r3, r2
 800d85a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d85c:	4319      	orrs	r1, r3
 800d85e:	d110      	bne.n	800d882 <_dtoa_r+0x9f2>
 800d860:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d864:	d029      	beq.n	800d8ba <_dtoa_r+0xa2a>
 800d866:	9b08      	ldr	r3, [sp, #32]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dd02      	ble.n	800d872 <_dtoa_r+0x9e2>
 800d86c:	9b02      	ldr	r3, [sp, #8]
 800d86e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d872:	9b00      	ldr	r3, [sp, #0]
 800d874:	f883 8000 	strb.w	r8, [r3]
 800d878:	e640      	b.n	800d4fc <_dtoa_r+0x66c>
 800d87a:	4628      	mov	r0, r5
 800d87c:	e7bb      	b.n	800d7f6 <_dtoa_r+0x966>
 800d87e:	2201      	movs	r2, #1
 800d880:	e7e1      	b.n	800d846 <_dtoa_r+0x9b6>
 800d882:	9b08      	ldr	r3, [sp, #32]
 800d884:	2b00      	cmp	r3, #0
 800d886:	db04      	blt.n	800d892 <_dtoa_r+0xa02>
 800d888:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d88a:	430b      	orrs	r3, r1
 800d88c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d88e:	430b      	orrs	r3, r1
 800d890:	d120      	bne.n	800d8d4 <_dtoa_r+0xa44>
 800d892:	2a00      	cmp	r2, #0
 800d894:	dded      	ble.n	800d872 <_dtoa_r+0x9e2>
 800d896:	4649      	mov	r1, r9
 800d898:	2201      	movs	r2, #1
 800d89a:	4658      	mov	r0, fp
 800d89c:	f000 fa76 	bl	800dd8c <__lshift>
 800d8a0:	4621      	mov	r1, r4
 800d8a2:	4681      	mov	r9, r0
 800d8a4:	f000 fade 	bl	800de64 <__mcmp>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	dc03      	bgt.n	800d8b4 <_dtoa_r+0xa24>
 800d8ac:	d1e1      	bne.n	800d872 <_dtoa_r+0x9e2>
 800d8ae:	f018 0f01 	tst.w	r8, #1
 800d8b2:	d0de      	beq.n	800d872 <_dtoa_r+0x9e2>
 800d8b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d8b8:	d1d8      	bne.n	800d86c <_dtoa_r+0x9dc>
 800d8ba:	9a00      	ldr	r2, [sp, #0]
 800d8bc:	2339      	movs	r3, #57	@ 0x39
 800d8be:	7013      	strb	r3, [r2, #0]
 800d8c0:	4633      	mov	r3, r6
 800d8c2:	461e      	mov	r6, r3
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d8ca:	2a39      	cmp	r2, #57	@ 0x39
 800d8cc:	d052      	beq.n	800d974 <_dtoa_r+0xae4>
 800d8ce:	3201      	adds	r2, #1
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	e613      	b.n	800d4fc <_dtoa_r+0x66c>
 800d8d4:	2a00      	cmp	r2, #0
 800d8d6:	dd07      	ble.n	800d8e8 <_dtoa_r+0xa58>
 800d8d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d8dc:	d0ed      	beq.n	800d8ba <_dtoa_r+0xa2a>
 800d8de:	9a00      	ldr	r2, [sp, #0]
 800d8e0:	f108 0301 	add.w	r3, r8, #1
 800d8e4:	7013      	strb	r3, [r2, #0]
 800d8e6:	e609      	b.n	800d4fc <_dtoa_r+0x66c>
 800d8e8:	9b07      	ldr	r3, [sp, #28]
 800d8ea:	9a07      	ldr	r2, [sp, #28]
 800d8ec:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d8f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d028      	beq.n	800d948 <_dtoa_r+0xab8>
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	220a      	movs	r2, #10
 800d8fc:	4658      	mov	r0, fp
 800d8fe:	f000 f8b3 	bl	800da68 <__multadd>
 800d902:	42af      	cmp	r7, r5
 800d904:	4681      	mov	r9, r0
 800d906:	f04f 0300 	mov.w	r3, #0
 800d90a:	f04f 020a 	mov.w	r2, #10
 800d90e:	4639      	mov	r1, r7
 800d910:	4658      	mov	r0, fp
 800d912:	d107      	bne.n	800d924 <_dtoa_r+0xa94>
 800d914:	f000 f8a8 	bl	800da68 <__multadd>
 800d918:	4607      	mov	r7, r0
 800d91a:	4605      	mov	r5, r0
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	3301      	adds	r3, #1
 800d920:	9307      	str	r3, [sp, #28]
 800d922:	e774      	b.n	800d80e <_dtoa_r+0x97e>
 800d924:	f000 f8a0 	bl	800da68 <__multadd>
 800d928:	4629      	mov	r1, r5
 800d92a:	4607      	mov	r7, r0
 800d92c:	2300      	movs	r3, #0
 800d92e:	220a      	movs	r2, #10
 800d930:	4658      	mov	r0, fp
 800d932:	f000 f899 	bl	800da68 <__multadd>
 800d936:	4605      	mov	r5, r0
 800d938:	e7f0      	b.n	800d91c <_dtoa_r+0xa8c>
 800d93a:	9b00      	ldr	r3, [sp, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	bfcc      	ite	gt
 800d940:	461e      	movgt	r6, r3
 800d942:	2601      	movle	r6, #1
 800d944:	4456      	add	r6, sl
 800d946:	2700      	movs	r7, #0
 800d948:	4649      	mov	r1, r9
 800d94a:	2201      	movs	r2, #1
 800d94c:	4658      	mov	r0, fp
 800d94e:	f000 fa1d 	bl	800dd8c <__lshift>
 800d952:	4621      	mov	r1, r4
 800d954:	4681      	mov	r9, r0
 800d956:	f000 fa85 	bl	800de64 <__mcmp>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	dcb0      	bgt.n	800d8c0 <_dtoa_r+0xa30>
 800d95e:	d102      	bne.n	800d966 <_dtoa_r+0xad6>
 800d960:	f018 0f01 	tst.w	r8, #1
 800d964:	d1ac      	bne.n	800d8c0 <_dtoa_r+0xa30>
 800d966:	4633      	mov	r3, r6
 800d968:	461e      	mov	r6, r3
 800d96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d96e:	2a30      	cmp	r2, #48	@ 0x30
 800d970:	d0fa      	beq.n	800d968 <_dtoa_r+0xad8>
 800d972:	e5c3      	b.n	800d4fc <_dtoa_r+0x66c>
 800d974:	459a      	cmp	sl, r3
 800d976:	d1a4      	bne.n	800d8c2 <_dtoa_r+0xa32>
 800d978:	9b04      	ldr	r3, [sp, #16]
 800d97a:	3301      	adds	r3, #1
 800d97c:	9304      	str	r3, [sp, #16]
 800d97e:	2331      	movs	r3, #49	@ 0x31
 800d980:	f88a 3000 	strb.w	r3, [sl]
 800d984:	e5ba      	b.n	800d4fc <_dtoa_r+0x66c>
 800d986:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d9e4 <_dtoa_r+0xb54>
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f43f aab6 	beq.w	800cefe <_dtoa_r+0x6e>
 800d992:	f10a 0308 	add.w	r3, sl, #8
 800d996:	f7ff bab0 	b.w	800cefa <_dtoa_r+0x6a>
 800d99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	f77f ae3a 	ble.w	800d616 <_dtoa_r+0x786>
 800d9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	e658      	b.n	800d65c <_dtoa_r+0x7cc>
 800d9aa:	9b00      	ldr	r3, [sp, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f77f aed9 	ble.w	800d764 <_dtoa_r+0x8d4>
 800d9b2:	4656      	mov	r6, sl
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	4648      	mov	r0, r9
 800d9b8:	f7ff f9e0 	bl	800cd7c <quorem>
 800d9bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d9c0:	f806 8b01 	strb.w	r8, [r6], #1
 800d9c4:	9b00      	ldr	r3, [sp, #0]
 800d9c6:	eba6 020a 	sub.w	r2, r6, sl
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	ddb5      	ble.n	800d93a <_dtoa_r+0xaaa>
 800d9ce:	4649      	mov	r1, r9
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	220a      	movs	r2, #10
 800d9d4:	4658      	mov	r0, fp
 800d9d6:	f000 f847 	bl	800da68 <__multadd>
 800d9da:	4681      	mov	r9, r0
 800d9dc:	e7ea      	b.n	800d9b4 <_dtoa_r+0xb24>
 800d9de:	bf00      	nop
 800d9e0:	0801032f 	.word	0x0801032f
 800d9e4:	08010322 	.word	0x08010322

0800d9e8 <__ascii_mbtowc>:
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	b901      	cbnz	r1, 800d9ee <__ascii_mbtowc+0x6>
 800d9ec:	a901      	add	r1, sp, #4
 800d9ee:	b142      	cbz	r2, 800da02 <__ascii_mbtowc+0x1a>
 800d9f0:	b14b      	cbz	r3, 800da06 <__ascii_mbtowc+0x1e>
 800d9f2:	7813      	ldrb	r3, [r2, #0]
 800d9f4:	600b      	str	r3, [r1, #0]
 800d9f6:	7812      	ldrb	r2, [r2, #0]
 800d9f8:	1e10      	subs	r0, r2, #0
 800d9fa:	bf18      	it	ne
 800d9fc:	2001      	movne	r0, #1
 800d9fe:	b002      	add	sp, #8
 800da00:	4770      	bx	lr
 800da02:	4610      	mov	r0, r2
 800da04:	e7fb      	b.n	800d9fe <__ascii_mbtowc+0x16>
 800da06:	f06f 0001 	mvn.w	r0, #1
 800da0a:	e7f8      	b.n	800d9fe <__ascii_mbtowc+0x16>

0800da0c <_Balloc>:
 800da0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800da0e:	b570      	push	{r4, r5, r6, lr}
 800da10:	4605      	mov	r5, r0
 800da12:	460c      	mov	r4, r1
 800da14:	b17b      	cbz	r3, 800da36 <_Balloc+0x2a>
 800da16:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800da18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800da1c:	b9a0      	cbnz	r0, 800da48 <_Balloc+0x3c>
 800da1e:	2101      	movs	r1, #1
 800da20:	fa01 f604 	lsl.w	r6, r1, r4
 800da24:	1d72      	adds	r2, r6, #5
 800da26:	0092      	lsls	r2, r2, #2
 800da28:	4628      	mov	r0, r5
 800da2a:	f000 fd73 	bl	800e514 <_calloc_r>
 800da2e:	b148      	cbz	r0, 800da44 <_Balloc+0x38>
 800da30:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800da34:	e00b      	b.n	800da4e <_Balloc+0x42>
 800da36:	2221      	movs	r2, #33	@ 0x21
 800da38:	2104      	movs	r1, #4
 800da3a:	f000 fd6b 	bl	800e514 <_calloc_r>
 800da3e:	6468      	str	r0, [r5, #68]	@ 0x44
 800da40:	2800      	cmp	r0, #0
 800da42:	d1e8      	bne.n	800da16 <_Balloc+0xa>
 800da44:	2000      	movs	r0, #0
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	6802      	ldr	r2, [r0, #0]
 800da4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800da4e:	2300      	movs	r3, #0
 800da50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da54:	e7f7      	b.n	800da46 <_Balloc+0x3a>

0800da56 <_Bfree>:
 800da56:	b131      	cbz	r1, 800da66 <_Bfree+0x10>
 800da58:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800da5a:	684a      	ldr	r2, [r1, #4]
 800da5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800da60:	6008      	str	r0, [r1, #0]
 800da62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800da66:	4770      	bx	lr

0800da68 <__multadd>:
 800da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6c:	690d      	ldr	r5, [r1, #16]
 800da6e:	4607      	mov	r7, r0
 800da70:	460c      	mov	r4, r1
 800da72:	461e      	mov	r6, r3
 800da74:	f101 0c14 	add.w	ip, r1, #20
 800da78:	2000      	movs	r0, #0
 800da7a:	f8dc 3000 	ldr.w	r3, [ip]
 800da7e:	b299      	uxth	r1, r3
 800da80:	fb02 6101 	mla	r1, r2, r1, r6
 800da84:	0c1e      	lsrs	r6, r3, #16
 800da86:	0c0b      	lsrs	r3, r1, #16
 800da88:	fb02 3306 	mla	r3, r2, r6, r3
 800da8c:	b289      	uxth	r1, r1
 800da8e:	3001      	adds	r0, #1
 800da90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da94:	4285      	cmp	r5, r0
 800da96:	f84c 1b04 	str.w	r1, [ip], #4
 800da9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da9e:	dcec      	bgt.n	800da7a <__multadd+0x12>
 800daa0:	b30e      	cbz	r6, 800dae6 <__multadd+0x7e>
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	42ab      	cmp	r3, r5
 800daa6:	dc19      	bgt.n	800dadc <__multadd+0x74>
 800daa8:	6861      	ldr	r1, [r4, #4]
 800daaa:	4638      	mov	r0, r7
 800daac:	3101      	adds	r1, #1
 800daae:	f7ff ffad 	bl	800da0c <_Balloc>
 800dab2:	4680      	mov	r8, r0
 800dab4:	b928      	cbnz	r0, 800dac2 <__multadd+0x5a>
 800dab6:	4602      	mov	r2, r0
 800dab8:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <__multadd+0x84>)
 800daba:	480d      	ldr	r0, [pc, #52]	@ (800daf0 <__multadd+0x88>)
 800dabc:	21ba      	movs	r1, #186	@ 0xba
 800dabe:	f000 fd0b 	bl	800e4d8 <__assert_func>
 800dac2:	6922      	ldr	r2, [r4, #16]
 800dac4:	3202      	adds	r2, #2
 800dac6:	f104 010c 	add.w	r1, r4, #12
 800daca:	0092      	lsls	r2, r2, #2
 800dacc:	300c      	adds	r0, #12
 800dace:	f7ff f8d1 	bl	800cc74 <memcpy>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4638      	mov	r0, r7
 800dad6:	f7ff ffbe 	bl	800da56 <_Bfree>
 800dada:	4644      	mov	r4, r8
 800dadc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dae0:	3501      	adds	r5, #1
 800dae2:	615e      	str	r6, [r3, #20]
 800dae4:	6125      	str	r5, [r4, #16]
 800dae6:	4620      	mov	r0, r4
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	0801032f 	.word	0x0801032f
 800daf0:	08010398 	.word	0x08010398

0800daf4 <__hi0bits>:
 800daf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800daf8:	4603      	mov	r3, r0
 800dafa:	bf36      	itet	cc
 800dafc:	0403      	lslcc	r3, r0, #16
 800dafe:	2000      	movcs	r0, #0
 800db00:	2010      	movcc	r0, #16
 800db02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db06:	bf3c      	itt	cc
 800db08:	021b      	lslcc	r3, r3, #8
 800db0a:	3008      	addcc	r0, #8
 800db0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db10:	bf3c      	itt	cc
 800db12:	011b      	lslcc	r3, r3, #4
 800db14:	3004      	addcc	r0, #4
 800db16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db1a:	bf3c      	itt	cc
 800db1c:	009b      	lslcc	r3, r3, #2
 800db1e:	3002      	addcc	r0, #2
 800db20:	2b00      	cmp	r3, #0
 800db22:	db05      	blt.n	800db30 <__hi0bits+0x3c>
 800db24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db28:	f100 0001 	add.w	r0, r0, #1
 800db2c:	bf08      	it	eq
 800db2e:	2020      	moveq	r0, #32
 800db30:	4770      	bx	lr

0800db32 <__lo0bits>:
 800db32:	6803      	ldr	r3, [r0, #0]
 800db34:	4602      	mov	r2, r0
 800db36:	f013 0007 	ands.w	r0, r3, #7
 800db3a:	d00b      	beq.n	800db54 <__lo0bits+0x22>
 800db3c:	07d9      	lsls	r1, r3, #31
 800db3e:	d421      	bmi.n	800db84 <__lo0bits+0x52>
 800db40:	0798      	lsls	r0, r3, #30
 800db42:	bf49      	itett	mi
 800db44:	085b      	lsrmi	r3, r3, #1
 800db46:	089b      	lsrpl	r3, r3, #2
 800db48:	2001      	movmi	r0, #1
 800db4a:	6013      	strmi	r3, [r2, #0]
 800db4c:	bf5c      	itt	pl
 800db4e:	6013      	strpl	r3, [r2, #0]
 800db50:	2002      	movpl	r0, #2
 800db52:	4770      	bx	lr
 800db54:	b299      	uxth	r1, r3
 800db56:	b909      	cbnz	r1, 800db5c <__lo0bits+0x2a>
 800db58:	0c1b      	lsrs	r3, r3, #16
 800db5a:	2010      	movs	r0, #16
 800db5c:	b2d9      	uxtb	r1, r3
 800db5e:	b909      	cbnz	r1, 800db64 <__lo0bits+0x32>
 800db60:	3008      	adds	r0, #8
 800db62:	0a1b      	lsrs	r3, r3, #8
 800db64:	0719      	lsls	r1, r3, #28
 800db66:	bf04      	itt	eq
 800db68:	091b      	lsreq	r3, r3, #4
 800db6a:	3004      	addeq	r0, #4
 800db6c:	0799      	lsls	r1, r3, #30
 800db6e:	bf04      	itt	eq
 800db70:	089b      	lsreq	r3, r3, #2
 800db72:	3002      	addeq	r0, #2
 800db74:	07d9      	lsls	r1, r3, #31
 800db76:	d403      	bmi.n	800db80 <__lo0bits+0x4e>
 800db78:	085b      	lsrs	r3, r3, #1
 800db7a:	f100 0001 	add.w	r0, r0, #1
 800db7e:	d003      	beq.n	800db88 <__lo0bits+0x56>
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	4770      	bx	lr
 800db84:	2000      	movs	r0, #0
 800db86:	4770      	bx	lr
 800db88:	2020      	movs	r0, #32
 800db8a:	4770      	bx	lr

0800db8c <__i2b>:
 800db8c:	b510      	push	{r4, lr}
 800db8e:	460c      	mov	r4, r1
 800db90:	2101      	movs	r1, #1
 800db92:	f7ff ff3b 	bl	800da0c <_Balloc>
 800db96:	4602      	mov	r2, r0
 800db98:	b928      	cbnz	r0, 800dba6 <__i2b+0x1a>
 800db9a:	4b05      	ldr	r3, [pc, #20]	@ (800dbb0 <__i2b+0x24>)
 800db9c:	4805      	ldr	r0, [pc, #20]	@ (800dbb4 <__i2b+0x28>)
 800db9e:	f240 1145 	movw	r1, #325	@ 0x145
 800dba2:	f000 fc99 	bl	800e4d8 <__assert_func>
 800dba6:	2301      	movs	r3, #1
 800dba8:	6144      	str	r4, [r0, #20]
 800dbaa:	6103      	str	r3, [r0, #16]
 800dbac:	bd10      	pop	{r4, pc}
 800dbae:	bf00      	nop
 800dbb0:	0801032f 	.word	0x0801032f
 800dbb4:	08010398 	.word	0x08010398

0800dbb8 <__multiply>:
 800dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	4614      	mov	r4, r2
 800dbbe:	690a      	ldr	r2, [r1, #16]
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	bfa8      	it	ge
 800dbc6:	4623      	movge	r3, r4
 800dbc8:	460f      	mov	r7, r1
 800dbca:	bfa4      	itt	ge
 800dbcc:	460c      	movge	r4, r1
 800dbce:	461f      	movge	r7, r3
 800dbd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dbd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	6861      	ldr	r1, [r4, #4]
 800dbdc:	eb0a 0609 	add.w	r6, sl, r9
 800dbe0:	42b3      	cmp	r3, r6
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	bfb8      	it	lt
 800dbe6:	3101      	addlt	r1, #1
 800dbe8:	f7ff ff10 	bl	800da0c <_Balloc>
 800dbec:	b930      	cbnz	r0, 800dbfc <__multiply+0x44>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	4b44      	ldr	r3, [pc, #272]	@ (800dd04 <__multiply+0x14c>)
 800dbf2:	4845      	ldr	r0, [pc, #276]	@ (800dd08 <__multiply+0x150>)
 800dbf4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dbf8:	f000 fc6e 	bl	800e4d8 <__assert_func>
 800dbfc:	f100 0514 	add.w	r5, r0, #20
 800dc00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc04:	462b      	mov	r3, r5
 800dc06:	2200      	movs	r2, #0
 800dc08:	4543      	cmp	r3, r8
 800dc0a:	d321      	bcc.n	800dc50 <__multiply+0x98>
 800dc0c:	f107 0114 	add.w	r1, r7, #20
 800dc10:	f104 0214 	add.w	r2, r4, #20
 800dc14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dc1c:	9302      	str	r3, [sp, #8]
 800dc1e:	1b13      	subs	r3, r2, r4
 800dc20:	3b15      	subs	r3, #21
 800dc22:	f023 0303 	bic.w	r3, r3, #3
 800dc26:	3304      	adds	r3, #4
 800dc28:	f104 0715 	add.w	r7, r4, #21
 800dc2c:	42ba      	cmp	r2, r7
 800dc2e:	bf38      	it	cc
 800dc30:	2304      	movcc	r3, #4
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	9103      	str	r1, [sp, #12]
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	d80c      	bhi.n	800dc56 <__multiply+0x9e>
 800dc3c:	2e00      	cmp	r6, #0
 800dc3e:	dd03      	ble.n	800dc48 <__multiply+0x90>
 800dc40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d05b      	beq.n	800dd00 <__multiply+0x148>
 800dc48:	6106      	str	r6, [r0, #16]
 800dc4a:	b005      	add	sp, #20
 800dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc50:	f843 2b04 	str.w	r2, [r3], #4
 800dc54:	e7d8      	b.n	800dc08 <__multiply+0x50>
 800dc56:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc5a:	f1ba 0f00 	cmp.w	sl, #0
 800dc5e:	d024      	beq.n	800dcaa <__multiply+0xf2>
 800dc60:	f104 0e14 	add.w	lr, r4, #20
 800dc64:	46a9      	mov	r9, r5
 800dc66:	f04f 0c00 	mov.w	ip, #0
 800dc6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc6e:	f8d9 3000 	ldr.w	r3, [r9]
 800dc72:	fa1f fb87 	uxth.w	fp, r7
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	fb0a 330b 	mla	r3, sl, fp, r3
 800dc7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dc80:	f8d9 7000 	ldr.w	r7, [r9]
 800dc84:	4463      	add	r3, ip
 800dc86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dc8a:	fb0a c70b 	mla	r7, sl, fp, ip
 800dc8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc98:	4572      	cmp	r2, lr
 800dc9a:	f849 3b04 	str.w	r3, [r9], #4
 800dc9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dca2:	d8e2      	bhi.n	800dc6a <__multiply+0xb2>
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	f845 c003 	str.w	ip, [r5, r3]
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dcb0:	3104      	adds	r1, #4
 800dcb2:	f1b9 0f00 	cmp.w	r9, #0
 800dcb6:	d021      	beq.n	800dcfc <__multiply+0x144>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	f104 0c14 	add.w	ip, r4, #20
 800dcbe:	46ae      	mov	lr, r5
 800dcc0:	f04f 0a00 	mov.w	sl, #0
 800dcc4:	f8bc b000 	ldrh.w	fp, [ip]
 800dcc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dccc:	fb09 770b 	mla	r7, r9, fp, r7
 800dcd0:	4457      	add	r7, sl
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dcd8:	f84e 3b04 	str.w	r3, [lr], #4
 800dcdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dce4:	f8be 3000 	ldrh.w	r3, [lr]
 800dce8:	fb09 330a 	mla	r3, r9, sl, r3
 800dcec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dcf0:	4562      	cmp	r2, ip
 800dcf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcf6:	d8e5      	bhi.n	800dcc4 <__multiply+0x10c>
 800dcf8:	9f01      	ldr	r7, [sp, #4]
 800dcfa:	51eb      	str	r3, [r5, r7]
 800dcfc:	3504      	adds	r5, #4
 800dcfe:	e799      	b.n	800dc34 <__multiply+0x7c>
 800dd00:	3e01      	subs	r6, #1
 800dd02:	e79b      	b.n	800dc3c <__multiply+0x84>
 800dd04:	0801032f 	.word	0x0801032f
 800dd08:	08010398 	.word	0x08010398

0800dd0c <__pow5mult>:
 800dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd10:	4615      	mov	r5, r2
 800dd12:	f012 0203 	ands.w	r2, r2, #3
 800dd16:	4607      	mov	r7, r0
 800dd18:	460e      	mov	r6, r1
 800dd1a:	d007      	beq.n	800dd2c <__pow5mult+0x20>
 800dd1c:	4c1a      	ldr	r4, [pc, #104]	@ (800dd88 <__pow5mult+0x7c>)
 800dd1e:	3a01      	subs	r2, #1
 800dd20:	2300      	movs	r3, #0
 800dd22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd26:	f7ff fe9f 	bl	800da68 <__multadd>
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	10ad      	asrs	r5, r5, #2
 800dd2e:	d027      	beq.n	800dd80 <__pow5mult+0x74>
 800dd30:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800dd32:	b944      	cbnz	r4, 800dd46 <__pow5mult+0x3a>
 800dd34:	f240 2171 	movw	r1, #625	@ 0x271
 800dd38:	4638      	mov	r0, r7
 800dd3a:	f7ff ff27 	bl	800db8c <__i2b>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	6438      	str	r0, [r7, #64]	@ 0x40
 800dd42:	4604      	mov	r4, r0
 800dd44:	6003      	str	r3, [r0, #0]
 800dd46:	f04f 0900 	mov.w	r9, #0
 800dd4a:	07eb      	lsls	r3, r5, #31
 800dd4c:	d50a      	bpl.n	800dd64 <__pow5mult+0x58>
 800dd4e:	4631      	mov	r1, r6
 800dd50:	4622      	mov	r2, r4
 800dd52:	4638      	mov	r0, r7
 800dd54:	f7ff ff30 	bl	800dbb8 <__multiply>
 800dd58:	4631      	mov	r1, r6
 800dd5a:	4680      	mov	r8, r0
 800dd5c:	4638      	mov	r0, r7
 800dd5e:	f7ff fe7a 	bl	800da56 <_Bfree>
 800dd62:	4646      	mov	r6, r8
 800dd64:	106d      	asrs	r5, r5, #1
 800dd66:	d00b      	beq.n	800dd80 <__pow5mult+0x74>
 800dd68:	6820      	ldr	r0, [r4, #0]
 800dd6a:	b938      	cbnz	r0, 800dd7c <__pow5mult+0x70>
 800dd6c:	4622      	mov	r2, r4
 800dd6e:	4621      	mov	r1, r4
 800dd70:	4638      	mov	r0, r7
 800dd72:	f7ff ff21 	bl	800dbb8 <__multiply>
 800dd76:	6020      	str	r0, [r4, #0]
 800dd78:	f8c0 9000 	str.w	r9, [r0]
 800dd7c:	4604      	mov	r4, r0
 800dd7e:	e7e4      	b.n	800dd4a <__pow5mult+0x3e>
 800dd80:	4630      	mov	r0, r6
 800dd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd86:	bf00      	nop
 800dd88:	080103f4 	.word	0x080103f4

0800dd8c <__lshift>:
 800dd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd90:	460c      	mov	r4, r1
 800dd92:	6849      	ldr	r1, [r1, #4]
 800dd94:	6923      	ldr	r3, [r4, #16]
 800dd96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	4607      	mov	r7, r0
 800dd9e:	4691      	mov	r9, r2
 800dda0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dda4:	f108 0601 	add.w	r6, r8, #1
 800dda8:	42b3      	cmp	r3, r6
 800ddaa:	db0b      	blt.n	800ddc4 <__lshift+0x38>
 800ddac:	4638      	mov	r0, r7
 800ddae:	f7ff fe2d 	bl	800da0c <_Balloc>
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	b948      	cbnz	r0, 800ddca <__lshift+0x3e>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	4b28      	ldr	r3, [pc, #160]	@ (800de5c <__lshift+0xd0>)
 800ddba:	4829      	ldr	r0, [pc, #164]	@ (800de60 <__lshift+0xd4>)
 800ddbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ddc0:	f000 fb8a 	bl	800e4d8 <__assert_func>
 800ddc4:	3101      	adds	r1, #1
 800ddc6:	005b      	lsls	r3, r3, #1
 800ddc8:	e7ee      	b.n	800dda8 <__lshift+0x1c>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f100 0114 	add.w	r1, r0, #20
 800ddd0:	f100 0210 	add.w	r2, r0, #16
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	4553      	cmp	r3, sl
 800ddd8:	db33      	blt.n	800de42 <__lshift+0xb6>
 800ddda:	6920      	ldr	r0, [r4, #16]
 800dddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dde0:	f104 0314 	add.w	r3, r4, #20
 800dde4:	f019 091f 	ands.w	r9, r9, #31
 800dde8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddf0:	d02b      	beq.n	800de4a <__lshift+0xbe>
 800ddf2:	f1c9 0e20 	rsb	lr, r9, #32
 800ddf6:	468a      	mov	sl, r1
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	fa00 f009 	lsl.w	r0, r0, r9
 800de00:	4310      	orrs	r0, r2
 800de02:	f84a 0b04 	str.w	r0, [sl], #4
 800de06:	f853 2b04 	ldr.w	r2, [r3], #4
 800de0a:	459c      	cmp	ip, r3
 800de0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800de10:	d8f3      	bhi.n	800ddfa <__lshift+0x6e>
 800de12:	ebac 0304 	sub.w	r3, ip, r4
 800de16:	3b15      	subs	r3, #21
 800de18:	f023 0303 	bic.w	r3, r3, #3
 800de1c:	3304      	adds	r3, #4
 800de1e:	f104 0015 	add.w	r0, r4, #21
 800de22:	4584      	cmp	ip, r0
 800de24:	bf38      	it	cc
 800de26:	2304      	movcc	r3, #4
 800de28:	50ca      	str	r2, [r1, r3]
 800de2a:	b10a      	cbz	r2, 800de30 <__lshift+0xa4>
 800de2c:	f108 0602 	add.w	r6, r8, #2
 800de30:	3e01      	subs	r6, #1
 800de32:	4638      	mov	r0, r7
 800de34:	612e      	str	r6, [r5, #16]
 800de36:	4621      	mov	r1, r4
 800de38:	f7ff fe0d 	bl	800da56 <_Bfree>
 800de3c:	4628      	mov	r0, r5
 800de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de42:	f842 0f04 	str.w	r0, [r2, #4]!
 800de46:	3301      	adds	r3, #1
 800de48:	e7c5      	b.n	800ddd6 <__lshift+0x4a>
 800de4a:	3904      	subs	r1, #4
 800de4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de50:	f841 2f04 	str.w	r2, [r1, #4]!
 800de54:	459c      	cmp	ip, r3
 800de56:	d8f9      	bhi.n	800de4c <__lshift+0xc0>
 800de58:	e7ea      	b.n	800de30 <__lshift+0xa4>
 800de5a:	bf00      	nop
 800de5c:	0801032f 	.word	0x0801032f
 800de60:	08010398 	.word	0x08010398

0800de64 <__mcmp>:
 800de64:	690a      	ldr	r2, [r1, #16]
 800de66:	4603      	mov	r3, r0
 800de68:	6900      	ldr	r0, [r0, #16]
 800de6a:	1a80      	subs	r0, r0, r2
 800de6c:	b530      	push	{r4, r5, lr}
 800de6e:	d10e      	bne.n	800de8e <__mcmp+0x2a>
 800de70:	3314      	adds	r3, #20
 800de72:	3114      	adds	r1, #20
 800de74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800de78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800de7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de84:	4295      	cmp	r5, r2
 800de86:	d003      	beq.n	800de90 <__mcmp+0x2c>
 800de88:	d205      	bcs.n	800de96 <__mcmp+0x32>
 800de8a:	f04f 30ff 	mov.w	r0, #4294967295
 800de8e:	bd30      	pop	{r4, r5, pc}
 800de90:	42a3      	cmp	r3, r4
 800de92:	d3f3      	bcc.n	800de7c <__mcmp+0x18>
 800de94:	e7fb      	b.n	800de8e <__mcmp+0x2a>
 800de96:	2001      	movs	r0, #1
 800de98:	e7f9      	b.n	800de8e <__mcmp+0x2a>
	...

0800de9c <__mdiff>:
 800de9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea0:	4689      	mov	r9, r1
 800dea2:	4606      	mov	r6, r0
 800dea4:	4611      	mov	r1, r2
 800dea6:	4648      	mov	r0, r9
 800dea8:	4614      	mov	r4, r2
 800deaa:	f7ff ffdb 	bl	800de64 <__mcmp>
 800deae:	1e05      	subs	r5, r0, #0
 800deb0:	d112      	bne.n	800ded8 <__mdiff+0x3c>
 800deb2:	4629      	mov	r1, r5
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7ff fda9 	bl	800da0c <_Balloc>
 800deba:	4602      	mov	r2, r0
 800debc:	b928      	cbnz	r0, 800deca <__mdiff+0x2e>
 800debe:	4b3f      	ldr	r3, [pc, #252]	@ (800dfbc <__mdiff+0x120>)
 800dec0:	f240 2137 	movw	r1, #567	@ 0x237
 800dec4:	483e      	ldr	r0, [pc, #248]	@ (800dfc0 <__mdiff+0x124>)
 800dec6:	f000 fb07 	bl	800e4d8 <__assert_func>
 800deca:	2301      	movs	r3, #1
 800decc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ded0:	4610      	mov	r0, r2
 800ded2:	b003      	add	sp, #12
 800ded4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded8:	bfbc      	itt	lt
 800deda:	464b      	movlt	r3, r9
 800dedc:	46a1      	movlt	r9, r4
 800dede:	4630      	mov	r0, r6
 800dee0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dee4:	bfba      	itte	lt
 800dee6:	461c      	movlt	r4, r3
 800dee8:	2501      	movlt	r5, #1
 800deea:	2500      	movge	r5, #0
 800deec:	f7ff fd8e 	bl	800da0c <_Balloc>
 800def0:	4602      	mov	r2, r0
 800def2:	b918      	cbnz	r0, 800defc <__mdiff+0x60>
 800def4:	4b31      	ldr	r3, [pc, #196]	@ (800dfbc <__mdiff+0x120>)
 800def6:	f240 2145 	movw	r1, #581	@ 0x245
 800defa:	e7e3      	b.n	800dec4 <__mdiff+0x28>
 800defc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df00:	6926      	ldr	r6, [r4, #16]
 800df02:	60c5      	str	r5, [r0, #12]
 800df04:	f109 0310 	add.w	r3, r9, #16
 800df08:	f109 0514 	add.w	r5, r9, #20
 800df0c:	f104 0e14 	add.w	lr, r4, #20
 800df10:	f100 0b14 	add.w	fp, r0, #20
 800df14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df1c:	9301      	str	r3, [sp, #4]
 800df1e:	46d9      	mov	r9, fp
 800df20:	f04f 0c00 	mov.w	ip, #0
 800df24:	9b01      	ldr	r3, [sp, #4]
 800df26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	fa1f f38a 	uxth.w	r3, sl
 800df34:	4619      	mov	r1, r3
 800df36:	b283      	uxth	r3, r0
 800df38:	1acb      	subs	r3, r1, r3
 800df3a:	0c00      	lsrs	r0, r0, #16
 800df3c:	4463      	add	r3, ip
 800df3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df46:	b29b      	uxth	r3, r3
 800df48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df4c:	4576      	cmp	r6, lr
 800df4e:	f849 3b04 	str.w	r3, [r9], #4
 800df52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df56:	d8e5      	bhi.n	800df24 <__mdiff+0x88>
 800df58:	1b33      	subs	r3, r6, r4
 800df5a:	3b15      	subs	r3, #21
 800df5c:	f023 0303 	bic.w	r3, r3, #3
 800df60:	3415      	adds	r4, #21
 800df62:	3304      	adds	r3, #4
 800df64:	42a6      	cmp	r6, r4
 800df66:	bf38      	it	cc
 800df68:	2304      	movcc	r3, #4
 800df6a:	441d      	add	r5, r3
 800df6c:	445b      	add	r3, fp
 800df6e:	461e      	mov	r6, r3
 800df70:	462c      	mov	r4, r5
 800df72:	4544      	cmp	r4, r8
 800df74:	d30e      	bcc.n	800df94 <__mdiff+0xf8>
 800df76:	f108 0103 	add.w	r1, r8, #3
 800df7a:	1b49      	subs	r1, r1, r5
 800df7c:	f021 0103 	bic.w	r1, r1, #3
 800df80:	3d03      	subs	r5, #3
 800df82:	45a8      	cmp	r8, r5
 800df84:	bf38      	it	cc
 800df86:	2100      	movcc	r1, #0
 800df88:	440b      	add	r3, r1
 800df8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df8e:	b191      	cbz	r1, 800dfb6 <__mdiff+0x11a>
 800df90:	6117      	str	r7, [r2, #16]
 800df92:	e79d      	b.n	800ded0 <__mdiff+0x34>
 800df94:	f854 1b04 	ldr.w	r1, [r4], #4
 800df98:	46e6      	mov	lr, ip
 800df9a:	0c08      	lsrs	r0, r1, #16
 800df9c:	fa1c fc81 	uxtah	ip, ip, r1
 800dfa0:	4471      	add	r1, lr
 800dfa2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dfa6:	b289      	uxth	r1, r1
 800dfa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dfac:	f846 1b04 	str.w	r1, [r6], #4
 800dfb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfb4:	e7dd      	b.n	800df72 <__mdiff+0xd6>
 800dfb6:	3f01      	subs	r7, #1
 800dfb8:	e7e7      	b.n	800df8a <__mdiff+0xee>
 800dfba:	bf00      	nop
 800dfbc:	0801032f 	.word	0x0801032f
 800dfc0:	08010398 	.word	0x08010398

0800dfc4 <__d2b>:
 800dfc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfc8:	460f      	mov	r7, r1
 800dfca:	2101      	movs	r1, #1
 800dfcc:	ec59 8b10 	vmov	r8, r9, d0
 800dfd0:	4616      	mov	r6, r2
 800dfd2:	f7ff fd1b 	bl	800da0c <_Balloc>
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	b930      	cbnz	r0, 800dfe8 <__d2b+0x24>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4b23      	ldr	r3, [pc, #140]	@ (800e06c <__d2b+0xa8>)
 800dfde:	4824      	ldr	r0, [pc, #144]	@ (800e070 <__d2b+0xac>)
 800dfe0:	f240 310f 	movw	r1, #783	@ 0x30f
 800dfe4:	f000 fa78 	bl	800e4d8 <__assert_func>
 800dfe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dfec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dff0:	b10d      	cbz	r5, 800dff6 <__d2b+0x32>
 800dff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dff6:	9301      	str	r3, [sp, #4]
 800dff8:	f1b8 0300 	subs.w	r3, r8, #0
 800dffc:	d023      	beq.n	800e046 <__d2b+0x82>
 800dffe:	4668      	mov	r0, sp
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	f7ff fd96 	bl	800db32 <__lo0bits>
 800e006:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e00a:	b1d0      	cbz	r0, 800e042 <__d2b+0x7e>
 800e00c:	f1c0 0320 	rsb	r3, r0, #32
 800e010:	fa02 f303 	lsl.w	r3, r2, r3
 800e014:	430b      	orrs	r3, r1
 800e016:	40c2      	lsrs	r2, r0
 800e018:	6163      	str	r3, [r4, #20]
 800e01a:	9201      	str	r2, [sp, #4]
 800e01c:	9b01      	ldr	r3, [sp, #4]
 800e01e:	61a3      	str	r3, [r4, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	bf0c      	ite	eq
 800e024:	2201      	moveq	r2, #1
 800e026:	2202      	movne	r2, #2
 800e028:	6122      	str	r2, [r4, #16]
 800e02a:	b1a5      	cbz	r5, 800e056 <__d2b+0x92>
 800e02c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e030:	4405      	add	r5, r0
 800e032:	603d      	str	r5, [r7, #0]
 800e034:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e038:	6030      	str	r0, [r6, #0]
 800e03a:	4620      	mov	r0, r4
 800e03c:	b003      	add	sp, #12
 800e03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e042:	6161      	str	r1, [r4, #20]
 800e044:	e7ea      	b.n	800e01c <__d2b+0x58>
 800e046:	a801      	add	r0, sp, #4
 800e048:	f7ff fd73 	bl	800db32 <__lo0bits>
 800e04c:	9b01      	ldr	r3, [sp, #4]
 800e04e:	6163      	str	r3, [r4, #20]
 800e050:	3020      	adds	r0, #32
 800e052:	2201      	movs	r2, #1
 800e054:	e7e8      	b.n	800e028 <__d2b+0x64>
 800e056:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e05a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e05e:	6038      	str	r0, [r7, #0]
 800e060:	6918      	ldr	r0, [r3, #16]
 800e062:	f7ff fd47 	bl	800daf4 <__hi0bits>
 800e066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e06a:	e7e5      	b.n	800e038 <__d2b+0x74>
 800e06c:	0801032f 	.word	0x0801032f
 800e070:	08010398 	.word	0x08010398

0800e074 <_realloc_r>:
 800e074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	4682      	mov	sl, r0
 800e07a:	4693      	mov	fp, r2
 800e07c:	460c      	mov	r4, r1
 800e07e:	b929      	cbnz	r1, 800e08c <_realloc_r+0x18>
 800e080:	4611      	mov	r1, r2
 800e082:	b003      	add	sp, #12
 800e084:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	f7fc ba6c 	b.w	800a564 <_malloc_r>
 800e08c:	f7fc fca4 	bl	800a9d8 <__malloc_lock>
 800e090:	f10b 080b 	add.w	r8, fp, #11
 800e094:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800e098:	f1b8 0f16 	cmp.w	r8, #22
 800e09c:	f1a4 0908 	sub.w	r9, r4, #8
 800e0a0:	f025 0603 	bic.w	r6, r5, #3
 800e0a4:	d908      	bls.n	800e0b8 <_realloc_r+0x44>
 800e0a6:	f038 0807 	bics.w	r8, r8, #7
 800e0aa:	d507      	bpl.n	800e0bc <_realloc_r+0x48>
 800e0ac:	230c      	movs	r3, #12
 800e0ae:	f8ca 3000 	str.w	r3, [sl]
 800e0b2:	f04f 0b00 	mov.w	fp, #0
 800e0b6:	e032      	b.n	800e11e <_realloc_r+0xaa>
 800e0b8:	f04f 0810 	mov.w	r8, #16
 800e0bc:	45c3      	cmp	fp, r8
 800e0be:	d8f5      	bhi.n	800e0ac <_realloc_r+0x38>
 800e0c0:	4546      	cmp	r6, r8
 800e0c2:	f280 8174 	bge.w	800e3ae <_realloc_r+0x33a>
 800e0c6:	4b9e      	ldr	r3, [pc, #632]	@ (800e340 <_realloc_r+0x2cc>)
 800e0c8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800e0cc:	eb09 0106 	add.w	r1, r9, r6
 800e0d0:	458c      	cmp	ip, r1
 800e0d2:	6848      	ldr	r0, [r1, #4]
 800e0d4:	d005      	beq.n	800e0e2 <_realloc_r+0x6e>
 800e0d6:	f020 0201 	bic.w	r2, r0, #1
 800e0da:	440a      	add	r2, r1
 800e0dc:	6852      	ldr	r2, [r2, #4]
 800e0de:	07d7      	lsls	r7, r2, #31
 800e0e0:	d449      	bmi.n	800e176 <_realloc_r+0x102>
 800e0e2:	f020 0003 	bic.w	r0, r0, #3
 800e0e6:	458c      	cmp	ip, r1
 800e0e8:	eb06 0700 	add.w	r7, r6, r0
 800e0ec:	d11b      	bne.n	800e126 <_realloc_r+0xb2>
 800e0ee:	f108 0210 	add.w	r2, r8, #16
 800e0f2:	42ba      	cmp	r2, r7
 800e0f4:	dc41      	bgt.n	800e17a <_realloc_r+0x106>
 800e0f6:	eb09 0208 	add.w	r2, r9, r8
 800e0fa:	eba7 0708 	sub.w	r7, r7, r8
 800e0fe:	f047 0701 	orr.w	r7, r7, #1
 800e102:	609a      	str	r2, [r3, #8]
 800e104:	6057      	str	r7, [r2, #4]
 800e106:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	ea43 0308 	orr.w	r3, r3, r8
 800e112:	f844 3c04 	str.w	r3, [r4, #-4]
 800e116:	4650      	mov	r0, sl
 800e118:	f7fc fc64 	bl	800a9e4 <__malloc_unlock>
 800e11c:	46a3      	mov	fp, r4
 800e11e:	4658      	mov	r0, fp
 800e120:	b003      	add	sp, #12
 800e122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e126:	45b8      	cmp	r8, r7
 800e128:	dc27      	bgt.n	800e17a <_realloc_r+0x106>
 800e12a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800e12e:	60d3      	str	r3, [r2, #12]
 800e130:	609a      	str	r2, [r3, #8]
 800e132:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e136:	eba7 0008 	sub.w	r0, r7, r8
 800e13a:	280f      	cmp	r0, #15
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	eb09 0207 	add.w	r2, r9, r7
 800e144:	f240 8135 	bls.w	800e3b2 <_realloc_r+0x33e>
 800e148:	eb09 0108 	add.w	r1, r9, r8
 800e14c:	ea48 0303 	orr.w	r3, r8, r3
 800e150:	f040 0001 	orr.w	r0, r0, #1
 800e154:	f8c9 3004 	str.w	r3, [r9, #4]
 800e158:	6048      	str	r0, [r1, #4]
 800e15a:	6853      	ldr	r3, [r2, #4]
 800e15c:	f043 0301 	orr.w	r3, r3, #1
 800e160:	6053      	str	r3, [r2, #4]
 800e162:	3108      	adds	r1, #8
 800e164:	4650      	mov	r0, sl
 800e166:	f7fc ff6f 	bl	800b048 <_free_r>
 800e16a:	4650      	mov	r0, sl
 800e16c:	f7fc fc3a 	bl	800a9e4 <__malloc_unlock>
 800e170:	f109 0b08 	add.w	fp, r9, #8
 800e174:	e7d3      	b.n	800e11e <_realloc_r+0xaa>
 800e176:	2000      	movs	r0, #0
 800e178:	4601      	mov	r1, r0
 800e17a:	07ea      	lsls	r2, r5, #31
 800e17c:	f100 80c7 	bmi.w	800e30e <_realloc_r+0x29a>
 800e180:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800e184:	eba9 0505 	sub.w	r5, r9, r5
 800e188:	686a      	ldr	r2, [r5, #4]
 800e18a:	f022 0203 	bic.w	r2, r2, #3
 800e18e:	4432      	add	r2, r6
 800e190:	9201      	str	r2, [sp, #4]
 800e192:	2900      	cmp	r1, #0
 800e194:	f000 8086 	beq.w	800e2a4 <_realloc_r+0x230>
 800e198:	458c      	cmp	ip, r1
 800e19a:	eb00 0702 	add.w	r7, r0, r2
 800e19e:	d149      	bne.n	800e234 <_realloc_r+0x1c0>
 800e1a0:	f108 0210 	add.w	r2, r8, #16
 800e1a4:	42ba      	cmp	r2, r7
 800e1a6:	dc7d      	bgt.n	800e2a4 <_realloc_r+0x230>
 800e1a8:	46ab      	mov	fp, r5
 800e1aa:	68ea      	ldr	r2, [r5, #12]
 800e1ac:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800e1b0:	60ca      	str	r2, [r1, #12]
 800e1b2:	6091      	str	r1, [r2, #8]
 800e1b4:	1f32      	subs	r2, r6, #4
 800e1b6:	2a24      	cmp	r2, #36	@ 0x24
 800e1b8:	d836      	bhi.n	800e228 <_realloc_r+0x1b4>
 800e1ba:	2a13      	cmp	r2, #19
 800e1bc:	d932      	bls.n	800e224 <_realloc_r+0x1b0>
 800e1be:	6821      	ldr	r1, [r4, #0]
 800e1c0:	60a9      	str	r1, [r5, #8]
 800e1c2:	6861      	ldr	r1, [r4, #4]
 800e1c4:	60e9      	str	r1, [r5, #12]
 800e1c6:	2a1b      	cmp	r2, #27
 800e1c8:	d81a      	bhi.n	800e200 <_realloc_r+0x18c>
 800e1ca:	3408      	adds	r4, #8
 800e1cc:	f105 0210 	add.w	r2, r5, #16
 800e1d0:	6821      	ldr	r1, [r4, #0]
 800e1d2:	6011      	str	r1, [r2, #0]
 800e1d4:	6861      	ldr	r1, [r4, #4]
 800e1d6:	6051      	str	r1, [r2, #4]
 800e1d8:	68a1      	ldr	r1, [r4, #8]
 800e1da:	6091      	str	r1, [r2, #8]
 800e1dc:	eb05 0208 	add.w	r2, r5, r8
 800e1e0:	eba7 0708 	sub.w	r7, r7, r8
 800e1e4:	f047 0701 	orr.w	r7, r7, #1
 800e1e8:	609a      	str	r2, [r3, #8]
 800e1ea:	6057      	str	r7, [r2, #4]
 800e1ec:	686b      	ldr	r3, [r5, #4]
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	ea43 0308 	orr.w	r3, r3, r8
 800e1f6:	606b      	str	r3, [r5, #4]
 800e1f8:	4650      	mov	r0, sl
 800e1fa:	f7fc fbf3 	bl	800a9e4 <__malloc_unlock>
 800e1fe:	e78e      	b.n	800e11e <_realloc_r+0xaa>
 800e200:	68a1      	ldr	r1, [r4, #8]
 800e202:	6129      	str	r1, [r5, #16]
 800e204:	68e1      	ldr	r1, [r4, #12]
 800e206:	6169      	str	r1, [r5, #20]
 800e208:	2a24      	cmp	r2, #36	@ 0x24
 800e20a:	bf01      	itttt	eq
 800e20c:	6922      	ldreq	r2, [r4, #16]
 800e20e:	61aa      	streq	r2, [r5, #24]
 800e210:	6961      	ldreq	r1, [r4, #20]
 800e212:	61e9      	streq	r1, [r5, #28]
 800e214:	bf19      	ittee	ne
 800e216:	3410      	addne	r4, #16
 800e218:	f105 0218 	addne.w	r2, r5, #24
 800e21c:	f105 0220 	addeq.w	r2, r5, #32
 800e220:	3418      	addeq	r4, #24
 800e222:	e7d5      	b.n	800e1d0 <_realloc_r+0x15c>
 800e224:	465a      	mov	r2, fp
 800e226:	e7d3      	b.n	800e1d0 <_realloc_r+0x15c>
 800e228:	4621      	mov	r1, r4
 800e22a:	4658      	mov	r0, fp
 800e22c:	f7fe fcb4 	bl	800cb98 <memmove>
 800e230:	4b43      	ldr	r3, [pc, #268]	@ (800e340 <_realloc_r+0x2cc>)
 800e232:	e7d3      	b.n	800e1dc <_realloc_r+0x168>
 800e234:	45b8      	cmp	r8, r7
 800e236:	dc35      	bgt.n	800e2a4 <_realloc_r+0x230>
 800e238:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800e23c:	4628      	mov	r0, r5
 800e23e:	60d3      	str	r3, [r2, #12]
 800e240:	609a      	str	r2, [r3, #8]
 800e242:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e246:	68eb      	ldr	r3, [r5, #12]
 800e248:	60d3      	str	r3, [r2, #12]
 800e24a:	609a      	str	r2, [r3, #8]
 800e24c:	1f32      	subs	r2, r6, #4
 800e24e:	2a24      	cmp	r2, #36	@ 0x24
 800e250:	d824      	bhi.n	800e29c <_realloc_r+0x228>
 800e252:	2a13      	cmp	r2, #19
 800e254:	d908      	bls.n	800e268 <_realloc_r+0x1f4>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	60ab      	str	r3, [r5, #8]
 800e25a:	6863      	ldr	r3, [r4, #4]
 800e25c:	60eb      	str	r3, [r5, #12]
 800e25e:	2a1b      	cmp	r2, #27
 800e260:	d80a      	bhi.n	800e278 <_realloc_r+0x204>
 800e262:	3408      	adds	r4, #8
 800e264:	f105 0010 	add.w	r0, r5, #16
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	6003      	str	r3, [r0, #0]
 800e26c:	6863      	ldr	r3, [r4, #4]
 800e26e:	6043      	str	r3, [r0, #4]
 800e270:	68a3      	ldr	r3, [r4, #8]
 800e272:	6083      	str	r3, [r0, #8]
 800e274:	46a9      	mov	r9, r5
 800e276:	e75c      	b.n	800e132 <_realloc_r+0xbe>
 800e278:	68a3      	ldr	r3, [r4, #8]
 800e27a:	612b      	str	r3, [r5, #16]
 800e27c:	68e3      	ldr	r3, [r4, #12]
 800e27e:	616b      	str	r3, [r5, #20]
 800e280:	2a24      	cmp	r2, #36	@ 0x24
 800e282:	bf01      	itttt	eq
 800e284:	6923      	ldreq	r3, [r4, #16]
 800e286:	61ab      	streq	r3, [r5, #24]
 800e288:	6963      	ldreq	r3, [r4, #20]
 800e28a:	61eb      	streq	r3, [r5, #28]
 800e28c:	bf19      	ittee	ne
 800e28e:	3410      	addne	r4, #16
 800e290:	f105 0018 	addne.w	r0, r5, #24
 800e294:	f105 0020 	addeq.w	r0, r5, #32
 800e298:	3418      	addeq	r4, #24
 800e29a:	e7e5      	b.n	800e268 <_realloc_r+0x1f4>
 800e29c:	4621      	mov	r1, r4
 800e29e:	f7fe fc7b 	bl	800cb98 <memmove>
 800e2a2:	e7e7      	b.n	800e274 <_realloc_r+0x200>
 800e2a4:	9b01      	ldr	r3, [sp, #4]
 800e2a6:	4598      	cmp	r8, r3
 800e2a8:	dc31      	bgt.n	800e30e <_realloc_r+0x29a>
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	68eb      	ldr	r3, [r5, #12]
 800e2ae:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e2b2:	60d3      	str	r3, [r2, #12]
 800e2b4:	609a      	str	r2, [r3, #8]
 800e2b6:	1f32      	subs	r2, r6, #4
 800e2b8:	2a24      	cmp	r2, #36	@ 0x24
 800e2ba:	d824      	bhi.n	800e306 <_realloc_r+0x292>
 800e2bc:	2a13      	cmp	r2, #19
 800e2be:	d908      	bls.n	800e2d2 <_realloc_r+0x25e>
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	60ab      	str	r3, [r5, #8]
 800e2c4:	6863      	ldr	r3, [r4, #4]
 800e2c6:	60eb      	str	r3, [r5, #12]
 800e2c8:	2a1b      	cmp	r2, #27
 800e2ca:	d80a      	bhi.n	800e2e2 <_realloc_r+0x26e>
 800e2cc:	3408      	adds	r4, #8
 800e2ce:	f105 0010 	add.w	r0, r5, #16
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	6003      	str	r3, [r0, #0]
 800e2d6:	6863      	ldr	r3, [r4, #4]
 800e2d8:	6043      	str	r3, [r0, #4]
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	6083      	str	r3, [r0, #8]
 800e2de:	9f01      	ldr	r7, [sp, #4]
 800e2e0:	e7c8      	b.n	800e274 <_realloc_r+0x200>
 800e2e2:	68a3      	ldr	r3, [r4, #8]
 800e2e4:	612b      	str	r3, [r5, #16]
 800e2e6:	68e3      	ldr	r3, [r4, #12]
 800e2e8:	616b      	str	r3, [r5, #20]
 800e2ea:	2a24      	cmp	r2, #36	@ 0x24
 800e2ec:	bf01      	itttt	eq
 800e2ee:	6923      	ldreq	r3, [r4, #16]
 800e2f0:	61ab      	streq	r3, [r5, #24]
 800e2f2:	6963      	ldreq	r3, [r4, #20]
 800e2f4:	61eb      	streq	r3, [r5, #28]
 800e2f6:	bf19      	ittee	ne
 800e2f8:	3410      	addne	r4, #16
 800e2fa:	f105 0018 	addne.w	r0, r5, #24
 800e2fe:	f105 0020 	addeq.w	r0, r5, #32
 800e302:	3418      	addeq	r4, #24
 800e304:	e7e5      	b.n	800e2d2 <_realloc_r+0x25e>
 800e306:	4621      	mov	r1, r4
 800e308:	f7fe fc46 	bl	800cb98 <memmove>
 800e30c:	e7e7      	b.n	800e2de <_realloc_r+0x26a>
 800e30e:	4659      	mov	r1, fp
 800e310:	4650      	mov	r0, sl
 800e312:	f7fc f927 	bl	800a564 <_malloc_r>
 800e316:	4683      	mov	fp, r0
 800e318:	b918      	cbnz	r0, 800e322 <_realloc_r+0x2ae>
 800e31a:	4650      	mov	r0, sl
 800e31c:	f7fc fb62 	bl	800a9e4 <__malloc_unlock>
 800e320:	e6c7      	b.n	800e0b2 <_realloc_r+0x3e>
 800e322:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e326:	f023 0301 	bic.w	r3, r3, #1
 800e32a:	444b      	add	r3, r9
 800e32c:	f1a0 0208 	sub.w	r2, r0, #8
 800e330:	4293      	cmp	r3, r2
 800e332:	d107      	bne.n	800e344 <_realloc_r+0x2d0>
 800e334:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800e338:	f027 0703 	bic.w	r7, r7, #3
 800e33c:	4437      	add	r7, r6
 800e33e:	e6f8      	b.n	800e132 <_realloc_r+0xbe>
 800e340:	2000001c 	.word	0x2000001c
 800e344:	1f32      	subs	r2, r6, #4
 800e346:	2a24      	cmp	r2, #36	@ 0x24
 800e348:	d82d      	bhi.n	800e3a6 <_realloc_r+0x332>
 800e34a:	2a13      	cmp	r2, #19
 800e34c:	d928      	bls.n	800e3a0 <_realloc_r+0x32c>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	6863      	ldr	r3, [r4, #4]
 800e354:	6043      	str	r3, [r0, #4]
 800e356:	2a1b      	cmp	r2, #27
 800e358:	d80e      	bhi.n	800e378 <_realloc_r+0x304>
 800e35a:	f104 0208 	add.w	r2, r4, #8
 800e35e:	f100 0308 	add.w	r3, r0, #8
 800e362:	6811      	ldr	r1, [r2, #0]
 800e364:	6019      	str	r1, [r3, #0]
 800e366:	6851      	ldr	r1, [r2, #4]
 800e368:	6059      	str	r1, [r3, #4]
 800e36a:	6892      	ldr	r2, [r2, #8]
 800e36c:	609a      	str	r2, [r3, #8]
 800e36e:	4621      	mov	r1, r4
 800e370:	4650      	mov	r0, sl
 800e372:	f7fc fe69 	bl	800b048 <_free_r>
 800e376:	e73f      	b.n	800e1f8 <_realloc_r+0x184>
 800e378:	68a3      	ldr	r3, [r4, #8]
 800e37a:	6083      	str	r3, [r0, #8]
 800e37c:	68e3      	ldr	r3, [r4, #12]
 800e37e:	60c3      	str	r3, [r0, #12]
 800e380:	2a24      	cmp	r2, #36	@ 0x24
 800e382:	bf01      	itttt	eq
 800e384:	6923      	ldreq	r3, [r4, #16]
 800e386:	6103      	streq	r3, [r0, #16]
 800e388:	6961      	ldreq	r1, [r4, #20]
 800e38a:	6141      	streq	r1, [r0, #20]
 800e38c:	bf19      	ittee	ne
 800e38e:	f104 0210 	addne.w	r2, r4, #16
 800e392:	f100 0310 	addne.w	r3, r0, #16
 800e396:	f104 0218 	addeq.w	r2, r4, #24
 800e39a:	f100 0318 	addeq.w	r3, r0, #24
 800e39e:	e7e0      	b.n	800e362 <_realloc_r+0x2ee>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	4622      	mov	r2, r4
 800e3a4:	e7dd      	b.n	800e362 <_realloc_r+0x2ee>
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	f7fe fbf6 	bl	800cb98 <memmove>
 800e3ac:	e7df      	b.n	800e36e <_realloc_r+0x2fa>
 800e3ae:	4637      	mov	r7, r6
 800e3b0:	e6bf      	b.n	800e132 <_realloc_r+0xbe>
 800e3b2:	431f      	orrs	r7, r3
 800e3b4:	f8c9 7004 	str.w	r7, [r9, #4]
 800e3b8:	6853      	ldr	r3, [r2, #4]
 800e3ba:	f043 0301 	orr.w	r3, r3, #1
 800e3be:	6053      	str	r3, [r2, #4]
 800e3c0:	e6d3      	b.n	800e16a <_realloc_r+0xf6>
 800e3c2:	bf00      	nop

0800e3c4 <__ascii_wctomb>:
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	b141      	cbz	r1, 800e3dc <__ascii_wctomb+0x18>
 800e3ca:	2aff      	cmp	r2, #255	@ 0xff
 800e3cc:	d904      	bls.n	800e3d8 <__ascii_wctomb+0x14>
 800e3ce:	228a      	movs	r2, #138	@ 0x8a
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d6:	4770      	bx	lr
 800e3d8:	700a      	strb	r2, [r1, #0]
 800e3da:	2001      	movs	r0, #1
 800e3dc:	4770      	bx	lr

0800e3de <__ssprint_r>:
 800e3de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e2:	6893      	ldr	r3, [r2, #8]
 800e3e4:	f8d2 b000 	ldr.w	fp, [r2]
 800e3e8:	9001      	str	r0, [sp, #4]
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	4617      	mov	r7, r2
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d157      	bne.n	800e4a2 <__ssprint_r+0xc4>
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	607b      	str	r3, [r7, #4]
 800e3f8:	b003      	add	sp, #12
 800e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fe:	e9db a800 	ldrd	sl, r8, [fp]
 800e402:	f10b 0b08 	add.w	fp, fp, #8
 800e406:	68a6      	ldr	r6, [r4, #8]
 800e408:	6820      	ldr	r0, [r4, #0]
 800e40a:	f1b8 0f00 	cmp.w	r8, #0
 800e40e:	d0f6      	beq.n	800e3fe <__ssprint_r+0x20>
 800e410:	45b0      	cmp	r8, r6
 800e412:	d32e      	bcc.n	800e472 <__ssprint_r+0x94>
 800e414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e418:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e41c:	d029      	beq.n	800e472 <__ssprint_r+0x94>
 800e41e:	6921      	ldr	r1, [r4, #16]
 800e420:	6965      	ldr	r5, [r4, #20]
 800e422:	eba0 0901 	sub.w	r9, r0, r1
 800e426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e42a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e42e:	f109 0001 	add.w	r0, r9, #1
 800e432:	106d      	asrs	r5, r5, #1
 800e434:	4440      	add	r0, r8
 800e436:	4285      	cmp	r5, r0
 800e438:	bf38      	it	cc
 800e43a:	4605      	movcc	r5, r0
 800e43c:	0553      	lsls	r3, r2, #21
 800e43e:	d534      	bpl.n	800e4aa <__ssprint_r+0xcc>
 800e440:	9801      	ldr	r0, [sp, #4]
 800e442:	4629      	mov	r1, r5
 800e444:	f7fc f88e 	bl	800a564 <_malloc_r>
 800e448:	4606      	mov	r6, r0
 800e44a:	2800      	cmp	r0, #0
 800e44c:	d038      	beq.n	800e4c0 <__ssprint_r+0xe2>
 800e44e:	464a      	mov	r2, r9
 800e450:	6921      	ldr	r1, [r4, #16]
 800e452:	f7fe fc0f 	bl	800cc74 <memcpy>
 800e456:	89a2      	ldrh	r2, [r4, #12]
 800e458:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800e45c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e460:	81a2      	strh	r2, [r4, #12]
 800e462:	6126      	str	r6, [r4, #16]
 800e464:	6165      	str	r5, [r4, #20]
 800e466:	444e      	add	r6, r9
 800e468:	eba5 0509 	sub.w	r5, r5, r9
 800e46c:	6026      	str	r6, [r4, #0]
 800e46e:	60a5      	str	r5, [r4, #8]
 800e470:	4646      	mov	r6, r8
 800e472:	4546      	cmp	r6, r8
 800e474:	bf28      	it	cs
 800e476:	4646      	movcs	r6, r8
 800e478:	4632      	mov	r2, r6
 800e47a:	4651      	mov	r1, sl
 800e47c:	6820      	ldr	r0, [r4, #0]
 800e47e:	f7fe fb8b 	bl	800cb98 <memmove>
 800e482:	68a2      	ldr	r2, [r4, #8]
 800e484:	1b92      	subs	r2, r2, r6
 800e486:	60a2      	str	r2, [r4, #8]
 800e488:	6822      	ldr	r2, [r4, #0]
 800e48a:	4432      	add	r2, r6
 800e48c:	6022      	str	r2, [r4, #0]
 800e48e:	68ba      	ldr	r2, [r7, #8]
 800e490:	eba2 0308 	sub.w	r3, r2, r8
 800e494:	44c2      	add	sl, r8
 800e496:	60bb      	str	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d0aa      	beq.n	800e3f2 <__ssprint_r+0x14>
 800e49c:	f04f 0800 	mov.w	r8, #0
 800e4a0:	e7b1      	b.n	800e406 <__ssprint_r+0x28>
 800e4a2:	f04f 0a00 	mov.w	sl, #0
 800e4a6:	46d0      	mov	r8, sl
 800e4a8:	e7ad      	b.n	800e406 <__ssprint_r+0x28>
 800e4aa:	9801      	ldr	r0, [sp, #4]
 800e4ac:	462a      	mov	r2, r5
 800e4ae:	f7ff fde1 	bl	800e074 <_realloc_r>
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d1d4      	bne.n	800e462 <__ssprint_r+0x84>
 800e4b8:	6921      	ldr	r1, [r4, #16]
 800e4ba:	9801      	ldr	r0, [sp, #4]
 800e4bc:	f7fc fdc4 	bl	800b048 <_free_r>
 800e4c0:	9a01      	ldr	r2, [sp, #4]
 800e4c2:	230c      	movs	r3, #12
 800e4c4:	6013      	str	r3, [r2, #0]
 800e4c6:	89a3      	ldrh	r3, [r4, #12]
 800e4c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4cc:	81a3      	strh	r3, [r4, #12]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60bb      	str	r3, [r7, #8]
 800e4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d6:	e78d      	b.n	800e3f4 <__ssprint_r+0x16>

0800e4d8 <__assert_func>:
 800e4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4da:	4614      	mov	r4, r2
 800e4dc:	461a      	mov	r2, r3
 800e4de:	4b09      	ldr	r3, [pc, #36]	@ (800e504 <__assert_func+0x2c>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	68d8      	ldr	r0, [r3, #12]
 800e4e6:	b954      	cbnz	r4, 800e4fe <__assert_func+0x26>
 800e4e8:	4b07      	ldr	r3, [pc, #28]	@ (800e508 <__assert_func+0x30>)
 800e4ea:	461c      	mov	r4, r3
 800e4ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4f0:	9100      	str	r1, [sp, #0]
 800e4f2:	462b      	mov	r3, r5
 800e4f4:	4905      	ldr	r1, [pc, #20]	@ (800e50c <__assert_func+0x34>)
 800e4f6:	f000 f843 	bl	800e580 <fiprintf>
 800e4fa:	f000 fdb7 	bl	800f06c <abort>
 800e4fe:	4b04      	ldr	r3, [pc, #16]	@ (800e510 <__assert_func+0x38>)
 800e500:	e7f4      	b.n	800e4ec <__assert_func+0x14>
 800e502:	bf00      	nop
 800e504:	20000430 	.word	0x20000430
 800e508:	0801062c 	.word	0x0801062c
 800e50c:	080105fe 	.word	0x080105fe
 800e510:	080105f1 	.word	0x080105f1

0800e514 <_calloc_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	fba1 1502 	umull	r1, r5, r1, r2
 800e51a:	b935      	cbnz	r5, 800e52a <_calloc_r+0x16>
 800e51c:	f7fc f822 	bl	800a564 <_malloc_r>
 800e520:	4604      	mov	r4, r0
 800e522:	b938      	cbnz	r0, 800e534 <_calloc_r+0x20>
 800e524:	2400      	movs	r4, #0
 800e526:	4620      	mov	r0, r4
 800e528:	bd38      	pop	{r3, r4, r5, pc}
 800e52a:	f7fc fced 	bl	800af08 <__errno>
 800e52e:	230c      	movs	r3, #12
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	e7f7      	b.n	800e524 <_calloc_r+0x10>
 800e534:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e538:	f022 0203 	bic.w	r2, r2, #3
 800e53c:	3a04      	subs	r2, #4
 800e53e:	2a24      	cmp	r2, #36	@ 0x24
 800e540:	d819      	bhi.n	800e576 <_calloc_r+0x62>
 800e542:	2a13      	cmp	r2, #19
 800e544:	d915      	bls.n	800e572 <_calloc_r+0x5e>
 800e546:	2a1b      	cmp	r2, #27
 800e548:	e9c0 5500 	strd	r5, r5, [r0]
 800e54c:	d806      	bhi.n	800e55c <_calloc_r+0x48>
 800e54e:	f100 0308 	add.w	r3, r0, #8
 800e552:	2200      	movs	r2, #0
 800e554:	e9c3 2200 	strd	r2, r2, [r3]
 800e558:	609a      	str	r2, [r3, #8]
 800e55a:	e7e4      	b.n	800e526 <_calloc_r+0x12>
 800e55c:	2a24      	cmp	r2, #36	@ 0x24
 800e55e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e562:	bf11      	iteee	ne
 800e564:	f100 0310 	addne.w	r3, r0, #16
 800e568:	6105      	streq	r5, [r0, #16]
 800e56a:	f100 0318 	addeq.w	r3, r0, #24
 800e56e:	6145      	streq	r5, [r0, #20]
 800e570:	e7ef      	b.n	800e552 <_calloc_r+0x3e>
 800e572:	4603      	mov	r3, r0
 800e574:	e7ed      	b.n	800e552 <_calloc_r+0x3e>
 800e576:	4629      	mov	r1, r5
 800e578:	f7fc fc67 	bl	800ae4a <memset>
 800e57c:	e7d3      	b.n	800e526 <_calloc_r+0x12>
	...

0800e580 <fiprintf>:
 800e580:	b40e      	push	{r1, r2, r3}
 800e582:	b503      	push	{r0, r1, lr}
 800e584:	4601      	mov	r1, r0
 800e586:	ab03      	add	r3, sp, #12
 800e588:	4805      	ldr	r0, [pc, #20]	@ (800e5a0 <fiprintf+0x20>)
 800e58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58e:	6800      	ldr	r0, [r0, #0]
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	f000 f839 	bl	800e608 <_vfiprintf_r>
 800e596:	b002      	add	sp, #8
 800e598:	f85d eb04 	ldr.w	lr, [sp], #4
 800e59c:	b003      	add	sp, #12
 800e59e:	4770      	bx	lr
 800e5a0:	20000430 	.word	0x20000430

0800e5a4 <__sprint_r>:
 800e5a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	6893      	ldr	r3, [r2, #8]
 800e5aa:	4680      	mov	r8, r0
 800e5ac:	460e      	mov	r6, r1
 800e5ae:	4614      	mov	r4, r2
 800e5b0:	b343      	cbz	r3, 800e604 <__sprint_r+0x60>
 800e5b2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800e5b4:	049d      	lsls	r5, r3, #18
 800e5b6:	d522      	bpl.n	800e5fe <__sprint_r+0x5a>
 800e5b8:	6815      	ldr	r5, [r2, #0]
 800e5ba:	68a0      	ldr	r0, [r4, #8]
 800e5bc:	3508      	adds	r5, #8
 800e5be:	b928      	cbnz	r0, 800e5cc <__sprint_r+0x28>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	60a3      	str	r3, [r4, #8]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	6063      	str	r3, [r4, #4]
 800e5c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800e5d0:	f04f 0900 	mov.w	r9, #0
 800e5d4:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800e5d8:	45ca      	cmp	sl, r9
 800e5da:	dc05      	bgt.n	800e5e8 <__sprint_r+0x44>
 800e5dc:	68a3      	ldr	r3, [r4, #8]
 800e5de:	f027 0703 	bic.w	r7, r7, #3
 800e5e2:	1bdb      	subs	r3, r3, r7
 800e5e4:	60a3      	str	r3, [r4, #8]
 800e5e6:	e7e8      	b.n	800e5ba <__sprint_r+0x16>
 800e5e8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	4640      	mov	r0, r8
 800e5f0:	f000 fd13 	bl	800f01a <_fputwc_r>
 800e5f4:	1c43      	adds	r3, r0, #1
 800e5f6:	d0e3      	beq.n	800e5c0 <__sprint_r+0x1c>
 800e5f8:	f109 0901 	add.w	r9, r9, #1
 800e5fc:	e7ec      	b.n	800e5d8 <__sprint_r+0x34>
 800e5fe:	f7fe f8c5 	bl	800c78c <__sfvwrite_r>
 800e602:	e7dd      	b.n	800e5c0 <__sprint_r+0x1c>
 800e604:	4618      	mov	r0, r3
 800e606:	e7dd      	b.n	800e5c4 <__sprint_r+0x20>

0800e608 <_vfiprintf_r>:
 800e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60c:	b0bb      	sub	sp, #236	@ 0xec
 800e60e:	460f      	mov	r7, r1
 800e610:	4693      	mov	fp, r2
 800e612:	461c      	mov	r4, r3
 800e614:	461d      	mov	r5, r3
 800e616:	9000      	str	r0, [sp, #0]
 800e618:	b118      	cbz	r0, 800e622 <_vfiprintf_r+0x1a>
 800e61a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e61c:	b90b      	cbnz	r3, 800e622 <_vfiprintf_r+0x1a>
 800e61e:	f7fc fa73 	bl	800ab08 <__sinit>
 800e622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e624:	07db      	lsls	r3, r3, #31
 800e626:	d405      	bmi.n	800e634 <_vfiprintf_r+0x2c>
 800e628:	89bb      	ldrh	r3, [r7, #12]
 800e62a:	059e      	lsls	r6, r3, #22
 800e62c:	d402      	bmi.n	800e634 <_vfiprintf_r+0x2c>
 800e62e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e630:	f7fc fc96 	bl	800af60 <__retarget_lock_acquire_recursive>
 800e634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e638:	0498      	lsls	r0, r3, #18
 800e63a:	d406      	bmi.n	800e64a <_vfiprintf_r+0x42>
 800e63c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e640:	81bb      	strh	r3, [r7, #12]
 800e642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e644:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e648:	667b      	str	r3, [r7, #100]	@ 0x64
 800e64a:	89bb      	ldrh	r3, [r7, #12]
 800e64c:	0719      	lsls	r1, r3, #28
 800e64e:	d501      	bpl.n	800e654 <_vfiprintf_r+0x4c>
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	b9ab      	cbnz	r3, 800e680 <_vfiprintf_r+0x78>
 800e654:	9800      	ldr	r0, [sp, #0]
 800e656:	4639      	mov	r1, r7
 800e658:	f7fe fa48 	bl	800caec <__swsetup_r>
 800e65c:	b180      	cbz	r0, 800e680 <_vfiprintf_r+0x78>
 800e65e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e660:	07da      	lsls	r2, r3, #31
 800e662:	d506      	bpl.n	800e672 <_vfiprintf_r+0x6a>
 800e664:	f04f 33ff 	mov.w	r3, #4294967295
 800e668:	9303      	str	r3, [sp, #12]
 800e66a:	9803      	ldr	r0, [sp, #12]
 800e66c:	b03b      	add	sp, #236	@ 0xec
 800e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e672:	89bb      	ldrh	r3, [r7, #12]
 800e674:	059b      	lsls	r3, r3, #22
 800e676:	d4f5      	bmi.n	800e664 <_vfiprintf_r+0x5c>
 800e678:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e67a:	f7fc fc72 	bl	800af62 <__retarget_lock_release_recursive>
 800e67e:	e7f1      	b.n	800e664 <_vfiprintf_r+0x5c>
 800e680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e684:	f003 021a 	and.w	r2, r3, #26
 800e688:	2a0a      	cmp	r2, #10
 800e68a:	d114      	bne.n	800e6b6 <_vfiprintf_r+0xae>
 800e68c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e690:	2a00      	cmp	r2, #0
 800e692:	db10      	blt.n	800e6b6 <_vfiprintf_r+0xae>
 800e694:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e696:	07d6      	lsls	r6, r2, #31
 800e698:	d404      	bmi.n	800e6a4 <_vfiprintf_r+0x9c>
 800e69a:	059d      	lsls	r5, r3, #22
 800e69c:	d402      	bmi.n	800e6a4 <_vfiprintf_r+0x9c>
 800e69e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e6a0:	f7fc fc5f 	bl	800af62 <__retarget_lock_release_recursive>
 800e6a4:	9800      	ldr	r0, [sp, #0]
 800e6a6:	4623      	mov	r3, r4
 800e6a8:	465a      	mov	r2, fp
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	b03b      	add	sp, #236	@ 0xec
 800e6ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b2:	f000 bc31 	b.w	800ef18 <__sbprintf>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800e6bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e6c0:	ae11      	add	r6, sp, #68	@ 0x44
 800e6c2:	960e      	str	r6, [sp, #56]	@ 0x38
 800e6c4:	9307      	str	r3, [sp, #28]
 800e6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6c8:	9303      	str	r3, [sp, #12]
 800e6ca:	465b      	mov	r3, fp
 800e6cc:	461c      	mov	r4, r3
 800e6ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d2:	b10a      	cbz	r2, 800e6d8 <_vfiprintf_r+0xd0>
 800e6d4:	2a25      	cmp	r2, #37	@ 0x25
 800e6d6:	d1f9      	bne.n	800e6cc <_vfiprintf_r+0xc4>
 800e6d8:	ebb4 080b 	subs.w	r8, r4, fp
 800e6dc:	d00d      	beq.n	800e6fa <_vfiprintf_r+0xf2>
 800e6de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6e0:	4443      	add	r3, r8
 800e6e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	2b07      	cmp	r3, #7
 800e6ea:	e9c6 b800 	strd	fp, r8, [r6]
 800e6ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6f0:	dc75      	bgt.n	800e7de <_vfiprintf_r+0x1d6>
 800e6f2:	3608      	adds	r6, #8
 800e6f4:	9b03      	ldr	r3, [sp, #12]
 800e6f6:	4443      	add	r3, r8
 800e6f8:	9303      	str	r3, [sp, #12]
 800e6fa:	7823      	ldrb	r3, [r4, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f000 83cd 	beq.w	800ee9c <_vfiprintf_r+0x894>
 800e702:	2300      	movs	r3, #0
 800e704:	f04f 32ff 	mov.w	r2, #4294967295
 800e708:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e70c:	3401      	adds	r4, #1
 800e70e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800e712:	469a      	mov	sl, r3
 800e714:	46a3      	mov	fp, r4
 800e716:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800e71a:	f1a3 0220 	sub.w	r2, r3, #32
 800e71e:	2a5a      	cmp	r2, #90	@ 0x5a
 800e720:	f200 8316 	bhi.w	800ed50 <_vfiprintf_r+0x748>
 800e724:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e728:	0314009a 	.word	0x0314009a
 800e72c:	00a20314 	.word	0x00a20314
 800e730:	03140314 	.word	0x03140314
 800e734:	00820314 	.word	0x00820314
 800e738:	03140314 	.word	0x03140314
 800e73c:	00af00a5 	.word	0x00af00a5
 800e740:	00ac0314 	.word	0x00ac0314
 800e744:	031400b1 	.word	0x031400b1
 800e748:	00d000cd 	.word	0x00d000cd
 800e74c:	00d000d0 	.word	0x00d000d0
 800e750:	00d000d0 	.word	0x00d000d0
 800e754:	00d000d0 	.word	0x00d000d0
 800e758:	00d000d0 	.word	0x00d000d0
 800e75c:	03140314 	.word	0x03140314
 800e760:	03140314 	.word	0x03140314
 800e764:	03140314 	.word	0x03140314
 800e768:	03140314 	.word	0x03140314
 800e76c:	00f70314 	.word	0x00f70314
 800e770:	03140104 	.word	0x03140104
 800e774:	03140314 	.word	0x03140314
 800e778:	03140314 	.word	0x03140314
 800e77c:	03140314 	.word	0x03140314
 800e780:	03140314 	.word	0x03140314
 800e784:	01520314 	.word	0x01520314
 800e788:	03140314 	.word	0x03140314
 800e78c:	019a0314 	.word	0x019a0314
 800e790:	027a0314 	.word	0x027a0314
 800e794:	03140314 	.word	0x03140314
 800e798:	0314029a 	.word	0x0314029a
 800e79c:	03140314 	.word	0x03140314
 800e7a0:	03140314 	.word	0x03140314
 800e7a4:	03140314 	.word	0x03140314
 800e7a8:	03140314 	.word	0x03140314
 800e7ac:	00f70314 	.word	0x00f70314
 800e7b0:	03140106 	.word	0x03140106
 800e7b4:	03140314 	.word	0x03140314
 800e7b8:	010600e0 	.word	0x010600e0
 800e7bc:	031400f1 	.word	0x031400f1
 800e7c0:	031400eb 	.word	0x031400eb
 800e7c4:	01540132 	.word	0x01540132
 800e7c8:	00f10189 	.word	0x00f10189
 800e7cc:	019a0314 	.word	0x019a0314
 800e7d0:	027c0098 	.word	0x027c0098
 800e7d4:	03140314 	.word	0x03140314
 800e7d8:	03140065 	.word	0x03140065
 800e7dc:	0098      	.short	0x0098
 800e7de:	9800      	ldr	r0, [sp, #0]
 800e7e0:	aa0e      	add	r2, sp, #56	@ 0x38
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	f7ff fede 	bl	800e5a4 <__sprint_r>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	f040 8336 	bne.w	800ee5a <_vfiprintf_r+0x852>
 800e7ee:	ae11      	add	r6, sp, #68	@ 0x44
 800e7f0:	e780      	b.n	800e6f4 <_vfiprintf_r+0xec>
 800e7f2:	4a99      	ldr	r2, [pc, #612]	@ (800ea58 <_vfiprintf_r+0x450>)
 800e7f4:	9205      	str	r2, [sp, #20]
 800e7f6:	f01a 0220 	ands.w	r2, sl, #32
 800e7fa:	f000 8231 	beq.w	800ec60 <_vfiprintf_r+0x658>
 800e7fe:	3507      	adds	r5, #7
 800e800:	f025 0507 	bic.w	r5, r5, #7
 800e804:	46a8      	mov	r8, r5
 800e806:	686d      	ldr	r5, [r5, #4]
 800e808:	f858 4b08 	ldr.w	r4, [r8], #8
 800e80c:	f01a 0f01 	tst.w	sl, #1
 800e810:	d009      	beq.n	800e826 <_vfiprintf_r+0x21e>
 800e812:	ea54 0205 	orrs.w	r2, r4, r5
 800e816:	bf1f      	itttt	ne
 800e818:	2230      	movne	r2, #48	@ 0x30
 800e81a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800e81e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800e822:	f04a 0a02 	orrne.w	sl, sl, #2
 800e826:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800e82a:	e112      	b.n	800ea52 <_vfiprintf_r+0x44a>
 800e82c:	9800      	ldr	r0, [sp, #0]
 800e82e:	f7fe f9e7 	bl	800cc00 <_localeconv_r>
 800e832:	6843      	ldr	r3, [r0, #4]
 800e834:	9309      	str	r3, [sp, #36]	@ 0x24
 800e836:	4618      	mov	r0, r3
 800e838:	f7f1 fcf2 	bl	8000220 <strlen>
 800e83c:	9007      	str	r0, [sp, #28]
 800e83e:	9800      	ldr	r0, [sp, #0]
 800e840:	f7fe f9de 	bl	800cc00 <_localeconv_r>
 800e844:	6883      	ldr	r3, [r0, #8]
 800e846:	9306      	str	r3, [sp, #24]
 800e848:	9b07      	ldr	r3, [sp, #28]
 800e84a:	b12b      	cbz	r3, 800e858 <_vfiprintf_r+0x250>
 800e84c:	9b06      	ldr	r3, [sp, #24]
 800e84e:	b11b      	cbz	r3, 800e858 <_vfiprintf_r+0x250>
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	b10b      	cbz	r3, 800e858 <_vfiprintf_r+0x250>
 800e854:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800e858:	465c      	mov	r4, fp
 800e85a:	e75b      	b.n	800e714 <_vfiprintf_r+0x10c>
 800e85c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1f9      	bne.n	800e858 <_vfiprintf_r+0x250>
 800e864:	2320      	movs	r3, #32
 800e866:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800e86a:	e7f5      	b.n	800e858 <_vfiprintf_r+0x250>
 800e86c:	f04a 0a01 	orr.w	sl, sl, #1
 800e870:	e7f2      	b.n	800e858 <_vfiprintf_r+0x250>
 800e872:	f855 3b04 	ldr.w	r3, [r5], #4
 800e876:	9302      	str	r3, [sp, #8]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	daed      	bge.n	800e858 <_vfiprintf_r+0x250>
 800e87c:	425b      	negs	r3, r3
 800e87e:	9302      	str	r3, [sp, #8]
 800e880:	f04a 0a04 	orr.w	sl, sl, #4
 800e884:	e7e8      	b.n	800e858 <_vfiprintf_r+0x250>
 800e886:	232b      	movs	r3, #43	@ 0x2b
 800e888:	e7ed      	b.n	800e866 <_vfiprintf_r+0x25e>
 800e88a:	465a      	mov	r2, fp
 800e88c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e890:	2b2a      	cmp	r3, #42	@ 0x2a
 800e892:	d112      	bne.n	800e8ba <_vfiprintf_r+0x2b2>
 800e894:	f855 3b04 	ldr.w	r3, [r5], #4
 800e898:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	4693      	mov	fp, r2
 800e8a0:	e7da      	b.n	800e858 <_vfiprintf_r+0x250>
 800e8a2:	9b01      	ldr	r3, [sp, #4]
 800e8a4:	fb00 1303 	mla	r3, r0, r3, r1
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e8ae:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800e8b2:	2909      	cmp	r1, #9
 800e8b4:	d9f5      	bls.n	800e8a2 <_vfiprintf_r+0x29a>
 800e8b6:	4693      	mov	fp, r2
 800e8b8:	e72f      	b.n	800e71a <_vfiprintf_r+0x112>
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	9101      	str	r1, [sp, #4]
 800e8be:	200a      	movs	r0, #10
 800e8c0:	e7f5      	b.n	800e8ae <_vfiprintf_r+0x2a6>
 800e8c2:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800e8c6:	e7c7      	b.n	800e858 <_vfiprintf_r+0x250>
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	465a      	mov	r2, fp
 800e8cc:	9102      	str	r1, [sp, #8]
 800e8ce:	200a      	movs	r0, #10
 800e8d0:	9902      	ldr	r1, [sp, #8]
 800e8d2:	3b30      	subs	r3, #48	@ 0x30
 800e8d4:	fb00 3301 	mla	r3, r0, r1, r3
 800e8d8:	9302      	str	r3, [sp, #8]
 800e8da:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e8de:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800e8e2:	2909      	cmp	r1, #9
 800e8e4:	d9f4      	bls.n	800e8d0 <_vfiprintf_r+0x2c8>
 800e8e6:	e7e6      	b.n	800e8b6 <_vfiprintf_r+0x2ae>
 800e8e8:	f89b 3000 	ldrb.w	r3, [fp]
 800e8ec:	2b68      	cmp	r3, #104	@ 0x68
 800e8ee:	bf06      	itte	eq
 800e8f0:	f10b 0b01 	addeq.w	fp, fp, #1
 800e8f4:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800e8f8:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800e8fc:	e7ac      	b.n	800e858 <_vfiprintf_r+0x250>
 800e8fe:	f89b 3000 	ldrb.w	r3, [fp]
 800e902:	2b6c      	cmp	r3, #108	@ 0x6c
 800e904:	d104      	bne.n	800e910 <_vfiprintf_r+0x308>
 800e906:	f10b 0b01 	add.w	fp, fp, #1
 800e90a:	f04a 0a20 	orr.w	sl, sl, #32
 800e90e:	e7a3      	b.n	800e858 <_vfiprintf_r+0x250>
 800e910:	f04a 0a10 	orr.w	sl, sl, #16
 800e914:	e7a0      	b.n	800e858 <_vfiprintf_r+0x250>
 800e916:	46a8      	mov	r8, r5
 800e918:	2400      	movs	r4, #0
 800e91a:	f858 3b04 	ldr.w	r3, [r8], #4
 800e91e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800e922:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800e926:	2301      	movs	r3, #1
 800e928:	9301      	str	r3, [sp, #4]
 800e92a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800e92e:	e0ab      	b.n	800ea88 <_vfiprintf_r+0x480>
 800e930:	f04a 0a10 	orr.w	sl, sl, #16
 800e934:	f01a 0f20 	tst.w	sl, #32
 800e938:	d011      	beq.n	800e95e <_vfiprintf_r+0x356>
 800e93a:	3507      	adds	r5, #7
 800e93c:	f025 0507 	bic.w	r5, r5, #7
 800e940:	46a8      	mov	r8, r5
 800e942:	686d      	ldr	r5, [r5, #4]
 800e944:	f858 4b08 	ldr.w	r4, [r8], #8
 800e948:	2d00      	cmp	r5, #0
 800e94a:	da06      	bge.n	800e95a <_vfiprintf_r+0x352>
 800e94c:	4264      	negs	r4, r4
 800e94e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800e952:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800e956:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800e95a:	2301      	movs	r3, #1
 800e95c:	e048      	b.n	800e9f0 <_vfiprintf_r+0x3e8>
 800e95e:	46a8      	mov	r8, r5
 800e960:	f01a 0f10 	tst.w	sl, #16
 800e964:	f858 5b04 	ldr.w	r5, [r8], #4
 800e968:	d002      	beq.n	800e970 <_vfiprintf_r+0x368>
 800e96a:	462c      	mov	r4, r5
 800e96c:	17ed      	asrs	r5, r5, #31
 800e96e:	e7eb      	b.n	800e948 <_vfiprintf_r+0x340>
 800e970:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800e974:	d003      	beq.n	800e97e <_vfiprintf_r+0x376>
 800e976:	b22c      	sxth	r4, r5
 800e978:	f345 35c0 	sbfx	r5, r5, #15, #1
 800e97c:	e7e4      	b.n	800e948 <_vfiprintf_r+0x340>
 800e97e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800e982:	d0f2      	beq.n	800e96a <_vfiprintf_r+0x362>
 800e984:	b26c      	sxtb	r4, r5
 800e986:	f345 15c0 	sbfx	r5, r5, #7, #1
 800e98a:	e7dd      	b.n	800e948 <_vfiprintf_r+0x340>
 800e98c:	f01a 0f20 	tst.w	sl, #32
 800e990:	d007      	beq.n	800e9a2 <_vfiprintf_r+0x39a>
 800e992:	9a03      	ldr	r2, [sp, #12]
 800e994:	682b      	ldr	r3, [r5, #0]
 800e996:	9903      	ldr	r1, [sp, #12]
 800e998:	17d2      	asrs	r2, r2, #31
 800e99a:	e9c3 1200 	strd	r1, r2, [r3]
 800e99e:	3504      	adds	r5, #4
 800e9a0:	e693      	b.n	800e6ca <_vfiprintf_r+0xc2>
 800e9a2:	f01a 0f10 	tst.w	sl, #16
 800e9a6:	d003      	beq.n	800e9b0 <_vfiprintf_r+0x3a8>
 800e9a8:	682b      	ldr	r3, [r5, #0]
 800e9aa:	9a03      	ldr	r2, [sp, #12]
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	e7f6      	b.n	800e99e <_vfiprintf_r+0x396>
 800e9b0:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800e9b4:	d003      	beq.n	800e9be <_vfiprintf_r+0x3b6>
 800e9b6:	682b      	ldr	r3, [r5, #0]
 800e9b8:	9a03      	ldr	r2, [sp, #12]
 800e9ba:	801a      	strh	r2, [r3, #0]
 800e9bc:	e7ef      	b.n	800e99e <_vfiprintf_r+0x396>
 800e9be:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800e9c2:	d0f1      	beq.n	800e9a8 <_vfiprintf_r+0x3a0>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	9a03      	ldr	r2, [sp, #12]
 800e9c8:	701a      	strb	r2, [r3, #0]
 800e9ca:	e7e8      	b.n	800e99e <_vfiprintf_r+0x396>
 800e9cc:	f04a 0a10 	orr.w	sl, sl, #16
 800e9d0:	f01a 0320 	ands.w	r3, sl, #32
 800e9d4:	d01f      	beq.n	800ea16 <_vfiprintf_r+0x40e>
 800e9d6:	3507      	adds	r5, #7
 800e9d8:	f025 0507 	bic.w	r5, r5, #7
 800e9dc:	46a8      	mov	r8, r5
 800e9de:	686d      	ldr	r5, [r5, #4]
 800e9e0:	f858 4b08 	ldr.w	r4, [r8], #8
 800e9e4:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800e9f0:	9a01      	ldr	r2, [sp, #4]
 800e9f2:	3201      	adds	r2, #1
 800e9f4:	f000 825f 	beq.w	800eeb6 <_vfiprintf_r+0x8ae>
 800e9f8:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800e9fc:	9204      	str	r2, [sp, #16]
 800e9fe:	ea54 0205 	orrs.w	r2, r4, r5
 800ea02:	f040 825e 	bne.w	800eec2 <_vfiprintf_r+0x8ba>
 800ea06:	9a01      	ldr	r2, [sp, #4]
 800ea08:	2a00      	cmp	r2, #0
 800ea0a:	f000 8198 	beq.w	800ed3e <_vfiprintf_r+0x736>
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	f040 825a 	bne.w	800eec8 <_vfiprintf_r+0x8c0>
 800ea14:	e13b      	b.n	800ec8e <_vfiprintf_r+0x686>
 800ea16:	46a8      	mov	r8, r5
 800ea18:	f01a 0510 	ands.w	r5, sl, #16
 800ea1c:	f858 4b04 	ldr.w	r4, [r8], #4
 800ea20:	d001      	beq.n	800ea26 <_vfiprintf_r+0x41e>
 800ea22:	461d      	mov	r5, r3
 800ea24:	e7de      	b.n	800e9e4 <_vfiprintf_r+0x3dc>
 800ea26:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ea2a:	d001      	beq.n	800ea30 <_vfiprintf_r+0x428>
 800ea2c:	b2a4      	uxth	r4, r4
 800ea2e:	e7d9      	b.n	800e9e4 <_vfiprintf_r+0x3dc>
 800ea30:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ea34:	d0d6      	beq.n	800e9e4 <_vfiprintf_r+0x3dc>
 800ea36:	b2e4      	uxtb	r4, r4
 800ea38:	e7f3      	b.n	800ea22 <_vfiprintf_r+0x41a>
 800ea3a:	46a8      	mov	r8, r5
 800ea3c:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ea40:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ea44:	f858 4b04 	ldr.w	r4, [r8], #4
 800ea48:	4b03      	ldr	r3, [pc, #12]	@ (800ea58 <_vfiprintf_r+0x450>)
 800ea4a:	9305      	str	r3, [sp, #20]
 800ea4c:	2500      	movs	r5, #0
 800ea4e:	f04a 0a02 	orr.w	sl, sl, #2
 800ea52:	2302      	movs	r3, #2
 800ea54:	e7c9      	b.n	800e9ea <_vfiprintf_r+0x3e2>
 800ea56:	bf00      	nop
 800ea58:	080102d4 	.word	0x080102d4
 800ea5c:	9b01      	ldr	r3, [sp, #4]
 800ea5e:	46a8      	mov	r8, r5
 800ea60:	1c5c      	adds	r4, r3, #1
 800ea62:	f04f 0500 	mov.w	r5, #0
 800ea66:	f858 9b04 	ldr.w	r9, [r8], #4
 800ea6a:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800ea6e:	f000 80d0 	beq.w	800ec12 <_vfiprintf_r+0x60a>
 800ea72:	461a      	mov	r2, r3
 800ea74:	4629      	mov	r1, r5
 800ea76:	4648      	mov	r0, r9
 800ea78:	f7f1 fbda 	bl	8000230 <memchr>
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	b118      	cbz	r0, 800ea88 <_vfiprintf_r+0x480>
 800ea80:	eba0 0309 	sub.w	r3, r0, r9
 800ea84:	9301      	str	r3, [sp, #4]
 800ea86:	462c      	mov	r4, r5
 800ea88:	9b01      	ldr	r3, [sp, #4]
 800ea8a:	42a3      	cmp	r3, r4
 800ea8c:	bfb8      	it	lt
 800ea8e:	4623      	movlt	r3, r4
 800ea90:	9304      	str	r3, [sp, #16]
 800ea92:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ea96:	b113      	cbz	r3, 800ea9e <_vfiprintf_r+0x496>
 800ea98:	9b04      	ldr	r3, [sp, #16]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	9304      	str	r3, [sp, #16]
 800ea9e:	f01a 0302 	ands.w	r3, sl, #2
 800eaa2:	9308      	str	r3, [sp, #32]
 800eaa4:	bf1e      	ittt	ne
 800eaa6:	9b04      	ldrne	r3, [sp, #16]
 800eaa8:	3302      	addne	r3, #2
 800eaaa:	9304      	strne	r3, [sp, #16]
 800eaac:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800eab0:	930a      	str	r3, [sp, #40]	@ 0x28
 800eab2:	d11f      	bne.n	800eaf4 <_vfiprintf_r+0x4ec>
 800eab4:	9b02      	ldr	r3, [sp, #8]
 800eab6:	9a04      	ldr	r2, [sp, #16]
 800eab8:	1a9d      	subs	r5, r3, r2
 800eaba:	2d00      	cmp	r5, #0
 800eabc:	dd1a      	ble.n	800eaf4 <_vfiprintf_r+0x4ec>
 800eabe:	4ba9      	ldr	r3, [pc, #676]	@ (800ed64 <_vfiprintf_r+0x75c>)
 800eac0:	6033      	str	r3, [r6, #0]
 800eac2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800eac6:	2d10      	cmp	r5, #16
 800eac8:	f102 0201 	add.w	r2, r2, #1
 800eacc:	f106 0008 	add.w	r0, r6, #8
 800ead0:	f300 814e 	bgt.w	800ed70 <_vfiprintf_r+0x768>
 800ead4:	6075      	str	r5, [r6, #4]
 800ead6:	2a07      	cmp	r2, #7
 800ead8:	4465      	add	r5, ip
 800eada:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800eade:	f340 815a 	ble.w	800ed96 <_vfiprintf_r+0x78e>
 800eae2:	9800      	ldr	r0, [sp, #0]
 800eae4:	aa0e      	add	r2, sp, #56	@ 0x38
 800eae6:	4639      	mov	r1, r7
 800eae8:	f7ff fd5c 	bl	800e5a4 <__sprint_r>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f040 81b4 	bne.w	800ee5a <_vfiprintf_r+0x852>
 800eaf2:	ae11      	add	r6, sp, #68	@ 0x44
 800eaf4:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800eaf8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eafc:	b161      	cbz	r1, 800eb18 <_vfiprintf_r+0x510>
 800eafe:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800eb02:	3301      	adds	r3, #1
 800eb04:	6031      	str	r1, [r6, #0]
 800eb06:	2101      	movs	r1, #1
 800eb08:	440a      	add	r2, r1
 800eb0a:	2b07      	cmp	r3, #7
 800eb0c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800eb10:	6071      	str	r1, [r6, #4]
 800eb12:	f300 8142 	bgt.w	800ed9a <_vfiprintf_r+0x792>
 800eb16:	3608      	adds	r6, #8
 800eb18:	9908      	ldr	r1, [sp, #32]
 800eb1a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eb1e:	b159      	cbz	r1, 800eb38 <_vfiprintf_r+0x530>
 800eb20:	a90d      	add	r1, sp, #52	@ 0x34
 800eb22:	3301      	adds	r3, #1
 800eb24:	6031      	str	r1, [r6, #0]
 800eb26:	2102      	movs	r1, #2
 800eb28:	440a      	add	r2, r1
 800eb2a:	2b07      	cmp	r3, #7
 800eb2c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800eb30:	6071      	str	r1, [r6, #4]
 800eb32:	f300 813b 	bgt.w	800edac <_vfiprintf_r+0x7a4>
 800eb36:	3608      	adds	r6, #8
 800eb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb3a:	2b80      	cmp	r3, #128	@ 0x80
 800eb3c:	d11f      	bne.n	800eb7e <_vfiprintf_r+0x576>
 800eb3e:	9b02      	ldr	r3, [sp, #8]
 800eb40:	9a04      	ldr	r2, [sp, #16]
 800eb42:	1a9d      	subs	r5, r3, r2
 800eb44:	2d00      	cmp	r5, #0
 800eb46:	dd1a      	ble.n	800eb7e <_vfiprintf_r+0x576>
 800eb48:	4b87      	ldr	r3, [pc, #540]	@ (800ed68 <_vfiprintf_r+0x760>)
 800eb4a:	6033      	str	r3, [r6, #0]
 800eb4c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800eb50:	2d10      	cmp	r5, #16
 800eb52:	f102 0201 	add.w	r2, r2, #1
 800eb56:	f106 0008 	add.w	r0, r6, #8
 800eb5a:	f300 8130 	bgt.w	800edbe <_vfiprintf_r+0x7b6>
 800eb5e:	6075      	str	r5, [r6, #4]
 800eb60:	2a07      	cmp	r2, #7
 800eb62:	4465      	add	r5, ip
 800eb64:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800eb68:	f340 813c 	ble.w	800ede4 <_vfiprintf_r+0x7dc>
 800eb6c:	9800      	ldr	r0, [sp, #0]
 800eb6e:	aa0e      	add	r2, sp, #56	@ 0x38
 800eb70:	4639      	mov	r1, r7
 800eb72:	f7ff fd17 	bl	800e5a4 <__sprint_r>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	f040 816f 	bne.w	800ee5a <_vfiprintf_r+0x852>
 800eb7c:	ae11      	add	r6, sp, #68	@ 0x44
 800eb7e:	9b01      	ldr	r3, [sp, #4]
 800eb80:	1ae4      	subs	r4, r4, r3
 800eb82:	2c00      	cmp	r4, #0
 800eb84:	dd1a      	ble.n	800ebbc <_vfiprintf_r+0x5b4>
 800eb86:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eb8a:	4877      	ldr	r0, [pc, #476]	@ (800ed68 <_vfiprintf_r+0x760>)
 800eb8c:	6030      	str	r0, [r6, #0]
 800eb8e:	2c10      	cmp	r4, #16
 800eb90:	f103 0301 	add.w	r3, r3, #1
 800eb94:	f106 0108 	add.w	r1, r6, #8
 800eb98:	f300 8126 	bgt.w	800ede8 <_vfiprintf_r+0x7e0>
 800eb9c:	6074      	str	r4, [r6, #4]
 800eb9e:	2b07      	cmp	r3, #7
 800eba0:	4414      	add	r4, r2
 800eba2:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800eba6:	f340 8130 	ble.w	800ee0a <_vfiprintf_r+0x802>
 800ebaa:	9800      	ldr	r0, [sp, #0]
 800ebac:	aa0e      	add	r2, sp, #56	@ 0x38
 800ebae:	4639      	mov	r1, r7
 800ebb0:	f7ff fcf8 	bl	800e5a4 <__sprint_r>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	f040 8150 	bne.w	800ee5a <_vfiprintf_r+0x852>
 800ebba:	ae11      	add	r6, sp, #68	@ 0x44
 800ebbc:	9b01      	ldr	r3, [sp, #4]
 800ebbe:	9a01      	ldr	r2, [sp, #4]
 800ebc0:	6073      	str	r3, [r6, #4]
 800ebc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebc4:	f8c6 9000 	str.w	r9, [r6]
 800ebc8:	4413      	add	r3, r2
 800ebca:	9310      	str	r3, [sp, #64]	@ 0x40
 800ebcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebce:	3301      	adds	r3, #1
 800ebd0:	2b07      	cmp	r3, #7
 800ebd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ebd4:	f300 811b 	bgt.w	800ee0e <_vfiprintf_r+0x806>
 800ebd8:	f106 0308 	add.w	r3, r6, #8
 800ebdc:	f01a 0f04 	tst.w	sl, #4
 800ebe0:	f040 811d 	bne.w	800ee1e <_vfiprintf_r+0x816>
 800ebe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebe8:	9904      	ldr	r1, [sp, #16]
 800ebea:	428a      	cmp	r2, r1
 800ebec:	bfac      	ite	ge
 800ebee:	189b      	addge	r3, r3, r2
 800ebf0:	185b      	addlt	r3, r3, r1
 800ebf2:	9303      	str	r3, [sp, #12]
 800ebf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebf6:	b13b      	cbz	r3, 800ec08 <_vfiprintf_r+0x600>
 800ebf8:	9800      	ldr	r0, [sp, #0]
 800ebfa:	aa0e      	add	r2, sp, #56	@ 0x38
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	f7ff fcd1 	bl	800e5a4 <__sprint_r>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f040 8129 	bne.w	800ee5a <_vfiprintf_r+0x852>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec0c:	4645      	mov	r5, r8
 800ec0e:	ae11      	add	r6, sp, #68	@ 0x44
 800ec10:	e55b      	b.n	800e6ca <_vfiprintf_r+0xc2>
 800ec12:	4648      	mov	r0, r9
 800ec14:	f7f1 fb04 	bl	8000220 <strlen>
 800ec18:	9001      	str	r0, [sp, #4]
 800ec1a:	e734      	b.n	800ea86 <_vfiprintf_r+0x47e>
 800ec1c:	f04a 0a10 	orr.w	sl, sl, #16
 800ec20:	f01a 0320 	ands.w	r3, sl, #32
 800ec24:	d008      	beq.n	800ec38 <_vfiprintf_r+0x630>
 800ec26:	3507      	adds	r5, #7
 800ec28:	f025 0507 	bic.w	r5, r5, #7
 800ec2c:	46a8      	mov	r8, r5
 800ec2e:	686d      	ldr	r5, [r5, #4]
 800ec30:	f858 4b08 	ldr.w	r4, [r8], #8
 800ec34:	2301      	movs	r3, #1
 800ec36:	e6d8      	b.n	800e9ea <_vfiprintf_r+0x3e2>
 800ec38:	46a8      	mov	r8, r5
 800ec3a:	f01a 0510 	ands.w	r5, sl, #16
 800ec3e:	f858 4b04 	ldr.w	r4, [r8], #4
 800ec42:	d001      	beq.n	800ec48 <_vfiprintf_r+0x640>
 800ec44:	461d      	mov	r5, r3
 800ec46:	e7f5      	b.n	800ec34 <_vfiprintf_r+0x62c>
 800ec48:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ec4c:	d001      	beq.n	800ec52 <_vfiprintf_r+0x64a>
 800ec4e:	b2a4      	uxth	r4, r4
 800ec50:	e7f0      	b.n	800ec34 <_vfiprintf_r+0x62c>
 800ec52:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ec56:	d0ed      	beq.n	800ec34 <_vfiprintf_r+0x62c>
 800ec58:	b2e4      	uxtb	r4, r4
 800ec5a:	e7f3      	b.n	800ec44 <_vfiprintf_r+0x63c>
 800ec5c:	4a43      	ldr	r2, [pc, #268]	@ (800ed6c <_vfiprintf_r+0x764>)
 800ec5e:	e5c9      	b.n	800e7f4 <_vfiprintf_r+0x1ec>
 800ec60:	46a8      	mov	r8, r5
 800ec62:	f01a 0510 	ands.w	r5, sl, #16
 800ec66:	f858 4b04 	ldr.w	r4, [r8], #4
 800ec6a:	d001      	beq.n	800ec70 <_vfiprintf_r+0x668>
 800ec6c:	4615      	mov	r5, r2
 800ec6e:	e5cd      	b.n	800e80c <_vfiprintf_r+0x204>
 800ec70:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800ec74:	d001      	beq.n	800ec7a <_vfiprintf_r+0x672>
 800ec76:	b2a4      	uxth	r4, r4
 800ec78:	e5c8      	b.n	800e80c <_vfiprintf_r+0x204>
 800ec7a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ec7e:	f43f adc5 	beq.w	800e80c <_vfiprintf_r+0x204>
 800ec82:	b2e4      	uxtb	r4, r4
 800ec84:	e7f2      	b.n	800ec6c <_vfiprintf_r+0x664>
 800ec86:	2c0a      	cmp	r4, #10
 800ec88:	f175 0300 	sbcs.w	r3, r5, #0
 800ec8c:	d206      	bcs.n	800ec9c <_vfiprintf_r+0x694>
 800ec8e:	3430      	adds	r4, #48	@ 0x30
 800ec90:	b2e4      	uxtb	r4, r4
 800ec92:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800ec96:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800ec9a:	e131      	b.n	800ef00 <_vfiprintf_r+0x8f8>
 800ec9c:	ab3a      	add	r3, sp, #232	@ 0xe8
 800ec9e:	9308      	str	r3, [sp, #32]
 800eca0:	9b04      	ldr	r3, [sp, #16]
 800eca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eca6:	f04f 0a00 	mov.w	sl, #0
 800ecaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecac:	220a      	movs	r2, #10
 800ecae:	2300      	movs	r3, #0
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	4629      	mov	r1, r5
 800ecb4:	f7f2 f810 	bl	8000cd8 <__aeabi_uldivmod>
 800ecb8:	460b      	mov	r3, r1
 800ecba:	9908      	ldr	r1, [sp, #32]
 800ecbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ecbe:	3230      	adds	r2, #48	@ 0x30
 800ecc0:	f801 2c01 	strb.w	r2, [r1, #-1]
 800ecc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecc6:	f101 39ff 	add.w	r9, r1, #4294967295
 800ecca:	f10a 0a01 	add.w	sl, sl, #1
 800ecce:	b1e2      	cbz	r2, 800ed0a <_vfiprintf_r+0x702>
 800ecd0:	9a06      	ldr	r2, [sp, #24]
 800ecd2:	7812      	ldrb	r2, [r2, #0]
 800ecd4:	4552      	cmp	r2, sl
 800ecd6:	d118      	bne.n	800ed0a <_vfiprintf_r+0x702>
 800ecd8:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800ecdc:	d015      	beq.n	800ed0a <_vfiprintf_r+0x702>
 800ecde:	2c0a      	cmp	r4, #10
 800ece0:	f175 0200 	sbcs.w	r2, r5, #0
 800ece4:	d311      	bcc.n	800ed0a <_vfiprintf_r+0x702>
 800ece6:	9308      	str	r3, [sp, #32]
 800ece8:	9b07      	ldr	r3, [sp, #28]
 800ecea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecec:	eba9 0903 	sub.w	r9, r9, r3
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4648      	mov	r0, r9
 800ecf4:	f7fd ff6a 	bl	800cbcc <strncpy>
 800ecf8:	9b06      	ldr	r3, [sp, #24]
 800ecfa:	785a      	ldrb	r2, [r3, #1]
 800ecfc:	9b08      	ldr	r3, [sp, #32]
 800ecfe:	b172      	cbz	r2, 800ed1e <_vfiprintf_r+0x716>
 800ed00:	9a06      	ldr	r2, [sp, #24]
 800ed02:	3201      	adds	r2, #1
 800ed04:	9206      	str	r2, [sp, #24]
 800ed06:	f04f 0a00 	mov.w	sl, #0
 800ed0a:	2c0a      	cmp	r4, #10
 800ed0c:	f175 0500 	sbcs.w	r5, r5, #0
 800ed10:	f0c0 80f6 	bcc.w	800ef00 <_vfiprintf_r+0x8f8>
 800ed14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ed16:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed1a:	461d      	mov	r5, r3
 800ed1c:	e7c6      	b.n	800ecac <_vfiprintf_r+0x6a4>
 800ed1e:	4692      	mov	sl, r2
 800ed20:	e7f3      	b.n	800ed0a <_vfiprintf_r+0x702>
 800ed22:	f004 030f 	and.w	r3, r4, #15
 800ed26:	9a05      	ldr	r2, [sp, #20]
 800ed28:	0924      	lsrs	r4, r4, #4
 800ed2a:	5cd3      	ldrb	r3, [r2, r3]
 800ed2c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ed30:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800ed34:	092d      	lsrs	r5, r5, #4
 800ed36:	ea54 0305 	orrs.w	r3, r4, r5
 800ed3a:	d1f2      	bne.n	800ed22 <_vfiprintf_r+0x71a>
 800ed3c:	e0e0      	b.n	800ef00 <_vfiprintf_r+0x8f8>
 800ed3e:	b923      	cbnz	r3, 800ed4a <_vfiprintf_r+0x742>
 800ed40:	f01a 0f01 	tst.w	sl, #1
 800ed44:	d001      	beq.n	800ed4a <_vfiprintf_r+0x742>
 800ed46:	2430      	movs	r4, #48	@ 0x30
 800ed48:	e7a3      	b.n	800ec92 <_vfiprintf_r+0x68a>
 800ed4a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800ed4e:	e0d7      	b.n	800ef00 <_vfiprintf_r+0x8f8>
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 80a3 	beq.w	800ee9c <_vfiprintf_r+0x894>
 800ed56:	2400      	movs	r4, #0
 800ed58:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ed5c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ed60:	46a8      	mov	r8, r5
 800ed62:	e5e0      	b.n	800e926 <_vfiprintf_r+0x31e>
 800ed64:	0801063d 	.word	0x0801063d
 800ed68:	0801062d 	.word	0x0801062d
 800ed6c:	080102e5 	.word	0x080102e5
 800ed70:	2110      	movs	r1, #16
 800ed72:	6071      	str	r1, [r6, #4]
 800ed74:	2a07      	cmp	r2, #7
 800ed76:	4461      	add	r1, ip
 800ed78:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ed7c:	dd08      	ble.n	800ed90 <_vfiprintf_r+0x788>
 800ed7e:	9800      	ldr	r0, [sp, #0]
 800ed80:	aa0e      	add	r2, sp, #56	@ 0x38
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7ff fc0e 	bl	800e5a4 <__sprint_r>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d166      	bne.n	800ee5a <_vfiprintf_r+0x852>
 800ed8c:	4b60      	ldr	r3, [pc, #384]	@ (800ef10 <_vfiprintf_r+0x908>)
 800ed8e:	a811      	add	r0, sp, #68	@ 0x44
 800ed90:	3d10      	subs	r5, #16
 800ed92:	4606      	mov	r6, r0
 800ed94:	e694      	b.n	800eac0 <_vfiprintf_r+0x4b8>
 800ed96:	4606      	mov	r6, r0
 800ed98:	e6ac      	b.n	800eaf4 <_vfiprintf_r+0x4ec>
 800ed9a:	9800      	ldr	r0, [sp, #0]
 800ed9c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ed9e:	4639      	mov	r1, r7
 800eda0:	f7ff fc00 	bl	800e5a4 <__sprint_r>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d158      	bne.n	800ee5a <_vfiprintf_r+0x852>
 800eda8:	ae11      	add	r6, sp, #68	@ 0x44
 800edaa:	e6b5      	b.n	800eb18 <_vfiprintf_r+0x510>
 800edac:	9800      	ldr	r0, [sp, #0]
 800edae:	aa0e      	add	r2, sp, #56	@ 0x38
 800edb0:	4639      	mov	r1, r7
 800edb2:	f7ff fbf7 	bl	800e5a4 <__sprint_r>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d14f      	bne.n	800ee5a <_vfiprintf_r+0x852>
 800edba:	ae11      	add	r6, sp, #68	@ 0x44
 800edbc:	e6bc      	b.n	800eb38 <_vfiprintf_r+0x530>
 800edbe:	2110      	movs	r1, #16
 800edc0:	6071      	str	r1, [r6, #4]
 800edc2:	2a07      	cmp	r2, #7
 800edc4:	4461      	add	r1, ip
 800edc6:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800edca:	dd08      	ble.n	800edde <_vfiprintf_r+0x7d6>
 800edcc:	9800      	ldr	r0, [sp, #0]
 800edce:	aa0e      	add	r2, sp, #56	@ 0x38
 800edd0:	4639      	mov	r1, r7
 800edd2:	f7ff fbe7 	bl	800e5a4 <__sprint_r>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d13f      	bne.n	800ee5a <_vfiprintf_r+0x852>
 800edda:	4b4e      	ldr	r3, [pc, #312]	@ (800ef14 <_vfiprintf_r+0x90c>)
 800eddc:	a811      	add	r0, sp, #68	@ 0x44
 800edde:	3d10      	subs	r5, #16
 800ede0:	4606      	mov	r6, r0
 800ede2:	e6b2      	b.n	800eb4a <_vfiprintf_r+0x542>
 800ede4:	4606      	mov	r6, r0
 800ede6:	e6ca      	b.n	800eb7e <_vfiprintf_r+0x576>
 800ede8:	2010      	movs	r0, #16
 800edea:	4402      	add	r2, r0
 800edec:	2b07      	cmp	r3, #7
 800edee:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800edf2:	6070      	str	r0, [r6, #4]
 800edf4:	dd06      	ble.n	800ee04 <_vfiprintf_r+0x7fc>
 800edf6:	9800      	ldr	r0, [sp, #0]
 800edf8:	aa0e      	add	r2, sp, #56	@ 0x38
 800edfa:	4639      	mov	r1, r7
 800edfc:	f7ff fbd2 	bl	800e5a4 <__sprint_r>
 800ee00:	bb58      	cbnz	r0, 800ee5a <_vfiprintf_r+0x852>
 800ee02:	a911      	add	r1, sp, #68	@ 0x44
 800ee04:	3c10      	subs	r4, #16
 800ee06:	460e      	mov	r6, r1
 800ee08:	e6bd      	b.n	800eb86 <_vfiprintf_r+0x57e>
 800ee0a:	460e      	mov	r6, r1
 800ee0c:	e6d6      	b.n	800ebbc <_vfiprintf_r+0x5b4>
 800ee0e:	9800      	ldr	r0, [sp, #0]
 800ee10:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee12:	4639      	mov	r1, r7
 800ee14:	f7ff fbc6 	bl	800e5a4 <__sprint_r>
 800ee18:	b9f8      	cbnz	r0, 800ee5a <_vfiprintf_r+0x852>
 800ee1a:	ab11      	add	r3, sp, #68	@ 0x44
 800ee1c:	e6de      	b.n	800ebdc <_vfiprintf_r+0x5d4>
 800ee1e:	9a02      	ldr	r2, [sp, #8]
 800ee20:	9904      	ldr	r1, [sp, #16]
 800ee22:	1a54      	subs	r4, r2, r1
 800ee24:	2c00      	cmp	r4, #0
 800ee26:	f77f aedd 	ble.w	800ebe4 <_vfiprintf_r+0x5dc>
 800ee2a:	4d39      	ldr	r5, [pc, #228]	@ (800ef10 <_vfiprintf_r+0x908>)
 800ee2c:	2610      	movs	r6, #16
 800ee2e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800ee32:	2c10      	cmp	r4, #16
 800ee34:	f102 0201 	add.w	r2, r2, #1
 800ee38:	601d      	str	r5, [r3, #0]
 800ee3a:	dc1d      	bgt.n	800ee78 <_vfiprintf_r+0x870>
 800ee3c:	605c      	str	r4, [r3, #4]
 800ee3e:	2a07      	cmp	r2, #7
 800ee40:	440c      	add	r4, r1
 800ee42:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800ee46:	f77f aecd 	ble.w	800ebe4 <_vfiprintf_r+0x5dc>
 800ee4a:	9800      	ldr	r0, [sp, #0]
 800ee4c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee4e:	4639      	mov	r1, r7
 800ee50:	f7ff fba8 	bl	800e5a4 <__sprint_r>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	f43f aec5 	beq.w	800ebe4 <_vfiprintf_r+0x5dc>
 800ee5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee5c:	07d9      	lsls	r1, r3, #31
 800ee5e:	d405      	bmi.n	800ee6c <_vfiprintf_r+0x864>
 800ee60:	89bb      	ldrh	r3, [r7, #12]
 800ee62:	059a      	lsls	r2, r3, #22
 800ee64:	d402      	bmi.n	800ee6c <_vfiprintf_r+0x864>
 800ee66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ee68:	f7fc f87b 	bl	800af62 <__retarget_lock_release_recursive>
 800ee6c:	89bb      	ldrh	r3, [r7, #12]
 800ee6e:	065b      	lsls	r3, r3, #25
 800ee70:	f57f abfb 	bpl.w	800e66a <_vfiprintf_r+0x62>
 800ee74:	f7ff bbf6 	b.w	800e664 <_vfiprintf_r+0x5c>
 800ee78:	3110      	adds	r1, #16
 800ee7a:	2a07      	cmp	r2, #7
 800ee7c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ee80:	605e      	str	r6, [r3, #4]
 800ee82:	dc02      	bgt.n	800ee8a <_vfiprintf_r+0x882>
 800ee84:	3308      	adds	r3, #8
 800ee86:	3c10      	subs	r4, #16
 800ee88:	e7d1      	b.n	800ee2e <_vfiprintf_r+0x826>
 800ee8a:	9800      	ldr	r0, [sp, #0]
 800ee8c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee8e:	4639      	mov	r1, r7
 800ee90:	f7ff fb88 	bl	800e5a4 <__sprint_r>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d1e0      	bne.n	800ee5a <_vfiprintf_r+0x852>
 800ee98:	ab11      	add	r3, sp, #68	@ 0x44
 800ee9a:	e7f4      	b.n	800ee86 <_vfiprintf_r+0x87e>
 800ee9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee9e:	b913      	cbnz	r3, 800eea6 <_vfiprintf_r+0x89e>
 800eea0:	2300      	movs	r3, #0
 800eea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eea4:	e7d9      	b.n	800ee5a <_vfiprintf_r+0x852>
 800eea6:	9800      	ldr	r0, [sp, #0]
 800eea8:	aa0e      	add	r2, sp, #56	@ 0x38
 800eeaa:	4639      	mov	r1, r7
 800eeac:	f7ff fb7a 	bl	800e5a4 <__sprint_r>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0f5      	beq.n	800eea0 <_vfiprintf_r+0x898>
 800eeb4:	e7d1      	b.n	800ee5a <_vfiprintf_r+0x852>
 800eeb6:	ea54 0205 	orrs.w	r2, r4, r5
 800eeba:	f8cd a010 	str.w	sl, [sp, #16]
 800eebe:	f43f ada6 	beq.w	800ea0e <_vfiprintf_r+0x406>
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	f43f aedf 	beq.w	800ec86 <_vfiprintf_r+0x67e>
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800eece:	f43f af28 	beq.w	800ed22 <_vfiprintf_r+0x71a>
 800eed2:	f004 0307 	and.w	r3, r4, #7
 800eed6:	08e4      	lsrs	r4, r4, #3
 800eed8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800eedc:	08ed      	lsrs	r5, r5, #3
 800eede:	3330      	adds	r3, #48	@ 0x30
 800eee0:	ea54 0105 	orrs.w	r1, r4, r5
 800eee4:	464a      	mov	r2, r9
 800eee6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800eeea:	d1f2      	bne.n	800eed2 <_vfiprintf_r+0x8ca>
 800eeec:	9904      	ldr	r1, [sp, #16]
 800eeee:	07c8      	lsls	r0, r1, #31
 800eef0:	d506      	bpl.n	800ef00 <_vfiprintf_r+0x8f8>
 800eef2:	2b30      	cmp	r3, #48	@ 0x30
 800eef4:	d004      	beq.n	800ef00 <_vfiprintf_r+0x8f8>
 800eef6:	2330      	movs	r3, #48	@ 0x30
 800eef8:	f809 3c01 	strb.w	r3, [r9, #-1]
 800eefc:	f1a2 0902 	sub.w	r9, r2, #2
 800ef00:	ab3a      	add	r3, sp, #232	@ 0xe8
 800ef02:	eba3 0309 	sub.w	r3, r3, r9
 800ef06:	9c01      	ldr	r4, [sp, #4]
 800ef08:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	e5bb      	b.n	800ea88 <_vfiprintf_r+0x480>
 800ef10:	0801063d 	.word	0x0801063d
 800ef14:	0801062d 	.word	0x0801062d

0800ef18 <__sbprintf>:
 800ef18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef1a:	461f      	mov	r7, r3
 800ef1c:	898b      	ldrh	r3, [r1, #12]
 800ef1e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800ef22:	f023 0302 	bic.w	r3, r3, #2
 800ef26:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ef2a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800ef2c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef2e:	89cb      	ldrh	r3, [r1, #14]
 800ef30:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ef34:	69cb      	ldr	r3, [r1, #28]
 800ef36:	9307      	str	r3, [sp, #28]
 800ef38:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800ef3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef3c:	ab1a      	add	r3, sp, #104	@ 0x68
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	9304      	str	r3, [sp, #16]
 800ef42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef46:	4615      	mov	r5, r2
 800ef48:	4606      	mov	r6, r0
 800ef4a:	9302      	str	r3, [sp, #8]
 800ef4c:	9305      	str	r3, [sp, #20]
 800ef4e:	a816      	add	r0, sp, #88	@ 0x58
 800ef50:	2300      	movs	r3, #0
 800ef52:	460c      	mov	r4, r1
 800ef54:	9306      	str	r3, [sp, #24]
 800ef56:	f7fc f801 	bl	800af5c <__retarget_lock_init_recursive>
 800ef5a:	462a      	mov	r2, r5
 800ef5c:	463b      	mov	r3, r7
 800ef5e:	4669      	mov	r1, sp
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7ff fb51 	bl	800e608 <_vfiprintf_r>
 800ef66:	1e05      	subs	r5, r0, #0
 800ef68:	db07      	blt.n	800ef7a <__sbprintf+0x62>
 800ef6a:	4669      	mov	r1, sp
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	f7fd fbe7 	bl	800c740 <_fflush_r>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	bf18      	it	ne
 800ef76:	f04f 35ff 	movne.w	r5, #4294967295
 800ef7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ef7e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ef80:	065b      	lsls	r3, r3, #25
 800ef82:	bf42      	ittt	mi
 800ef84:	89a3      	ldrhmi	r3, [r4, #12]
 800ef86:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800ef8a:	81a3      	strhmi	r3, [r4, #12]
 800ef8c:	f7fb ffe7 	bl	800af5e <__retarget_lock_close_recursive>
 800ef90:	4628      	mov	r0, r5
 800ef92:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800ef96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef98 <__fputwc>:
 800ef98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef9c:	4680      	mov	r8, r0
 800ef9e:	460f      	mov	r7, r1
 800efa0:	4614      	mov	r4, r2
 800efa2:	f7fd fe27 	bl	800cbf4 <__locale_mb_cur_max>
 800efa6:	2801      	cmp	r0, #1
 800efa8:	4605      	mov	r5, r0
 800efaa:	d11b      	bne.n	800efe4 <__fputwc+0x4c>
 800efac:	1e7b      	subs	r3, r7, #1
 800efae:	2bfe      	cmp	r3, #254	@ 0xfe
 800efb0:	d818      	bhi.n	800efe4 <__fputwc+0x4c>
 800efb2:	f88d 7004 	strb.w	r7, [sp, #4]
 800efb6:	2600      	movs	r6, #0
 800efb8:	f10d 0904 	add.w	r9, sp, #4
 800efbc:	42ae      	cmp	r6, r5
 800efbe:	d021      	beq.n	800f004 <__fputwc+0x6c>
 800efc0:	68a3      	ldr	r3, [r4, #8]
 800efc2:	f816 1009 	ldrb.w	r1, [r6, r9]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	2b00      	cmp	r3, #0
 800efca:	60a3      	str	r3, [r4, #8]
 800efcc:	da04      	bge.n	800efd8 <__fputwc+0x40>
 800efce:	69a2      	ldr	r2, [r4, #24]
 800efd0:	4293      	cmp	r3, r2
 800efd2:	db1b      	blt.n	800f00c <__fputwc+0x74>
 800efd4:	290a      	cmp	r1, #10
 800efd6:	d019      	beq.n	800f00c <__fputwc+0x74>
 800efd8:	6823      	ldr	r3, [r4, #0]
 800efda:	1c5a      	adds	r2, r3, #1
 800efdc:	6022      	str	r2, [r4, #0]
 800efde:	7019      	strb	r1, [r3, #0]
 800efe0:	3601      	adds	r6, #1
 800efe2:	e7eb      	b.n	800efbc <__fputwc+0x24>
 800efe4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800efe8:	463a      	mov	r2, r7
 800efea:	a901      	add	r1, sp, #4
 800efec:	4640      	mov	r0, r8
 800efee:	f000 f845 	bl	800f07c <_wcrtomb_r>
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	4605      	mov	r5, r0
 800eff6:	d1de      	bne.n	800efb6 <__fputwc+0x1e>
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800effe:	81a3      	strh	r3, [r4, #12]
 800f000:	f04f 37ff 	mov.w	r7, #4294967295
 800f004:	4638      	mov	r0, r7
 800f006:	b003      	add	sp, #12
 800f008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f00c:	4622      	mov	r2, r4
 800f00e:	4640      	mov	r0, r8
 800f010:	f000 f84a 	bl	800f0a8 <__swbuf_r>
 800f014:	3001      	adds	r0, #1
 800f016:	d1e3      	bne.n	800efe0 <__fputwc+0x48>
 800f018:	e7f2      	b.n	800f000 <__fputwc+0x68>

0800f01a <_fputwc_r>:
 800f01a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800f01c:	07db      	lsls	r3, r3, #31
 800f01e:	b570      	push	{r4, r5, r6, lr}
 800f020:	4605      	mov	r5, r0
 800f022:	460e      	mov	r6, r1
 800f024:	4614      	mov	r4, r2
 800f026:	d405      	bmi.n	800f034 <_fputwc_r+0x1a>
 800f028:	8993      	ldrh	r3, [r2, #12]
 800f02a:	0598      	lsls	r0, r3, #22
 800f02c:	d402      	bmi.n	800f034 <_fputwc_r+0x1a>
 800f02e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800f030:	f7fb ff96 	bl	800af60 <__retarget_lock_acquire_recursive>
 800f034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f038:	0499      	lsls	r1, r3, #18
 800f03a:	d406      	bmi.n	800f04a <_fputwc_r+0x30>
 800f03c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f040:	81a3      	strh	r3, [r4, #12]
 800f042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f044:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f048:	6663      	str	r3, [r4, #100]	@ 0x64
 800f04a:	4622      	mov	r2, r4
 800f04c:	4628      	mov	r0, r5
 800f04e:	4631      	mov	r1, r6
 800f050:	f7ff ffa2 	bl	800ef98 <__fputwc>
 800f054:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f056:	07da      	lsls	r2, r3, #31
 800f058:	4605      	mov	r5, r0
 800f05a:	d405      	bmi.n	800f068 <_fputwc_r+0x4e>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	059b      	lsls	r3, r3, #22
 800f060:	d402      	bmi.n	800f068 <_fputwc_r+0x4e>
 800f062:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f064:	f7fb ff7d 	bl	800af62 <__retarget_lock_release_recursive>
 800f068:	4628      	mov	r0, r5
 800f06a:	bd70      	pop	{r4, r5, r6, pc}

0800f06c <abort>:
 800f06c:	b508      	push	{r3, lr}
 800f06e:	2006      	movs	r0, #6
 800f070:	f000 f88c 	bl	800f18c <raise>
 800f074:	2001      	movs	r0, #1
 800f076:	f7f3 fd4d 	bl	8002b14 <_exit>
	...

0800f07c <_wcrtomb_r>:
 800f07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f07e:	4c09      	ldr	r4, [pc, #36]	@ (800f0a4 <_wcrtomb_r+0x28>)
 800f080:	b085      	sub	sp, #20
 800f082:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800f086:	4605      	mov	r5, r0
 800f088:	461e      	mov	r6, r3
 800f08a:	b909      	cbnz	r1, 800f090 <_wcrtomb_r+0x14>
 800f08c:	460a      	mov	r2, r1
 800f08e:	a901      	add	r1, sp, #4
 800f090:	47b8      	blx	r7
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	bf01      	itttt	eq
 800f096:	2300      	moveq	r3, #0
 800f098:	6033      	streq	r3, [r6, #0]
 800f09a:	238a      	moveq	r3, #138	@ 0x8a
 800f09c:	602b      	streq	r3, [r5, #0]
 800f09e:	b005      	add	sp, #20
 800f0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	2000055c 	.word	0x2000055c

0800f0a8 <__swbuf_r>:
 800f0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	4614      	mov	r4, r2
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	b118      	cbz	r0, 800f0ba <__swbuf_r+0x12>
 800f0b2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f0b4:	b90b      	cbnz	r3, 800f0ba <__swbuf_r+0x12>
 800f0b6:	f7fb fd27 	bl	800ab08 <__sinit>
 800f0ba:	69a3      	ldr	r3, [r4, #24]
 800f0bc:	60a3      	str	r3, [r4, #8]
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	0719      	lsls	r1, r3, #28
 800f0c2:	d501      	bpl.n	800f0c8 <__swbuf_r+0x20>
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	b943      	cbnz	r3, 800f0da <__swbuf_r+0x32>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	f7fd fd0e 	bl	800caec <__swsetup_r>
 800f0d0:	b118      	cbz	r0, 800f0da <__swbuf_r+0x32>
 800f0d2:	f04f 37ff 	mov.w	r7, #4294967295
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0de:	b2f6      	uxtb	r6, r6
 800f0e0:	049a      	lsls	r2, r3, #18
 800f0e2:	4637      	mov	r7, r6
 800f0e4:	d406      	bmi.n	800f0f4 <__swbuf_r+0x4c>
 800f0e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f0ea:	81a3      	strh	r3, [r4, #12]
 800f0ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0f2:	6663      	str	r3, [r4, #100]	@ 0x64
 800f0f4:	6823      	ldr	r3, [r4, #0]
 800f0f6:	6922      	ldr	r2, [r4, #16]
 800f0f8:	1a98      	subs	r0, r3, r2
 800f0fa:	6963      	ldr	r3, [r4, #20]
 800f0fc:	4283      	cmp	r3, r0
 800f0fe:	dc05      	bgt.n	800f10c <__swbuf_r+0x64>
 800f100:	4621      	mov	r1, r4
 800f102:	4628      	mov	r0, r5
 800f104:	f7fd fb1c 	bl	800c740 <_fflush_r>
 800f108:	2800      	cmp	r0, #0
 800f10a:	d1e2      	bne.n	800f0d2 <__swbuf_r+0x2a>
 800f10c:	68a3      	ldr	r3, [r4, #8]
 800f10e:	3b01      	subs	r3, #1
 800f110:	60a3      	str	r3, [r4, #8]
 800f112:	6823      	ldr	r3, [r4, #0]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	6022      	str	r2, [r4, #0]
 800f118:	701e      	strb	r6, [r3, #0]
 800f11a:	6962      	ldr	r2, [r4, #20]
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	429a      	cmp	r2, r3
 800f120:	d004      	beq.n	800f12c <__swbuf_r+0x84>
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	07db      	lsls	r3, r3, #31
 800f126:	d5d6      	bpl.n	800f0d6 <__swbuf_r+0x2e>
 800f128:	2e0a      	cmp	r6, #10
 800f12a:	d1d4      	bne.n	800f0d6 <__swbuf_r+0x2e>
 800f12c:	4621      	mov	r1, r4
 800f12e:	4628      	mov	r0, r5
 800f130:	f7fd fb06 	bl	800c740 <_fflush_r>
 800f134:	2800      	cmp	r0, #0
 800f136:	d0ce      	beq.n	800f0d6 <__swbuf_r+0x2e>
 800f138:	e7cb      	b.n	800f0d2 <__swbuf_r+0x2a>

0800f13a <_raise_r>:
 800f13a:	291f      	cmp	r1, #31
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4605      	mov	r5, r0
 800f140:	460c      	mov	r4, r1
 800f142:	d904      	bls.n	800f14e <_raise_r+0x14>
 800f144:	2316      	movs	r3, #22
 800f146:	6003      	str	r3, [r0, #0]
 800f148:	f04f 30ff 	mov.w	r0, #4294967295
 800f14c:	bd38      	pop	{r3, r4, r5, pc}
 800f14e:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800f152:	b112      	cbz	r2, 800f15a <_raise_r+0x20>
 800f154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f158:	b94b      	cbnz	r3, 800f16e <_raise_r+0x34>
 800f15a:	4628      	mov	r0, r5
 800f15c:	f000 f830 	bl	800f1c0 <_getpid_r>
 800f160:	4622      	mov	r2, r4
 800f162:	4601      	mov	r1, r0
 800f164:	4628      	mov	r0, r5
 800f166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f16a:	f000 b817 	b.w	800f19c <_kill_r>
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d00a      	beq.n	800f188 <_raise_r+0x4e>
 800f172:	1c59      	adds	r1, r3, #1
 800f174:	d103      	bne.n	800f17e <_raise_r+0x44>
 800f176:	2316      	movs	r3, #22
 800f178:	6003      	str	r3, [r0, #0]
 800f17a:	2001      	movs	r0, #1
 800f17c:	e7e6      	b.n	800f14c <_raise_r+0x12>
 800f17e:	2100      	movs	r1, #0
 800f180:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f184:	4620      	mov	r0, r4
 800f186:	4798      	blx	r3
 800f188:	2000      	movs	r0, #0
 800f18a:	e7df      	b.n	800f14c <_raise_r+0x12>

0800f18c <raise>:
 800f18c:	4b02      	ldr	r3, [pc, #8]	@ (800f198 <raise+0xc>)
 800f18e:	4601      	mov	r1, r0
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	f7ff bfd2 	b.w	800f13a <_raise_r>
 800f196:	bf00      	nop
 800f198:	20000430 	.word	0x20000430

0800f19c <_kill_r>:
 800f19c:	b538      	push	{r3, r4, r5, lr}
 800f19e:	4d07      	ldr	r5, [pc, #28]	@ (800f1bc <_kill_r+0x20>)
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	4608      	mov	r0, r1
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	602b      	str	r3, [r5, #0]
 800f1aa:	f7f3 fca3 	bl	8002af4 <_kill>
 800f1ae:	1c43      	adds	r3, r0, #1
 800f1b0:	d102      	bne.n	800f1b8 <_kill_r+0x1c>
 800f1b2:	682b      	ldr	r3, [r5, #0]
 800f1b4:	b103      	cbz	r3, 800f1b8 <_kill_r+0x1c>
 800f1b6:	6023      	str	r3, [r4, #0]
 800f1b8:	bd38      	pop	{r3, r4, r5, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20001234 	.word	0x20001234

0800f1c0 <_getpid_r>:
 800f1c0:	f7f3 bc90 	b.w	8002ae4 <_getpid>
 800f1c4:	0000      	movs	r0, r0
	...

0800f1c8 <sin>:
 800f1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1ca:	ec53 2b10 	vmov	r2, r3, d0
 800f1ce:	4826      	ldr	r0, [pc, #152]	@ (800f268 <sin+0xa0>)
 800f1d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f1d4:	4281      	cmp	r1, r0
 800f1d6:	d807      	bhi.n	800f1e8 <sin+0x20>
 800f1d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f260 <sin+0x98>
 800f1dc:	2000      	movs	r0, #0
 800f1de:	b005      	add	sp, #20
 800f1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1e4:	f000 b90c 	b.w	800f400 <__kernel_sin>
 800f1e8:	4820      	ldr	r0, [pc, #128]	@ (800f26c <sin+0xa4>)
 800f1ea:	4281      	cmp	r1, r0
 800f1ec:	d908      	bls.n	800f200 <sin+0x38>
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	f7f1 f871 	bl	80002d8 <__aeabi_dsub>
 800f1f6:	ec41 0b10 	vmov	d0, r0, r1
 800f1fa:	b005      	add	sp, #20
 800f1fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f200:	4668      	mov	r0, sp
 800f202:	f000 f9b9 	bl	800f578 <__ieee754_rem_pio2>
 800f206:	f000 0003 	and.w	r0, r0, #3
 800f20a:	2801      	cmp	r0, #1
 800f20c:	d00c      	beq.n	800f228 <sin+0x60>
 800f20e:	2802      	cmp	r0, #2
 800f210:	d011      	beq.n	800f236 <sin+0x6e>
 800f212:	b9e8      	cbnz	r0, 800f250 <sin+0x88>
 800f214:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f218:	ed9d 0b00 	vldr	d0, [sp]
 800f21c:	2001      	movs	r0, #1
 800f21e:	f000 f8ef 	bl	800f400 <__kernel_sin>
 800f222:	ec51 0b10 	vmov	r0, r1, d0
 800f226:	e7e6      	b.n	800f1f6 <sin+0x2e>
 800f228:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f22c:	ed9d 0b00 	vldr	d0, [sp]
 800f230:	f000 f81e 	bl	800f270 <__kernel_cos>
 800f234:	e7f5      	b.n	800f222 <sin+0x5a>
 800f236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f23a:	ed9d 0b00 	vldr	d0, [sp]
 800f23e:	2001      	movs	r0, #1
 800f240:	f000 f8de 	bl	800f400 <__kernel_sin>
 800f244:	ec53 2b10 	vmov	r2, r3, d0
 800f248:	4610      	mov	r0, r2
 800f24a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f24e:	e7d2      	b.n	800f1f6 <sin+0x2e>
 800f250:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f254:	ed9d 0b00 	vldr	d0, [sp]
 800f258:	f000 f80a 	bl	800f270 <__kernel_cos>
 800f25c:	e7f2      	b.n	800f244 <sin+0x7c>
 800f25e:	bf00      	nop
	...
 800f268:	3fe921fb 	.word	0x3fe921fb
 800f26c:	7fefffff 	.word	0x7fefffff

0800f270 <__kernel_cos>:
 800f270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	ec57 6b10 	vmov	r6, r7, d0
 800f278:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f27c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f280:	ed8d 1b00 	vstr	d1, [sp]
 800f284:	d206      	bcs.n	800f294 <__kernel_cos+0x24>
 800f286:	4630      	mov	r0, r6
 800f288:	4639      	mov	r1, r7
 800f28a:	f7f1 fc8d 	bl	8000ba8 <__aeabi_d2iz>
 800f28e:	2800      	cmp	r0, #0
 800f290:	f000 8088 	beq.w	800f3a4 <__kernel_cos+0x134>
 800f294:	4632      	mov	r2, r6
 800f296:	463b      	mov	r3, r7
 800f298:	4630      	mov	r0, r6
 800f29a:	4639      	mov	r1, r7
 800f29c:	f7f1 f9d4 	bl	8000648 <__aeabi_dmul>
 800f2a0:	4b51      	ldr	r3, [pc, #324]	@ (800f3e8 <__kernel_cos+0x178>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	460d      	mov	r5, r1
 800f2a8:	f7f1 f9ce 	bl	8000648 <__aeabi_dmul>
 800f2ac:	a340      	add	r3, pc, #256	@ (adr r3, 800f3b0 <__kernel_cos+0x140>)
 800f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b2:	4682      	mov	sl, r0
 800f2b4:	468b      	mov	fp, r1
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	f7f1 f9c5 	bl	8000648 <__aeabi_dmul>
 800f2be:	a33e      	add	r3, pc, #248	@ (adr r3, 800f3b8 <__kernel_cos+0x148>)
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	f7f1 f80a 	bl	80002dc <__adddf3>
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	462b      	mov	r3, r5
 800f2cc:	f7f1 f9bc 	bl	8000648 <__aeabi_dmul>
 800f2d0:	a33b      	add	r3, pc, #236	@ (adr r3, 800f3c0 <__kernel_cos+0x150>)
 800f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d6:	f7f0 ffff 	bl	80002d8 <__aeabi_dsub>
 800f2da:	4622      	mov	r2, r4
 800f2dc:	462b      	mov	r3, r5
 800f2de:	f7f1 f9b3 	bl	8000648 <__aeabi_dmul>
 800f2e2:	a339      	add	r3, pc, #228	@ (adr r3, 800f3c8 <__kernel_cos+0x158>)
 800f2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e8:	f7f0 fff8 	bl	80002dc <__adddf3>
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	462b      	mov	r3, r5
 800f2f0:	f7f1 f9aa 	bl	8000648 <__aeabi_dmul>
 800f2f4:	a336      	add	r3, pc, #216	@ (adr r3, 800f3d0 <__kernel_cos+0x160>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	f7f0 ffed 	bl	80002d8 <__aeabi_dsub>
 800f2fe:	4622      	mov	r2, r4
 800f300:	462b      	mov	r3, r5
 800f302:	f7f1 f9a1 	bl	8000648 <__aeabi_dmul>
 800f306:	a334      	add	r3, pc, #208	@ (adr r3, 800f3d8 <__kernel_cos+0x168>)
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	f7f0 ffe6 	bl	80002dc <__adddf3>
 800f310:	4622      	mov	r2, r4
 800f312:	462b      	mov	r3, r5
 800f314:	f7f1 f998 	bl	8000648 <__aeabi_dmul>
 800f318:	4622      	mov	r2, r4
 800f31a:	462b      	mov	r3, r5
 800f31c:	f7f1 f994 	bl	8000648 <__aeabi_dmul>
 800f320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f324:	4604      	mov	r4, r0
 800f326:	460d      	mov	r5, r1
 800f328:	4630      	mov	r0, r6
 800f32a:	4639      	mov	r1, r7
 800f32c:	f7f1 f98c 	bl	8000648 <__aeabi_dmul>
 800f330:	460b      	mov	r3, r1
 800f332:	4602      	mov	r2, r0
 800f334:	4629      	mov	r1, r5
 800f336:	4620      	mov	r0, r4
 800f338:	f7f0 ffce 	bl	80002d8 <__aeabi_dsub>
 800f33c:	4b2b      	ldr	r3, [pc, #172]	@ (800f3ec <__kernel_cos+0x17c>)
 800f33e:	4598      	cmp	r8, r3
 800f340:	4606      	mov	r6, r0
 800f342:	460f      	mov	r7, r1
 800f344:	d810      	bhi.n	800f368 <__kernel_cos+0xf8>
 800f346:	4602      	mov	r2, r0
 800f348:	460b      	mov	r3, r1
 800f34a:	4650      	mov	r0, sl
 800f34c:	4659      	mov	r1, fp
 800f34e:	f7f0 ffc3 	bl	80002d8 <__aeabi_dsub>
 800f352:	460b      	mov	r3, r1
 800f354:	4926      	ldr	r1, [pc, #152]	@ (800f3f0 <__kernel_cos+0x180>)
 800f356:	4602      	mov	r2, r0
 800f358:	2000      	movs	r0, #0
 800f35a:	f7f0 ffbd 	bl	80002d8 <__aeabi_dsub>
 800f35e:	ec41 0b10 	vmov	d0, r0, r1
 800f362:	b003      	add	sp, #12
 800f364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f368:	4b22      	ldr	r3, [pc, #136]	@ (800f3f4 <__kernel_cos+0x184>)
 800f36a:	4921      	ldr	r1, [pc, #132]	@ (800f3f0 <__kernel_cos+0x180>)
 800f36c:	4598      	cmp	r8, r3
 800f36e:	bf8c      	ite	hi
 800f370:	4d21      	ldrhi	r5, [pc, #132]	@ (800f3f8 <__kernel_cos+0x188>)
 800f372:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f376:	2400      	movs	r4, #0
 800f378:	4622      	mov	r2, r4
 800f37a:	462b      	mov	r3, r5
 800f37c:	2000      	movs	r0, #0
 800f37e:	f7f0 ffab 	bl	80002d8 <__aeabi_dsub>
 800f382:	4622      	mov	r2, r4
 800f384:	4680      	mov	r8, r0
 800f386:	4689      	mov	r9, r1
 800f388:	462b      	mov	r3, r5
 800f38a:	4650      	mov	r0, sl
 800f38c:	4659      	mov	r1, fp
 800f38e:	f7f0 ffa3 	bl	80002d8 <__aeabi_dsub>
 800f392:	4632      	mov	r2, r6
 800f394:	463b      	mov	r3, r7
 800f396:	f7f0 ff9f 	bl	80002d8 <__aeabi_dsub>
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	4640      	mov	r0, r8
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	e7da      	b.n	800f35a <__kernel_cos+0xea>
 800f3a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f3e0 <__kernel_cos+0x170>
 800f3a8:	e7db      	b.n	800f362 <__kernel_cos+0xf2>
 800f3aa:	bf00      	nop
 800f3ac:	f3af 8000 	nop.w
 800f3b0:	be8838d4 	.word	0xbe8838d4
 800f3b4:	bda8fae9 	.word	0xbda8fae9
 800f3b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f3bc:	3e21ee9e 	.word	0x3e21ee9e
 800f3c0:	809c52ad 	.word	0x809c52ad
 800f3c4:	3e927e4f 	.word	0x3e927e4f
 800f3c8:	19cb1590 	.word	0x19cb1590
 800f3cc:	3efa01a0 	.word	0x3efa01a0
 800f3d0:	16c15177 	.word	0x16c15177
 800f3d4:	3f56c16c 	.word	0x3f56c16c
 800f3d8:	5555554c 	.word	0x5555554c
 800f3dc:	3fa55555 	.word	0x3fa55555
 800f3e0:	00000000 	.word	0x00000000
 800f3e4:	3ff00000 	.word	0x3ff00000
 800f3e8:	3fe00000 	.word	0x3fe00000
 800f3ec:	3fd33332 	.word	0x3fd33332
 800f3f0:	3ff00000 	.word	0x3ff00000
 800f3f4:	3fe90000 	.word	0x3fe90000
 800f3f8:	3fd20000 	.word	0x3fd20000
 800f3fc:	00000000 	.word	0x00000000

0800f400 <__kernel_sin>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	ec55 4b10 	vmov	r4, r5, d0
 800f408:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f40c:	b085      	sub	sp, #20
 800f40e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f412:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f416:	4680      	mov	r8, r0
 800f418:	d205      	bcs.n	800f426 <__kernel_sin+0x26>
 800f41a:	4620      	mov	r0, r4
 800f41c:	4629      	mov	r1, r5
 800f41e:	f7f1 fbc3 	bl	8000ba8 <__aeabi_d2iz>
 800f422:	2800      	cmp	r0, #0
 800f424:	d052      	beq.n	800f4cc <__kernel_sin+0xcc>
 800f426:	4622      	mov	r2, r4
 800f428:	462b      	mov	r3, r5
 800f42a:	4620      	mov	r0, r4
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7f1 f90b 	bl	8000648 <__aeabi_dmul>
 800f432:	4682      	mov	sl, r0
 800f434:	468b      	mov	fp, r1
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	4620      	mov	r0, r4
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f1 f903 	bl	8000648 <__aeabi_dmul>
 800f442:	a342      	add	r3, pc, #264	@ (adr r3, 800f54c <__kernel_sin+0x14c>)
 800f444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f448:	e9cd 0100 	strd	r0, r1, [sp]
 800f44c:	4650      	mov	r0, sl
 800f44e:	4659      	mov	r1, fp
 800f450:	f7f1 f8fa 	bl	8000648 <__aeabi_dmul>
 800f454:	a33f      	add	r3, pc, #252	@ (adr r3, 800f554 <__kernel_sin+0x154>)
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	f7f0 ff3d 	bl	80002d8 <__aeabi_dsub>
 800f45e:	4652      	mov	r2, sl
 800f460:	465b      	mov	r3, fp
 800f462:	f7f1 f8f1 	bl	8000648 <__aeabi_dmul>
 800f466:	a33d      	add	r3, pc, #244	@ (adr r3, 800f55c <__kernel_sin+0x15c>)
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	f7f0 ff36 	bl	80002dc <__adddf3>
 800f470:	4652      	mov	r2, sl
 800f472:	465b      	mov	r3, fp
 800f474:	f7f1 f8e8 	bl	8000648 <__aeabi_dmul>
 800f478:	a33a      	add	r3, pc, #232	@ (adr r3, 800f564 <__kernel_sin+0x164>)
 800f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47e:	f7f0 ff2b 	bl	80002d8 <__aeabi_dsub>
 800f482:	4652      	mov	r2, sl
 800f484:	465b      	mov	r3, fp
 800f486:	f7f1 f8df 	bl	8000648 <__aeabi_dmul>
 800f48a:	a338      	add	r3, pc, #224	@ (adr r3, 800f56c <__kernel_sin+0x16c>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	f7f0 ff24 	bl	80002dc <__adddf3>
 800f494:	4606      	mov	r6, r0
 800f496:	460f      	mov	r7, r1
 800f498:	f1b8 0f00 	cmp.w	r8, #0
 800f49c:	d11b      	bne.n	800f4d6 <__kernel_sin+0xd6>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	4650      	mov	r0, sl
 800f4a4:	4659      	mov	r1, fp
 800f4a6:	f7f1 f8cf 	bl	8000648 <__aeabi_dmul>
 800f4aa:	a325      	add	r3, pc, #148	@ (adr r3, 800f540 <__kernel_sin+0x140>)
 800f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b0:	f7f0 ff12 	bl	80002d8 <__aeabi_dsub>
 800f4b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4b8:	f7f1 f8c6 	bl	8000648 <__aeabi_dmul>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	f7f0 ff0a 	bl	80002dc <__adddf3>
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	ec45 4b10 	vmov	d0, r4, r5
 800f4d0:	b005      	add	sp, #20
 800f4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4da:	4b1b      	ldr	r3, [pc, #108]	@ (800f548 <__kernel_sin+0x148>)
 800f4dc:	2200      	movs	r2, #0
 800f4de:	f7f1 f8b3 	bl	8000648 <__aeabi_dmul>
 800f4e2:	4632      	mov	r2, r6
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	4689      	mov	r9, r1
 800f4e8:	463b      	mov	r3, r7
 800f4ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4ee:	f7f1 f8ab 	bl	8000648 <__aeabi_dmul>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	4640      	mov	r0, r8
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	f7f0 feed 	bl	80002d8 <__aeabi_dsub>
 800f4fe:	4652      	mov	r2, sl
 800f500:	465b      	mov	r3, fp
 800f502:	f7f1 f8a1 	bl	8000648 <__aeabi_dmul>
 800f506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f50a:	f7f0 fee5 	bl	80002d8 <__aeabi_dsub>
 800f50e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f540 <__kernel_sin+0x140>)
 800f510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f514:	4606      	mov	r6, r0
 800f516:	460f      	mov	r7, r1
 800f518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f51c:	f7f1 f894 	bl	8000648 <__aeabi_dmul>
 800f520:	4602      	mov	r2, r0
 800f522:	460b      	mov	r3, r1
 800f524:	4630      	mov	r0, r6
 800f526:	4639      	mov	r1, r7
 800f528:	f7f0 fed8 	bl	80002dc <__adddf3>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	4620      	mov	r0, r4
 800f532:	4629      	mov	r1, r5
 800f534:	f7f0 fed0 	bl	80002d8 <__aeabi_dsub>
 800f538:	e7c6      	b.n	800f4c8 <__kernel_sin+0xc8>
 800f53a:	bf00      	nop
 800f53c:	f3af 8000 	nop.w
 800f540:	55555549 	.word	0x55555549
 800f544:	3fc55555 	.word	0x3fc55555
 800f548:	3fe00000 	.word	0x3fe00000
 800f54c:	5acfd57c 	.word	0x5acfd57c
 800f550:	3de5d93a 	.word	0x3de5d93a
 800f554:	8a2b9ceb 	.word	0x8a2b9ceb
 800f558:	3e5ae5e6 	.word	0x3e5ae5e6
 800f55c:	57b1fe7d 	.word	0x57b1fe7d
 800f560:	3ec71de3 	.word	0x3ec71de3
 800f564:	19c161d5 	.word	0x19c161d5
 800f568:	3f2a01a0 	.word	0x3f2a01a0
 800f56c:	1110f8a6 	.word	0x1110f8a6
 800f570:	3f811111 	.word	0x3f811111
 800f574:	00000000 	.word	0x00000000

0800f578 <__ieee754_rem_pio2>:
 800f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57c:	ec57 6b10 	vmov	r6, r7, d0
 800f580:	4bc5      	ldr	r3, [pc, #788]	@ (800f898 <__ieee754_rem_pio2+0x320>)
 800f582:	b08d      	sub	sp, #52	@ 0x34
 800f584:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f588:	4598      	cmp	r8, r3
 800f58a:	4604      	mov	r4, r0
 800f58c:	9704      	str	r7, [sp, #16]
 800f58e:	d807      	bhi.n	800f5a0 <__ieee754_rem_pio2+0x28>
 800f590:	2200      	movs	r2, #0
 800f592:	2300      	movs	r3, #0
 800f594:	ed80 0b00 	vstr	d0, [r0]
 800f598:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f59c:	2500      	movs	r5, #0
 800f59e:	e028      	b.n	800f5f2 <__ieee754_rem_pio2+0x7a>
 800f5a0:	4bbe      	ldr	r3, [pc, #760]	@ (800f89c <__ieee754_rem_pio2+0x324>)
 800f5a2:	4598      	cmp	r8, r3
 800f5a4:	d878      	bhi.n	800f698 <__ieee754_rem_pio2+0x120>
 800f5a6:	9b04      	ldr	r3, [sp, #16]
 800f5a8:	4dbd      	ldr	r5, [pc, #756]	@ (800f8a0 <__ieee754_rem_pio2+0x328>)
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f860 <__ieee754_rem_pio2+0x2e8>)
 800f5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b4:	4639      	mov	r1, r7
 800f5b6:	dd38      	ble.n	800f62a <__ieee754_rem_pio2+0xb2>
 800f5b8:	f7f0 fe8e 	bl	80002d8 <__aeabi_dsub>
 800f5bc:	45a8      	cmp	r8, r5
 800f5be:	4606      	mov	r6, r0
 800f5c0:	460f      	mov	r7, r1
 800f5c2:	d01a      	beq.n	800f5fa <__ieee754_rem_pio2+0x82>
 800f5c4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f868 <__ieee754_rem_pio2+0x2f0>)
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	f7f0 fe85 	bl	80002d8 <__aeabi_dsub>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	4680      	mov	r8, r0
 800f5d4:	4689      	mov	r9, r1
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	4639      	mov	r1, r7
 800f5da:	f7f0 fe7d 	bl	80002d8 <__aeabi_dsub>
 800f5de:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f868 <__ieee754_rem_pio2+0x2f0>)
 800f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e4:	f7f0 fe78 	bl	80002d8 <__aeabi_dsub>
 800f5e8:	e9c4 8900 	strd	r8, r9, [r4]
 800f5ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5f0:	2501      	movs	r5, #1
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	b00d      	add	sp, #52	@ 0x34
 800f5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fa:	a39d      	add	r3, pc, #628	@ (adr r3, 800f870 <__ieee754_rem_pio2+0x2f8>)
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	f7f0 fe6a 	bl	80002d8 <__aeabi_dsub>
 800f604:	a39c      	add	r3, pc, #624	@ (adr r3, 800f878 <__ieee754_rem_pio2+0x300>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	4606      	mov	r6, r0
 800f60c:	460f      	mov	r7, r1
 800f60e:	f7f0 fe63 	bl	80002d8 <__aeabi_dsub>
 800f612:	4602      	mov	r2, r0
 800f614:	460b      	mov	r3, r1
 800f616:	4680      	mov	r8, r0
 800f618:	4689      	mov	r9, r1
 800f61a:	4630      	mov	r0, r6
 800f61c:	4639      	mov	r1, r7
 800f61e:	f7f0 fe5b 	bl	80002d8 <__aeabi_dsub>
 800f622:	a395      	add	r3, pc, #596	@ (adr r3, 800f878 <__ieee754_rem_pio2+0x300>)
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	e7dc      	b.n	800f5e4 <__ieee754_rem_pio2+0x6c>
 800f62a:	f7f0 fe57 	bl	80002dc <__adddf3>
 800f62e:	45a8      	cmp	r8, r5
 800f630:	4606      	mov	r6, r0
 800f632:	460f      	mov	r7, r1
 800f634:	d018      	beq.n	800f668 <__ieee754_rem_pio2+0xf0>
 800f636:	a38c      	add	r3, pc, #560	@ (adr r3, 800f868 <__ieee754_rem_pio2+0x2f0>)
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	f7f0 fe4e 	bl	80002dc <__adddf3>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	4680      	mov	r8, r0
 800f646:	4689      	mov	r9, r1
 800f648:	4630      	mov	r0, r6
 800f64a:	4639      	mov	r1, r7
 800f64c:	f7f0 fe44 	bl	80002d8 <__aeabi_dsub>
 800f650:	a385      	add	r3, pc, #532	@ (adr r3, 800f868 <__ieee754_rem_pio2+0x2f0>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	f7f0 fe41 	bl	80002dc <__adddf3>
 800f65a:	f04f 35ff 	mov.w	r5, #4294967295
 800f65e:	e9c4 8900 	strd	r8, r9, [r4]
 800f662:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f666:	e7c4      	b.n	800f5f2 <__ieee754_rem_pio2+0x7a>
 800f668:	a381      	add	r3, pc, #516	@ (adr r3, 800f870 <__ieee754_rem_pio2+0x2f8>)
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f7f0 fe35 	bl	80002dc <__adddf3>
 800f672:	a381      	add	r3, pc, #516	@ (adr r3, 800f878 <__ieee754_rem_pio2+0x300>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	4606      	mov	r6, r0
 800f67a:	460f      	mov	r7, r1
 800f67c:	f7f0 fe2e 	bl	80002dc <__adddf3>
 800f680:	4602      	mov	r2, r0
 800f682:	460b      	mov	r3, r1
 800f684:	4680      	mov	r8, r0
 800f686:	4689      	mov	r9, r1
 800f688:	4630      	mov	r0, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	f7f0 fe24 	bl	80002d8 <__aeabi_dsub>
 800f690:	a379      	add	r3, pc, #484	@ (adr r3, 800f878 <__ieee754_rem_pio2+0x300>)
 800f692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f696:	e7de      	b.n	800f656 <__ieee754_rem_pio2+0xde>
 800f698:	4b82      	ldr	r3, [pc, #520]	@ (800f8a4 <__ieee754_rem_pio2+0x32c>)
 800f69a:	4598      	cmp	r8, r3
 800f69c:	f200 80d1 	bhi.w	800f842 <__ieee754_rem_pio2+0x2ca>
 800f6a0:	f000 f966 	bl	800f970 <fabs>
 800f6a4:	ec57 6b10 	vmov	r6, r7, d0
 800f6a8:	a375      	add	r3, pc, #468	@ (adr r3, 800f880 <__ieee754_rem_pio2+0x308>)
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	4639      	mov	r1, r7
 800f6b2:	f7f0 ffc9 	bl	8000648 <__aeabi_dmul>
 800f6b6:	4b7c      	ldr	r3, [pc, #496]	@ (800f8a8 <__ieee754_rem_pio2+0x330>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f7f0 fe0f 	bl	80002dc <__adddf3>
 800f6be:	f7f1 fa73 	bl	8000ba8 <__aeabi_d2iz>
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	f7f0 ff56 	bl	8000574 <__aeabi_i2d>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6d0:	a363      	add	r3, pc, #396	@ (adr r3, 800f860 <__ieee754_rem_pio2+0x2e8>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	f7f0 ffb7 	bl	8000648 <__aeabi_dmul>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	4630      	mov	r0, r6
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	f7f0 fdf9 	bl	80002d8 <__aeabi_dsub>
 800f6e6:	a360      	add	r3, pc, #384	@ (adr r3, 800f868 <__ieee754_rem_pio2+0x2f0>)
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	4682      	mov	sl, r0
 800f6ee:	468b      	mov	fp, r1
 800f6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f4:	f7f0 ffa8 	bl	8000648 <__aeabi_dmul>
 800f6f8:	2d1f      	cmp	r5, #31
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	dc0c      	bgt.n	800f71a <__ieee754_rem_pio2+0x1a2>
 800f700:	4b6a      	ldr	r3, [pc, #424]	@ (800f8ac <__ieee754_rem_pio2+0x334>)
 800f702:	1e6a      	subs	r2, r5, #1
 800f704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f708:	4543      	cmp	r3, r8
 800f70a:	d006      	beq.n	800f71a <__ieee754_rem_pio2+0x1a2>
 800f70c:	4632      	mov	r2, r6
 800f70e:	463b      	mov	r3, r7
 800f710:	4650      	mov	r0, sl
 800f712:	4659      	mov	r1, fp
 800f714:	f7f0 fde0 	bl	80002d8 <__aeabi_dsub>
 800f718:	e00e      	b.n	800f738 <__ieee754_rem_pio2+0x1c0>
 800f71a:	463b      	mov	r3, r7
 800f71c:	4632      	mov	r2, r6
 800f71e:	4650      	mov	r0, sl
 800f720:	4659      	mov	r1, fp
 800f722:	f7f0 fdd9 	bl	80002d8 <__aeabi_dsub>
 800f726:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f72a:	9305      	str	r3, [sp, #20]
 800f72c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f730:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f734:	2b10      	cmp	r3, #16
 800f736:	dc02      	bgt.n	800f73e <__ieee754_rem_pio2+0x1c6>
 800f738:	e9c4 0100 	strd	r0, r1, [r4]
 800f73c:	e039      	b.n	800f7b2 <__ieee754_rem_pio2+0x23a>
 800f73e:	a34c      	add	r3, pc, #304	@ (adr r3, 800f870 <__ieee754_rem_pio2+0x2f8>)
 800f740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f748:	f7f0 ff7e 	bl	8000648 <__aeabi_dmul>
 800f74c:	4606      	mov	r6, r0
 800f74e:	460f      	mov	r7, r1
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	4650      	mov	r0, sl
 800f756:	4659      	mov	r1, fp
 800f758:	f7f0 fdbe 	bl	80002d8 <__aeabi_dsub>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	4680      	mov	r8, r0
 800f762:	4689      	mov	r9, r1
 800f764:	4650      	mov	r0, sl
 800f766:	4659      	mov	r1, fp
 800f768:	f7f0 fdb6 	bl	80002d8 <__aeabi_dsub>
 800f76c:	4632      	mov	r2, r6
 800f76e:	463b      	mov	r3, r7
 800f770:	f7f0 fdb2 	bl	80002d8 <__aeabi_dsub>
 800f774:	a340      	add	r3, pc, #256	@ (adr r3, 800f878 <__ieee754_rem_pio2+0x300>)
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	4606      	mov	r6, r0
 800f77c:	460f      	mov	r7, r1
 800f77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f782:	f7f0 ff61 	bl	8000648 <__aeabi_dmul>
 800f786:	4632      	mov	r2, r6
 800f788:	463b      	mov	r3, r7
 800f78a:	f7f0 fda5 	bl	80002d8 <__aeabi_dsub>
 800f78e:	4602      	mov	r2, r0
 800f790:	460b      	mov	r3, r1
 800f792:	4606      	mov	r6, r0
 800f794:	460f      	mov	r7, r1
 800f796:	4640      	mov	r0, r8
 800f798:	4649      	mov	r1, r9
 800f79a:	f7f0 fd9d 	bl	80002d8 <__aeabi_dsub>
 800f79e:	9a05      	ldr	r2, [sp, #20]
 800f7a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	2b31      	cmp	r3, #49	@ 0x31
 800f7a8:	dc20      	bgt.n	800f7ec <__ieee754_rem_pio2+0x274>
 800f7aa:	e9c4 0100 	strd	r0, r1, [r4]
 800f7ae:	46c2      	mov	sl, r8
 800f7b0:	46cb      	mov	fp, r9
 800f7b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f7b6:	4650      	mov	r0, sl
 800f7b8:	4642      	mov	r2, r8
 800f7ba:	464b      	mov	r3, r9
 800f7bc:	4659      	mov	r1, fp
 800f7be:	f7f0 fd8b 	bl	80002d8 <__aeabi_dsub>
 800f7c2:	463b      	mov	r3, r7
 800f7c4:	4632      	mov	r2, r6
 800f7c6:	f7f0 fd87 	bl	80002d8 <__aeabi_dsub>
 800f7ca:	9b04      	ldr	r3, [sp, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f7d2:	f6bf af0e 	bge.w	800f5f2 <__ieee754_rem_pio2+0x7a>
 800f7d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f7da:	6063      	str	r3, [r4, #4]
 800f7dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f7e0:	f8c4 8000 	str.w	r8, [r4]
 800f7e4:	60a0      	str	r0, [r4, #8]
 800f7e6:	60e3      	str	r3, [r4, #12]
 800f7e8:	426d      	negs	r5, r5
 800f7ea:	e702      	b.n	800f5f2 <__ieee754_rem_pio2+0x7a>
 800f7ec:	a326      	add	r3, pc, #152	@ (adr r3, 800f888 <__ieee754_rem_pio2+0x310>)
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7f6:	f7f0 ff27 	bl	8000648 <__aeabi_dmul>
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460f      	mov	r7, r1
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	4640      	mov	r0, r8
 800f804:	4649      	mov	r1, r9
 800f806:	f7f0 fd67 	bl	80002d8 <__aeabi_dsub>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	4682      	mov	sl, r0
 800f810:	468b      	mov	fp, r1
 800f812:	4640      	mov	r0, r8
 800f814:	4649      	mov	r1, r9
 800f816:	f7f0 fd5f 	bl	80002d8 <__aeabi_dsub>
 800f81a:	4632      	mov	r2, r6
 800f81c:	463b      	mov	r3, r7
 800f81e:	f7f0 fd5b 	bl	80002d8 <__aeabi_dsub>
 800f822:	a31b      	add	r3, pc, #108	@ (adr r3, 800f890 <__ieee754_rem_pio2+0x318>)
 800f824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f828:	4606      	mov	r6, r0
 800f82a:	460f      	mov	r7, r1
 800f82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f830:	f7f0 ff0a 	bl	8000648 <__aeabi_dmul>
 800f834:	4632      	mov	r2, r6
 800f836:	463b      	mov	r3, r7
 800f838:	f7f0 fd4e 	bl	80002d8 <__aeabi_dsub>
 800f83c:	4606      	mov	r6, r0
 800f83e:	460f      	mov	r7, r1
 800f840:	e764      	b.n	800f70c <__ieee754_rem_pio2+0x194>
 800f842:	4b1b      	ldr	r3, [pc, #108]	@ (800f8b0 <__ieee754_rem_pio2+0x338>)
 800f844:	4598      	cmp	r8, r3
 800f846:	d935      	bls.n	800f8b4 <__ieee754_rem_pio2+0x33c>
 800f848:	4632      	mov	r2, r6
 800f84a:	463b      	mov	r3, r7
 800f84c:	4630      	mov	r0, r6
 800f84e:	4639      	mov	r1, r7
 800f850:	f7f0 fd42 	bl	80002d8 <__aeabi_dsub>
 800f854:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f858:	e9c4 0100 	strd	r0, r1, [r4]
 800f85c:	e69e      	b.n	800f59c <__ieee754_rem_pio2+0x24>
 800f85e:	bf00      	nop
 800f860:	54400000 	.word	0x54400000
 800f864:	3ff921fb 	.word	0x3ff921fb
 800f868:	1a626331 	.word	0x1a626331
 800f86c:	3dd0b461 	.word	0x3dd0b461
 800f870:	1a600000 	.word	0x1a600000
 800f874:	3dd0b461 	.word	0x3dd0b461
 800f878:	2e037073 	.word	0x2e037073
 800f87c:	3ba3198a 	.word	0x3ba3198a
 800f880:	6dc9c883 	.word	0x6dc9c883
 800f884:	3fe45f30 	.word	0x3fe45f30
 800f888:	2e000000 	.word	0x2e000000
 800f88c:	3ba3198a 	.word	0x3ba3198a
 800f890:	252049c1 	.word	0x252049c1
 800f894:	397b839a 	.word	0x397b839a
 800f898:	3fe921fb 	.word	0x3fe921fb
 800f89c:	4002d97b 	.word	0x4002d97b
 800f8a0:	3ff921fb 	.word	0x3ff921fb
 800f8a4:	413921fb 	.word	0x413921fb
 800f8a8:	3fe00000 	.word	0x3fe00000
 800f8ac:	08010650 	.word	0x08010650
 800f8b0:	7fefffff 	.word	0x7fefffff
 800f8b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f8b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f8bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	460f      	mov	r7, r1
 800f8c4:	f7f1 f970 	bl	8000ba8 <__aeabi_d2iz>
 800f8c8:	f7f0 fe54 	bl	8000574 <__aeabi_i2d>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f8d8:	f7f0 fcfe 	bl	80002d8 <__aeabi_dsub>
 800f8dc:	4b22      	ldr	r3, [pc, #136]	@ (800f968 <__ieee754_rem_pio2+0x3f0>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f7f0 feb2 	bl	8000648 <__aeabi_dmul>
 800f8e4:	460f      	mov	r7, r1
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	f7f1 f95e 	bl	8000ba8 <__aeabi_d2iz>
 800f8ec:	f7f0 fe42 	bl	8000574 <__aeabi_i2d>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	4639      	mov	r1, r7
 800f8f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f8fc:	f7f0 fcec 	bl	80002d8 <__aeabi_dsub>
 800f900:	4b19      	ldr	r3, [pc, #100]	@ (800f968 <__ieee754_rem_pio2+0x3f0>)
 800f902:	2200      	movs	r2, #0
 800f904:	f7f0 fea0 	bl	8000648 <__aeabi_dmul>
 800f908:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f90c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f910:	f04f 0803 	mov.w	r8, #3
 800f914:	2600      	movs	r6, #0
 800f916:	2700      	movs	r7, #0
 800f918:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f91c:	4632      	mov	r2, r6
 800f91e:	463b      	mov	r3, r7
 800f920:	46c2      	mov	sl, r8
 800f922:	f108 38ff 	add.w	r8, r8, #4294967295
 800f926:	f7f1 f8f7 	bl	8000b18 <__aeabi_dcmpeq>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d1f4      	bne.n	800f918 <__ieee754_rem_pio2+0x3a0>
 800f92e:	4b0f      	ldr	r3, [pc, #60]	@ (800f96c <__ieee754_rem_pio2+0x3f4>)
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	2302      	movs	r3, #2
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	462a      	mov	r2, r5
 800f938:	4653      	mov	r3, sl
 800f93a:	4621      	mov	r1, r4
 800f93c:	a806      	add	r0, sp, #24
 800f93e:	f000 f81f 	bl	800f980 <__kernel_rem_pio2>
 800f942:	9b04      	ldr	r3, [sp, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	4605      	mov	r5, r0
 800f948:	f6bf ae53 	bge.w	800f5f2 <__ieee754_rem_pio2+0x7a>
 800f94c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f950:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f954:	e9c4 2300 	strd	r2, r3, [r4]
 800f958:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f95c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f960:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f964:	e740      	b.n	800f7e8 <__ieee754_rem_pio2+0x270>
 800f966:	bf00      	nop
 800f968:	41700000 	.word	0x41700000
 800f96c:	080106d0 	.word	0x080106d0

0800f970 <fabs>:
 800f970:	ec51 0b10 	vmov	r0, r1, d0
 800f974:	4602      	mov	r2, r0
 800f976:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f97a:	ec43 2b10 	vmov	d0, r2, r3
 800f97e:	4770      	bx	lr

0800f980 <__kernel_rem_pio2>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	ed2d 8b02 	vpush	{d8}
 800f988:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f98c:	f112 0f14 	cmn.w	r2, #20
 800f990:	9306      	str	r3, [sp, #24]
 800f992:	9104      	str	r1, [sp, #16]
 800f994:	4bbe      	ldr	r3, [pc, #760]	@ (800fc90 <__kernel_rem_pio2+0x310>)
 800f996:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f998:	9008      	str	r0, [sp, #32]
 800f99a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	9b06      	ldr	r3, [sp, #24]
 800f9a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9a6:	bfa8      	it	ge
 800f9a8:	1ed4      	subge	r4, r2, #3
 800f9aa:	9305      	str	r3, [sp, #20]
 800f9ac:	bfb2      	itee	lt
 800f9ae:	2400      	movlt	r4, #0
 800f9b0:	2318      	movge	r3, #24
 800f9b2:	fb94 f4f3 	sdivge	r4, r4, r3
 800f9b6:	f06f 0317 	mvn.w	r3, #23
 800f9ba:	fb04 3303 	mla	r3, r4, r3, r3
 800f9be:	eb03 0b02 	add.w	fp, r3, r2
 800f9c2:	9b00      	ldr	r3, [sp, #0]
 800f9c4:	9a05      	ldr	r2, [sp, #20]
 800f9c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800fc80 <__kernel_rem_pio2+0x300>
 800f9ca:	eb03 0802 	add.w	r8, r3, r2
 800f9ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f9d0:	1aa7      	subs	r7, r4, r2
 800f9d2:	ae20      	add	r6, sp, #128	@ 0x80
 800f9d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f9d8:	2500      	movs	r5, #0
 800f9da:	4545      	cmp	r5, r8
 800f9dc:	dd13      	ble.n	800fa06 <__kernel_rem_pio2+0x86>
 800f9de:	9b06      	ldr	r3, [sp, #24]
 800f9e0:	aa20      	add	r2, sp, #128	@ 0x80
 800f9e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f9e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f9ea:	f04f 0800 	mov.w	r8, #0
 800f9ee:	9b00      	ldr	r3, [sp, #0]
 800f9f0:	4598      	cmp	r8, r3
 800f9f2:	dc31      	bgt.n	800fa58 <__kernel_rem_pio2+0xd8>
 800f9f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800fc80 <__kernel_rem_pio2+0x300>
 800f9f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa00:	462f      	mov	r7, r5
 800fa02:	2600      	movs	r6, #0
 800fa04:	e01b      	b.n	800fa3e <__kernel_rem_pio2+0xbe>
 800fa06:	42ef      	cmn	r7, r5
 800fa08:	d407      	bmi.n	800fa1a <__kernel_rem_pio2+0x9a>
 800fa0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fa0e:	f7f0 fdb1 	bl	8000574 <__aeabi_i2d>
 800fa12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fa16:	3501      	adds	r5, #1
 800fa18:	e7df      	b.n	800f9da <__kernel_rem_pio2+0x5a>
 800fa1a:	ec51 0b18 	vmov	r0, r1, d8
 800fa1e:	e7f8      	b.n	800fa12 <__kernel_rem_pio2+0x92>
 800fa20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fa28:	f7f0 fe0e 	bl	8000648 <__aeabi_dmul>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa34:	f7f0 fc52 	bl	80002dc <__adddf3>
 800fa38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa3c:	3601      	adds	r6, #1
 800fa3e:	9b05      	ldr	r3, [sp, #20]
 800fa40:	429e      	cmp	r6, r3
 800fa42:	f1a7 0708 	sub.w	r7, r7, #8
 800fa46:	ddeb      	ble.n	800fa20 <__kernel_rem_pio2+0xa0>
 800fa48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa4c:	f108 0801 	add.w	r8, r8, #1
 800fa50:	ecaa 7b02 	vstmia	sl!, {d7}
 800fa54:	3508      	adds	r5, #8
 800fa56:	e7ca      	b.n	800f9ee <__kernel_rem_pio2+0x6e>
 800fa58:	9b00      	ldr	r3, [sp, #0]
 800fa5a:	f8dd 8000 	ldr.w	r8, [sp]
 800fa5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800fa60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa64:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fa68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800fa72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa74:	ab98      	add	r3, sp, #608	@ 0x260
 800fa76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fa7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800fa7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa82:	ac0c      	add	r4, sp, #48	@ 0x30
 800fa84:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fa86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800fa8a:	46a1      	mov	r9, r4
 800fa8c:	46c2      	mov	sl, r8
 800fa8e:	f1ba 0f00 	cmp.w	sl, #0
 800fa92:	f1a5 0508 	sub.w	r5, r5, #8
 800fa96:	dc77      	bgt.n	800fb88 <__kernel_rem_pio2+0x208>
 800fa98:	4658      	mov	r0, fp
 800fa9a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800fa9e:	f000 fac7 	bl	8010030 <scalbn>
 800faa2:	ec57 6b10 	vmov	r6, r7, d0
 800faa6:	2200      	movs	r2, #0
 800faa8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800faac:	4630      	mov	r0, r6
 800faae:	4639      	mov	r1, r7
 800fab0:	f7f0 fdca 	bl	8000648 <__aeabi_dmul>
 800fab4:	ec41 0b10 	vmov	d0, r0, r1
 800fab8:	f000 fb3a 	bl	8010130 <floor>
 800fabc:	4b75      	ldr	r3, [pc, #468]	@ (800fc94 <__kernel_rem_pio2+0x314>)
 800fabe:	ec51 0b10 	vmov	r0, r1, d0
 800fac2:	2200      	movs	r2, #0
 800fac4:	f7f0 fdc0 	bl	8000648 <__aeabi_dmul>
 800fac8:	4602      	mov	r2, r0
 800faca:	460b      	mov	r3, r1
 800facc:	4630      	mov	r0, r6
 800face:	4639      	mov	r1, r7
 800fad0:	f7f0 fc02 	bl	80002d8 <__aeabi_dsub>
 800fad4:	460f      	mov	r7, r1
 800fad6:	4606      	mov	r6, r0
 800fad8:	f7f1 f866 	bl	8000ba8 <__aeabi_d2iz>
 800fadc:	9002      	str	r0, [sp, #8]
 800fade:	f7f0 fd49 	bl	8000574 <__aeabi_i2d>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	4630      	mov	r0, r6
 800fae8:	4639      	mov	r1, r7
 800faea:	f7f0 fbf5 	bl	80002d8 <__aeabi_dsub>
 800faee:	f1bb 0f00 	cmp.w	fp, #0
 800faf2:	4606      	mov	r6, r0
 800faf4:	460f      	mov	r7, r1
 800faf6:	dd6c      	ble.n	800fbd2 <__kernel_rem_pio2+0x252>
 800faf8:	f108 31ff 	add.w	r1, r8, #4294967295
 800fafc:	ab0c      	add	r3, sp, #48	@ 0x30
 800fafe:	9d02      	ldr	r5, [sp, #8]
 800fb00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb04:	f1cb 0018 	rsb	r0, fp, #24
 800fb08:	fa43 f200 	asr.w	r2, r3, r0
 800fb0c:	4415      	add	r5, r2
 800fb0e:	4082      	lsls	r2, r0
 800fb10:	1a9b      	subs	r3, r3, r2
 800fb12:	aa0c      	add	r2, sp, #48	@ 0x30
 800fb14:	9502      	str	r5, [sp, #8]
 800fb16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fb1a:	f1cb 0217 	rsb	r2, fp, #23
 800fb1e:	fa43 f902 	asr.w	r9, r3, r2
 800fb22:	f1b9 0f00 	cmp.w	r9, #0
 800fb26:	dd64      	ble.n	800fbf2 <__kernel_rem_pio2+0x272>
 800fb28:	9b02      	ldr	r3, [sp, #8]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	9302      	str	r3, [sp, #8]
 800fb30:	4615      	mov	r5, r2
 800fb32:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800fb36:	4590      	cmp	r8, r2
 800fb38:	f300 80b8 	bgt.w	800fcac <__kernel_rem_pio2+0x32c>
 800fb3c:	f1bb 0f00 	cmp.w	fp, #0
 800fb40:	dd07      	ble.n	800fb52 <__kernel_rem_pio2+0x1d2>
 800fb42:	f1bb 0f01 	cmp.w	fp, #1
 800fb46:	f000 80bf 	beq.w	800fcc8 <__kernel_rem_pio2+0x348>
 800fb4a:	f1bb 0f02 	cmp.w	fp, #2
 800fb4e:	f000 80c6 	beq.w	800fcde <__kernel_rem_pio2+0x35e>
 800fb52:	f1b9 0f02 	cmp.w	r9, #2
 800fb56:	d14c      	bne.n	800fbf2 <__kernel_rem_pio2+0x272>
 800fb58:	4632      	mov	r2, r6
 800fb5a:	463b      	mov	r3, r7
 800fb5c:	494e      	ldr	r1, [pc, #312]	@ (800fc98 <__kernel_rem_pio2+0x318>)
 800fb5e:	2000      	movs	r0, #0
 800fb60:	f7f0 fbba 	bl	80002d8 <__aeabi_dsub>
 800fb64:	4606      	mov	r6, r0
 800fb66:	460f      	mov	r7, r1
 800fb68:	2d00      	cmp	r5, #0
 800fb6a:	d042      	beq.n	800fbf2 <__kernel_rem_pio2+0x272>
 800fb6c:	4658      	mov	r0, fp
 800fb6e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800fc88 <__kernel_rem_pio2+0x308>
 800fb72:	f000 fa5d 	bl	8010030 <scalbn>
 800fb76:	4630      	mov	r0, r6
 800fb78:	4639      	mov	r1, r7
 800fb7a:	ec53 2b10 	vmov	r2, r3, d0
 800fb7e:	f7f0 fbab 	bl	80002d8 <__aeabi_dsub>
 800fb82:	4606      	mov	r6, r0
 800fb84:	460f      	mov	r7, r1
 800fb86:	e034      	b.n	800fbf2 <__kernel_rem_pio2+0x272>
 800fb88:	4b44      	ldr	r3, [pc, #272]	@ (800fc9c <__kernel_rem_pio2+0x31c>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb90:	f7f0 fd5a 	bl	8000648 <__aeabi_dmul>
 800fb94:	f7f1 f808 	bl	8000ba8 <__aeabi_d2iz>
 800fb98:	f7f0 fcec 	bl	8000574 <__aeabi_i2d>
 800fb9c:	4b40      	ldr	r3, [pc, #256]	@ (800fca0 <__kernel_rem_pio2+0x320>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	4606      	mov	r6, r0
 800fba2:	460f      	mov	r7, r1
 800fba4:	f7f0 fd50 	bl	8000648 <__aeabi_dmul>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbb0:	f7f0 fb92 	bl	80002d8 <__aeabi_dsub>
 800fbb4:	f7f0 fff8 	bl	8000ba8 <__aeabi_d2iz>
 800fbb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbbc:	f849 0b04 	str.w	r0, [r9], #4
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7f0 fb8a 	bl	80002dc <__adddf3>
 800fbc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbd0:	e75d      	b.n	800fa8e <__kernel_rem_pio2+0x10e>
 800fbd2:	d107      	bne.n	800fbe4 <__kernel_rem_pio2+0x264>
 800fbd4:	f108 33ff 	add.w	r3, r8, #4294967295
 800fbd8:	aa0c      	add	r2, sp, #48	@ 0x30
 800fbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbde:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800fbe2:	e79e      	b.n	800fb22 <__kernel_rem_pio2+0x1a2>
 800fbe4:	4b2f      	ldr	r3, [pc, #188]	@ (800fca4 <__kernel_rem_pio2+0x324>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f7f0 ffb4 	bl	8000b54 <__aeabi_dcmpge>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d143      	bne.n	800fc78 <__kernel_rem_pio2+0x2f8>
 800fbf0:	4681      	mov	r9, r0
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	4639      	mov	r1, r7
 800fbfa:	f7f0 ff8d 	bl	8000b18 <__aeabi_dcmpeq>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	f000 80bf 	beq.w	800fd82 <__kernel_rem_pio2+0x402>
 800fc04:	f108 33ff 	add.w	r3, r8, #4294967295
 800fc08:	2200      	movs	r2, #0
 800fc0a:	9900      	ldr	r1, [sp, #0]
 800fc0c:	428b      	cmp	r3, r1
 800fc0e:	da6e      	bge.n	800fcee <__kernel_rem_pio2+0x36e>
 800fc10:	2a00      	cmp	r2, #0
 800fc12:	f000 8089 	beq.w	800fd28 <__kernel_rem_pio2+0x3a8>
 800fc16:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc1c:	f1ab 0b18 	sub.w	fp, fp, #24
 800fc20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d0f6      	beq.n	800fc16 <__kernel_rem_pio2+0x296>
 800fc28:	4658      	mov	r0, fp
 800fc2a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800fc88 <__kernel_rem_pio2+0x308>
 800fc2e:	f000 f9ff 	bl	8010030 <scalbn>
 800fc32:	f108 0301 	add.w	r3, r8, #1
 800fc36:	00da      	lsls	r2, r3, #3
 800fc38:	9205      	str	r2, [sp, #20]
 800fc3a:	ec55 4b10 	vmov	r4, r5, d0
 800fc3e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800fc40:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800fc9c <__kernel_rem_pio2+0x31c>
 800fc44:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800fc48:	4646      	mov	r6, r8
 800fc4a:	f04f 0a00 	mov.w	sl, #0
 800fc4e:	2e00      	cmp	r6, #0
 800fc50:	f280 80cf 	bge.w	800fdf2 <__kernel_rem_pio2+0x472>
 800fc54:	4644      	mov	r4, r8
 800fc56:	2c00      	cmp	r4, #0
 800fc58:	f2c0 80fd 	blt.w	800fe56 <__kernel_rem_pio2+0x4d6>
 800fc5c:	4b12      	ldr	r3, [pc, #72]	@ (800fca8 <__kernel_rem_pio2+0x328>)
 800fc5e:	461f      	mov	r7, r3
 800fc60:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fc62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc66:	9306      	str	r3, [sp, #24]
 800fc68:	f04f 0a00 	mov.w	sl, #0
 800fc6c:	f04f 0b00 	mov.w	fp, #0
 800fc70:	2600      	movs	r6, #0
 800fc72:	eba8 0504 	sub.w	r5, r8, r4
 800fc76:	e0e2      	b.n	800fe3e <__kernel_rem_pio2+0x4be>
 800fc78:	f04f 0902 	mov.w	r9, #2
 800fc7c:	e754      	b.n	800fb28 <__kernel_rem_pio2+0x1a8>
 800fc7e:	bf00      	nop
	...
 800fc8c:	3ff00000 	.word	0x3ff00000
 800fc90:	08010818 	.word	0x08010818
 800fc94:	40200000 	.word	0x40200000
 800fc98:	3ff00000 	.word	0x3ff00000
 800fc9c:	3e700000 	.word	0x3e700000
 800fca0:	41700000 	.word	0x41700000
 800fca4:	3fe00000 	.word	0x3fe00000
 800fca8:	080107d8 	.word	0x080107d8
 800fcac:	f854 3b04 	ldr.w	r3, [r4], #4
 800fcb0:	b945      	cbnz	r5, 800fcc4 <__kernel_rem_pio2+0x344>
 800fcb2:	b123      	cbz	r3, 800fcbe <__kernel_rem_pio2+0x33e>
 800fcb4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800fcb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	3201      	adds	r2, #1
 800fcc0:	461d      	mov	r5, r3
 800fcc2:	e738      	b.n	800fb36 <__kernel_rem_pio2+0x1b6>
 800fcc4:	1acb      	subs	r3, r1, r3
 800fcc6:	e7f7      	b.n	800fcb8 <__kernel_rem_pio2+0x338>
 800fcc8:	f108 32ff 	add.w	r2, r8, #4294967295
 800fccc:	ab0c      	add	r3, sp, #48	@ 0x30
 800fcce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fcd6:	a90c      	add	r1, sp, #48	@ 0x30
 800fcd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fcdc:	e739      	b.n	800fb52 <__kernel_rem_pio2+0x1d2>
 800fcde:	f108 32ff 	add.w	r2, r8, #4294967295
 800fce2:	ab0c      	add	r3, sp, #48	@ 0x30
 800fce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fcec:	e7f3      	b.n	800fcd6 <__kernel_rem_pio2+0x356>
 800fcee:	a90c      	add	r1, sp, #48	@ 0x30
 800fcf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	e787      	b.n	800fc0a <__kernel_rem_pio2+0x28a>
 800fcfa:	3401      	adds	r4, #1
 800fcfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fd00:	2a00      	cmp	r2, #0
 800fd02:	d0fa      	beq.n	800fcfa <__kernel_rem_pio2+0x37a>
 800fd04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fd0a:	eb0d 0503 	add.w	r5, sp, r3
 800fd0e:	9b06      	ldr	r3, [sp, #24]
 800fd10:	aa20      	add	r2, sp, #128	@ 0x80
 800fd12:	4443      	add	r3, r8
 800fd14:	f108 0701 	add.w	r7, r8, #1
 800fd18:	3d98      	subs	r5, #152	@ 0x98
 800fd1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800fd1e:	4444      	add	r4, r8
 800fd20:	42bc      	cmp	r4, r7
 800fd22:	da04      	bge.n	800fd2e <__kernel_rem_pio2+0x3ae>
 800fd24:	46a0      	mov	r8, r4
 800fd26:	e6a2      	b.n	800fa6e <__kernel_rem_pio2+0xee>
 800fd28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd2a:	2401      	movs	r4, #1
 800fd2c:	e7e6      	b.n	800fcfc <__kernel_rem_pio2+0x37c>
 800fd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800fd34:	f7f0 fc1e 	bl	8000574 <__aeabi_i2d>
 800fd38:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010000 <__kernel_rem_pio2+0x680>
 800fd3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fd40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd48:	46b2      	mov	sl, r6
 800fd4a:	f04f 0800 	mov.w	r8, #0
 800fd4e:	9b05      	ldr	r3, [sp, #20]
 800fd50:	4598      	cmp	r8, r3
 800fd52:	dd05      	ble.n	800fd60 <__kernel_rem_pio2+0x3e0>
 800fd54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd58:	3701      	adds	r7, #1
 800fd5a:	eca5 7b02 	vstmia	r5!, {d7}
 800fd5e:	e7df      	b.n	800fd20 <__kernel_rem_pio2+0x3a0>
 800fd60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800fd64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fd68:	f7f0 fc6e 	bl	8000648 <__aeabi_dmul>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd74:	f7f0 fab2 	bl	80002dc <__adddf3>
 800fd78:	f108 0801 	add.w	r8, r8, #1
 800fd7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd80:	e7e5      	b.n	800fd4e <__kernel_rem_pio2+0x3ce>
 800fd82:	f1cb 0000 	rsb	r0, fp, #0
 800fd86:	ec47 6b10 	vmov	d0, r6, r7
 800fd8a:	f000 f951 	bl	8010030 <scalbn>
 800fd8e:	ec55 4b10 	vmov	r4, r5, d0
 800fd92:	4b9d      	ldr	r3, [pc, #628]	@ (8010008 <__kernel_rem_pio2+0x688>)
 800fd94:	2200      	movs	r2, #0
 800fd96:	4620      	mov	r0, r4
 800fd98:	4629      	mov	r1, r5
 800fd9a:	f7f0 fedb 	bl	8000b54 <__aeabi_dcmpge>
 800fd9e:	b300      	cbz	r0, 800fde2 <__kernel_rem_pio2+0x462>
 800fda0:	4b9a      	ldr	r3, [pc, #616]	@ (801000c <__kernel_rem_pio2+0x68c>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	4620      	mov	r0, r4
 800fda6:	4629      	mov	r1, r5
 800fda8:	f7f0 fc4e 	bl	8000648 <__aeabi_dmul>
 800fdac:	f7f0 fefc 	bl	8000ba8 <__aeabi_d2iz>
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	f7f0 fbdf 	bl	8000574 <__aeabi_i2d>
 800fdb6:	4b94      	ldr	r3, [pc, #592]	@ (8010008 <__kernel_rem_pio2+0x688>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f7f0 fc45 	bl	8000648 <__aeabi_dmul>
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	4629      	mov	r1, r5
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f7f0 fa87 	bl	80002d8 <__aeabi_dsub>
 800fdca:	f7f0 feed 	bl	8000ba8 <__aeabi_d2iz>
 800fdce:	ab0c      	add	r3, sp, #48	@ 0x30
 800fdd0:	f10b 0b18 	add.w	fp, fp, #24
 800fdd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fdd8:	f108 0801 	add.w	r8, r8, #1
 800fddc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800fde0:	e722      	b.n	800fc28 <__kernel_rem_pio2+0x2a8>
 800fde2:	4620      	mov	r0, r4
 800fde4:	4629      	mov	r1, r5
 800fde6:	f7f0 fedf 	bl	8000ba8 <__aeabi_d2iz>
 800fdea:	ab0c      	add	r3, sp, #48	@ 0x30
 800fdec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fdf0:	e71a      	b.n	800fc28 <__kernel_rem_pio2+0x2a8>
 800fdf2:	ab0c      	add	r3, sp, #48	@ 0x30
 800fdf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fdf8:	f7f0 fbbc 	bl	8000574 <__aeabi_i2d>
 800fdfc:	4622      	mov	r2, r4
 800fdfe:	462b      	mov	r3, r5
 800fe00:	f7f0 fc22 	bl	8000648 <__aeabi_dmul>
 800fe04:	4652      	mov	r2, sl
 800fe06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800fe0a:	465b      	mov	r3, fp
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	4629      	mov	r1, r5
 800fe10:	f7f0 fc1a 	bl	8000648 <__aeabi_dmul>
 800fe14:	3e01      	subs	r6, #1
 800fe16:	4604      	mov	r4, r0
 800fe18:	460d      	mov	r5, r1
 800fe1a:	e718      	b.n	800fc4e <__kernel_rem_pio2+0x2ce>
 800fe1c:	9906      	ldr	r1, [sp, #24]
 800fe1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fe22:	9106      	str	r1, [sp, #24]
 800fe24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800fe28:	f7f0 fc0e 	bl	8000648 <__aeabi_dmul>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	460b      	mov	r3, r1
 800fe30:	4650      	mov	r0, sl
 800fe32:	4659      	mov	r1, fp
 800fe34:	f7f0 fa52 	bl	80002dc <__adddf3>
 800fe38:	3601      	adds	r6, #1
 800fe3a:	4682      	mov	sl, r0
 800fe3c:	468b      	mov	fp, r1
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	429e      	cmp	r6, r3
 800fe42:	dc01      	bgt.n	800fe48 <__kernel_rem_pio2+0x4c8>
 800fe44:	42b5      	cmp	r5, r6
 800fe46:	dae9      	bge.n	800fe1c <__kernel_rem_pio2+0x49c>
 800fe48:	ab48      	add	r3, sp, #288	@ 0x120
 800fe4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fe4e:	e9c5 ab00 	strd	sl, fp, [r5]
 800fe52:	3c01      	subs	r4, #1
 800fe54:	e6ff      	b.n	800fc56 <__kernel_rem_pio2+0x2d6>
 800fe56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	dc0b      	bgt.n	800fe74 <__kernel_rem_pio2+0x4f4>
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	dc39      	bgt.n	800fed4 <__kernel_rem_pio2+0x554>
 800fe60:	d05d      	beq.n	800ff1e <__kernel_rem_pio2+0x59e>
 800fe62:	9b02      	ldr	r3, [sp, #8]
 800fe64:	f003 0007 	and.w	r0, r3, #7
 800fe68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fe6c:	ecbd 8b02 	vpop	{d8}
 800fe70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fe76:	2b03      	cmp	r3, #3
 800fe78:	d1f3      	bne.n	800fe62 <__kernel_rem_pio2+0x4e2>
 800fe7a:	9b05      	ldr	r3, [sp, #20]
 800fe7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fe80:	eb0d 0403 	add.w	r4, sp, r3
 800fe84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800fe88:	4625      	mov	r5, r4
 800fe8a:	46c2      	mov	sl, r8
 800fe8c:	f1ba 0f00 	cmp.w	sl, #0
 800fe90:	f1a5 0508 	sub.w	r5, r5, #8
 800fe94:	dc6b      	bgt.n	800ff6e <__kernel_rem_pio2+0x5ee>
 800fe96:	4645      	mov	r5, r8
 800fe98:	2d01      	cmp	r5, #1
 800fe9a:	f1a4 0408 	sub.w	r4, r4, #8
 800fe9e:	f300 8087 	bgt.w	800ffb0 <__kernel_rem_pio2+0x630>
 800fea2:	9c05      	ldr	r4, [sp, #20]
 800fea4:	ab48      	add	r3, sp, #288	@ 0x120
 800fea6:	441c      	add	r4, r3
 800fea8:	2000      	movs	r0, #0
 800feaa:	2100      	movs	r1, #0
 800feac:	f1b8 0f01 	cmp.w	r8, #1
 800feb0:	f300 809c 	bgt.w	800ffec <__kernel_rem_pio2+0x66c>
 800feb4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800feb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800febc:	f1b9 0f00 	cmp.w	r9, #0
 800fec0:	f040 80a6 	bne.w	8010010 <__kernel_rem_pio2+0x690>
 800fec4:	9b04      	ldr	r3, [sp, #16]
 800fec6:	e9c3 7800 	strd	r7, r8, [r3]
 800feca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fece:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fed2:	e7c6      	b.n	800fe62 <__kernel_rem_pio2+0x4e2>
 800fed4:	9d05      	ldr	r5, [sp, #20]
 800fed6:	ab48      	add	r3, sp, #288	@ 0x120
 800fed8:	441d      	add	r5, r3
 800feda:	4644      	mov	r4, r8
 800fedc:	2000      	movs	r0, #0
 800fede:	2100      	movs	r1, #0
 800fee0:	2c00      	cmp	r4, #0
 800fee2:	da35      	bge.n	800ff50 <__kernel_rem_pio2+0x5d0>
 800fee4:	f1b9 0f00 	cmp.w	r9, #0
 800fee8:	d038      	beq.n	800ff5c <__kernel_rem_pio2+0x5dc>
 800feea:	4602      	mov	r2, r0
 800feec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fef0:	9c04      	ldr	r4, [sp, #16]
 800fef2:	e9c4 2300 	strd	r2, r3, [r4]
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fefe:	f7f0 f9eb 	bl	80002d8 <__aeabi_dsub>
 800ff02:	ad4a      	add	r5, sp, #296	@ 0x128
 800ff04:	2401      	movs	r4, #1
 800ff06:	45a0      	cmp	r8, r4
 800ff08:	da2b      	bge.n	800ff62 <__kernel_rem_pio2+0x5e2>
 800ff0a:	f1b9 0f00 	cmp.w	r9, #0
 800ff0e:	d002      	beq.n	800ff16 <__kernel_rem_pio2+0x596>
 800ff10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff14:	4619      	mov	r1, r3
 800ff16:	9b04      	ldr	r3, [sp, #16]
 800ff18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ff1c:	e7a1      	b.n	800fe62 <__kernel_rem_pio2+0x4e2>
 800ff1e:	9c05      	ldr	r4, [sp, #20]
 800ff20:	ab48      	add	r3, sp, #288	@ 0x120
 800ff22:	441c      	add	r4, r3
 800ff24:	2000      	movs	r0, #0
 800ff26:	2100      	movs	r1, #0
 800ff28:	f1b8 0f00 	cmp.w	r8, #0
 800ff2c:	da09      	bge.n	800ff42 <__kernel_rem_pio2+0x5c2>
 800ff2e:	f1b9 0f00 	cmp.w	r9, #0
 800ff32:	d002      	beq.n	800ff3a <__kernel_rem_pio2+0x5ba>
 800ff34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff38:	4619      	mov	r1, r3
 800ff3a:	9b04      	ldr	r3, [sp, #16]
 800ff3c:	e9c3 0100 	strd	r0, r1, [r3]
 800ff40:	e78f      	b.n	800fe62 <__kernel_rem_pio2+0x4e2>
 800ff42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff46:	f7f0 f9c9 	bl	80002dc <__adddf3>
 800ff4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff4e:	e7eb      	b.n	800ff28 <__kernel_rem_pio2+0x5a8>
 800ff50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ff54:	f7f0 f9c2 	bl	80002dc <__adddf3>
 800ff58:	3c01      	subs	r4, #1
 800ff5a:	e7c1      	b.n	800fee0 <__kernel_rem_pio2+0x560>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	e7c6      	b.n	800fef0 <__kernel_rem_pio2+0x570>
 800ff62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ff66:	f7f0 f9b9 	bl	80002dc <__adddf3>
 800ff6a:	3401      	adds	r4, #1
 800ff6c:	e7cb      	b.n	800ff06 <__kernel_rem_pio2+0x586>
 800ff6e:	ed95 7b00 	vldr	d7, [r5]
 800ff72:	ed8d 7b00 	vstr	d7, [sp]
 800ff76:	ed95 7b02 	vldr	d7, [r5, #8]
 800ff7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff7e:	ec53 2b17 	vmov	r2, r3, d7
 800ff82:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ff86:	f7f0 f9a9 	bl	80002dc <__adddf3>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	4606      	mov	r6, r0
 800ff90:	460f      	mov	r7, r1
 800ff92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff96:	f7f0 f99f 	bl	80002d8 <__aeabi_dsub>
 800ff9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff9e:	f7f0 f99d 	bl	80002dc <__adddf3>
 800ffa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffa6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ffaa:	e9c5 6700 	strd	r6, r7, [r5]
 800ffae:	e76d      	b.n	800fe8c <__kernel_rem_pio2+0x50c>
 800ffb0:	ed94 7b00 	vldr	d7, [r4]
 800ffb4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800ffb8:	ec51 0b17 	vmov	r0, r1, d7
 800ffbc:	4652      	mov	r2, sl
 800ffbe:	465b      	mov	r3, fp
 800ffc0:	ed8d 7b00 	vstr	d7, [sp]
 800ffc4:	f7f0 f98a 	bl	80002dc <__adddf3>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4606      	mov	r6, r0
 800ffce:	460f      	mov	r7, r1
 800ffd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd4:	f7f0 f980 	bl	80002d8 <__aeabi_dsub>
 800ffd8:	4652      	mov	r2, sl
 800ffda:	465b      	mov	r3, fp
 800ffdc:	f7f0 f97e 	bl	80002dc <__adddf3>
 800ffe0:	3d01      	subs	r5, #1
 800ffe2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ffe6:	e9c4 6700 	strd	r6, r7, [r4]
 800ffea:	e755      	b.n	800fe98 <__kernel_rem_pio2+0x518>
 800ffec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fff0:	f7f0 f974 	bl	80002dc <__adddf3>
 800fff4:	f108 38ff 	add.w	r8, r8, #4294967295
 800fff8:	e758      	b.n	800feac <__kernel_rem_pio2+0x52c>
 800fffa:	bf00      	nop
 800fffc:	f3af 8000 	nop.w
	...
 8010008:	41700000 	.word	0x41700000
 801000c:	3e700000 	.word	0x3e700000
 8010010:	9b04      	ldr	r3, [sp, #16]
 8010012:	9a04      	ldr	r2, [sp, #16]
 8010014:	601f      	str	r7, [r3, #0]
 8010016:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801001a:	605c      	str	r4, [r3, #4]
 801001c:	609d      	str	r5, [r3, #8]
 801001e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010022:	60d3      	str	r3, [r2, #12]
 8010024:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010028:	6110      	str	r0, [r2, #16]
 801002a:	6153      	str	r3, [r2, #20]
 801002c:	e719      	b.n	800fe62 <__kernel_rem_pio2+0x4e2>
 801002e:	bf00      	nop

08010030 <scalbn>:
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	ec55 4b10 	vmov	r4, r5, d0
 8010036:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801003a:	4606      	mov	r6, r0
 801003c:	462b      	mov	r3, r5
 801003e:	b991      	cbnz	r1, 8010066 <scalbn+0x36>
 8010040:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010044:	4323      	orrs	r3, r4
 8010046:	d03d      	beq.n	80100c4 <scalbn+0x94>
 8010048:	4b35      	ldr	r3, [pc, #212]	@ (8010120 <scalbn+0xf0>)
 801004a:	4620      	mov	r0, r4
 801004c:	4629      	mov	r1, r5
 801004e:	2200      	movs	r2, #0
 8010050:	f7f0 fafa 	bl	8000648 <__aeabi_dmul>
 8010054:	4b33      	ldr	r3, [pc, #204]	@ (8010124 <scalbn+0xf4>)
 8010056:	429e      	cmp	r6, r3
 8010058:	4604      	mov	r4, r0
 801005a:	460d      	mov	r5, r1
 801005c:	da0f      	bge.n	801007e <scalbn+0x4e>
 801005e:	a328      	add	r3, pc, #160	@ (adr r3, 8010100 <scalbn+0xd0>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	e01e      	b.n	80100a4 <scalbn+0x74>
 8010066:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801006a:	4291      	cmp	r1, r2
 801006c:	d10b      	bne.n	8010086 <scalbn+0x56>
 801006e:	4622      	mov	r2, r4
 8010070:	4620      	mov	r0, r4
 8010072:	4629      	mov	r1, r5
 8010074:	f7f0 f932 	bl	80002dc <__adddf3>
 8010078:	4604      	mov	r4, r0
 801007a:	460d      	mov	r5, r1
 801007c:	e022      	b.n	80100c4 <scalbn+0x94>
 801007e:	460b      	mov	r3, r1
 8010080:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010084:	3936      	subs	r1, #54	@ 0x36
 8010086:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801008a:	4296      	cmp	r6, r2
 801008c:	dd0d      	ble.n	80100aa <scalbn+0x7a>
 801008e:	2d00      	cmp	r5, #0
 8010090:	a11d      	add	r1, pc, #116	@ (adr r1, 8010108 <scalbn+0xd8>)
 8010092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010096:	da02      	bge.n	801009e <scalbn+0x6e>
 8010098:	a11d      	add	r1, pc, #116	@ (adr r1, 8010110 <scalbn+0xe0>)
 801009a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801009e:	a31a      	add	r3, pc, #104	@ (adr r3, 8010108 <scalbn+0xd8>)
 80100a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a4:	f7f0 fad0 	bl	8000648 <__aeabi_dmul>
 80100a8:	e7e6      	b.n	8010078 <scalbn+0x48>
 80100aa:	1872      	adds	r2, r6, r1
 80100ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80100b0:	428a      	cmp	r2, r1
 80100b2:	dcec      	bgt.n	801008e <scalbn+0x5e>
 80100b4:	2a00      	cmp	r2, #0
 80100b6:	dd08      	ble.n	80100ca <scalbn+0x9a>
 80100b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80100bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80100c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100c4:	ec45 4b10 	vmov	d0, r4, r5
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
 80100ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80100ce:	da08      	bge.n	80100e2 <scalbn+0xb2>
 80100d0:	2d00      	cmp	r5, #0
 80100d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8010100 <scalbn+0xd0>)
 80100d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d8:	dac1      	bge.n	801005e <scalbn+0x2e>
 80100da:	a10f      	add	r1, pc, #60	@ (adr r1, 8010118 <scalbn+0xe8>)
 80100dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100e0:	e7bd      	b.n	801005e <scalbn+0x2e>
 80100e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80100e6:	3236      	adds	r2, #54	@ 0x36
 80100e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80100ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100f0:	4620      	mov	r0, r4
 80100f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010128 <scalbn+0xf8>)
 80100f4:	4629      	mov	r1, r5
 80100f6:	2200      	movs	r2, #0
 80100f8:	e7d4      	b.n	80100a4 <scalbn+0x74>
 80100fa:	bf00      	nop
 80100fc:	f3af 8000 	nop.w
 8010100:	c2f8f359 	.word	0xc2f8f359
 8010104:	01a56e1f 	.word	0x01a56e1f
 8010108:	8800759c 	.word	0x8800759c
 801010c:	7e37e43c 	.word	0x7e37e43c
 8010110:	8800759c 	.word	0x8800759c
 8010114:	fe37e43c 	.word	0xfe37e43c
 8010118:	c2f8f359 	.word	0xc2f8f359
 801011c:	81a56e1f 	.word	0x81a56e1f
 8010120:	43500000 	.word	0x43500000
 8010124:	ffff3cb0 	.word	0xffff3cb0
 8010128:	3c900000 	.word	0x3c900000
 801012c:	00000000 	.word	0x00000000

08010130 <floor>:
 8010130:	ec51 0b10 	vmov	r0, r1, d0
 8010134:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010140:	2e13      	cmp	r6, #19
 8010142:	460c      	mov	r4, r1
 8010144:	4605      	mov	r5, r0
 8010146:	4680      	mov	r8, r0
 8010148:	dc34      	bgt.n	80101b4 <floor+0x84>
 801014a:	2e00      	cmp	r6, #0
 801014c:	da17      	bge.n	801017e <floor+0x4e>
 801014e:	a332      	add	r3, pc, #200	@ (adr r3, 8010218 <floor+0xe8>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f7f0 f8c2 	bl	80002dc <__adddf3>
 8010158:	2200      	movs	r2, #0
 801015a:	2300      	movs	r3, #0
 801015c:	f7f0 fd04 	bl	8000b68 <__aeabi_dcmpgt>
 8010160:	b150      	cbz	r0, 8010178 <floor+0x48>
 8010162:	2c00      	cmp	r4, #0
 8010164:	da55      	bge.n	8010212 <floor+0xe2>
 8010166:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801016a:	432c      	orrs	r4, r5
 801016c:	2500      	movs	r5, #0
 801016e:	42ac      	cmp	r4, r5
 8010170:	4c2b      	ldr	r4, [pc, #172]	@ (8010220 <floor+0xf0>)
 8010172:	bf08      	it	eq
 8010174:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010178:	4621      	mov	r1, r4
 801017a:	4628      	mov	r0, r5
 801017c:	e023      	b.n	80101c6 <floor+0x96>
 801017e:	4f29      	ldr	r7, [pc, #164]	@ (8010224 <floor+0xf4>)
 8010180:	4137      	asrs	r7, r6
 8010182:	ea01 0307 	and.w	r3, r1, r7
 8010186:	4303      	orrs	r3, r0
 8010188:	d01d      	beq.n	80101c6 <floor+0x96>
 801018a:	a323      	add	r3, pc, #140	@ (adr r3, 8010218 <floor+0xe8>)
 801018c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010190:	f7f0 f8a4 	bl	80002dc <__adddf3>
 8010194:	2200      	movs	r2, #0
 8010196:	2300      	movs	r3, #0
 8010198:	f7f0 fce6 	bl	8000b68 <__aeabi_dcmpgt>
 801019c:	2800      	cmp	r0, #0
 801019e:	d0eb      	beq.n	8010178 <floor+0x48>
 80101a0:	2c00      	cmp	r4, #0
 80101a2:	bfbe      	ittt	lt
 80101a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80101a8:	4133      	asrlt	r3, r6
 80101aa:	18e4      	addlt	r4, r4, r3
 80101ac:	ea24 0407 	bic.w	r4, r4, r7
 80101b0:	2500      	movs	r5, #0
 80101b2:	e7e1      	b.n	8010178 <floor+0x48>
 80101b4:	2e33      	cmp	r6, #51	@ 0x33
 80101b6:	dd0a      	ble.n	80101ce <floor+0x9e>
 80101b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80101bc:	d103      	bne.n	80101c6 <floor+0x96>
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	f7f0 f88b 	bl	80002dc <__adddf3>
 80101c6:	ec41 0b10 	vmov	d0, r0, r1
 80101ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80101d2:	f04f 37ff 	mov.w	r7, #4294967295
 80101d6:	40df      	lsrs	r7, r3
 80101d8:	4207      	tst	r7, r0
 80101da:	d0f4      	beq.n	80101c6 <floor+0x96>
 80101dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010218 <floor+0xe8>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	f7f0 f87b 	bl	80002dc <__adddf3>
 80101e6:	2200      	movs	r2, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	f7f0 fcbd 	bl	8000b68 <__aeabi_dcmpgt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d0c2      	beq.n	8010178 <floor+0x48>
 80101f2:	2c00      	cmp	r4, #0
 80101f4:	da0a      	bge.n	801020c <floor+0xdc>
 80101f6:	2e14      	cmp	r6, #20
 80101f8:	d101      	bne.n	80101fe <floor+0xce>
 80101fa:	3401      	adds	r4, #1
 80101fc:	e006      	b.n	801020c <floor+0xdc>
 80101fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010202:	2301      	movs	r3, #1
 8010204:	40b3      	lsls	r3, r6
 8010206:	441d      	add	r5, r3
 8010208:	4545      	cmp	r5, r8
 801020a:	d3f6      	bcc.n	80101fa <floor+0xca>
 801020c:	ea25 0507 	bic.w	r5, r5, r7
 8010210:	e7b2      	b.n	8010178 <floor+0x48>
 8010212:	2500      	movs	r5, #0
 8010214:	462c      	mov	r4, r5
 8010216:	e7af      	b.n	8010178 <floor+0x48>
 8010218:	8800759c 	.word	0x8800759c
 801021c:	7e37e43c 	.word	0x7e37e43c
 8010220:	bff00000 	.word	0xbff00000
 8010224:	000fffff 	.word	0x000fffff

08010228 <_init>:
 8010228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022a:	bf00      	nop
 801022c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801022e:	bc08      	pop	{r3}
 8010230:	469e      	mov	lr, r3
 8010232:	4770      	bx	lr

08010234 <_fini>:
 8010234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010236:	bf00      	nop
 8010238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801023a:	bc08      	pop	{r3}
 801023c:	469e      	mov	lr, r3
 801023e:	4770      	bx	lr
