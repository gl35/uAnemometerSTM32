
uAnemometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015318  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  080154f8  080154f8  000164f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015bb0  08015bb0  000176c8  2**0
                  CONTENTS
  4 .ARM          00000008  08015bb0  08015bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015bb8  08015bb8  000176c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015bb8  08015bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015bc0  08015bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c8  20000000  08015bc4  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bac  200006c8  0801628c  000176c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003274  0801628c  00018274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000176c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac89  00000000  00000000  000176f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051ef  00000000  00000000  00042381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  00047570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b5f  00000000  00000000  000498a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064b3  00000000  00000000  0004b3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000295e0  00000000  00000000  000518b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee3a0  00000000  00000000  0007ae92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169232  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad1c  00000000  00000000  00169278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00173f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006c8 	.word	0x200006c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080154e0 	.word	0x080154e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006cc 	.word	0x200006cc
 800021c:	080154e0 	.word	0x080154e0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96a 	b.w	8000fc4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	460c      	mov	r4, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14e      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d14:	4694      	mov	ip, r2
 8000d16:	458c      	cmp	ip, r1
 8000d18:	4686      	mov	lr, r0
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	d962      	bls.n	8000de6 <__udivmoddi4+0xde>
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	4319      	orrs	r1, r3
 8000d32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f f68c 	uxth.w	r6, ip
 8000d3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb07 1114 	mls	r1, r7, r4, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb04 f106 	mul.w	r1, r4, r6
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d5e:	f080 8112 	bcs.w	8000f86 <__udivmoddi4+0x27e>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 810f 	bls.w	8000f86 <__udivmoddi4+0x27e>
 8000d68:	3c02      	subs	r4, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a59      	subs	r1, r3, r1
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d76:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f606 	mul.w	r6, r0, r6
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x94>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8e:	f080 80fc 	bcs.w	8000f8a <__udivmoddi4+0x282>
 8000d92:	429e      	cmp	r6, r3
 8000d94:	f240 80f9 	bls.w	8000f8a <__udivmoddi4+0x282>
 8000d98:	4463      	add	r3, ip
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	b11d      	cbz	r5, 8000dae <__udivmoddi4+0xa6>
 8000da6:	40d3      	lsrs	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d905      	bls.n	8000dc2 <__udivmoddi4+0xba>
 8000db6:	b10d      	cbz	r5, 8000dbc <__udivmoddi4+0xb4>
 8000db8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e7f5      	b.n	8000dae <__udivmoddi4+0xa6>
 8000dc2:	fab3 f183 	clz	r1, r3
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d146      	bne.n	8000e58 <__udivmoddi4+0x150>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xcc>
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	f0c0 80f0 	bcc.w	8000fb4 <__udivmoddi4+0x2ac>
 8000dd4:	1a86      	subs	r6, r0, r2
 8000dd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d0e6      	beq.n	8000dae <__udivmoddi4+0xa6>
 8000de0:	e9c5 6300 	strd	r6, r3, [r5]
 8000de4:	e7e3      	b.n	8000dae <__udivmoddi4+0xa6>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	f040 8090 	bne.w	8000f0c <__udivmoddi4+0x204>
 8000dec:	eba1 040c 	sub.w	r4, r1, ip
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb08 4416 	mls	r4, r8, r6, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb07 f006 	mul.w	r0, r7, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x11c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x11a>
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	f200 80cd 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000e22:	4626      	mov	r6, r4
 8000e24:	1a1c      	subs	r4, r3, r0
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb00 f707 	mul.w	r7, r0, r7
 8000e3a:	429f      	cmp	r7, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x148>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x146>
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	f200 80b0 	bhi.w	8000fae <__udivmoddi4+0x2a6>
 8000e4e:	4620      	mov	r0, r4
 8000e50:	1bdb      	subs	r3, r3, r7
 8000e52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0x9c>
 8000e58:	f1c1 0620 	rsb	r6, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e62:	431f      	orrs	r7, r3
 8000e64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e68:	fa04 f301 	lsl.w	r3, r4, r1
 8000e6c:	ea43 030c 	orr.w	r3, r3, ip
 8000e70:	40f4      	lsrs	r4, r6
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	0c38      	lsrs	r0, r7, #16
 8000e78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e80:	fa1f fc87 	uxth.w	ip, r7
 8000e84:	fb00 441e 	mls	r4, r0, lr, r4
 8000e88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e90:	45a1      	cmp	r9, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x1a6>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e9e:	f080 8084 	bcs.w	8000faa <__udivmoddi4+0x2a2>
 8000ea2:	45a1      	cmp	r9, r4
 8000ea4:	f240 8081 	bls.w	8000faa <__udivmoddi4+0x2a2>
 8000ea8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	eba4 0409 	sub.w	r4, r4, r9
 8000eb2:	fa1f f983 	uxth.w	r9, r3
 8000eb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eba:	fb00 4413 	mls	r4, r0, r3, r4
 8000ebe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x1d2>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ed0:	d267      	bcs.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d965      	bls.n	8000fa2 <__udivmoddi4+0x29a>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ede:	fba0 9302 	umull	r9, r3, r0, r2
 8000ee2:	eba4 040c 	sub.w	r4, r4, ip
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	469c      	mov	ip, r3
 8000eec:	d351      	bcc.n	8000f92 <__udivmoddi4+0x28a>
 8000eee:	d04e      	beq.n	8000f8e <__udivmoddi4+0x286>
 8000ef0:	b155      	cbz	r5, 8000f08 <__udivmoddi4+0x200>
 8000ef2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ef6:	eb64 040c 	sbc.w	r4, r4, ip
 8000efa:	fa04 f606 	lsl.w	r6, r4, r6
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	431e      	orrs	r6, r3
 8000f02:	40cc      	lsrs	r4, r1
 8000f04:	e9c5 6400 	strd	r6, r4, [r5]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	e750      	b.n	8000dae <__udivmoddi4+0xa6>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f103 	lsr.w	r1, r0, r3
 8000f14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f18:	fa24 f303 	lsr.w	r3, r4, r3
 8000f1c:	4094      	lsls	r4, r2
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3110 	mls	r1, r8, r0, r3
 8000f34:	0c23      	lsrs	r3, r4, #16
 8000f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3a:	fb00 f107 	mul.w	r1, r0, r7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x24c>
 8000f42:	eb1c 0303 	adds.w	r3, ip, r3
 8000f46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f4a:	d22c      	bcs.n	8000fa6 <__udivmoddi4+0x29e>
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d92a      	bls.n	8000fa6 <__udivmoddi4+0x29e>
 8000f50:	3802      	subs	r0, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f64:	fb01 f307 	mul.w	r3, r1, r7
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x276>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f74:	d213      	bcs.n	8000f9e <__udivmoddi4+0x296>
 8000f76:	42a3      	cmp	r3, r4
 8000f78:	d911      	bls.n	8000f9e <__udivmoddi4+0x296>
 8000f7a:	3902      	subs	r1, #2
 8000f7c:	4464      	add	r4, ip
 8000f7e:	1ae4      	subs	r4, r4, r3
 8000f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f84:	e739      	b.n	8000dfa <__udivmoddi4+0xf2>
 8000f86:	4604      	mov	r4, r0
 8000f88:	e6f0      	b.n	8000d6c <__udivmoddi4+0x64>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e706      	b.n	8000d9c <__udivmoddi4+0x94>
 8000f8e:	45c8      	cmp	r8, r9
 8000f90:	d2ae      	bcs.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7a8      	b.n	8000ef0 <__udivmoddi4+0x1e8>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	e7ed      	b.n	8000f7e <__udivmoddi4+0x276>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e799      	b.n	8000eda <__udivmoddi4+0x1d2>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d4      	b.n	8000f54 <__udivmoddi4+0x24c>
 8000faa:	46d6      	mov	lr, sl
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1a6>
 8000fae:	4463      	add	r3, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e74d      	b.n	8000e50 <__udivmoddi4+0x148>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e70f      	b.n	8000ddc <__udivmoddi4+0xd4>
 8000fbc:	3e02      	subs	r6, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	e730      	b.n	8000e24 <__udivmoddi4+0x11c>
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100); //for polling just use this line
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 8001008:	e007      	b.n	800101a <lcd_send_cmd+0x52>
	{
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge its address)
		Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800100a:	480f      	ldr	r0, [pc, #60]	@ (8001048 <lcd_send_cmd+0x80>)
 800100c:	f005 f8e3 	bl	80061d6 <HAL_I2C_GetError>
 8001010:	4603      	mov	r3, r0
 8001012:	2b04      	cmp	r3, #4
 8001014:	d001      	beq.n	800101a <lcd_send_cmd+0x52>
		{
			Error_Handler();
 8001016:	f001 f8cd 	bl	80021b4 <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800101a:	f107 0208 	add.w	r2, r7, #8
 800101e:	2304      	movs	r3, #4
 8001020:	214e      	movs	r1, #78	@ 0x4e
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <lcd_send_cmd+0x80>)
 8001024:	f004 fee2 	bl	8005dec <HAL_I2C_Master_Transmit_DMA>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ed      	bne.n	800100a <lcd_send_cmd+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800102e:	bf00      	nop
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <lcd_send_cmd+0x80>)
 8001032:	f005 f8c2 	bl	80061ba <HAL_I2C_GetState>
 8001036:	4603      	mov	r3, r0
 8001038:	2b20      	cmp	r3, #32
 800103a:	d1f9      	bne.n	8001030 <lcd_send_cmd+0x68>
		//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
	 	 "aTxBuffer" buffer */
	}
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000824 	.word	0x20000824

0800104c <lcd_send_data>:

void lcd_send_data (char data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f043 030d 	orr.w	r3, r3, #13
 800106a:	b2db      	uxtb	r3, r3
 800106c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f043 0309 	orr.w	r3, r3, #9
 8001074:	b2db      	uxtb	r3, r3
 8001076:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	f043 030d 	orr.w	r3, r3, #13
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f043 0309 	orr.w	r3, r3, #9
 8001088:	b2db      	uxtb	r3, r3
 800108a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);  //for polling just use this line
//	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800108c:	e007      	b.n	800109e <lcd_send_data+0x52>
	{
		/* Error_Handler() function is called when Timeout error occurs.
	 	 When Acknowledge failure occurs (Slave don't acknowledge its address)
		Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <lcd_send_data+0x80>)
 8001090:	f005 f8a1 	bl	80061d6 <HAL_I2C_GetError>
 8001094:	4603      	mov	r3, r0
 8001096:	2b04      	cmp	r3, #4
 8001098:	d001      	beq.n	800109e <lcd_send_data+0x52>
		{
			Error_Handler();
 800109a:	f001 f88b 	bl	80021b4 <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4) != HAL_OK)
 800109e:	f107 0208 	add.w	r2, r7, #8
 80010a2:	2304      	movs	r3, #4
 80010a4:	214e      	movs	r1, #78	@ 0x4e
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <lcd_send_data+0x80>)
 80010a8:	f004 fea0 	bl	8005dec <HAL_I2C_Master_Transmit_DMA>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ed      	bne.n	800108e <lcd_send_data+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80010b2:	bf00      	nop
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <lcd_send_data+0x80>)
 80010b6:	f005 f880 	bl	80061ba <HAL_I2C_GetState>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b20      	cmp	r3, #32
 80010be:	d1f9      	bne.n	80010b4 <lcd_send_data+0x68>
		//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		"aTxBuffer" buffer */
	}
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000824 	.word	0x20000824

080010d0 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    switch (row)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <lcd_put_cur+0x18>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <lcd_put_cur+0x22>
 80010e6:	e009      	b.n	80010fc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ee:	603b      	str	r3, [r7, #0]
            break;
 80010f0:	e004      	b.n	80010fc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010f8:	603b      	str	r3, [r7, #0]
            break;
 80010fa:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff61 	bl	8000fc8 <lcd_send_cmd>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <lcd_init>:


void lcd_init (void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001112:	2032      	movs	r0, #50	@ 0x32
 8001114:	f001 fe18 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001118:	2030      	movs	r0, #48	@ 0x30
 800111a:	f7ff ff55 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800111e:	2005      	movs	r0, #5
 8001120:	f001 fe12 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001124:	2030      	movs	r0, #48	@ 0x30
 8001126:	f7ff ff4f 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800112a:	2001      	movs	r0, #1
 800112c:	f001 fe0c 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001130:	2030      	movs	r0, #48	@ 0x30
 8001132:	f7ff ff49 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 fe06 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800113c:	2020      	movs	r0, #32
 800113e:	f7ff ff43 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f001 fe00 	bl	8002d48 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001148:	2028      	movs	r0, #40	@ 0x28
 800114a:	f7ff ff3d 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f001 fdfa 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001154:	2008      	movs	r0, #8
 8001156:	f7ff ff37 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fdf4 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff ff31 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f001 fdee 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800116c:	2006      	movs	r0, #6
 800116e:	f7ff ff2b 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f001 fde8 	bl	8002d48 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001178:	200c      	movs	r0, #12
 800117a:	f7ff ff25 	bl	8000fc8 <lcd_send_cmd>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}

08001182 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800118a:	e006      	b.n	800119a <lcd_send_string+0x18>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff59 	bl	800104c <lcd_send_data>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f4      	bne.n	800118c <lcd_send_string+0xa>
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    return;
 80011b4:	bf00      	nop
}
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_UART_RxHalfCpltCallback>:
int HTC = 0, FTC = 0;

char inp;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	HTC=1;  // half transfer complete callback was called
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_UART_RxHalfCpltCallback+0x20>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
	FTC=0;
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_UART_RxHalfCpltCallback+0x24>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000c04 	.word	0x20000c04
 80011e4:	20000c08 	.word	0x20000c08

080011e8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	  HTC=0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_UART_RxCpltCallback+0x20>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	  FTC=1;
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_UART_RxCpltCallback+0x24>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000c04 	.word	0x20000c04
 800120c:	20000c08 	.word	0x20000c08

08001210 <uart_dma>:

void uart_dma(void);
void uart_dma(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	4907      	ldr	r1, [pc, #28]	@ (8001234 <uart_dma+0x24>)
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <uart_dma+0x28>)
 800121a:	f00a fe67 	bl	800beec <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit_DMA(&huart2, RxData, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	4904      	ldr	r1, [pc, #16]	@ (8001234 <uart_dma+0x24>)
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <uart_dma+0x28>)
 8001224:	f009 fde0 	bl	800ade8 <HAL_UART_Transmit_DMA>
	  		  FTC = 0;
	  		  HAL_UART_DMAStop(&huart2);
	  		  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
	  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, 1);
	  	  }*/
	    inp = RxData[0];
 8001228:	4b02      	ldr	r3, [pc, #8]	@ (8001234 <uart_dma+0x24>)
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <uart_dma+0x2c>)
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000c00 	.word	0x20000c00
 8001238:	20000a7c 	.word	0x20000a7c
 800123c:	20000c0c 	.word	0x20000c0c

08001240 <pulseWavg>:
float pulseW_avg = 0;
uint8_t i = 0 ;float sum = 0;
float pulseW_base = 0;
float realDelay = 0;
void pulseWavg (float pulse_in)
{
 8001240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse_in >= 0.000008 && pulse_in <=0.000180)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f9a3 	bl	8000598 <__aeabi_f2d>
 8001252:	a362      	add	r3, pc, #392	@ (adr r3, 80013dc <pulseWavg+0x19c>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff fc7c 	bl	8000b54 <__aeabi_dcmpge>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <pulseWavg+0x24>
			i = 0;
			sum = 0;
		}*/

	}
}
 8001262:	e09d      	b.n	80013a0 <pulseWavg+0x160>
	if (pulse_in >= 0.000008 && pulse_in <=0.000180)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff f997 	bl	8000598 <__aeabi_f2d>
 800126a:	a35e      	add	r3, pc, #376	@ (adr r3, 80013e4 <pulseWavg+0x1a4>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff fc66 	bl	8000b40 <__aeabi_dcmple>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <pulseWavg+0x3c>
}
 800127a:	e091      	b.n	80013a0 <pulseWavg+0x160>
		for (i = 0; i < 10; i++)
 800127c:	4b4e      	ldr	r3, [pc, #312]	@ (80013b8 <pulseWavg+0x178>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e02b      	b.n	80012dc <pulseWavg+0x9c>
			pulseW_arr[i] =roundf( pulse_in*10000000)/10000000;
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80013bc <pulseWavg+0x17c>
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f013 f924 	bl	80144e0 <roundf>
 8001298:	eeb0 7a40 	vmov.f32	s14, s0
 800129c:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <pulseWavg+0x178>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80013bc <pulseWavg+0x17c>
 80012a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a8:	4a45      	ldr	r2, [pc, #276]	@ (80013c0 <pulseWavg+0x180>)
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	edc3 7a00 	vstr	s15, [r3]
			sum += pulseW_arr[i];
 80012b2:	4b41      	ldr	r3, [pc, #260]	@ (80013b8 <pulseWavg+0x178>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4a42      	ldr	r2, [pc, #264]	@ (80013c0 <pulseWavg+0x180>)
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	ed93 7a00 	vldr	s14, [r3]
 80012c0:	4b40      	ldr	r3, [pc, #256]	@ (80013c4 <pulseWavg+0x184>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	4b3e      	ldr	r3, [pc, #248]	@ (80013c4 <pulseWavg+0x184>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < 10; i++)
 80012d0:	4b39      	ldr	r3, [pc, #228]	@ (80013b8 <pulseWavg+0x178>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <pulseWavg+0x178>)
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	4b36      	ldr	r3, [pc, #216]	@ (80013b8 <pulseWavg+0x178>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d9cf      	bls.n	8001284 <pulseWavg+0x44>
		pulseW_avg = sum/10.f;
 80012e4:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <pulseWavg+0x184>)
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f2:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <pulseWavg+0x188>)
 80012f4:	edc3 7a00 	vstr	s15, [r3]
		windspeed = roundf((fabs(DIST/(pulseW_avg*cal_val) - DIST/(pulseW_base*cal_val)))*10)/10;
 80012f8:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <pulseWavg+0x188>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	4b33      	ldr	r3, [pc, #204]	@ (80013cc <pulseWavg+0x18c>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	a126      	add	r1, pc, #152	@ (adr r1, 80013b0 <pulseWavg+0x170>)
 8001316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800131a:	f7ff fabf 	bl	800089c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4690      	mov	r8, r2
 8001324:	4699      	mov	r9, r3
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <pulseWavg+0x190>)
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <pulseWavg+0x18c>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	ee17 0a90 	vmov	r0, s15
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	a11b      	add	r1, pc, #108	@ (adr r1, 80013b0 <pulseWavg+0x170>)
 8001344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001348:	f7ff faa8 	bl	800089c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4640      	mov	r0, r8
 8001352:	4649      	mov	r1, r9
 8001354:	f7fe ffc0 	bl	80002d8 <__aeabi_dsub>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4614      	mov	r4, r2
 800135e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <pulseWavg+0x194>)
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff f96c 	bl	8000648 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fc5e 	bl	8000c38 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	ee00 3a10 	vmov	s0, r3
 8001382:	f013 f8ad 	bl	80144e0 <roundf>
 8001386:	eeb0 7a40 	vmov.f32	s14, s0
 800138a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800138e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <pulseWavg+0x198>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
		sum = 0;
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <pulseWavg+0x184>)
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	47ae147b 	.word	0x47ae147b
 80013b4:	3f947ae1 	.word	0x3f947ae1
 80013b8:	20000c3c 	.word	0x20000c3c
 80013bc:	4b189680 	.word	0x4b189680
 80013c0:	20000c10 	.word	0x20000c10
 80013c4:	20000c40 	.word	0x20000c40
 80013c8:	20000c38 	.word	0x20000c38
 80013cc:	20000bf4 	.word	0x20000bf4
 80013d0:	20000c44 	.word	0x20000c44
 80013d4:	40240000 	.word	0x40240000
 80013d8:	20000bfc 	.word	0x20000bfc
 80013dc:	a0b5ed8d 	.word	0xa0b5ed8d
 80013e0:	3ee0c6f7 	.word	0x3ee0c6f7
 80013e4:	39ffd60f 	.word	0x39ffd60f
 80013e8:	3f2797cc 	.word	0x3f2797cc

080013ec <HAL_TIM_IC_CaptureCallback>:
}

float pll_pulsePeriod;
//Tim1 input capture callback function for calculating the pulseW
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	/*The way it works, is that rising edge of PWM signal on TIM1_CH1 pin captures PWM period in CC1 and resets timer to 0. The falling edge of the 	same signal captures pulse length in CC2. The DMA then transfers captured values into two memory locations. Since DMA is configured in circular 	mode next capture will override previous values in the same locations.*/
	pll_pulsePeriod = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  //TIM1_CH1 pin captures PWM period in CC1 and resets timer to 0.
 80013f4:	2100      	movs	r1, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f008 fc50 	bl	8009c9c <HAL_TIM_ReadCapturedValue>
 80013fc:	ee07 0a90 	vmov	s15, r0
 8001400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001406:	edc3 7a00 	vstr	s15, [r3]
	deltaT	= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //The falling edge of the same signal captures pulse length in CC2
 800140a:	2104      	movs	r1, #4
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f008 fc45 	bl	8009c9c <HAL_TIM_ReadCapturedValue>
 8001412:	ee07 0a90 	vmov	s15, r0
 8001416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_TIM_IC_CaptureCallback+0x60>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	pulseW = deltaT * (float)(timeFactor/1000000000.f);
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001454 <HAL_TIM_IC_CaptureCallback+0x68>
 800142a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800143a:	edc3 7a00 	vstr	s15, [r3]

	}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000c48 	.word	0x20000c48
 800144c:	20000bec 	.word	0x20000bec
 8001450:	20000000 	.word	0x20000000
 8001454:	4e6e6b28 	.word	0x4e6e6b28
 8001458:	20000bf0 	.word	0x20000bf0

0800145c <adc_dma>:

//adc in dma mode -get adc value for temperature

uint32_t adc_val[1];
void adc_dma(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	// calibrate ADC for better accuracy and start it w/ interrupt
	 if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001460:	217f      	movs	r1, #127	@ 0x7f
 8001462:	4815      	ldr	r0, [pc, #84]	@ (80014b8 <adc_dma+0x5c>)
 8001464:	f003 f924 	bl	80046b0 <HAL_ADCEx_Calibration_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <adc_dma+0x16>
	 {
		 Error_Handler();
 800146e:	f000 fea1 	bl	80021b4 <Error_Handler>
	 /*if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
	 {
	 	 Error_Handler();
	}*/
	 // start pwm generation
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4811      	ldr	r0, [pc, #68]	@ (80014bc <adc_dma+0x60>)
 8001476:	f007 fc51 	bl	8008d1c <HAL_TIM_PWM_Start>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <adc_dma+0x28>
	{
		Error_Handler();
 8001480:	f000 fe98 	bl	80021b4 <Error_Handler>
	 }
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1) != HAL_OK)
 8001484:	2201      	movs	r2, #1
 8001486:	490e      	ldr	r1, [pc, #56]	@ (80014c0 <adc_dma+0x64>)
 8001488:	480b      	ldr	r0, [pc, #44]	@ (80014b8 <adc_dma+0x5c>)
 800148a:	f002 f869 	bl	8003560 <HAL_ADC_Start_DMA>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <adc_dma+0x3c>
	 {
		Error_Handler();
 8001494:	f000 fe8e 	bl	80021b4 <Error_Handler>
	}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001498:	217f      	movs	r1, #127	@ 0x7f
 800149a:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <adc_dma+0x5c>)
 800149c:	f003 f908 	bl	80046b0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 80014a0:	2201      	movs	r2, #1
 80014a2:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <adc_dma+0x64>)
 80014a4:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <adc_dma+0x5c>)
 80014a6:	f002 f85b 	bl	8003560 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014aa:	2100      	movs	r1, #0
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <adc_dma+0x60>)
 80014ae:	f007 fc35 	bl	8008d1c <HAL_TIM_PWM_Start>
	return;
 80014b2:	bf00      	nop
}
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200006e4 	.word	0x200006e4
 80014bc:	20000970 	.word	0x20000970
 80014c0:	20000c4c 	.word	0x20000c4c

080014c4 <getTemp>:
#define V_REF 3300 // mV
#define OFFSET 0.5
float adc_val_f;

float *getTemp(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	float reading_mV = 0;
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//adc_val_f = adc_val[0];
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
	//temp = (adc_val_f/4095) *(125 - -40);
	reading_mV = adc_val[0] *  V_REF  / 4095 ;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <getTemp+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80014d8:	fb03 f202 	mul.w	r2, r3, r2
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <getTemp+0x68>)
 80014de:	fba3 1302 	umull	r1, r3, r3, r2
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	0852      	lsrs	r2, r2, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	0adb      	lsrs	r3, r3, #11
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f2:	edc7 7a01 	vstr	s15, [r7, #4]
	temp = roundf((reading_mV - 500) / 10); // 10mV/degree_C
 80014f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001530 <getTemp+0x6c>
 80014fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001502:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800150a:	eeb0 0a47 	vmov.f32	s0, s14
 800150e:	f012 ffe7 	bl	80144e0 <roundf>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <getTemp+0x70>)
 8001518:	edc3 7a00 	vstr	s15, [r3]
	return &temp;
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <getTemp+0x70>)
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000c4c 	.word	0x20000c4c
 800152c:	00100101 	.word	0x00100101
 8001530:	43fa0000 	.word	0x43fa0000
 8001534:	20000bf8 	.word	0x20000bf8

08001538 <startSineW>:
#define PI 3.1415926
float dac_val = 1.2;
uint32_t var;

void startSineW(bool start)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	if (!start)
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <startSineW+0x20>
	{
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	482b      	ldr	r0, [pc, #172]	@ (8001600 <startSineW+0xc8>)
 8001552:	f003 fbbb 	bl	8004ccc <HAL_DAC_Stop_DMA>
		 for (int i = 0; i < 100; i++)
		 {
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
		 }
	}
}
 8001556:	e048      	b.n	80015ea <startSineW+0xb2>
		 HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2364      	movs	r3, #100	@ 0x64
 800155e:	4a29      	ldr	r2, [pc, #164]	@ (8001604 <startSineW+0xcc>)
 8001560:	2100      	movs	r1, #0
 8001562:	4827      	ldr	r0, [pc, #156]	@ (8001600 <startSineW+0xc8>)
 8001564:	f003 fade 	bl	8004b24 <HAL_DAC_Start_DMA>
		 for (int i = 0; i < 100; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e03a      	b.n	80015e4 <startSineW+0xac>
			 sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fffe 	bl	8000574 <__aeabi_i2d>
 8001578:	a31f      	add	r3, pc, #124	@ (adr r3, 80015f8 <startSineW+0xc0>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f863 	bl	8000648 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <startSineW+0xd0>)
 8001590:	f7ff f984 	bl	800089c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	ec43 2b17 	vmov	d7, r2, r3
 800159c:	eeb0 0a47 	vmov.f32	s0, s14
 80015a0:	eef0 0a67 	vmov.f32	s1, s15
 80015a4:	f012 ff48 	bl	8014438 <sin>
 80015a8:	ec51 0b10 	vmov	r0, r1, d0
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <startSineW+0xd4>)
 80015b2:	f7fe fe93 	bl	80002dc <__adddf3>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <startSineW+0xd8>)
 80015c4:	f7ff f840 	bl	8000648 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb12 	bl	8000bf8 <__aeabi_d2uiz>
 80015d4:	4602      	mov	r2, r0
 80015d6:	490b      	ldr	r1, [pc, #44]	@ (8001604 <startSineW+0xcc>)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 for (int i = 0; i < 100; i++)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b63      	cmp	r3, #99	@ 0x63
 80015e8:	ddc1      	ble.n	800156e <startSineW+0x36>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	4d12d84a 	.word	0x4d12d84a
 80015fc:	400921fb 	.word	0x400921fb
 8001600:	200007b0 	.word	0x200007b0
 8001604:	20000c50 	.word	0x20000c50
 8001608:	40590000 	.word	0x40590000
 800160c:	3ff00000 	.word	0x3ff00000
 8001610:	40a00000 	.word	0x40a00000

08001614 <lcd_disp>:

// lcd display*****************************************************/  something is wrong with this lcd code, need to fix the buffering from flooding while not affecting the pulse width measurement
//char *fltChar = malloc (sizeof (char) * 8);

void lcd_disp(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	char * fltChar = malloc (sizeof (char) * 8);
 800161a:	2008      	movs	r0, #8
 800161c:	f00e f8a6 	bl	800f76c <malloc>
 8001620:	4603      	mov	r3, r0
 8001622:	607b      	str	r3, [r7, #4]
	//char *fltChar2 = malloc (sizeof(char) * 7);
	//lcd_send_cmd (0x80);
	//char fltChar [7];
	sprintf(fltChar, "%.4f", windspeed);
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <lcd_disp+0x4c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ffb5 	bl	8000598 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	490c      	ldr	r1, [pc, #48]	@ (8001664 <lcd_disp+0x50>)
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f00e fcb1 	bl	800ff9c <sprintf>
	lcd_put_cur(0,11);
 800163a:	210b      	movs	r1, #11
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fd47 	bl	80010d0 <lcd_put_cur>

	//lcd_send_string("Windspeed=");
	//lcd_send_data((windspeed/10) +48);
	lcd_send_string(fltChar);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fd9d 	bl	8001182 <lcd_send_string>
	lcd_send_string(" ");
 8001648:	4807      	ldr	r0, [pc, #28]	@ (8001668 <lcd_disp+0x54>)
 800164a:	f7ff fd9a 	bl	8001182 <lcd_send_string>
	lcd_put_cur(1,8);
	lcd_send_string (fltChar2);
	lcd_send_string(" ");*/
	//lcd_put_cur(1,0);
	//lcd_send_string("m/s");
	osDelay(500);
 800164e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001652:	f00a fe0e 	bl	800c272 <osDelay>
	return;
 8001656:	bf00      	nop
}
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000bfc 	.word	0x20000bfc
 8001664:	0801552c 	.word	0x0801552c
 8001668:	08015534 	.word	0x08015534

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	setvbuf(stdin, NULL, _IONBF, 0);
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <main+0xd0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6858      	ldr	r0, [r3, #4]
 8001676:	2300      	movs	r3, #0
 8001678:	2202      	movs	r2, #2
 800167a:	2100      	movs	r1, #0
 800167c:	f00e fbd4 	bl	800fe28 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001680:	f001 fb2b 	bl	8002cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 f880 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001688:	f000 fbfa 	bl	8001e80 <MX_GPIO_Init>
  MX_DMA_Init();
 800168c:	f000 fb92 	bl	8001db4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001690:	f000 fb42 	bl	8001d18 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001694:	f000 faca 	bl	8001c2c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001698:	f000 f9b6 	bl	8001a08 <MX_TIM1_Init>
  MX_ADC1_Init();
 800169c:	f000 f8c0 	bl	8001820 <MX_ADC1_Init>
  MX_DAC1_Init();
 80016a0:	f000 f938 	bl	8001914 <MX_DAC1_Init>
  MX_TIM2_Init();
 80016a4:	f000 fa50 	bl	8001b48 <MX_TIM2_Init>
  MX_I2C1_Init();
 80016a8:	f000 f96e 	bl	8001988 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);

	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, riseData, numval); //this starts the DMA process for TIM1 input capture - CC1 is period
 80016ac:	2301      	movs	r3, #1
 80016ae:	4a24      	ldr	r2, [pc, #144]	@ (8001740 <main+0xd4>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4824      	ldr	r0, [pc, #144]	@ (8001744 <main+0xd8>)
 80016b4:	f007 fd8c 	bl	80091d0 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, fallData, numval); //this starts the DMA process for TIM1 input capture - CC2 is pulse duration
 80016b8:	2301      	movs	r3, #1
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <main+0xdc>)
 80016bc:	2104      	movs	r1, #4
 80016be:	4821      	ldr	r0, [pc, #132]	@ (8001744 <main+0xd8>)
 80016c0:	f007 fd86 	bl	80091d0 <HAL_TIM_IC_Start_DMA>
  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  //start pwm timer
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //start TIM4 pwm ch1 - macro expan 0x00000000U

  lcd_init(); 														//initialize the lcd
 80016c4:	f7ff fd23 	bl	800110e <lcd_init>
  //start timer 2 for the sinewave
  HAL_TIM_Base_Start(&htim2);
 80016c8:	4820      	ldr	r0, [pc, #128]	@ (800174c <main+0xe0>)
 80016ca:	f007 f9f9 	bl	8008ac0 <HAL_TIM_Base_Start>

  //start adc dma
  adc_dma();
 80016ce:	f7ff fec5 	bl	800145c <adc_dma>
  //start uarat dma
  //HAL_UART_Receive_DMA(&huart2, RxData, 1);
  uart_dma();
 80016d2:	f7ff fd9d 	bl	8001210 <uart_dma>

  //preprint something on the lcd
  lcd_put_cur(0,0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fcf9 	bl	80010d0 <lcd_put_cur>
  lcd_send_string("W_vel[m/s]=");
 80016de:	481c      	ldr	r0, [pc, #112]	@ (8001750 <main+0xe4>)
 80016e0:	f7ff fd4f 	bl	8001182 <lcd_send_string>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016e4:	f00a fce8 	bl	800c0b8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80016e8:	481a      	ldr	r0, [pc, #104]	@ (8001754 <main+0xe8>)
 80016ea:	f00a fddd 	bl	800c2a8 <osMutexNew>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <main+0xec>)
 80016f2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSem */
  BinSemHandle = osSemaphoreNew(1, 1, &BinSem_attributes);
 80016f4:	4a19      	ldr	r2, [pc, #100]	@ (800175c <main+0xf0>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	2001      	movs	r0, #1
 80016fa:	f00a fee3 	bl	800c4c4 <osSemaphoreNew>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <main+0xf4>)
 8001702:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001704:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <main+0xf8>)
 8001706:	2100      	movs	r1, #0
 8001708:	4817      	ldr	r0, [pc, #92]	@ (8001768 <main+0xfc>)
 800170a:	f00a fd1f 	bl	800c14c <osThreadNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4a16      	ldr	r2, [pc, #88]	@ (800176c <main+0x100>)
 8001712:	6013      	str	r3, [r2, #0]

  /* creation of getTemp */
  getTempHandle = osThreadNew(StartgetTemp, NULL, &getTemp_attributes);
 8001714:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <main+0x104>)
 8001716:	2100      	movs	r1, #0
 8001718:	4816      	ldr	r0, [pc, #88]	@ (8001774 <main+0x108>)
 800171a:	f00a fd17 	bl	800c14c <osThreadNew>
 800171e:	4603      	mov	r3, r0
 8001720:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <main+0x10c>)
 8001722:	6013      	str	r3, [r2, #0]

  /* creation of sendLCD */
  sendLCDHandle = osThreadNew(StartsendLCD, NULL, &sendLCD_attributes);
 8001724:	4a15      	ldr	r2, [pc, #84]	@ (800177c <main+0x110>)
 8001726:	2100      	movs	r1, #0
 8001728:	4815      	ldr	r0, [pc, #84]	@ (8001780 <main+0x114>)
 800172a:	f00a fd0f 	bl	800c14c <osThreadNew>
 800172e:	4603      	mov	r3, r0
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <main+0x118>)
 8001732:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001734:	f00a fce4 	bl	800c100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <main+0xcc>
 800173c:	20000434 	.word	0x20000434
 8001740:	20000be4 	.word	0x20000be4
 8001744:	200008d8 	.word	0x200008d8
 8001748:	20000be8 	.word	0x20000be8
 800174c:	20000924 	.word	0x20000924
 8001750:	08015538 	.word	0x08015538
 8001754:	080155ec 	.word	0x080155ec
 8001758:	20000bdc 	.word	0x20000bdc
 800175c:	080155fc 	.word	0x080155fc
 8001760:	20000be0 	.word	0x20000be0
 8001764:	08015580 	.word	0x08015580
 8001768:	08001f41 	.word	0x08001f41
 800176c:	20000bd0 	.word	0x20000bd0
 8001770:	080155a4 	.word	0x080155a4
 8001774:	08002129 	.word	0x08002129
 8001778:	20000bd4 	.word	0x20000bd4
 800177c:	080155c8 	.word	0x080155c8
 8001780:	0800215d 	.word	0x0800215d
 8001784:	20000bd8 	.word	0x20000bd8

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	2238      	movs	r2, #56	@ 0x38
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f00e fc63 	bl	8010062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f006 f92c 	bl	8007a08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ba:	2340      	movs	r3, #64	@ 0x40
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017be:	2302      	movs	r3, #2
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c2:	2302      	movs	r3, #2
 80017c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017c6:	2304      	movs	r3, #4
 80017c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017ca:	2355      	movs	r3, #85	@ 0x55
 80017cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 f9c6 	bl	8007b70 <HAL_RCC_OscConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017ea:	f000 fce3 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ee:	230f      	movs	r3, #15
 80017f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f2:	2303      	movs	r3, #3
 80017f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2104      	movs	r1, #4
 8001806:	4618      	mov	r0, r3
 8001808:	f006 fcc4 	bl	8008194 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001812:	f000 fccf 	bl	80021b4 <Error_Handler>
  }
}
 8001816:	bf00      	nop
 8001818:	3750      	adds	r7, #80	@ 0x50
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2220      	movs	r2, #32
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f00e fc12 	bl	8010062 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800183e:	4b33      	ldr	r3, [pc, #204]	@ (800190c <MX_ADC1_Init+0xec>)
 8001840:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001844:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <MX_ADC1_Init+0xec>)
 8001848:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800184c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800184e:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <MX_ADC1_Init+0xec>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <MX_ADC1_Init+0xec>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800185a:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <MX_ADC1_Init+0xec>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001860:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <MX_ADC1_Init+0xec>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001866:	4b29      	ldr	r3, [pc, #164]	@ (800190c <MX_ADC1_Init+0xec>)
 8001868:	2204      	movs	r2, #4
 800186a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_ADC1_Init+0xec>)
 800186e:	2200      	movs	r2, #0
 8001870:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_ADC1_Init+0xec>)
 8001874:	2200      	movs	r2, #0
 8001876:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_ADC1_Init+0xec>)
 800187a:	2201      	movs	r2, #1
 800187c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <MX_ADC1_Init+0xec>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_ADC1_Init+0xec>)
 8001888:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800188c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800188e:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_ADC1_Init+0xec>)
 8001890:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001894:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001896:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <MX_ADC1_Init+0xec>)
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <MX_ADC1_Init+0xec>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_ADC1_Init+0xec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	4817      	ldr	r0, [pc, #92]	@ (800190c <MX_ADC1_Init+0xec>)
 80018ae:	f001 fcd3 	bl	8003258 <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80018b8:	f000 fc7c 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4811      	ldr	r0, [pc, #68]	@ (800190c <MX_ADC1_Init+0xec>)
 80018c8:	f002 ff86 	bl	80047d8 <HAL_ADCEx_MultiModeConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80018d2:	f000 fc6f 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_ADC1_Init+0xf0>)
 80018d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018da:	2306      	movs	r3, #6
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018e2:	237f      	movs	r3, #127	@ 0x7f
 80018e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018e6:	2304      	movs	r3, #4
 80018e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <MX_ADC1_Init+0xec>)
 80018f4:	f002 f920 	bl	8003b38 <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80018fe:	f000 fc59 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	@ 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200006e4 	.word	0x200006e4
 8001910:	04300002 	.word	0x04300002

08001914 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800191a:	463b      	mov	r3, r7
 800191c:	2230      	movs	r2, #48	@ 0x30
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f00e fb9e 	bl	8010062 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_DAC1_Init+0x6c>)
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <MX_DAC1_Init+0x70>)
 800192a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800192c:	4814      	ldr	r0, [pc, #80]	@ (8001980 <MX_DAC1_Init+0x6c>)
 800192e:	f003 f8d7 	bl	8004ae0 <HAL_DAC_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001938:	f000 fc3c 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800193c:	2302      	movs	r3, #2
 800193e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800194c:	2312      	movs	r3, #18
 800194e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001958:	2301      	movs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	@ (8001980 <MX_DAC1_Init+0x6c>)
 8001968:	f003 fa7c 	bl	8004e64 <HAL_DAC_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001972:	f000 fc1f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	@ 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200007b0 	.word	0x200007b0
 8001984:	50000800 	.word	0x50000800

08001988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <MX_I2C1_Init+0x74>)
 800198e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <MX_I2C1_Init+0x78>)
 8001990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <MX_I2C1_Init+0x74>)
 8001994:	4a1b      	ldr	r2, [pc, #108]	@ (8001a04 <MX_I2C1_Init+0x7c>)
 8001996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001998:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <MX_I2C1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019c2:	480e      	ldr	r0, [pc, #56]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019c4:	f004 f976 	bl	8005cb4 <HAL_I2C_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ce:	f000 fbf1 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019d2:	2100      	movs	r1, #0
 80019d4:	4809      	ldr	r0, [pc, #36]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019d6:	f005 ff7f 	bl	80078d8 <HAL_I2CEx_ConfigAnalogFilter>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019e0:	f000 fbe8 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_I2C1_Init+0x74>)
 80019e8:	f005 ffc1 	bl	800796e <HAL_I2CEx_ConfigDigitalFilter>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019f2:	f000 fbdf 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000824 	.word	0x20000824
 8001a00:	40005400 	.word	0x40005400
 8001a04:	40b285c2 	.word	0x40b285c2

08001a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b090      	sub	sp, #64	@ 0x40
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */
 // timer for PLL pulse width input capture. If we use prescaler 0, fclk = 170Mhz, then 5.882ns/tick
  // presc = 4-1, then fclk = 42.5mhz, then 2.3529E-8s/tick // presc = 5-1, fclk = 34Mhz, then 29.41ns/
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a44:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <MX_TIM1_Init+0x13c>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a4c:	2209      	movs	r2, #9
 8001a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a56:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a64:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a6a:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a70:	4833      	ldr	r0, [pc, #204]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a72:	f006 ffcd 	bl	8008a10 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001a7c:	f000 fb9a 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	482c      	ldr	r0, [pc, #176]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a8e:	f007 ffc9 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001a98:	f000 fb8c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a9c:	4828      	ldr	r0, [pc, #160]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001a9e:	f007 fb35 	bl	800910c <HAL_TIM_IC_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001aa8:	f000 fb84 	bl	80021b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001aac:	2304      	movs	r3, #4
 8001aae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ab0:	2350      	movs	r3, #80	@ 0x50
 8001ab2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	481f      	ldr	r0, [pc, #124]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001ac4:	f008 f8a8 	bl	8009c18 <HAL_TIM_SlaveConfigSynchro>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ace:	f000 fb71 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4816      	ldr	r0, [pc, #88]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001ae6:	f009 f867 	bl	800abb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001af0:	f000 fb60 	bl	80021b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001af8:	2301      	movs	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001b0c:	f007 feee 	bl	80098ec <HAL_TIM_IC_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001b16:	f000 fb4d 	bl	80021b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	2204      	movs	r2, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_TIM1_Init+0x138>)
 8001b2a:	f007 fedf 	bl	80098ec <HAL_TIM_IC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001b34:	f000 fb3e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3740      	adds	r7, #64	@ 0x40
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200008d8 	.word	0x200008d8
 8001b44:	40012c00 	.word	0x40012c00

08001b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08e      	sub	sp, #56	@ 0x38
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//this is used to generate a sinewave, f_sys_clk/(prescalar * 100)/4 = 25khz
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001b7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001b84:	2210      	movs	r2, #16
 8001b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b27      	ldr	r3, [pc, #156]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001b90:	2203      	movs	r2, #3
 8001b92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba0:	4821      	ldr	r0, [pc, #132]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001ba2:	f006 ff35 	bl	8008a10 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001bac:	f000 fb02 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481a      	ldr	r0, [pc, #104]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001bbe:	f007 ff31 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bc8:	f000 faf4 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001bcc:	4816      	ldr	r0, [pc, #88]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001bce:	f007 f843 	bl	8008c58 <HAL_TIM_OC_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	480f      	ldr	r0, [pc, #60]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001bec:	f008 ffe4 	bl	800abb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bf6:	f000 fadd 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_TIM2_Init+0xe0>)
 8001c12:	f007 fdf1 	bl	80097f8 <HAL_TIM_OC_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c1c:	f000 faca 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3738      	adds	r7, #56	@ 0x38
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000924 	.word	0x20000924

08001c2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	@ 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]
  //arr/2-1 = 6800/2-1
  //timer 4 is unused right now since we are using the sinewave from timer 2
  // timer 4 is used for adc trigger event

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c60:	4a2c      	ldr	r2, [pc, #176]	@ (8001d14 <MX_TIM4_Init+0xe8>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6799;
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c72:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8001c76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c84:	4822      	ldr	r0, [pc, #136]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001c86:	f006 fec3 	bl	8008a10 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c90:	f000 fa90 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481b      	ldr	r0, [pc, #108]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001ca2:	f007 febf 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001cac:	f000 fa82 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001cb0:	4817      	ldr	r0, [pc, #92]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001cb2:	f006 ffd1 	bl	8008c58 <HAL_TIM_OC_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cbc:	f000 fa7a 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4810      	ldr	r0, [pc, #64]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001cd0:	f008 ff72 	bl	800abb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cda:	f000 fa6b 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3399;
 8001ce2:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <MX_TIM4_Init+0xe4>)
 8001cf8:	f007 fd7e 	bl	80097f8 <HAL_TIM_OC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001d02:	f000 fa57 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3738      	adds	r7, #56	@ 0x38
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000970 	.word	0x20000970
 8001d14:	40000800 	.word	0x40000800

08001d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d1e:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <MX_USART2_UART_Init+0x98>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d54:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d62:	4812      	ldr	r0, [pc, #72]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d64:	f008 fff0 	bl	800ad48 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001d6e:	f000 fa21 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d72:	2100      	movs	r1, #0
 8001d74:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d76:	f00a f83d 	bl	800bdf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001d80:	f000 fa18 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d84:	2100      	movs	r1, #0
 8001d86:	4809      	ldr	r0, [pc, #36]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d88:	f00a f872 	bl	800be70 <HAL_UARTEx_SetRxFifoThreshold>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001d92:	f000 fa0f 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_USART2_UART_Init+0x94>)
 8001d98:	f009 fff3 	bl	800bd82 <HAL_UARTEx_DisableFifoMode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001da2:	f000 fa07 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000a7c 	.word	0x20000a7c
 8001db0:	40004400 	.word	0x40004400

08001db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001dba:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd6:	4a29      	ldr	r2, [pc, #164]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dde:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dea:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dee:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MX_DMA_Init+0xc8>)
 8001df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2105      	movs	r1, #5
 8001e06:	200b      	movs	r0, #11
 8001e08:	f002 fe42 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e0c:	200b      	movs	r0, #11
 8001e0e:	f002 fe59 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2105      	movs	r1, #5
 8001e16:	200c      	movs	r0, #12
 8001e18:	f002 fe3a 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e1c:	200c      	movs	r0, #12
 8001e1e:	f002 fe51 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2105      	movs	r1, #5
 8001e26:	200d      	movs	r0, #13
 8001e28:	f002 fe32 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e2c:	200d      	movs	r0, #13
 8001e2e:	f002 fe49 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2105      	movs	r1, #5
 8001e36:	200e      	movs	r0, #14
 8001e38:	f002 fe2a 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e3c:	200e      	movs	r0, #14
 8001e3e:	f002 fe41 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2105      	movs	r1, #5
 8001e46:	200f      	movs	r0, #15
 8001e48:	f002 fe22 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f002 fe39 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2105      	movs	r1, #5
 8001e56:	2038      	movs	r0, #56	@ 0x38
 8001e58:	f002 fe1a 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001e5c:	2038      	movs	r0, #56	@ 0x38
 8001e5e:	f002 fe31 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2105      	movs	r1, #5
 8001e66:	2039      	movs	r0, #57	@ 0x39
 8001e68:	f002 fe12 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001e6c:	2039      	movs	r0, #57	@ 0x39
 8001e6e:	f002 fe29 	bl	8004ac4 <HAL_NVIC_EnableIRQ>

}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <MX_GPIO_Init+0x94>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f14 <MX_GPIO_Init+0x94>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <MX_GPIO_Init+0x94>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_GPIO_Init+0x94>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <MX_GPIO_Init+0x94>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eba:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_GPIO_Init+0x94>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001ecc:	4812      	ldr	r0, [pc, #72]	@ (8001f18 <MX_GPIO_Init+0x98>)
 8001ece:	f003 fed9 	bl	8005c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ed2:	2360      	movs	r3, #96	@ 0x60
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f003 fd4a 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001eec:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	4619      	mov	r1, r3
 8001f04:	4804      	ldr	r0, [pc, #16]	@ (8001f18 <MX_GPIO_Init+0x98>)
 8001f06:	f003 fd3b 	bl	8005980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000400 	.word	0x48000400

08001f1c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//adc dma callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	//adc_val[0] = HAL_ADC_GetValue(&hadc1);
	//adc_val_f = adc_val;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	4904      	ldr	r1, [pc, #16]	@ (8001f38 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <HAL_ADC_ConvCpltCallback+0x20>)
 8001f2a:	f001 fb19 	bl	8003560 <HAL_ADC_Start_DMA>
	return;
 8001f2e:	bf00      	nop
}
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000c4c 	.word	0x20000c4c
 8001f3c:	200006e4 	.word	0x200006e4

08001f40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8001f48:	4b67      	ldr	r3, [pc, #412]	@ (80020e8 <StartDefaultTask+0x1a8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00a fa2f 	bl	800c3b4 <osMutexAcquire>
	  	  //scan for user inpt for the state machine

	  	 //inp = *scanInp();
	  	  //wait again so we don't flood the serial terminal
	  	  //HAL_Delay(100);
	  	  inp = RxData[0];
 8001f56:	4b65      	ldr	r3, [pc, #404]	@ (80020ec <StartDefaultTask+0x1ac>)
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b65      	ldr	r3, [pc, #404]	@ (80020f0 <StartDefaultTask+0x1b0>)
 8001f5c:	701a      	strb	r2, [r3, #0]
	  	  if (inp == 'i')
 8001f5e:	4b64      	ldr	r3, [pc, #400]	@ (80020f0 <StartDefaultTask+0x1b0>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b69      	cmp	r3, #105	@ 0x69
 8001f64:	d103      	bne.n	8001f6e <StartDefaultTask+0x2e>
	  	  {
	  		  State = IDLE;
 8001f66:	4b63      	ldr	r3, [pc, #396]	@ (80020f4 <StartDefaultTask+0x1b4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e00e      	b.n	8001f8c <StartDefaultTask+0x4c>
	  	  }
	  	  else if (inp == 's')
 8001f6e:	4b60      	ldr	r3, [pc, #384]	@ (80020f0 <StartDefaultTask+0x1b0>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b73      	cmp	r3, #115	@ 0x73
 8001f74:	d103      	bne.n	8001f7e <StartDefaultTask+0x3e>
	  	  {
	  		  State = START;
 8001f76:	4b5f      	ldr	r3, [pc, #380]	@ (80020f4 <StartDefaultTask+0x1b4>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e006      	b.n	8001f8c <StartDefaultTask+0x4c>
	  	  }
	  	  else if (inp == 't')
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80020f0 <StartDefaultTask+0x1b0>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b74      	cmp	r3, #116	@ 0x74
 8001f84:	d102      	bne.n	8001f8c <StartDefaultTask+0x4c>
	  	  {
	  		  State = STOP;
 8001f86:	4b5b      	ldr	r3, [pc, #364]	@ (80020f4 <StartDefaultTask+0x1b4>)
 8001f88:	2203      	movs	r2, #3
 8001f8a:	701a      	strb	r2, [r3, #0]
	  	  }else{};

	  	  //State Machine starts here
	  	  switch (State)
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <StartDefaultTask+0x1b4>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	f200 808b 	bhi.w	80020ac <StartDefaultTask+0x16c>
 8001f96:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <StartDefaultTask+0x5c>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fbb 	.word	0x08001fbb
 8001fa4:	0800206f 	.word	0x0800206f
 8001fa8:	0800207f 	.word	0x0800207f
	  		 // uart_buf_len = sprintf(uart_buf, "In IDLE state\r\n");
	  		  //printf("In IDLE State\r\n");
	  		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	  		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); /// disable nShutdown pin for digital amp
	  		  //startSpeaker(0); //turn off speaker
	  		  startSineW(0); //using sinewave instead
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff fac3 	bl	8001538 <startSineW>
	  		  RxData[0] = '\0';
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80020ec <StartDefaultTask+0x1ac>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]

	  		  //osDelay(10);

	  		  break;
 8001fb8:	e07f      	b.n	80020ba <StartDefaultTask+0x17a>
	  	  case START:
	  		  //nShutdownDamp = 1; // start digital amplifier
	  		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	  		  //printf("In START State\r\n"); // print status in terminal
	  		  //startSpeaker(1);
	  		  startSineW(1); //using sinewave instead
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff fabc 	bl	8001538 <startSineW>
	  		  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	  		  /*the following is use to do pulse output and measure the very beginning****
	  		  //HAL_Delay(100);  //wait 20ms
	  		  //startSpeaker(0);
	  		   */
	  		  v_sound = roundf ((331+0.61*temp)*1000)/1000; // only capturing temp once
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80020f8 <StartDefaultTask+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fae7 	bl	8000598 <__aeabi_f2d>
 8001fca:	a341      	add	r3, pc, #260	@ (adr r3, 80020d0 <StartDefaultTask+0x190>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fb3a 	bl	8000648 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	a33e      	add	r3, pc, #248	@ (adr r3, 80020d8 <StartDefaultTask+0x198>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe f97b 	bl	80002dc <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b42      	ldr	r3, [pc, #264]	@ (80020fc <StartDefaultTask+0x1bc>)
 8001ff4:	f7fe fb28 	bl	8000648 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fe1a 	bl	8000c38 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	ee00 3a10 	vmov	s0, r3
 800200a:	f012 fa69 	bl	80144e0 <roundf>
 800200e:	eeb0 7a40 	vmov.f32	s14, s0
 8002012:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002100 <StartDefaultTask+0x1c0>
 8002016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201a:	4b3a      	ldr	r3, [pc, #232]	@ (8002104 <StartDefaultTask+0x1c4>)
 800201c:	edc3 7a00 	vstr	s15, [r3]

	  		  pulseW_base = pulseW_avg;
 8002020:	4b39      	ldr	r3, [pc, #228]	@ (8002108 <StartDefaultTask+0x1c8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a39      	ldr	r2, [pc, #228]	@ (800210c <StartDefaultTask+0x1cc>)
 8002026:	6013      	str	r3, [r2, #0]
	  		  cal_val = DIST/(pulseW_avg*v_sound);  //get the calibration value from the drift and temperature
 8002028:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <StartDefaultTask+0x1c8>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	4b35      	ldr	r3, [pc, #212]	@ (8002104 <StartDefaultTask+0x1c4>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002038:	ee17 0a90 	vmov	r0, s15
 800203c:	f7fe faac 	bl	8000598 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	a126      	add	r1, pc, #152	@ (adr r1, 80020e0 <StartDefaultTask+0x1a0>)
 8002046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800204a:	f7fe fc27 	bl	800089c <__aeabi_ddiv>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fdef 	bl	8000c38 <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4a2c      	ldr	r2, [pc, #176]	@ (8002110 <StartDefaultTask+0x1d0>)
 800205e:	6013      	str	r3, [r2, #0]
	  		 // lcd_init();
	  		  RxData[0] = '\0';
 8002060:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <StartDefaultTask+0x1ac>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	  		  State = CALTIME;
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <StartDefaultTask+0x1b4>)
 8002068:	2202      	movs	r2, #2
 800206a:	701a      	strb	r2, [r3, #0]

	  		  break;
 800206c:	e025      	b.n	80020ba <StartDefaultTask+0x17a>
	  		  //printf("delay is %ld\r\n", deltaT);
	  		  //printf("pulseW is %.8f\r\n", pulseW);
	  		  //printf("windspeed is %f\r\n", windspeed);
	  		  //HAL_Delay(1000);  //wait 100ms
	  		  //State = START;
	  		  pulseWavg(pulseW);
 800206e:	4b29      	ldr	r3, [pc, #164]	@ (8002114 <StartDefaultTask+0x1d4>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	f7ff f8e2 	bl	8001240 <pulseWavg>
	  		  break;
 800207c:	e01d      	b.n	80020ba <StartDefaultTask+0x17a>

	  	  case STOP:
	  		  //nShutdownDamp = 0; //stop digital amplifier
	  		  //startSpeaker(0);
	  		  startSineW(0); //using sinewave instead
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fa5a 	bl	8001538 <startSineW>
	  		  printf("In STOP State\r\n"); // print status in terminal
 8002084:	4824      	ldr	r0, [pc, #144]	@ (8002118 <StartDefaultTask+0x1d8>)
 8002086:	f00d fec7 	bl	800fe18 <puts>
	  		  lcd_init();
 800208a:	f7ff f840 	bl	800110e <lcd_init>
	  		  lcd_put_cur(0,0);
 800208e:	2100      	movs	r1, #0
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff f81d 	bl	80010d0 <lcd_put_cur>
	  		  lcd_send_string("W_vel[m/s]=");
 8002096:	4821      	ldr	r0, [pc, #132]	@ (800211c <StartDefaultTask+0x1dc>)
 8002098:	f7ff f873 	bl	8001182 <lcd_send_string>
	  		  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800209c:	2100      	movs	r1, #0
 800209e:	4820      	ldr	r0, [pc, #128]	@ (8002120 <StartDefaultTask+0x1e0>)
 80020a0:	f006 ff3c 	bl	8008f1c <HAL_TIM_PWM_Stop_DMA>
	  		  HAL_Delay(100);  //wait 100ms
 80020a4:	2064      	movs	r0, #100	@ 0x64
 80020a6:	f000 fe4f 	bl	8002d48 <HAL_Delay>
	  		  break;
 80020aa:	e006      	b.n	80020ba <StartDefaultTask+0x17a>

	  	  default:
	  		  /*uart_buf_len = sprintf(uart_buf, "In Default State\r\n");
	    		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
	  		  printf("In DEFAULT State\r\n"); // print status in terminal
 80020ac:	481d      	ldr	r0, [pc, #116]	@ (8002124 <StartDefaultTask+0x1e4>)
 80020ae:	f00d feb3 	bl	800fe18 <puts>
	  		  HAL_Delay(100);  //wait 100ms
 80020b2:	2064      	movs	r0, #100	@ 0x64
 80020b4:	f000 fe48 	bl	8002d48 <HAL_Delay>
	  		  break;
 80020b8:	bf00      	nop

	  	  }
	  	  //osSemaphoreRelease(BinSemHandle);
	  	osMutexRelease(myMutex01Handle);
 80020ba:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <StartDefaultTask+0x1a8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f00a f9c3 	bl	800c44a <osMutexRelease>
    osDelay(1);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f00a f8d4 	bl	800c272 <osDelay>
	  osMutexAcquire(myMutex01Handle, osWaitForever);
 80020ca:	e73d      	b.n	8001f48 <StartDefaultTask+0x8>
 80020cc:	f3af 8000 	nop.w
 80020d0:	b851eb85 	.word	0xb851eb85
 80020d4:	3fe3851e 	.word	0x3fe3851e
 80020d8:	00000000 	.word	0x00000000
 80020dc:	4074b000 	.word	0x4074b000
 80020e0:	47ae147b 	.word	0x47ae147b
 80020e4:	3f947ae1 	.word	0x3f947ae1
 80020e8:	20000bdc 	.word	0x20000bdc
 80020ec:	20000c00 	.word	0x20000c00
 80020f0:	20000c0c 	.word	0x20000c0c
 80020f4:	20000de0 	.word	0x20000de0
 80020f8:	20000bf8 	.word	0x20000bf8
 80020fc:	408f4000 	.word	0x408f4000
 8002100:	447a0000 	.word	0x447a0000
 8002104:	20000004 	.word	0x20000004
 8002108:	20000c38 	.word	0x20000c38
 800210c:	20000c44 	.word	0x20000c44
 8002110:	20000bf4 	.word	0x20000bf4
 8002114:	20000bf0 	.word	0x20000bf0
 8002118:	08015544 	.word	0x08015544
 800211c:	08015538 	.word	0x08015538
 8002120:	200008d8 	.word	0x200008d8
 8002124:	08015554 	.word	0x08015554

08002128 <StartgetTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartgetTemp */
void StartgetTemp(void *argument)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartgetTemp */
  /* Infinite loop */
	for(;;)
	{
		osMutexAcquire(myMutex01Handle, osWaitForever);
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <StartgetTemp+0x30>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	4618      	mov	r0, r3
 800213a:	f00a f93b 	bl	800c3b4 <osMutexAcquire>
		//osSemaphoreWait(BinSemHandle, osWaitForever); // it is osSemaphoreAcquire instead of osSemaphoreWait
		getTemp();
 800213e:	f7ff f9c1 	bl	80014c4 <getTemp>
		// osSemaphoreRelease(BinSemHandle);
		osMutexRelease(myMutex01Handle);
 8002142:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <StartgetTemp+0x30>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f00a f97f 	bl	800c44a <osMutexRelease>
		osDelay(10);
 800214c:	200a      	movs	r0, #10
 800214e:	f00a f890 	bl	800c272 <osDelay>
		osMutexAcquire(myMutex01Handle, osWaitForever);
 8002152:	bf00      	nop
 8002154:	e7ec      	b.n	8002130 <StartgetTemp+0x8>
 8002156:	bf00      	nop
 8002158:	20000bdc 	.word	0x20000bdc

0800215c <StartsendLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartsendLCD */
void StartsendLCD(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartsendLCD */
  /* Infinite loop */
	for(;;)
	{
		osMutexAcquire(myMutex01Handle, osWaitForever);
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <StartsendLCD+0x30>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	4618      	mov	r0, r3
 800216e:	f00a f921 	bl	800c3b4 <osMutexAcquire>
		//osSemaphoreWait(BinSemHandle, osWaitForever); // it is osSemaphoreAcquire instead of osSemaphoreWait
		lcd_disp();
 8002172:	f7ff fa4f 	bl	8001614 <lcd_disp>
		//osSemaphoreRelease(BinSemHandle);
		osMutexRelease(myMutex01Handle);
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <StartsendLCD+0x30>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f00a f965 	bl	800c44a <osMutexRelease>
		osDelay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f00a f876 	bl	800c272 <osDelay>
		osMutexAcquire(myMutex01Handle, osWaitForever);
 8002186:	bf00      	nop
 8002188:	e7ec      	b.n	8002164 <StartsendLCD+0x8>
 800218a:	bf00      	nop
 800218c:	20000bdc 	.word	0x20000bdc

08002190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021a2:	f000 fdb3 	bl	8002d0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40000400 	.word	0x40000400

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_MspInit+0x50>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	4a11      	ldr	r2, [pc, #68]	@ (8002210 <HAL_MspInit+0x50>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_MspInit+0x50>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_MspInit+0x50>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_MspInit+0x50>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_MspInit+0x50>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210f      	movs	r1, #15
 80021fa:	f06f 0001 	mvn.w	r0, #1
 80021fe:	f002 fc47 	bl	8004a90 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002202:	f005 fca5 	bl	8007b50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b09a      	sub	sp, #104	@ 0x68
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2244      	movs	r2, #68	@ 0x44
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f00d ff14 	bl	8010062 <memset>
  if(hadc->Instance==ADC1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002242:	d167      	bne.n	8002314 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002248:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800224a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800224e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4618      	mov	r0, r3
 8002256:	f006 f9eb 	bl	8008630 <HAL_RCCEx_PeriphCLKConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002260:	f7ff ffa8 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002264:	4b2d      	ldr	r3, [pc, #180]	@ (800231c <HAL_ADC_MspInit+0x108>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002268:	4a2c      	ldr	r2, [pc, #176]	@ (800231c <HAL_ADC_MspInit+0x108>)
 800226a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800226e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002270:	4b2a      	ldr	r3, [pc, #168]	@ (800231c <HAL_ADC_MspInit+0x108>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_ADC_MspInit+0x108>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_ADC_MspInit+0x108>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002288:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_ADC_MspInit+0x108>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002294:	2301      	movs	r3, #1
 8002296:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002298:	2303      	movs	r3, #3
 800229a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022a4:	4619      	mov	r1, r3
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022aa:	f003 fb69 	bl	8005980 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <HAL_ADC_MspInit+0x110>)
 80022b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022b6:	2205      	movs	r2, #5
 80022b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022de:	2220      	movs	r2, #32
 80022e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022e8:	480d      	ldr	r0, [pc, #52]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022ea:	f003 f809 	bl	8005300 <HAL_DMA_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80022f4:	f7ff ff5e 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_ADC_MspInit+0x10c>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2105      	movs	r1, #5
 8002308:	2012      	movs	r0, #18
 800230a:	f002 fbc1 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800230e:	2012      	movs	r0, #18
 8002310:	f002 fbd8 	bl	8004ac4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002314:	bf00      	nop
 8002316:	3768      	adds	r7, #104	@ 0x68
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	20000750 	.word	0x20000750
 8002324:	40020058 	.word	0x40020058

08002328 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2f      	ldr	r2, [pc, #188]	@ (8002404 <HAL_DAC_MspInit+0xdc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d157      	bne.n	80023fa <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_DAC_MspInit+0xe0>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <HAL_DAC_MspInit+0xe0>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <HAL_DAC_MspInit+0xe0>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <HAL_DAC_MspInit+0xe0>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <HAL_DAC_MspInit+0xe0>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236e:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <HAL_DAC_MspInit+0xe0>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800237a:	2310      	movs	r3, #16
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	2303      	movs	r3, #3
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002390:	f003 faf6 	bl	8005980 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 8002396:	4a1e      	ldr	r2, [pc, #120]	@ (8002410 <HAL_DAC_MspInit+0xe8>)
 8002398:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 800239c:	2206      	movs	r2, #6
 800239e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023a2:	2210      	movs	r2, #16
 80023a4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023ac:	4b17      	ldr	r3, [pc, #92]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023ae:	2280      	movs	r2, #128	@ 0x80
 80023b0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023c0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80023c2:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023c4:	2220      	movs	r2, #32
 80023c6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80023ce:	480f      	ldr	r0, [pc, #60]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023d0:	f002 ff96 	bl	8005300 <HAL_DMA_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80023da:	f7ff feeb 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_DAC_MspInit+0xe4>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2105      	movs	r1, #5
 80023ee:	2036      	movs	r0, #54	@ 0x36
 80023f0:	f002 fb4e 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023f4:	2036      	movs	r0, #54	@ 0x36
 80023f6:	f002 fb65 	bl	8004ac4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	@ 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	50000800 	.word	0x50000800
 8002408:	40021000 	.word	0x40021000
 800240c:	200007c4 	.word	0x200007c4
 8002410:	40020030 	.word	0x40020030

08002414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b09c      	sub	sp, #112	@ 0x70
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	2244      	movs	r2, #68	@ 0x44
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00d fe14 	bl	8010062 <memset>
  if(hi2c->Instance==I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4a      	ldr	r2, [pc, #296]	@ (8002568 <HAL_I2C_MspInit+0x154>)
 8002440:	4293      	cmp	r3, r2
 8002442:	f040 808d 	bne.w	8002560 <HAL_I2C_MspInit+0x14c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002446:	2340      	movs	r3, #64	@ 0x40
 8002448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244e:	f107 0318 	add.w	r3, r7, #24
 8002452:	4618      	mov	r0, r3
 8002454:	f006 f8ec 	bl	8008630 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff fea9 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b42      	ldr	r3, [pc, #264]	@ (800256c <HAL_I2C_MspInit+0x158>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	4a41      	ldr	r2, [pc, #260]	@ (800256c <HAL_I2C_MspInit+0x158>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_I2C_MspInit+0x158>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b3c      	ldr	r3, [pc, #240]	@ (800256c <HAL_I2C_MspInit+0x158>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	4a3b      	ldr	r2, [pc, #236]	@ (800256c <HAL_I2C_MspInit+0x158>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002486:	4b39      	ldr	r3, [pc, #228]	@ (800256c <HAL_I2C_MspInit+0x158>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002496:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002498:	2312      	movs	r3, #18
 800249a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024a4:	2304      	movs	r3, #4
 80024a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b2:	f003 fa65 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ba:	2312      	movs	r3, #18
 80024bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c6:	2304      	movs	r3, #4
 80024c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4827      	ldr	r0, [pc, #156]	@ (8002570 <HAL_I2C_MspInit+0x15c>)
 80024d2:	f003 fa55 	bl	8005980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d6:	4b25      	ldr	r3, [pc, #148]	@ (800256c <HAL_I2C_MspInit+0x158>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	4a24      	ldr	r2, [pc, #144]	@ (800256c <HAL_I2C_MspInit+0x158>)
 80024dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <HAL_I2C_MspInit+0x158>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80024ee:	4b21      	ldr	r3, [pc, #132]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 80024f0:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <HAL_I2C_MspInit+0x164>)
 80024f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 80024f6:	2211      	movs	r2, #17
 80024f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 80024fc:	2210      	movs	r2, #16
 80024fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002506:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002518:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002524:	4813      	ldr	r0, [pc, #76]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 8002526:	f002 feeb 	bl	8005300 <HAL_DMA_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8002530:	f7ff fe40 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0f      	ldr	r2, [pc, #60]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
 800253a:	4a0e      	ldr	r2, [pc, #56]	@ (8002574 <HAL_I2C_MspInit+0x160>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	2105      	movs	r1, #5
 8002544:	201f      	movs	r0, #31
 8002546:	f002 faa3 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800254a:	201f      	movs	r0, #31
 800254c:	f002 faba 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2105      	movs	r1, #5
 8002554:	2020      	movs	r0, #32
 8002556:	f002 fa9b 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800255a:	2020      	movs	r0, #32
 800255c:	f002 fab2 	bl	8004ac4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002560:	bf00      	nop
 8002562:	3770      	adds	r7, #112	@ 0x70
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40005400 	.word	0x40005400
 800256c:	40021000 	.word	0x40021000
 8002570:	48000400 	.word	0x48000400
 8002574:	20000878 	.word	0x20000878
 8002578:	40020044 	.word	0x40020044

0800257c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	@ 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a68      	ldr	r2, [pc, #416]	@ (800273c <HAL_TIM_Base_MspInit+0x1c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	f040 808b 	bne.w	80026b6 <HAL_TIM_Base_MspInit+0x13a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a0:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a4:	4a66      	ldr	r2, [pc, #408]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80025a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80025ac:	4b64      	ldr	r3, [pc, #400]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80025ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025bc:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80025e2:	2306      	movs	r3, #6
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f0:	f003 f9c6 	bl	8005980 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80025f4:	4b53      	ldr	r3, [pc, #332]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 80025f6:	4a54      	ldr	r2, [pc, #336]	@ (8002748 <HAL_TIM_Base_MspInit+0x1cc>)
 80025f8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80025fa:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 80025fc:	222a      	movs	r2, #42	@ 0x2a
 80025fe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002600:	4b50      	ldr	r3, [pc, #320]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002606:	4b4f      	ldr	r3, [pc, #316]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800260c:	4b4d      	ldr	r3, [pc, #308]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 800260e:	2280      	movs	r2, #128	@ 0x80
 8002610:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002612:	4b4c      	ldr	r3, [pc, #304]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002618:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800261a:	4b4a      	ldr	r3, [pc, #296]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 800261c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002620:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002622:	4b48      	ldr	r3, [pc, #288]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002624:	2220      	movs	r2, #32
 8002626:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002628:	4b46      	ldr	r3, [pc, #280]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 800262a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800262e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002630:	4844      	ldr	r0, [pc, #272]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002632:	f002 fe65 	bl	8005300 <HAL_DMA_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 800263c:	f7ff fdba 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a40      	ldr	r2, [pc, #256]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002644:	625a      	str	r2, [r3, #36]	@ 0x24
 8002646:	4a3f      	ldr	r2, [pc, #252]	@ (8002744 <HAL_TIM_Base_MspInit+0x1c8>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 800264c:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 800264e:	4a40      	ldr	r2, [pc, #256]	@ (8002750 <HAL_TIM_Base_MspInit+0x1d4>)
 8002650:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002652:	4b3e      	ldr	r3, [pc, #248]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 8002654:	222b      	movs	r2, #43	@ 0x2b
 8002656:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002658:	4b3c      	ldr	r3, [pc, #240]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002664:	4b39      	ldr	r3, [pc, #228]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 8002666:	2280      	movs	r2, #128	@ 0x80
 8002668:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 800266c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002670:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002672:	4b36      	ldr	r3, [pc, #216]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 8002674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002678:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800267a:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 800267c:	2220      	movs	r2, #32
 800267e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002680:	4b32      	ldr	r3, [pc, #200]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 8002682:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002686:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002688:	4830      	ldr	r0, [pc, #192]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 800268a:	f002 fe39 	bl	8005300 <HAL_DMA_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_TIM_Base_MspInit+0x11c>
    {
      Error_Handler();
 8002694:	f7ff fd8e 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a2c      	ldr	r2, [pc, #176]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28
 800269e:	4a2b      	ldr	r2, [pc, #172]	@ (800274c <HAL_TIM_Base_MspInit+0x1d0>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2105      	movs	r1, #5
 80026a8:	201b      	movs	r0, #27
 80026aa:	f002 f9f1 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026ae:	201b      	movs	r0, #27
 80026b0:	f002 fa08 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026b4:	e03e      	b.n	8002734 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026be:	d10c      	bne.n	80026da <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80026cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
}
 80026d8:	e02c      	b.n	8002734 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <HAL_TIM_Base_MspInit+0x1d8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d127      	bne.n	8002734 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e4:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a15      	ldr	r2, [pc, #84]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_TIM_Base_MspInit+0x1c4>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002714:	2340      	movs	r3, #64	@ 0x40
 8002716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002724:	2302      	movs	r3, #2
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	4619      	mov	r1, r3
 800272e:	480a      	ldr	r0, [pc, #40]	@ (8002758 <HAL_TIM_Base_MspInit+0x1dc>)
 8002730:	f003 f926 	bl	8005980 <HAL_GPIO_Init>
}
 8002734:	bf00      	nop
 8002736:	3730      	adds	r7, #48	@ 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40021000 	.word	0x40021000
 8002744:	200009bc 	.word	0x200009bc
 8002748:	40020008 	.word	0x40020008
 800274c:	20000a1c 	.word	0x20000a1c
 8002750:	4002001c 	.word	0x4002001c
 8002754:	40000800 	.word	0x40000800
 8002758:	48000400 	.word	0x48000400

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b09a      	sub	sp, #104	@ 0x68
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	2244      	movs	r2, #68	@ 0x44
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f00d fc70 	bl	8010062 <memset>
  if(huart->Instance==USART2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a49      	ldr	r2, [pc, #292]	@ (80028ac <HAL_UART_MspInit+0x150>)
 8002788:	4293      	cmp	r3, r2
 800278a:	f040 808a 	bne.w	80028a2 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800278e:	2302      	movs	r3, #2
 8002790:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f005 ff48 	bl	8008630 <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027a6:	f7ff fd05 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027aa:	4b41      	ldr	r3, [pc, #260]	@ (80028b0 <HAL_UART_MspInit+0x154>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	4a40      	ldr	r2, [pc, #256]	@ (80028b0 <HAL_UART_MspInit+0x154>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <HAL_UART_MspInit+0x154>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_UART_MspInit+0x154>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	4a3a      	ldr	r2, [pc, #232]	@ (80028b0 <HAL_UART_MspInit+0x154>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ce:	4b38      	ldr	r3, [pc, #224]	@ (80028b0 <HAL_UART_MspInit+0x154>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80027da:	230c      	movs	r3, #12
 80027dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ea:	2307      	movs	r3, #7
 80027ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027f2:	4619      	mov	r1, r3
 80027f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f8:	f003 f8c2 	bl	8005980 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel2;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 80027fe:	4a2e      	ldr	r2, [pc, #184]	@ (80028b8 <HAL_UART_MspInit+0x15c>)
 8002800:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002802:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002804:	221a      	movs	r2, #26
 8002806:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280e:	4b29      	ldr	r3, [pc, #164]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002814:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281a:	4b26      	ldr	r3, [pc, #152]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 800281c:	2200      	movs	r2, #0
 800281e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002820:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002826:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002828:	2220      	movs	r2, #32
 800282a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002832:	4820      	ldr	r0, [pc, #128]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002834:	f002 fd64 	bl	8005300 <HAL_DMA_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800283e:	f7ff fcb9 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1b      	ldr	r2, [pc, #108]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 8002846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800284a:	4a1a      	ldr	r2, [pc, #104]	@ (80028b4 <HAL_UART_MspInit+0x158>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Channel1;
 8002850:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002852:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_UART_MspInit+0x164>)
 8002854:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002856:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002858:	221b      	movs	r2, #27
 800285a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800285c:	4b17      	ldr	r3, [pc, #92]	@ (80028bc <HAL_UART_MspInit+0x160>)
 800285e:	2210      	movs	r2, #16
 8002860:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002864:	2200      	movs	r2, #0
 8002866:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <HAL_UART_MspInit+0x160>)
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <HAL_UART_MspInit+0x160>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002886:	480d      	ldr	r0, [pc, #52]	@ (80028bc <HAL_UART_MspInit+0x160>)
 8002888:	f002 fd3a 	bl	8005300 <HAL_DMA_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002892:	f7ff fc8f 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <HAL_UART_MspInit+0x160>)
 800289a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800289c:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_UART_MspInit+0x160>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80028a2:	bf00      	nop
 80028a4:	3768      	adds	r7, #104	@ 0x68
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40004400 	.word	0x40004400
 80028b0:	40021000 	.word	0x40021000
 80028b4:	20000b10 	.word	0x20000b10
 80028b8:	4002041c 	.word	0x4002041c
 80028bc:	20000b70 	.word	0x20000b70
 80028c0:	40020408 	.word	0x40020408

080028c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80028d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <HAL_InitTick+0xc4>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <HAL_InitTick+0xc4>)
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e0:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <HAL_InitTick+0xc4>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028ec:	f107 020c 	add.w	r2, r7, #12
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 fe22 	bl	8008540 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028fc:	f005 fdf4 	bl	80084e8 <HAL_RCC_GetPCLK1Freq>
 8002900:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_InitTick+0xc8>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	3b01      	subs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002910:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <HAL_InitTick+0xcc>)
 8002912:	4a20      	ldr	r2, [pc, #128]	@ (8002994 <HAL_InitTick+0xd0>)
 8002914:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002916:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <HAL_InitTick+0xcc>)
 8002918:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800291c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800291e:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <HAL_InitTick+0xcc>)
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_InitTick+0xcc>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <HAL_InitTick+0xcc>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim3);
 8002930:	4817      	ldr	r0, [pc, #92]	@ (8002990 <HAL_InitTick+0xcc>)
 8002932:	f006 f86d 	bl	8008a10 <HAL_TIM_Base_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800293c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11b      	bne.n	800297c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002944:	4812      	ldr	r0, [pc, #72]	@ (8002990 <HAL_InitTick+0xcc>)
 8002946:	f006 f91d 	bl	8008b84 <HAL_TIM_Base_Start_IT>
 800294a:	4603      	mov	r3, r0
 800294c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002958:	201d      	movs	r0, #29
 800295a:	f002 f8b3 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d808      	bhi.n	8002976 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	201d      	movs	r0, #29
 800296a:	f002 f891 	bl	8004a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800296e:	4a0a      	ldr	r2, [pc, #40]	@ (8002998 <HAL_InitTick+0xd4>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e002      	b.n	800297c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800297c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	@ 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	431bde83 	.word	0x431bde83
 8002990:	20000de4 	.word	0x20000de4
 8002994:	40000400 	.word	0x40000400
 8002998:	2000000c 	.word	0x2000000c

0800299c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <NMI_Handler+0x4>

080029a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <HardFault_Handler+0x4>

080029ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <MemManage_Handler+0x4>

080029b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <BusFault_Handler+0x4>

080029bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <UsageFault_Handler+0x4>

080029c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <DMA1_Channel1_IRQHandler+0x10>)
 80029da:	f002 fe74 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200009bc 	.word	0x200009bc

080029e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <DMA1_Channel2_IRQHandler+0x10>)
 80029ee:	f002 fe6a 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000a1c 	.word	0x20000a1c

080029fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002a00:	4802      	ldr	r0, [pc, #8]	@ (8002a0c <DMA1_Channel3_IRQHandler+0x10>)
 8002a02:	f002 fe60 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200007c4 	.word	0x200007c4

08002a10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002a14:	4802      	ldr	r0, [pc, #8]	@ (8002a20 <DMA1_Channel4_IRQHandler+0x10>)
 8002a16:	f002 fe56 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000878 	.word	0x20000878

08002a24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a28:	4802      	ldr	r0, [pc, #8]	@ (8002a34 <DMA1_Channel5_IRQHandler+0x10>)
 8002a2a:	f002 fe4c 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000750 	.word	0x20000750

08002a38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a3c:	4802      	ldr	r0, [pc, #8]	@ (8002a48 <ADC1_2_IRQHandler+0x10>)
 8002a3e:	f000 fe43 	bl	80036c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200006e4 	.word	0x200006e4

08002a4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a50:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <TIM1_CC_IRQHandler+0x10>)
 8002a52:	f006 fd81 	bl	8009558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200008d8 	.word	0x200008d8

08002a60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a64:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <TIM3_IRQHandler+0x10>)
 8002a66:	f006 fd77 	bl	8009558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000de4 	.word	0x20000de4

08002a74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <I2C1_EV_IRQHandler+0x10>)
 8002a7a:	f003 facb 	bl	8006014 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000824 	.word	0x20000824

08002a88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <I2C1_ER_IRQHandler+0x10>)
 8002a8e:	f003 fadb 	bl	8006048 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000824 	.word	0x20000824

08002a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <TIM6_DAC_IRQHandler+0x10>)
 8002aa2:	f002 f960 	bl	8004d66 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200007b0 	.word	0x200007b0

08002ab0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <DMA2_Channel1_IRQHandler+0x10>)
 8002ab6:	f002 fe06 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000b70 	.word	0x20000b70

08002ac4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <DMA2_Channel2_IRQHandler+0x10>)
 8002aca:	f002 fdfc 	bl	80056c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000b10 	.word	0x20000b10

08002ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return 1;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_kill>:

int _kill(int pid, int sig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002af2:	f00d fb41 	bl	8010178 <__errno>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2216      	movs	r2, #22
 8002afa:	601a      	str	r2, [r3, #0]
  return -1;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_exit>:

void _exit (int status)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ffe7 	bl	8002ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <_exit+0x12>

08002b1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e00a      	b.n	8002b46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b30:	f3af 8000 	nop.w
 8002b34:	4601      	mov	r1, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	b2ca      	uxtb	r2, r1
 8002b3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dbf0      	blt.n	8002b30 <_read+0x12>
  }

  return len;
 8002b4e:	687b      	ldr	r3, [r7, #4]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e009      	b.n	8002b7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	60ba      	str	r2, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	dbf1      	blt.n	8002b6a <_write+0x12>
  }
  return len;
 8002b86:	687b      	ldr	r3, [r7, #4]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_close>:

int _close(int file)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_isatty>:

int _isatty(int file)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <_sbrk+0x5c>)
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <_sbrk+0x60>)
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <_sbrk+0x64>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <_sbrk+0x68>)
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <_sbrk+0x64>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d207      	bcs.n	8002c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c28:	f00d faa6 	bl	8010178 <__errno>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	220c      	movs	r2, #12
 8002c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e009      	b.n	8002c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c38:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <_sbrk+0x64>)
 8002c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20008000 	.word	0x20008000
 8002c58:	00000400 	.word	0x00000400
 8002c5c:	20000e30 	.word	0x20000e30
 8002c60:	20003278 	.word	0x20003278

08002c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <SystemInit+0x20>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <SystemInit+0x20>)
 8002c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c88:	480d      	ldr	r0, [pc, #52]	@ (8002cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c8c:	f7ff ffea 	bl	8002c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c90:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c92:	490d      	ldr	r1, [pc, #52]	@ (8002cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ccc <LoopForever+0xe>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c98:	e002      	b.n	8002ca0 <LoopCopyDataInit>

08002c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9e:	3304      	adds	r3, #4

08002ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca4:	d3f9      	bcc.n	8002c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd4 <LoopForever+0x16>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cac:	e001      	b.n	8002cb2 <LoopFillZerobss>

08002cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb0:	3204      	adds	r2, #4

08002cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb4:	d3fb      	bcc.n	8002cae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002cb6:	f00d fa65 	bl	8010184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cba:	f7fe fcd7 	bl	800166c <main>

08002cbe <LoopForever>:

LoopForever:
    b LoopForever
 8002cbe:	e7fe      	b.n	8002cbe <LoopForever>
  ldr   r0, =_estack
 8002cc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc8:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 8002ccc:	08015bc4 	.word	0x08015bc4
  ldr r2, =_sbss
 8002cd0:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 8002cd4:	20003274 	.word	0x20003274

08002cd8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd8:	e7fe      	b.n	8002cd8 <COMP1_2_3_IRQHandler>

08002cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f001 fec8 	bl	8004a7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cea:	200f      	movs	r0, #15
 8002cec:	f7ff fdea 	bl	80028c4 <HAL_InitTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	e001      	b.n	8002d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cfc:	f7ff fa60 	bl	80021c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d00:	79fb      	ldrb	r3, [r7, #7]

}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_IncTick+0x1c>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_IncTick+0x20>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a03      	ldr	r2, [pc, #12]	@ (8002d28 <HAL_IncTick+0x1c>)
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	20000e34 	.word	0x20000e34
 8002d2c:	20000010 	.word	0x20000010

08002d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_GetTick+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000e34 	.word	0x20000e34

08002d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff ffee 	bl	8002d30 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d004      	beq.n	8002d6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_Delay+0x40>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d6c:	bf00      	nop
 8002d6e:	f7ff ffdf 	bl	8002d30 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d8f7      	bhi.n	8002d6e <HAL_Delay+0x26>
  {
  }
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000010 	.word	0x20000010

08002d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3360      	adds	r3, #96	@ 0x60
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <LL_ADC_SetOffset+0x44>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	03fff000 	.word	0x03fff000

08002e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3360      	adds	r3, #96	@ 0x60
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3360      	adds	r3, #96	@ 0x60
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b087      	sub	sp, #28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3360      	adds	r3, #96	@ 0x60
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3360      	adds	r3, #96	@ 0x60
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	615a      	str	r2, [r3, #20]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3330      	adds	r3, #48	@ 0x30
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	4413      	add	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	211f      	movs	r1, #31
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	401a      	ands	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	f003 011f 	and.w	r1, r3, #31
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fba:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	0e5b      	lsrs	r3, r3, #25
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	4413      	add	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0d1b      	lsrs	r3, r3, #20
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2107      	movs	r1, #7
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0d1b      	lsrs	r3, r3, #20
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	431a      	orrs	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0318 	and.w	r3, r3, #24
 800304e:	4908      	ldr	r1, [pc, #32]	@ (8003070 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003050:	40d9      	lsrs	r1, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	400b      	ands	r3, r1
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0007ffff 	.word	0x0007ffff

08003074 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 031f 	and.w	r3, r3, #31
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6093      	str	r3, [r2, #8]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030e4:	d101      	bne.n	80030ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003108:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800310c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003134:	d101      	bne.n	800313a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003158:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003180:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003184:	f043 0202 	orr.w	r2, r3, #2
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <LL_ADC_IsEnabled+0x18>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <LL_ADC_IsEnabled+0x1a>
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d101      	bne.n	80031d6 <LL_ADC_IsDisableOngoing+0x18>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <LL_ADC_IsDisableOngoing+0x1a>
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d101      	bne.n	8003224 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d101      	bne.n	800324a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b089      	sub	sp, #36	@ 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e167      	b.n	8003542 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe ffc7 	bl	8002214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff19 	bl	80030d0 <LL_ADC_IsDeepPowerDownEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff feff 	bl	80030ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff34 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff18 	bl	80030f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c8:	4ba0      	ldr	r3, [pc, #640]	@ (800354c <HAL_ADC_Init+0x2f4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	4aa0      	ldr	r2, [pc, #640]	@ (8003550 <HAL_ADC_Init+0x2f8>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032dc:	e002      	b.n	80032e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f9      	bne.n	80032de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff16 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff76 	bl	800320c <LL_ADC_REG_IsConversionOngoing>
 8003320:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 8100 	bne.w	8003530 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 80fc 	bne.w	8003530 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003340:	f043 0202 	orr.w	r2, r3, #2
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff23 	bl	8003198 <LL_ADC_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003358:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800335c:	f7ff ff1c 	bl	8003198 <LL_ADC_IsEnabled>
 8003360:	4604      	mov	r4, r0
 8003362:	487c      	ldr	r0, [pc, #496]	@ (8003554 <HAL_ADC_Init+0x2fc>)
 8003364:	f7ff ff18 	bl	8003198 <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	4323      	orrs	r3, r4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4619      	mov	r1, r3
 8003376:	4878      	ldr	r0, [pc, #480]	@ (8003558 <HAL_ADC_Init+0x300>)
 8003378:	f7ff fd08 	bl	8002d8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7f5b      	ldrb	r3, [r3, #29]
 8003380:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003386:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800338c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003392:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800339a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d106      	bne.n	80033b8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	045b      	lsls	r3, r3, #17
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4b60      	ldr	r3, [pc, #384]	@ (800355c <HAL_ADC_Init+0x304>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff15 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 8003408:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d16d      	bne.n	80034ec <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d16a      	bne.n	80034ec <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800341a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003422:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003432:	f023 0302 	bic.w	r3, r3, #2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	69b9      	ldr	r1, [r7, #24]
 800343c:	430b      	orrs	r3, r1
 800343e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d017      	beq.n	8003478 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003456:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003460:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003464:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6911      	ldr	r1, [r2, #16]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	430b      	orrs	r3, r1
 8003472:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003476:	e013      	b.n	80034a0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003486:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003498:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800349c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d118      	bne.n	80034dc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034cc:	430a      	orrs	r2, r1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
 80034da:	e007      	b.n	80034ec <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10c      	bne.n	800350e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f023 010f 	bic.w	r1, r3, #15
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
 800350c:	e007      	b.n	800351e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 020f 	bic.w	r2, r2, #15
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800352e:	e007      	b.n	8003540 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0210 	orr.w	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003540:	7ffb      	ldrb	r3, [r7, #31]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	@ 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}
 800354a:	bf00      	nop
 800354c:	20000008 	.word	0x20000008
 8003550:	053e2d63 	.word	0x053e2d63
 8003554:	50000100 	.word	0x50000100
 8003558:	50000300 	.word	0x50000300
 800355c:	fff04007 	.word	0xfff04007

08003560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800356c:	4851      	ldr	r0, [pc, #324]	@ (80036b4 <HAL_ADC_Start_DMA+0x154>)
 800356e:	f7ff fd81 	bl	8003074 <LL_ADC_GetMultimode>
 8003572:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fe47 	bl	800320c <LL_ADC_REG_IsConversionOngoing>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 808f 	bne.w	80036a4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_ADC_Start_DMA+0x34>
 8003590:	2302      	movs	r3, #2
 8003592:	e08a      	b.n	80036aa <HAL_ADC_Start_DMA+0x14a>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d002      	beq.n	80035ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b09      	cmp	r3, #9
 80035ac:	d173      	bne.n	8003696 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 feb2 	bl	8004318 <ADC_Enable>
 80035b4:	4603      	mov	r3, r0
 80035b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d166      	bne.n	800368c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <HAL_ADC_Start_DMA+0x158>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d002      	beq.n	80035e2 <HAL_ADC_Start_DMA+0x82>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	e001      	b.n	80035e6 <HAL_ADC_Start_DMA+0x86>
 80035e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d002      	beq.n	80035f4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f023 0206 	bic.w	r2, r3, #6
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60
 8003618:	e002      	b.n	8003620 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003624:	4a25      	ldr	r2, [pc, #148]	@ (80036bc <HAL_ADC_Start_DMA+0x15c>)
 8003626:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362c:	4a24      	ldr	r2, [pc, #144]	@ (80036c0 <HAL_ADC_Start_DMA+0x160>)
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003634:	4a23      	ldr	r2, [pc, #140]	@ (80036c4 <HAL_ADC_Start_DMA+0x164>)
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	221c      	movs	r2, #28
 800363e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0210 	orr.w	r2, r2, #16
 8003656:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3340      	adds	r3, #64	@ 0x40
 8003672:	4619      	mov	r1, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f001 feea 	bl	8005450 <HAL_DMA_Start_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fdad 	bl	80031e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800368a:	e00d      	b.n	80036a8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003694:	e008      	b.n	80036a8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80036a2:	e001      	b.n	80036a8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	50000300 	.word	0x50000300
 80036b8:	50000100 	.word	0x50000100
 80036bc:	080044e3 	.word	0x080044e3
 80036c0:	080045bb 	.word	0x080045bb
 80036c4:	080045d7 	.word	0x080045d7

080036c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e4:	4883      	ldr	r0, [pc, #524]	@ (80038f4 <HAL_ADC_IRQHandler+0x22c>)
 80036e6:	f7ff fcc5 	bl	8003074 <LL_ADC_GetMultimode>
 80036ea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d017      	beq.n	8003726 <HAL_ADC_IRQHandler+0x5e>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f001 f853 	bl	80047c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2202      	movs	r2, #2
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_ADC_IRQHandler+0x72>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8085 	beq.w	8003850 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d07f      	beq.n	8003850 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fbdf 	bl	8002f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d064      	beq.n	8003842 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5e      	ldr	r2, [pc, #376]	@ (80038f8 <HAL_ADC_IRQHandler+0x230>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d002      	beq.n	8003788 <HAL_ADC_IRQHandler+0xc0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	e001      	b.n	800378c <HAL_ADC_IRQHandler+0xc4>
 8003788:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	4293      	cmp	r3, r2
 8003792:	d008      	beq.n	80037a6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b05      	cmp	r3, #5
 800379e:	d002      	beq.n	80037a6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	d104      	bne.n	80037b0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e00d      	b.n	80037cc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a50      	ldr	r2, [pc, #320]	@ (80038f8 <HAL_ADC_IRQHandler+0x230>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d002      	beq.n	80037c0 <HAL_ADC_IRQHandler+0xf8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e001      	b.n	80037c4 <HAL_ADC_IRQHandler+0xfc>
 80037c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037c4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d135      	bne.n	8003842 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d12e      	bne.n	8003842 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fd0f 	bl	800320c <LL_ADC_REG_IsConversionOngoing>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d11a      	bne.n	800382a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020c 	bic.w	r2, r2, #12
 8003802:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d112      	bne.n	8003842 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003828:	e00b      	b.n	8003842 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fb6a 	bl	8001f1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	220c      	movs	r2, #12
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_ADC_IRQHandler+0x19c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 809e 	beq.w	80039ac <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8098 	beq.w	80039ac <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fb88 	bl	8002fae <LL_ADC_INJ_IsTriggerSourceSWStart>
 800389e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fb43 	bl	8002f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038aa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_ADC_IRQHandler+0x230>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d002      	beq.n	80038bc <HAL_ADC_IRQHandler+0x1f4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	e001      	b.n	80038c0 <HAL_ADC_IRQHandler+0x1f8>
 80038bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d008      	beq.n	80038da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d002      	beq.n	80038da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b07      	cmp	r3, #7
 80038d8:	d104      	bne.n	80038e4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	e011      	b.n	8003908 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a03      	ldr	r2, [pc, #12]	@ (80038f8 <HAL_ADC_IRQHandler+0x230>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d006      	beq.n	80038fc <HAL_ADC_IRQHandler+0x234>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	e005      	b.n	8003900 <HAL_ADC_IRQHandler+0x238>
 80038f4:	50000300 	.word	0x50000300
 80038f8:	50000100 	.word	0x50000100
 80038fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003900:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d047      	beq.n	800399e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_ADC_IRQHandler+0x260>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03f      	beq.n	800399e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003924:	2b00      	cmp	r3, #0
 8003926:	d13a      	bne.n	800399e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d133      	bne.n	800399e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d12e      	bne.n	800399e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fc74 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11a      	bne.n	8003986 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800395e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d112      	bne.n	800399e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003984:	e00b      	b.n	800399e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f043 0210 	orr.w	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fee8 	bl	8004774 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2260      	movs	r2, #96	@ 0x60
 80039aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_ADC_IRQHandler+0x312>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f89f 	bl	8003b10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2280      	movs	r2, #128	@ 0x80
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x342>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fece 	bl	800479c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <HAL_ADC_IRQHandler+0x372>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fec0 	bl	80047b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d036      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0x3ea>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d031      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003a56:	2301      	movs	r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5a:	e014      	b.n	8003a86 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a62:	4825      	ldr	r0, [pc, #148]	@ (8003af8 <HAL_ADC_IRQHandler+0x430>)
 8003a64:	f7ff fb14 	bl	8003090 <LL_ADC_GetMultiDMATransfer>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a72:	e008      	b.n	8003a86 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003a82:	2301      	movs	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10e      	bne.n	8003aaa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9c:	f043 0202 	orr.w	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f83d 	bl	8003b24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2210      	movs	r2, #16
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <HAL_ADC_IRQHandler+0x426>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	f043 0208 	orr.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fe4d 	bl	8004788 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003aee:	bf00      	nop
 8003af0:	3728      	adds	r7, #40	@ 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	50000300 	.word	0x50000300

08003afc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0b6      	sub	sp, #216	@ 0xd8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x22>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e3c8      	b.n	80042ec <HAL_ADC_ConfigChannel+0x7b4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fb50 	bl	800320c <LL_ADC_REG_IsConversionOngoing>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 83ad 	bne.w	80042ce <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	f7ff f9e8 	bl	8002f56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fb3e 	bl	800320c <LL_ADC_REG_IsConversionOngoing>
 8003b90:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fb4a 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 8003b9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 81d9 	bne.w	8003f5e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 81d4 	bne.w	8003f5e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bbe:	d10f      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7ff fa02 	bl	8002fd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f996 	bl	8002f0a <LL_ADC_SetSamplingTimeCommonConfig>
 8003bde:	e00e      	b.n	8003bfe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	461a      	mov	r2, r3
 8003bee:	f7ff f9f1 	bl	8002fd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff f986 	bl	8002f0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	08db      	lsrs	r3, r3, #3
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d022      	beq.n	8003c66 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6919      	ldr	r1, [r3, #16]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c30:	f7ff f8e0 	bl	8002df4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6919      	ldr	r1, [r3, #16]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7ff f92c 	bl	8002e9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x124>
 8003c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c5a:	e000      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x126>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f7ff f938 	bl	8002ed4 <LL_ADC_SetOffsetSaturation>
 8003c64:	e17b      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff f8e5 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x15a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f8da 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	0e9b      	lsrs	r3, r3, #26
 8003c8c:	f003 021f 	and.w	r2, r3, #31
 8003c90:	e01e      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x198>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f8cf 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	e004      	b.n	8003cce <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1b0>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	e018      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x1e2>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e004      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003d10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d14:	fab3 f383 	clz	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d106      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff f89e 	bl	8002e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f882 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x220>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff f877 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	e01e      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x25e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff f86c 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e004      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x276>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	0e9b      	lsrs	r3, r3, #26
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	e018      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x2a8>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e004      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2101      	movs	r1, #1
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff f83b 	bl	8002e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2102      	movs	r1, #2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f81f 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x2e6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff f814 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003e14:	4603      	mov	r3, r0
 8003e16:	0e9b      	lsrs	r3, r3, #26
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	e01e      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x324>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2102      	movs	r1, #2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f809 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e004      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x33c>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0e9b      	lsrs	r3, r3, #26
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	e016      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x36a>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003e86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e004      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d106      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe ffda 	bl	8002e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2103      	movs	r1, #3
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe ffbe 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x3a8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2103      	movs	r1, #3
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe ffb3 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	f003 021f 	and.w	r2, r3, #31
 8003ede:	e017      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x3d8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2103      	movs	r1, #3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe ffa8 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003eec:	4603      	mov	r3, r0
 8003eee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003ef8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003efa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003f06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x3f0>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	e011      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x414>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e003      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d106      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2103      	movs	r1, #3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ff85 	bl	8002e68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f918 	bl	8003198 <LL_ADC_IsEnabled>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 8140 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f7ff f855 	bl	800302c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4a8f      	ldr	r2, [pc, #572]	@ (80041c4 <HAL_ADC_ConfigChannel+0x68c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	f040 8131 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x47e>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2b09      	cmp	r3, #9
 8003fac:	bf94      	ite	ls
 8003fae:	2301      	movls	r3, #1
 8003fb0:	2300      	movhi	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e019      	b.n	8003fea <HAL_ADC_ConfigChannel+0x4b2>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e003      	b.n	8003fda <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	bf94      	ite	ls
 8003fe4:	2301      	movls	r3, #1
 8003fe6:	2300      	movhi	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d079      	beq.n	80040e2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_ADC_ConfigChannel+0x4d2>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	3301      	adds	r3, #1
 8004002:	069b      	lsls	r3, r3, #26
 8004004:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004008:	e015      	b.n	8004036 <HAL_ADC_ConfigChannel+0x4fe>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800401c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e003      	b.n	800402e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	069b      	lsls	r3, r3, #26
 8004032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x51e>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	0e9b      	lsrs	r3, r3, #26
 8004048:	3301      	adds	r3, #1
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2101      	movs	r1, #1
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	e017      	b.n	8004086 <HAL_ADC_ConfigChannel+0x54e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800406e:	2320      	movs	r3, #32
 8004070:	e003      	b.n	800407a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	ea42 0103 	orr.w	r1, r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x574>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	0e9b      	lsrs	r3, r3, #26
 800409c:	3301      	adds	r3, #1
 800409e:	f003 021f 	and.w	r2, r3, #31
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	051b      	lsls	r3, r3, #20
 80040aa:	e018      	b.n	80040de <HAL_ADC_ConfigChannel+0x5a6>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80040ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80040be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80040c4:	2320      	movs	r3, #32
 80040c6:	e003      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80040c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	f003 021f 	and.w	r2, r3, #31
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040de:	430b      	orrs	r3, r1
 80040e0:	e081      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x5c6>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0e9b      	lsrs	r3, r3, #26
 80040f4:	3301      	adds	r3, #1
 80040f6:	069b      	lsls	r3, r3, #26
 80040f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040fc:	e015      	b.n	800412a <HAL_ADC_ConfigChannel+0x5f2>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004116:	2320      	movs	r3, #32
 8004118:	e003      	b.n	8004122 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	3301      	adds	r3, #1
 8004124:	069b      	lsls	r3, r3, #26
 8004126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_ADC_ConfigChannel+0x612>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	0e9b      	lsrs	r3, r3, #26
 800413c:	3301      	adds	r3, #1
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	e017      	b.n	800417a <HAL_ADC_ConfigChannel+0x642>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	61fb      	str	r3, [r7, #28]
  return result;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004162:	2320      	movs	r3, #32
 8004164:	e003      	b.n	800416e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	3301      	adds	r3, #1
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2101      	movs	r1, #1
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	ea42 0103 	orr.w	r1, r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x66e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0e9b      	lsrs	r3, r3, #26
 8004190:	3301      	adds	r3, #1
 8004192:	f003 021f 	and.w	r2, r3, #31
 8004196:	4613      	mov	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	4413      	add	r3, r2
 800419c:	3b1e      	subs	r3, #30
 800419e:	051b      	lsls	r3, r3, #20
 80041a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041a4:	e01e      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x6ac>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	613b      	str	r3, [r7, #16]
  return result;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80041be:	2320      	movs	r3, #32
 80041c0:	e006      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x698>
 80041c2:	bf00      	nop
 80041c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 021f 	and.w	r2, r3, #31
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	3b1e      	subs	r3, #30
 80041de:	051b      	lsls	r3, r3, #20
 80041e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fe fef2 	bl	8002fd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b3f      	ldr	r3, [pc, #252]	@ (80042f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d071      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041fc:	483e      	ldr	r0, [pc, #248]	@ (80042f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80041fe:	f7fe fdeb 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 8004202:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3c      	ldr	r2, [pc, #240]	@ (80042fc <HAL_ADC_ConfigChannel+0x7c4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_ADC_ConfigChannel+0x6e2>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a3a      	ldr	r2, [pc, #232]	@ (8004300 <HAL_ADC_ConfigChannel+0x7c8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d127      	bne.n	800426a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800421a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800421e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d121      	bne.n	800426a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800422e:	d157      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004234:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004238:	4619      	mov	r1, r3
 800423a:	482f      	ldr	r0, [pc, #188]	@ (80042f8 <HAL_ADC_ConfigChannel+0x7c0>)
 800423c:	f7fe fdb9 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004240:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <HAL_ADC_ConfigChannel+0x7cc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	4a30      	ldr	r2, [pc, #192]	@ (8004308 <HAL_ADC_ConfigChannel+0x7d0>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800425a:	e002      	b.n	8004262 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f9      	bne.n	800425c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004268:	e03a      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a27      	ldr	r2, [pc, #156]	@ (800430c <HAL_ADC_ConfigChannel+0x7d4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d113      	bne.n	800429c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a22      	ldr	r2, [pc, #136]	@ (8004310 <HAL_ADC_ConfigChannel+0x7d8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02a      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800428a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800428e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004292:	4619      	mov	r1, r3
 8004294:	4818      	ldr	r0, [pc, #96]	@ (80042f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004296:	f7fe fd8c 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800429a:	e021      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <HAL_ADC_ConfigChannel+0x7dc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d11c      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a16      	ldr	r2, [pc, #88]	@ (8004310 <HAL_ADC_ConfigChannel+0x7d8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d011      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042c4:	4619      	mov	r1, r3
 80042c6:	480c      	ldr	r0, [pc, #48]	@ (80042f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80042c8:	f7fe fd73 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 80042cc:	e008      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	37d8      	adds	r7, #216	@ 0xd8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	80080000 	.word	0x80080000
 80042f8:	50000300 	.word	0x50000300
 80042fc:	c3210000 	.word	0xc3210000
 8004300:	90c00010 	.word	0x90c00010
 8004304:	20000008 	.word	0x20000008
 8004308:	053e2d63 	.word	0x053e2d63
 800430c:	c7520000 	.word	0xc7520000
 8004310:	50000100 	.word	0x50000100
 8004314:	cb840000 	.word	0xcb840000

08004318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe ff35 	bl	8003198 <LL_ADC_IsEnabled>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d169      	bne.n	8004408 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <ADC_Enable+0xfc>)
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004352:	f043 0201 	orr.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e055      	b.n	800440a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fef0 	bl	8003148 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004368:	482b      	ldr	r0, [pc, #172]	@ (8004418 <ADC_Enable+0x100>)
 800436a:	f7fe fd35 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 800436e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004378:	4b28      	ldr	r3, [pc, #160]	@ (800441c <ADC_Enable+0x104>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	4a28      	ldr	r2, [pc, #160]	@ (8004420 <ADC_Enable+0x108>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004392:	e002      	b.n	800439a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3b01      	subs	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f9      	bne.n	8004394 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043a0:	f7fe fcc6 	bl	8002d30 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043a6:	e028      	b.n	80043fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fef3 	bl	8003198 <LL_ADC_IsEnabled>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe fec3 	bl	8003148 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043c2:	f7fe fcb5 	bl	8002d30 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d914      	bls.n	80043fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d00d      	beq.n	80043fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	f043 0210 	orr.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e007      	b.n	800440a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d1cf      	bne.n	80043a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	8000003f 	.word	0x8000003f
 8004418:	50000300 	.word	0x50000300
 800441c:	20000008 	.word	0x20000008
 8004420:	053e2d63 	.word	0x053e2d63

08004424 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fec4 	bl	80031be <LL_ADC_IsDisableOngoing>
 8004436:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe feab 	bl	8003198 <LL_ADC_IsEnabled>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d047      	beq.n	80044d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d144      	bne.n	80044d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030d 	and.w	r3, r3, #13
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10c      	bne.n	8004476 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fe85 	bl	8003170 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2203      	movs	r2, #3
 800446c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800446e:	f7fe fc5f 	bl	8002d30 <HAL_GetTick>
 8004472:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004474:	e029      	b.n	80044ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447a:	f043 0210 	orr.w	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e023      	b.n	80044da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004492:	f7fe fc4d 	bl	8002d30 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d914      	bls.n	80044ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b2:	f043 0210 	orr.w	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	f043 0201 	orr.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e007      	b.n	80044da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1dc      	bne.n	8004492 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d14b      	bne.n	8004594 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004500:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d021      	beq.n	800455a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fd08 	bl	8002f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d032      	beq.n	800458c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d12b      	bne.n	800458c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11f      	bne.n	800458c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004558:	e018      	b.n	800458c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d111      	bne.n	800458c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	f043 0201 	orr.w	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7fd fcc5 	bl	8001f1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004592:	e00e      	b.n	80045b2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fabf 	bl	8003b24 <HAL_ADC_ErrorCallback>
}
 80045a6:	e004      	b.n	80045b2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff fa97 	bl	8003afc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fa91 	bl	8003b24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <LL_ADC_IsEnabled>:
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <LL_ADC_IsEnabled+0x18>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <LL_ADC_IsEnabled+0x1a>
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_ADC_StartCalibration>:
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004642:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800464c:	4313      	orrs	r3, r2
 800464e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	609a      	str	r2, [r3, #8]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_ADC_IsCalibrationOnGoing>:
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004676:	d101      	bne.n	800467c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_ADC_REG_IsConversionOngoing>:
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d101      	bne.n	80046a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_ADCEx_Calibration_Start+0x1c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e04d      	b.n	8004768 <HAL_ADCEx_Calibration_Start+0xb8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fea5 	bl	8004424 <ADC_Disable>
 80046da:	4603      	mov	r3, r0
 80046dc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d136      	bne.n	8004752 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80046ec:	f023 0302 	bic.w	r3, r3, #2
 80046f0:	f043 0202 	orr.w	r2, r3, #2
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff96 	bl	8004630 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004704:	e014      	b.n	8004730 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d90d      	bls.n	8004730 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004718:	f023 0312 	bic.w	r3, r3, #18
 800471c:	f043 0210 	orr.w	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e01b      	b.n	8004768 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff94 	bl	8004662 <LL_ADC_IsCalibrationOnGoing>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e2      	bne.n	8004706 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004744:	f023 0303 	bic.w	r3, r3, #3
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004750:	e005      	b.n	800475e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004756:	f043 0210 	orr.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	0004de01 	.word	0x0004de01

08004774 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b0a1      	sub	sp, #132	@ 0x84
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e08b      	b.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047fe:	2300      	movs	r3, #0
 8004800:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004802:	2300      	movs	r3, #0
 8004804:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800480e:	d102      	bne.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004810:	4b41      	ldr	r3, [pc, #260]	@ (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	e001      	b.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e06a      	b.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff ff25 	bl	800468a <LL_ADC_REG_IsConversionOngoing>
 8004840:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ff1f 	bl	800468a <LL_ADC_REG_IsConversionOngoing>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14c      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004854:	2b00      	cmp	r3, #0
 8004856:	d149      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004858:	4b30      	ldr	r3, [pc, #192]	@ (800491c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800485a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d028      	beq.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004876:	035b      	lsls	r3, r3, #13
 8004878:	430b      	orrs	r3, r1
 800487a:	431a      	orrs	r2, r3
 800487c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800487e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004880:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004884:	f7ff fec1 	bl	800460a <LL_ADC_IsEnabled>
 8004888:	4604      	mov	r4, r0
 800488a:	4823      	ldr	r0, [pc, #140]	@ (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800488c:	f7ff febd 	bl	800460a <LL_ADC_IsEnabled>
 8004890:	4603      	mov	r3, r0
 8004892:	4323      	orrs	r3, r4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d133      	bne.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048a0:	f023 030f 	bic.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	6811      	ldr	r1, [r2, #0]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	431a      	orrs	r2, r3
 80048b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048b2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048b4:	e024      	b.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048c6:	f7ff fea0 	bl	800460a <LL_ADC_IsEnabled>
 80048ca:	4604      	mov	r4, r0
 80048cc:	4812      	ldr	r0, [pc, #72]	@ (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80048ce:	f7ff fe9c 	bl	800460a <LL_ADC_IsEnabled>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4323      	orrs	r3, r4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d112      	bne.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048e2:	f023 030f 	bic.w	r3, r3, #15
 80048e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048ea:	e009      	b.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80048fe:	e000      	b.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004900:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800490a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800490e:	4618      	mov	r0, r3
 8004910:	3784      	adds	r7, #132	@ 0x84
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}
 8004916:	bf00      	nop
 8004918:	50000100 	.word	0x50000100
 800491c:	50000300 	.word	0x50000300

08004920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004930:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <__NVIC_SetPriorityGrouping+0x44>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800494c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004952:	4a04      	ldr	r2, [pc, #16]	@ (8004964 <__NVIC_SetPriorityGrouping+0x44>)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	60d3      	str	r3, [r2, #12]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800496c:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <__NVIC_GetPriorityGrouping+0x18>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	f003 0307 	and.w	r3, r3, #7
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	2b00      	cmp	r3, #0
 8004994:	db0b      	blt.n	80049ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	f003 021f 	and.w	r2, r3, #31
 800499c:	4907      	ldr	r1, [pc, #28]	@ (80049bc <__NVIC_EnableIRQ+0x38>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2001      	movs	r0, #1
 80049a6:	fa00 f202 	lsl.w	r2, r0, r2
 80049aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000e100 	.word	0xe000e100

080049c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	6039      	str	r1, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db0a      	blt.n	80049ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	490c      	ldr	r1, [pc, #48]	@ (8004a0c <__NVIC_SetPriority+0x4c>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	440b      	add	r3, r1
 80049e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049e8:	e00a      	b.n	8004a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4908      	ldr	r1, [pc, #32]	@ (8004a10 <__NVIC_SetPriority+0x50>)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3b04      	subs	r3, #4
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	440b      	add	r3, r1
 80049fe:	761a      	strb	r2, [r3, #24]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	@ 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f1c3 0307 	rsb	r3, r3, #7
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	bf28      	it	cs
 8004a32:	2304      	movcs	r3, #4
 8004a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d902      	bls.n	8004a44 <NVIC_EncodePriority+0x30>
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3b03      	subs	r3, #3
 8004a42:	e000      	b.n	8004a46 <NVIC_EncodePriority+0x32>
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a48:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43da      	mvns	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	401a      	ands	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	43d9      	mvns	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a6c:	4313      	orrs	r3, r2
         );
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3724      	adds	r7, #36	@ 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ff4c 	bl	8004920 <__NVIC_SetPriorityGrouping>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9e:	f7ff ff63 	bl	8004968 <__NVIC_GetPriorityGrouping>
 8004aa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	f7ff ffb3 	bl	8004a14 <NVIC_EncodePriority>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff82 	bl	80049c0 <__NVIC_SetPriority>
}
 8004abc:	bf00      	nop
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ff56 	bl	8004984 <__NVIC_EnableIRQ>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e014      	b.n	8004b1c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	791b      	ldrb	r3, [r3, #4]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd fc10 	bl	8002328 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b2      	b.n	8004ca2 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	795b      	ldrb	r3, [r3, #5]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_DAC_Start_DMA+0x24>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0ac      	b.n	8004ca2 <HAL_DAC_Start_DMA+0x17e>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2202      	movs	r2, #2
 8004b52:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d129      	bne.n	8004bae <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4a53      	ldr	r2, [pc, #332]	@ (8004cac <HAL_DAC_Start_DMA+0x188>)
 8004b60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4a52      	ldr	r2, [pc, #328]	@ (8004cb0 <HAL_DAC_Start_DMA+0x18c>)
 8004b68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4a51      	ldr	r2, [pc, #324]	@ (8004cb4 <HAL_DAC_Start_DMA+0x190>)
 8004b70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b80:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_DAC_Start_DMA+0x6c>
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d005      	beq.n	8004b9a <HAL_DAC_Start_DMA+0x76>
 8004b8e:	e009      	b.n	8004ba4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	61bb      	str	r3, [r7, #24]
        break;
 8004b98:	e033      	b.n	8004c02 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	61bb      	str	r3, [r7, #24]
        break;
 8004ba2:	e02e      	b.n	8004c02 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3310      	adds	r3, #16
 8004baa:	61bb      	str	r3, [r7, #24]
        break;
 8004bac:	e029      	b.n	8004c02 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4a41      	ldr	r2, [pc, #260]	@ (8004cb8 <HAL_DAC_Start_DMA+0x194>)
 8004bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a40      	ldr	r2, [pc, #256]	@ (8004cbc <HAL_DAC_Start_DMA+0x198>)
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cc0 <HAL_DAC_Start_DMA+0x19c>)
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bd4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_DAC_Start_DMA+0xc0>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d005      	beq.n	8004bee <HAL_DAC_Start_DMA+0xca>
 8004be2:	e009      	b.n	8004bf8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3314      	adds	r3, #20
 8004bea:	61bb      	str	r3, [r7, #24]
        break;
 8004bec:	e009      	b.n	8004c02 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3318      	adds	r3, #24
 8004bf4:	61bb      	str	r3, [r7, #24]
        break;
 8004bf6:	e004      	b.n	8004c02 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	331c      	adds	r3, #28
 8004bfe:	61bb      	str	r3, [r7, #24]
        break;
 8004c00:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d111      	bne.n	8004c2c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6898      	ldr	r0, [r3, #8]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	f000 fc15 	bl	8005450 <HAL_DMA_Start_IT>
 8004c26:	4603      	mov	r3, r0
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e010      	b.n	8004c4e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68d8      	ldr	r0, [r3, #12]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	f000 fc03 	bl	8005450 <HAL_DMA_Start_IT>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004c54:	7ffb      	ldrb	r3, [r7, #31]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11c      	bne.n	8004c94 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2201      	movs	r2, #1
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <HAL_DAC_Start_DMA+0x1a0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	4a13      	ldr	r2, [pc, #76]	@ (8004cc8 <HAL_DAC_Start_DMA+0x1a4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	3301      	adds	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004c84:	e002      	b.n	8004c8c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f9      	bne.n	8004c86 <HAL_DAC_Start_DMA+0x162>
 8004c92:	e005      	b.n	8004ca0 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f043 0204 	orr.w	r2, r3, #4
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	080051d9 	.word	0x080051d9
 8004cb0:	080051fb 	.word	0x080051fb
 8004cb4:	08005217 	.word	0x08005217
 8004cb8:	08005295 	.word	0x08005295
 8004cbc:	080052b7 	.word	0x080052b7
 8004cc0:	080052d3 	.word	0x080052d3
 8004cc4:	20000008 	.word	0x20000008
 8004cc8:	053e2d63 	.word	0x053e2d63

08004ccc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e03e      	b.n	8004d5e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43da      	mvns	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43da      	mvns	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	400a      	ands	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fc0e 	bl	8005546 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e00c      	b.n	8004d56 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fc00 	bl	8005546 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004d54:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01d      	beq.n	8004dc4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2204      	movs	r2, #4
 8004d96:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f845 	bl	8004e4e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01d      	beq.n	8004e0a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d018      	beq.n	8004e0a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004df2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fa3b 	bl	8005280 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_DAC_ConfigChannel+0x1c>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e1a1      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	795b      	ldrb	r3, [r3, #5]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_DAC_ConfigChannel+0x32>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e198      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x364>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d17a      	bne.n	8004fa0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004eaa:	f7fd ff41 	bl	8002d30 <HAL_GetTick>
 8004eae:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d13d      	bne.n	8004f32 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eb6:	e018      	b.n	8004eea <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004eb8:	f7fd ff3a 	bl	8002d30 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d911      	bls.n	8004eea <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f043 0208 	orr.w	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e16e      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1df      	bne.n	8004eb8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f02:	e020      	b.n	8004f46 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f04:	f7fd ff14 	bl	8002d30 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d90f      	bls.n	8004f32 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	da0a      	bge.n	8004f32 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f043 0208 	orr.w	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e14a      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dbe3      	blt.n	8004f04 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	ea02 0103 	and.w	r1, r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	21ff      	movs	r1, #255	@ 0xff
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	ea02 0103 	and.w	r1, r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	409a      	lsls	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d11d      	bne.n	8004fe4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	221f      	movs	r2, #31
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2207      	movs	r2, #7
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d102      	bne.n	800500e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005008:	2300      	movs	r3, #0
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	e00f      	b.n	800502e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d102      	bne.n	800501c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005016:	2301      	movs	r3, #1
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	e008      	b.n	800502e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005024:	2301      	movs	r3, #1
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	e001      	b.n	800502e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800502a:	2300      	movs	r3, #0
 800502c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	4013      	ands	r3, r2
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	791b      	ldrb	r3, [r3, #4]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d102      	bne.n	8005062 <HAL_DAC_ConfigChannel+0x1fe>
 800505c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005060:	e000      	b.n	8005064 <HAL_DAC_ConfigChannel+0x200>
 8005062:	2300      	movs	r3, #0
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507c:	4013      	ands	r3, r2
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	795b      	ldrb	r3, [r3, #5]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d102      	bne.n	800508e <HAL_DAC_ConfigChannel+0x22a>
 8005088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800508c:	e000      	b.n	8005090 <HAL_DAC_ConfigChannel+0x22c>
 800508e:	2300      	movs	r3, #0
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d114      	bne.n	80050d0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80050a6:	f003 fa13 	bl	80084d0 <HAL_RCC_GetHCLKFreq>
 80050aa:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4a48      	ldr	r2, [pc, #288]	@ (80051d0 <HAL_DAC_ConfigChannel+0x36c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d904      	bls.n	80050be <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80050bc:	e00f      	b.n	80050de <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4a44      	ldr	r2, [pc, #272]	@ (80051d4 <HAL_DAC_ConfigChannel+0x370>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d90a      	bls.n	80050dc <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ce:	e006      	b.n	80050de <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d6:	4313      	orrs	r3, r2
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050da:	e000      	b.n	80050de <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80050dc:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ec:	4313      	orrs	r3, r2
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	43da      	mvns	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	400a      	ands	r2, r1
 8005114:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005130:	4013      	ands	r3, r2
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005148:	4313      	orrs	r3, r2
 800514a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005152:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	22c0      	movs	r2, #192	@ 0xc0
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43da      	mvns	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	400a      	ands	r2, r1
 800516e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	089b      	lsrs	r3, r3, #2
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	089b      	lsrs	r3, r3, #2
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	ea02 0103 	and.w	r1, r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	409a      	lsls	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	@ 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	09896800 	.word	0x09896800
 80051d4:	04c4b400 	.word	0x04c4b400

080051d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff fe13 	bl	8004e12 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	711a      	strb	r2, [r3, #4]
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005206:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff fe0c 	bl	8004e26 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f043 0204 	orr.w	r2, r3, #4
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fe02 	bl	8004e3a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	711a      	strb	r2, [r3, #4]
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ffce 	bl	8005244 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	711a      	strb	r2, [r3, #4]
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ffc7 	bl	8005258 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f043 0204 	orr.w	r2, r3, #4
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff ffbd 	bl	800526c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	711a      	strb	r2, [r3, #4]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e08d      	b.n	800542e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	4b47      	ldr	r3, [pc, #284]	@ (8005438 <HAL_DMA_Init+0x138>)
 800531a:	429a      	cmp	r2, r3
 800531c:	d80f      	bhi.n	800533e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	4b45      	ldr	r3, [pc, #276]	@ (800543c <HAL_DMA_Init+0x13c>)
 8005326:	4413      	add	r3, r2
 8005328:	4a45      	ldr	r2, [pc, #276]	@ (8005440 <HAL_DMA_Init+0x140>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	009a      	lsls	r2, r3, #2
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a42      	ldr	r2, [pc, #264]	@ (8005444 <HAL_DMA_Init+0x144>)
 800533a:	641a      	str	r2, [r3, #64]	@ 0x40
 800533c:	e00e      	b.n	800535c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	4b40      	ldr	r3, [pc, #256]	@ (8005448 <HAL_DMA_Init+0x148>)
 8005346:	4413      	add	r3, r2
 8005348:	4a3d      	ldr	r2, [pc, #244]	@ (8005440 <HAL_DMA_Init+0x140>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	009a      	lsls	r2, r3, #2
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a3c      	ldr	r2, [pc, #240]	@ (800544c <HAL_DMA_Init+0x14c>)
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005376:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800538c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa84 	bl	80058bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053bc:	d102      	bne.n	80053c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d010      	beq.n	8005404 <HAL_DMA_Init+0x104>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d80c      	bhi.n	8005404 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 faa4 	bl	8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	e008      	b.n	8005416 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40020407 	.word	0x40020407
 800543c:	bffdfff8 	.word	0xbffdfff8
 8005440:	cccccccd 	.word	0xcccccccd
 8005444:	40020000 	.word	0x40020000
 8005448:	bffdfbf8 	.word	0xbffdfbf8
 800544c:	40020400 	.word	0x40020400

08005450 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_DMA_Start_IT+0x20>
 800546c:	2302      	movs	r3, #2
 800546e:	e066      	b.n	800553e <HAL_DMA_Start_IT+0xee>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d155      	bne.n	8005530 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f9c9 	bl	8005840 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 020e 	orr.w	r2, r2, #14
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e00f      	b.n	80054e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0204 	bic.w	r2, r2, #4
 80054d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 020a 	orr.w	r2, r2, #10
 80054e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005504:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800551c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e005      	b.n	800553c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005538:	2302      	movs	r3, #2
 800553a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d005      	beq.n	800556a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2204      	movs	r2, #4
 8005562:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
 8005568:	e037      	b.n	80055da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 020e 	bic.w	r2, r2, #14
 8005578:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005588:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	f003 021f 	and.w	r2, r3, #31
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	2101      	movs	r1, #1
 80055a8:	fa01 f202 	lsl.w	r2, r1, r2
 80055ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00c      	beq.n	80055da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d00d      	beq.n	800562c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2204      	movs	r2, #4
 8005614:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	e047      	b.n	80056bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 020e 	bic.w	r2, r2, #14
 800563a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005656:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005660:	f003 021f 	and.w	r2, r3, #31
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f202 	lsl.w	r2, r1, r2
 800566e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005678:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005690:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800569a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4798      	blx	r3
    }
  }
  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2204      	movs	r2, #4
 80056e8:	409a      	lsls	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d026      	beq.n	8005740 <HAL_DMA_IRQHandler+0x7a>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d021      	beq.n	8005740 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0204 	bic.w	r2, r2, #4
 8005718:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f003 021f 	and.w	r2, r3, #31
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	2104      	movs	r1, #4
 8005728:	fa01 f202 	lsl.w	r2, r1, r2
 800572c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	2b00      	cmp	r3, #0
 8005734:	d071      	beq.n	800581a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800573e:	e06c      	b.n	800581a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	2202      	movs	r2, #2
 800574a:	409a      	lsls	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d02e      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d029      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 020a 	bic.w	r2, r2, #10
 800577a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005788:	f003 021f 	and.w	r2, r3, #31
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005790:	2102      	movs	r1, #2
 8005792:	fa01 f202 	lsl.w	r2, r1, r2
 8005796:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d038      	beq.n	800581a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057b0:	e033      	b.n	800581a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2208      	movs	r2, #8
 80057bc:	409a      	lsls	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02a      	beq.n	800581c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d025      	beq.n	800581c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 020e 	bic.w	r2, r2, #14
 80057de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e4:	f003 021f 	and.w	r2, r3, #31
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f202 	lsl.w	r2, r1, r2
 80057f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800581a:	bf00      	nop
 800581c:	bf00      	nop
}
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005832:	b2db      	uxtb	r3, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005856:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	f003 021f 	and.w	r2, r3, #31
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f202 	lsl.w	r2, r1, r2
 800587c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b10      	cmp	r3, #16
 800588c:	d108      	bne.n	80058a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800589e:	e007      	b.n	80058b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	4b16      	ldr	r3, [pc, #88]	@ (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d802      	bhi.n	80058d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058d0:	4b15      	ldr	r3, [pc, #84]	@ (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e001      	b.n	80058da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	3b08      	subs	r3, #8
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	009a      	lsls	r2, r3, #2
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a0b      	ldr	r2, [pc, #44]	@ (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005906:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2201      	movs	r2, #1
 8005910:	409a      	lsls	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40020407 	.word	0x40020407
 8005928:	40020800 	.word	0x40020800
 800592c:	40020820 	.word	0x40020820
 8005930:	cccccccd 	.word	0xcccccccd
 8005934:	40020880 	.word	0x40020880

08005938 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a08      	ldr	r2, [pc, #32]	@ (800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800595a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b01      	subs	r3, #1
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2201      	movs	r2, #1
 8005966:	409a      	lsls	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	1000823f 	.word	0x1000823f
 800597c:	40020940 	.word	0x40020940

08005980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800598e:	e15a      	b.n	8005c46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2101      	movs	r1, #1
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 814c 	beq.w	8005c40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d005      	beq.n	80059c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d130      	bne.n	8005a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	2203      	movs	r2, #3
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4013      	ands	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059f6:	2201      	movs	r2, #1
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0201 	and.w	r2, r3, #1
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d017      	beq.n	8005a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	2203      	movs	r2, #3
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d123      	bne.n	8005ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	08da      	lsrs	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3208      	adds	r2, #8
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	220f      	movs	r2, #15
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	08da      	lsrs	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3208      	adds	r2, #8
 8005aac:	6939      	ldr	r1, [r7, #16]
 8005aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	2203      	movs	r2, #3
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 0203 	and.w	r2, r3, #3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80a6 	beq.w	8005c40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c64 <HAL_GPIO_Init+0x2e4>)
 8005af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af8:	4a5a      	ldr	r2, [pc, #360]	@ (8005c64 <HAL_GPIO_Init+0x2e4>)
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b00:	4b58      	ldr	r3, [pc, #352]	@ (8005c64 <HAL_GPIO_Init+0x2e4>)
 8005b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b0c:	4a56      	ldr	r2, [pc, #344]	@ (8005c68 <HAL_GPIO_Init+0x2e8>)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	089b      	lsrs	r3, r3, #2
 8005b12:	3302      	adds	r3, #2
 8005b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	220f      	movs	r2, #15
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b36:	d01f      	beq.n	8005b78 <HAL_GPIO_Init+0x1f8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8005c6c <HAL_GPIO_Init+0x2ec>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d019      	beq.n	8005b74 <HAL_GPIO_Init+0x1f4>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a4b      	ldr	r2, [pc, #300]	@ (8005c70 <HAL_GPIO_Init+0x2f0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <HAL_GPIO_Init+0x1f0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c74 <HAL_GPIO_Init+0x2f4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00d      	beq.n	8005b6c <HAL_GPIO_Init+0x1ec>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a49      	ldr	r2, [pc, #292]	@ (8005c78 <HAL_GPIO_Init+0x2f8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <HAL_GPIO_Init+0x1e8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a48      	ldr	r2, [pc, #288]	@ (8005c7c <HAL_GPIO_Init+0x2fc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d101      	bne.n	8005b64 <HAL_GPIO_Init+0x1e4>
 8005b60:	2305      	movs	r3, #5
 8005b62:	e00a      	b.n	8005b7a <HAL_GPIO_Init+0x1fa>
 8005b64:	2306      	movs	r3, #6
 8005b66:	e008      	b.n	8005b7a <HAL_GPIO_Init+0x1fa>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	e006      	b.n	8005b7a <HAL_GPIO_Init+0x1fa>
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e004      	b.n	8005b7a <HAL_GPIO_Init+0x1fa>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e002      	b.n	8005b7a <HAL_GPIO_Init+0x1fa>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_GPIO_Init+0x1fa>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	f002 0203 	and.w	r2, r2, #3
 8005b80:	0092      	lsls	r2, r2, #2
 8005b82:	4093      	lsls	r3, r2
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b8a:	4937      	ldr	r1, [pc, #220]	@ (8005c68 <HAL_GPIO_Init+0x2e8>)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	3302      	adds	r3, #2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b98:	4b39      	ldr	r3, [pc, #228]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bbc:	4a30      	ldr	r2, [pc, #192]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005be6:	4a26      	ldr	r2, [pc, #152]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005bec:	4b24      	ldr	r3, [pc, #144]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c10:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c16:	4b1a      	ldr	r3, [pc, #104]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c3a:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <HAL_GPIO_Init+0x300>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3301      	adds	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f47f ae9d 	bne.w	8005990 <HAL_GPIO_Init+0x10>
  }
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	48000400 	.word	0x48000400
 8005c70:	48000800 	.word	0x48000800
 8005c74:	48000c00 	.word	0x48000c00
 8005c78:	48001000 	.word	0x48001000
 8005c7c:	48001400 	.word	0x48001400
 8005c80:	40010400 	.word	0x40010400

08005c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	807b      	strh	r3, [r7, #2]
 8005c90:	4613      	mov	r3, r2
 8005c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c94:	787b      	ldrb	r3, [r7, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ca0:	e002      	b.n	8005ca8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e08d      	b.n	8005de2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fb9a 	bl	8002414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2224      	movs	r2, #36	@ 0x24
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d107      	bne.n	8005d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e006      	b.n	8005d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d108      	bne.n	8005d56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	e007      	b.n	8005d66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	@ 0x28
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	460b      	mov	r3, r1
 8005dfa:	817b      	strh	r3, [r7, #10]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	f040 80ef 	bne.w	8005ff0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e20:	d101      	bne.n	8005e26 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
 8005e24:	e0e5      	b.n	8005ff2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0de      	b.n	8005ff2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2221      	movs	r2, #33	@ 0x21
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2210      	movs	r2, #16
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	893a      	ldrh	r2, [r7, #8]
 8005e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a66      	ldr	r2, [pc, #408]	@ (8005ffc <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005e62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a66      	ldr	r2, [pc, #408]	@ (8006000 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005e68:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2bff      	cmp	r3, #255	@ 0xff
 8005e72:	d906      	bls.n	8005e82 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	22ff      	movs	r2, #255	@ 0xff
 8005e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e007      	b.n	8005e92 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e90:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01a      	beq.n	8005ed0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d074      	beq.n	8005fc2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee4:	4a47      	ldr	r2, [pc, #284]	@ (8006004 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	4a46      	ldr	r2, [pc, #280]	@ (8006008 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005eee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efc:	2200      	movs	r2, #0
 8005efe:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005f10:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005f16:	f7ff fa9b 	bl	8005450 <HAL_DMA_Start_IT>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d13a      	bne.n	8005f9a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005f24:	e013      	b.n	8005f4e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e051      	b.n	8005ff2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	3301      	adds	r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	8979      	ldrh	r1, [r7, #10]
 8005f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800600c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f001 fba5 	bl	80076b0 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005f80:	2110      	movs	r1, #16
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 fbc6 	bl	8007714 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e028      	b.n	8005fec <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fae:	f043 0210 	orr.w	r2, r3, #16
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e017      	b.n	8005ff2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a12      	ldr	r2, [pc, #72]	@ (8006010 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005fc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	8979      	ldrh	r1, [r7, #10]
 8005fce:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f001 fb6a 	bl	80076b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 fb94 	bl	8007714 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	ffff0000 	.word	0xffff0000
 8006000:	0800662f 	.word	0x0800662f
 8006004:	080075af 	.word	0x080075af
 8006008:	08007645 	.word	0x08007645
 800600c:	80002000 	.word	0x80002000
 8006010:	080061ef 	.word	0x080061ef

08006014 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
  }
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00f      	beq.n	800608a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006078:	f043 0201 	orr.w	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006088:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00f      	beq.n	80060b4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00f      	beq.n	80060de <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	f043 0202 	orr.w	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 030b 	and.w	r3, r3, #11
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 f921 	bl	8007338 <I2C_ITError>
  }
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	70fb      	strb	r3, [r7, #3]
 8006146:	4613      	mov	r3, r2
 8006148:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c8:	b2db      	uxtb	r3, r3
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b088      	sub	sp, #32
 80061f2:	af02      	add	r7, sp, #8
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <I2C_Master_ISR_IT+0x1e>
 8006208:	2302      	movs	r3, #2
 800620a:	e113      	b.n	8006434 <I2C_Master_ISR_IT+0x246>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	d012      	beq.n	8006244 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2210      	movs	r2, #16
 800622e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006234:	f043 0204 	orr.w	r2, r3, #4
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 f992 	bl	8007566 <I2C_Flush_TXDR>
 8006242:	e0e4      	b.n	800640e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d022      	beq.n	8006294 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01d      	beq.n	8006294 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0304 	bic.w	r3, r3, #4
 800625e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006292:	e0bc      	b.n	800640e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d128      	bne.n	80062f0 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d023      	beq.n	80062f0 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01e      	beq.n	80062f0 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80a8 	beq.w	800640e <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80062ee:	e08e      	b.n	800640e <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d05c      	beq.n	80063b4 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006300:	2b00      	cmp	r3, #0
 8006302:	d057      	beq.n	80063b4 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d040      	beq.n	8006390 <I2C_Master_ISR_IT+0x1a2>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13c      	bne.n	8006390 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006322:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2bff      	cmp	r3, #255	@ 0xff
 800632c:	d90e      	bls.n	800634c <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	22ff      	movs	r2, #255	@ 0xff
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006338:	b2da      	uxtb	r2, r3
 800633a:	8a79      	ldrh	r1, [r7, #18]
 800633c:	2300      	movs	r3, #0
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 f9b3 	bl	80076b0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800634a:	e032      	b.n	80063b2 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800635e:	d00b      	beq.n	8006378 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006364:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800636a:	8a79      	ldrh	r1, [r7, #18]
 800636c:	2000      	movs	r0, #0
 800636e:	9000      	str	r0, [sp, #0]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f001 f99d 	bl	80076b0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006376:	e01c      	b.n	80063b2 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	b2da      	uxtb	r2, r3
 800637e:	8a79      	ldrh	r1, [r7, #18]
 8006380:	2300      	movs	r3, #0
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f001 f991 	bl	80076b0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638e:	e010      	b.n	80063b2 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800639e:	d003      	beq.n	80063a8 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fcb0 	bl	8006d06 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063a6:	e032      	b.n	800640e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063a8:	2140      	movs	r1, #64	@ 0x40
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 ffc4 	bl	8007338 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063b0:	e02d      	b.n	800640e <I2C_Master_ISR_IT+0x220>
 80063b2:	e02c      	b.n	800640e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d027      	beq.n	800640e <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d022      	beq.n	800640e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d119      	bne.n	8006406 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e0:	d015      	beq.n	800640e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063ea:	d108      	bne.n	80063fe <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063fa:	605a      	str	r2, [r3, #4]
 80063fc:	e007      	b.n	800640e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fc81 	bl	8006d06 <I2C_ITMasterSeqCplt>
 8006404:	e003      	b.n	800640e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006406:	2140      	movs	r1, #64	@ 0x40
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 ff95 	bl	8007338 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fd07 	bl	8006e38 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <I2C_Slave_ISR_IT+0x24>
 800645c:	2302      	movs	r3, #2
 800645e:	e0e2      	b.n	8006626 <I2C_Slave_ISR_IT+0x1ea>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fda2 	bl	8006fc8 <I2C_ITSlaveCplt>
 8006484:	e0ca      	b.n	800661c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d04b      	beq.n	8006528 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006496:	2b00      	cmp	r3, #0
 8006498:	d046      	beq.n	8006528 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d128      	bne.n	80064f6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b28      	cmp	r3, #40	@ 0x28
 80064ae:	d108      	bne.n	80064c2 <I2C_Slave_ISR_IT+0x86>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064b6:	d104      	bne.n	80064c2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80064b8:	6939      	ldr	r1, [r7, #16]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fee8 	bl	8007290 <I2C_ITListenCplt>
 80064c0:	e031      	b.n	8006526 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b29      	cmp	r3, #41	@ 0x29
 80064cc:	d10e      	bne.n	80064ec <I2C_Slave_ISR_IT+0xb0>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064d4:	d00a      	beq.n	80064ec <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f001 f841 	bl	8007566 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fc4b 	bl	8006d80 <I2C_ITSlaveSeqCplt>
 80064ea:	e01c      	b.n	8006526 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2210      	movs	r2, #16
 80064f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80064f4:	e08f      	b.n	8006616 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2210      	movs	r2, #16
 80064fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <I2C_Slave_ISR_IT+0xdc>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006516:	d17e      	bne.n	8006616 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651c:	4619      	mov	r1, r3
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 ff0a 	bl	8007338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006524:	e077      	b.n	8006616 <I2C_Slave_ISR_IT+0x1da>
 8006526:	e076      	b.n	8006616 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d02f      	beq.n	8006592 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006538:	2b00      	cmp	r3, #0
 800653a:	d02a      	beq.n	8006592 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d018      	beq.n	8006578 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d14b      	bne.n	800661a <I2C_Slave_ISR_IT+0x1de>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006588:	d047      	beq.n	800661a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fbf8 	bl	8006d80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006590:	e043      	b.n	800661a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80065a6:	6939      	ldr	r1, [r7, #16]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fb28 	bl	8006bfe <I2C_ITAddrCplt>
 80065ae:	e035      	b.n	800661c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d030      	beq.n	800661c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d02b      	beq.n	800661c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065fe:	e00d      	b.n	800661c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006606:	d002      	beq.n	800660e <I2C_Slave_ISR_IT+0x1d2>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fbb6 	bl	8006d80 <I2C_ITSlaveSeqCplt>
 8006614:	e002      	b.n	800661c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800661a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b088      	sub	sp, #32
 8006632:	af02      	add	r7, sp, #8
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <I2C_Master_ISR_DMA+0x1a>
 8006644:	2302      	movs	r3, #2
 8006646:	e0d9      	b.n	80067fc <I2C_Master_ISR_DMA+0x1ce>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2210      	movs	r2, #16
 800666a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006678:	2120      	movs	r1, #32
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f001 f84a 	bl	8007714 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 ff70 	bl	8007566 <I2C_Flush_TXDR>
 8006686:	e0b4      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d071      	beq.n	8006776 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006698:	2b00      	cmp	r3, #0
 800669a:	d06c      	beq.n	8006776 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066aa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d04e      	beq.n	8006754 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2bff      	cmp	r3, #255	@ 0xff
 80066cc:	d906      	bls.n	80066dc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	22ff      	movs	r2, #255	@ 0xff
 80066d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80066d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e010      	b.n	80066fe <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066ee:	d003      	beq.n	80066f8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e002      	b.n	80066fe <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80066f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066fc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006702:	b2da      	uxtb	r2, r3
 8006704:	8a79      	ldrh	r1, [r7, #18]
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 ffcf 	bl	80076b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b22      	cmp	r3, #34	@ 0x22
 800672e:	d108      	bne.n	8006742 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800673e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006740:	e057      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006750:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006752:	e04e      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006762:	d003      	beq.n	800676c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 face 	bl	8006d06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800676a:	e042      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800676c:	2140      	movs	r1, #64	@ 0x40
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fde2 	bl	8007338 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006774:	e03d      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d028      	beq.n	80067d2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006786:	2b00      	cmp	r3, #0
 8006788:	d023      	beq.n	80067d2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d119      	bne.n	80067c8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067a2:	d025      	beq.n	80067f0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067ac:	d108      	bne.n	80067c0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067bc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80067be:	e017      	b.n	80067f0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 faa0 	bl	8006d06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80067c6:	e013      	b.n	80067f0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067c8:	2140      	movs	r1, #64	@ 0x40
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fdb4 	bl	8007338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067d0:	e00e      	b.n	80067f0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fb25 	bl	8006e38 <I2C_ITMasterCplt>
 80067ee:	e000      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80067f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006810:	4b8d      	ldr	r3, [pc, #564]	@ (8006a48 <I2C_Mem_ISR_DMA+0x244>)
 8006812:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <I2C_Mem_ISR_DMA+0x1e>
 800681e:	2302      	movs	r3, #2
 8006820:	e10e      	b.n	8006a40 <I2C_Mem_ISR_DMA+0x23c>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d016      	beq.n	8006862 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2210      	movs	r2, #16
 8006844:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006852:	2120      	movs	r1, #32
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 ff5d 	bl	8007714 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fe83 	bl	8007566 <I2C_Flush_TXDR>
 8006860:	e0e9      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800687e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	651a      	str	r2, [r3, #80]	@ 0x50
 8006888:	e0d5      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05f      	beq.n	8006954 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800689a:	2b00      	cmp	r3, #0
 800689c:	d05a      	beq.n	8006954 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800689e:	2101      	movs	r1, #1
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 ffbb 	bl	800781c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80068a6:	2110      	movs	r1, #16
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 ff33 	bl	8007714 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d048      	beq.n	800694a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2bff      	cmp	r3, #255	@ 0xff
 80068c0:	d910      	bls.n	80068e4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	22ff      	movs	r2, #255	@ 0xff
 80068c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068cc:	b299      	uxth	r1, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fee7 	bl	80076b0 <I2C_TransferConfig>
 80068e2:	e011      	b.n	8006908 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f2:	b299      	uxth	r1, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	2300      	movs	r3, #0
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fed4 	bl	80076b0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b22      	cmp	r3, #34	@ 0x22
 8006924:	d108      	bne.n	8006938 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006934:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006936:	e07e      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006946:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006948:	e075      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800694a:	2140      	movs	r1, #64	@ 0x40
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fcf3 	bl	8007338 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006952:	e070      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d05d      	beq.n	8006a1a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006964:	2b00      	cmp	r3, #0
 8006966:	d058      	beq.n	8006a1a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006968:	2101      	movs	r1, #1
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 ff56 	bl	800781c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006970:	2110      	movs	r1, #16
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fece 	bl	8007714 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b22      	cmp	r3, #34	@ 0x22
 8006982:	d101      	bne.n	8006988 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006984:	4b31      	ldr	r3, [pc, #196]	@ (8006a4c <I2C_Mem_ISR_DMA+0x248>)
 8006986:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2bff      	cmp	r3, #255	@ 0xff
 8006990:	d910      	bls.n	80069b4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22ff      	movs	r2, #255	@ 0xff
 8006996:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699c:	b299      	uxth	r1, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fe7f 	bl	80076b0 <I2C_TransferConfig>
 80069b2:	e011      	b.n	80069d8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c2:	b299      	uxth	r1, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fe6c 	bl	80076b0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b22      	cmp	r3, #34	@ 0x22
 80069f4:	d108      	bne.n	8006a08 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a04:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a06:	e016      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a16:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a18:	e00d      	b.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fa01 	bl	8006e38 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	80002000 	.word	0x80002000
 8006a4c:	80002400 	.word	0x80002400

08006a50 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <I2C_Slave_ISR_DMA+0x24>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e0c0      	b.n	8006bf6 <I2C_Slave_ISR_DMA+0x1a6>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fa98 	bl	8006fc8 <I2C_ITSlaveCplt>
 8006a98:	e0a8      	b.n	8006bec <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8095 	beq.w	8006bd0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 808f 	beq.w	8006bd0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d07d      	beq.n	8006bc2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00c      	beq.n	8006b0a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d128      	bne.n	8006b62 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b28      	cmp	r3, #40	@ 0x28
 8006b1a:	d108      	bne.n	8006b2e <I2C_Slave_ISR_DMA+0xde>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b22:	d104      	bne.n	8006b2e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fbb2 	bl	8007290 <I2C_ITListenCplt>
 8006b2c:	e048      	b.n	8006bc0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b29      	cmp	r3, #41	@ 0x29
 8006b38:	d10e      	bne.n	8006b58 <I2C_Slave_ISR_DMA+0x108>
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b40:	d00a      	beq.n	8006b58 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2210      	movs	r2, #16
 8006b48:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fd0b 	bl	8007566 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f915 	bl	8006d80 <I2C_ITSlaveSeqCplt>
 8006b56:	e033      	b.n	8006bc0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2210      	movs	r2, #16
 8006b5e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006b60:	e034      	b.n	8006bcc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2210      	movs	r2, #16
 8006b68:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6e:	f043 0204 	orr.w	r2, r3, #4
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <I2C_Slave_ISR_DMA+0x13c>
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b8a:	d11f      	bne.n	8006bcc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b21      	cmp	r3, #33	@ 0x21
 8006b90:	d002      	beq.n	8006b98 <I2C_Slave_ISR_DMA+0x148>
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b29      	cmp	r3, #41	@ 0x29
 8006b96:	d103      	bne.n	8006ba0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2221      	movs	r2, #33	@ 0x21
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b9e:	e008      	b.n	8006bb2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	2b22      	cmp	r3, #34	@ 0x22
 8006ba4:	d002      	beq.n	8006bac <I2C_Slave_ISR_DMA+0x15c>
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006baa:	d102      	bne.n	8006bb2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2222      	movs	r2, #34	@ 0x22
 8006bb0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fbbd 	bl	8007338 <I2C_ITError>
      if (treatdmanack == 1U)
 8006bbe:	e005      	b.n	8006bcc <I2C_Slave_ISR_DMA+0x17c>
 8006bc0:	e004      	b.n	8006bcc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bca:	e00f      	b.n	8006bec <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006bcc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bce:	e00d      	b.n	8006bec <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d008      	beq.n	8006bec <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f809 	bl	8006bfe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c14:	2b28      	cmp	r3, #40	@ 0x28
 8006c16:	d16a      	bne.n	8006cee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006c36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006c52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d138      	bne.n	8006cce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006c5c:	897b      	ldrh	r3, [r7, #10]
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	89bb      	ldrh	r3, [r7, #12]
 8006c64:	4053      	eors	r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f003 0306 	and.w	r3, r3, #6
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d11c      	bne.n	8006caa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006c70:	897b      	ldrh	r3, [r7, #10]
 8006c72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d13b      	bne.n	8006cfe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006c9c:	89ba      	ldrh	r2, [r7, #12]
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fa49 	bl	800613a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ca8:	e029      	b.n	8006cfe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fdb2 	bl	800781c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006cc0:	89ba      	ldrh	r2, [r7, #12]
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fa37 	bl	800613a <HAL_I2C_AddrCallback>
}
 8006ccc:	e017      	b.n	8006cfe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fda2 	bl	800781c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ce0:	89ba      	ldrh	r2, [r7, #12]
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fa27 	bl	800613a <HAL_I2C_AddrCallback>
}
 8006cec:	e007      	b.n	8006cfe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b21      	cmp	r3, #33	@ 0x21
 8006d20:	d115      	bne.n	8006d4e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2211      	movs	r2, #17
 8006d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d36:	2101      	movs	r1, #1
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fd6f 	bl	800781c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fa fa30 	bl	80011ac <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d4c:	e014      	b.n	8006d78 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2212      	movs	r2, #18
 8006d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d62:	2102      	movs	r1, #2
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fd59 	bl	800781c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff f9c3 	bl	80060fe <HAL_I2C_MasterRxCpltCallback>
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e00c      	b.n	8006dce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dcc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b29      	cmp	r3, #41	@ 0x29
 8006dd8:	d112      	bne.n	8006e00 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2228      	movs	r2, #40	@ 0x28
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2221      	movs	r2, #33	@ 0x21
 8006de6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd16 	bl	800781c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff f98a 	bl	8006112 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dfe:	e017      	b.n	8006e30 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e0a:	d111      	bne.n	8006e30 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2228      	movs	r2, #40	@ 0x28
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2222      	movs	r2, #34	@ 0x22
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fcfd 	bl	800781c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff f97b 	bl	8006126 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b21      	cmp	r3, #33	@ 0x21
 8006e58:	d107      	bne.n	8006e6a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcdd 	bl	800781c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2211      	movs	r2, #17
 8006e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e68:	e00c      	b.n	8006e84 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b22      	cmp	r3, #34	@ 0x22
 8006e74:	d106      	bne.n	8006e84 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e76:	2102      	movs	r1, #2
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fccf 	bl	800781c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2212      	movs	r2, #18
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6859      	ldr	r1, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8006fc0 <I2C_ITMasterCplt+0x188>)
 8006e90:	400b      	ands	r3, r1
 8006e92:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a49      	ldr	r2, [pc, #292]	@ (8006fc4 <I2C_ITMasterCplt+0x18c>)
 8006e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b60      	cmp	r3, #96	@ 0x60
 8006ec8:	d10a      	bne.n	8006ee0 <I2C_ITMasterCplt+0xa8>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006ede:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fb40 	bl	8007566 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b60      	cmp	r3, #96	@ 0x60
 8006ef6:	d002      	beq.n	8006efe <I2C_ITMasterCplt+0xc6>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fa17 	bl	8007338 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f0a:	e054      	b.n	8006fb6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b21      	cmp	r3, #33	@ 0x21
 8006f16:	d124      	bne.n	8006f62 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b40      	cmp	r3, #64	@ 0x40
 8006f30:	d10b      	bne.n	8006f4a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff f911 	bl	800616a <HAL_I2C_MemTxCpltCallback>
}
 8006f48:	e035      	b.n	8006fb6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa f926 	bl	80011ac <HAL_I2C_MasterTxCpltCallback>
}
 8006f60:	e029      	b.n	8006fb6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b22      	cmp	r3, #34	@ 0x22
 8006f6c:	d123      	bne.n	8006fb6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b40      	cmp	r3, #64	@ 0x40
 8006f86:	d10b      	bne.n	8006fa0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff f8f0 	bl	800617e <HAL_I2C_MemRxCpltCallback>
}
 8006f9e:	e00a      	b.n	8006fb6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff f8a4 	bl	80060fe <HAL_I2C_MasterRxCpltCallback>
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	fe00e800 	.word	0xfe00e800
 8006fc4:	ffff0000 	.word	0xffff0000

08006fc8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	2b21      	cmp	r3, #33	@ 0x21
 8006ff8:	d002      	beq.n	8007000 <I2C_ITSlaveCplt+0x38>
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	2b29      	cmp	r3, #41	@ 0x29
 8006ffe:	d108      	bne.n	8007012 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007000:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fc09 	bl	800781c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2221      	movs	r2, #33	@ 0x21
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007010:	e019      	b.n	8007046 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b22      	cmp	r3, #34	@ 0x22
 8007016:	d002      	beq.n	800701e <I2C_ITSlaveCplt+0x56>
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	2b2a      	cmp	r3, #42	@ 0x2a
 800701c:	d108      	bne.n	8007030 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800701e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fbfa 	bl	800781c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2222      	movs	r2, #34	@ 0x22
 800702c:	631a      	str	r2, [r3, #48]	@ 0x30
 800702e:	e00a      	b.n	8007046 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	2b28      	cmp	r3, #40	@ 0x28
 8007034:	d107      	bne.n	8007046 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007036:	f248 0103 	movw	r1, #32771	@ 0x8003
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fbee 	bl	800781c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007054:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6859      	ldr	r1, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b89      	ldr	r3, [pc, #548]	@ (8007288 <I2C_ITSlaveCplt+0x2c0>)
 8007062:	400b      	ands	r3, r1
 8007064:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa7d 	bl	8007566 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d013      	beq.n	800709e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007084:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01f      	beq.n	80070ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800709c:	e017      	b.n	80070ce <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d012      	beq.n	80070ce <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0304 	bic.w	r3, r3, #4
 80070de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007128:	f043 0204 	orr.w	r2, r3, #4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d049      	beq.n	80071ce <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007140:	2b00      	cmp	r3, #0
 8007142:	d044      	beq.n	80071ce <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d128      	bne.n	80071a0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b28      	cmp	r3, #40	@ 0x28
 8007158:	d108      	bne.n	800716c <I2C_ITSlaveCplt+0x1a4>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007160:	d104      	bne.n	800716c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007162:	6979      	ldr	r1, [r7, #20]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f893 	bl	8007290 <I2C_ITListenCplt>
 800716a:	e030      	b.n	80071ce <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b29      	cmp	r3, #41	@ 0x29
 8007176:	d10e      	bne.n	8007196 <I2C_ITSlaveCplt+0x1ce>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800717e:	d00a      	beq.n	8007196 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2210      	movs	r2, #16
 8007186:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f9ec 	bl	8007566 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fdf6 	bl	8006d80 <I2C_ITSlaveSeqCplt>
 8007194:	e01b      	b.n	80071ce <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2210      	movs	r2, #16
 800719c:	61da      	str	r2, [r3, #28]
 800719e:	e016      	b.n	80071ce <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2210      	movs	r2, #16
 80071a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ac:	f043 0204 	orr.w	r2, r3, #4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <I2C_ITSlaveCplt+0x1fa>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071c0:	d105      	bne.n	80071ce <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8b5 	bl	8007338 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8a4 	bl	8007338 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b28      	cmp	r3, #40	@ 0x28
 80071fa:	d141      	bne.n	8007280 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f846 	bl	8007290 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007204:	e03c      	b.n	8007280 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800720e:	d014      	beq.n	800723a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fdb5 	bl	8006d80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1c      	ldr	r2, [pc, #112]	@ (800728c <I2C_ITSlaveCplt+0x2c4>)
 800721a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fe ff8f 	bl	8006156 <HAL_I2C_ListenCpltCallback>
}
 8007238:	e022      	b.n	8007280 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b22      	cmp	r3, #34	@ 0x22
 8007244:	d10e      	bne.n	8007264 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fe ff62 	bl	8006126 <HAL_I2C_SlaveRxCpltCallback>
}
 8007262:	e00d      	b.n	8007280 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fe ff49 	bl	8006112 <HAL_I2C_SlaveTxCpltCallback>
}
 8007280:	bf00      	nop
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	fe00e800 	.word	0xfe00e800
 800728c:	ffff0000 	.word	0xffff0000

08007290 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a25      	ldr	r2, [pc, #148]	@ (8007334 <I2C_ITListenCplt+0xa4>)
 800729e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d022      	beq.n	800730c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d012      	beq.n	800730c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007304:	f043 0204 	orr.w	r2, r3, #4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800730c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fa83 	bl	800781c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2210      	movs	r2, #16
 800731c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fe ff15 	bl	8006156 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	ffff0000 	.word	0xffff0000

08007338 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007348:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a6d      	ldr	r2, [pc, #436]	@ (800750c <I2C_ITError+0x1d4>)
 8007356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b28      	cmp	r3, #40	@ 0x28
 800736e:	d005      	beq.n	800737c <I2C_ITError+0x44>
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b29      	cmp	r3, #41	@ 0x29
 8007374:	d002      	beq.n	800737c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b2a      	cmp	r3, #42	@ 0x2a
 800737a:	d10b      	bne.n	8007394 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800737c:	2103      	movs	r1, #3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa4c 	bl	800781c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2228      	movs	r2, #40	@ 0x28
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a60      	ldr	r2, [pc, #384]	@ (8007510 <I2C_ITError+0x1d8>)
 8007390:	635a      	str	r2, [r3, #52]	@ 0x34
 8007392:	e030      	b.n	80073f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007394:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa3f 	bl	800781c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f8e1 	bl	8007566 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b60      	cmp	r3, #96	@ 0x60
 80073ae:	d01f      	beq.n	80073f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d114      	bne.n	80073f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b10      	cmp	r3, #16
 80073d2:	d109      	bne.n	80073e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2210      	movs	r2, #16
 80073da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e0:	f043 0204 	orr.w	r2, r3, #4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2220      	movs	r2, #32
 80073ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d039      	beq.n	8007478 <I2C_ITError+0x140>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b11      	cmp	r3, #17
 8007408:	d002      	beq.n	8007410 <I2C_ITError+0xd8>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b21      	cmp	r3, #33	@ 0x21
 800740e:	d133      	bne.n	8007478 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800741a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800741e:	d107      	bne.n	8007430 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800742e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe f9f5 	bl	8005824 <HAL_DMA_GetState>
 800743a:	4603      	mov	r3, r0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d017      	beq.n	8007470 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007444:	4a33      	ldr	r2, [pc, #204]	@ (8007514 <I2C_ITError+0x1dc>)
 8007446:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe f8cf 	bl	80055f8 <HAL_DMA_Abort_IT>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d04d      	beq.n	80074fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800746a:	4610      	mov	r0, r2
 800746c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800746e:	e045      	b.n	80074fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f851 	bl	8007518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007476:	e041      	b.n	80074fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d039      	beq.n	80074f4 <I2C_ITError+0x1bc>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b12      	cmp	r3, #18
 8007484:	d002      	beq.n	800748c <I2C_ITError+0x154>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b22      	cmp	r3, #34	@ 0x22
 800748a:	d133      	bne.n	80074f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800749a:	d107      	bne.n	80074ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe f9b7 	bl	8005824 <HAL_DMA_GetState>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d017      	beq.n	80074ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c0:	4a14      	ldr	r2, [pc, #80]	@ (8007514 <I2C_ITError+0x1dc>)
 80074c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe f891 	bl	80055f8 <HAL_DMA_Abort_IT>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d011      	beq.n	8007500 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80074e6:	4610      	mov	r0, r2
 80074e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074ea:	e009      	b.n	8007500 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f813 	bl	8007518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074f2:	e005      	b.n	8007500 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f80f 	bl	8007518 <I2C_TreatErrorCallback>
  }
}
 80074fa:	e002      	b.n	8007502 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007500:	bf00      	nop
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	ffff0000 	.word	0xffff0000
 8007510:	0800643d 	.word	0x0800643d
 8007514:	08007673 	.word	0x08007673

08007518 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b60      	cmp	r3, #96	@ 0x60
 800752a:	d10e      	bne.n	800754a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe fe2f 	bl	80061a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007548:	e009      	b.n	800755e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fe fe1a 	bl	8006192 <HAL_I2C_ErrorCallback>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b02      	cmp	r3, #2
 800757a:	d103      	bne.n	8007584 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2200      	movs	r2, #0
 8007582:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b01      	cmp	r3, #1
 8007590:	d007      	beq.n	80075a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0201 	orr.w	r2, r2, #1
 80075a0:	619a      	str	r2, [r3, #24]
  }
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80075ca:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80075d6:	2120      	movs	r1, #32
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f89b 	bl	8007714 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80075de:	e02d      	b.n	800763c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80075e8:	441a      	add	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2bff      	cmp	r3, #255	@ 0xff
 80075f6:	d903      	bls.n	8007600 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	22ff      	movs	r2, #255	@ 0xff
 80075fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80075fe:	e004      	b.n	800760a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	4619      	mov	r1, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3328      	adds	r3, #40	@ 0x28
 800761a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007620:	f7fd ff16 	bl	8005450 <HAL_DMA_Start_IT>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800762a:	2110      	movs	r1, #16
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fe83 	bl	8007338 <I2C_ITError>
}
 8007632:	e003      	b.n	800763c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007634:	2140      	movs	r1, #64	@ 0x40
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f86c 	bl	8007714 <I2C_Enable_IRQ>
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007660:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007662:	2110      	movs	r1, #16
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff fe67 	bl	8007338 <I2C_ITError>
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768c:	2200      	movs	r2, #0
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769c:	2200      	movs	r2, #0
 800769e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff39 	bl	8007518 <I2C_TreatErrorCallback>
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	817b      	strh	r3, [r7, #10]
 80076be:	4613      	mov	r3, r2
 80076c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076c2:	897b      	ldrh	r3, [r7, #10]
 80076c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076c8:	7a7b      	ldrb	r3, [r7, #9]
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	4313      	orrs	r3, r2
 80076da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	0d5b      	lsrs	r3, r3, #21
 80076ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80076ee:	4b08      	ldr	r3, [pc, #32]	@ (8007710 <I2C_TransferConfig+0x60>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	43db      	mvns	r3, r3
 80076f4:	ea02 0103 	and.w	r1, r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007702:	bf00      	nop
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	03ff63ff 	.word	0x03ff63ff

08007714 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007728:	4a39      	ldr	r2, [pc, #228]	@ (8007810 <I2C_Enable_IRQ+0xfc>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d032      	beq.n	8007794 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007732:	4a38      	ldr	r2, [pc, #224]	@ (8007814 <I2C_Enable_IRQ+0x100>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d02d      	beq.n	8007794 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800773c:	4a36      	ldr	r2, [pc, #216]	@ (8007818 <I2C_Enable_IRQ+0x104>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d028      	beq.n	8007794 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007742:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007746:	2b00      	cmp	r3, #0
 8007748:	da03      	bge.n	8007752 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007750:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007752:	887b      	ldrh	r3, [r7, #2]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007762:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007764:	887b      	ldrh	r3, [r7, #2]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007774:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007776:	887b      	ldrh	r3, [r7, #2]
 8007778:	2b10      	cmp	r3, #16
 800777a:	d103      	bne.n	8007784 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007782:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007784:	887b      	ldrh	r3, [r7, #2]
 8007786:	2b20      	cmp	r3, #32
 8007788:	d133      	bne.n	80077f2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f043 0320 	orr.w	r3, r3, #32
 8007790:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007792:	e02e      	b.n	80077f2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007794:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007798:	2b00      	cmp	r3, #0
 800779a:	da03      	bge.n	80077a4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80077a2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80077b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80077b6:	887b      	ldrh	r3, [r7, #2]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80077c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80077c8:	887b      	ldrh	r3, [r7, #2]
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d103      	bne.n	80077d6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80077d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80077d6:	887b      	ldrh	r3, [r7, #2]
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d103      	bne.n	80077e4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80077e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80077e4:	887b      	ldrh	r3, [r7, #2]
 80077e6:	2b40      	cmp	r3, #64	@ 0x40
 80077e8:	d103      	bne.n	80077f2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6819      	ldr	r1, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	430a      	orrs	r2, r1
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	0800662f 	.word	0x0800662f
 8007814:	08006a51 	.word	0x08006a51
 8007818:	08006805 	.word	0x08006805

0800781c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800782c:	887b      	ldrh	r3, [r7, #2]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00f      	beq.n	8007856 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800783c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800784a:	2b28      	cmp	r3, #40	@ 0x28
 800784c:	d003      	beq.n	8007856 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007854:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007856:	887b      	ldrh	r3, [r7, #2]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00f      	beq.n	8007880 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007866:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007874:	2b28      	cmp	r3, #40	@ 0x28
 8007876:	d003      	beq.n	8007880 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800787e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	da03      	bge.n	8007890 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800788e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	2b10      	cmp	r3, #16
 8007894:	d103      	bne.n	800789e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800789c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800789e:	887b      	ldrh	r3, [r7, #2]
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d103      	bne.n	80078ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f043 0320 	orr.w	r3, r3, #32
 80078aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d103      	bne.n	80078ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	43da      	mvns	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	400a      	ands	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d138      	bne.n	8007960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e032      	b.n	8007962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2224      	movs	r2, #36	@ 0x24
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800792a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b20      	cmp	r3, #32
 8007982:	d139      	bne.n	80079f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800798e:	2302      	movs	r3, #2
 8007990:	e033      	b.n	80079fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	@ 0x24
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	e000      	b.n	80079fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079f8:	2302      	movs	r3, #2
  }
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d141      	bne.n	8007a9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a16:	4b4b      	ldr	r3, [pc, #300]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a22:	d131      	bne.n	8007a88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a24:	4b47      	ldr	r3, [pc, #284]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a2a:	4a46      	ldr	r2, [pc, #280]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a34:	4b43      	ldr	r3, [pc, #268]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a3c:	4a41      	ldr	r2, [pc, #260]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a44:	4b40      	ldr	r3, [pc, #256]	@ (8007b48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2232      	movs	r2, #50	@ 0x32
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8007b4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	0c9b      	lsrs	r3, r3, #18
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a5a:	e002      	b.n	8007a62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a62:	4b38      	ldr	r3, [pc, #224]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a6e:	d102      	bne.n	8007a76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f2      	bne.n	8007a5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a76:	4b33      	ldr	r3, [pc, #204]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a82:	d158      	bne.n	8007b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e057      	b.n	8007b38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a88:	4b2e      	ldr	r3, [pc, #184]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007a98:	e04d      	b.n	8007b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d141      	bne.n	8007b26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007aa2:	4b28      	ldr	r3, [pc, #160]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aae:	d131      	bne.n	8007b14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ab0:	4b24      	ldr	r3, [pc, #144]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab6:	4a23      	ldr	r2, [pc, #140]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007abc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ac0:	4b20      	ldr	r3, [pc, #128]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2232      	movs	r2, #50	@ 0x32
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
 8007ada:	4a1c      	ldr	r2, [pc, #112]	@ (8007b4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	0c9b      	lsrs	r3, r3, #18
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ae6:	e002      	b.n	8007aee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007aee:	4b15      	ldr	r3, [pc, #84]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afa:	d102      	bne.n	8007b02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f2      	bne.n	8007ae8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b02:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0e:	d112      	bne.n	8007b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e011      	b.n	8007b38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b14:	4b0b      	ldr	r3, [pc, #44]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b24:	e007      	b.n	8007b36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b26:	4b07      	ldr	r3, [pc, #28]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b2e:	4a05      	ldr	r2, [pc, #20]	@ (8007b44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40007000 	.word	0x40007000
 8007b48:	20000008 	.word	0x20000008
 8007b4c:	431bde83 	.word	0x431bde83

08007b50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4a04      	ldr	r2, [pc, #16]	@ (8007b6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b5e:	6093      	str	r3, [r2, #8]
}
 8007b60:	bf00      	nop
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40007000 	.word	0x40007000

08007b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e2fe      	b.n	8008180 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d075      	beq.n	8007c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b8e:	4b97      	ldr	r3, [pc, #604]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 030c 	and.w	r3, r3, #12
 8007b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b98:	4b94      	ldr	r3, [pc, #592]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	d102      	bne.n	8007bae <HAL_RCC_OscConfig+0x3e>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d002      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x44>
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d10b      	bne.n	8007bcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d05b      	beq.n	8007c78 <HAL_RCC_OscConfig+0x108>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d157      	bne.n	8007c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e2d9      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd4:	d106      	bne.n	8007be4 <HAL_RCC_OscConfig+0x74>
 8007bd6:	4b85      	ldr	r3, [pc, #532]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a84      	ldr	r2, [pc, #528]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	e01d      	b.n	8007c20 <HAL_RCC_OscConfig+0xb0>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bec:	d10c      	bne.n	8007c08 <HAL_RCC_OscConfig+0x98>
 8007bee:	4b7f      	ldr	r3, [pc, #508]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a7b      	ldr	r2, [pc, #492]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e00b      	b.n	8007c20 <HAL_RCC_OscConfig+0xb0>
 8007c08:	4b78      	ldr	r3, [pc, #480]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a77      	ldr	r2, [pc, #476]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	4b75      	ldr	r3, [pc, #468]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a74      	ldr	r2, [pc, #464]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d013      	beq.n	8007c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c28:	f7fb f882 	bl	8002d30 <HAL_GetTick>
 8007c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c30:	f7fb f87e 	bl	8002d30 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b64      	cmp	r3, #100	@ 0x64
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e29e      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c42:	4b6a      	ldr	r3, [pc, #424]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f0      	beq.n	8007c30 <HAL_RCC_OscConfig+0xc0>
 8007c4e:	e014      	b.n	8007c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c50:	f7fb f86e 	bl	8002d30 <HAL_GetTick>
 8007c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c58:	f7fb f86a 	bl	8002d30 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b64      	cmp	r3, #100	@ 0x64
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e28a      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c6a:	4b60      	ldr	r3, [pc, #384]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1f0      	bne.n	8007c58 <HAL_RCC_OscConfig+0xe8>
 8007c76:	e000      	b.n	8007c7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d075      	beq.n	8007d72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c86:	4b59      	ldr	r3, [pc, #356]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 030c 	and.w	r3, r3, #12
 8007c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c90:	4b56      	ldr	r3, [pc, #344]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b0c      	cmp	r3, #12
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x136>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d002      	beq.n	8007cac <HAL_RCC_OscConfig+0x13c>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d11f      	bne.n	8007cec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cac:	4b4f      	ldr	r3, [pc, #316]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x154>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e25d      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc4:	4b49      	ldr	r3, [pc, #292]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	061b      	lsls	r3, r3, #24
 8007cd2:	4946      	ldr	r1, [pc, #280]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007cd8:	4b45      	ldr	r3, [pc, #276]	@ (8007df0 <HAL_RCC_OscConfig+0x280>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fa fdf1 	bl	80028c4 <HAL_InitTick>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d043      	beq.n	8007d70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e249      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d023      	beq.n	8007d3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d00:	f7fb f816 	bl	8002d30 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d06:	e008      	b.n	8007d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d08:	f7fb f812 	bl	8002d30 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e232      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d1a:	4b34      	ldr	r3, [pc, #208]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0f0      	beq.n	8007d08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d26:	4b31      	ldr	r3, [pc, #196]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	061b      	lsls	r3, r3, #24
 8007d34:	492d      	ldr	r1, [pc, #180]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	604b      	str	r3, [r1, #4]
 8007d3a:	e01a      	b.n	8007d72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a2a      	ldr	r2, [pc, #168]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d48:	f7fa fff2 	bl	8002d30 <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d50:	f7fa ffee 	bl	8002d30 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e20e      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d62:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f0      	bne.n	8007d50 <HAL_RCC_OscConfig+0x1e0>
 8007d6e:	e000      	b.n	8007d72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d041      	beq.n	8007e02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d01c      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d86:	4b19      	ldr	r3, [pc, #100]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d8c:	4a17      	ldr	r2, [pc, #92]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fa ffcb 	bl	8002d30 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d9c:	e008      	b.n	8007db0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d9e:	f7fa ffc7 	bl	8002d30 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e1e7      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007db0:	4b0e      	ldr	r3, [pc, #56]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0ef      	beq.n	8007d9e <HAL_RCC_OscConfig+0x22e>
 8007dbe:	e020      	b.n	8007e02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dc6:	4a09      	ldr	r2, [pc, #36]	@ (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd0:	f7fa ffae 	bl	8002d30 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dd6:	e00d      	b.n	8007df4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dd8:	f7fa ffaa 	bl	8002d30 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d906      	bls.n	8007df4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e1ca      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
 8007dea:	bf00      	nop
 8007dec:	40021000 	.word	0x40021000
 8007df0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007df4:	4b8c      	ldr	r3, [pc, #560]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1ea      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80a6 	beq.w	8007f5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e10:	2300      	movs	r3, #0
 8007e12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e14:	4b84      	ldr	r3, [pc, #528]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_RCC_OscConfig+0x2b4>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <HAL_RCC_OscConfig+0x2b6>
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e36:	4b7c      	ldr	r3, [pc, #496]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e42:	2301      	movs	r3, #1
 8007e44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e46:	4b79      	ldr	r3, [pc, #484]	@ (800802c <HAL_RCC_OscConfig+0x4bc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d118      	bne.n	8007e84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e52:	4b76      	ldr	r3, [pc, #472]	@ (800802c <HAL_RCC_OscConfig+0x4bc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a75      	ldr	r2, [pc, #468]	@ (800802c <HAL_RCC_OscConfig+0x4bc>)
 8007e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e5e:	f7fa ff67 	bl	8002d30 <HAL_GetTick>
 8007e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e66:	f7fa ff63 	bl	8002d30 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e183      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e78:	4b6c      	ldr	r3, [pc, #432]	@ (800802c <HAL_RCC_OscConfig+0x4bc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d108      	bne.n	8007e9e <HAL_RCC_OscConfig+0x32e>
 8007e8c:	4b66      	ldr	r3, [pc, #408]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e92:	4a65      	ldr	r2, [pc, #404]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007e9c:	e024      	b.n	8007ee8 <HAL_RCC_OscConfig+0x378>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d110      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x358>
 8007ea6:	4b60      	ldr	r3, [pc, #384]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eac:	4a5e      	ldr	r2, [pc, #376]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007eae:	f043 0304 	orr.w	r3, r3, #4
 8007eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ec6:	e00f      	b.n	8007ee8 <HAL_RCC_OscConfig+0x378>
 8007ec8:	4b57      	ldr	r3, [pc, #348]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ece:	4a56      	ldr	r2, [pc, #344]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007ed0:	f023 0301 	bic.w	r3, r3, #1
 8007ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ed8:	4b53      	ldr	r3, [pc, #332]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ede:	4a52      	ldr	r2, [pc, #328]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007ee0:	f023 0304 	bic.w	r3, r3, #4
 8007ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d016      	beq.n	8007f1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef0:	f7fa ff1e 	bl	8002d30 <HAL_GetTick>
 8007ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ef6:	e00a      	b.n	8007f0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef8:	f7fa ff1a 	bl	8002d30 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e138      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f0e:	4b46      	ldr	r3, [pc, #280]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0ed      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x388>
 8007f1c:	e015      	b.n	8007f4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f1e:	f7fa ff07 	bl	8002d30 <HAL_GetTick>
 8007f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f24:	e00a      	b.n	8007f3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f26:	f7fa ff03 	bl	8002d30 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e121      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1ed      	bne.n	8007f26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f50:	4b35      	ldr	r3, [pc, #212]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f54:	4a34      	ldr	r2, [pc, #208]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d03c      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01c      	beq.n	8007faa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f70:	4b2d      	ldr	r3, [pc, #180]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f76:	4a2c      	ldr	r2, [pc, #176]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f80:	f7fa fed6 	bl	8002d30 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f88:	f7fa fed2 	bl	8002d30 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e0f2      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f9a:	4b23      	ldr	r3, [pc, #140]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0ef      	beq.n	8007f88 <HAL_RCC_OscConfig+0x418>
 8007fa8:	e01b      	b.n	8007fe2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007faa:	4b1f      	ldr	r3, [pc, #124]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fba:	f7fa feb9 	bl	8002d30 <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fc2:	f7fa feb5 	bl	8002d30 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e0d5      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fd4:	4b14      	ldr	r3, [pc, #80]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1ef      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80c9 	beq.w	800817e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fec:	4b0e      	ldr	r3, [pc, #56]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f003 030c 	and.w	r3, r3, #12
 8007ff4:	2b0c      	cmp	r3, #12
 8007ff6:	f000 8083 	beq.w	8008100 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d15e      	bne.n	80080c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a08      	ldr	r2, [pc, #32]	@ (8008028 <HAL_RCC_OscConfig+0x4b8>)
 8008008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800800c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800e:	f7fa fe8f 	bl	8002d30 <HAL_GetTick>
 8008012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008014:	e00c      	b.n	8008030 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008016:	f7fa fe8b 	bl	8002d30 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d905      	bls.n	8008030 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e0ab      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
 8008028:	40021000 	.word	0x40021000
 800802c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008030:	4b55      	ldr	r3, [pc, #340]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1ec      	bne.n	8008016 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800803c:	4b52      	ldr	r3, [pc, #328]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	4b52      	ldr	r3, [pc, #328]	@ (800818c <HAL_RCC_OscConfig+0x61c>)
 8008042:	4013      	ands	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6a11      	ldr	r1, [r2, #32]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800804c:	3a01      	subs	r2, #1
 800804e:	0112      	lsls	r2, r2, #4
 8008050:	4311      	orrs	r1, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008056:	0212      	lsls	r2, r2, #8
 8008058:	4311      	orrs	r1, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800805e:	0852      	lsrs	r2, r2, #1
 8008060:	3a01      	subs	r2, #1
 8008062:	0552      	lsls	r2, r2, #21
 8008064:	4311      	orrs	r1, r2
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800806a:	0852      	lsrs	r2, r2, #1
 800806c:	3a01      	subs	r2, #1
 800806e:	0652      	lsls	r2, r2, #25
 8008070:	4311      	orrs	r1, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008076:	06d2      	lsls	r2, r2, #27
 8008078:	430a      	orrs	r2, r1
 800807a:	4943      	ldr	r1, [pc, #268]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 800807c:	4313      	orrs	r3, r2
 800807e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008080:	4b41      	ldr	r3, [pc, #260]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a40      	ldr	r2, [pc, #256]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 8008086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800808a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800808c:	4b3e      	ldr	r3, [pc, #248]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	4a3d      	ldr	r2, [pc, #244]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 8008092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008096:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008098:	f7fa fe4a 	bl	8002d30 <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080a0:	f7fa fe46 	bl	8002d30 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e066      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080b2:	4b35      	ldr	r3, [pc, #212]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCC_OscConfig+0x530>
 80080be:	e05e      	b.n	800817e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c0:	4b31      	ldr	r3, [pc, #196]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a30      	ldr	r2, [pc, #192]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 80080c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080cc:	f7fa fe30 	bl	8002d30 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d4:	f7fa fe2c 	bl	8002d30 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e04c      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080e6:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f0      	bne.n	80080d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80080f2:	4b25      	ldr	r3, [pc, #148]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	4924      	ldr	r1, [pc, #144]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 80080f8:	4b25      	ldr	r3, [pc, #148]	@ (8008190 <HAL_RCC_OscConfig+0x620>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	60cb      	str	r3, [r1, #12]
 80080fe:	e03e      	b.n	800817e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e039      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800810c:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <HAL_RCC_OscConfig+0x618>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f003 0203 	and.w	r2, r3, #3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	429a      	cmp	r2, r3
 800811e:	d12c      	bne.n	800817a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812a:	3b01      	subs	r3, #1
 800812c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800812e:	429a      	cmp	r2, r3
 8008130:	d123      	bne.n	800817a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800813e:	429a      	cmp	r2, r3
 8008140:	d11b      	bne.n	800817a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800814e:	429a      	cmp	r2, r3
 8008150:	d113      	bne.n	800817a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	3b01      	subs	r3, #1
 8008160:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008162:	429a      	cmp	r2, r3
 8008164:	d109      	bne.n	800817a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	3b01      	subs	r3, #1
 8008174:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008176:	429a      	cmp	r2, r3
 8008178:	d001      	beq.n	800817e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40021000 	.word	0x40021000
 800818c:	019f800c 	.word	0x019f800c
 8008190:	feeefffc 	.word	0xfeeefffc

08008194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e11e      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081ac:	4b91      	ldr	r3, [pc, #580]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 030f 	and.w	r3, r3, #15
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d910      	bls.n	80081dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ba:	4b8e      	ldr	r3, [pc, #568]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f023 020f 	bic.w	r2, r3, #15
 80081c2:	498c      	ldr	r1, [pc, #560]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ca:	4b8a      	ldr	r3, [pc, #552]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d001      	beq.n	80081dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e106      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d073      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d129      	bne.n	8008244 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081f0:	4b81      	ldr	r3, [pc, #516]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0f4      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008200:	f000 f9d0 	bl	80085a4 <RCC_GetSysClockFreqFromPLLSource>
 8008204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	4a7c      	ldr	r2, [pc, #496]	@ (80083fc <HAL_RCC_ClockConfig+0x268>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d93f      	bls.n	800828e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800820e:	4b7a      	ldr	r3, [pc, #488]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008222:	2b00      	cmp	r3, #0
 8008224:	d033      	beq.n	800828e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800822a:	2b00      	cmp	r3, #0
 800822c:	d12f      	bne.n	800828e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800822e:	4b72      	ldr	r3, [pc, #456]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008236:	4a70      	ldr	r2, [pc, #448]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800823e:	2380      	movs	r3, #128	@ 0x80
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e024      	b.n	800828e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d107      	bne.n	800825c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800824c:	4b6a      	ldr	r3, [pc, #424]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e0c6      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800825c:	4b66      	ldr	r3, [pc, #408]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e0be      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800826c:	f000 f8ce 	bl	800840c <HAL_RCC_GetSysClockFreq>
 8008270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4a61      	ldr	r2, [pc, #388]	@ (80083fc <HAL_RCC_ClockConfig+0x268>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d909      	bls.n	800828e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800827a:	4b5f      	ldr	r3, [pc, #380]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008282:	4a5d      	ldr	r2, [pc, #372]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008288:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800828a:	2380      	movs	r3, #128	@ 0x80
 800828c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800828e:	4b5a      	ldr	r3, [pc, #360]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f023 0203 	bic.w	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4957      	ldr	r1, [pc, #348]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800829c:	4313      	orrs	r3, r2
 800829e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a0:	f7fa fd46 	bl	8002d30 <HAL_GetTick>
 80082a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	e00a      	b.n	80082be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a8:	f7fa fd42 	bl	8002d30 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e095      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082be:	4b4e      	ldr	r3, [pc, #312]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 020c 	and.w	r2, r3, #12
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1eb      	bne.n	80082a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d023      	beq.n	8008324 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082e8:	4b43      	ldr	r3, [pc, #268]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	4a42      	ldr	r2, [pc, #264]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80082ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80082f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0308 	and.w	r3, r3, #8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d007      	beq.n	8008310 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008300:	4b3d      	ldr	r3, [pc, #244]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008308:	4a3b      	ldr	r2, [pc, #236]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800830a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800830e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008310:	4b39      	ldr	r3, [pc, #228]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	4936      	ldr	r1, [pc, #216]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800831e:	4313      	orrs	r3, r2
 8008320:	608b      	str	r3, [r1, #8]
 8008322:	e008      	b.n	8008336 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b80      	cmp	r3, #128	@ 0x80
 8008328:	d105      	bne.n	8008336 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800832a:	4b33      	ldr	r3, [pc, #204]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	4a32      	ldr	r2, [pc, #200]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 8008330:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008334:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008336:	4b2f      	ldr	r3, [pc, #188]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d21d      	bcs.n	8008380 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008344:	4b2b      	ldr	r3, [pc, #172]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f023 020f 	bic.w	r2, r3, #15
 800834c:	4929      	ldr	r1, [pc, #164]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	4313      	orrs	r3, r2
 8008352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008354:	f7fa fcec 	bl	8002d30 <HAL_GetTick>
 8008358:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800835a:	e00a      	b.n	8008372 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800835c:	f7fa fce8 	bl	8002d30 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800836a:	4293      	cmp	r3, r2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e03b      	b.n	80083ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008372:	4b20      	ldr	r3, [pc, #128]	@ (80083f4 <HAL_RCC_ClockConfig+0x260>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d1ed      	bne.n	800835c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800838c:	4b1a      	ldr	r3, [pc, #104]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4917      	ldr	r1, [pc, #92]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 800839a:	4313      	orrs	r3, r2
 800839c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083aa:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	490f      	ldr	r1, [pc, #60]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083be:	f000 f825 	bl	800840c <HAL_RCC_GetSysClockFreq>
 80083c2:	4602      	mov	r2, r0
 80083c4:	4b0c      	ldr	r3, [pc, #48]	@ (80083f8 <HAL_RCC_ClockConfig+0x264>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	091b      	lsrs	r3, r3, #4
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	490c      	ldr	r1, [pc, #48]	@ (8008400 <HAL_RCC_ClockConfig+0x26c>)
 80083d0:	5ccb      	ldrb	r3, [r1, r3]
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	fa22 f303 	lsr.w	r3, r2, r3
 80083da:	4a0a      	ldr	r2, [pc, #40]	@ (8008404 <HAL_RCC_ClockConfig+0x270>)
 80083dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80083de:	4b0a      	ldr	r3, [pc, #40]	@ (8008408 <HAL_RCC_ClockConfig+0x274>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fa fa6e 	bl	80028c4 <HAL_InitTick>
 80083e8:	4603      	mov	r3, r0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	40022000 	.word	0x40022000
 80083f8:	40021000 	.word	0x40021000
 80083fc:	04c4b400 	.word	0x04c4b400
 8008400:	0801560c 	.word	0x0801560c
 8008404:	20000008 	.word	0x20000008
 8008408:	2000000c 	.word	0x2000000c

0800840c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008412:	4b2c      	ldr	r3, [pc, #176]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 030c 	and.w	r3, r3, #12
 800841a:	2b04      	cmp	r3, #4
 800841c:	d102      	bne.n	8008424 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800841e:	4b2a      	ldr	r3, [pc, #168]	@ (80084c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	e047      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008424:	4b27      	ldr	r3, [pc, #156]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 030c 	and.w	r3, r3, #12
 800842c:	2b08      	cmp	r3, #8
 800842e:	d102      	bne.n	8008436 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008430:	4b26      	ldr	r3, [pc, #152]	@ (80084cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	e03e      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008436:	4b23      	ldr	r3, [pc, #140]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 030c 	and.w	r3, r3, #12
 800843e:	2b0c      	cmp	r3, #12
 8008440:	d136      	bne.n	80084b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008442:	4b20      	ldr	r3, [pc, #128]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800844c:	4b1d      	ldr	r3, [pc, #116]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	091b      	lsrs	r3, r3, #4
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	3301      	adds	r3, #1
 8008458:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b03      	cmp	r3, #3
 800845e:	d10c      	bne.n	800847a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008460:	4a1a      	ldr	r2, [pc, #104]	@ (80084cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	4a16      	ldr	r2, [pc, #88]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800846a:	68d2      	ldr	r2, [r2, #12]
 800846c:	0a12      	lsrs	r2, r2, #8
 800846e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	617b      	str	r3, [r7, #20]
      break;
 8008478:	e00c      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800847a:	4a13      	ldr	r2, [pc, #76]	@ (80084c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008482:	4a10      	ldr	r2, [pc, #64]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008484:	68d2      	ldr	r2, [r2, #12]
 8008486:	0a12      	lsrs	r2, r2, #8
 8008488:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800848c:	fb02 f303 	mul.w	r3, r2, r3
 8008490:	617b      	str	r3, [r7, #20]
      break;
 8008492:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008494:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	0e5b      	lsrs	r3, r3, #25
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	3301      	adds	r3, #1
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	e001      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80084b4:	693b      	ldr	r3, [r7, #16]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40021000 	.word	0x40021000
 80084c8:	00f42400 	.word	0x00f42400
 80084cc:	007a1200 	.word	0x007a1200

080084d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084d4:	4b03      	ldr	r3, [pc, #12]	@ (80084e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80084d6:	681b      	ldr	r3, [r3, #0]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000008 	.word	0x20000008

080084e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80084ec:	f7ff fff0 	bl	80084d0 <HAL_RCC_GetHCLKFreq>
 80084f0:	4602      	mov	r2, r0
 80084f2:	4b06      	ldr	r3, [pc, #24]	@ (800850c <HAL_RCC_GetPCLK1Freq+0x24>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	4904      	ldr	r1, [pc, #16]	@ (8008510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80084fe:	5ccb      	ldrb	r3, [r1, r3]
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008508:	4618      	mov	r0, r3
 800850a:	bd80      	pop	{r7, pc}
 800850c:	40021000 	.word	0x40021000
 8008510:	0801561c 	.word	0x0801561c

08008514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008518:	f7ff ffda 	bl	80084d0 <HAL_RCC_GetHCLKFreq>
 800851c:	4602      	mov	r2, r0
 800851e:	4b06      	ldr	r3, [pc, #24]	@ (8008538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	0adb      	lsrs	r3, r3, #11
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	4904      	ldr	r1, [pc, #16]	@ (800853c <HAL_RCC_GetPCLK2Freq+0x28>)
 800852a:	5ccb      	ldrb	r3, [r1, r3]
 800852c:	f003 031f 	and.w	r3, r3, #31
 8008530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008534:	4618      	mov	r0, r3
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40021000 	.word	0x40021000
 800853c:	0801561c 	.word	0x0801561c

08008540 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	220f      	movs	r2, #15
 800854e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008550:	4b12      	ldr	r3, [pc, #72]	@ (800859c <HAL_RCC_GetClockConfig+0x5c>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 0203 	and.w	r2, r3, #3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800855c:	4b0f      	ldr	r3, [pc, #60]	@ (800859c <HAL_RCC_GetClockConfig+0x5c>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008568:	4b0c      	ldr	r3, [pc, #48]	@ (800859c <HAL_RCC_GetClockConfig+0x5c>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008574:	4b09      	ldr	r3, [pc, #36]	@ (800859c <HAL_RCC_GetClockConfig+0x5c>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	08db      	lsrs	r3, r3, #3
 800857a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008582:	4b07      	ldr	r3, [pc, #28]	@ (80085a0 <HAL_RCC_GetClockConfig+0x60>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 020f 	and.w	r2, r3, #15
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	601a      	str	r2, [r3, #0]
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40021000 	.word	0x40021000
 80085a0:	40022000 	.word	0x40022000

080085a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	091b      	lsrs	r3, r3, #4
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	3301      	adds	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d10c      	bne.n	80085e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085c8:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d0:	4a14      	ldr	r2, [pc, #80]	@ (8008624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085d2:	68d2      	ldr	r2, [r2, #12]
 80085d4:	0a12      	lsrs	r2, r2, #8
 80085d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085da:	fb02 f303 	mul.w	r3, r2, r3
 80085de:	617b      	str	r3, [r7, #20]
    break;
 80085e0:	e00c      	b.n	80085fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085e2:	4a12      	ldr	r2, [pc, #72]	@ (800862c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ec:	68d2      	ldr	r2, [r2, #12]
 80085ee:	0a12      	lsrs	r2, r2, #8
 80085f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085f4:	fb02 f303 	mul.w	r3, r2, r3
 80085f8:	617b      	str	r3, [r7, #20]
    break;
 80085fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085fc:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	0e5b      	lsrs	r3, r3, #25
 8008602:	f003 0303 	and.w	r3, r3, #3
 8008606:	3301      	adds	r3, #1
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	fbb2 f3f3 	udiv	r3, r2, r3
 8008614:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008616:	687b      	ldr	r3, [r7, #4]
}
 8008618:	4618      	mov	r0, r3
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	40021000 	.word	0x40021000
 8008628:	007a1200 	.word	0x007a1200
 800862c:	00f42400 	.word	0x00f42400

08008630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008638:	2300      	movs	r3, #0
 800863a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800863c:	2300      	movs	r3, #0
 800863e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8098 	beq.w	800877e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800864e:	2300      	movs	r3, #0
 8008650:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008652:	4b43      	ldr	r3, [pc, #268]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10d      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800865e:	4b40      	ldr	r3, [pc, #256]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008662:	4a3f      	ldr	r2, [pc, #252]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008668:	6593      	str	r3, [r2, #88]	@ 0x58
 800866a:	4b3d      	ldr	r3, [pc, #244]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800866c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800866e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008672:	60bb      	str	r3, [r7, #8]
 8008674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008676:	2301      	movs	r3, #1
 8008678:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800867a:	4b3a      	ldr	r3, [pc, #232]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a39      	ldr	r2, [pc, #228]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008684:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008686:	f7fa fb53 	bl	8002d30 <HAL_GetTick>
 800868a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800868c:	e009      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800868e:	f7fa fb4f 	bl	8002d30 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d902      	bls.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	74fb      	strb	r3, [r7, #19]
        break;
 80086a0:	e005      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086a2:	4b30      	ldr	r3, [pc, #192]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0ef      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80086ae:	7cfb      	ldrb	r3, [r7, #19]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d159      	bne.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01e      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d019      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086d0:	4b23      	ldr	r3, [pc, #140]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086dc:	4b20      	ldr	r3, [pc, #128]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086fc:	4a18      	ldr	r2, [pc, #96]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d016      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870e:	f7fa fb0f 	bl	8002d30 <HAL_GetTick>
 8008712:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008714:	e00b      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008716:	f7fa fb0b 	bl	8002d30 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008724:	4293      	cmp	r3, r2
 8008726:	d902      	bls.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	74fb      	strb	r3, [r7, #19]
            break;
 800872c:	e006      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800872e:	4b0c      	ldr	r3, [pc, #48]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ec      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800873c:	7cfb      	ldrb	r3, [r7, #19]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008742:	4b07      	ldr	r3, [pc, #28]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008750:	4903      	ldr	r1, [pc, #12]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008758:	e008      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800875a:	7cfb      	ldrb	r3, [r7, #19]
 800875c:	74bb      	strb	r3, [r7, #18]
 800875e:	e005      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008760:	40021000 	.word	0x40021000
 8008764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008768:	7cfb      	ldrb	r3, [r7, #19]
 800876a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800876c:	7c7b      	ldrb	r3, [r7, #17]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d105      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008772:	4ba6      	ldr	r3, [pc, #664]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008776:	4aa5      	ldr	r2, [pc, #660]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800877c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800878a:	4ba0      	ldr	r3, [pc, #640]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008790:	f023 0203 	bic.w	r2, r3, #3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	499c      	ldr	r1, [pc, #624]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087ac:	4b97      	ldr	r3, [pc, #604]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b2:	f023 020c 	bic.w	r2, r3, #12
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	4994      	ldr	r1, [pc, #592]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087ce:	4b8f      	ldr	r3, [pc, #572]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	498b      	ldr	r1, [pc, #556]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087f0:	4b86      	ldr	r3, [pc, #536]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	4983      	ldr	r1, [pc, #524]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008812:	4b7e      	ldr	r3, [pc, #504]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008818:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	497a      	ldr	r1, [pc, #488]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008834:	4b75      	ldr	r3, [pc, #468]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800883a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	4972      	ldr	r1, [pc, #456]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008844:	4313      	orrs	r3, r2
 8008846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008856:	4b6d      	ldr	r3, [pc, #436]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800885c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	4969      	ldr	r1, [pc, #420]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008878:	4b64      	ldr	r3, [pc, #400]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800887a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	4961      	ldr	r1, [pc, #388]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008888:	4313      	orrs	r3, r2
 800888a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800889a:	4b5c      	ldr	r3, [pc, #368]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800889c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	4958      	ldr	r1, [pc, #352]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d015      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088bc:	4b53      	ldr	r3, [pc, #332]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ca:	4950      	ldr	r1, [pc, #320]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088da:	d105      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088dc:	4b4b      	ldr	r3, [pc, #300]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	4a4a      	ldr	r2, [pc, #296]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088e6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d015      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80088f4:	4b45      	ldr	r3, [pc, #276]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	4942      	ldr	r1, [pc, #264]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008912:	d105      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008914:	4b3d      	ldr	r3, [pc, #244]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	4a3c      	ldr	r2, [pc, #240]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800891a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800891e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d015      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800892c:	4b37      	ldr	r3, [pc, #220]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008932:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893a:	4934      	ldr	r1, [pc, #208]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800893c:	4313      	orrs	r3, r2
 800893e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800894a:	d105      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800894c:	4b2f      	ldr	r3, [pc, #188]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4a2e      	ldr	r2, [pc, #184]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008956:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d015      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008964:	4b29      	ldr	r3, [pc, #164]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008972:	4926      	ldr	r1, [pc, #152]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008974:	4313      	orrs	r3, r2
 8008976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008982:	d105      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008984:	4b21      	ldr	r3, [pc, #132]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4a20      	ldr	r2, [pc, #128]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800898a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800898e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d015      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800899c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	4918      	ldr	r1, [pc, #96]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ba:	d105      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	4a12      	ldr	r2, [pc, #72]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d015      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089d4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e2:	490a      	ldr	r1, [pc, #40]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089f2:	d105      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089f4:	4b05      	ldr	r3, [pc, #20]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	4a04      	ldr	r2, [pc, #16]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008a00:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40021000 	.word	0x40021000

08008a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e049      	b.n	8008ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7f9 fda0 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f001 fa7c 	bl	8009f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d001      	beq.n	8008ad8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e042      	b.n	8008b5e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a21      	ldr	r2, [pc, #132]	@ (8008b6c <HAL_TIM_Base_Start+0xac>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d018      	beq.n	8008b1c <HAL_TIM_Base_Start+0x5c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af2:	d013      	beq.n	8008b1c <HAL_TIM_Base_Start+0x5c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b70 <HAL_TIM_Base_Start+0xb0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00e      	beq.n	8008b1c <HAL_TIM_Base_Start+0x5c>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a1c      	ldr	r2, [pc, #112]	@ (8008b74 <HAL_TIM_Base_Start+0xb4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d009      	beq.n	8008b1c <HAL_TIM_Base_Start+0x5c>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008b78 <HAL_TIM_Base_Start+0xb8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <HAL_TIM_Base_Start+0x5c>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a19      	ldr	r2, [pc, #100]	@ (8008b7c <HAL_TIM_Base_Start+0xbc>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d115      	bne.n	8008b48 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	4b17      	ldr	r3, [pc, #92]	@ (8008b80 <HAL_TIM_Base_Start+0xc0>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b06      	cmp	r3, #6
 8008b2c:	d015      	beq.n	8008b5a <HAL_TIM_Base_Start+0x9a>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b34:	d011      	beq.n	8008b5a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0201 	orr.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b46:	e008      	b.n	8008b5a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0201 	orr.w	r2, r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	e000      	b.n	8008b5c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40013400 	.word	0x40013400
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	00010007 	.word	0x00010007

08008b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d001      	beq.n	8008b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e04a      	b.n	8008c32 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0201 	orr.w	r2, r2, #1
 8008bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a21      	ldr	r2, [pc, #132]	@ (8008c40 <HAL_TIM_Base_Start_IT+0xbc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d018      	beq.n	8008bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc6:	d013      	beq.n	8008bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c44 <HAL_TIM_Base_Start_IT+0xc0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00e      	beq.n	8008bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d009      	beq.n	8008bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1a      	ldr	r2, [pc, #104]	@ (8008c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d004      	beq.n	8008bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a19      	ldr	r2, [pc, #100]	@ (8008c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d115      	bne.n	8008c1c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689a      	ldr	r2, [r3, #8]
 8008bf6:	4b17      	ldr	r3, [pc, #92]	@ (8008c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b06      	cmp	r3, #6
 8008c00:	d015      	beq.n	8008c2e <HAL_TIM_Base_Start_IT+0xaa>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c08:	d011      	beq.n	8008c2e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f042 0201 	orr.w	r2, r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c1a:	e008      	b.n	8008c2e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0201 	orr.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	e000      	b.n	8008c30 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	40012c00 	.word	0x40012c00
 8008c44:	40000400 	.word	0x40000400
 8008c48:	40000800 	.word	0x40000800
 8008c4c:	40013400 	.word	0x40013400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	00010007 	.word	0x00010007

08008c58 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e049      	b.n	8008cfe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f841 	bl	8008d06 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f001 f958 	bl	8009f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <HAL_TIM_PWM_Start+0x24>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	bf14      	ite	ne
 8008d38:	2301      	movne	r3, #1
 8008d3a:	2300      	moveq	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	e03c      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d109      	bne.n	8008d5a <HAL_TIM_PWM_Start+0x3e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	bf14      	ite	ne
 8008d52:	2301      	movne	r3, #1
 8008d54:	2300      	moveq	r3, #0
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	e02f      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	d109      	bne.n	8008d74 <HAL_TIM_PWM_Start+0x58>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	bf14      	ite	ne
 8008d6c:	2301      	movne	r3, #1
 8008d6e:	2300      	moveq	r3, #0
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	e022      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b0c      	cmp	r3, #12
 8008d78:	d109      	bne.n	8008d8e <HAL_TIM_PWM_Start+0x72>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	bf14      	ite	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	2300      	moveq	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	e015      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b10      	cmp	r3, #16
 8008d92:	d109      	bne.n	8008da8 <HAL_TIM_PWM_Start+0x8c>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	bf14      	ite	ne
 8008da0:	2301      	movne	r3, #1
 8008da2:	2300      	moveq	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	e008      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e097      	b.n	8008ef2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <HAL_TIM_PWM_Start+0xb6>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dd0:	e023      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d104      	bne.n	8008de2 <HAL_TIM_PWM_Start+0xc6>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008de0:	e01b      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_PWM_Start+0xd6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008df0:	e013      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Start+0xe6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Start+0xf6>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e10:	e003      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 fea2 	bl	800ab6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a33      	ldr	r2, [pc, #204]	@ (8008efc <HAL_TIM_PWM_Start+0x1e0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x13e>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a32      	ldr	r2, [pc, #200]	@ (8008f00 <HAL_TIM_PWM_Start+0x1e4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x13e>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a30      	ldr	r2, [pc, #192]	@ (8008f04 <HAL_TIM_PWM_Start+0x1e8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x13e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8008f08 <HAL_TIM_PWM_Start+0x1ec>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x13e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a2d      	ldr	r2, [pc, #180]	@ (8008f0c <HAL_TIM_PWM_Start+0x1f0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d101      	bne.n	8008e5e <HAL_TIM_PWM_Start+0x142>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <HAL_TIM_PWM_Start+0x144>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d007      	beq.n	8008e74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a20      	ldr	r2, [pc, #128]	@ (8008efc <HAL_TIM_PWM_Start+0x1e0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d018      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x194>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e86:	d013      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x194>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a20      	ldr	r2, [pc, #128]	@ (8008f10 <HAL_TIM_PWM_Start+0x1f4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00e      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x194>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1f      	ldr	r2, [pc, #124]	@ (8008f14 <HAL_TIM_PWM_Start+0x1f8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d009      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x194>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a17      	ldr	r2, [pc, #92]	@ (8008f00 <HAL_TIM_PWM_Start+0x1e4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <HAL_TIM_PWM_Start+0x194>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a16      	ldr	r2, [pc, #88]	@ (8008f04 <HAL_TIM_PWM_Start+0x1e8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d115      	bne.n	8008edc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	4b18      	ldr	r3, [pc, #96]	@ (8008f18 <HAL_TIM_PWM_Start+0x1fc>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b06      	cmp	r3, #6
 8008ec0:	d015      	beq.n	8008eee <HAL_TIM_PWM_Start+0x1d2>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec8:	d011      	beq.n	8008eee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0201 	orr.w	r2, r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eda:	e008      	b.n	8008eee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0201 	orr.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e000      	b.n	8008ef0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	00010007 	.word	0x00010007

08008f1c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b0c      	cmp	r3, #12
 8008f2e:	d855      	bhi.n	8008fdc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008f30:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f6d 	.word	0x08008f6d
 8008f3c:	08008fdd 	.word	0x08008fdd
 8008f40:	08008fdd 	.word	0x08008fdd
 8008f44:	08008fdd 	.word	0x08008fdd
 8008f48:	08008f89 	.word	0x08008f89
 8008f4c:	08008fdd 	.word	0x08008fdd
 8008f50:	08008fdd 	.word	0x08008fdd
 8008f54:	08008fdd 	.word	0x08008fdd
 8008f58:	08008fa5 	.word	0x08008fa5
 8008f5c:	08008fdd 	.word	0x08008fdd
 8008f60:	08008fdd 	.word	0x08008fdd
 8008f64:	08008fdd 	.word	0x08008fdd
 8008f68:	08008fc1 	.word	0x08008fc1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008f7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fc fb39 	bl	80055f8 <HAL_DMA_Abort_IT>
      break;
 8008f86:	e02c      	b.n	8008fe2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fc fb2b 	bl	80055f8 <HAL_DMA_Abort_IT>
      break;
 8008fa2:	e01e      	b.n	8008fe2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fc fb1d 	bl	80055f8 <HAL_DMA_Abort_IT>
      break;
 8008fbe:	e010      	b.n	8008fe2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008fce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fc fb0f 	bl	80055f8 <HAL_DMA_Abort_IT>
      break;
 8008fda:	e002      	b.n	8008fe2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f040 8081 	bne.w	80090ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 fdba 	bl	800ab6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a3e      	ldr	r2, [pc, #248]	@ (80090f8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a3d      	ldr	r2, [pc, #244]	@ (80090fc <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00e      	beq.n	800902a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a3b      	ldr	r2, [pc, #236]	@ (8009100 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a3a      	ldr	r2, [pc, #232]	@ (8009104 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a38      	ldr	r2, [pc, #224]	@ (8009108 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d101      	bne.n	800902e <HAL_TIM_PWM_Stop_DMA+0x112>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <HAL_TIM_PWM_Stop_DMA+0x114>
 800902e:	2300      	movs	r3, #0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d017      	beq.n	8009064 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6a1a      	ldr	r2, [r3, #32]
 800903a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800903e:	4013      	ands	r3, r2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10f      	bne.n	8009064 <HAL_TIM_PWM_Stop_DMA+0x148>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6a1a      	ldr	r2, [r3, #32]
 800904a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800904e:	4013      	ands	r3, r2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d107      	bne.n	8009064 <HAL_TIM_PWM_Stop_DMA+0x148>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009062:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6a1a      	ldr	r2, [r3, #32]
 800906a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800906e:	4013      	ands	r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10f      	bne.n	8009094 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6a1a      	ldr	r2, [r3, #32]
 800907a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d107      	bne.n	8009094 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d104      	bne.n	80090a4 <HAL_TIM_PWM_Stop_DMA+0x188>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090a2:	e023      	b.n	80090ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d104      	bne.n	80090b4 <HAL_TIM_PWM_Stop_DMA+0x198>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090b2:	e01b      	b.n	80090ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d104      	bne.n	80090c4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090c2:	e013      	b.n	80090ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b0c      	cmp	r3, #12
 80090c8:	d104      	bne.n	80090d4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090d2:	e00b      	b.n	80090ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d104      	bne.n	80090e4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090e2:	e003      	b.n	80090ec <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40012c00 	.word	0x40012c00
 80090fc:	40013400 	.word	0x40013400
 8009100:	40014000 	.word	0x40014000
 8009104:	40014400 	.word	0x40014400
 8009108:	40014800 	.word	0x40014800

0800910c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e049      	b.n	80091b2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f841 	bl	80091ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f000 fefe 	bl	8009f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d104      	bne.n	80091f2 <HAL_TIM_IC_Start_DMA+0x22>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	e023      	b.n	800923a <HAL_TIM_IC_Start_DMA+0x6a>
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d104      	bne.n	8009202 <HAL_TIM_IC_Start_DMA+0x32>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	e01b      	b.n	800923a <HAL_TIM_IC_Start_DMA+0x6a>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b08      	cmp	r3, #8
 8009206:	d104      	bne.n	8009212 <HAL_TIM_IC_Start_DMA+0x42>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800920e:	b2db      	uxtb	r3, r3
 8009210:	e013      	b.n	800923a <HAL_TIM_IC_Start_DMA+0x6a>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b0c      	cmp	r3, #12
 8009216:	d104      	bne.n	8009222 <HAL_TIM_IC_Start_DMA+0x52>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921e:	b2db      	uxtb	r3, r3
 8009220:	e00b      	b.n	800923a <HAL_TIM_IC_Start_DMA+0x6a>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b10      	cmp	r3, #16
 8009226:	d104      	bne.n	8009232 <HAL_TIM_IC_Start_DMA+0x62>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800922e:	b2db      	uxtb	r3, r3
 8009230:	e003      	b.n	800923a <HAL_TIM_IC_Start_DMA+0x6a>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009238:	b2db      	uxtb	r3, r3
 800923a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d104      	bne.n	800924c <HAL_TIM_IC_Start_DMA+0x7c>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009248:	b2db      	uxtb	r3, r3
 800924a:	e013      	b.n	8009274 <HAL_TIM_IC_Start_DMA+0xa4>
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b04      	cmp	r3, #4
 8009250:	d104      	bne.n	800925c <HAL_TIM_IC_Start_DMA+0x8c>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009258:	b2db      	uxtb	r3, r3
 800925a:	e00b      	b.n	8009274 <HAL_TIM_IC_Start_DMA+0xa4>
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b08      	cmp	r3, #8
 8009260:	d104      	bne.n	800926c <HAL_TIM_IC_Start_DMA+0x9c>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009268:	b2db      	uxtb	r3, r3
 800926a:	e003      	b.n	8009274 <HAL_TIM_IC_Start_DMA+0xa4>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009272:	b2db      	uxtb	r3, r3
 8009274:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8009276:	7dbb      	ldrb	r3, [r7, #22]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d002      	beq.n	8009282 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800927c:	7d7b      	ldrb	r3, [r7, #21]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d101      	bne.n	8009286 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8009282:	2302      	movs	r3, #2
 8009284:	e152      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8009286:	7dbb      	ldrb	r3, [r7, #22]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d153      	bne.n	8009334 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800928c:	7d7b      	ldrb	r3, [r7, #21]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d150      	bne.n	8009334 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <HAL_TIM_IC_Start_DMA+0xce>
 8009298:	887b      	ldrh	r3, [r7, #2]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e144      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <HAL_TIM_IC_Start_DMA+0xe2>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092b0:	e023      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x12a>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d104      	bne.n	80092c2 <HAL_TIM_IC_Start_DMA+0xf2>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092c0:	e01b      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x12a>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d104      	bne.n	80092d2 <HAL_TIM_IC_Start_DMA+0x102>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092d0:	e013      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x12a>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b0c      	cmp	r3, #12
 80092d6:	d104      	bne.n	80092e2 <HAL_TIM_IC_Start_DMA+0x112>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092e0:	e00b      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x12a>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d104      	bne.n	80092f2 <HAL_TIM_IC_Start_DMA+0x122>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092f0:	e003      	b.n	80092fa <HAL_TIM_IC_Start_DMA+0x12a>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2202      	movs	r2, #2
 80092f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <HAL_TIM_IC_Start_DMA+0x13a>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8009308:	e016      	b.n	8009338 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b04      	cmp	r3, #4
 800930e:	d104      	bne.n	800931a <HAL_TIM_IC_Start_DMA+0x14a>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8009318:	e00e      	b.n	8009338 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b08      	cmp	r3, #8
 800931e:	d104      	bne.n	800932a <HAL_TIM_IC_Start_DMA+0x15a>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ((pData == NULL) || (Length == 0U))
 8009328:	e006      	b.n	8009338 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2202      	movs	r2, #2
 800932e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ((pData == NULL) || (Length == 0U))
 8009332:	e001      	b.n	8009338 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0f9      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2201      	movs	r2, #1
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fc13 	bl	800ab6c <TIM_CCxChannelCmd>

  switch (Channel)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	f200 80ad 	bhi.w	80094a8 <HAL_TIM_IC_Start_DMA+0x2d8>
 800934e:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <HAL_TIM_IC_Start_DMA+0x184>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009389 	.word	0x08009389
 8009358:	080094a9 	.word	0x080094a9
 800935c:	080094a9 	.word	0x080094a9
 8009360:	080094a9 	.word	0x080094a9
 8009364:	080093d1 	.word	0x080093d1
 8009368:	080094a9 	.word	0x080094a9
 800936c:	080094a9 	.word	0x080094a9
 8009370:	080094a9 	.word	0x080094a9
 8009374:	08009419 	.word	0x08009419
 8009378:	080094a9 	.word	0x080094a9
 800937c:	080094a9 	.word	0x080094a9
 8009380:	080094a9 	.word	0x080094a9
 8009384:	08009461 	.word	0x08009461
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	4a69      	ldr	r2, [pc, #420]	@ (8009534 <HAL_TIM_IC_Start_DMA+0x364>)
 800938e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009394:	4a68      	ldr	r2, [pc, #416]	@ (8009538 <HAL_TIM_IC_Start_DMA+0x368>)
 8009396:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	4a67      	ldr	r2, [pc, #412]	@ (800953c <HAL_TIM_IC_Start_DMA+0x36c>)
 800939e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3334      	adds	r3, #52	@ 0x34
 80093aa:	4619      	mov	r1, r3
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	887b      	ldrh	r3, [r7, #2]
 80093b0:	f7fc f84e 	bl	8005450 <HAL_DMA_Start_IT>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e0b6      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093cc:	60da      	str	r2, [r3, #12]
      break;
 80093ce:	e06e      	b.n	80094ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	4a57      	ldr	r2, [pc, #348]	@ (8009534 <HAL_TIM_IC_Start_DMA+0x364>)
 80093d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	4a56      	ldr	r2, [pc, #344]	@ (8009538 <HAL_TIM_IC_Start_DMA+0x368>)
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e4:	4a55      	ldr	r2, [pc, #340]	@ (800953c <HAL_TIM_IC_Start_DMA+0x36c>)
 80093e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3338      	adds	r3, #56	@ 0x38
 80093f2:	4619      	mov	r1, r3
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	887b      	ldrh	r3, [r7, #2]
 80093f8:	f7fc f82a 	bl	8005450 <HAL_DMA_Start_IT>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e092      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009414:	60da      	str	r2, [r3, #12]
      break;
 8009416:	e04a      	b.n	80094ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941c:	4a45      	ldr	r2, [pc, #276]	@ (8009534 <HAL_TIM_IC_Start_DMA+0x364>)
 800941e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	4a44      	ldr	r2, [pc, #272]	@ (8009538 <HAL_TIM_IC_Start_DMA+0x368>)
 8009426:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942c:	4a43      	ldr	r2, [pc, #268]	@ (800953c <HAL_TIM_IC_Start_DMA+0x36c>)
 800942e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	333c      	adds	r3, #60	@ 0x3c
 800943a:	4619      	mov	r1, r3
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	887b      	ldrh	r3, [r7, #2]
 8009440:	f7fc f806 	bl	8005450 <HAL_DMA_Start_IT>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e06e      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800945c:	60da      	str	r2, [r3, #12]
      break;
 800945e:	e026      	b.n	80094ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009464:	4a33      	ldr	r2, [pc, #204]	@ (8009534 <HAL_TIM_IC_Start_DMA+0x364>)
 8009466:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946c:	4a32      	ldr	r2, [pc, #200]	@ (8009538 <HAL_TIM_IC_Start_DMA+0x368>)
 800946e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009474:	4a31      	ldr	r2, [pc, #196]	@ (800953c <HAL_TIM_IC_Start_DMA+0x36c>)
 8009476:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3340      	adds	r3, #64	@ 0x40
 8009482:	4619      	mov	r1, r3
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	887b      	ldrh	r3, [r7, #2]
 8009488:	f7fb ffe2 	bl	8005450 <HAL_DMA_Start_IT>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e04a      	b.n	800952c <HAL_TIM_IC_Start_DMA+0x35c>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80094a4:	60da      	str	r2, [r3, #12]
      break;
 80094a6:	e002      	b.n	80094ae <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	75fb      	strb	r3, [r7, #23]
      break;
 80094ac:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a23      	ldr	r2, [pc, #140]	@ (8009540 <HAL_TIM_IC_Start_DMA+0x370>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d018      	beq.n	80094ea <HAL_TIM_IC_Start_DMA+0x31a>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c0:	d013      	beq.n	80094ea <HAL_TIM_IC_Start_DMA+0x31a>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009544 <HAL_TIM_IC_Start_DMA+0x374>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00e      	beq.n	80094ea <HAL_TIM_IC_Start_DMA+0x31a>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009548 <HAL_TIM_IC_Start_DMA+0x378>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d009      	beq.n	80094ea <HAL_TIM_IC_Start_DMA+0x31a>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a1c      	ldr	r2, [pc, #112]	@ (800954c <HAL_TIM_IC_Start_DMA+0x37c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d004      	beq.n	80094ea <HAL_TIM_IC_Start_DMA+0x31a>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009550 <HAL_TIM_IC_Start_DMA+0x380>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d115      	bne.n	8009516 <HAL_TIM_IC_Start_DMA+0x346>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	4b18      	ldr	r3, [pc, #96]	@ (8009554 <HAL_TIM_IC_Start_DMA+0x384>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2b06      	cmp	r3, #6
 80094fa:	d015      	beq.n	8009528 <HAL_TIM_IC_Start_DMA+0x358>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009502:	d011      	beq.n	8009528 <HAL_TIM_IC_Start_DMA+0x358>
    {
      __HAL_TIM_ENABLE(htim);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009514:	e008      	b.n	8009528 <HAL_TIM_IC_Start_DMA+0x358>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 0201 	orr.w	r2, r2, #1
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	e000      	b.n	800952a <HAL_TIM_IC_Start_DMA+0x35a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009528:	bf00      	nop
  }

  /* Return function status */
  return status;
 800952a:	7dfb      	ldrb	r3, [r7, #23]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	08009e1b 	.word	0x08009e1b
 8009538:	08009ee3 	.word	0x08009ee3
 800953c:	08009d89 	.word	0x08009d89
 8009540:	40012c00 	.word	0x40012c00
 8009544:	40000400 	.word	0x40000400
 8009548:	40000800 	.word	0x40000800
 800954c:	40013400 	.word	0x40013400
 8009550:	40014000 	.word	0x40014000
 8009554:	00010007 	.word	0x00010007

08009558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d020      	beq.n	80095bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01b      	beq.n	80095bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0202 	mvn.w	r2, #2
 800958c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f7 ff22 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 80095a8:	e005      	b.n	80095b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fbba 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fbcb 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f003 0304 	and.w	r3, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d020      	beq.n	8009608 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d01b      	beq.n	8009608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0204 	mvn.w	r2, #4
 80095d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2202      	movs	r2, #2
 80095de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f7 fefc 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 80095f4:	e005      	b.n	8009602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb94 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fba5 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d020      	beq.n	8009654 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f003 0308 	and.w	r3, r3, #8
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01b      	beq.n	8009654 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f06f 0208 	mvn.w	r2, #8
 8009624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2204      	movs	r2, #4
 800962a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f7 fed6 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 8009640:	e005      	b.n	800964e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fb6e 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fb7f 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b00      	cmp	r3, #0
 800965c:	d020      	beq.n	80096a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01b      	beq.n	80096a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f06f 0210 	mvn.w	r2, #16
 8009670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2208      	movs	r2, #8
 8009676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7f7 feb0 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 800968c:	e005      	b.n	800969a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fb48 	bl	8009d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fb59 	bl	8009d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00c      	beq.n	80096c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d007      	beq.n	80096c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f06f 0201 	mvn.w	r2, #1
 80096bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7f8 fd66 	bl	8002190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d104      	bne.n	80096d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00c      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80096ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 faef 	bl	800acd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00c      	beq.n	8009716 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800970e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 fae7 	bl	800ace4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00c      	beq.n	800973a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fb13 	bl	8009d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00c      	beq.n	800975e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f06f 0220 	mvn.w	r2, #32
 8009756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 faaf 	bl	800acbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00c      	beq.n	8009782 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800977a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fabb 	bl	800acf8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00c      	beq.n	80097a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800979e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fab3 	bl	800ad0c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00c      	beq.n	80097ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d007      	beq.n	80097ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80097c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 faab 	bl	800ad20 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00c      	beq.n	80097ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d007      	beq.n	80097ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80097e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 faa3 	bl	800ad34 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097ee:	bf00      	nop
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800980e:	2b01      	cmp	r3, #1
 8009810:	d101      	bne.n	8009816 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009812:	2302      	movs	r3, #2
 8009814:	e066      	b.n	80098e4 <HAL_TIM_OC_ConfigChannel+0xec>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b14      	cmp	r3, #20
 8009822:	d857      	bhi.n	80098d4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009824:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	08009881 	.word	0x08009881
 8009830:	080098d5 	.word	0x080098d5
 8009834:	080098d5 	.word	0x080098d5
 8009838:	080098d5 	.word	0x080098d5
 800983c:	0800988f 	.word	0x0800988f
 8009840:	080098d5 	.word	0x080098d5
 8009844:	080098d5 	.word	0x080098d5
 8009848:	080098d5 	.word	0x080098d5
 800984c:	0800989d 	.word	0x0800989d
 8009850:	080098d5 	.word	0x080098d5
 8009854:	080098d5 	.word	0x080098d5
 8009858:	080098d5 	.word	0x080098d5
 800985c:	080098ab 	.word	0x080098ab
 8009860:	080098d5 	.word	0x080098d5
 8009864:	080098d5 	.word	0x080098d5
 8009868:	080098d5 	.word	0x080098d5
 800986c:	080098b9 	.word	0x080098b9
 8009870:	080098d5 	.word	0x080098d5
 8009874:	080098d5 	.word	0x080098d5
 8009878:	080098d5 	.word	0x080098d5
 800987c:	080098c7 	.word	0x080098c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fbfc 	bl	800a084 <TIM_OC1_SetConfig>
      break;
 800988c:	e025      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 fc85 	bl	800a1a4 <TIM_OC2_SetConfig>
      break;
 800989a:	e01e      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fd08 	bl	800a2b8 <TIM_OC3_SetConfig>
      break;
 80098a8:	e017      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fd89 	bl	800a3c8 <TIM_OC4_SetConfig>
      break;
 80098b6:	e010      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fe0c 	bl	800a4dc <TIM_OC5_SetConfig>
      break;
 80098c4:	e009      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fe69 	bl	800a5a4 <TIM_OC6_SetConfig>
      break;
 80098d2:	e002      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009906:	2302      	movs	r3, #2
 8009908:	e088      	b.n	8009a1c <HAL_TIM_IC_ConfigChannel+0x130>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d11b      	bne.n	8009950 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009928:	f000 ff66 	bl	800a7f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	699a      	ldr	r2, [r3, #24]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 020c 	bic.w	r2, r2, #12
 800993a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6999      	ldr	r1, [r3, #24]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	619a      	str	r2, [r3, #24]
 800994e:	e060      	b.n	8009a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b04      	cmp	r3, #4
 8009954:	d11c      	bne.n	8009990 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009966:	f000 ffde 	bl	800a926 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009978:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6999      	ldr	r1, [r3, #24]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	021a      	lsls	r2, r3, #8
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	619a      	str	r2, [r3, #24]
 800998e:	e040      	b.n	8009a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b08      	cmp	r3, #8
 8009994:	d11b      	bne.n	80099ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80099a6:	f001 f82b 	bl	800aa00 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	69da      	ldr	r2, [r3, #28]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 020c 	bic.w	r2, r2, #12
 80099b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69d9      	ldr	r1, [r3, #28]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	61da      	str	r2, [r3, #28]
 80099cc:	e021      	b.n	8009a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b0c      	cmp	r3, #12
 80099d2:	d11c      	bne.n	8009a0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80099e4:	f001 f848 	bl	800aa78 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69da      	ldr	r2, [r3, #28]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80099f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69d9      	ldr	r1, [r3, #28]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	021a      	lsls	r2, r3, #8
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	61da      	str	r2, [r3, #28]
 8009a0c:	e001      	b.n	8009a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_TIM_ConfigClockSource+0x1c>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e0de      	b.n	8009bfe <HAL_TIM_ConfigClockSource+0x1da>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009a5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a63      	ldr	r2, [pc, #396]	@ (8009c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	f000 80a9 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009a80:	4a61      	ldr	r2, [pc, #388]	@ (8009c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	f200 80ae 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a88:	4a60      	ldr	r2, [pc, #384]	@ (8009c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	f000 80a1 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009a90:	4a5e      	ldr	r2, [pc, #376]	@ (8009c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	f200 80a6 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009a98:	4a5d      	ldr	r2, [pc, #372]	@ (8009c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	f000 8099 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009aa0:	4a5b      	ldr	r2, [pc, #364]	@ (8009c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	f200 809e 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8009c14 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	f000 8091 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009ab0:	4a58      	ldr	r2, [pc, #352]	@ (8009c14 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	f200 8096 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ab8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009abc:	f000 8089 	beq.w	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009ac0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ac4:	f200 808e 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009acc:	d03e      	beq.n	8009b4c <HAL_TIM_ConfigClockSource+0x128>
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad2:	f200 8087 	bhi.w	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ada:	f000 8086 	beq.w	8009bea <HAL_TIM_ConfigClockSource+0x1c6>
 8009ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae2:	d87f      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ae4:	2b70      	cmp	r3, #112	@ 0x70
 8009ae6:	d01a      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0xfa>
 8009ae8:	2b70      	cmp	r3, #112	@ 0x70
 8009aea:	d87b      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009aec:	2b60      	cmp	r3, #96	@ 0x60
 8009aee:	d050      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x16e>
 8009af0:	2b60      	cmp	r3, #96	@ 0x60
 8009af2:	d877      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009af4:	2b50      	cmp	r3, #80	@ 0x50
 8009af6:	d03c      	beq.n	8009b72 <HAL_TIM_ConfigClockSource+0x14e>
 8009af8:	2b50      	cmp	r3, #80	@ 0x50
 8009afa:	d873      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009afc:	2b40      	cmp	r3, #64	@ 0x40
 8009afe:	d058      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x18e>
 8009b00:	2b40      	cmp	r3, #64	@ 0x40
 8009b02:	d86f      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b04:	2b30      	cmp	r3, #48	@ 0x30
 8009b06:	d064      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b08:	2b30      	cmp	r3, #48	@ 0x30
 8009b0a:	d86b      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d060      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d867      	bhi.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d05c      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b18:	2b10      	cmp	r3, #16
 8009b1a:	d05a      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b1c:	e062      	b.n	8009be4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b2e:	f000 fffd 	bl	800ab2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	609a      	str	r2, [r3, #8]
      break;
 8009b4a:	e04f      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b5c:	f000 ffe6 	bl	800ab2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b6e:	609a      	str	r2, [r3, #8]
      break;
 8009b70:	e03c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f000 fea2 	bl	800a8c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2150      	movs	r1, #80	@ 0x50
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 ffb1 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 8009b90:	e02c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f000 fefe 	bl	800a9a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2160      	movs	r1, #96	@ 0x60
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 ffa1 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 8009bb0:	e01c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f000 fe82 	bl	800a8c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2140      	movs	r1, #64	@ 0x40
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 ff91 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 8009bd0:	e00c      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f000 ff88 	bl	800aaf2 <TIM_ITRx_SetConfig>
      break;
 8009be2:	e003      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	73fb      	strb	r3, [r7, #15]
      break;
 8009be8:	e000      	b.n	8009bec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	00100070 	.word	0x00100070
 8009c0c:	00100040 	.word	0x00100040
 8009c10:	00100030 	.word	0x00100030
 8009c14:	00100020 	.word	0x00100020

08009c18 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e031      	b.n	8009c94 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fd14 	bl	800a670 <TIM_SlaveTimer_SetConfig>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d009      	beq.n	8009c62 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e018      	b.n	8009c94 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c70:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c80:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b0c      	cmp	r3, #12
 8009cae:	d831      	bhi.n	8009d14 <HAL_TIM_ReadCapturedValue+0x78>
 8009cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009ced 	.word	0x08009ced
 8009cbc:	08009d15 	.word	0x08009d15
 8009cc0:	08009d15 	.word	0x08009d15
 8009cc4:	08009d15 	.word	0x08009d15
 8009cc8:	08009cf7 	.word	0x08009cf7
 8009ccc:	08009d15 	.word	0x08009d15
 8009cd0:	08009d15 	.word	0x08009d15
 8009cd4:	08009d15 	.word	0x08009d15
 8009cd8:	08009d01 	.word	0x08009d01
 8009cdc:	08009d15 	.word	0x08009d15
 8009ce0:	08009d15 	.word	0x08009d15
 8009ce4:	08009d15 	.word	0x08009d15
 8009ce8:	08009d0b 	.word	0x08009d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf2:	60fb      	str	r3, [r7, #12]

      break;
 8009cf4:	e00f      	b.n	8009d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfc:	60fb      	str	r3, [r7, #12]

      break;
 8009cfe:	e00a      	b.n	8009d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d06:	60fb      	str	r3, [r7, #12]

      break;
 8009d08:	e005      	b.n	8009d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d10:	60fb      	str	r3, [r7, #12]

      break;
 8009d12:	e000      	b.n	8009d16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009d14:	bf00      	nop
  }

  return tmpreg;
 8009d16:	68fb      	ldr	r3, [r7, #12]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d107      	bne.n	8009db0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2201      	movs	r2, #1
 8009da4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009dae:	e02a      	b.n	8009e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d107      	bne.n	8009dca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dc8:	e01d      	b.n	8009e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d107      	bne.n	8009de4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009de2:	e010      	b.n	8009e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d107      	bne.n	8009dfe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2208      	movs	r2, #8
 8009df2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009dfc:	e003      	b.n	8009e06 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff ffb4 	bl	8009d74 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	771a      	strb	r2, [r3, #28]
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d10f      	bne.n	8009e52 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d146      	bne.n	8009ece <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e50:	e03d      	b.n	8009ece <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d10f      	bne.n	8009e7c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d131      	bne.n	8009ece <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e7a:	e028      	b.n	8009ece <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d10f      	bne.n	8009ea6 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2204      	movs	r2, #4
 8009e8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d11c      	bne.n	8009ece <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ea4:	e013      	b.n	8009ece <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d10e      	bne.n	8009ece <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2208      	movs	r2, #8
 8009eb4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	69db      	ldr	r3, [r3, #28]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d107      	bne.n	8009ece <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7f7 fa8c 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	771a      	strb	r2, [r3, #28]
}
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d103      	bne.n	8009f02 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	771a      	strb	r2, [r3, #28]
 8009f00:	e019      	b.n	8009f36 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d103      	bne.n	8009f14 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	771a      	strb	r2, [r3, #28]
 8009f12:	e010      	b.n	8009f36 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d103      	bne.n	8009f26 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2204      	movs	r2, #4
 8009f22:	771a      	strb	r2, [r3, #28]
 8009f24:	e007      	b.n	8009f36 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d102      	bne.n	8009f36 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2208      	movs	r2, #8
 8009f34:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff fefe 	bl	8009d38 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	771a      	strb	r2, [r3, #28]
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a42      	ldr	r2, [pc, #264]	@ (800a068 <TIM_Base_SetConfig+0x11c>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d00f      	beq.n	8009f84 <TIM_Base_SetConfig+0x38>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f6a:	d00b      	beq.n	8009f84 <TIM_Base_SetConfig+0x38>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800a06c <TIM_Base_SetConfig+0x120>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d007      	beq.n	8009f84 <TIM_Base_SetConfig+0x38>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a3e      	ldr	r2, [pc, #248]	@ (800a070 <TIM_Base_SetConfig+0x124>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_Base_SetConfig+0x38>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a3d      	ldr	r2, [pc, #244]	@ (800a074 <TIM_Base_SetConfig+0x128>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d108      	bne.n	8009f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a33      	ldr	r2, [pc, #204]	@ (800a068 <TIM_Base_SetConfig+0x11c>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d01b      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa4:	d017      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a30      	ldr	r2, [pc, #192]	@ (800a06c <TIM_Base_SetConfig+0x120>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d013      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a2f      	ldr	r2, [pc, #188]	@ (800a070 <TIM_Base_SetConfig+0x124>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d00f      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a2e      	ldr	r2, [pc, #184]	@ (800a074 <TIM_Base_SetConfig+0x128>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00b      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a2d      	ldr	r2, [pc, #180]	@ (800a078 <TIM_Base_SetConfig+0x12c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d007      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800a07c <TIM_Base_SetConfig+0x130>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_Base_SetConfig+0x8a>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a2b      	ldr	r2, [pc, #172]	@ (800a080 <TIM_Base_SetConfig+0x134>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d108      	bne.n	8009fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a16      	ldr	r2, [pc, #88]	@ (800a068 <TIM_Base_SetConfig+0x11c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00f      	beq.n	800a034 <TIM_Base_SetConfig+0xe8>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a17      	ldr	r2, [pc, #92]	@ (800a074 <TIM_Base_SetConfig+0x128>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d00b      	beq.n	800a034 <TIM_Base_SetConfig+0xe8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a16      	ldr	r2, [pc, #88]	@ (800a078 <TIM_Base_SetConfig+0x12c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d007      	beq.n	800a034 <TIM_Base_SetConfig+0xe8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a15      	ldr	r2, [pc, #84]	@ (800a07c <TIM_Base_SetConfig+0x130>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d003      	beq.n	800a034 <TIM_Base_SetConfig+0xe8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a14      	ldr	r2, [pc, #80]	@ (800a080 <TIM_Base_SetConfig+0x134>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d103      	bne.n	800a03c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d105      	bne.n	800a05a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	f023 0201 	bic.w	r2, r3, #1
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	611a      	str	r2, [r3, #16]
  }
}
 800a05a:	bf00      	nop
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	40012c00 	.word	0x40012c00
 800a06c:	40000400 	.word	0x40000400
 800a070:	40000800 	.word	0x40000800
 800a074:	40013400 	.word	0x40013400
 800a078:	40014000 	.word	0x40014000
 800a07c:	40014400 	.word	0x40014400
 800a080:	40014800 	.word	0x40014800

0800a084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	f023 0201 	bic.w	r2, r3, #1
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0303 	bic.w	r3, r3, #3
 800a0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f023 0302 	bic.w	r3, r3, #2
 800a0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a2c      	ldr	r2, [pc, #176]	@ (800a190 <TIM_OC1_SetConfig+0x10c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00f      	beq.n	800a104 <TIM_OC1_SetConfig+0x80>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a2b      	ldr	r2, [pc, #172]	@ (800a194 <TIM_OC1_SetConfig+0x110>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00b      	beq.n	800a104 <TIM_OC1_SetConfig+0x80>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a2a      	ldr	r2, [pc, #168]	@ (800a198 <TIM_OC1_SetConfig+0x114>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d007      	beq.n	800a104 <TIM_OC1_SetConfig+0x80>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a29      	ldr	r2, [pc, #164]	@ (800a19c <TIM_OC1_SetConfig+0x118>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d003      	beq.n	800a104 <TIM_OC1_SetConfig+0x80>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a28      	ldr	r2, [pc, #160]	@ (800a1a0 <TIM_OC1_SetConfig+0x11c>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d10c      	bne.n	800a11e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f023 0308 	bic.w	r3, r3, #8
 800a10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f023 0304 	bic.w	r3, r3, #4
 800a11c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a1b      	ldr	r2, [pc, #108]	@ (800a190 <TIM_OC1_SetConfig+0x10c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00f      	beq.n	800a146 <TIM_OC1_SetConfig+0xc2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a1a      	ldr	r2, [pc, #104]	@ (800a194 <TIM_OC1_SetConfig+0x110>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00b      	beq.n	800a146 <TIM_OC1_SetConfig+0xc2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a19      	ldr	r2, [pc, #100]	@ (800a198 <TIM_OC1_SetConfig+0x114>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d007      	beq.n	800a146 <TIM_OC1_SetConfig+0xc2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a18      	ldr	r2, [pc, #96]	@ (800a19c <TIM_OC1_SetConfig+0x118>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d003      	beq.n	800a146 <TIM_OC1_SetConfig+0xc2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a17      	ldr	r2, [pc, #92]	@ (800a1a0 <TIM_OC1_SetConfig+0x11c>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d111      	bne.n	800a16a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	4313      	orrs	r3, r2
 800a168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	621a      	str	r2, [r3, #32]
}
 800a184:	bf00      	nop
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	40012c00 	.word	0x40012c00
 800a194:	40013400 	.word	0x40013400
 800a198:	40014000 	.word	0x40014000
 800a19c:	40014400 	.word	0x40014400
 800a1a0:	40014800 	.word	0x40014800

0800a1a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	f023 0210 	bic.w	r2, r3, #16
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	021b      	lsls	r3, r3, #8
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f023 0320 	bic.w	r3, r3, #32
 800a1f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a28      	ldr	r2, [pc, #160]	@ (800a2a4 <TIM_OC2_SetConfig+0x100>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <TIM_OC2_SetConfig+0x6c>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a27      	ldr	r2, [pc, #156]	@ (800a2a8 <TIM_OC2_SetConfig+0x104>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d10d      	bne.n	800a22c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	011b      	lsls	r3, r3, #4
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a22a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a1d      	ldr	r2, [pc, #116]	@ (800a2a4 <TIM_OC2_SetConfig+0x100>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d00f      	beq.n	800a254 <TIM_OC2_SetConfig+0xb0>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a8 <TIM_OC2_SetConfig+0x104>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d00b      	beq.n	800a254 <TIM_OC2_SetConfig+0xb0>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a1b      	ldr	r2, [pc, #108]	@ (800a2ac <TIM_OC2_SetConfig+0x108>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d007      	beq.n	800a254 <TIM_OC2_SetConfig+0xb0>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a1a      	ldr	r2, [pc, #104]	@ (800a2b0 <TIM_OC2_SetConfig+0x10c>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d003      	beq.n	800a254 <TIM_OC2_SetConfig+0xb0>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a19      	ldr	r2, [pc, #100]	@ (800a2b4 <TIM_OC2_SetConfig+0x110>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d113      	bne.n	800a27c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a25a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	4313      	orrs	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	621a      	str	r2, [r3, #32]
}
 800a296:	bf00      	nop
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	40012c00 	.word	0x40012c00
 800a2a8:	40013400 	.word	0x40013400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40014400 	.word	0x40014400
 800a2b4:	40014800 	.word	0x40014800

0800a2b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
 800a2cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 0303 	bic.w	r3, r3, #3
 800a2f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a27      	ldr	r2, [pc, #156]	@ (800a3b4 <TIM_OC3_SetConfig+0xfc>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d003      	beq.n	800a322 <TIM_OC3_SetConfig+0x6a>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a26      	ldr	r2, [pc, #152]	@ (800a3b8 <TIM_OC3_SetConfig+0x100>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d10d      	bne.n	800a33e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	4313      	orrs	r3, r2
 800a334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a33c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a1c      	ldr	r2, [pc, #112]	@ (800a3b4 <TIM_OC3_SetConfig+0xfc>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00f      	beq.n	800a366 <TIM_OC3_SetConfig+0xae>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <TIM_OC3_SetConfig+0x100>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00b      	beq.n	800a366 <TIM_OC3_SetConfig+0xae>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a1a      	ldr	r2, [pc, #104]	@ (800a3bc <TIM_OC3_SetConfig+0x104>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <TIM_OC3_SetConfig+0xae>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a19      	ldr	r2, [pc, #100]	@ (800a3c0 <TIM_OC3_SetConfig+0x108>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_OC3_SetConfig+0xae>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a18      	ldr	r2, [pc, #96]	@ (800a3c4 <TIM_OC3_SetConfig+0x10c>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d113      	bne.n	800a38e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	621a      	str	r2, [r3, #32]
}
 800a3a8:	bf00      	nop
 800a3aa:	371c      	adds	r7, #28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	40012c00 	.word	0x40012c00
 800a3b8:	40013400 	.word	0x40013400
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40014400 	.word	0x40014400
 800a3c4:	40014800 	.word	0x40014800

0800a3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	031b      	lsls	r3, r3, #12
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a28      	ldr	r2, [pc, #160]	@ (800a4c8 <TIM_OC4_SetConfig+0x100>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d003      	beq.n	800a434 <TIM_OC4_SetConfig+0x6c>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a27      	ldr	r2, [pc, #156]	@ (800a4cc <TIM_OC4_SetConfig+0x104>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d10d      	bne.n	800a450 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a43a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	031b      	lsls	r3, r3, #12
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	4313      	orrs	r3, r2
 800a446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a44e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c8 <TIM_OC4_SetConfig+0x100>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d00f      	beq.n	800a478 <TIM_OC4_SetConfig+0xb0>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a1c      	ldr	r2, [pc, #112]	@ (800a4cc <TIM_OC4_SetConfig+0x104>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d00b      	beq.n	800a478 <TIM_OC4_SetConfig+0xb0>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d0 <TIM_OC4_SetConfig+0x108>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d007      	beq.n	800a478 <TIM_OC4_SetConfig+0xb0>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d4 <TIM_OC4_SetConfig+0x10c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d003      	beq.n	800a478 <TIM_OC4_SetConfig+0xb0>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a19      	ldr	r2, [pc, #100]	@ (800a4d8 <TIM_OC4_SetConfig+0x110>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d113      	bne.n	800a4a0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a47e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a486:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	019b      	lsls	r3, r3, #6
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	4313      	orrs	r3, r2
 800a492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	019b      	lsls	r3, r3, #6
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	621a      	str	r2, [r3, #32]
}
 800a4ba:	bf00      	nop
 800a4bc:	371c      	adds	r7, #28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	40012c00 	.word	0x40012c00
 800a4cc:	40013400 	.word	0x40013400
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800

0800a4dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a50a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	041b      	lsls	r3, r3, #16
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a17      	ldr	r2, [pc, #92]	@ (800a590 <TIM_OC5_SetConfig+0xb4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d00f      	beq.n	800a556 <TIM_OC5_SetConfig+0x7a>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a16      	ldr	r2, [pc, #88]	@ (800a594 <TIM_OC5_SetConfig+0xb8>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d00b      	beq.n	800a556 <TIM_OC5_SetConfig+0x7a>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a15      	ldr	r2, [pc, #84]	@ (800a598 <TIM_OC5_SetConfig+0xbc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d007      	beq.n	800a556 <TIM_OC5_SetConfig+0x7a>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a14      	ldr	r2, [pc, #80]	@ (800a59c <TIM_OC5_SetConfig+0xc0>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d003      	beq.n	800a556 <TIM_OC5_SetConfig+0x7a>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a13      	ldr	r2, [pc, #76]	@ (800a5a0 <TIM_OC5_SetConfig+0xc4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d109      	bne.n	800a56a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a55c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	621a      	str	r2, [r3, #32]
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	40012c00 	.word	0x40012c00
 800a594:	40013400 	.word	0x40013400
 800a598:	40014000 	.word	0x40014000
 800a59c:	40014400 	.word	0x40014400
 800a5a0:	40014800 	.word	0x40014800

0800a5a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	021b      	lsls	r3, r3, #8
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	051b      	lsls	r3, r3, #20
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a18      	ldr	r2, [pc, #96]	@ (800a65c <TIM_OC6_SetConfig+0xb8>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d00f      	beq.n	800a620 <TIM_OC6_SetConfig+0x7c>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a17      	ldr	r2, [pc, #92]	@ (800a660 <TIM_OC6_SetConfig+0xbc>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d00b      	beq.n	800a620 <TIM_OC6_SetConfig+0x7c>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a16      	ldr	r2, [pc, #88]	@ (800a664 <TIM_OC6_SetConfig+0xc0>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d007      	beq.n	800a620 <TIM_OC6_SetConfig+0x7c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a15      	ldr	r2, [pc, #84]	@ (800a668 <TIM_OC6_SetConfig+0xc4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d003      	beq.n	800a620 <TIM_OC6_SetConfig+0x7c>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a14      	ldr	r2, [pc, #80]	@ (800a66c <TIM_OC6_SetConfig+0xc8>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d109      	bne.n	800a634 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a626:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	029b      	lsls	r3, r3, #10
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	4313      	orrs	r3, r2
 800a632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	621a      	str	r2, [r3, #32]
}
 800a64e:	bf00      	nop
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	40012c00 	.word	0x40012c00
 800a660:	40013400 	.word	0x40013400
 800a664:	40014000 	.word	0x40014000
 800a668:	40014400 	.word	0x40014400
 800a66c:	40014800 	.word	0x40014800

0800a670 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a68c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a690:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	4313      	orrs	r3, r2
 800a69a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6a2:	f023 0307 	bic.w	r3, r3, #7
 800a6a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4a4a      	ldr	r2, [pc, #296]	@ (800a7e8 <TIM_SlaveTimer_SetConfig+0x178>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	f000 808a 	beq.w	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a6c6:	4a48      	ldr	r2, [pc, #288]	@ (800a7e8 <TIM_SlaveTimer_SetConfig+0x178>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	f200 8083 	bhi.w	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a6ce:	4a47      	ldr	r2, [pc, #284]	@ (800a7ec <TIM_SlaveTimer_SetConfig+0x17c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	f000 8082 	beq.w	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a6d6:	4a45      	ldr	r2, [pc, #276]	@ (800a7ec <TIM_SlaveTimer_SetConfig+0x17c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d87b      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a6dc:	4a44      	ldr	r2, [pc, #272]	@ (800a7f0 <TIM_SlaveTimer_SetConfig+0x180>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d07b      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a6e2:	4a43      	ldr	r2, [pc, #268]	@ (800a7f0 <TIM_SlaveTimer_SetConfig+0x180>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d875      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a6e8:	4a42      	ldr	r2, [pc, #264]	@ (800a7f4 <TIM_SlaveTimer_SetConfig+0x184>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d075      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a6ee:	4a41      	ldr	r2, [pc, #260]	@ (800a7f4 <TIM_SlaveTimer_SetConfig+0x184>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d86f      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a6f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a6f8:	d06f      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a6fa:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a6fe:	d869      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a700:	2b70      	cmp	r3, #112	@ 0x70
 800a702:	d01a      	beq.n	800a73a <TIM_SlaveTimer_SetConfig+0xca>
 800a704:	2b70      	cmp	r3, #112	@ 0x70
 800a706:	d865      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a708:	2b60      	cmp	r3, #96	@ 0x60
 800a70a:	d059      	beq.n	800a7c0 <TIM_SlaveTimer_SetConfig+0x150>
 800a70c:	2b60      	cmp	r3, #96	@ 0x60
 800a70e:	d861      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a710:	2b50      	cmp	r3, #80	@ 0x50
 800a712:	d04b      	beq.n	800a7ac <TIM_SlaveTimer_SetConfig+0x13c>
 800a714:	2b50      	cmp	r3, #80	@ 0x50
 800a716:	d85d      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a718:	2b40      	cmp	r3, #64	@ 0x40
 800a71a:	d019      	beq.n	800a750 <TIM_SlaveTimer_SetConfig+0xe0>
 800a71c:	2b40      	cmp	r3, #64	@ 0x40
 800a71e:	d859      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a720:	2b30      	cmp	r3, #48	@ 0x30
 800a722:	d05a      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a724:	2b30      	cmp	r3, #48	@ 0x30
 800a726:	d855      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d056      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a72c:	2b20      	cmp	r3, #32
 800a72e:	d851      	bhi.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d052      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a734:	2b10      	cmp	r3, #16
 800a736:	d050      	beq.n	800a7da <TIM_SlaveTimer_SetConfig+0x16a>
 800a738:	e04c      	b.n	800a7d4 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a74a:	f000 f9ef 	bl	800ab2c <TIM_ETR_SetConfig>
      break;
 800a74e:	e045      	b.n	800a7dc <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b05      	cmp	r3, #5
 800a756:	d004      	beq.n	800a762 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a75c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800a760:	d101      	bne.n	800a766 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e03b      	b.n	800a7de <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6a1a      	ldr	r2, [r3, #32]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0201 	bic.w	r2, r2, #1
 800a77c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a78c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	011b      	lsls	r3, r3, #4
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4313      	orrs	r3, r2
 800a798:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	621a      	str	r2, [r3, #32]
      break;
 800a7aa:	e017      	b.n	800a7dc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f000 f885 	bl	800a8c8 <TIM_TI1_ConfigInputStage>
      break;
 800a7be:	e00d      	b.n	800a7dc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	f000 f8e7 	bl	800a9a0 <TIM_TI2_ConfigInputStage>
      break;
 800a7d2:	e003      	b.n	800a7dc <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d8:	e000      	b.n	800a7dc <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 800a7da:	bf00      	nop
  }

  return status;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	00100070 	.word	0x00100070
 800a7ec:	00100040 	.word	0x00100040
 800a7f0:	00100030 	.word	0x00100030
 800a7f4:	00100020 	.word	0x00100020

0800a7f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	f023 0201 	bic.w	r2, r3, #1
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	4a24      	ldr	r2, [pc, #144]	@ (800a8b4 <TIM_TI1_SetConfig+0xbc>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <TIM_TI1_SetConfig+0x56>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82c:	d00f      	beq.n	800a84e <TIM_TI1_SetConfig+0x56>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4a21      	ldr	r2, [pc, #132]	@ (800a8b8 <TIM_TI1_SetConfig+0xc0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d00b      	beq.n	800a84e <TIM_TI1_SetConfig+0x56>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	4a20      	ldr	r2, [pc, #128]	@ (800a8bc <TIM_TI1_SetConfig+0xc4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d007      	beq.n	800a84e <TIM_TI1_SetConfig+0x56>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c0 <TIM_TI1_SetConfig+0xc8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d003      	beq.n	800a84e <TIM_TI1_SetConfig+0x56>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4a1e      	ldr	r2, [pc, #120]	@ (800a8c4 <TIM_TI1_SetConfig+0xcc>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d101      	bne.n	800a852 <TIM_TI1_SetConfig+0x5a>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <TIM_TI1_SetConfig+0x5c>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d008      	beq.n	800a86a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4313      	orrs	r3, r2
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	e003      	b.n	800a872 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4313      	orrs	r3, r2
 800a884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f023 030a 	bic.w	r3, r3, #10
 800a88c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f003 030a 	and.w	r3, r3, #10
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	621a      	str	r2, [r3, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40012c00 	.word	0x40012c00
 800a8b8:	40000400 	.word	0x40000400
 800a8bc:	40000800 	.word	0x40000800
 800a8c0:	40013400 	.word	0x40013400
 800a8c4:	40014000 	.word	0x40014000

0800a8c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	f023 0201 	bic.w	r2, r3, #1
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 030a 	bic.w	r3, r3, #10
 800a904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	621a      	str	r2, [r3, #32]
}
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a926:	b480      	push	{r7}
 800a928:	b087      	sub	sp, #28
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	607a      	str	r2, [r7, #4]
 800a932:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	f023 0210 	bic.w	r2, r3, #16
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	021b      	lsls	r3, r3, #8
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	031b      	lsls	r3, r3, #12
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4313      	orrs	r3, r2
 800a970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a978:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	4313      	orrs	r3, r2
 800a986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	621a      	str	r2, [r3, #32]
}
 800a994:	bf00      	nop
 800a996:	371c      	adds	r7, #28
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	f023 0210 	bic.w	r2, r3, #16
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	031b      	lsls	r3, r3, #12
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	621a      	str	r2, [r3, #32]
}
 800a9f4:	bf00      	nop
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800aa50:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	021b      	lsls	r3, r3, #8
 800aa56:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	621a      	str	r2, [r3, #32]
}
 800aa6c:	bf00      	nop
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaa4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aab6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	031b      	lsls	r3, r3, #12
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800aaca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	031b      	lsls	r3, r3, #12
 800aad0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	621a      	str	r2, [r3, #32]
}
 800aae6:	bf00      	nop
 800aae8:	371c      	adds	r7, #28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ab08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	f043 0307 	orr.w	r3, r3, #7
 800ab18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	609a      	str	r2, [r3, #8]
}
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	021a      	lsls	r2, r3, #8
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	609a      	str	r2, [r3, #8]
}
 800ab60:	bf00      	nop
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	2201      	movs	r2, #1
 800ab80:	fa02 f303 	lsl.w	r3, r2, r3
 800ab84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6a1a      	ldr	r2, [r3, #32]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	43db      	mvns	r3, r3
 800ab8e:	401a      	ands	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a1a      	ldr	r2, [r3, #32]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f003 031f 	and.w	r3, r3, #31
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	fa01 f303 	lsl.w	r3, r1, r3
 800aba4:	431a      	orrs	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	621a      	str	r2, [r3, #32]
}
 800abaa:	bf00      	nop
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
	...

0800abb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d101      	bne.n	800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abcc:	2302      	movs	r3, #2
 800abce:	e065      	b.n	800ac9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a2c      	ldr	r2, [pc, #176]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d004      	beq.n	800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a2b      	ldr	r2, [pc, #172]	@ (800acac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d108      	bne.n	800ac16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ac0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ac1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a1b      	ldr	r2, [pc, #108]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d018      	beq.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac46:	d013      	beq.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d00e      	beq.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a17      	ldr	r2, [pc, #92]	@ (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d009      	beq.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a12      	ldr	r2, [pc, #72]	@ (800acac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d004      	beq.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a13      	ldr	r2, [pc, #76]	@ (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d10c      	bne.n	800ac8a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	40012c00 	.word	0x40012c00
 800acac:	40013400 	.word	0x40013400
 800acb0:	40000400 	.word	0x40000400
 800acb4:	40000800 	.word	0x40000800
 800acb8:	40014000 	.word	0x40014000

0800acbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e042      	b.n	800ade0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7f7 fcf5 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2224      	movs	r2, #36	@ 0x24
 800ad76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0201 	bic.w	r2, r2, #1
 800ad88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fb9e 	bl	800b4d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f8cf 	bl	800af3c <UART_SetConfig>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d101      	bne.n	800ada8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e01b      	b.n	800ade0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f042 0201 	orr.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fc1d 	bl	800b618 <UART_CheckIdleState>
 800adde:	4603      	mov	r3, r0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	@ 0x28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	d167      	bne.n	800aed0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <HAL_UART_Transmit_DMA+0x24>
 800ae06:	88fb      	ldrh	r3, [r7, #6]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e060      	b.n	800aed2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	88fa      	ldrh	r2, [r7, #6]
 800ae1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	88fa      	ldrh	r2, [r7, #6]
 800ae22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2221      	movs	r2, #33	@ 0x21
 800ae32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d028      	beq.n	800ae90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae42:	4a26      	ldr	r2, [pc, #152]	@ (800aedc <HAL_UART_Transmit_DMA+0xf4>)
 800ae44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae4a:	4a25      	ldr	r2, [pc, #148]	@ (800aee0 <HAL_UART_Transmit_DMA+0xf8>)
 800ae4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae52:	4a24      	ldr	r2, [pc, #144]	@ (800aee4 <HAL_UART_Transmit_DMA+0xfc>)
 800ae54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae66:	4619      	mov	r1, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3328      	adds	r3, #40	@ 0x28
 800ae6e:	461a      	mov	r2, r3
 800ae70:	88fb      	ldrh	r3, [r7, #6]
 800ae72:	f7fa faed 	bl	8005450 <HAL_DMA_Start_IT>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d009      	beq.n	800ae90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2210      	movs	r2, #16
 800ae80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e020      	b.n	800aed2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2240      	movs	r2, #64	@ 0x40
 800ae96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	613b      	str	r3, [r7, #16]
   return(result);
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb8:	623a      	str	r2, [r7, #32]
 800aeba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	69f9      	ldr	r1, [r7, #28]
 800aebe:	6a3a      	ldr	r2, [r7, #32]
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e5      	bne.n	800ae98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	e000      	b.n	800aed2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aed0:	2302      	movs	r3, #2
  }
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3728      	adds	r7, #40	@ 0x28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	0800bae3 	.word	0x0800bae3
 800aee0:	0800bb7d 	.word	0x0800bb7d
 800aee4:	0800bd03 	.word	0x0800bd03

0800aee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af40:	b08c      	sub	sp, #48	@ 0x30
 800af42:	af00      	add	r7, sp, #0
 800af44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	431a      	orrs	r2, r3
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	4313      	orrs	r3, r2
 800af62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4bab      	ldr	r3, [pc, #684]	@ (800b218 <UART_SetConfig+0x2dc>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	6812      	ldr	r2, [r2, #0]
 800af72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af74:	430b      	orrs	r3, r1
 800af76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4aa0      	ldr	r2, [pc, #640]	@ (800b21c <UART_SetConfig+0x2e0>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d004      	beq.n	800afa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afa4:	4313      	orrs	r3, r2
 800afa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800afb2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	6812      	ldr	r2, [r2, #0]
 800afba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afbc:	430b      	orrs	r3, r1
 800afbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc6:	f023 010f 	bic.w	r1, r3, #15
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a91      	ldr	r2, [pc, #580]	@ (800b220 <UART_SetConfig+0x2e4>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d125      	bne.n	800b02c <UART_SetConfig+0xf0>
 800afe0:	4b90      	ldr	r3, [pc, #576]	@ (800b224 <UART_SetConfig+0x2e8>)
 800afe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	2b03      	cmp	r3, #3
 800afec:	d81a      	bhi.n	800b024 <UART_SetConfig+0xe8>
 800afee:	a201      	add	r2, pc, #4	@ (adr r2, 800aff4 <UART_SetConfig+0xb8>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b005 	.word	0x0800b005
 800aff8:	0800b015 	.word	0x0800b015
 800affc:	0800b00d 	.word	0x0800b00d
 800b000:	0800b01d 	.word	0x0800b01d
 800b004:	2301      	movs	r3, #1
 800b006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b00a:	e0d6      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b00c:	2302      	movs	r3, #2
 800b00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b012:	e0d2      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b014:	2304      	movs	r3, #4
 800b016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01a:	e0ce      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b01c:	2308      	movs	r3, #8
 800b01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b022:	e0ca      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b024:	2310      	movs	r3, #16
 800b026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02a:	e0c6      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a7d      	ldr	r2, [pc, #500]	@ (800b228 <UART_SetConfig+0x2ec>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d138      	bne.n	800b0a8 <UART_SetConfig+0x16c>
 800b036:	4b7b      	ldr	r3, [pc, #492]	@ (800b224 <UART_SetConfig+0x2e8>)
 800b038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b03c:	f003 030c 	and.w	r3, r3, #12
 800b040:	2b0c      	cmp	r3, #12
 800b042:	d82d      	bhi.n	800b0a0 <UART_SetConfig+0x164>
 800b044:	a201      	add	r2, pc, #4	@ (adr r2, 800b04c <UART_SetConfig+0x110>)
 800b046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04a:	bf00      	nop
 800b04c:	0800b081 	.word	0x0800b081
 800b050:	0800b0a1 	.word	0x0800b0a1
 800b054:	0800b0a1 	.word	0x0800b0a1
 800b058:	0800b0a1 	.word	0x0800b0a1
 800b05c:	0800b091 	.word	0x0800b091
 800b060:	0800b0a1 	.word	0x0800b0a1
 800b064:	0800b0a1 	.word	0x0800b0a1
 800b068:	0800b0a1 	.word	0x0800b0a1
 800b06c:	0800b089 	.word	0x0800b089
 800b070:	0800b0a1 	.word	0x0800b0a1
 800b074:	0800b0a1 	.word	0x0800b0a1
 800b078:	0800b0a1 	.word	0x0800b0a1
 800b07c:	0800b099 	.word	0x0800b099
 800b080:	2300      	movs	r3, #0
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b086:	e098      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b088:	2302      	movs	r3, #2
 800b08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08e:	e094      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b090:	2304      	movs	r3, #4
 800b092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b096:	e090      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b098:	2308      	movs	r3, #8
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09e:	e08c      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a6:	e088      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a5f      	ldr	r2, [pc, #380]	@ (800b22c <UART_SetConfig+0x2f0>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d125      	bne.n	800b0fe <UART_SetConfig+0x1c2>
 800b0b2:	4b5c      	ldr	r3, [pc, #368]	@ (800b224 <UART_SetConfig+0x2e8>)
 800b0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b0bc:	2b30      	cmp	r3, #48	@ 0x30
 800b0be:	d016      	beq.n	800b0ee <UART_SetConfig+0x1b2>
 800b0c0:	2b30      	cmp	r3, #48	@ 0x30
 800b0c2:	d818      	bhi.n	800b0f6 <UART_SetConfig+0x1ba>
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d00a      	beq.n	800b0de <UART_SetConfig+0x1a2>
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d814      	bhi.n	800b0f6 <UART_SetConfig+0x1ba>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <UART_SetConfig+0x19a>
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d008      	beq.n	800b0e6 <UART_SetConfig+0x1aa>
 800b0d4:	e00f      	b.n	800b0f6 <UART_SetConfig+0x1ba>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0dc:	e06d      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e4:	e069      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0e6:	2304      	movs	r3, #4
 800b0e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ec:	e065      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0ee:	2308      	movs	r3, #8
 800b0f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f4:	e061      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fc:	e05d      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a4b      	ldr	r2, [pc, #300]	@ (800b230 <UART_SetConfig+0x2f4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d125      	bne.n	800b154 <UART_SetConfig+0x218>
 800b108:	4b46      	ldr	r3, [pc, #280]	@ (800b224 <UART_SetConfig+0x2e8>)
 800b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b10e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b112:	2bc0      	cmp	r3, #192	@ 0xc0
 800b114:	d016      	beq.n	800b144 <UART_SetConfig+0x208>
 800b116:	2bc0      	cmp	r3, #192	@ 0xc0
 800b118:	d818      	bhi.n	800b14c <UART_SetConfig+0x210>
 800b11a:	2b80      	cmp	r3, #128	@ 0x80
 800b11c:	d00a      	beq.n	800b134 <UART_SetConfig+0x1f8>
 800b11e:	2b80      	cmp	r3, #128	@ 0x80
 800b120:	d814      	bhi.n	800b14c <UART_SetConfig+0x210>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <UART_SetConfig+0x1f0>
 800b126:	2b40      	cmp	r3, #64	@ 0x40
 800b128:	d008      	beq.n	800b13c <UART_SetConfig+0x200>
 800b12a:	e00f      	b.n	800b14c <UART_SetConfig+0x210>
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b132:	e042      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b134:	2302      	movs	r3, #2
 800b136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b13a:	e03e      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b13c:	2304      	movs	r3, #4
 800b13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b142:	e03a      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b144:	2308      	movs	r3, #8
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14a:	e036      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b14c:	2310      	movs	r3, #16
 800b14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b152:	e032      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a30      	ldr	r2, [pc, #192]	@ (800b21c <UART_SetConfig+0x2e0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d12a      	bne.n	800b1b4 <UART_SetConfig+0x278>
 800b15e:	4b31      	ldr	r3, [pc, #196]	@ (800b224 <UART_SetConfig+0x2e8>)
 800b160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b16c:	d01a      	beq.n	800b1a4 <UART_SetConfig+0x268>
 800b16e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b172:	d81b      	bhi.n	800b1ac <UART_SetConfig+0x270>
 800b174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b178:	d00c      	beq.n	800b194 <UART_SetConfig+0x258>
 800b17a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b17e:	d815      	bhi.n	800b1ac <UART_SetConfig+0x270>
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <UART_SetConfig+0x250>
 800b184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b188:	d008      	beq.n	800b19c <UART_SetConfig+0x260>
 800b18a:	e00f      	b.n	800b1ac <UART_SetConfig+0x270>
 800b18c:	2300      	movs	r3, #0
 800b18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b192:	e012      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b194:	2302      	movs	r3, #2
 800b196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19a:	e00e      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b19c:	2304      	movs	r3, #4
 800b19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a2:	e00a      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1aa:	e006      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1b2:	e002      	b.n	800b1ba <UART_SetConfig+0x27e>
 800b1b4:	2310      	movs	r3, #16
 800b1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a17      	ldr	r2, [pc, #92]	@ (800b21c <UART_SetConfig+0x2e0>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	f040 80a8 	bne.w	800b316 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1ca:	2b08      	cmp	r3, #8
 800b1cc:	d834      	bhi.n	800b238 <UART_SetConfig+0x2fc>
 800b1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <UART_SetConfig+0x298>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b1f9 	.word	0x0800b1f9
 800b1d8:	0800b239 	.word	0x0800b239
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b239 	.word	0x0800b239
 800b1e4:	0800b207 	.word	0x0800b207
 800b1e8:	0800b239 	.word	0x0800b239
 800b1ec:	0800b239 	.word	0x0800b239
 800b1f0:	0800b239 	.word	0x0800b239
 800b1f4:	0800b20f 	.word	0x0800b20f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1f8:	f7fd f976 	bl	80084e8 <HAL_RCC_GetPCLK1Freq>
 800b1fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1fe:	e021      	b.n	800b244 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b200:	4b0c      	ldr	r3, [pc, #48]	@ (800b234 <UART_SetConfig+0x2f8>)
 800b202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b204:	e01e      	b.n	800b244 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b206:	f7fd f901 	bl	800840c <HAL_RCC_GetSysClockFreq>
 800b20a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b20c:	e01a      	b.n	800b244 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b20e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b214:	e016      	b.n	800b244 <UART_SetConfig+0x308>
 800b216:	bf00      	nop
 800b218:	cfff69f3 	.word	0xcfff69f3
 800b21c:	40008000 	.word	0x40008000
 800b220:	40013800 	.word	0x40013800
 800b224:	40021000 	.word	0x40021000
 800b228:	40004400 	.word	0x40004400
 800b22c:	40004800 	.word	0x40004800
 800b230:	40004c00 	.word	0x40004c00
 800b234:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b238:	2300      	movs	r3, #0
 800b23a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b242:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 812a 	beq.w	800b4a0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b250:	4a9e      	ldr	r2, [pc, #632]	@ (800b4cc <UART_SetConfig+0x590>)
 800b252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b256:	461a      	mov	r2, r3
 800b258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b25e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	4613      	mov	r3, r2
 800b266:	005b      	lsls	r3, r3, #1
 800b268:	4413      	add	r3, r2
 800b26a:	69ba      	ldr	r2, [r7, #24]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d305      	bcc.n	800b27c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d903      	bls.n	800b284 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b282:	e10d      	b.n	800b4a0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b286:	2200      	movs	r2, #0
 800b288:	60bb      	str	r3, [r7, #8]
 800b28a:	60fa      	str	r2, [r7, #12]
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b290:	4a8e      	ldr	r2, [pc, #568]	@ (800b4cc <UART_SetConfig+0x590>)
 800b292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b296:	b29b      	uxth	r3, r3
 800b298:	2200      	movs	r2, #0
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	607a      	str	r2, [r7, #4]
 800b29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2a6:	f7f5 fd17 	bl	8000cd8 <__aeabi_uldivmod>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	f04f 0200 	mov.w	r2, #0
 800b2b6:	f04f 0300 	mov.w	r3, #0
 800b2ba:	020b      	lsls	r3, r1, #8
 800b2bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2c0:	0202      	lsls	r2, r0, #8
 800b2c2:	6979      	ldr	r1, [r7, #20]
 800b2c4:	6849      	ldr	r1, [r1, #4]
 800b2c6:	0849      	lsrs	r1, r1, #1
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	eb12 0804 	adds.w	r8, r2, r4
 800b2d2:	eb43 0905 	adc.w	r9, r3, r5
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	469a      	mov	sl, r3
 800b2de:	4693      	mov	fp, r2
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	f7f5 fcf6 	bl	8000cd8 <__aeabi_uldivmod>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2fa:	d308      	bcc.n	800b30e <UART_SetConfig+0x3d2>
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b302:	d204      	bcs.n	800b30e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6a3a      	ldr	r2, [r7, #32]
 800b30a:	60da      	str	r2, [r3, #12]
 800b30c:	e0c8      	b.n	800b4a0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b314:	e0c4      	b.n	800b4a0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b31e:	d167      	bne.n	800b3f0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b320:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b324:	2b08      	cmp	r3, #8
 800b326:	d828      	bhi.n	800b37a <UART_SetConfig+0x43e>
 800b328:	a201      	add	r2, pc, #4	@ (adr r2, 800b330 <UART_SetConfig+0x3f4>)
 800b32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32e:	bf00      	nop
 800b330:	0800b355 	.word	0x0800b355
 800b334:	0800b35d 	.word	0x0800b35d
 800b338:	0800b365 	.word	0x0800b365
 800b33c:	0800b37b 	.word	0x0800b37b
 800b340:	0800b36b 	.word	0x0800b36b
 800b344:	0800b37b 	.word	0x0800b37b
 800b348:	0800b37b 	.word	0x0800b37b
 800b34c:	0800b37b 	.word	0x0800b37b
 800b350:	0800b373 	.word	0x0800b373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b354:	f7fd f8c8 	bl	80084e8 <HAL_RCC_GetPCLK1Freq>
 800b358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b35a:	e014      	b.n	800b386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b35c:	f7fd f8da 	bl	8008514 <HAL_RCC_GetPCLK2Freq>
 800b360:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b362:	e010      	b.n	800b386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b364:	4b5a      	ldr	r3, [pc, #360]	@ (800b4d0 <UART_SetConfig+0x594>)
 800b366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b368:	e00d      	b.n	800b386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b36a:	f7fd f84f 	bl	800840c <HAL_RCC_GetSysClockFreq>
 800b36e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b370:	e009      	b.n	800b386 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b378:	e005      	b.n	800b386 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8089 	beq.w	800b4a0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	4a4e      	ldr	r2, [pc, #312]	@ (800b4cc <UART_SetConfig+0x590>)
 800b394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b398:	461a      	mov	r2, r3
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3a0:	005a      	lsls	r2, r3, #1
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	441a      	add	r2, r3
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	2b0f      	cmp	r3, #15
 800b3b8:	d916      	bls.n	800b3e8 <UART_SetConfig+0x4ac>
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3c0:	d212      	bcs.n	800b3e8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	f023 030f 	bic.w	r3, r3, #15
 800b3ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	085b      	lsrs	r3, r3, #1
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	8bfb      	ldrh	r3, [r7, #30]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	8bfa      	ldrh	r2, [r7, #30]
 800b3e4:	60da      	str	r2, [r3, #12]
 800b3e6:	e05b      	b.n	800b4a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3ee:	e057      	b.n	800b4a0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	d828      	bhi.n	800b44a <UART_SetConfig+0x50e>
 800b3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b400 <UART_SetConfig+0x4c4>)
 800b3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fe:	bf00      	nop
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b42d 	.word	0x0800b42d
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	0800b44b 	.word	0x0800b44b
 800b410:	0800b43b 	.word	0x0800b43b
 800b414:	0800b44b 	.word	0x0800b44b
 800b418:	0800b44b 	.word	0x0800b44b
 800b41c:	0800b44b 	.word	0x0800b44b
 800b420:	0800b443 	.word	0x0800b443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b424:	f7fd f860 	bl	80084e8 <HAL_RCC_GetPCLK1Freq>
 800b428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b42a:	e014      	b.n	800b456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b42c:	f7fd f872 	bl	8008514 <HAL_RCC_GetPCLK2Freq>
 800b430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b432:	e010      	b.n	800b456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b434:	4b26      	ldr	r3, [pc, #152]	@ (800b4d0 <UART_SetConfig+0x594>)
 800b436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b438:	e00d      	b.n	800b456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b43a:	f7fc ffe7 	bl	800840c <HAL_RCC_GetSysClockFreq>
 800b43e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b440:	e009      	b.n	800b456 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b448:	e005      	b.n	800b456 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b44a:	2300      	movs	r3, #0
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b454:	bf00      	nop
    }

    if (pclk != 0U)
 800b456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d021      	beq.n	800b4a0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b460:	4a1a      	ldr	r2, [pc, #104]	@ (800b4cc <UART_SetConfig+0x590>)
 800b462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b466:	461a      	mov	r2, r3
 800b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	085b      	lsrs	r3, r3, #1
 800b474:	441a      	add	r2, r3
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	2b0f      	cmp	r3, #15
 800b484:	d909      	bls.n	800b49a <UART_SetConfig+0x55e>
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b48c:	d205      	bcs.n	800b49a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	b29a      	uxth	r2, r3
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60da      	str	r2, [r3, #12]
 800b498:	e002      	b.n	800b4a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3730      	adds	r7, #48	@ 0x30
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ca:	bf00      	nop
 800b4cc:	08015624 	.word	0x08015624
 800b4d0:	00f42400 	.word	0x00f42400

0800b4d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00a      	beq.n	800b4fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	430a      	orrs	r2, r1
 800b4fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00a      	beq.n	800b520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	430a      	orrs	r2, r1
 800b51e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b524:	f003 0302 	and.w	r3, r3, #2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b546:	f003 0304 	and.w	r3, r3, #4
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	430a      	orrs	r2, r1
 800b562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b58a:	f003 0320 	and.w	r3, r3, #32
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01a      	beq.n	800b5ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5d2:	d10a      	bne.n	800b5ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	430a      	orrs	r2, r1
 800b5e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	605a      	str	r2, [r3, #4]
  }
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b098      	sub	sp, #96	@ 0x60
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b628:	f7f7 fb82 	bl	8002d30 <HAL_GetTick>
 800b62c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 0308 	and.w	r3, r3, #8
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d12f      	bne.n	800b69c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b63c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b644:	2200      	movs	r2, #0
 800b646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f88e 	bl	800b76c <UART_WaitOnFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d022      	beq.n	800b69c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65e:	e853 3f00 	ldrex	r3, [r3]
 800b662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b66a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	461a      	mov	r2, r3
 800b672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b674:	647b      	str	r3, [r7, #68]	@ 0x44
 800b676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b67a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b67c:	e841 2300 	strex	r3, r2, [r1]
 800b680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e6      	bne.n	800b656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b698:	2303      	movs	r3, #3
 800b69a:	e063      	b.n	800b764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0304 	and.w	r3, r3, #4
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d149      	bne.n	800b73e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f857 	bl	800b76c <UART_WaitOnFlagUntilTimeout>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d03c      	beq.n	800b73e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e6      	bne.n	800b6c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	e853 3f00 	ldrex	r3, [r3]
 800b704:	60fb      	str	r3, [r7, #12]
   return(result);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f023 0301 	bic.w	r3, r3, #1
 800b70c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b716:	61fa      	str	r2, [r7, #28]
 800b718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71a:	69b9      	ldr	r1, [r7, #24]
 800b71c:	69fa      	ldr	r2, [r7, #28]
 800b71e:	e841 2300 	strex	r3, r2, [r1]
 800b722:	617b      	str	r3, [r7, #20]
   return(result);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1e5      	bne.n	800b6f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2220      	movs	r2, #32
 800b72e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e012      	b.n	800b764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3758      	adds	r7, #88	@ 0x58
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b77c:	e04f      	b.n	800b81e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d04b      	beq.n	800b81e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b786:	f7f7 fad3 	bl	8002d30 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	429a      	cmp	r2, r3
 800b794:	d302      	bcc.n	800b79c <UART_WaitOnFlagUntilTimeout+0x30>
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e04e      	b.n	800b83e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0304 	and.w	r3, r3, #4
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d037      	beq.n	800b81e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b80      	cmp	r3, #128	@ 0x80
 800b7b2:	d034      	beq.n	800b81e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2b40      	cmp	r3, #64	@ 0x40
 800b7b8:	d031      	beq.n	800b81e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	f003 0308 	and.w	r3, r3, #8
 800b7c4:	2b08      	cmp	r3, #8
 800b7c6:	d110      	bne.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2208      	movs	r2, #8
 800b7ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f000 f920 	bl	800ba16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2208      	movs	r2, #8
 800b7da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e029      	b.n	800b83e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7f8:	d111      	bne.n	800b81e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 f906 	bl	800ba16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e00f      	b.n	800b83e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	69da      	ldr	r2, [r3, #28]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	4013      	ands	r3, r2
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	bf0c      	ite	eq
 800b82e:	2301      	moveq	r3, #1
 800b830:	2300      	movne	r3, #0
 800b832:	b2db      	uxtb	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d0a0      	beq.n	800b77e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b096      	sub	sp, #88	@ 0x58
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	4613      	mov	r3, r2
 800b854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	88fa      	ldrh	r2, [r7, #6]
 800b860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2222      	movs	r2, #34	@ 0x22
 800b870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d02d      	beq.n	800b8da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b884:	4a40      	ldr	r2, [pc, #256]	@ (800b988 <UART_Start_Receive_DMA+0x140>)
 800b886:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b88e:	4a3f      	ldr	r2, [pc, #252]	@ (800b98c <UART_Start_Receive_DMA+0x144>)
 800b890:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b898:	4a3d      	ldr	r2, [pc, #244]	@ (800b990 <UART_Start_Receive_DMA+0x148>)
 800b89a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3324      	adds	r3, #36	@ 0x24
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	88fb      	ldrh	r3, [r7, #6]
 800b8bc:	f7f9 fdc8 	bl	8005450 <HAL_DMA_Start_IT>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d009      	beq.n	800b8da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2210      	movs	r2, #16
 800b8ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e051      	b.n	800b97e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d018      	beq.n	800b914 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ea:	e853 3f00 	ldrex	r3, [r3]
 800b8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b900:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b902:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b904:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b908:	e841 2300 	strex	r3, r2, [r1]
 800b90c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1e6      	bne.n	800b8e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3308      	adds	r3, #8
 800b91a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91e:	e853 3f00 	ldrex	r3, [r3]
 800b922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3308      	adds	r3, #8
 800b932:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b934:	637a      	str	r2, [r7, #52]	@ 0x34
 800b936:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b938:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b93c:	e841 2300 	strex	r3, r2, [r1]
 800b940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1e5      	bne.n	800b914 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3308      	adds	r3, #8
 800b94e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	613b      	str	r3, [r7, #16]
   return(result);
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b95e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3308      	adds	r3, #8
 800b966:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b968:	623a      	str	r2, [r7, #32]
 800b96a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96c:	69f9      	ldr	r1, [r7, #28]
 800b96e:	6a3a      	ldr	r2, [r7, #32]
 800b970:	e841 2300 	strex	r3, r2, [r1]
 800b974:	61bb      	str	r3, [r7, #24]
   return(result);
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1e5      	bne.n	800b948 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3758      	adds	r7, #88	@ 0x58
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	0800bb99 	.word	0x0800bb99
 800b98c:	0800bcc5 	.word	0x0800bcc5
 800b990:	0800bd03 	.word	0x0800bd03

0800b994 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b994:	b480      	push	{r7}
 800b996:	b08f      	sub	sp, #60	@ 0x3c
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	e853 3f00 	ldrex	r3, [r3]
 800b9a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b9b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9c2:	e841 2300 	strex	r3, r2, [r1]
 800b9c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1e6      	bne.n	800b99c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b9e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ee:	61ba      	str	r2, [r7, #24]
 800b9f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6979      	ldr	r1, [r7, #20]
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e5      	bne.n	800b9ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ba0a:	bf00      	nop
 800ba0c:	373c      	adds	r7, #60	@ 0x3c
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b095      	sub	sp, #84	@ 0x54
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e6      	bne.n	800ba1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3308      	adds	r3, #8
 800ba56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	e853 3f00 	ldrex	r3, [r3]
 800ba5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba66:	f023 0301 	bic.w	r3, r3, #1
 800ba6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3308      	adds	r3, #8
 800ba72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba7c:	e841 2300 	strex	r3, r2, [r1]
 800ba80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1e3      	bne.n	800ba50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d118      	bne.n	800bac2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	e853 3f00 	ldrex	r3, [r3]
 800ba9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f023 0310 	bic.w	r3, r3, #16
 800baa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baae:	61bb      	str	r3, [r7, #24]
 800bab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab2:	6979      	ldr	r1, [r7, #20]
 800bab4:	69ba      	ldr	r2, [r7, #24]
 800bab6:	e841 2300 	strex	r3, r2, [r1]
 800baba:	613b      	str	r3, [r7, #16]
   return(result);
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1e6      	bne.n	800ba90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bad6:	bf00      	nop
 800bad8:	3754      	adds	r7, #84	@ 0x54
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b090      	sub	sp, #64	@ 0x40
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0320 	and.w	r3, r3, #32
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d137      	bne.n	800bb6e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb00:	2200      	movs	r2, #0
 800bb02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	623b      	str	r3, [r7, #32]
   return(result);
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3308      	adds	r3, #8
 800bb24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb26:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e5      	bne.n	800bb06 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	e853 3f00 	ldrex	r3, [r3]
 800bb46:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	461a      	mov	r2, r3
 800bb56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5c:	69b9      	ldr	r1, [r7, #24]
 800bb5e:	69fa      	ldr	r2, [r7, #28]
 800bb60:	e841 2300 	strex	r3, r2, [r1]
 800bb64:	617b      	str	r3, [r7, #20]
   return(result);
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1e6      	bne.n	800bb3a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb6c:	e002      	b.n	800bb74 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bb6e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb70:	f7ff f9ba 	bl	800aee8 <HAL_UART_TxCpltCallback>
}
 800bb74:	bf00      	nop
 800bb76:	3740      	adds	r7, #64	@ 0x40
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff f9b6 	bl	800aefc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b09c      	sub	sp, #112	@ 0x70
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0320 	and.w	r3, r3, #32
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d171      	bne.n	800bc98 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bbb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bbca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bbd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bbda:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bbe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bbe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e6      	bne.n	800bbbc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc00:	f023 0301 	bic.w	r3, r3, #1
 800bc04:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc0e:	647a      	str	r2, [r7, #68]	@ 0x44
 800bc10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e5      	bne.n	800bbee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3308      	adds	r3, #8
 800bc28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	623b      	str	r3, [r7, #32]
   return(result);
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc38:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc42:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e5      	bne.n	800bc22 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc58:	2220      	movs	r2, #32
 800bc5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d118      	bne.n	800bc98 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f023 0310 	bic.w	r3, r3, #16
 800bc7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	461a      	mov	r2, r3
 800bc82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc88:	69b9      	ldr	r1, [r7, #24]
 800bc8a:	69fa      	ldr	r2, [r7, #28]
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	617b      	str	r3, [r7, #20]
   return(result);
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e6      	bne.n	800bc66 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d107      	bne.n	800bcb6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bcac:	4619      	mov	r1, r3
 800bcae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bcb0:	f7ff f938 	bl	800af24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcb4:	e002      	b.n	800bcbc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bcb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bcb8:	f7f5 fa96 	bl	80011e8 <HAL_UART_RxCpltCallback>
}
 800bcbc:	bf00      	nop
 800bcbe:	3770      	adds	r7, #112	@ 0x70
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d109      	bne.n	800bcf4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bce6:	085b      	lsrs	r3, r3, #1
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	4619      	mov	r1, r3
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f7ff f919 	bl	800af24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcf2:	e002      	b.n	800bcfa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7f5 fa63 	bl	80011c0 <HAL_UART_RxHalfCpltCallback>
}
 800bcfa:	bf00      	nop
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b086      	sub	sp, #24
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd2a:	2b80      	cmp	r3, #128	@ 0x80
 800bd2c:	d109      	bne.n	800bd42 <UART_DMAError+0x40>
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	2b21      	cmp	r3, #33	@ 0x21
 800bd32:	d106      	bne.n	800bd42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bd3c:	6978      	ldr	r0, [r7, #20]
 800bd3e:	f7ff fe29 	bl	800b994 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd4c:	2b40      	cmp	r3, #64	@ 0x40
 800bd4e:	d109      	bne.n	800bd64 <UART_DMAError+0x62>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b22      	cmp	r3, #34	@ 0x22
 800bd54:	d106      	bne.n	800bd64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bd5e:	6978      	ldr	r0, [r7, #20]
 800bd60:	f7ff fe59 	bl	800ba16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd6a:	f043 0210 	orr.w	r2, r3, #16
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd74:	6978      	ldr	r0, [r7, #20]
 800bd76:	f7ff f8cb 	bl	800af10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd7a:	bf00      	nop
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b085      	sub	sp, #20
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d101      	bne.n	800bd98 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e027      	b.n	800bde8 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2224      	movs	r2, #36	@ 0x24
 800bda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0201 	bic.w	r2, r2, #1
 800bdbe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bdc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be08:	2302      	movs	r3, #2
 800be0a:	e02d      	b.n	800be68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2224      	movs	r2, #36	@ 0x24
 800be18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f022 0201 	bic.w	r2, r2, #1
 800be32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	430a      	orrs	r2, r1
 800be46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f8a3 	bl	800bf94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2220      	movs	r2, #32
 800be5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be80:	2b01      	cmp	r3, #1
 800be82:	d101      	bne.n	800be88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be84:	2302      	movs	r3, #2
 800be86:	e02d      	b.n	800bee4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2224      	movs	r2, #36	@ 0x24
 800be94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0201 	bic.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f865 	bl	800bf94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2220      	movs	r2, #32
 800bed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08c      	sub	sp, #48	@ 0x30
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	4613      	mov	r3, r2
 800bef8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf00:	2b20      	cmp	r3, #32
 800bf02:	d142      	bne.n	800bf8a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bf0a:	88fb      	ldrh	r3, [r7, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e03b      	b.n	800bf8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2201      	movs	r2, #1
 800bf18:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bf20:	88fb      	ldrh	r3, [r7, #6]
 800bf22:	461a      	mov	r2, r3
 800bf24:	68b9      	ldr	r1, [r7, #8]
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7ff fc8e 	bl	800b848 <UART_Start_Receive_DMA>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bf32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d124      	bne.n	800bf84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d11d      	bne.n	800bf7e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2210      	movs	r2, #16
 800bf48:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	e853 3f00 	ldrex	r3, [r3]
 800bf56:	617b      	str	r3, [r7, #20]
   return(result);
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	f043 0310 	orr.w	r3, r3, #16
 800bf5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf68:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf6a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6a39      	ldr	r1, [r7, #32]
 800bf6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e6      	bne.n	800bf4a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bf7c:	e002      	b.n	800bf84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bf84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf88:	e000      	b.n	800bf8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bf8a:	2302      	movs	r3, #2
  }
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3730      	adds	r7, #48	@ 0x30
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d108      	bne.n	800bfb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfb4:	e031      	b.n	800c01a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfb6:	2308      	movs	r3, #8
 800bfb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfba:	2308      	movs	r3, #8
 800bfbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	0e5b      	lsrs	r3, r3, #25
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	f003 0307 	and.w	r3, r3, #7
 800bfcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	0f5b      	lsrs	r3, r3, #29
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	f003 0307 	and.w	r3, r3, #7
 800bfdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	7b3a      	ldrb	r2, [r7, #12]
 800bfe2:	4911      	ldr	r1, [pc, #68]	@ (800c028 <UARTEx_SetNbDataToProcess+0x94>)
 800bfe4:	5c8a      	ldrb	r2, [r1, r2]
 800bfe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfea:	7b3a      	ldrb	r2, [r7, #12]
 800bfec:	490f      	ldr	r1, [pc, #60]	@ (800c02c <UARTEx_SetNbDataToProcess+0x98>)
 800bfee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	7b7a      	ldrb	r2, [r7, #13]
 800c000:	4909      	ldr	r1, [pc, #36]	@ (800c028 <UARTEx_SetNbDataToProcess+0x94>)
 800c002:	5c8a      	ldrb	r2, [r1, r2]
 800c004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c008:	7b7a      	ldrb	r2, [r7, #13]
 800c00a:	4908      	ldr	r1, [pc, #32]	@ (800c02c <UARTEx_SetNbDataToProcess+0x98>)
 800c00c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c00e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c01a:	bf00      	nop
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	0801563c 	.word	0x0801563c
 800c02c:	08015644 	.word	0x08015644

0800c030 <__NVIC_SetPriority>:
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c040:	2b00      	cmp	r3, #0
 800c042:	db0a      	blt.n	800c05a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	b2da      	uxtb	r2, r3
 800c048:	490c      	ldr	r1, [pc, #48]	@ (800c07c <__NVIC_SetPriority+0x4c>)
 800c04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c04e:	0112      	lsls	r2, r2, #4
 800c050:	b2d2      	uxtb	r2, r2
 800c052:	440b      	add	r3, r1
 800c054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c058:	e00a      	b.n	800c070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	4908      	ldr	r1, [pc, #32]	@ (800c080 <__NVIC_SetPriority+0x50>)
 800c060:	79fb      	ldrb	r3, [r7, #7]
 800c062:	f003 030f 	and.w	r3, r3, #15
 800c066:	3b04      	subs	r3, #4
 800c068:	0112      	lsls	r2, r2, #4
 800c06a:	b2d2      	uxtb	r2, r2
 800c06c:	440b      	add	r3, r1
 800c06e:	761a      	strb	r2, [r3, #24]
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	e000e100 	.word	0xe000e100
 800c080:	e000ed00 	.word	0xe000ed00

0800c084 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c084:	b580      	push	{r7, lr}
 800c086:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c088:	4b05      	ldr	r3, [pc, #20]	@ (800c0a0 <SysTick_Handler+0x1c>)
 800c08a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c08c:	f002 fe32 	bl	800ecf4 <xTaskGetSchedulerState>
 800c090:	4603      	mov	r3, r0
 800c092:	2b01      	cmp	r3, #1
 800c094:	d001      	beq.n	800c09a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c096:	f000 ff37 	bl	800cf08 <xPortSysTickHandler>
  }
}
 800c09a:	bf00      	nop
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	e000e010 	.word	0xe000e010

0800c0a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	f06f 0004 	mvn.w	r0, #4
 800c0ae:	f7ff ffbf 	bl	800c030 <__NVIC_SetPriority>
#endif
}
 800c0b2:	bf00      	nop
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0be:	f3ef 8305 	mrs	r3, IPSR
 800c0c2:	603b      	str	r3, [r7, #0]
  return(result);
 800c0c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c0ca:	f06f 0305 	mvn.w	r3, #5
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e00c      	b.n	800c0ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0fc <osKernelInitialize+0x44>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c0da:	4b08      	ldr	r3, [pc, #32]	@ (800c0fc <osKernelInitialize+0x44>)
 800c0dc:	2201      	movs	r2, #1
 800c0de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	607b      	str	r3, [r7, #4]
 800c0e4:	e002      	b.n	800c0ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0ec:	687b      	ldr	r3, [r7, #4]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20000e38 	.word	0x20000e38

0800c100 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c106:	f3ef 8305 	mrs	r3, IPSR
 800c10a:	603b      	str	r3, [r7, #0]
  return(result);
 800c10c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c112:	f06f 0305 	mvn.w	r3, #5
 800c116:	607b      	str	r3, [r7, #4]
 800c118:	e010      	b.n	800c13c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c11a:	4b0b      	ldr	r3, [pc, #44]	@ (800c148 <osKernelStart+0x48>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d109      	bne.n	800c136 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c122:	f7ff ffbf 	bl	800c0a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c126:	4b08      	ldr	r3, [pc, #32]	@ (800c148 <osKernelStart+0x48>)
 800c128:	2202      	movs	r2, #2
 800c12a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c12c:	f002 f96e 	bl	800e40c <vTaskStartScheduler>
      stat = osOK;
 800c130:	2300      	movs	r3, #0
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e002      	b.n	800c13c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c136:	f04f 33ff 	mov.w	r3, #4294967295
 800c13a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c13c:	687b      	ldr	r3, [r7, #4]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20000e38 	.word	0x20000e38

0800c14c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08e      	sub	sp, #56	@ 0x38
 800c150:	af04      	add	r7, sp, #16
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c158:	2300      	movs	r3, #0
 800c15a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c15c:	f3ef 8305 	mrs	r3, IPSR
 800c160:	617b      	str	r3, [r7, #20]
  return(result);
 800c162:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c164:	2b00      	cmp	r3, #0
 800c166:	d17f      	bne.n	800c268 <osThreadNew+0x11c>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d07c      	beq.n	800c268 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c16e:	2380      	movs	r3, #128	@ 0x80
 800c170:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c172:	2318      	movs	r3, #24
 800c174:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c17a:	f04f 33ff 	mov.w	r3, #4294967295
 800c17e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d046      	beq.n	800c214 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <osThreadNew+0x48>
        name = attr->name;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d008      	beq.n	800c1ba <osThreadNew+0x6e>
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	2b38      	cmp	r3, #56	@ 0x38
 800c1ac:	d805      	bhi.n	800c1ba <osThreadNew+0x6e>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d001      	beq.n	800c1be <osThreadNew+0x72>
        return (NULL);
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e055      	b.n	800c26a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	089b      	lsrs	r3, r3, #2
 800c1cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00f      	beq.n	800c1f6 <osThreadNew+0xaa>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800c1de:	d30a      	bcc.n	800c1f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d006      	beq.n	800c1f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <osThreadNew+0xaa>
        mem = 1;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	e010      	b.n	800c218 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10c      	bne.n	800c218 <osThreadNew+0xcc>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d108      	bne.n	800c218 <osThreadNew+0xcc>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <osThreadNew+0xcc>
          mem = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	61bb      	str	r3, [r7, #24]
 800c212:	e001      	b.n	800c218 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d110      	bne.n	800c240 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c226:	9202      	str	r2, [sp, #8]
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6a3a      	ldr	r2, [r7, #32]
 800c232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f001 fecb 	bl	800dfd0 <xTaskCreateStatic>
 800c23a:	4603      	mov	r3, r0
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	e013      	b.n	800c268 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d110      	bne.n	800c268 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	b29a      	uxth	r2, r3
 800c24a:	f107 0310 	add.w	r3, r7, #16
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f001 ff1b 	bl	800e094 <xTaskCreate>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b01      	cmp	r3, #1
 800c262:	d001      	beq.n	800c268 <osThreadNew+0x11c>
            hTask = NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c268:	693b      	ldr	r3, [r7, #16]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3728      	adds	r7, #40	@ 0x28
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27a:	f3ef 8305 	mrs	r3, IPSR
 800c27e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c280:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <osDelay+0x1c>
    stat = osErrorISR;
 800c286:	f06f 0305 	mvn.w	r3, #5
 800c28a:	60fb      	str	r3, [r7, #12]
 800c28c:	e007      	b.n	800c29e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c28e:	2300      	movs	r3, #0
 800c290:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f002 f881 	bl	800e3a0 <vTaskDelay>
    }
  }

  return (stat);
 800c29e:	68fb      	ldr	r3, [r7, #12]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b4:	f3ef 8305 	mrs	r3, IPSR
 800c2b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2ba:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d174      	bne.n	800c3aa <osMutexNew+0x102>
    if (attr != NULL) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <osMutexNew+0x26>
      type = attr->attr_bits;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	61bb      	str	r3, [r7, #24]
 800c2cc:	e001      	b.n	800c2d2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <osMutexNew+0x3a>
      rmtx = 1U;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	617b      	str	r3, [r7, #20]
 800c2e0:	e001      	b.n	800c2e6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d15c      	bne.n	800c3aa <osMutexNew+0x102>
      mem = -1;
 800c2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d015      	beq.n	800c328 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d006      	beq.n	800c312 <osMutexNew+0x6a>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	2b4f      	cmp	r3, #79	@ 0x4f
 800c30a:	d902      	bls.n	800c312 <osMutexNew+0x6a>
          mem = 1;
 800c30c:	2301      	movs	r3, #1
 800c30e:	613b      	str	r3, [r7, #16]
 800c310:	e00c      	b.n	800c32c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d108      	bne.n	800c32c <osMutexNew+0x84>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d104      	bne.n	800c32c <osMutexNew+0x84>
            mem = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	613b      	str	r3, [r7, #16]
 800c326:	e001      	b.n	800c32c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d112      	bne.n	800c358 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d007      	beq.n	800c348 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	4619      	mov	r1, r3
 800c33e:	2004      	movs	r0, #4
 800c340:	f000 ffeb 	bl	800d31a <xQueueCreateMutexStatic>
 800c344:	61f8      	str	r0, [r7, #28]
 800c346:	e016      	b.n	800c376 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	4619      	mov	r1, r3
 800c34e:	2001      	movs	r0, #1
 800c350:	f000 ffe3 	bl	800d31a <xQueueCreateMutexStatic>
 800c354:	61f8      	str	r0, [r7, #28]
 800c356:	e00e      	b.n	800c376 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10b      	bne.n	800c376 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c364:	2004      	movs	r0, #4
 800c366:	f000 ffc0 	bl	800d2ea <xQueueCreateMutex>
 800c36a:	61f8      	str	r0, [r7, #28]
 800c36c:	e003      	b.n	800c376 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c36e:	2001      	movs	r0, #1
 800c370:	f000 ffbb 	bl	800d2ea <xQueueCreateMutex>
 800c374:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00c      	beq.n	800c396 <osMutexNew+0xee>
        if (attr != NULL) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <osMutexNew+0xe2>
          name = attr->name;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	e001      	b.n	800c38e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c38e:	68f9      	ldr	r1, [r7, #12]
 800c390:	69f8      	ldr	r0, [r7, #28]
 800c392:	f001 fd95 	bl	800dec0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <osMutexNew+0x102>
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	f043 0301 	orr.w	r3, r3, #1
 800c3a8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c3aa:	69fb      	ldr	r3, [r7, #28]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3720      	adds	r7, #32
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f023 0301 	bic.w	r3, r3, #1
 800c3c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3d2:	f3ef 8305 	mrs	r3, IPSR
 800c3d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c3de:	f06f 0305 	mvn.w	r3, #5
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	e02c      	b.n	800c440 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d103      	bne.n	800c3f4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c3ec:	f06f 0303 	mvn.w	r3, #3
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e025      	b.n	800c440 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d011      	beq.n	800c41e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6938      	ldr	r0, [r7, #16]
 800c3fe:	f000 ffdc 	bl	800d3ba <xQueueTakeMutexRecursive>
 800c402:	4603      	mov	r3, r0
 800c404:	2b01      	cmp	r3, #1
 800c406:	d01b      	beq.n	800c440 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c40e:	f06f 0301 	mvn.w	r3, #1
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e014      	b.n	800c440 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c416:	f06f 0302 	mvn.w	r3, #2
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	e010      	b.n	800c440 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6938      	ldr	r0, [r7, #16]
 800c422:	f001 faf1 	bl	800da08 <xQueueSemaphoreTake>
 800c426:	4603      	mov	r3, r0
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d009      	beq.n	800c440 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c432:	f06f 0301 	mvn.w	r3, #1
 800c436:	617b      	str	r3, [r7, #20]
 800c438:	e002      	b.n	800c440 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c43a:	f06f 0302 	mvn.w	r3, #2
 800c43e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c440:	697b      	ldr	r3, [r7, #20]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3718      	adds	r7, #24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b086      	sub	sp, #24
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f023 0301 	bic.w	r3, r3, #1
 800c458:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f003 0301 	and.w	r3, r3, #1
 800c460:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c466:	f3ef 8305 	mrs	r3, IPSR
 800c46a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c46c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <osMutexRelease+0x30>
    stat = osErrorISR;
 800c472:	f06f 0305 	mvn.w	r3, #5
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	e01f      	b.n	800c4ba <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d103      	bne.n	800c488 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c480:	f06f 0303 	mvn.w	r3, #3
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	e018      	b.n	800c4ba <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d009      	beq.n	800c4a2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c48e:	6938      	ldr	r0, [r7, #16]
 800c490:	f000 ff5e 	bl	800d350 <xQueueGiveMutexRecursive>
 800c494:	4603      	mov	r3, r0
 800c496:	2b01      	cmp	r3, #1
 800c498:	d00f      	beq.n	800c4ba <osMutexRelease+0x70>
        stat = osErrorResource;
 800c49a:	f06f 0302 	mvn.w	r3, #2
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	e00b      	b.n	800c4ba <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6938      	ldr	r0, [r7, #16]
 800c4aa:	f001 f82b 	bl	800d504 <xQueueGenericSend>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d002      	beq.n	800c4ba <osMutexRelease+0x70>
        stat = osErrorResource;
 800c4b4:	f06f 0302 	mvn.w	r3, #2
 800c4b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c4ba:	697b      	ldr	r3, [r7, #20]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	@ 0x28
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4d4:	f3ef 8305 	mrs	r3, IPSR
 800c4d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c4da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d175      	bne.n	800c5cc <osSemaphoreNew+0x108>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d072      	beq.n	800c5cc <osSemaphoreNew+0x108>
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d86e      	bhi.n	800c5cc <osSemaphoreNew+0x108>
    mem = -1;
 800c4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d015      	beq.n	800c526 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d006      	beq.n	800c510 <osSemaphoreNew+0x4c>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	2b4f      	cmp	r3, #79	@ 0x4f
 800c508:	d902      	bls.n	800c510 <osSemaphoreNew+0x4c>
        mem = 1;
 800c50a:	2301      	movs	r3, #1
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	e00c      	b.n	800c52a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d108      	bne.n	800c52a <osSemaphoreNew+0x66>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <osSemaphoreNew+0x66>
          mem = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	61bb      	str	r3, [r7, #24]
 800c524:	e001      	b.n	800c52a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c530:	d04c      	beq.n	800c5cc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d128      	bne.n	800c58a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d10a      	bne.n	800c554 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	2203      	movs	r2, #3
 800c544:	9200      	str	r2, [sp, #0]
 800c546:	2200      	movs	r2, #0
 800c548:	2100      	movs	r1, #0
 800c54a:	2001      	movs	r0, #1
 800c54c:	f000 fdd8 	bl	800d100 <xQueueGenericCreateStatic>
 800c550:	61f8      	str	r0, [r7, #28]
 800c552:	e005      	b.n	800c560 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c554:	2203      	movs	r2, #3
 800c556:	2100      	movs	r1, #0
 800c558:	2001      	movs	r0, #1
 800c55a:	f000 fe4e 	bl	800d1fa <xQueueGenericCreate>
 800c55e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d022      	beq.n	800c5ac <osSemaphoreNew+0xe8>
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d01f      	beq.n	800c5ac <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c56c:	2300      	movs	r3, #0
 800c56e:	2200      	movs	r2, #0
 800c570:	2100      	movs	r1, #0
 800c572:	69f8      	ldr	r0, [r7, #28]
 800c574:	f000 ffc6 	bl	800d504 <xQueueGenericSend>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d016      	beq.n	800c5ac <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c57e:	69f8      	ldr	r0, [r7, #28]
 800c580:	f001 fb52 	bl	800dc28 <vQueueDelete>
            hSemaphore = NULL;
 800c584:	2300      	movs	r3, #0
 800c586:	61fb      	str	r3, [r7, #28]
 800c588:	e010      	b.n	800c5ac <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d108      	bne.n	800c5a2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	461a      	mov	r2, r3
 800c596:	68b9      	ldr	r1, [r7, #8]
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f000 ff45 	bl	800d428 <xQueueCreateCountingSemaphoreStatic>
 800c59e:	61f8      	str	r0, [r7, #28]
 800c5a0:	e004      	b.n	800c5ac <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 ff78 	bl	800d49a <xQueueCreateCountingSemaphore>
 800c5aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00c      	beq.n	800c5cc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	e001      	b.n	800c5c4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c5c4:	6979      	ldr	r1, [r7, #20]
 800c5c6:	69f8      	ldr	r0, [r7, #28]
 800c5c8:	f001 fc7a 	bl	800dec0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c5cc:	69fb      	ldr	r3, [r7, #28]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3720      	adds	r7, #32
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4a07      	ldr	r2, [pc, #28]	@ (800c604 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	4a06      	ldr	r2, [pc, #24]	@ (800c608 <vApplicationGetIdleTaskMemory+0x30>)
 800c5ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2280      	movs	r2, #128	@ 0x80
 800c5f4:	601a      	str	r2, [r3, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000e40 	.word	0x20000e40
 800c608:	20000fc0 	.word	0x20000fc0

0800c60c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4a07      	ldr	r2, [pc, #28]	@ (800c638 <vApplicationGetTimerTaskMemory+0x2c>)
 800c61c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4a06      	ldr	r2, [pc, #24]	@ (800c63c <vApplicationGetTimerTaskMemory+0x30>)
 800c622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c62a:	601a      	str	r2, [r3, #0]
}
 800c62c:	bf00      	nop
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	200011c0 	.word	0x200011c0
 800c63c:	20001340 	.word	0x20001340

0800c640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08a      	sub	sp, #40	@ 0x28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c648:	2300      	movs	r3, #0
 800c64a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c64c:	f001 ff4e 	bl	800e4ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c650:	4b5c      	ldr	r3, [pc, #368]	@ (800c7c4 <pvPortMalloc+0x184>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c658:	f000 f924 	bl	800c8a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c65c:	4b5a      	ldr	r3, [pc, #360]	@ (800c7c8 <pvPortMalloc+0x188>)
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4013      	ands	r3, r2
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 8095 	bne.w	800c794 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d01e      	beq.n	800c6ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c670:	2208      	movs	r2, #8
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4413      	add	r3, r2
 800c676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f003 0307 	and.w	r3, r3, #7
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d015      	beq.n	800c6ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f023 0307 	bic.w	r3, r3, #7
 800c688:	3308      	adds	r3, #8
 800c68a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00b      	beq.n	800c6ae <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d06f      	beq.n	800c794 <pvPortMalloc+0x154>
 800c6b4:	4b45      	ldr	r3, [pc, #276]	@ (800c7cc <pvPortMalloc+0x18c>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d86a      	bhi.n	800c794 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6be:	4b44      	ldr	r3, [pc, #272]	@ (800c7d0 <pvPortMalloc+0x190>)
 800c6c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6c2:	4b43      	ldr	r3, [pc, #268]	@ (800c7d0 <pvPortMalloc+0x190>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6c8:	e004      	b.n	800c6d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d903      	bls.n	800c6e6 <pvPortMalloc+0xa6>
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1f1      	bne.n	800c6ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6e6:	4b37      	ldr	r3, [pc, #220]	@ (800c7c4 <pvPortMalloc+0x184>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d051      	beq.n	800c794 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	4413      	add	r3, r2
 800c6f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	1ad2      	subs	r2, r2, r3
 800c70a:	2308      	movs	r3, #8
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	429a      	cmp	r2, r3
 800c710:	d920      	bls.n	800c754 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4413      	add	r3, r2
 800c718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <pvPortMalloc+0xfc>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	613b      	str	r3, [r7, #16]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	1ad2      	subs	r2, r2, r3
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c74e:	69b8      	ldr	r0, [r7, #24]
 800c750:	f000 f90a 	bl	800c968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c754:	4b1d      	ldr	r3, [pc, #116]	@ (800c7cc <pvPortMalloc+0x18c>)
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	4a1b      	ldr	r2, [pc, #108]	@ (800c7cc <pvPortMalloc+0x18c>)
 800c760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c762:	4b1a      	ldr	r3, [pc, #104]	@ (800c7cc <pvPortMalloc+0x18c>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b1b      	ldr	r3, [pc, #108]	@ (800c7d4 <pvPortMalloc+0x194>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d203      	bcs.n	800c776 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c76e:	4b17      	ldr	r3, [pc, #92]	@ (800c7cc <pvPortMalloc+0x18c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a18      	ldr	r2, [pc, #96]	@ (800c7d4 <pvPortMalloc+0x194>)
 800c774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	685a      	ldr	r2, [r3, #4]
 800c77a:	4b13      	ldr	r3, [pc, #76]	@ (800c7c8 <pvPortMalloc+0x188>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	431a      	orrs	r2, r3
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c78a:	4b13      	ldr	r3, [pc, #76]	@ (800c7d8 <pvPortMalloc+0x198>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	4a11      	ldr	r2, [pc, #68]	@ (800c7d8 <pvPortMalloc+0x198>)
 800c792:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c794:	f001 feb8 	bl	800e508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <pvPortMalloc+0x17a>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	60fb      	str	r3, [r7, #12]
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	e7fd      	b.n	800c7b6 <pvPortMalloc+0x176>
	return pvReturn;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3728      	adds	r7, #40	@ 0x28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	200028dc 	.word	0x200028dc
 800c7c8:	200028f0 	.word	0x200028f0
 800c7cc:	200028e0 	.word	0x200028e0
 800c7d0:	200028d4 	.word	0x200028d4
 800c7d4:	200028e4 	.word	0x200028e4
 800c7d8:	200028e8 	.word	0x200028e8

0800c7dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d04f      	beq.n	800c88e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7ee:	2308      	movs	r3, #8
 800c7f0:	425b      	negs	r3, r3
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	4b25      	ldr	r3, [pc, #148]	@ (800c898 <vPortFree+0xbc>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4013      	ands	r3, r2
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10b      	bne.n	800c822 <vPortFree+0x46>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	60fb      	str	r3, [r7, #12]
}
 800c81c:	bf00      	nop
 800c81e:	bf00      	nop
 800c820:	e7fd      	b.n	800c81e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <vPortFree+0x66>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	60bb      	str	r3, [r7, #8]
}
 800c83c:	bf00      	nop
 800c83e:	bf00      	nop
 800c840:	e7fd      	b.n	800c83e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	4b14      	ldr	r3, [pc, #80]	@ (800c898 <vPortFree+0xbc>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4013      	ands	r3, r2
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01e      	beq.n	800c88e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d11a      	bne.n	800c88e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	4b0e      	ldr	r3, [pc, #56]	@ (800c898 <vPortFree+0xbc>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	43db      	mvns	r3, r3
 800c862:	401a      	ands	r2, r3
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c868:	f001 fe40 	bl	800e4ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	4b0a      	ldr	r3, [pc, #40]	@ (800c89c <vPortFree+0xc0>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4413      	add	r3, r2
 800c876:	4a09      	ldr	r2, [pc, #36]	@ (800c89c <vPortFree+0xc0>)
 800c878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c87a:	6938      	ldr	r0, [r7, #16]
 800c87c:	f000 f874 	bl	800c968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c880:	4b07      	ldr	r3, [pc, #28]	@ (800c8a0 <vPortFree+0xc4>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3301      	adds	r3, #1
 800c886:	4a06      	ldr	r2, [pc, #24]	@ (800c8a0 <vPortFree+0xc4>)
 800c888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c88a:	f001 fe3d 	bl	800e508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c88e:	bf00      	nop
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	200028f0 	.word	0x200028f0
 800c89c:	200028e0 	.word	0x200028e0
 800c8a0:	200028ec 	.word	0x200028ec

0800c8a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8aa:	f241 1394 	movw	r3, #4500	@ 0x1194
 800c8ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8b0:	4b27      	ldr	r3, [pc, #156]	@ (800c950 <prvHeapInit+0xac>)
 800c8b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00c      	beq.n	800c8d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3307      	adds	r3, #7
 800c8c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f023 0307 	bic.w	r3, r3, #7
 800c8ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800c950 <prvHeapInit+0xac>)
 800c8d4:	4413      	add	r3, r2
 800c8d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c954 <prvHeapInit+0xb0>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8e2:	4b1c      	ldr	r3, [pc, #112]	@ (800c954 <prvHeapInit+0xb0>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8f0:	2208      	movs	r2, #8
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f023 0307 	bic.w	r3, r3, #7
 800c8fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4a15      	ldr	r2, [pc, #84]	@ (800c958 <prvHeapInit+0xb4>)
 800c904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c906:	4b14      	ldr	r3, [pc, #80]	@ (800c958 <prvHeapInit+0xb4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2200      	movs	r2, #0
 800c90c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c90e:	4b12      	ldr	r3, [pc, #72]	@ (800c958 <prvHeapInit+0xb4>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c924:	4b0c      	ldr	r3, [pc, #48]	@ (800c958 <prvHeapInit+0xb4>)
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	4a0a      	ldr	r2, [pc, #40]	@ (800c95c <prvHeapInit+0xb8>)
 800c932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	4a09      	ldr	r2, [pc, #36]	@ (800c960 <prvHeapInit+0xbc>)
 800c93a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c93c:	4b09      	ldr	r3, [pc, #36]	@ (800c964 <prvHeapInit+0xc0>)
 800c93e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c942:	601a      	str	r2, [r3, #0]
}
 800c944:	bf00      	nop
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	20001740 	.word	0x20001740
 800c954:	200028d4 	.word	0x200028d4
 800c958:	200028dc 	.word	0x200028dc
 800c95c:	200028e4 	.word	0x200028e4
 800c960:	200028e0 	.word	0x200028e0
 800c964:	200028f0 	.word	0x200028f0

0800c968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c970:	4b28      	ldr	r3, [pc, #160]	@ (800ca14 <prvInsertBlockIntoFreeList+0xac>)
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e002      	b.n	800c97c <prvInsertBlockIntoFreeList+0x14>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	429a      	cmp	r2, r3
 800c984:	d8f7      	bhi.n	800c976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	4413      	add	r3, r2
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	429a      	cmp	r2, r3
 800c996:	d108      	bne.n	800c9aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	441a      	add	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	441a      	add	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d118      	bne.n	800c9f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	4b15      	ldr	r3, [pc, #84]	@ (800ca18 <prvInsertBlockIntoFreeList+0xb0>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d00d      	beq.n	800c9e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	441a      	add	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	e008      	b.n	800c9f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca18 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	e003      	b.n	800c9f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d002      	beq.n	800ca06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	200028d4 	.word	0x200028d4
 800ca18:	200028dc 	.word	0x200028dc

0800ca1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f103 0208 	add.w	r2, r3, #8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f04f 32ff 	mov.w	r2, #4294967295
 800ca34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f103 0208 	add.w	r2, r3, #8
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f103 0208 	add.w	r2, r3, #8
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca6a:	bf00      	nop
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	689a      	ldr	r2, [r3, #8]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	683a      	ldr	r2, [r7, #0]
 800ca9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
}
 800cab2:	bf00      	nop
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cabe:	b480      	push	{r7}
 800cac0:	b085      	sub	sp, #20
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad4:	d103      	bne.n	800cade <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	e00c      	b.n	800caf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3308      	adds	r3, #8
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e002      	b.n	800caec <vListInsert+0x2e>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d2f6      	bcs.n	800cae6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	601a      	str	r2, [r3, #0]
}
 800cb24:	bf00      	nop
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	6892      	ldr	r2, [r2, #8]
 800cb46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	6852      	ldr	r2, [r2, #4]
 800cb50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d103      	bne.n	800cb64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689a      	ldr	r2, [r3, #8]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	1e5a      	subs	r2, r3, #1
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3b04      	subs	r3, #4
 800cb94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f023 0201 	bic.w	r2, r3, #1
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3b04      	subs	r3, #4
 800cbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbb4:	4a0c      	ldr	r2, [pc, #48]	@ (800cbe8 <pxPortInitialiseStack+0x64>)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	3b14      	subs	r3, #20
 800cbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3b04      	subs	r3, #4
 800cbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f06f 0202 	mvn.w	r2, #2
 800cbd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3b20      	subs	r3, #32
 800cbd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbda:	68fb      	ldr	r3, [r7, #12]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	0800cbed 	.word	0x0800cbed

0800cbec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbf6:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <prvTaskExitError+0x58>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbfe:	d00b      	beq.n	800cc18 <prvTaskExitError+0x2c>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	60fb      	str	r3, [r7, #12]
}
 800cc12:	bf00      	nop
 800cc14:	bf00      	nop
 800cc16:	e7fd      	b.n	800cc14 <prvTaskExitError+0x28>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	60bb      	str	r3, [r7, #8]
}
 800cc2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc2c:	bf00      	nop
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d0fc      	beq.n	800cc2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc34:	bf00      	nop
 800cc36:	bf00      	nop
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	20000014 	.word	0x20000014
	...

0800cc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc50:	4b07      	ldr	r3, [pc, #28]	@ (800cc70 <pxCurrentTCBConst2>)
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	6808      	ldr	r0, [r1, #0]
 800cc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	f380 8809 	msr	PSP, r0
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f04f 0000 	mov.w	r0, #0
 800cc66:	f380 8811 	msr	BASEPRI, r0
 800cc6a:	4770      	bx	lr
 800cc6c:	f3af 8000 	nop.w

0800cc70 <pxCurrentTCBConst2>:
 800cc70:	2000293c 	.word	0x2000293c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop

0800cc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc78:	4808      	ldr	r0, [pc, #32]	@ (800cc9c <prvPortStartFirstTask+0x24>)
 800cc7a:	6800      	ldr	r0, [r0, #0]
 800cc7c:	6800      	ldr	r0, [r0, #0]
 800cc7e:	f380 8808 	msr	MSP, r0
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f380 8814 	msr	CONTROL, r0
 800cc8a:	b662      	cpsie	i
 800cc8c:	b661      	cpsie	f
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	df00      	svc	0
 800cc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc9a:	bf00      	nop
 800cc9c:	e000ed08 	.word	0xe000ed08

0800cca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cca6:	4b47      	ldr	r3, [pc, #284]	@ (800cdc4 <xPortStartScheduler+0x124>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a47      	ldr	r2, [pc, #284]	@ (800cdc8 <xPortStartScheduler+0x128>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d10b      	bne.n	800ccc8 <xPortStartScheduler+0x28>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	613b      	str	r3, [r7, #16]
}
 800ccc2:	bf00      	nop
 800ccc4:	bf00      	nop
 800ccc6:	e7fd      	b.n	800ccc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccc8:	4b3e      	ldr	r3, [pc, #248]	@ (800cdc4 <xPortStartScheduler+0x124>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a3f      	ldr	r2, [pc, #252]	@ (800cdcc <xPortStartScheduler+0x12c>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d10b      	bne.n	800ccea <xPortStartScheduler+0x4a>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	60fb      	str	r3, [r7, #12]
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccea:	4b39      	ldr	r3, [pc, #228]	@ (800cdd0 <xPortStartScheduler+0x130>)
 800ccec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	22ff      	movs	r2, #255	@ 0xff
 800ccfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd04:	78fb      	ldrb	r3, [r7, #3]
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	4b31      	ldr	r3, [pc, #196]	@ (800cdd4 <xPortStartScheduler+0x134>)
 800cd10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd12:	4b31      	ldr	r3, [pc, #196]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd14:	2207      	movs	r2, #7
 800cd16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd18:	e009      	b.n	800cd2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cd1a:	4b2f      	ldr	r3, [pc, #188]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4a2d      	ldr	r2, [pc, #180]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd2e:	78fb      	ldrb	r3, [r7, #3]
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd36:	2b80      	cmp	r3, #128	@ 0x80
 800cd38:	d0ef      	beq.n	800cd1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd3a:	4b27      	ldr	r3, [pc, #156]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f1c3 0307 	rsb	r3, r3, #7
 800cd42:	2b04      	cmp	r3, #4
 800cd44:	d00b      	beq.n	800cd5e <xPortStartScheduler+0xbe>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60bb      	str	r3, [r7, #8]
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	e7fd      	b.n	800cd5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd5e:	4b1e      	ldr	r3, [pc, #120]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	021b      	lsls	r3, r3, #8
 800cd64:	4a1c      	ldr	r2, [pc, #112]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd68:	4b1b      	ldr	r3, [pc, #108]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd70:	4a19      	ldr	r2, [pc, #100]	@ (800cdd8 <xPortStartScheduler+0x138>)
 800cd72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd7c:	4b17      	ldr	r3, [pc, #92]	@ (800cddc <xPortStartScheduler+0x13c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a16      	ldr	r2, [pc, #88]	@ (800cddc <xPortStartScheduler+0x13c>)
 800cd82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cd86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd88:	4b14      	ldr	r3, [pc, #80]	@ (800cddc <xPortStartScheduler+0x13c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a13      	ldr	r2, [pc, #76]	@ (800cddc <xPortStartScheduler+0x13c>)
 800cd8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cd92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd94:	f000 f8da 	bl	800cf4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd98:	4b11      	ldr	r3, [pc, #68]	@ (800cde0 <xPortStartScheduler+0x140>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd9e:	f000 f8f9 	bl	800cf94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cda2:	4b10      	ldr	r3, [pc, #64]	@ (800cde4 <xPortStartScheduler+0x144>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a0f      	ldr	r2, [pc, #60]	@ (800cde4 <xPortStartScheduler+0x144>)
 800cda8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cdac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdae:	f7ff ff63 	bl	800cc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdb2:	f001 fd11 	bl	800e7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800cdb6:	f7ff ff19 	bl	800cbec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	e000ed00 	.word	0xe000ed00
 800cdc8:	410fc271 	.word	0x410fc271
 800cdcc:	410fc270 	.word	0x410fc270
 800cdd0:	e000e400 	.word	0xe000e400
 800cdd4:	200028f4 	.word	0x200028f4
 800cdd8:	200028f8 	.word	0x200028f8
 800cddc:	e000ed20 	.word	0xe000ed20
 800cde0:	20000014 	.word	0x20000014
 800cde4:	e000ef34 	.word	0xe000ef34

0800cde8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	607b      	str	r3, [r7, #4]
}
 800ce00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce02:	4b10      	ldr	r3, [pc, #64]	@ (800ce44 <vPortEnterCritical+0x5c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3301      	adds	r3, #1
 800ce08:	4a0e      	ldr	r2, [pc, #56]	@ (800ce44 <vPortEnterCritical+0x5c>)
 800ce0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce44 <vPortEnterCritical+0x5c>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d110      	bne.n	800ce36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce14:	4b0c      	ldr	r3, [pc, #48]	@ (800ce48 <vPortEnterCritical+0x60>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <vPortEnterCritical+0x4e>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	603b      	str	r3, [r7, #0]
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	e7fd      	b.n	800ce32 <vPortEnterCritical+0x4a>
	}
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	20000014 	.word	0x20000014
 800ce48:	e000ed04 	.word	0xe000ed04

0800ce4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce52:	4b12      	ldr	r3, [pc, #72]	@ (800ce9c <vPortExitCritical+0x50>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10b      	bne.n	800ce72 <vPortExitCritical+0x26>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	607b      	str	r3, [r7, #4]
}
 800ce6c:	bf00      	nop
 800ce6e:	bf00      	nop
 800ce70:	e7fd      	b.n	800ce6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce72:	4b0a      	ldr	r3, [pc, #40]	@ (800ce9c <vPortExitCritical+0x50>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	4a08      	ldr	r2, [pc, #32]	@ (800ce9c <vPortExitCritical+0x50>)
 800ce7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce7c:	4b07      	ldr	r3, [pc, #28]	@ (800ce9c <vPortExitCritical+0x50>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d105      	bne.n	800ce90 <vPortExitCritical+0x44>
 800ce84:	2300      	movs	r3, #0
 800ce86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	20000014 	.word	0x20000014

0800cea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cea0:	f3ef 8009 	mrs	r0, PSP
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4b15      	ldr	r3, [pc, #84]	@ (800cf00 <pxCurrentTCBConst>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	f01e 0f10 	tst.w	lr, #16
 800ceb0:	bf08      	it	eq
 800ceb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ceb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	6010      	str	r0, [r2, #0]
 800cebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cec4:	f380 8811 	msr	BASEPRI, r0
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f001 fc82 	bl	800e7d8 <vTaskSwitchContext>
 800ced4:	f04f 0000 	mov.w	r0, #0
 800ced8:	f380 8811 	msr	BASEPRI, r0
 800cedc:	bc09      	pop	{r0, r3}
 800cede:	6819      	ldr	r1, [r3, #0]
 800cee0:	6808      	ldr	r0, [r1, #0]
 800cee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee6:	f01e 0f10 	tst.w	lr, #16
 800ceea:	bf08      	it	eq
 800ceec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cef0:	f380 8809 	msr	PSP, r0
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	f3af 8000 	nop.w

0800cf00 <pxCurrentTCBConst>:
 800cf00:	2000293c 	.word	0x2000293c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop

0800cf08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	607b      	str	r3, [r7, #4]
}
 800cf20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf22:	f001 fb9f 	bl	800e664 <xTaskIncrementTick>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf2c:	4b06      	ldr	r3, [pc, #24]	@ (800cf48 <xPortSysTickHandler+0x40>)
 800cf2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	2300      	movs	r3, #0
 800cf36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f383 8811 	msr	BASEPRI, r3
}
 800cf3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	e000ed04 	.word	0xe000ed04

0800cf4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf50:	4b0b      	ldr	r3, [pc, #44]	@ (800cf80 <vPortSetupTimerInterrupt+0x34>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf56:	4b0b      	ldr	r3, [pc, #44]	@ (800cf84 <vPortSetupTimerInterrupt+0x38>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf88 <vPortSetupTimerInterrupt+0x3c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a0a      	ldr	r2, [pc, #40]	@ (800cf8c <vPortSetupTimerInterrupt+0x40>)
 800cf62:	fba2 2303 	umull	r2, r3, r2, r3
 800cf66:	099b      	lsrs	r3, r3, #6
 800cf68:	4a09      	ldr	r2, [pc, #36]	@ (800cf90 <vPortSetupTimerInterrupt+0x44>)
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf6e:	4b04      	ldr	r3, [pc, #16]	@ (800cf80 <vPortSetupTimerInterrupt+0x34>)
 800cf70:	2207      	movs	r2, #7
 800cf72:	601a      	str	r2, [r3, #0]
}
 800cf74:	bf00      	nop
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	e000e010 	.word	0xe000e010
 800cf84:	e000e018 	.word	0xe000e018
 800cf88:	20000008 	.word	0x20000008
 800cf8c:	10624dd3 	.word	0x10624dd3
 800cf90:	e000e014 	.word	0xe000e014

0800cf94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cfa4 <vPortEnableVFP+0x10>
 800cf98:	6801      	ldr	r1, [r0, #0]
 800cf9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cf9e:	6001      	str	r1, [r0, #0]
 800cfa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfa2:	bf00      	nop
 800cfa4:	e000ed88 	.word	0xe000ed88

0800cfa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfae:	f3ef 8305 	mrs	r3, IPSR
 800cfb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2b0f      	cmp	r3, #15
 800cfb8:	d915      	bls.n	800cfe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfba:	4a18      	ldr	r2, [pc, #96]	@ (800d01c <vPortValidateInterruptPriority+0x74>)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfc4:	4b16      	ldr	r3, [pc, #88]	@ (800d020 <vPortValidateInterruptPriority+0x78>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	7afa      	ldrb	r2, [r7, #11]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d20b      	bcs.n	800cfe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	607b      	str	r3, [r7, #4]
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	e7fd      	b.n	800cfe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfe6:	4b0f      	ldr	r3, [pc, #60]	@ (800d024 <vPortValidateInterruptPriority+0x7c>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cfee:	4b0e      	ldr	r3, [pc, #56]	@ (800d028 <vPortValidateInterruptPriority+0x80>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d90b      	bls.n	800d00e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	603b      	str	r3, [r7, #0]
}
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	e7fd      	b.n	800d00a <vPortValidateInterruptPriority+0x62>
	}
 800d00e:	bf00      	nop
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	e000e3f0 	.word	0xe000e3f0
 800d020:	200028f4 	.word	0x200028f4
 800d024:	e000ed0c 	.word	0xe000ed0c
 800d028:	200028f8 	.word	0x200028f8

0800d02c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10b      	bne.n	800d058 <xQueueGenericReset+0x2c>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	60bb      	str	r3, [r7, #8]
}
 800d052:	bf00      	nop
 800d054:	bf00      	nop
 800d056:	e7fd      	b.n	800d054 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d058:	f7ff fec6 	bl	800cde8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d064:	68f9      	ldr	r1, [r7, #12]
 800d066:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d068:	fb01 f303 	mul.w	r3, r1, r3
 800d06c:	441a      	add	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d088:	3b01      	subs	r3, #1
 800d08a:	68f9      	ldr	r1, [r7, #12]
 800d08c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d08e:	fb01 f303 	mul.w	r3, r1, r3
 800d092:	441a      	add	r2, r3
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	22ff      	movs	r2, #255	@ 0xff
 800d09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	22ff      	movs	r2, #255	@ 0xff
 800d0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d114      	bne.n	800d0d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d01a      	beq.n	800d0ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3310      	adds	r3, #16
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f001 fc44 	bl	800e948 <xTaskRemoveFromEventList>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d012      	beq.n	800d0ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d0fc <xQueueGenericReset+0xd0>)
 800d0c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	e009      	b.n	800d0ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3310      	adds	r3, #16
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff fc9d 	bl	800ca1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3324      	adds	r3, #36	@ 0x24
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff fc98 	bl	800ca1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0ec:	f7ff feae 	bl	800ce4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0f0:	2301      	movs	r3, #1
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	e000ed04 	.word	0xe000ed04

0800d100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d100:	b580      	push	{r7, lr}
 800d102:	b08e      	sub	sp, #56	@ 0x38
 800d104:	af02      	add	r7, sp, #8
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
 800d10c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d126:	bf00      	nop
 800d128:	bf00      	nop
 800d12a:	e7fd      	b.n	800d128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10b      	bne.n	800d14a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d144:	bf00      	nop
 800d146:	bf00      	nop
 800d148:	e7fd      	b.n	800d146 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <xQueueGenericCreateStatic+0x56>
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <xQueueGenericCreateStatic+0x5a>
 800d156:	2301      	movs	r3, #1
 800d158:	e000      	b.n	800d15c <xQueueGenericCreateStatic+0x5c>
 800d15a:	2300      	movs	r3, #0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10b      	bne.n	800d178 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	623b      	str	r3, [r7, #32]
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	e7fd      	b.n	800d174 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d102      	bne.n	800d184 <xQueueGenericCreateStatic+0x84>
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <xQueueGenericCreateStatic+0x88>
 800d184:	2301      	movs	r3, #1
 800d186:	e000      	b.n	800d18a <xQueueGenericCreateStatic+0x8a>
 800d188:	2300      	movs	r3, #0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10b      	bne.n	800d1a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	61fb      	str	r3, [r7, #28]
}
 800d1a0:	bf00      	nop
 800d1a2:	bf00      	nop
 800d1a4:	e7fd      	b.n	800d1a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d1a6:	2350      	movs	r3, #80	@ 0x50
 800d1a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b50      	cmp	r3, #80	@ 0x50
 800d1ae:	d00b      	beq.n	800d1c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	61bb      	str	r3, [r7, #24]
}
 800d1c2:	bf00      	nop
 800d1c4:	bf00      	nop
 800d1c6:	e7fd      	b.n	800d1c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00d      	beq.n	800d1f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f000 f840 	bl	800d270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3730      	adds	r7, #48	@ 0x30
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b08a      	sub	sp, #40	@ 0x28
 800d1fe:	af02      	add	r7, sp, #8
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	4613      	mov	r3, r2
 800d206:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10b      	bne.n	800d226 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	613b      	str	r3, [r7, #16]
}
 800d220:	bf00      	nop
 800d222:	bf00      	nop
 800d224:	e7fd      	b.n	800d222 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	fb02 f303 	mul.w	r3, r2, r3
 800d22e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	3350      	adds	r3, #80	@ 0x50
 800d234:	4618      	mov	r0, r3
 800d236:	f7ff fa03 	bl	800c640 <pvPortMalloc>
 800d23a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d011      	beq.n	800d266 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	3350      	adds	r3, #80	@ 0x50
 800d24a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d254:	79fa      	ldrb	r2, [r7, #7]
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	4613      	mov	r3, r2
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 f805 	bl	800d270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d266:	69bb      	ldr	r3, [r7, #24]
	}
 800d268:	4618      	mov	r0, r3
 800d26a:	3720      	adds	r7, #32
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d103      	bne.n	800d28c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	e002      	b.n	800d292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d29e:	2101      	movs	r1, #1
 800d2a0:	69b8      	ldr	r0, [r7, #24]
 800d2a2:	f7ff fec3 	bl	800d02c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d2ae:	bf00      	nop
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00e      	beq.n	800d2e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f911 	bl	800d504 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	617b      	str	r3, [r7, #20]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6939      	ldr	r1, [r7, #16]
 800d302:	6978      	ldr	r0, [r7, #20]
 800d304:	f7ff ff79 	bl	800d1fa <xQueueGenericCreate>
 800d308:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d30a:	68f8      	ldr	r0, [r7, #12]
 800d30c:	f7ff ffd3 	bl	800d2b6 <prvInitialiseMutex>

		return xNewQueue;
 800d310:	68fb      	ldr	r3, [r7, #12]
	}
 800d312:	4618      	mov	r0, r3
 800d314:	3718      	adds	r7, #24
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b088      	sub	sp, #32
 800d31e:	af02      	add	r7, sp, #8
 800d320:	4603      	mov	r3, r0
 800d322:	6039      	str	r1, [r7, #0]
 800d324:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d326:	2301      	movs	r3, #1
 800d328:	617b      	str	r3, [r7, #20]
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d32e:	79fb      	ldrb	r3, [r7, #7]
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2200      	movs	r2, #0
 800d336:	6939      	ldr	r1, [r7, #16]
 800d338:	6978      	ldr	r0, [r7, #20]
 800d33a:	f7ff fee1 	bl	800d100 <xQueueGenericCreateStatic>
 800d33e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f7ff ffb8 	bl	800d2b6 <prvInitialiseMutex>

		return xNewQueue;
 800d346:	68fb      	ldr	r3, [r7, #12]
	}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d350:	b590      	push	{r4, r7, lr}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10b      	bne.n	800d37a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	60fb      	str	r3, [r7, #12]
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop
 800d378:	e7fd      	b.n	800d376 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	689c      	ldr	r4, [r3, #8]
 800d37e:	f001 fca9 	bl	800ecd4 <xTaskGetCurrentTaskHandle>
 800d382:	4603      	mov	r3, r0
 800d384:	429c      	cmp	r4, r3
 800d386:	d111      	bne.n	800d3ac <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	1e5a      	subs	r2, r3, #1
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d105      	bne.n	800d3a6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d39a:	2300      	movs	r3, #0
 800d39c:	2200      	movs	r2, #0
 800d39e:	2100      	movs	r1, #0
 800d3a0:	6938      	ldr	r0, [r7, #16]
 800d3a2:	f000 f8af 	bl	800d504 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	617b      	str	r3, [r7, #20]
 800d3aa:	e001      	b.n	800d3b0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d3b0:	697b      	ldr	r3, [r7, #20]
	}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd90      	pop	{r4, r7, pc}

0800d3ba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d3ba:	b590      	push	{r4, r7, lr}
 800d3bc:	b087      	sub	sp, #28
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10b      	bne.n	800d3e6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	60fb      	str	r3, [r7, #12]
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	e7fd      	b.n	800d3e2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	689c      	ldr	r4, [r3, #8]
 800d3ea:	f001 fc73 	bl	800ecd4 <xTaskGetCurrentTaskHandle>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	d107      	bne.n	800d404 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d3fe:	2301      	movs	r3, #1
 800d400:	617b      	str	r3, [r7, #20]
 800d402:	e00c      	b.n	800d41e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f000 fafe 	bl	800da08 <xQueueSemaphoreTake>
 800d40c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d004      	beq.n	800d41e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d41e:	697b      	ldr	r3, [r7, #20]
	}
 800d420:	4618      	mov	r0, r3
 800d422:	371c      	adds	r7, #28
 800d424:	46bd      	mov	sp, r7
 800d426:	bd90      	pop	{r4, r7, pc}

0800d428 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08a      	sub	sp, #40	@ 0x28
 800d42c:	af02      	add	r7, sp, #8
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10b      	bne.n	800d452 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	61bb      	str	r3, [r7, #24]
}
 800d44c:	bf00      	nop
 800d44e:	bf00      	nop
 800d450:	e7fd      	b.n	800d44e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	429a      	cmp	r2, r3
 800d458:	d90b      	bls.n	800d472 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	617b      	str	r3, [r7, #20]
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	e7fd      	b.n	800d46e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d472:	2302      	movs	r3, #2
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff fe3f 	bl	800d100 <xQueueGenericCreateStatic>
 800d482:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d490:	69fb      	ldr	r3, [r7, #28]
	}
 800d492:	4618      	mov	r0, r3
 800d494:	3720      	adds	r7, #32
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d10b      	bne.n	800d4c2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	613b      	str	r3, [r7, #16]
}
 800d4bc:	bf00      	nop
 800d4be:	bf00      	nop
 800d4c0:	e7fd      	b.n	800d4be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d90b      	bls.n	800d4e2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	60fb      	str	r3, [r7, #12]
}
 800d4dc:	bf00      	nop
 800d4de:	bf00      	nop
 800d4e0:	e7fd      	b.n	800d4de <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff fe87 	bl	800d1fa <xQueueGenericCreate>
 800d4ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d4fa:	697b      	ldr	r3, [r7, #20]
	}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b08e      	sub	sp, #56	@ 0x38
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d512:	2300      	movs	r3, #0
 800d514:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10b      	bne.n	800d538 <xQueueGenericSend+0x34>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	e7fd      	b.n	800d534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d103      	bne.n	800d546 <xQueueGenericSend+0x42>
 800d53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <xQueueGenericSend+0x46>
 800d546:	2301      	movs	r3, #1
 800d548:	e000      	b.n	800d54c <xQueueGenericSend+0x48>
 800d54a:	2300      	movs	r3, #0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10b      	bne.n	800d568 <xQueueGenericSend+0x64>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d562:	bf00      	nop
 800d564:	bf00      	nop
 800d566:	e7fd      	b.n	800d564 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d103      	bne.n	800d576 <xQueueGenericSend+0x72>
 800d56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d572:	2b01      	cmp	r3, #1
 800d574:	d101      	bne.n	800d57a <xQueueGenericSend+0x76>
 800d576:	2301      	movs	r3, #1
 800d578:	e000      	b.n	800d57c <xQueueGenericSend+0x78>
 800d57a:	2300      	movs	r3, #0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10b      	bne.n	800d598 <xQueueGenericSend+0x94>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	623b      	str	r3, [r7, #32]
}
 800d592:	bf00      	nop
 800d594:	bf00      	nop
 800d596:	e7fd      	b.n	800d594 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d598:	f001 fbac 	bl	800ecf4 <xTaskGetSchedulerState>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <xQueueGenericSend+0xa4>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <xQueueGenericSend+0xa8>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e000      	b.n	800d5ae <xQueueGenericSend+0xaa>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10b      	bne.n	800d5ca <xQueueGenericSend+0xc6>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	61fb      	str	r3, [r7, #28]
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop
 800d5c8:	e7fd      	b.n	800d5c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5ca:	f7ff fc0d 	bl	800cde8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d302      	bcc.n	800d5e0 <xQueueGenericSend+0xdc>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d129      	bne.n	800d634 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	68b9      	ldr	r1, [r7, #8]
 800d5e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5e6:	f000 fb5b 	bl	800dca0 <prvCopyDataToQueue>
 800d5ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d010      	beq.n	800d616 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f6:	3324      	adds	r3, #36	@ 0x24
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f001 f9a5 	bl	800e948 <xTaskRemoveFromEventList>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d013      	beq.n	800d62c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d604:	4b3f      	ldr	r3, [pc, #252]	@ (800d704 <xQueueGenericSend+0x200>)
 800d606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	e00a      	b.n	800d62c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d007      	beq.n	800d62c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d61c:	4b39      	ldr	r3, [pc, #228]	@ (800d704 <xQueueGenericSend+0x200>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d62c:	f7ff fc0e 	bl	800ce4c <vPortExitCritical>
				return pdPASS;
 800d630:	2301      	movs	r3, #1
 800d632:	e063      	b.n	800d6fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d103      	bne.n	800d642 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d63a:	f7ff fc07 	bl	800ce4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d63e:	2300      	movs	r3, #0
 800d640:	e05c      	b.n	800d6fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d648:	f107 0314 	add.w	r3, r7, #20
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 f9df 	bl	800ea10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d652:	2301      	movs	r3, #1
 800d654:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d656:	f7ff fbf9 	bl	800ce4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d65a:	f000 ff47 	bl	800e4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d65e:	f7ff fbc3 	bl	800cde8 <vPortEnterCritical>
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d668:	b25b      	sxtb	r3, r3
 800d66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66e:	d103      	bne.n	800d678 <xQueueGenericSend+0x174>
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	2200      	movs	r2, #0
 800d674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d67e:	b25b      	sxtb	r3, r3
 800d680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d684:	d103      	bne.n	800d68e <xQueueGenericSend+0x18a>
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d68e:	f7ff fbdd 	bl	800ce4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d692:	1d3a      	adds	r2, r7, #4
 800d694:	f107 0314 	add.w	r3, r7, #20
 800d698:	4611      	mov	r1, r2
 800d69a:	4618      	mov	r0, r3
 800d69c:	f001 f9ce 	bl	800ea3c <xTaskCheckForTimeOut>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d124      	bne.n	800d6f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d6a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6a8:	f000 fbf2 	bl	800de90 <prvIsQueueFull>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d018      	beq.n	800d6e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b4:	3310      	adds	r3, #16
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 f8f2 	bl	800e8a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6c2:	f000 fb7d 	bl	800ddc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6c6:	f000 ff1f 	bl	800e508 <xTaskResumeAll>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f47f af7c 	bne.w	800d5ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d704 <xQueueGenericSend+0x200>)
 800d6d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	e772      	b.n	800d5ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6e6:	f000 fb6b 	bl	800ddc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ea:	f000 ff0d 	bl	800e508 <xTaskResumeAll>
 800d6ee:	e76c      	b.n	800d5ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6f2:	f000 fb65 	bl	800ddc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6f6:	f000 ff07 	bl	800e508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3738      	adds	r7, #56	@ 0x38
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	e000ed04 	.word	0xe000ed04

0800d708 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b090      	sub	sp, #64	@ 0x40
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10b      	bne.n	800d738 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d732:	bf00      	nop
 800d734:	bf00      	nop
 800d736:	e7fd      	b.n	800d734 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d103      	bne.n	800d746 <xQueueGenericSendFromISR+0x3e>
 800d73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <xQueueGenericSendFromISR+0x42>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <xQueueGenericSendFromISR+0x44>
 800d74a:	2300      	movs	r3, #0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10b      	bne.n	800d768 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d762:	bf00      	nop
 800d764:	bf00      	nop
 800d766:	e7fd      	b.n	800d764 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d103      	bne.n	800d776 <xQueueGenericSendFromISR+0x6e>
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d772:	2b01      	cmp	r3, #1
 800d774:	d101      	bne.n	800d77a <xQueueGenericSendFromISR+0x72>
 800d776:	2301      	movs	r3, #1
 800d778:	e000      	b.n	800d77c <xQueueGenericSendFromISR+0x74>
 800d77a:	2300      	movs	r3, #0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10b      	bne.n	800d798 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	623b      	str	r3, [r7, #32]
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	e7fd      	b.n	800d794 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d798:	f7ff fc06 	bl	800cfa8 <vPortValidateInterruptPriority>
	__asm volatile
 800d79c:	f3ef 8211 	mrs	r2, BASEPRI
 800d7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	61fa      	str	r2, [r7, #28]
 800d7b2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d7b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d302      	bcc.n	800d7ca <xQueueGenericSendFromISR+0xc2>
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d12f      	bne.n	800d82a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7da:	683a      	ldr	r2, [r7, #0]
 800d7dc:	68b9      	ldr	r1, [r7, #8]
 800d7de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7e0:	f000 fa5e 	bl	800dca0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ec:	d112      	bne.n	800d814 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d016      	beq.n	800d824 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f8:	3324      	adds	r3, #36	@ 0x24
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f001 f8a4 	bl	800e948 <xTaskRemoveFromEventList>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00e      	beq.n	800d824 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00b      	beq.n	800d824 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	e007      	b.n	800d824 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d818:	3301      	adds	r3, #1
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	b25a      	sxtb	r2, r3
 800d81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d824:	2301      	movs	r3, #1
 800d826:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d828:	e001      	b.n	800d82e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d830:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f383 8811 	msr	BASEPRI, r3
}
 800d838:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3740      	adds	r7, #64	@ 0x40
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	@ 0x30
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d850:	2300      	movs	r3, #0
 800d852:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10b      	bne.n	800d876 <xQueueReceive+0x32>
	__asm volatile
 800d85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d862:	f383 8811 	msr	BASEPRI, r3
 800d866:	f3bf 8f6f 	isb	sy
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	623b      	str	r3, [r7, #32]
}
 800d870:	bf00      	nop
 800d872:	bf00      	nop
 800d874:	e7fd      	b.n	800d872 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d103      	bne.n	800d884 <xQueueReceive+0x40>
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d880:	2b00      	cmp	r3, #0
 800d882:	d101      	bne.n	800d888 <xQueueReceive+0x44>
 800d884:	2301      	movs	r3, #1
 800d886:	e000      	b.n	800d88a <xQueueReceive+0x46>
 800d888:	2300      	movs	r3, #0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10b      	bne.n	800d8a6 <xQueueReceive+0x62>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	61fb      	str	r3, [r7, #28]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8a6:	f001 fa25 	bl	800ecf4 <xTaskGetSchedulerState>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d102      	bne.n	800d8b6 <xQueueReceive+0x72>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <xQueueReceive+0x76>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e000      	b.n	800d8bc <xQueueReceive+0x78>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10b      	bne.n	800d8d8 <xQueueReceive+0x94>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	61bb      	str	r3, [r7, #24]
}
 800d8d2:	bf00      	nop
 800d8d4:	bf00      	nop
 800d8d6:	e7fd      	b.n	800d8d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8d8:	f7ff fa86 	bl	800cde8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d01f      	beq.n	800d928 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8ec:	f000 fa42 	bl	800dd74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f2:	1e5a      	subs	r2, r3, #1
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fa:	691b      	ldr	r3, [r3, #16]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00f      	beq.n	800d920 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d902:	3310      	adds	r3, #16
 800d904:	4618      	mov	r0, r3
 800d906:	f001 f81f 	bl	800e948 <xTaskRemoveFromEventList>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d007      	beq.n	800d920 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d910:	4b3c      	ldr	r3, [pc, #240]	@ (800da04 <xQueueReceive+0x1c0>)
 800d912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d916:	601a      	str	r2, [r3, #0]
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d920:	f7ff fa94 	bl	800ce4c <vPortExitCritical>
				return pdPASS;
 800d924:	2301      	movs	r3, #1
 800d926:	e069      	b.n	800d9fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d103      	bne.n	800d936 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d92e:	f7ff fa8d 	bl	800ce4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d932:	2300      	movs	r3, #0
 800d934:	e062      	b.n	800d9fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d93c:	f107 0310 	add.w	r3, r7, #16
 800d940:	4618      	mov	r0, r3
 800d942:	f001 f865 	bl	800ea10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d946:	2301      	movs	r3, #1
 800d948:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d94a:	f7ff fa7f 	bl	800ce4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d94e:	f000 fdcd 	bl	800e4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d952:	f7ff fa49 	bl	800cde8 <vPortEnterCritical>
 800d956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d962:	d103      	bne.n	800d96c <xQueueReceive+0x128>
 800d964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d966:	2200      	movs	r2, #0
 800d968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d972:	b25b      	sxtb	r3, r3
 800d974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d978:	d103      	bne.n	800d982 <xQueueReceive+0x13e>
 800d97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d982:	f7ff fa63 	bl	800ce4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d986:	1d3a      	adds	r2, r7, #4
 800d988:	f107 0310 	add.w	r3, r7, #16
 800d98c:	4611      	mov	r1, r2
 800d98e:	4618      	mov	r0, r3
 800d990:	f001 f854 	bl	800ea3c <xTaskCheckForTimeOut>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d123      	bne.n	800d9e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d99a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d99c:	f000 fa62 	bl	800de64 <prvIsQueueEmpty>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d017      	beq.n	800d9d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a8:	3324      	adds	r3, #36	@ 0x24
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 ff78 	bl	800e8a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9b6:	f000 fa03 	bl	800ddc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9ba:	f000 fda5 	bl	800e508 <xTaskResumeAll>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d189      	bne.n	800d8d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800da04 <xQueueReceive+0x1c0>)
 800d9c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	e780      	b.n	800d8d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9d8:	f000 f9f2 	bl	800ddc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9dc:	f000 fd94 	bl	800e508 <xTaskResumeAll>
 800d9e0:	e77a      	b.n	800d8d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9e4:	f000 f9ec 	bl	800ddc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9e8:	f000 fd8e 	bl	800e508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9ee:	f000 fa39 	bl	800de64 <prvIsQueueEmpty>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f43f af6f 	beq.w	800d8d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3730      	adds	r7, #48	@ 0x30
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	e000ed04 	.word	0xe000ed04

0800da08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08e      	sub	sp, #56	@ 0x38
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da12:	2300      	movs	r3, #0
 800da14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da1a:	2300      	movs	r3, #0
 800da1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	623b      	str	r3, [r7, #32]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00b      	beq.n	800da5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	61fb      	str	r3, [r7, #28]
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	e7fd      	b.n	800da58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da5c:	f001 f94a 	bl	800ecf4 <xTaskGetSchedulerState>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <xQueueSemaphoreTake+0x64>
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <xQueueSemaphoreTake+0x68>
 800da6c:	2301      	movs	r3, #1
 800da6e:	e000      	b.n	800da72 <xQueueSemaphoreTake+0x6a>
 800da70:	2300      	movs	r3, #0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10b      	bne.n	800da8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	61bb      	str	r3, [r7, #24]
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	e7fd      	b.n	800da8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da8e:	f7ff f9ab 	bl	800cde8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d024      	beq.n	800dae8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa0:	1e5a      	subs	r2, r3, #1
 800daa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d104      	bne.n	800dab8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800daae:	f001 fa9b 	bl	800efe8 <pvTaskIncrementMutexHeldCount>
 800dab2:	4602      	mov	r2, r0
 800dab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00f      	beq.n	800dae0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac2:	3310      	adds	r3, #16
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 ff3f 	bl	800e948 <xTaskRemoveFromEventList>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d007      	beq.n	800dae0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dad0:	4b54      	ldr	r3, [pc, #336]	@ (800dc24 <xQueueSemaphoreTake+0x21c>)
 800dad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dae0:	f7ff f9b4 	bl	800ce4c <vPortExitCritical>
				return pdPASS;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e098      	b.n	800dc1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d112      	bne.n	800db14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800daee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00b      	beq.n	800db0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	617b      	str	r3, [r7, #20]
}
 800db06:	bf00      	nop
 800db08:	bf00      	nop
 800db0a:	e7fd      	b.n	800db08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db0c:	f7ff f99e 	bl	800ce4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db10:	2300      	movs	r3, #0
 800db12:	e082      	b.n	800dc1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db1a:	f107 030c 	add.w	r3, r7, #12
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 ff76 	bl	800ea10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db24:	2301      	movs	r3, #1
 800db26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db28:	f7ff f990 	bl	800ce4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db2c:	f000 fcde 	bl	800e4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db30:	f7ff f95a 	bl	800cde8 <vPortEnterCritical>
 800db34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db3a:	b25b      	sxtb	r3, r3
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db40:	d103      	bne.n	800db4a <xQueueSemaphoreTake+0x142>
 800db42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db50:	b25b      	sxtb	r3, r3
 800db52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db56:	d103      	bne.n	800db60 <xQueueSemaphoreTake+0x158>
 800db58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5a:	2200      	movs	r2, #0
 800db5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db60:	f7ff f974 	bl	800ce4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db64:	463a      	mov	r2, r7
 800db66:	f107 030c 	add.w	r3, r7, #12
 800db6a:	4611      	mov	r1, r2
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 ff65 	bl	800ea3c <xTaskCheckForTimeOut>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d132      	bne.n	800dbde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db7a:	f000 f973 	bl	800de64 <prvIsQueueEmpty>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d026      	beq.n	800dbd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d109      	bne.n	800dba0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800db8c:	f7ff f92c 	bl	800cde8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	4618      	mov	r0, r3
 800db96:	f001 f8cb 	bl	800ed30 <xTaskPriorityInherit>
 800db9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800db9c:	f7ff f956 	bl	800ce4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba2:	3324      	adds	r3, #36	@ 0x24
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	4611      	mov	r1, r2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 fe7b 	bl	800e8a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbb0:	f000 f906 	bl	800ddc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbb4:	f000 fca8 	bl	800e508 <xTaskResumeAll>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f47f af67 	bne.w	800da8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dbc0:	4b18      	ldr	r3, [pc, #96]	@ (800dc24 <xQueueSemaphoreTake+0x21c>)
 800dbc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	e75d      	b.n	800da8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbd4:	f000 f8f4 	bl	800ddc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbd8:	f000 fc96 	bl	800e508 <xTaskResumeAll>
 800dbdc:	e757      	b.n	800da8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbe0:	f000 f8ee 	bl	800ddc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbe4:	f000 fc90 	bl	800e508 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbea:	f000 f93b 	bl	800de64 <prvIsQueueEmpty>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f43f af4c 	beq.w	800da8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00d      	beq.n	800dc18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dbfc:	f7ff f8f4 	bl	800cde8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc02:	f000 f835 	bl	800dc70 <prvGetDisinheritPriorityAfterTimeout>
 800dc06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f001 f966 	bl	800eee0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc14:	f7ff f91a 	bl	800ce4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3738      	adds	r7, #56	@ 0x38
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	e000ed04 	.word	0xe000ed04

0800dc28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10b      	bne.n	800dc52 <vQueueDelete+0x2a>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	60bb      	str	r3, [r7, #8]
}
 800dc4c:	bf00      	nop
 800dc4e:	bf00      	nop
 800dc50:	e7fd      	b.n	800dc4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f000 f95e 	bl	800df14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d102      	bne.n	800dc68 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7fe fdba 	bl	800c7dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dc68:	bf00      	nop
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d006      	beq.n	800dc8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dc8a:	60fb      	str	r3, [r7, #12]
 800dc8c:	e001      	b.n	800dc92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc92:	68fb      	ldr	r3, [r7, #12]
	}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10d      	bne.n	800dcda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d14d      	bne.n	800dd62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f001 f898 	bl	800ee00 <xTaskPriorityDisinherit>
 800dcd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	609a      	str	r2, [r3, #8]
 800dcd8:	e043      	b.n	800dd62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d119      	bne.n	800dd14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6858      	ldr	r0, [r3, #4]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce8:	461a      	mov	r2, r3
 800dcea:	68b9      	ldr	r1, [r7, #8]
 800dcec:	f002 fa7e 	bl	80101ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf8:	441a      	add	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d32b      	bcc.n	800dd62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	605a      	str	r2, [r3, #4]
 800dd12:	e026      	b.n	800dd62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	68d8      	ldr	r0, [r3, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	68b9      	ldr	r1, [r7, #8]
 800dd20:	f002 fa64 	bl	80101ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	68da      	ldr	r2, [r3, #12]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd2c:	425b      	negs	r3, r3
 800dd2e:	441a      	add	r2, r3
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d207      	bcs.n	800dd50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	689a      	ldr	r2, [r3, #8]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd48:	425b      	negs	r3, r3
 800dd4a:	441a      	add	r2, r3
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d105      	bne.n	800dd62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dd6a:	697b      	ldr	r3, [r7, #20]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d018      	beq.n	800ddb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68da      	ldr	r2, [r3, #12]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8e:	441a      	add	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d303      	bcc.n	800dda8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	68d9      	ldr	r1, [r3, #12]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	6838      	ldr	r0, [r7, #0]
 800ddb4:	f002 fa1a 	bl	80101ec <memcpy>
	}
}
 800ddb8:	bf00      	nop
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddc8:	f7ff f80e 	bl	800cde8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ddd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddd4:	e011      	b.n	800ddfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d012      	beq.n	800de04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3324      	adds	r3, #36	@ 0x24
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 fdb0 	bl	800e948 <xTaskRemoveFromEventList>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ddee:	f000 fe89 	bl	800eb04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ddf2:	7bfb      	ldrb	r3, [r7, #15]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	dce9      	bgt.n	800ddd6 <prvUnlockQueue+0x16>
 800de02:	e000      	b.n	800de06 <prvUnlockQueue+0x46>
					break;
 800de04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	22ff      	movs	r2, #255	@ 0xff
 800de0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800de0e:	f7ff f81d 	bl	800ce4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de12:	f7fe ffe9 	bl	800cde8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de1e:	e011      	b.n	800de44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d012      	beq.n	800de4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3310      	adds	r3, #16
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 fd8b 	bl	800e948 <xTaskRemoveFromEventList>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de38:	f000 fe64 	bl	800eb04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de3c:	7bbb      	ldrb	r3, [r7, #14]
 800de3e:	3b01      	subs	r3, #1
 800de40:	b2db      	uxtb	r3, r3
 800de42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	dce9      	bgt.n	800de20 <prvUnlockQueue+0x60>
 800de4c:	e000      	b.n	800de50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	22ff      	movs	r2, #255	@ 0xff
 800de54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800de58:	f7fe fff8 	bl	800ce4c <vPortExitCritical>
}
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de6c:	f7fe ffbc 	bl	800cde8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de74:	2b00      	cmp	r3, #0
 800de76:	d102      	bne.n	800de7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de78:	2301      	movs	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	e001      	b.n	800de82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de7e:	2300      	movs	r3, #0
 800de80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de82:	f7fe ffe3 	bl	800ce4c <vPortExitCritical>

	return xReturn;
 800de86:	68fb      	ldr	r3, [r7, #12]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de98:	f7fe ffa6 	bl	800cde8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d102      	bne.n	800deae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	e001      	b.n	800deb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800deb2:	f7fe ffcb 	bl	800ce4c <vPortExitCritical>

	return xReturn;
 800deb6:	68fb      	ldr	r3, [r7, #12]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deca:	2300      	movs	r3, #0
 800decc:	60fb      	str	r3, [r7, #12]
 800dece:	e014      	b.n	800defa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ded0:	4a0f      	ldr	r2, [pc, #60]	@ (800df10 <vQueueAddToRegistry+0x50>)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10b      	bne.n	800def4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dedc:	490c      	ldr	r1, [pc, #48]	@ (800df10 <vQueueAddToRegistry+0x50>)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	683a      	ldr	r2, [r7, #0]
 800dee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dee6:	4a0a      	ldr	r2, [pc, #40]	@ (800df10 <vQueueAddToRegistry+0x50>)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	4413      	add	r3, r2
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800def2:	e006      	b.n	800df02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3301      	adds	r3, #1
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2b07      	cmp	r3, #7
 800defe:	d9e7      	bls.n	800ded0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df00:	bf00      	nop
 800df02:	bf00      	nop
 800df04:	3714      	adds	r7, #20
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	200028fc 	.word	0x200028fc

0800df14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df1c:	2300      	movs	r3, #0
 800df1e:	60fb      	str	r3, [r7, #12]
 800df20:	e016      	b.n	800df50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800df22:	4a10      	ldr	r2, [pc, #64]	@ (800df64 <vQueueUnregisterQueue+0x50>)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	00db      	lsls	r3, r3, #3
 800df28:	4413      	add	r3, r2
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d10b      	bne.n	800df4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800df32:	4a0c      	ldr	r2, [pc, #48]	@ (800df64 <vQueueUnregisterQueue+0x50>)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2100      	movs	r1, #0
 800df38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800df3c:	4a09      	ldr	r2, [pc, #36]	@ (800df64 <vQueueUnregisterQueue+0x50>)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	4413      	add	r3, r2
 800df44:	2200      	movs	r2, #0
 800df46:	605a      	str	r2, [r3, #4]
				break;
 800df48:	e006      	b.n	800df58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3301      	adds	r3, #1
 800df4e:	60fb      	str	r3, [r7, #12]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b07      	cmp	r3, #7
 800df54:	d9e5      	bls.n	800df22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800df56:	bf00      	nop
 800df58:	bf00      	nop
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	200028fc 	.word	0x200028fc

0800df68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df78:	f7fe ff36 	bl	800cde8 <vPortEnterCritical>
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df82:	b25b      	sxtb	r3, r3
 800df84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df88:	d103      	bne.n	800df92 <vQueueWaitForMessageRestricted+0x2a>
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df98:	b25b      	sxtb	r3, r3
 800df9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9e:	d103      	bne.n	800dfa8 <vQueueWaitForMessageRestricted+0x40>
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfa8:	f7fe ff50 	bl	800ce4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	3324      	adds	r3, #36	@ 0x24
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 fc97 	bl	800e8f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dfc2:	6978      	ldr	r0, [r7, #20]
 800dfc4:	f7ff fefc 	bl	800ddc0 <prvUnlockQueue>
	}
 800dfc8:	bf00      	nop
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08e      	sub	sp, #56	@ 0x38
 800dfd4:	af04      	add	r7, sp, #16
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10b      	bne.n	800dffc <xTaskCreateStatic+0x2c>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	623b      	str	r3, [r7, #32]
}
 800dff6:	bf00      	nop
 800dff8:	bf00      	nop
 800dffa:	e7fd      	b.n	800dff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10b      	bne.n	800e01a <xTaskCreateStatic+0x4a>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	61fb      	str	r3, [r7, #28]
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop
 800e018:	e7fd      	b.n	800e016 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e01a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800e01e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800e026:	d00b      	beq.n	800e040 <xTaskCreateStatic+0x70>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	61bb      	str	r3, [r7, #24]
}
 800e03a:	bf00      	nop
 800e03c:	bf00      	nop
 800e03e:	e7fd      	b.n	800e03c <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e040:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	2b00      	cmp	r3, #0
 800e046:	d01e      	beq.n	800e086 <xTaskCreateStatic+0xb6>
 800e048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d01b      	beq.n	800e086 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e050:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e056:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05a:	2202      	movs	r2, #2
 800e05c:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e060:	2300      	movs	r3, #0
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e066:	9302      	str	r3, [sp, #8]
 800e068:	f107 0314 	add.w	r3, r7, #20
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	68b9      	ldr	r1, [r7, #8]
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f000 f851 	bl	800e120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e07e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e080:	f000 f91e 	bl	800e2c0 <prvAddNewTaskToReadyList>
 800e084:	e001      	b.n	800e08a <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 800e086:	2300      	movs	r3, #0
 800e088:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e08a:	697b      	ldr	r3, [r7, #20]
	}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3728      	adds	r7, #40	@ 0x28
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e094:	b580      	push	{r7, lr}
 800e096:	b08c      	sub	sp, #48	@ 0x30
 800e098:	af04      	add	r7, sp, #16
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	603b      	str	r3, [r7, #0]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e0a4:	88fb      	ldrh	r3, [r7, #6]
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fac9 	bl	800c640 <pvPortMalloc>
 800e0ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00f      	beq.n	800e0d6 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e0b6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800e0ba:	f7fe fac1 	bl	800c640 <pvPortMalloc>
 800e0be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d003      	beq.n	800e0ce <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800e0cc:	e005      	b.n	800e0da <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0ce:	6978      	ldr	r0, [r7, #20]
 800e0d0:	f7fe fb84 	bl	800c7dc <vPortFree>
 800e0d4:	e001      	b.n	800e0da <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d017      	beq.n	800e110 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0e8:	88fa      	ldrh	r2, [r7, #6]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	9303      	str	r3, [sp, #12]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	9302      	str	r3, [sp, #8]
 800e0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f4:	9301      	str	r3, [sp, #4]
 800e0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	68b9      	ldr	r1, [r7, #8]
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f000 f80e 	bl	800e120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e104:	69f8      	ldr	r0, [r7, #28]
 800e106:	f000 f8db 	bl	800e2c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e10a:	2301      	movs	r3, #1
 800e10c:	61bb      	str	r3, [r7, #24]
 800e10e:	e002      	b.n	800e116 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
 800e114:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e116:	69bb      	ldr	r3, [r7, #24]
	}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e130:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	461a      	mov	r2, r3
 800e138:	21a5      	movs	r1, #165	@ 0xa5
 800e13a:	f001 ff92 	bl	8010062 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e148:	3b01      	subs	r3, #1
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	f023 0307 	bic.w	r3, r3, #7
 800e156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	f003 0307 	and.w	r3, r3, #7
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00b      	beq.n	800e17a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	617b      	str	r3, [r7, #20]
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	e7fd      	b.n	800e176 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d01f      	beq.n	800e1c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]
 800e184:	e012      	b.n	800e1ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	4413      	add	r3, r2
 800e18c:	7819      	ldrb	r1, [r3, #0]
 800e18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	4413      	add	r3, r2
 800e194:	3334      	adds	r3, #52	@ 0x34
 800e196:	460a      	mov	r2, r1
 800e198:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	4413      	add	r3, r2
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d006      	beq.n	800e1b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	61fb      	str	r3, [r7, #28]
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	2b0f      	cmp	r3, #15
 800e1b0:	d9e9      	bls.n	800e186 <prvInitialiseNewTask+0x66>
 800e1b2:	e000      	b.n	800e1b6 <prvInitialiseNewTask+0x96>
			{
				break;
 800e1b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e1be:	e003      	b.n	800e1c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ca:	2b37      	cmp	r3, #55	@ 0x37
 800e1cc:	d901      	bls.n	800e1d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1ce:	2337      	movs	r3, #55	@ 0x37
 800e1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe fc37 	bl	800ca5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fc32 	bl	800ca5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e200:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e206:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e20c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e210:	2200      	movs	r2, #0
 800e212:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e220:	3358      	adds	r3, #88	@ 0x58
 800e222:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800e226:	2100      	movs	r1, #0
 800e228:	4618      	mov	r0, r3
 800e22a:	f001 ff1a 	bl	8010062 <memset>
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	4a20      	ldr	r2, [pc, #128]	@ (800e2b4 <prvInitialiseNewTask+0x194>)
 800e232:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e236:	4a20      	ldr	r2, [pc, #128]	@ (800e2b8 <prvInitialiseNewTask+0x198>)
 800e238:	661a      	str	r2, [r3, #96]	@ 0x60
 800e23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23c:	4a1f      	ldr	r2, [pc, #124]	@ (800e2bc <prvInitialiseNewTask+0x19c>)
 800e23e:	665a      	str	r2, [r3, #100]	@ 0x64
 800e240:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e242:	f04f 0201 	mov.w	r2, #1
 800e246:	f04f 0300 	mov.w	r3, #0
 800e24a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 800e24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e250:	f243 320e 	movw	r2, #13070	@ 0x330e
 800e254:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 800e258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25a:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800e25e:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	f241 2234 	movw	r2, #4660	@ 0x1234
 800e268:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 800e26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26e:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 800e272:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 800e276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e278:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 800e27c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800e280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e282:	2205      	movs	r2, #5
 800e284:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 800e288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e28a:	220b      	movs	r2, #11
 800e28c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	68f9      	ldr	r1, [r7, #12]
 800e294:	69b8      	ldr	r0, [r7, #24]
 800e296:	f7fe fc75 	bl	800cb84 <pxPortInitialiseStack>
 800e29a:	4602      	mov	r2, r0
 800e29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e29e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2ac:	bf00      	nop
 800e2ae:	3720      	adds	r7, #32
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20002f9c 	.word	0x20002f9c
 800e2b8:	20003004 	.word	0x20003004
 800e2bc:	2000306c 	.word	0x2000306c

0800e2c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2c8:	f7fe fd8e 	bl	800cde8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2cc:	4b2d      	ldr	r3, [pc, #180]	@ (800e384 <prvAddNewTaskToReadyList+0xc4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	4a2c      	ldr	r2, [pc, #176]	@ (800e384 <prvAddNewTaskToReadyList+0xc4>)
 800e2d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2d6:	4b2c      	ldr	r3, [pc, #176]	@ (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d109      	bne.n	800e2f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2de:	4a2a      	ldr	r2, [pc, #168]	@ (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2e4:	4b27      	ldr	r3, [pc, #156]	@ (800e384 <prvAddNewTaskToReadyList+0xc4>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d110      	bne.n	800e30e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2ec:	f000 fc2e 	bl	800eb4c <prvInitialiseTaskLists>
 800e2f0:	e00d      	b.n	800e30e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2f2:	4b26      	ldr	r3, [pc, #152]	@ (800e38c <prvAddNewTaskToReadyList+0xcc>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d109      	bne.n	800e30e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2fa:	4b23      	ldr	r3, [pc, #140]	@ (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e304:	429a      	cmp	r2, r3
 800e306:	d802      	bhi.n	800e30e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e308:	4a1f      	ldr	r2, [pc, #124]	@ (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e30e:	4b20      	ldr	r3, [pc, #128]	@ (800e390 <prvAddNewTaskToReadyList+0xd0>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3301      	adds	r3, #1
 800e314:	4a1e      	ldr	r2, [pc, #120]	@ (800e390 <prvAddNewTaskToReadyList+0xd0>)
 800e316:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e318:	4b1d      	ldr	r3, [pc, #116]	@ (800e390 <prvAddNewTaskToReadyList+0xd0>)
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e324:	4b1b      	ldr	r3, [pc, #108]	@ (800e394 <prvAddNewTaskToReadyList+0xd4>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d903      	bls.n	800e334 <prvAddNewTaskToReadyList+0x74>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e330:	4a18      	ldr	r2, [pc, #96]	@ (800e394 <prvAddNewTaskToReadyList+0xd4>)
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e338:	4613      	mov	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4a15      	ldr	r2, [pc, #84]	@ (800e398 <prvAddNewTaskToReadyList+0xd8>)
 800e342:	441a      	add	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3304      	adds	r3, #4
 800e348:	4619      	mov	r1, r3
 800e34a:	4610      	mov	r0, r2
 800e34c:	f7fe fb93 	bl	800ca76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e350:	f7fe fd7c 	bl	800ce4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e354:	4b0d      	ldr	r3, [pc, #52]	@ (800e38c <prvAddNewTaskToReadyList+0xcc>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00e      	beq.n	800e37a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e35c:	4b0a      	ldr	r3, [pc, #40]	@ (800e388 <prvAddNewTaskToReadyList+0xc8>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e366:	429a      	cmp	r2, r3
 800e368:	d207      	bcs.n	800e37a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e36a:	4b0c      	ldr	r3, [pc, #48]	@ (800e39c <prvAddNewTaskToReadyList+0xdc>)
 800e36c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e37a:	bf00      	nop
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	20002e10 	.word	0x20002e10
 800e388:	2000293c 	.word	0x2000293c
 800e38c:	20002e1c 	.word	0x20002e1c
 800e390:	20002e2c 	.word	0x20002e2c
 800e394:	20002e18 	.word	0x20002e18
 800e398:	20002940 	.word	0x20002940
 800e39c:	e000ed04 	.word	0xe000ed04

0800e3a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d018      	beq.n	800e3e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e3b2:	4b14      	ldr	r3, [pc, #80]	@ (800e404 <vTaskDelay+0x64>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00b      	beq.n	800e3d2 <vTaskDelay+0x32>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	60bb      	str	r3, [r7, #8]
}
 800e3cc:	bf00      	nop
 800e3ce:	bf00      	nop
 800e3d0:	e7fd      	b.n	800e3ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e3d2:	f000 f88b 	bl	800e4ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 fe19 	bl	800f010 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e3de:	f000 f893 	bl	800e508 <xTaskResumeAll>
 800e3e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d107      	bne.n	800e3fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e3ea:	4b07      	ldr	r3, [pc, #28]	@ (800e408 <vTaskDelay+0x68>)
 800e3ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3fa:	bf00      	nop
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20002e38 	.word	0x20002e38
 800e408:	e000ed04 	.word	0xe000ed04

0800e40c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b08a      	sub	sp, #40	@ 0x28
 800e410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e412:	2300      	movs	r3, #0
 800e414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e41a:	463a      	mov	r2, r7
 800e41c:	1d39      	adds	r1, r7, #4
 800e41e:	f107 0308 	add.w	r3, r7, #8
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe f8d8 	bl	800c5d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	68ba      	ldr	r2, [r7, #8]
 800e42e:	9202      	str	r2, [sp, #8]
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	2300      	movs	r3, #0
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	2300      	movs	r3, #0
 800e438:	460a      	mov	r2, r1
 800e43a:	4924      	ldr	r1, [pc, #144]	@ (800e4cc <vTaskStartScheduler+0xc0>)
 800e43c:	4824      	ldr	r0, [pc, #144]	@ (800e4d0 <vTaskStartScheduler+0xc4>)
 800e43e:	f7ff fdc7 	bl	800dfd0 <xTaskCreateStatic>
 800e442:	4603      	mov	r3, r0
 800e444:	4a23      	ldr	r2, [pc, #140]	@ (800e4d4 <vTaskStartScheduler+0xc8>)
 800e446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e448:	4b22      	ldr	r3, [pc, #136]	@ (800e4d4 <vTaskStartScheduler+0xc8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d002      	beq.n	800e456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e450:	2301      	movs	r3, #1
 800e452:	617b      	str	r3, [r7, #20]
 800e454:	e001      	b.n	800e45a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e456:	2300      	movs	r3, #0
 800e458:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d102      	bne.n	800e466 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e460:	f000 fe2a 	bl	800f0b8 <xTimerCreateTimerTask>
 800e464:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d11b      	bne.n	800e4a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800e46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	613b      	str	r3, [r7, #16]
}
 800e47e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e480:	4b15      	ldr	r3, [pc, #84]	@ (800e4d8 <vTaskStartScheduler+0xcc>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3358      	adds	r3, #88	@ 0x58
 800e486:	4a15      	ldr	r2, [pc, #84]	@ (800e4dc <vTaskStartScheduler+0xd0>)
 800e488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e48a:	4b15      	ldr	r3, [pc, #84]	@ (800e4e0 <vTaskStartScheduler+0xd4>)
 800e48c:	f04f 32ff 	mov.w	r2, #4294967295
 800e490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e492:	4b14      	ldr	r3, [pc, #80]	@ (800e4e4 <vTaskStartScheduler+0xd8>)
 800e494:	2201      	movs	r2, #1
 800e496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e498:	4b13      	ldr	r3, [pc, #76]	@ (800e4e8 <vTaskStartScheduler+0xdc>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e49e:	f7fe fbff 	bl	800cca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4a2:	e00f      	b.n	800e4c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4aa:	d10b      	bne.n	800e4c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	60fb      	str	r3, [r7, #12]
}
 800e4be:	bf00      	nop
 800e4c0:	bf00      	nop
 800e4c2:	e7fd      	b.n	800e4c0 <vTaskStartScheduler+0xb4>
}
 800e4c4:	bf00      	nop
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	08015568 	.word	0x08015568
 800e4d0:	0800eb1d 	.word	0x0800eb1d
 800e4d4:	20002e34 	.word	0x20002e34
 800e4d8:	2000293c 	.word	0x2000293c
 800e4dc:	20000434 	.word	0x20000434
 800e4e0:	20002e30 	.word	0x20002e30
 800e4e4:	20002e1c 	.word	0x20002e1c
 800e4e8:	20002e14 	.word	0x20002e14

0800e4ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e4f0:	4b04      	ldr	r3, [pc, #16]	@ (800e504 <vTaskSuspendAll+0x18>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	4a03      	ldr	r2, [pc, #12]	@ (800e504 <vTaskSuspendAll+0x18>)
 800e4f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e4fa:	bf00      	nop
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr
 800e504:	20002e38 	.word	0x20002e38

0800e508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e50e:	2300      	movs	r3, #0
 800e510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e512:	2300      	movs	r3, #0
 800e514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e516:	4b42      	ldr	r3, [pc, #264]	@ (800e620 <xTaskResumeAll+0x118>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10b      	bne.n	800e536 <xTaskResumeAll+0x2e>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	603b      	str	r3, [r7, #0]
}
 800e530:	bf00      	nop
 800e532:	bf00      	nop
 800e534:	e7fd      	b.n	800e532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e536:	f7fe fc57 	bl	800cde8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e53a:	4b39      	ldr	r3, [pc, #228]	@ (800e620 <xTaskResumeAll+0x118>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3b01      	subs	r3, #1
 800e540:	4a37      	ldr	r2, [pc, #220]	@ (800e620 <xTaskResumeAll+0x118>)
 800e542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e544:	4b36      	ldr	r3, [pc, #216]	@ (800e620 <xTaskResumeAll+0x118>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d162      	bne.n	800e612 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e54c:	4b35      	ldr	r3, [pc, #212]	@ (800e624 <xTaskResumeAll+0x11c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d05e      	beq.n	800e612 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e554:	e02f      	b.n	800e5b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e556:	4b34      	ldr	r3, [pc, #208]	@ (800e628 <xTaskResumeAll+0x120>)
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	3318      	adds	r3, #24
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fae4 	bl	800cb30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3304      	adds	r3, #4
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fadf 	bl	800cb30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e576:	4b2d      	ldr	r3, [pc, #180]	@ (800e62c <xTaskResumeAll+0x124>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d903      	bls.n	800e586 <xTaskResumeAll+0x7e>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e582:	4a2a      	ldr	r2, [pc, #168]	@ (800e62c <xTaskResumeAll+0x124>)
 800e584:	6013      	str	r3, [r2, #0]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e58a:	4613      	mov	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	4413      	add	r3, r2
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	4a27      	ldr	r2, [pc, #156]	@ (800e630 <xTaskResumeAll+0x128>)
 800e594:	441a      	add	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3304      	adds	r3, #4
 800e59a:	4619      	mov	r1, r3
 800e59c:	4610      	mov	r0, r2
 800e59e:	f7fe fa6a 	bl	800ca76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5a6:	4b23      	ldr	r3, [pc, #140]	@ (800e634 <xTaskResumeAll+0x12c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d302      	bcc.n	800e5b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e5b0:	4b21      	ldr	r3, [pc, #132]	@ (800e638 <xTaskResumeAll+0x130>)
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5b6:	4b1c      	ldr	r3, [pc, #112]	@ (800e628 <xTaskResumeAll+0x120>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d1cb      	bne.n	800e556 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5c4:	f000 fb66 	bl	800ec94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5c8:	4b1c      	ldr	r3, [pc, #112]	@ (800e63c <xTaskResumeAll+0x134>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d010      	beq.n	800e5f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5d4:	f000 f846 	bl	800e664 <xTaskIncrementTick>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e5de:	4b16      	ldr	r3, [pc, #88]	@ (800e638 <xTaskResumeAll+0x130>)
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d1f1      	bne.n	800e5d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e5f0:	4b12      	ldr	r3, [pc, #72]	@ (800e63c <xTaskResumeAll+0x134>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e5f6:	4b10      	ldr	r3, [pc, #64]	@ (800e638 <xTaskResumeAll+0x130>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d009      	beq.n	800e612 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e5fe:	2301      	movs	r3, #1
 800e600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e602:	4b0f      	ldr	r3, [pc, #60]	@ (800e640 <xTaskResumeAll+0x138>)
 800e604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e612:	f7fe fc1b 	bl	800ce4c <vPortExitCritical>

	return xAlreadyYielded;
 800e616:	68bb      	ldr	r3, [r7, #8]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20002e38 	.word	0x20002e38
 800e624:	20002e10 	.word	0x20002e10
 800e628:	20002dd0 	.word	0x20002dd0
 800e62c:	20002e18 	.word	0x20002e18
 800e630:	20002940 	.word	0x20002940
 800e634:	2000293c 	.word	0x2000293c
 800e638:	20002e24 	.word	0x20002e24
 800e63c:	20002e20 	.word	0x20002e20
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e64a:	4b05      	ldr	r3, [pc, #20]	@ (800e660 <xTaskGetTickCount+0x1c>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e650:	687b      	ldr	r3, [r7, #4]
}
 800e652:	4618      	mov	r0, r3
 800e654:	370c      	adds	r7, #12
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	20002e14 	.word	0x20002e14

0800e664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e66e:	4b4f      	ldr	r3, [pc, #316]	@ (800e7ac <xTaskIncrementTick+0x148>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	f040 8090 	bne.w	800e798 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e678:	4b4d      	ldr	r3, [pc, #308]	@ (800e7b0 <xTaskIncrementTick+0x14c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e680:	4a4b      	ldr	r2, [pc, #300]	@ (800e7b0 <xTaskIncrementTick+0x14c>)
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d121      	bne.n	800e6d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e68c:	4b49      	ldr	r3, [pc, #292]	@ (800e7b4 <xTaskIncrementTick+0x150>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00b      	beq.n	800e6ae <xTaskIncrementTick+0x4a>
	__asm volatile
 800e696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	603b      	str	r3, [r7, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	bf00      	nop
 800e6ac:	e7fd      	b.n	800e6aa <xTaskIncrementTick+0x46>
 800e6ae:	4b41      	ldr	r3, [pc, #260]	@ (800e7b4 <xTaskIncrementTick+0x150>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	4b40      	ldr	r3, [pc, #256]	@ (800e7b8 <xTaskIncrementTick+0x154>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a3e      	ldr	r2, [pc, #248]	@ (800e7b4 <xTaskIncrementTick+0x150>)
 800e6ba:	6013      	str	r3, [r2, #0]
 800e6bc:	4a3e      	ldr	r2, [pc, #248]	@ (800e7b8 <xTaskIncrementTick+0x154>)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6013      	str	r3, [r2, #0]
 800e6c2:	4b3e      	ldr	r3, [pc, #248]	@ (800e7bc <xTaskIncrementTick+0x158>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	4a3c      	ldr	r2, [pc, #240]	@ (800e7bc <xTaskIncrementTick+0x158>)
 800e6ca:	6013      	str	r3, [r2, #0]
 800e6cc:	f000 fae2 	bl	800ec94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6d0:	4b3b      	ldr	r3, [pc, #236]	@ (800e7c0 <xTaskIncrementTick+0x15c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d349      	bcc.n	800e76e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6da:	4b36      	ldr	r3, [pc, #216]	@ (800e7b4 <xTaskIncrementTick+0x150>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d104      	bne.n	800e6ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6e4:	4b36      	ldr	r3, [pc, #216]	@ (800e7c0 <xTaskIncrementTick+0x15c>)
 800e6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ea:	601a      	str	r2, [r3, #0]
					break;
 800e6ec:	e03f      	b.n	800e76e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ee:	4b31      	ldr	r3, [pc, #196]	@ (800e7b4 <xTaskIncrementTick+0x150>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	429a      	cmp	r2, r3
 800e704:	d203      	bcs.n	800e70e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e706:	4a2e      	ldr	r2, [pc, #184]	@ (800e7c0 <xTaskIncrementTick+0x15c>)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e70c:	e02f      	b.n	800e76e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	3304      	adds	r3, #4
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fa0c 	bl	800cb30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d004      	beq.n	800e72a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	3318      	adds	r3, #24
 800e724:	4618      	mov	r0, r3
 800e726:	f7fe fa03 	bl	800cb30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e72e:	4b25      	ldr	r3, [pc, #148]	@ (800e7c4 <xTaskIncrementTick+0x160>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	429a      	cmp	r2, r3
 800e734:	d903      	bls.n	800e73e <xTaskIncrementTick+0xda>
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e73a:	4a22      	ldr	r2, [pc, #136]	@ (800e7c4 <xTaskIncrementTick+0x160>)
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e742:	4613      	mov	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4a1f      	ldr	r2, [pc, #124]	@ (800e7c8 <xTaskIncrementTick+0x164>)
 800e74c:	441a      	add	r2, r3
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	3304      	adds	r3, #4
 800e752:	4619      	mov	r1, r3
 800e754:	4610      	mov	r0, r2
 800e756:	f7fe f98e 	bl	800ca76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e75e:	4b1b      	ldr	r3, [pc, #108]	@ (800e7cc <xTaskIncrementTick+0x168>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e764:	429a      	cmp	r2, r3
 800e766:	d3b8      	bcc.n	800e6da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e768:	2301      	movs	r3, #1
 800e76a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e76c:	e7b5      	b.n	800e6da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e76e:	4b17      	ldr	r3, [pc, #92]	@ (800e7cc <xTaskIncrementTick+0x168>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e774:	4914      	ldr	r1, [pc, #80]	@ (800e7c8 <xTaskIncrementTick+0x164>)
 800e776:	4613      	mov	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	4413      	add	r3, r2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	440b      	add	r3, r1
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d901      	bls.n	800e78a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e786:	2301      	movs	r3, #1
 800e788:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e78a:	4b11      	ldr	r3, [pc, #68]	@ (800e7d0 <xTaskIncrementTick+0x16c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d007      	beq.n	800e7a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e792:	2301      	movs	r3, #1
 800e794:	617b      	str	r3, [r7, #20]
 800e796:	e004      	b.n	800e7a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e798:	4b0e      	ldr	r3, [pc, #56]	@ (800e7d4 <xTaskIncrementTick+0x170>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3301      	adds	r3, #1
 800e79e:	4a0d      	ldr	r2, [pc, #52]	@ (800e7d4 <xTaskIncrementTick+0x170>)
 800e7a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7a2:	697b      	ldr	r3, [r7, #20]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	20002e38 	.word	0x20002e38
 800e7b0:	20002e14 	.word	0x20002e14
 800e7b4:	20002dc8 	.word	0x20002dc8
 800e7b8:	20002dcc 	.word	0x20002dcc
 800e7bc:	20002e28 	.word	0x20002e28
 800e7c0:	20002e30 	.word	0x20002e30
 800e7c4:	20002e18 	.word	0x20002e18
 800e7c8:	20002940 	.word	0x20002940
 800e7cc:	2000293c 	.word	0x2000293c
 800e7d0:	20002e24 	.word	0x20002e24
 800e7d4:	20002e20 	.word	0x20002e20

0800e7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7de:	4b2b      	ldr	r3, [pc, #172]	@ (800e88c <vTaskSwitchContext+0xb4>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d003      	beq.n	800e7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e890 <vTaskSwitchContext+0xb8>)
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e7ec:	e047      	b.n	800e87e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e7ee:	4b28      	ldr	r3, [pc, #160]	@ (800e890 <vTaskSwitchContext+0xb8>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7f4:	4b27      	ldr	r3, [pc, #156]	@ (800e894 <vTaskSwitchContext+0xbc>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	e011      	b.n	800e820 <vTaskSwitchContext+0x48>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10b      	bne.n	800e81a <vTaskSwitchContext+0x42>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	607b      	str	r3, [r7, #4]
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop
 800e818:	e7fd      	b.n	800e816 <vTaskSwitchContext+0x3e>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	491d      	ldr	r1, [pc, #116]	@ (800e898 <vTaskSwitchContext+0xc0>)
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	4613      	mov	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	4413      	add	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	440b      	add	r3, r1
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d0e3      	beq.n	800e7fc <vTaskSwitchContext+0x24>
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	4613      	mov	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4a16      	ldr	r2, [pc, #88]	@ (800e898 <vTaskSwitchContext+0xc0>)
 800e840:	4413      	add	r3, r2
 800e842:	60bb      	str	r3, [r7, #8]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	605a      	str	r2, [r3, #4]
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	685a      	ldr	r2, [r3, #4]
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	3308      	adds	r3, #8
 800e856:	429a      	cmp	r2, r3
 800e858:	d104      	bne.n	800e864 <vTaskSwitchContext+0x8c>
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	685a      	ldr	r2, [r3, #4]
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	605a      	str	r2, [r3, #4]
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	4a0c      	ldr	r2, [pc, #48]	@ (800e89c <vTaskSwitchContext+0xc4>)
 800e86c:	6013      	str	r3, [r2, #0]
 800e86e:	4a09      	ldr	r2, [pc, #36]	@ (800e894 <vTaskSwitchContext+0xbc>)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e874:	4b09      	ldr	r3, [pc, #36]	@ (800e89c <vTaskSwitchContext+0xc4>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	3358      	adds	r3, #88	@ 0x58
 800e87a:	4a09      	ldr	r2, [pc, #36]	@ (800e8a0 <vTaskSwitchContext+0xc8>)
 800e87c:	6013      	str	r3, [r2, #0]
}
 800e87e:	bf00      	nop
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	20002e38 	.word	0x20002e38
 800e890:	20002e24 	.word	0x20002e24
 800e894:	20002e18 	.word	0x20002e18
 800e898:	20002940 	.word	0x20002940
 800e89c:	2000293c 	.word	0x2000293c
 800e8a0:	20000434 	.word	0x20000434

0800e8a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10b      	bne.n	800e8cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	60fb      	str	r3, [r7, #12]
}
 800e8c6:	bf00      	nop
 800e8c8:	bf00      	nop
 800e8ca:	e7fd      	b.n	800e8c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8cc:	4b07      	ldr	r3, [pc, #28]	@ (800e8ec <vTaskPlaceOnEventList+0x48>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3318      	adds	r3, #24
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7fe f8f2 	bl	800cabe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8da:	2101      	movs	r1, #1
 800e8dc:	6838      	ldr	r0, [r7, #0]
 800e8de:	f000 fb97 	bl	800f010 <prvAddCurrentTaskToDelayedList>
}
 800e8e2:	bf00      	nop
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	2000293c 	.word	0x2000293c

0800e8f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10b      	bne.n	800e91a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	617b      	str	r3, [r7, #20]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e91a:	4b0a      	ldr	r3, [pc, #40]	@ (800e944 <vTaskPlaceOnEventListRestricted+0x54>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	3318      	adds	r3, #24
 800e920:	4619      	mov	r1, r3
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f7fe f8a7 	bl	800ca76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e92e:	f04f 33ff 	mov.w	r3, #4294967295
 800e932:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	68b8      	ldr	r0, [r7, #8]
 800e938:	f000 fb6a 	bl	800f010 <prvAddCurrentTaskToDelayedList>
	}
 800e93c:	bf00      	nop
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	2000293c 	.word	0x2000293c

0800e948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10b      	bne.n	800e976 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	60fb      	str	r3, [r7, #12]
}
 800e970:	bf00      	nop
 800e972:	bf00      	nop
 800e974:	e7fd      	b.n	800e972 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	3318      	adds	r3, #24
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe f8d8 	bl	800cb30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e980:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f8 <xTaskRemoveFromEventList+0xb0>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d11d      	bne.n	800e9c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	3304      	adds	r3, #4
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fe f8cf 	bl	800cb30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e996:	4b19      	ldr	r3, [pc, #100]	@ (800e9fc <xTaskRemoveFromEventList+0xb4>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d903      	bls.n	800e9a6 <xTaskRemoveFromEventList+0x5e>
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a2:	4a16      	ldr	r2, [pc, #88]	@ (800e9fc <xTaskRemoveFromEventList+0xb4>)
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4413      	add	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4a13      	ldr	r2, [pc, #76]	@ (800ea00 <xTaskRemoveFromEventList+0xb8>)
 800e9b4:	441a      	add	r2, r3
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4610      	mov	r0, r2
 800e9be:	f7fe f85a 	bl	800ca76 <vListInsertEnd>
 800e9c2:	e005      	b.n	800e9d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	3318      	adds	r3, #24
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	480e      	ldr	r0, [pc, #56]	@ (800ea04 <xTaskRemoveFromEventList+0xbc>)
 800e9cc:	f7fe f853 	bl	800ca76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800ea08 <xTaskRemoveFromEventList+0xc0>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d905      	bls.n	800e9ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800ea0c <xTaskRemoveFromEventList+0xc4>)
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	601a      	str	r2, [r3, #0]
 800e9e8:	e001      	b.n	800e9ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e9ee:	697b      	ldr	r3, [r7, #20]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	20002e38 	.word	0x20002e38
 800e9fc:	20002e18 	.word	0x20002e18
 800ea00:	20002940 	.word	0x20002940
 800ea04:	20002dd0 	.word	0x20002dd0
 800ea08:	2000293c 	.word	0x2000293c
 800ea0c:	20002e24 	.word	0x20002e24

0800ea10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea18:	4b06      	ldr	r3, [pc, #24]	@ (800ea34 <vTaskInternalSetTimeOutState+0x24>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea20:	4b05      	ldr	r3, [pc, #20]	@ (800ea38 <vTaskInternalSetTimeOutState+0x28>)
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	605a      	str	r2, [r3, #4]
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	20002e28 	.word	0x20002e28
 800ea38:	20002e14 	.word	0x20002e14

0800ea3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b088      	sub	sp, #32
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10b      	bne.n	800ea64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	613b      	str	r3, [r7, #16]
}
 800ea5e:	bf00      	nop
 800ea60:	bf00      	nop
 800ea62:	e7fd      	b.n	800ea60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10b      	bne.n	800ea82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	60fb      	str	r3, [r7, #12]
}
 800ea7c:	bf00      	nop
 800ea7e:	bf00      	nop
 800ea80:	e7fd      	b.n	800ea7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ea82:	f7fe f9b1 	bl	800cde8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea86:	4b1d      	ldr	r3, [pc, #116]	@ (800eafc <xTaskCheckForTimeOut+0xc0>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	69ba      	ldr	r2, [r7, #24]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9e:	d102      	bne.n	800eaa6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	61fb      	str	r3, [r7, #28]
 800eaa4:	e023      	b.n	800eaee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	4b15      	ldr	r3, [pc, #84]	@ (800eb00 <xTaskCheckForTimeOut+0xc4>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d007      	beq.n	800eac2 <xTaskCheckForTimeOut+0x86>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d302      	bcc.n	800eac2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eabc:	2301      	movs	r3, #1
 800eabe:	61fb      	str	r3, [r7, #28]
 800eac0:	e015      	b.n	800eaee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	697a      	ldr	r2, [r7, #20]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d20b      	bcs.n	800eae4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	1ad2      	subs	r2, r2, r3
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff ff99 	bl	800ea10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eade:	2300      	movs	r3, #0
 800eae0:	61fb      	str	r3, [r7, #28]
 800eae2:	e004      	b.n	800eaee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	2200      	movs	r2, #0
 800eae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eaea:	2301      	movs	r3, #1
 800eaec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eaee:	f7fe f9ad 	bl	800ce4c <vPortExitCritical>

	return xReturn;
 800eaf2:	69fb      	ldr	r3, [r7, #28]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3720      	adds	r7, #32
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	20002e14 	.word	0x20002e14
 800eb00:	20002e28 	.word	0x20002e28

0800eb04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb04:	b480      	push	{r7}
 800eb06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb08:	4b03      	ldr	r3, [pc, #12]	@ (800eb18 <vTaskMissedYield+0x14>)
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	601a      	str	r2, [r3, #0]
}
 800eb0e:	bf00      	nop
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20002e24 	.word	0x20002e24

0800eb1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb24:	f000 f852 	bl	800ebcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb28:	4b06      	ldr	r3, [pc, #24]	@ (800eb44 <prvIdleTask+0x28>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d9f9      	bls.n	800eb24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb30:	4b05      	ldr	r3, [pc, #20]	@ (800eb48 <prvIdleTask+0x2c>)
 800eb32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb36:	601a      	str	r2, [r3, #0]
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb40:	e7f0      	b.n	800eb24 <prvIdleTask+0x8>
 800eb42:	bf00      	nop
 800eb44:	20002940 	.word	0x20002940
 800eb48:	e000ed04 	.word	0xe000ed04

0800eb4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb52:	2300      	movs	r3, #0
 800eb54:	607b      	str	r3, [r7, #4]
 800eb56:	e00c      	b.n	800eb72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	4a12      	ldr	r2, [pc, #72]	@ (800ebac <prvInitialiseTaskLists+0x60>)
 800eb64:	4413      	add	r3, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fd ff58 	bl	800ca1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	607b      	str	r3, [r7, #4]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b37      	cmp	r3, #55	@ 0x37
 800eb76:	d9ef      	bls.n	800eb58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb78:	480d      	ldr	r0, [pc, #52]	@ (800ebb0 <prvInitialiseTaskLists+0x64>)
 800eb7a:	f7fd ff4f 	bl	800ca1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb7e:	480d      	ldr	r0, [pc, #52]	@ (800ebb4 <prvInitialiseTaskLists+0x68>)
 800eb80:	f7fd ff4c 	bl	800ca1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb84:	480c      	ldr	r0, [pc, #48]	@ (800ebb8 <prvInitialiseTaskLists+0x6c>)
 800eb86:	f7fd ff49 	bl	800ca1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb8a:	480c      	ldr	r0, [pc, #48]	@ (800ebbc <prvInitialiseTaskLists+0x70>)
 800eb8c:	f7fd ff46 	bl	800ca1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb90:	480b      	ldr	r0, [pc, #44]	@ (800ebc0 <prvInitialiseTaskLists+0x74>)
 800eb92:	f7fd ff43 	bl	800ca1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb96:	4b0b      	ldr	r3, [pc, #44]	@ (800ebc4 <prvInitialiseTaskLists+0x78>)
 800eb98:	4a05      	ldr	r2, [pc, #20]	@ (800ebb0 <prvInitialiseTaskLists+0x64>)
 800eb9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc8 <prvInitialiseTaskLists+0x7c>)
 800eb9e:	4a05      	ldr	r2, [pc, #20]	@ (800ebb4 <prvInitialiseTaskLists+0x68>)
 800eba0:	601a      	str	r2, [r3, #0]
}
 800eba2:	bf00      	nop
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	20002940 	.word	0x20002940
 800ebb0:	20002da0 	.word	0x20002da0
 800ebb4:	20002db4 	.word	0x20002db4
 800ebb8:	20002dd0 	.word	0x20002dd0
 800ebbc:	20002de4 	.word	0x20002de4
 800ebc0:	20002dfc 	.word	0x20002dfc
 800ebc4:	20002dc8 	.word	0x20002dc8
 800ebc8:	20002dcc 	.word	0x20002dcc

0800ebcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebd2:	e019      	b.n	800ec08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebd4:	f7fe f908 	bl	800cde8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebd8:	4b10      	ldr	r3, [pc, #64]	@ (800ec1c <prvCheckTasksWaitingTermination+0x50>)
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3304      	adds	r3, #4
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fd ffa3 	bl	800cb30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebea:	4b0d      	ldr	r3, [pc, #52]	@ (800ec20 <prvCheckTasksWaitingTermination+0x54>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	4a0b      	ldr	r2, [pc, #44]	@ (800ec20 <prvCheckTasksWaitingTermination+0x54>)
 800ebf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ec24 <prvCheckTasksWaitingTermination+0x58>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	4a0a      	ldr	r2, [pc, #40]	@ (800ec24 <prvCheckTasksWaitingTermination+0x58>)
 800ebfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebfe:	f7fe f925 	bl	800ce4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f810 	bl	800ec28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec08:	4b06      	ldr	r3, [pc, #24]	@ (800ec24 <prvCheckTasksWaitingTermination+0x58>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1e1      	bne.n	800ebd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 800ec10:	bf00      	nop
 800ec12:	bf00      	nop
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20002de4 	.word	0x20002de4
 800ec20:	20002e10 	.word	0x20002e10
 800ec24:	20002df8 	.word	0x20002df8

0800ec28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	3358      	adds	r3, #88	@ 0x58
 800ec34:	4618      	mov	r0, r3
 800ec36:	f001 fa2d 	bl	8010094 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d108      	bne.n	800ec56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fd fdc7 	bl	800c7dc <vPortFree>
				vPortFree( pxTCB );
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7fd fdc4 	bl	800c7dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec54:	e019      	b.n	800ec8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d103      	bne.n	800ec68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fd fdbb 	bl	800c7dc <vPortFree>
	}
 800ec66:	e010      	b.n	800ec8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	d00b      	beq.n	800ec8a <prvDeleteTCB+0x62>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	60fb      	str	r3, [r7, #12]
}
 800ec84:	bf00      	nop
 800ec86:	bf00      	nop
 800ec88:	e7fd      	b.n	800ec86 <prvDeleteTCB+0x5e>
	}
 800ec8a:	bf00      	nop
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec9a:	4b0c      	ldr	r3, [pc, #48]	@ (800eccc <prvResetNextTaskUnblockTime+0x38>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d104      	bne.n	800ecae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eca4:	4b0a      	ldr	r3, [pc, #40]	@ (800ecd0 <prvResetNextTaskUnblockTime+0x3c>)
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ecac:	e008      	b.n	800ecc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecae:	4b07      	ldr	r3, [pc, #28]	@ (800eccc <prvResetNextTaskUnblockTime+0x38>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	4a04      	ldr	r2, [pc, #16]	@ (800ecd0 <prvResetNextTaskUnblockTime+0x3c>)
 800ecbe:	6013      	str	r3, [r2, #0]
}
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	20002dc8 	.word	0x20002dc8
 800ecd0:	20002e30 	.word	0x20002e30

0800ecd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ecda:	4b05      	ldr	r3, [pc, #20]	@ (800ecf0 <xTaskGetCurrentTaskHandle+0x1c>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ece0:	687b      	ldr	r3, [r7, #4]
	}
 800ece2:	4618      	mov	r0, r3
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	2000293c 	.word	0x2000293c

0800ecf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ed28 <xTaskGetSchedulerState+0x34>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d102      	bne.n	800ed08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed02:	2301      	movs	r3, #1
 800ed04:	607b      	str	r3, [r7, #4]
 800ed06:	e008      	b.n	800ed1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed08:	4b08      	ldr	r3, [pc, #32]	@ (800ed2c <xTaskGetSchedulerState+0x38>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d102      	bne.n	800ed16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed10:	2302      	movs	r3, #2
 800ed12:	607b      	str	r3, [r7, #4]
 800ed14:	e001      	b.n	800ed1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed16:	2300      	movs	r3, #0
 800ed18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed1a:	687b      	ldr	r3, [r7, #4]
	}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	20002e1c 	.word	0x20002e1c
 800ed2c:	20002e38 	.word	0x20002e38

0800ed30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d051      	beq.n	800edea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed4a:	4b2a      	ldr	r3, [pc, #168]	@ (800edf4 <xTaskPriorityInherit+0xc4>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d241      	bcs.n	800edd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	699b      	ldr	r3, [r3, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	db06      	blt.n	800ed6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed5c:	4b25      	ldr	r3, [pc, #148]	@ (800edf4 <xTaskPriorityInherit+0xc4>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	6959      	ldr	r1, [r3, #20]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed72:	4613      	mov	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	4413      	add	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4a1f      	ldr	r2, [pc, #124]	@ (800edf8 <xTaskPriorityInherit+0xc8>)
 800ed7c:	4413      	add	r3, r2
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	d122      	bne.n	800edc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fd fed2 	bl	800cb30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed8c:	4b19      	ldr	r3, [pc, #100]	@ (800edf4 <xTaskPriorityInherit+0xc4>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed9a:	4b18      	ldr	r3, [pc, #96]	@ (800edfc <xTaskPriorityInherit+0xcc>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d903      	bls.n	800edaa <xTaskPriorityInherit+0x7a>
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda6:	4a15      	ldr	r2, [pc, #84]	@ (800edfc <xTaskPriorityInherit+0xcc>)
 800eda8:	6013      	str	r3, [r2, #0]
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edae:	4613      	mov	r3, r2
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4a10      	ldr	r2, [pc, #64]	@ (800edf8 <xTaskPriorityInherit+0xc8>)
 800edb8:	441a      	add	r2, r3
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7fd fe58 	bl	800ca76 <vListInsertEnd>
 800edc6:	e004      	b.n	800edd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800edc8:	4b0a      	ldr	r3, [pc, #40]	@ (800edf4 <xTaskPriorityInherit+0xc4>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800edd2:	2301      	movs	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	e008      	b.n	800edea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eddc:	4b05      	ldr	r3, [pc, #20]	@ (800edf4 <xTaskPriorityInherit+0xc4>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d201      	bcs.n	800edea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ede6:	2301      	movs	r3, #1
 800ede8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edea:	68fb      	ldr	r3, [r7, #12]
	}
 800edec:	4618      	mov	r0, r3
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	2000293c 	.word	0x2000293c
 800edf8:	20002940 	.word	0x20002940
 800edfc:	20002e18 	.word	0x20002e18

0800ee00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d058      	beq.n	800eec8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee16:	4b2f      	ldr	r3, [pc, #188]	@ (800eed4 <xTaskPriorityDisinherit+0xd4>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d00b      	beq.n	800ee38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	60fb      	str	r3, [r7, #12]
}
 800ee32:	bf00      	nop
 800ee34:	bf00      	nop
 800ee36:	e7fd      	b.n	800ee34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10b      	bne.n	800ee58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	60bb      	str	r3, [r7, #8]
}
 800ee52:	bf00      	nop
 800ee54:	bf00      	nop
 800ee56:	e7fd      	b.n	800ee54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee5c:	1e5a      	subs	r2, r3, #1
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d02c      	beq.n	800eec8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d128      	bne.n	800eec8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fd fe58 	bl	800cb30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee98:	4b0f      	ldr	r3, [pc, #60]	@ (800eed8 <xTaskPriorityDisinherit+0xd8>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d903      	bls.n	800eea8 <xTaskPriorityDisinherit+0xa8>
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea4:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <xTaskPriorityDisinherit+0xd8>)
 800eea6:	6013      	str	r3, [r2, #0]
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeac:	4613      	mov	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4a09      	ldr	r2, [pc, #36]	@ (800eedc <xTaskPriorityDisinherit+0xdc>)
 800eeb6:	441a      	add	r2, r3
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	3304      	adds	r3, #4
 800eebc:	4619      	mov	r1, r3
 800eebe:	4610      	mov	r0, r2
 800eec0:	f7fd fdd9 	bl	800ca76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eec4:	2301      	movs	r3, #1
 800eec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eec8:	697b      	ldr	r3, [r7, #20]
	}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3718      	adds	r7, #24
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	2000293c 	.word	0x2000293c
 800eed8:	20002e18 	.word	0x20002e18
 800eedc:	20002940 	.word	0x20002940

0800eee0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eeee:	2301      	movs	r3, #1
 800eef0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d06c      	beq.n	800efd2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d10b      	bne.n	800ef18 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ef00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	60fb      	str	r3, [r7, #12]
}
 800ef12:	bf00      	nop
 800ef14:	bf00      	nop
 800ef16:	e7fd      	b.n	800ef14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d902      	bls.n	800ef28 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	e002      	b.n	800ef2e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef2c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d04c      	beq.n	800efd2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d147      	bne.n	800efd2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef42:	4b26      	ldr	r3, [pc, #152]	@ (800efdc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	69ba      	ldr	r2, [r7, #24]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d10b      	bne.n	800ef64 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ef4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	60bb      	str	r3, [r7, #8]
}
 800ef5e:	bf00      	nop
 800ef60:	bf00      	nop
 800ef62:	e7fd      	b.n	800ef60 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	69fa      	ldr	r2, [r7, #28]
 800ef6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	db04      	blt.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	6959      	ldr	r1, [r3, #20]
 800ef86:	693a      	ldr	r2, [r7, #16]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4413      	add	r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	4a13      	ldr	r2, [pc, #76]	@ (800efe0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef92:	4413      	add	r3, r2
 800ef94:	4299      	cmp	r1, r3
 800ef96:	d11c      	bne.n	800efd2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	3304      	adds	r3, #4
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fd fdc7 	bl	800cb30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa6:	4b0f      	ldr	r3, [pc, #60]	@ (800efe4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d903      	bls.n	800efb6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb2:	4a0c      	ldr	r2, [pc, #48]	@ (800efe4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800efb4:	6013      	str	r3, [r2, #0]
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efba:	4613      	mov	r3, r2
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4413      	add	r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4a07      	ldr	r2, [pc, #28]	@ (800efe0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800efc4:	441a      	add	r2, r3
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	3304      	adds	r3, #4
 800efca:	4619      	mov	r1, r3
 800efcc:	4610      	mov	r0, r2
 800efce:	f7fd fd52 	bl	800ca76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efd2:	bf00      	nop
 800efd4:	3720      	adds	r7, #32
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	2000293c 	.word	0x2000293c
 800efe0:	20002940 	.word	0x20002940
 800efe4:	20002e18 	.word	0x20002e18

0800efe8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efe8:	b480      	push	{r7}
 800efea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efec:	4b07      	ldr	r3, [pc, #28]	@ (800f00c <pvTaskIncrementMutexHeldCount+0x24>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eff4:	4b05      	ldr	r3, [pc, #20]	@ (800f00c <pvTaskIncrementMutexHeldCount+0x24>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800effa:	3201      	adds	r2, #1
 800effc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800effe:	4b03      	ldr	r3, [pc, #12]	@ (800f00c <pvTaskIncrementMutexHeldCount+0x24>)
 800f000:	681b      	ldr	r3, [r3, #0]
	}
 800f002:	4618      	mov	r0, r3
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr
 800f00c:	2000293c 	.word	0x2000293c

0800f010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f01a:	4b21      	ldr	r3, [pc, #132]	@ (800f0a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f020:	4b20      	ldr	r3, [pc, #128]	@ (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3304      	adds	r3, #4
 800f026:	4618      	mov	r0, r3
 800f028:	f7fd fd82 	bl	800cb30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f032:	d10a      	bne.n	800f04a <prvAddCurrentTaskToDelayedList+0x3a>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d007      	beq.n	800f04a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f03a:	4b1a      	ldr	r3, [pc, #104]	@ (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3304      	adds	r3, #4
 800f040:	4619      	mov	r1, r3
 800f042:	4819      	ldr	r0, [pc, #100]	@ (800f0a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f044:	f7fd fd17 	bl	800ca76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f048:	e026      	b.n	800f098 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4413      	add	r3, r2
 800f050:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f052:	4b14      	ldr	r3, [pc, #80]	@ (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d209      	bcs.n	800f076 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f062:	4b12      	ldr	r3, [pc, #72]	@ (800f0ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	4b0f      	ldr	r3, [pc, #60]	@ (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3304      	adds	r3, #4
 800f06c:	4619      	mov	r1, r3
 800f06e:	4610      	mov	r0, r2
 800f070:	f7fd fd25 	bl	800cabe <vListInsert>
}
 800f074:	e010      	b.n	800f098 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f076:	4b0e      	ldr	r3, [pc, #56]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	3304      	adds	r3, #4
 800f080:	4619      	mov	r1, r3
 800f082:	4610      	mov	r0, r2
 800f084:	f7fd fd1b 	bl	800cabe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f088:	4b0a      	ldr	r3, [pc, #40]	@ (800f0b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d202      	bcs.n	800f098 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f092:	4a08      	ldr	r2, [pc, #32]	@ (800f0b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	6013      	str	r3, [r2, #0]
}
 800f098:	bf00      	nop
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	20002e14 	.word	0x20002e14
 800f0a4:	2000293c 	.word	0x2000293c
 800f0a8:	20002dfc 	.word	0x20002dfc
 800f0ac:	20002dcc 	.word	0x20002dcc
 800f0b0:	20002dc8 	.word	0x20002dc8
 800f0b4:	20002e30 	.word	0x20002e30

0800f0b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08a      	sub	sp, #40	@ 0x28
 800f0bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0c2:	f000 fb13 	bl	800f6ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0c6:	4b1d      	ldr	r3, [pc, #116]	@ (800f13c <xTimerCreateTimerTask+0x84>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d021      	beq.n	800f112 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0d6:	1d3a      	adds	r2, r7, #4
 800f0d8:	f107 0108 	add.w	r1, r7, #8
 800f0dc:	f107 030c 	add.w	r3, r7, #12
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fd fa93 	bl	800c60c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	9202      	str	r2, [sp, #8]
 800f0ee:	9301      	str	r3, [sp, #4]
 800f0f0:	2302      	movs	r3, #2
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	460a      	mov	r2, r1
 800f0f8:	4911      	ldr	r1, [pc, #68]	@ (800f140 <xTimerCreateTimerTask+0x88>)
 800f0fa:	4812      	ldr	r0, [pc, #72]	@ (800f144 <xTimerCreateTimerTask+0x8c>)
 800f0fc:	f7fe ff68 	bl	800dfd0 <xTaskCreateStatic>
 800f100:	4603      	mov	r3, r0
 800f102:	4a11      	ldr	r2, [pc, #68]	@ (800f148 <xTimerCreateTimerTask+0x90>)
 800f104:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f106:	4b10      	ldr	r3, [pc, #64]	@ (800f148 <xTimerCreateTimerTask+0x90>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f10e:	2301      	movs	r3, #1
 800f110:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d10b      	bne.n	800f130 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11c:	f383 8811 	msr	BASEPRI, r3
 800f120:	f3bf 8f6f 	isb	sy
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	613b      	str	r3, [r7, #16]
}
 800f12a:	bf00      	nop
 800f12c:	bf00      	nop
 800f12e:	e7fd      	b.n	800f12c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f130:	697b      	ldr	r3, [r7, #20]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3718      	adds	r7, #24
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20002e6c 	.word	0x20002e6c
 800f140:	08015570 	.word	0x08015570
 800f144:	0800f285 	.word	0x0800f285
 800f148:	20002e70 	.word	0x20002e70

0800f14c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08a      	sub	sp, #40	@ 0x28
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d10b      	bne.n	800f17c <xTimerGenericCommand+0x30>
	__asm volatile
 800f164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	623b      	str	r3, [r7, #32]
}
 800f176:	bf00      	nop
 800f178:	bf00      	nop
 800f17a:	e7fd      	b.n	800f178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f17c:	4b19      	ldr	r3, [pc, #100]	@ (800f1e4 <xTimerGenericCommand+0x98>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d02a      	beq.n	800f1da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	2b05      	cmp	r3, #5
 800f194:	dc18      	bgt.n	800f1c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f196:	f7ff fdad 	bl	800ecf4 <xTaskGetSchedulerState>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d109      	bne.n	800f1b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1a0:	4b10      	ldr	r3, [pc, #64]	@ (800f1e4 <xTimerGenericCommand+0x98>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	f107 0110 	add.w	r1, r7, #16
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ac:	f7fe f9aa 	bl	800d504 <xQueueGenericSend>
 800f1b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1b2:	e012      	b.n	800f1da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e4 <xTimerGenericCommand+0x98>)
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	f107 0110 	add.w	r1, r7, #16
 800f1bc:	2300      	movs	r3, #0
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f7fe f9a0 	bl	800d504 <xQueueGenericSend>
 800f1c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1c6:	e008      	b.n	800f1da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1c8:	4b06      	ldr	r3, [pc, #24]	@ (800f1e4 <xTimerGenericCommand+0x98>)
 800f1ca:	6818      	ldr	r0, [r3, #0]
 800f1cc:	f107 0110 	add.w	r1, r7, #16
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	f7fe fa98 	bl	800d708 <xQueueGenericSendFromISR>
 800f1d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3728      	adds	r7, #40	@ 0x28
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	20002e6c 	.word	0x20002e6c

0800f1e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b088      	sub	sp, #32
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f2:	4b23      	ldr	r3, [pc, #140]	@ (800f280 <prvProcessExpiredTimer+0x98>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f7fd fc95 	bl	800cb30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d023      	beq.n	800f25c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	699a      	ldr	r2, [r3, #24]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	18d1      	adds	r1, r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	6978      	ldr	r0, [r7, #20]
 800f222:	f000 f8d5 	bl	800f3d0 <prvInsertTimerInActiveList>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d020      	beq.n	800f26e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f22c:	2300      	movs	r3, #0
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	2300      	movs	r3, #0
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	2100      	movs	r1, #0
 800f236:	6978      	ldr	r0, [r7, #20]
 800f238:	f7ff ff88 	bl	800f14c <xTimerGenericCommand>
 800f23c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d114      	bne.n	800f26e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	60fb      	str	r3, [r7, #12]
}
 800f256:	bf00      	nop
 800f258:	bf00      	nop
 800f25a:	e7fd      	b.n	800f258 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f262:	f023 0301 	bic.w	r3, r3, #1
 800f266:	b2da      	uxtb	r2, r3
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	6978      	ldr	r0, [r7, #20]
 800f274:	4798      	blx	r3
}
 800f276:	bf00      	nop
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	20002e64 	.word	0x20002e64

0800f284 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f28c:	f107 0308 	add.w	r3, r7, #8
 800f290:	4618      	mov	r0, r3
 800f292:	f000 f859 	bl	800f348 <prvGetNextExpireTime>
 800f296:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	4619      	mov	r1, r3
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f000 f805 	bl	800f2ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2a2:	f000 f8d7 	bl	800f454 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2a6:	bf00      	nop
 800f2a8:	e7f0      	b.n	800f28c <prvTimerTask+0x8>
	...

0800f2ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2b6:	f7ff f919 	bl	800e4ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ba:	f107 0308 	add.w	r3, r7, #8
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 f866 	bl	800f390 <prvSampleTimeNow>
 800f2c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d130      	bne.n	800f32e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10a      	bne.n	800f2e8 <prvProcessTimerOrBlockTask+0x3c>
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d806      	bhi.n	800f2e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2da:	f7ff f915 	bl	800e508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2de:	68f9      	ldr	r1, [r7, #12]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff ff81 	bl	800f1e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2e6:	e024      	b.n	800f332 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d008      	beq.n	800f300 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2ee:	4b13      	ldr	r3, [pc, #76]	@ (800f33c <prvProcessTimerOrBlockTask+0x90>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d101      	bne.n	800f2fc <prvProcessTimerOrBlockTask+0x50>
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e000      	b.n	800f2fe <prvProcessTimerOrBlockTask+0x52>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f300:	4b0f      	ldr	r3, [pc, #60]	@ (800f340 <prvProcessTimerOrBlockTask+0x94>)
 800f302:	6818      	ldr	r0, [r3, #0]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	683a      	ldr	r2, [r7, #0]
 800f30c:	4619      	mov	r1, r3
 800f30e:	f7fe fe2b 	bl	800df68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f312:	f7ff f8f9 	bl	800e508 <xTaskResumeAll>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10a      	bne.n	800f332 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f31c:	4b09      	ldr	r3, [pc, #36]	@ (800f344 <prvProcessTimerOrBlockTask+0x98>)
 800f31e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	f3bf 8f4f 	dsb	sy
 800f328:	f3bf 8f6f 	isb	sy
}
 800f32c:	e001      	b.n	800f332 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f32e:	f7ff f8eb 	bl	800e508 <xTaskResumeAll>
}
 800f332:	bf00      	nop
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	20002e68 	.word	0x20002e68
 800f340:	20002e6c 	.word	0x20002e6c
 800f344:	e000ed04 	.word	0xe000ed04

0800f348 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f350:	4b0e      	ldr	r3, [pc, #56]	@ (800f38c <prvGetNextExpireTime+0x44>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <prvGetNextExpireTime+0x16>
 800f35a:	2201      	movs	r2, #1
 800f35c:	e000      	b.n	800f360 <prvGetNextExpireTime+0x18>
 800f35e:	2200      	movs	r2, #0
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d105      	bne.n	800f378 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f36c:	4b07      	ldr	r3, [pc, #28]	@ (800f38c <prvGetNextExpireTime+0x44>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]
 800f376:	e001      	b.n	800f37c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f378:	2300      	movs	r3, #0
 800f37a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f37c:	68fb      	ldr	r3, [r7, #12]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	20002e64 	.word	0x20002e64

0800f390 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f398:	f7ff f954 	bl	800e644 <xTaskGetTickCount>
 800f39c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f39e:	4b0b      	ldr	r3, [pc, #44]	@ (800f3cc <prvSampleTimeNow+0x3c>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d205      	bcs.n	800f3b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3a8:	f000 f93a 	bl	800f620 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	601a      	str	r2, [r3, #0]
 800f3b2:	e002      	b.n	800f3ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3ba:	4a04      	ldr	r2, [pc, #16]	@ (800f3cc <prvSampleTimeNow+0x3c>)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	20002e74 	.word	0x20002e74

0800f3d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d812      	bhi.n	800f41c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	1ad2      	subs	r2, r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	429a      	cmp	r2, r3
 800f402:	d302      	bcc.n	800f40a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f404:	2301      	movs	r3, #1
 800f406:	617b      	str	r3, [r7, #20]
 800f408:	e01b      	b.n	800f442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f40a:	4b10      	ldr	r3, [pc, #64]	@ (800f44c <prvInsertTimerInActiveList+0x7c>)
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	3304      	adds	r3, #4
 800f412:	4619      	mov	r1, r3
 800f414:	4610      	mov	r0, r2
 800f416:	f7fd fb52 	bl	800cabe <vListInsert>
 800f41a:	e012      	b.n	800f442 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	429a      	cmp	r2, r3
 800f422:	d206      	bcs.n	800f432 <prvInsertTimerInActiveList+0x62>
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d302      	bcc.n	800f432 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f42c:	2301      	movs	r3, #1
 800f42e:	617b      	str	r3, [r7, #20]
 800f430:	e007      	b.n	800f442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f432:	4b07      	ldr	r3, [pc, #28]	@ (800f450 <prvInsertTimerInActiveList+0x80>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3304      	adds	r3, #4
 800f43a:	4619      	mov	r1, r3
 800f43c:	4610      	mov	r0, r2
 800f43e:	f7fd fb3e 	bl	800cabe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f442:	697b      	ldr	r3, [r7, #20]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	20002e68 	.word	0x20002e68
 800f450:	20002e64 	.word	0x20002e64

0800f454 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b08e      	sub	sp, #56	@ 0x38
 800f458:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f45a:	e0ce      	b.n	800f5fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	da19      	bge.n	800f496 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f462:	1d3b      	adds	r3, r7, #4
 800f464:	3304      	adds	r3, #4
 800f466:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10b      	bne.n	800f486 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	61fb      	str	r3, [r7, #28]
}
 800f480:	bf00      	nop
 800f482:	bf00      	nop
 800f484:	e7fd      	b.n	800f482 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f48c:	6850      	ldr	r0, [r2, #4]
 800f48e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f490:	6892      	ldr	r2, [r2, #8]
 800f492:	4611      	mov	r1, r2
 800f494:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f2c0 80ae 	blt.w	800f5fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a4:	695b      	ldr	r3, [r3, #20]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d004      	beq.n	800f4b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd fb3e 	bl	800cb30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4b4:	463b      	mov	r3, r7
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff ff6a 	bl	800f390 <prvSampleTimeNow>
 800f4bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b09      	cmp	r3, #9
 800f4c2:	f200 8097 	bhi.w	800f5f4 <prvProcessReceivedCommands+0x1a0>
 800f4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4cc <prvProcessReceivedCommands+0x78>)
 800f4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4cc:	0800f4f5 	.word	0x0800f4f5
 800f4d0:	0800f4f5 	.word	0x0800f4f5
 800f4d4:	0800f4f5 	.word	0x0800f4f5
 800f4d8:	0800f56b 	.word	0x0800f56b
 800f4dc:	0800f57f 	.word	0x0800f57f
 800f4e0:	0800f5cb 	.word	0x0800f5cb
 800f4e4:	0800f4f5 	.word	0x0800f4f5
 800f4e8:	0800f4f5 	.word	0x0800f4f5
 800f4ec:	0800f56b 	.word	0x0800f56b
 800f4f0:	0800f57f 	.word	0x0800f57f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4fa:	f043 0301 	orr.w	r3, r3, #1
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50a:	699b      	ldr	r3, [r3, #24]
 800f50c:	18d1      	adds	r1, r2, r3
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f514:	f7ff ff5c 	bl	800f3d0 <prvInsertTimerInActiveList>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d06c      	beq.n	800f5f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f52c:	f003 0304 	and.w	r3, r3, #4
 800f530:	2b00      	cmp	r3, #0
 800f532:	d061      	beq.n	800f5f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	441a      	add	r2, r3
 800f53c:	2300      	movs	r3, #0
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	2300      	movs	r3, #0
 800f542:	2100      	movs	r1, #0
 800f544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f546:	f7ff fe01 	bl	800f14c <xTimerGenericCommand>
 800f54a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f54c:	6a3b      	ldr	r3, [r7, #32]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d152      	bne.n	800f5f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f556:	f383 8811 	msr	BASEPRI, r3
 800f55a:	f3bf 8f6f 	isb	sy
 800f55e:	f3bf 8f4f 	dsb	sy
 800f562:	61bb      	str	r3, [r7, #24]
}
 800f564:	bf00      	nop
 800f566:	bf00      	nop
 800f568:	e7fd      	b.n	800f566 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f570:	f023 0301 	bic.w	r3, r3, #1
 800f574:	b2da      	uxtb	r2, r3
 800f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f578:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f57c:	e03d      	b.n	800f5fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f584:	f043 0301 	orr.w	r3, r3, #1
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f590:	68ba      	ldr	r2, [r7, #8]
 800f592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f594:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10b      	bne.n	800f5b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	617b      	str	r3, [r7, #20]
}
 800f5b0:	bf00      	nop
 800f5b2:	bf00      	nop
 800f5b4:	e7fd      	b.n	800f5b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b8:	699a      	ldr	r2, [r3, #24]
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5bc:	18d1      	adds	r1, r2, r3
 800f5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5c4:	f7ff ff04 	bl	800f3d0 <prvInsertTimerInActiveList>
					break;
 800f5c8:	e017      	b.n	800f5fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5d0:	f003 0302 	and.w	r3, r3, #2
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d103      	bne.n	800f5e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f5d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5da:	f7fd f8ff 	bl	800c7dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5de:	e00c      	b.n	800f5fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5e6:	f023 0301 	bic.w	r3, r3, #1
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f5f2:	e002      	b.n	800f5fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f5f4:	bf00      	nop
 800f5f6:	e000      	b.n	800f5fa <prvProcessReceivedCommands+0x1a6>
					break;
 800f5f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5fa:	4b08      	ldr	r3, [pc, #32]	@ (800f61c <prvProcessReceivedCommands+0x1c8>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	1d39      	adds	r1, r7, #4
 800f600:	2200      	movs	r2, #0
 800f602:	4618      	mov	r0, r3
 800f604:	f7fe f91e 	bl	800d844 <xQueueReceive>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f47f af26 	bne.w	800f45c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f610:	bf00      	nop
 800f612:	bf00      	nop
 800f614:	3730      	adds	r7, #48	@ 0x30
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20002e6c 	.word	0x20002e6c

0800f620 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b088      	sub	sp, #32
 800f624:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f626:	e049      	b.n	800f6bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f628:	4b2e      	ldr	r3, [pc, #184]	@ (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f632:	4b2c      	ldr	r3, [pc, #176]	@ (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	3304      	adds	r3, #4
 800f640:	4618      	mov	r0, r3
 800f642:	f7fd fa75 	bl	800cb30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f654:	f003 0304 	and.w	r3, r3, #4
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d02f      	beq.n	800f6bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	4413      	add	r3, r2
 800f664:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d90e      	bls.n	800f68c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f67a:	4b1a      	ldr	r3, [pc, #104]	@ (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	3304      	adds	r3, #4
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f7fd fa1a 	bl	800cabe <vListInsert>
 800f68a:	e017      	b.n	800f6bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f68c:	2300      	movs	r3, #0
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	2300      	movs	r3, #0
 800f692:	693a      	ldr	r2, [r7, #16]
 800f694:	2100      	movs	r1, #0
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7ff fd58 	bl	800f14c <xTimerGenericCommand>
 800f69c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10b      	bne.n	800f6bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a8:	f383 8811 	msr	BASEPRI, r3
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	603b      	str	r3, [r7, #0]
}
 800f6b6:	bf00      	nop
 800f6b8:	bf00      	nop
 800f6ba:	e7fd      	b.n	800f6b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6bc:	4b09      	ldr	r3, [pc, #36]	@ (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1b0      	bne.n	800f628 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6c6:	4b07      	ldr	r3, [pc, #28]	@ (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6cc:	4b06      	ldr	r3, [pc, #24]	@ (800f6e8 <prvSwitchTimerLists+0xc8>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a04      	ldr	r2, [pc, #16]	@ (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f6d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6d4:	4a04      	ldr	r2, [pc, #16]	@ (800f6e8 <prvSwitchTimerLists+0xc8>)
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	6013      	str	r3, [r2, #0]
}
 800f6da:	bf00      	nop
 800f6dc:	3718      	adds	r7, #24
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	20002e64 	.word	0x20002e64
 800f6e8:	20002e68 	.word	0x20002e68

0800f6ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6f2:	f7fd fb79 	bl	800cde8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6f6:	4b15      	ldr	r3, [pc, #84]	@ (800f74c <prvCheckForValidListAndQueue+0x60>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d120      	bne.n	800f740 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6fe:	4814      	ldr	r0, [pc, #80]	@ (800f750 <prvCheckForValidListAndQueue+0x64>)
 800f700:	f7fd f98c 	bl	800ca1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f704:	4813      	ldr	r0, [pc, #76]	@ (800f754 <prvCheckForValidListAndQueue+0x68>)
 800f706:	f7fd f989 	bl	800ca1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f70a:	4b13      	ldr	r3, [pc, #76]	@ (800f758 <prvCheckForValidListAndQueue+0x6c>)
 800f70c:	4a10      	ldr	r2, [pc, #64]	@ (800f750 <prvCheckForValidListAndQueue+0x64>)
 800f70e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f710:	4b12      	ldr	r3, [pc, #72]	@ (800f75c <prvCheckForValidListAndQueue+0x70>)
 800f712:	4a10      	ldr	r2, [pc, #64]	@ (800f754 <prvCheckForValidListAndQueue+0x68>)
 800f714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f716:	2300      	movs	r3, #0
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	4b11      	ldr	r3, [pc, #68]	@ (800f760 <prvCheckForValidListAndQueue+0x74>)
 800f71c:	4a11      	ldr	r2, [pc, #68]	@ (800f764 <prvCheckForValidListAndQueue+0x78>)
 800f71e:	2110      	movs	r1, #16
 800f720:	200a      	movs	r0, #10
 800f722:	f7fd fced 	bl	800d100 <xQueueGenericCreateStatic>
 800f726:	4603      	mov	r3, r0
 800f728:	4a08      	ldr	r2, [pc, #32]	@ (800f74c <prvCheckForValidListAndQueue+0x60>)
 800f72a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f72c:	4b07      	ldr	r3, [pc, #28]	@ (800f74c <prvCheckForValidListAndQueue+0x60>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d005      	beq.n	800f740 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f734:	4b05      	ldr	r3, [pc, #20]	@ (800f74c <prvCheckForValidListAndQueue+0x60>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	490b      	ldr	r1, [pc, #44]	@ (800f768 <prvCheckForValidListAndQueue+0x7c>)
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fbc0 	bl	800dec0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f740:	f7fd fb84 	bl	800ce4c <vPortExitCritical>
}
 800f744:	bf00      	nop
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	20002e6c 	.word	0x20002e6c
 800f750:	20002e3c 	.word	0x20002e3c
 800f754:	20002e50 	.word	0x20002e50
 800f758:	20002e64 	.word	0x20002e64
 800f75c:	20002e68 	.word	0x20002e68
 800f760:	20002f18 	.word	0x20002f18
 800f764:	20002e78 	.word	0x20002e78
 800f768:	08015578 	.word	0x08015578

0800f76c <malloc>:
 800f76c:	4b02      	ldr	r3, [pc, #8]	@ (800f778 <malloc+0xc>)
 800f76e:	4601      	mov	r1, r0
 800f770:	6818      	ldr	r0, [r3, #0]
 800f772:	f000 b803 	b.w	800f77c <_malloc_r>
 800f776:	bf00      	nop
 800f778:	20000434 	.word	0x20000434

0800f77c <_malloc_r>:
 800f77c:	f101 030b 	add.w	r3, r1, #11
 800f780:	2b16      	cmp	r3, #22
 800f782:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f786:	4605      	mov	r5, r0
 800f788:	d906      	bls.n	800f798 <_malloc_r+0x1c>
 800f78a:	f033 0707 	bics.w	r7, r3, #7
 800f78e:	d504      	bpl.n	800f79a <_malloc_r+0x1e>
 800f790:	230c      	movs	r3, #12
 800f792:	602b      	str	r3, [r5, #0]
 800f794:	2400      	movs	r4, #0
 800f796:	e1a3      	b.n	800fae0 <_malloc_r+0x364>
 800f798:	2710      	movs	r7, #16
 800f79a:	42b9      	cmp	r1, r7
 800f79c:	d8f8      	bhi.n	800f790 <_malloc_r+0x14>
 800f79e:	4628      	mov	r0, r5
 800f7a0:	f000 fa26 	bl	800fbf0 <__malloc_lock>
 800f7a4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800f7a8:	4eaf      	ldr	r6, [pc, #700]	@ (800fa68 <_malloc_r+0x2ec>)
 800f7aa:	d237      	bcs.n	800f81c <_malloc_r+0xa0>
 800f7ac:	f107 0208 	add.w	r2, r7, #8
 800f7b0:	4432      	add	r2, r6
 800f7b2:	f1a2 0108 	sub.w	r1, r2, #8
 800f7b6:	6854      	ldr	r4, [r2, #4]
 800f7b8:	428c      	cmp	r4, r1
 800f7ba:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800f7be:	d102      	bne.n	800f7c6 <_malloc_r+0x4a>
 800f7c0:	68d4      	ldr	r4, [r2, #12]
 800f7c2:	42a2      	cmp	r2, r4
 800f7c4:	d010      	beq.n	800f7e8 <_malloc_r+0x6c>
 800f7c6:	6863      	ldr	r3, [r4, #4]
 800f7c8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800f7cc:	f023 0303 	bic.w	r3, r3, #3
 800f7d0:	60ca      	str	r2, [r1, #12]
 800f7d2:	4423      	add	r3, r4
 800f7d4:	6091      	str	r1, [r2, #8]
 800f7d6:	685a      	ldr	r2, [r3, #4]
 800f7d8:	f042 0201 	orr.w	r2, r2, #1
 800f7dc:	605a      	str	r2, [r3, #4]
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f000 fa0c 	bl	800fbfc <__malloc_unlock>
 800f7e4:	3408      	adds	r4, #8
 800f7e6:	e17b      	b.n	800fae0 <_malloc_r+0x364>
 800f7e8:	3302      	adds	r3, #2
 800f7ea:	6934      	ldr	r4, [r6, #16]
 800f7ec:	499f      	ldr	r1, [pc, #636]	@ (800fa6c <_malloc_r+0x2f0>)
 800f7ee:	428c      	cmp	r4, r1
 800f7f0:	d077      	beq.n	800f8e2 <_malloc_r+0x166>
 800f7f2:	6862      	ldr	r2, [r4, #4]
 800f7f4:	f022 0c03 	bic.w	ip, r2, #3
 800f7f8:	ebac 0007 	sub.w	r0, ip, r7
 800f7fc:	280f      	cmp	r0, #15
 800f7fe:	dd48      	ble.n	800f892 <_malloc_r+0x116>
 800f800:	19e2      	adds	r2, r4, r7
 800f802:	f040 0301 	orr.w	r3, r0, #1
 800f806:	f047 0701 	orr.w	r7, r7, #1
 800f80a:	6067      	str	r7, [r4, #4]
 800f80c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800f810:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800f814:	6053      	str	r3, [r2, #4]
 800f816:	f844 000c 	str.w	r0, [r4, ip]
 800f81a:	e7e0      	b.n	800f7de <_malloc_r+0x62>
 800f81c:	0a7b      	lsrs	r3, r7, #9
 800f81e:	d02a      	beq.n	800f876 <_malloc_r+0xfa>
 800f820:	2b04      	cmp	r3, #4
 800f822:	d812      	bhi.n	800f84a <_malloc_r+0xce>
 800f824:	09bb      	lsrs	r3, r7, #6
 800f826:	3338      	adds	r3, #56	@ 0x38
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800f82e:	f1a2 0c08 	sub.w	ip, r2, #8
 800f832:	6854      	ldr	r4, [r2, #4]
 800f834:	4564      	cmp	r4, ip
 800f836:	d006      	beq.n	800f846 <_malloc_r+0xca>
 800f838:	6862      	ldr	r2, [r4, #4]
 800f83a:	f022 0203 	bic.w	r2, r2, #3
 800f83e:	1bd0      	subs	r0, r2, r7
 800f840:	280f      	cmp	r0, #15
 800f842:	dd1c      	ble.n	800f87e <_malloc_r+0x102>
 800f844:	3b01      	subs	r3, #1
 800f846:	3301      	adds	r3, #1
 800f848:	e7cf      	b.n	800f7ea <_malloc_r+0x6e>
 800f84a:	2b14      	cmp	r3, #20
 800f84c:	d801      	bhi.n	800f852 <_malloc_r+0xd6>
 800f84e:	335b      	adds	r3, #91	@ 0x5b
 800f850:	e7ea      	b.n	800f828 <_malloc_r+0xac>
 800f852:	2b54      	cmp	r3, #84	@ 0x54
 800f854:	d802      	bhi.n	800f85c <_malloc_r+0xe0>
 800f856:	0b3b      	lsrs	r3, r7, #12
 800f858:	336e      	adds	r3, #110	@ 0x6e
 800f85a:	e7e5      	b.n	800f828 <_malloc_r+0xac>
 800f85c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800f860:	d802      	bhi.n	800f868 <_malloc_r+0xec>
 800f862:	0bfb      	lsrs	r3, r7, #15
 800f864:	3377      	adds	r3, #119	@ 0x77
 800f866:	e7df      	b.n	800f828 <_malloc_r+0xac>
 800f868:	f240 5254 	movw	r2, #1364	@ 0x554
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d804      	bhi.n	800f87a <_malloc_r+0xfe>
 800f870:	0cbb      	lsrs	r3, r7, #18
 800f872:	337c      	adds	r3, #124	@ 0x7c
 800f874:	e7d8      	b.n	800f828 <_malloc_r+0xac>
 800f876:	233f      	movs	r3, #63	@ 0x3f
 800f878:	e7d6      	b.n	800f828 <_malloc_r+0xac>
 800f87a:	237e      	movs	r3, #126	@ 0x7e
 800f87c:	e7d4      	b.n	800f828 <_malloc_r+0xac>
 800f87e:	2800      	cmp	r0, #0
 800f880:	68e1      	ldr	r1, [r4, #12]
 800f882:	db04      	blt.n	800f88e <_malloc_r+0x112>
 800f884:	68a3      	ldr	r3, [r4, #8]
 800f886:	60d9      	str	r1, [r3, #12]
 800f888:	608b      	str	r3, [r1, #8]
 800f88a:	18a3      	adds	r3, r4, r2
 800f88c:	e7a3      	b.n	800f7d6 <_malloc_r+0x5a>
 800f88e:	460c      	mov	r4, r1
 800f890:	e7d0      	b.n	800f834 <_malloc_r+0xb8>
 800f892:	2800      	cmp	r0, #0
 800f894:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800f898:	db07      	blt.n	800f8aa <_malloc_r+0x12e>
 800f89a:	44a4      	add	ip, r4
 800f89c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f8a0:	f043 0301 	orr.w	r3, r3, #1
 800f8a4:	f8cc 3004 	str.w	r3, [ip, #4]
 800f8a8:	e799      	b.n	800f7de <_malloc_r+0x62>
 800f8aa:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800f8ae:	6870      	ldr	r0, [r6, #4]
 800f8b0:	f080 8095 	bcs.w	800f9de <_malloc_r+0x262>
 800f8b4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800f8b8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800f8bc:	f04f 0c01 	mov.w	ip, #1
 800f8c0:	3201      	adds	r2, #1
 800f8c2:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f8c6:	ea4c 0000 	orr.w	r0, ip, r0
 800f8ca:	6070      	str	r0, [r6, #4]
 800f8cc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800f8d0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800f8d4:	3808      	subs	r0, #8
 800f8d6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800f8da:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800f8de:	f8cc 400c 	str.w	r4, [ip, #12]
 800f8e2:	1098      	asrs	r0, r3, #2
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	4082      	lsls	r2, r0
 800f8e8:	6870      	ldr	r0, [r6, #4]
 800f8ea:	4290      	cmp	r0, r2
 800f8ec:	d326      	bcc.n	800f93c <_malloc_r+0x1c0>
 800f8ee:	4210      	tst	r0, r2
 800f8f0:	d106      	bne.n	800f900 <_malloc_r+0x184>
 800f8f2:	f023 0303 	bic.w	r3, r3, #3
 800f8f6:	0052      	lsls	r2, r2, #1
 800f8f8:	4210      	tst	r0, r2
 800f8fa:	f103 0304 	add.w	r3, r3, #4
 800f8fe:	d0fa      	beq.n	800f8f6 <_malloc_r+0x17a>
 800f900:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800f904:	46c1      	mov	r9, r8
 800f906:	469e      	mov	lr, r3
 800f908:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800f90c:	454c      	cmp	r4, r9
 800f90e:	f040 80b9 	bne.w	800fa84 <_malloc_r+0x308>
 800f912:	f10e 0e01 	add.w	lr, lr, #1
 800f916:	f01e 0f03 	tst.w	lr, #3
 800f91a:	f109 0908 	add.w	r9, r9, #8
 800f91e:	d1f3      	bne.n	800f908 <_malloc_r+0x18c>
 800f920:	0798      	lsls	r0, r3, #30
 800f922:	f040 80e3 	bne.w	800faec <_malloc_r+0x370>
 800f926:	6873      	ldr	r3, [r6, #4]
 800f928:	ea23 0302 	bic.w	r3, r3, r2
 800f92c:	6073      	str	r3, [r6, #4]
 800f92e:	6870      	ldr	r0, [r6, #4]
 800f930:	0052      	lsls	r2, r2, #1
 800f932:	4290      	cmp	r0, r2
 800f934:	d302      	bcc.n	800f93c <_malloc_r+0x1c0>
 800f936:	2a00      	cmp	r2, #0
 800f938:	f040 80e5 	bne.w	800fb06 <_malloc_r+0x38a>
 800f93c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800f940:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f944:	f023 0903 	bic.w	r9, r3, #3
 800f948:	45b9      	cmp	r9, r7
 800f94a:	d304      	bcc.n	800f956 <_malloc_r+0x1da>
 800f94c:	eba9 0207 	sub.w	r2, r9, r7
 800f950:	2a0f      	cmp	r2, #15
 800f952:	f300 8141 	bgt.w	800fbd8 <_malloc_r+0x45c>
 800f956:	4b46      	ldr	r3, [pc, #280]	@ (800fa70 <_malloc_r+0x2f4>)
 800f958:	6819      	ldr	r1, [r3, #0]
 800f95a:	3110      	adds	r1, #16
 800f95c:	4439      	add	r1, r7
 800f95e:	2008      	movs	r0, #8
 800f960:	9101      	str	r1, [sp, #4]
 800f962:	f000 fc37 	bl	80101d4 <sysconf>
 800f966:	4a43      	ldr	r2, [pc, #268]	@ (800fa74 <_malloc_r+0x2f8>)
 800f968:	9901      	ldr	r1, [sp, #4]
 800f96a:	6813      	ldr	r3, [r2, #0]
 800f96c:	3301      	adds	r3, #1
 800f96e:	bf1f      	itttt	ne
 800f970:	f101 31ff 	addne.w	r1, r1, #4294967295
 800f974:	1809      	addne	r1, r1, r0
 800f976:	4243      	negne	r3, r0
 800f978:	4019      	andne	r1, r3
 800f97a:	4680      	mov	r8, r0
 800f97c:	4628      	mov	r0, r5
 800f97e:	9101      	str	r1, [sp, #4]
 800f980:	f000 fbd8 	bl	8010134 <_sbrk_r>
 800f984:	1c42      	adds	r2, r0, #1
 800f986:	eb0a 0b09 	add.w	fp, sl, r9
 800f98a:	4604      	mov	r4, r0
 800f98c:	f000 80f7 	beq.w	800fb7e <_malloc_r+0x402>
 800f990:	4583      	cmp	fp, r0
 800f992:	9901      	ldr	r1, [sp, #4]
 800f994:	4a37      	ldr	r2, [pc, #220]	@ (800fa74 <_malloc_r+0x2f8>)
 800f996:	d902      	bls.n	800f99e <_malloc_r+0x222>
 800f998:	45b2      	cmp	sl, r6
 800f99a:	f040 80f0 	bne.w	800fb7e <_malloc_r+0x402>
 800f99e:	4b36      	ldr	r3, [pc, #216]	@ (800fa78 <_malloc_r+0x2fc>)
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	45a3      	cmp	fp, r4
 800f9a4:	eb00 0e01 	add.w	lr, r0, r1
 800f9a8:	f8c3 e000 	str.w	lr, [r3]
 800f9ac:	f108 3cff 	add.w	ip, r8, #4294967295
 800f9b0:	f040 80ab 	bne.w	800fb0a <_malloc_r+0x38e>
 800f9b4:	ea1b 0f0c 	tst.w	fp, ip
 800f9b8:	f040 80a7 	bne.w	800fb0a <_malloc_r+0x38e>
 800f9bc:	68b2      	ldr	r2, [r6, #8]
 800f9be:	4449      	add	r1, r9
 800f9c0:	f041 0101 	orr.w	r1, r1, #1
 800f9c4:	6051      	str	r1, [r2, #4]
 800f9c6:	4a2d      	ldr	r2, [pc, #180]	@ (800fa7c <_malloc_r+0x300>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	6811      	ldr	r1, [r2, #0]
 800f9cc:	428b      	cmp	r3, r1
 800f9ce:	bf88      	it	hi
 800f9d0:	6013      	strhi	r3, [r2, #0]
 800f9d2:	4a2b      	ldr	r2, [pc, #172]	@ (800fa80 <_malloc_r+0x304>)
 800f9d4:	6811      	ldr	r1, [r2, #0]
 800f9d6:	428b      	cmp	r3, r1
 800f9d8:	bf88      	it	hi
 800f9da:	6013      	strhi	r3, [r2, #0]
 800f9dc:	e0cf      	b.n	800fb7e <_malloc_r+0x402>
 800f9de:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800f9e2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800f9e6:	d218      	bcs.n	800fa1a <_malloc_r+0x29e>
 800f9e8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800f9ec:	3238      	adds	r2, #56	@ 0x38
 800f9ee:	f102 0e01 	add.w	lr, r2, #1
 800f9f2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800f9f6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800f9fa:	45f0      	cmp	r8, lr
 800f9fc:	d12b      	bne.n	800fa56 <_malloc_r+0x2da>
 800f9fe:	1092      	asrs	r2, r2, #2
 800fa00:	f04f 0c01 	mov.w	ip, #1
 800fa04:	fa0c f202 	lsl.w	r2, ip, r2
 800fa08:	4302      	orrs	r2, r0
 800fa0a:	6072      	str	r2, [r6, #4]
 800fa0c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800fa10:	f8c8 4008 	str.w	r4, [r8, #8]
 800fa14:	f8ce 400c 	str.w	r4, [lr, #12]
 800fa18:	e763      	b.n	800f8e2 <_malloc_r+0x166>
 800fa1a:	2a14      	cmp	r2, #20
 800fa1c:	d801      	bhi.n	800fa22 <_malloc_r+0x2a6>
 800fa1e:	325b      	adds	r2, #91	@ 0x5b
 800fa20:	e7e5      	b.n	800f9ee <_malloc_r+0x272>
 800fa22:	2a54      	cmp	r2, #84	@ 0x54
 800fa24:	d803      	bhi.n	800fa2e <_malloc_r+0x2b2>
 800fa26:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800fa2a:	326e      	adds	r2, #110	@ 0x6e
 800fa2c:	e7df      	b.n	800f9ee <_malloc_r+0x272>
 800fa2e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800fa32:	d803      	bhi.n	800fa3c <_malloc_r+0x2c0>
 800fa34:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800fa38:	3277      	adds	r2, #119	@ 0x77
 800fa3a:	e7d8      	b.n	800f9ee <_malloc_r+0x272>
 800fa3c:	f240 5e54 	movw	lr, #1364	@ 0x554
 800fa40:	4572      	cmp	r2, lr
 800fa42:	bf9a      	itte	ls
 800fa44:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800fa48:	327c      	addls	r2, #124	@ 0x7c
 800fa4a:	227e      	movhi	r2, #126	@ 0x7e
 800fa4c:	e7cf      	b.n	800f9ee <_malloc_r+0x272>
 800fa4e:	f8de e008 	ldr.w	lr, [lr, #8]
 800fa52:	45f0      	cmp	r8, lr
 800fa54:	d005      	beq.n	800fa62 <_malloc_r+0x2e6>
 800fa56:	f8de 2004 	ldr.w	r2, [lr, #4]
 800fa5a:	f022 0203 	bic.w	r2, r2, #3
 800fa5e:	4562      	cmp	r2, ip
 800fa60:	d8f5      	bhi.n	800fa4e <_malloc_r+0x2d2>
 800fa62:	f8de 800c 	ldr.w	r8, [lr, #12]
 800fa66:	e7d1      	b.n	800fa0c <_malloc_r+0x290>
 800fa68:	20000020 	.word	0x20000020
 800fa6c:	20000028 	.word	0x20000028
 800fa70:	20002f98 	.word	0x20002f98
 800fa74:	20000018 	.word	0x20000018
 800fa78:	20002f68 	.word	0x20002f68
 800fa7c:	20002f94 	.word	0x20002f94
 800fa80:	20002f90 	.word	0x20002f90
 800fa84:	6860      	ldr	r0, [r4, #4]
 800fa86:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fa8a:	f020 0003 	bic.w	r0, r0, #3
 800fa8e:	eba0 0a07 	sub.w	sl, r0, r7
 800fa92:	f1ba 0f0f 	cmp.w	sl, #15
 800fa96:	dd12      	ble.n	800fabe <_malloc_r+0x342>
 800fa98:	68a3      	ldr	r3, [r4, #8]
 800fa9a:	19e2      	adds	r2, r4, r7
 800fa9c:	f047 0701 	orr.w	r7, r7, #1
 800faa0:	6067      	str	r7, [r4, #4]
 800faa2:	f8c3 c00c 	str.w	ip, [r3, #12]
 800faa6:	f8cc 3008 	str.w	r3, [ip, #8]
 800faaa:	f04a 0301 	orr.w	r3, sl, #1
 800faae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800fab2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800fab6:	6053      	str	r3, [r2, #4]
 800fab8:	f844 a000 	str.w	sl, [r4, r0]
 800fabc:	e68f      	b.n	800f7de <_malloc_r+0x62>
 800fabe:	f1ba 0f00 	cmp.w	sl, #0
 800fac2:	db11      	blt.n	800fae8 <_malloc_r+0x36c>
 800fac4:	4420      	add	r0, r4
 800fac6:	6843      	ldr	r3, [r0, #4]
 800fac8:	f043 0301 	orr.w	r3, r3, #1
 800facc:	6043      	str	r3, [r0, #4]
 800face:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800fad2:	4628      	mov	r0, r5
 800fad4:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fad8:	f8cc 3008 	str.w	r3, [ip, #8]
 800fadc:	f000 f88e 	bl	800fbfc <__malloc_unlock>
 800fae0:	4620      	mov	r0, r4
 800fae2:	b003      	add	sp, #12
 800fae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae8:	4664      	mov	r4, ip
 800faea:	e70f      	b.n	800f90c <_malloc_r+0x190>
 800faec:	f858 0908 	ldr.w	r0, [r8], #-8
 800faf0:	4540      	cmp	r0, r8
 800faf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800faf6:	f43f af13 	beq.w	800f920 <_malloc_r+0x1a4>
 800fafa:	e718      	b.n	800f92e <_malloc_r+0x1b2>
 800fafc:	3304      	adds	r3, #4
 800fafe:	0052      	lsls	r2, r2, #1
 800fb00:	4210      	tst	r0, r2
 800fb02:	d0fb      	beq.n	800fafc <_malloc_r+0x380>
 800fb04:	e6fc      	b.n	800f900 <_malloc_r+0x184>
 800fb06:	4673      	mov	r3, lr
 800fb08:	e7fa      	b.n	800fb00 <_malloc_r+0x384>
 800fb0a:	6810      	ldr	r0, [r2, #0]
 800fb0c:	3001      	adds	r0, #1
 800fb0e:	bf1b      	ittet	ne
 800fb10:	eba4 0b0b 	subne.w	fp, r4, fp
 800fb14:	eb0b 020e 	addne.w	r2, fp, lr
 800fb18:	6014      	streq	r4, [r2, #0]
 800fb1a:	601a      	strne	r2, [r3, #0]
 800fb1c:	f014 0b07 	ands.w	fp, r4, #7
 800fb20:	bf1a      	itte	ne
 800fb22:	f1cb 0008 	rsbne	r0, fp, #8
 800fb26:	1824      	addne	r4, r4, r0
 800fb28:	4658      	moveq	r0, fp
 800fb2a:	1862      	adds	r2, r4, r1
 800fb2c:	ea02 010c 	and.w	r1, r2, ip
 800fb30:	4480      	add	r8, r0
 800fb32:	eba8 0801 	sub.w	r8, r8, r1
 800fb36:	ea08 080c 	and.w	r8, r8, ip
 800fb3a:	4641      	mov	r1, r8
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	9201      	str	r2, [sp, #4]
 800fb40:	f000 faf8 	bl	8010134 <_sbrk_r>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	9a01      	ldr	r2, [sp, #4]
 800fb48:	4b28      	ldr	r3, [pc, #160]	@ (800fbec <_malloc_r+0x470>)
 800fb4a:	d107      	bne.n	800fb5c <_malloc_r+0x3e0>
 800fb4c:	f1bb 0f00 	cmp.w	fp, #0
 800fb50:	d023      	beq.n	800fb9a <_malloc_r+0x41e>
 800fb52:	f1ab 0008 	sub.w	r0, fp, #8
 800fb56:	4410      	add	r0, r2
 800fb58:	f04f 0800 	mov.w	r8, #0
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	60b4      	str	r4, [r6, #8]
 800fb60:	1b00      	subs	r0, r0, r4
 800fb62:	4440      	add	r0, r8
 800fb64:	4442      	add	r2, r8
 800fb66:	f040 0001 	orr.w	r0, r0, #1
 800fb6a:	45b2      	cmp	sl, r6
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	6060      	str	r0, [r4, #4]
 800fb70:	f43f af29 	beq.w	800f9c6 <_malloc_r+0x24a>
 800fb74:	f1b9 0f0f 	cmp.w	r9, #15
 800fb78:	d812      	bhi.n	800fba0 <_malloc_r+0x424>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	6063      	str	r3, [r4, #4]
 800fb7e:	68b3      	ldr	r3, [r6, #8]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	f023 0303 	bic.w	r3, r3, #3
 800fb86:	42bb      	cmp	r3, r7
 800fb88:	eba3 0207 	sub.w	r2, r3, r7
 800fb8c:	d301      	bcc.n	800fb92 <_malloc_r+0x416>
 800fb8e:	2a0f      	cmp	r2, #15
 800fb90:	dc22      	bgt.n	800fbd8 <_malloc_r+0x45c>
 800fb92:	4628      	mov	r0, r5
 800fb94:	f000 f832 	bl	800fbfc <__malloc_unlock>
 800fb98:	e5fc      	b.n	800f794 <_malloc_r+0x18>
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	46d8      	mov	r8, fp
 800fb9e:	e7dd      	b.n	800fb5c <_malloc_r+0x3e0>
 800fba0:	f8da 2004 	ldr.w	r2, [sl, #4]
 800fba4:	f1a9 090c 	sub.w	r9, r9, #12
 800fba8:	f029 0907 	bic.w	r9, r9, #7
 800fbac:	f002 0201 	and.w	r2, r2, #1
 800fbb0:	ea42 0209 	orr.w	r2, r2, r9
 800fbb4:	f8ca 2004 	str.w	r2, [sl, #4]
 800fbb8:	2105      	movs	r1, #5
 800fbba:	eb0a 0209 	add.w	r2, sl, r9
 800fbbe:	f1b9 0f0f 	cmp.w	r9, #15
 800fbc2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800fbc6:	f67f aefe 	bls.w	800f9c6 <_malloc_r+0x24a>
 800fbca:	f10a 0108 	add.w	r1, sl, #8
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f000 fb80 	bl	80102d4 <_free_r>
 800fbd4:	4b05      	ldr	r3, [pc, #20]	@ (800fbec <_malloc_r+0x470>)
 800fbd6:	e6f6      	b.n	800f9c6 <_malloc_r+0x24a>
 800fbd8:	68b4      	ldr	r4, [r6, #8]
 800fbda:	f047 0301 	orr.w	r3, r7, #1
 800fbde:	4427      	add	r7, r4
 800fbe0:	f042 0201 	orr.w	r2, r2, #1
 800fbe4:	6063      	str	r3, [r4, #4]
 800fbe6:	60b7      	str	r7, [r6, #8]
 800fbe8:	607a      	str	r2, [r7, #4]
 800fbea:	e5f8      	b.n	800f7de <_malloc_r+0x62>
 800fbec:	20002f68 	.word	0x20002f68

0800fbf0 <__malloc_lock>:
 800fbf0:	4801      	ldr	r0, [pc, #4]	@ (800fbf8 <__malloc_lock+0x8>)
 800fbf2:	f000 baed 	b.w	80101d0 <__retarget_lock_acquire_recursive>
 800fbf6:	bf00      	nop
 800fbf8:	200030dc 	.word	0x200030dc

0800fbfc <__malloc_unlock>:
 800fbfc:	4801      	ldr	r0, [pc, #4]	@ (800fc04 <__malloc_unlock+0x8>)
 800fbfe:	f000 bae8 	b.w	80101d2 <__retarget_lock_release_recursive>
 800fc02:	bf00      	nop
 800fc04:	200030dc 	.word	0x200030dc

0800fc08 <std>:
 800fc08:	2300      	movs	r3, #0
 800fc0a:	b510      	push	{r4, lr}
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	e9c0 3300 	strd	r3, r3, [r0]
 800fc12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc16:	6083      	str	r3, [r0, #8]
 800fc18:	8181      	strh	r1, [r0, #12]
 800fc1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fc1c:	81c2      	strh	r2, [r0, #14]
 800fc1e:	6183      	str	r3, [r0, #24]
 800fc20:	4619      	mov	r1, r3
 800fc22:	2208      	movs	r2, #8
 800fc24:	305c      	adds	r0, #92	@ 0x5c
 800fc26:	f000 fa1c 	bl	8010062 <memset>
 800fc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fc60 <std+0x58>)
 800fc2c:	6223      	str	r3, [r4, #32]
 800fc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc64 <std+0x5c>)
 800fc30:	6263      	str	r3, [r4, #36]	@ 0x24
 800fc32:	4b0d      	ldr	r3, [pc, #52]	@ (800fc68 <std+0x60>)
 800fc34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fc36:	4b0d      	ldr	r3, [pc, #52]	@ (800fc6c <std+0x64>)
 800fc38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fc70 <std+0x68>)
 800fc3c:	61e4      	str	r4, [r4, #28]
 800fc3e:	429c      	cmp	r4, r3
 800fc40:	d006      	beq.n	800fc50 <std+0x48>
 800fc42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fc46:	4294      	cmp	r4, r2
 800fc48:	d002      	beq.n	800fc50 <std+0x48>
 800fc4a:	33d0      	adds	r3, #208	@ 0xd0
 800fc4c:	429c      	cmp	r4, r3
 800fc4e:	d105      	bne.n	800fc5c <std+0x54>
 800fc50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc58:	f000 bab8 	b.w	80101cc <__retarget_lock_init_recursive>
 800fc5c:	bd10      	pop	{r4, pc}
 800fc5e:	bf00      	nop
 800fc60:	0800ffdd 	.word	0x0800ffdd
 800fc64:	0800ffff 	.word	0x0800ffff
 800fc68:	08010037 	.word	0x08010037
 800fc6c:	0801005b 	.word	0x0801005b
 800fc70:	20002f9c 	.word	0x20002f9c

0800fc74 <stdio_exit_handler>:
 800fc74:	4a02      	ldr	r2, [pc, #8]	@ (800fc80 <stdio_exit_handler+0xc>)
 800fc76:	4903      	ldr	r1, [pc, #12]	@ (800fc84 <stdio_exit_handler+0x10>)
 800fc78:	4803      	ldr	r0, [pc, #12]	@ (800fc88 <stdio_exit_handler+0x14>)
 800fc7a:	f000 b869 	b.w	800fd50 <_fwalk_sglue>
 800fc7e:	bf00      	nop
 800fc80:	20000428 	.word	0x20000428
 800fc84:	08011815 	.word	0x08011815
 800fc88:	20000438 	.word	0x20000438

0800fc8c <cleanup_stdio>:
 800fc8c:	6841      	ldr	r1, [r0, #4]
 800fc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fcc0 <cleanup_stdio+0x34>)
 800fc90:	4299      	cmp	r1, r3
 800fc92:	b510      	push	{r4, lr}
 800fc94:	4604      	mov	r4, r0
 800fc96:	d001      	beq.n	800fc9c <cleanup_stdio+0x10>
 800fc98:	f001 fdbc 	bl	8011814 <_fclose_r>
 800fc9c:	68a1      	ldr	r1, [r4, #8]
 800fc9e:	4b09      	ldr	r3, [pc, #36]	@ (800fcc4 <cleanup_stdio+0x38>)
 800fca0:	4299      	cmp	r1, r3
 800fca2:	d002      	beq.n	800fcaa <cleanup_stdio+0x1e>
 800fca4:	4620      	mov	r0, r4
 800fca6:	f001 fdb5 	bl	8011814 <_fclose_r>
 800fcaa:	68e1      	ldr	r1, [r4, #12]
 800fcac:	4b06      	ldr	r3, [pc, #24]	@ (800fcc8 <cleanup_stdio+0x3c>)
 800fcae:	4299      	cmp	r1, r3
 800fcb0:	d004      	beq.n	800fcbc <cleanup_stdio+0x30>
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcb8:	f001 bdac 	b.w	8011814 <_fclose_r>
 800fcbc:	bd10      	pop	{r4, pc}
 800fcbe:	bf00      	nop
 800fcc0:	20002f9c 	.word	0x20002f9c
 800fcc4:	20003004 	.word	0x20003004
 800fcc8:	2000306c 	.word	0x2000306c

0800fccc <global_stdio_init.part.0>:
 800fccc:	b510      	push	{r4, lr}
 800fcce:	4b0b      	ldr	r3, [pc, #44]	@ (800fcfc <global_stdio_init.part.0+0x30>)
 800fcd0:	4c0b      	ldr	r4, [pc, #44]	@ (800fd00 <global_stdio_init.part.0+0x34>)
 800fcd2:	4a0c      	ldr	r2, [pc, #48]	@ (800fd04 <global_stdio_init.part.0+0x38>)
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	2200      	movs	r2, #0
 800fcda:	2104      	movs	r1, #4
 800fcdc:	f7ff ff94 	bl	800fc08 <std>
 800fce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fce4:	2201      	movs	r2, #1
 800fce6:	2109      	movs	r1, #9
 800fce8:	f7ff ff8e 	bl	800fc08 <std>
 800fcec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fcf0:	2202      	movs	r2, #2
 800fcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf6:	2112      	movs	r1, #18
 800fcf8:	f7ff bf86 	b.w	800fc08 <std>
 800fcfc:	200030d4 	.word	0x200030d4
 800fd00:	20002f9c 	.word	0x20002f9c
 800fd04:	0800fc75 	.word	0x0800fc75

0800fd08 <__sfp_lock_acquire>:
 800fd08:	4801      	ldr	r0, [pc, #4]	@ (800fd10 <__sfp_lock_acquire+0x8>)
 800fd0a:	f000 ba61 	b.w	80101d0 <__retarget_lock_acquire_recursive>
 800fd0e:	bf00      	nop
 800fd10:	200030de 	.word	0x200030de

0800fd14 <__sfp_lock_release>:
 800fd14:	4801      	ldr	r0, [pc, #4]	@ (800fd1c <__sfp_lock_release+0x8>)
 800fd16:	f000 ba5c 	b.w	80101d2 <__retarget_lock_release_recursive>
 800fd1a:	bf00      	nop
 800fd1c:	200030de 	.word	0x200030de

0800fd20 <__sinit>:
 800fd20:	b510      	push	{r4, lr}
 800fd22:	4604      	mov	r4, r0
 800fd24:	f7ff fff0 	bl	800fd08 <__sfp_lock_acquire>
 800fd28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd2a:	b11b      	cbz	r3, 800fd34 <__sinit+0x14>
 800fd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd30:	f7ff bff0 	b.w	800fd14 <__sfp_lock_release>
 800fd34:	4b04      	ldr	r3, [pc, #16]	@ (800fd48 <__sinit+0x28>)
 800fd36:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd38:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <__sinit+0x2c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1f5      	bne.n	800fd2c <__sinit+0xc>
 800fd40:	f7ff ffc4 	bl	800fccc <global_stdio_init.part.0>
 800fd44:	e7f2      	b.n	800fd2c <__sinit+0xc>
 800fd46:	bf00      	nop
 800fd48:	0800fc8d 	.word	0x0800fc8d
 800fd4c:	200030d4 	.word	0x200030d4

0800fd50 <_fwalk_sglue>:
 800fd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd54:	4607      	mov	r7, r0
 800fd56:	4688      	mov	r8, r1
 800fd58:	4614      	mov	r4, r2
 800fd5a:	2600      	movs	r6, #0
 800fd5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd60:	f1b9 0901 	subs.w	r9, r9, #1
 800fd64:	d505      	bpl.n	800fd72 <_fwalk_sglue+0x22>
 800fd66:	6824      	ldr	r4, [r4, #0]
 800fd68:	2c00      	cmp	r4, #0
 800fd6a:	d1f7      	bne.n	800fd5c <_fwalk_sglue+0xc>
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd72:	89ab      	ldrh	r3, [r5, #12]
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d907      	bls.n	800fd88 <_fwalk_sglue+0x38>
 800fd78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	d003      	beq.n	800fd88 <_fwalk_sglue+0x38>
 800fd80:	4629      	mov	r1, r5
 800fd82:	4638      	mov	r0, r7
 800fd84:	47c0      	blx	r8
 800fd86:	4306      	orrs	r6, r0
 800fd88:	3568      	adds	r5, #104	@ 0x68
 800fd8a:	e7e9      	b.n	800fd60 <_fwalk_sglue+0x10>

0800fd8c <_puts_r>:
 800fd8c:	b530      	push	{r4, r5, lr}
 800fd8e:	4605      	mov	r5, r0
 800fd90:	b089      	sub	sp, #36	@ 0x24
 800fd92:	4608      	mov	r0, r1
 800fd94:	460c      	mov	r4, r1
 800fd96:	f7f0 fa43 	bl	8000220 <strlen>
 800fd9a:	4b1e      	ldr	r3, [pc, #120]	@ (800fe14 <_puts_r+0x88>)
 800fd9c:	9306      	str	r3, [sp, #24]
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800fda4:	9307      	str	r3, [sp, #28]
 800fda6:	4418      	add	r0, r3
 800fda8:	ab04      	add	r3, sp, #16
 800fdaa:	9301      	str	r3, [sp, #4]
 800fdac:	2302      	movs	r3, #2
 800fdae:	9302      	str	r3, [sp, #8]
 800fdb0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800fdb2:	68ac      	ldr	r4, [r5, #8]
 800fdb4:	9003      	str	r0, [sp, #12]
 800fdb6:	b913      	cbnz	r3, 800fdbe <_puts_r+0x32>
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f7ff ffb1 	bl	800fd20 <__sinit>
 800fdbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fdc0:	07db      	lsls	r3, r3, #31
 800fdc2:	d405      	bmi.n	800fdd0 <_puts_r+0x44>
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	0598      	lsls	r0, r3, #22
 800fdc8:	d402      	bmi.n	800fdd0 <_puts_r+0x44>
 800fdca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdcc:	f000 fa00 	bl	80101d0 <__retarget_lock_acquire_recursive>
 800fdd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdd4:	0499      	lsls	r1, r3, #18
 800fdd6:	d406      	bmi.n	800fde6 <_puts_r+0x5a>
 800fdd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fddc:	81a3      	strh	r3, [r4, #12]
 800fdde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fde0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fde4:	6663      	str	r3, [r4, #100]	@ 0x64
 800fde6:	4628      	mov	r0, r5
 800fde8:	aa01      	add	r2, sp, #4
 800fdea:	4621      	mov	r1, r4
 800fdec:	f001 fe16 	bl	8011a1c <__sfvwrite_r>
 800fdf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	bf0c      	ite	eq
 800fdf6:	250a      	moveq	r5, #10
 800fdf8:	f04f 35ff 	movne.w	r5, #4294967295
 800fdfc:	07da      	lsls	r2, r3, #31
 800fdfe:	d405      	bmi.n	800fe0c <_puts_r+0x80>
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	059b      	lsls	r3, r3, #22
 800fe04:	d402      	bmi.n	800fe0c <_puts_r+0x80>
 800fe06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe08:	f000 f9e3 	bl	80101d2 <__retarget_lock_release_recursive>
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	b009      	add	sp, #36	@ 0x24
 800fe10:	bd30      	pop	{r4, r5, pc}
 800fe12:	bf00      	nop
 800fe14:	080159b3 	.word	0x080159b3

0800fe18 <puts>:
 800fe18:	4b02      	ldr	r3, [pc, #8]	@ (800fe24 <puts+0xc>)
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	6818      	ldr	r0, [r3, #0]
 800fe1e:	f7ff bfb5 	b.w	800fd8c <_puts_r>
 800fe22:	bf00      	nop
 800fe24:	20000434 	.word	0x20000434

0800fe28 <setvbuf>:
 800fe28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe2c:	461d      	mov	r5, r3
 800fe2e:	4b5a      	ldr	r3, [pc, #360]	@ (800ff98 <setvbuf+0x170>)
 800fe30:	681f      	ldr	r7, [r3, #0]
 800fe32:	4604      	mov	r4, r0
 800fe34:	460e      	mov	r6, r1
 800fe36:	4690      	mov	r8, r2
 800fe38:	b127      	cbz	r7, 800fe44 <setvbuf+0x1c>
 800fe3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe3c:	b913      	cbnz	r3, 800fe44 <setvbuf+0x1c>
 800fe3e:	4638      	mov	r0, r7
 800fe40:	f7ff ff6e 	bl	800fd20 <__sinit>
 800fe44:	f1b8 0f02 	cmp.w	r8, #2
 800fe48:	d006      	beq.n	800fe58 <setvbuf+0x30>
 800fe4a:	f1b8 0f01 	cmp.w	r8, #1
 800fe4e:	f200 80a0 	bhi.w	800ff92 <setvbuf+0x16a>
 800fe52:	2d00      	cmp	r5, #0
 800fe54:	f2c0 809d 	blt.w	800ff92 <setvbuf+0x16a>
 800fe58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe5a:	07d9      	lsls	r1, r3, #31
 800fe5c:	d405      	bmi.n	800fe6a <setvbuf+0x42>
 800fe5e:	89a3      	ldrh	r3, [r4, #12]
 800fe60:	059a      	lsls	r2, r3, #22
 800fe62:	d402      	bmi.n	800fe6a <setvbuf+0x42>
 800fe64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe66:	f000 f9b3 	bl	80101d0 <__retarget_lock_acquire_recursive>
 800fe6a:	4621      	mov	r1, r4
 800fe6c:	4638      	mov	r0, r7
 800fe6e:	f001 fdaf 	bl	80119d0 <_fflush_r>
 800fe72:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fe74:	b141      	cbz	r1, 800fe88 <setvbuf+0x60>
 800fe76:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800fe7a:	4299      	cmp	r1, r3
 800fe7c:	d002      	beq.n	800fe84 <setvbuf+0x5c>
 800fe7e:	4638      	mov	r0, r7
 800fe80:	f000 fa28 	bl	80102d4 <_free_r>
 800fe84:	2300      	movs	r3, #0
 800fe86:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe88:	2300      	movs	r3, #0
 800fe8a:	61a3      	str	r3, [r4, #24]
 800fe8c:	6063      	str	r3, [r4, #4]
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	061b      	lsls	r3, r3, #24
 800fe92:	d503      	bpl.n	800fe9c <setvbuf+0x74>
 800fe94:	6921      	ldr	r1, [r4, #16]
 800fe96:	4638      	mov	r0, r7
 800fe98:	f000 fa1c 	bl	80102d4 <_free_r>
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800fea2:	f023 0303 	bic.w	r3, r3, #3
 800fea6:	f1b8 0f02 	cmp.w	r8, #2
 800feaa:	81a3      	strh	r3, [r4, #12]
 800feac:	d067      	beq.n	800ff7e <setvbuf+0x156>
 800feae:	ab01      	add	r3, sp, #4
 800feb0:	466a      	mov	r2, sp
 800feb2:	4621      	mov	r1, r4
 800feb4:	4638      	mov	r0, r7
 800feb6:	f001 fefd 	bl	8011cb4 <__swhatbuf_r>
 800feba:	89a3      	ldrh	r3, [r4, #12]
 800febc:	4318      	orrs	r0, r3
 800febe:	81a0      	strh	r0, [r4, #12]
 800fec0:	bb2d      	cbnz	r5, 800ff0e <setvbuf+0xe6>
 800fec2:	9d00      	ldr	r5, [sp, #0]
 800fec4:	4628      	mov	r0, r5
 800fec6:	f7ff fc51 	bl	800f76c <malloc>
 800feca:	4606      	mov	r6, r0
 800fecc:	2800      	cmp	r0, #0
 800fece:	d158      	bne.n	800ff82 <setvbuf+0x15a>
 800fed0:	f8dd 9000 	ldr.w	r9, [sp]
 800fed4:	45a9      	cmp	r9, r5
 800fed6:	d146      	bne.n	800ff66 <setvbuf+0x13e>
 800fed8:	f04f 35ff 	mov.w	r5, #4294967295
 800fedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fee0:	f043 0202 	orr.w	r2, r3, #2
 800fee4:	81a2      	strh	r2, [r4, #12]
 800fee6:	2200      	movs	r2, #0
 800fee8:	60a2      	str	r2, [r4, #8]
 800feea:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800feee:	6022      	str	r2, [r4, #0]
 800fef0:	6122      	str	r2, [r4, #16]
 800fef2:	2201      	movs	r2, #1
 800fef4:	6162      	str	r2, [r4, #20]
 800fef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fef8:	07d6      	lsls	r6, r2, #31
 800fefa:	d404      	bmi.n	800ff06 <setvbuf+0xde>
 800fefc:	0598      	lsls	r0, r3, #22
 800fefe:	d402      	bmi.n	800ff06 <setvbuf+0xde>
 800ff00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff02:	f000 f966 	bl	80101d2 <__retarget_lock_release_recursive>
 800ff06:	4628      	mov	r0, r5
 800ff08:	b003      	add	sp, #12
 800ff0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff0e:	2e00      	cmp	r6, #0
 800ff10:	d0d8      	beq.n	800fec4 <setvbuf+0x9c>
 800ff12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff14:	b913      	cbnz	r3, 800ff1c <setvbuf+0xf4>
 800ff16:	4638      	mov	r0, r7
 800ff18:	f7ff ff02 	bl	800fd20 <__sinit>
 800ff1c:	9b00      	ldr	r3, [sp, #0]
 800ff1e:	6026      	str	r6, [r4, #0]
 800ff20:	42ab      	cmp	r3, r5
 800ff22:	bf1e      	ittt	ne
 800ff24:	89a3      	ldrhne	r3, [r4, #12]
 800ff26:	f443 6300 	orrne.w	r3, r3, #2048	@ 0x800
 800ff2a:	81a3      	strhne	r3, [r4, #12]
 800ff2c:	f1b8 0f01 	cmp.w	r8, #1
 800ff30:	bf02      	ittt	eq
 800ff32:	89a3      	ldrheq	r3, [r4, #12]
 800ff34:	f043 0301 	orreq.w	r3, r3, #1
 800ff38:	81a3      	strheq	r3, [r4, #12]
 800ff3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff3e:	f013 0208 	ands.w	r2, r3, #8
 800ff42:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ff46:	d01e      	beq.n	800ff86 <setvbuf+0x15e>
 800ff48:	07d9      	lsls	r1, r3, #31
 800ff4a:	bf41      	itttt	mi
 800ff4c:	2200      	movmi	r2, #0
 800ff4e:	426d      	negmi	r5, r5
 800ff50:	60a2      	strmi	r2, [r4, #8]
 800ff52:	61a5      	strmi	r5, [r4, #24]
 800ff54:	bf58      	it	pl
 800ff56:	60a5      	strpl	r5, [r4, #8]
 800ff58:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff5a:	07d2      	lsls	r2, r2, #31
 800ff5c:	d401      	bmi.n	800ff62 <setvbuf+0x13a>
 800ff5e:	059b      	lsls	r3, r3, #22
 800ff60:	d513      	bpl.n	800ff8a <setvbuf+0x162>
 800ff62:	2500      	movs	r5, #0
 800ff64:	e7cf      	b.n	800ff06 <setvbuf+0xde>
 800ff66:	4648      	mov	r0, r9
 800ff68:	f7ff fc00 	bl	800f76c <malloc>
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d0b2      	beq.n	800fed8 <setvbuf+0xb0>
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff78:	81a3      	strh	r3, [r4, #12]
 800ff7a:	464d      	mov	r5, r9
 800ff7c:	e7c9      	b.n	800ff12 <setvbuf+0xea>
 800ff7e:	2500      	movs	r5, #0
 800ff80:	e7ac      	b.n	800fedc <setvbuf+0xb4>
 800ff82:	46a9      	mov	r9, r5
 800ff84:	e7f5      	b.n	800ff72 <setvbuf+0x14a>
 800ff86:	60a2      	str	r2, [r4, #8]
 800ff88:	e7e6      	b.n	800ff58 <setvbuf+0x130>
 800ff8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff8c:	f000 f921 	bl	80101d2 <__retarget_lock_release_recursive>
 800ff90:	e7e7      	b.n	800ff62 <setvbuf+0x13a>
 800ff92:	f04f 35ff 	mov.w	r5, #4294967295
 800ff96:	e7b6      	b.n	800ff06 <setvbuf+0xde>
 800ff98:	20000434 	.word	0x20000434

0800ff9c <sprintf>:
 800ff9c:	b40e      	push	{r1, r2, r3}
 800ff9e:	b500      	push	{lr}
 800ffa0:	b09c      	sub	sp, #112	@ 0x70
 800ffa2:	ab1d      	add	r3, sp, #116	@ 0x74
 800ffa4:	9002      	str	r0, [sp, #8]
 800ffa6:	9006      	str	r0, [sp, #24]
 800ffa8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ffac:	4809      	ldr	r0, [pc, #36]	@ (800ffd4 <sprintf+0x38>)
 800ffae:	9107      	str	r1, [sp, #28]
 800ffb0:	9104      	str	r1, [sp, #16]
 800ffb2:	4909      	ldr	r1, [pc, #36]	@ (800ffd8 <sprintf+0x3c>)
 800ffb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffb8:	9105      	str	r1, [sp, #20]
 800ffba:	6800      	ldr	r0, [r0, #0]
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	a902      	add	r1, sp, #8
 800ffc0:	f000 fa4a 	bl	8010458 <_svfprintf_r>
 800ffc4:	9b02      	ldr	r3, [sp, #8]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	b01c      	add	sp, #112	@ 0x70
 800ffcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffd0:	b003      	add	sp, #12
 800ffd2:	4770      	bx	lr
 800ffd4:	20000434 	.word	0x20000434
 800ffd8:	ffff0208 	.word	0xffff0208

0800ffdc <__sread>:
 800ffdc:	b510      	push	{r4, lr}
 800ffde:	460c      	mov	r4, r1
 800ffe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe4:	f000 f894 	bl	8010110 <_read_r>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	bfab      	itete	ge
 800ffec:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800ffee:	89a3      	ldrhlt	r3, [r4, #12]
 800fff0:	181b      	addge	r3, r3, r0
 800fff2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fff6:	bfac      	ite	ge
 800fff8:	6523      	strge	r3, [r4, #80]	@ 0x50
 800fffa:	81a3      	strhlt	r3, [r4, #12]
 800fffc:	bd10      	pop	{r4, pc}

0800fffe <__swrite>:
 800fffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010002:	461f      	mov	r7, r3
 8010004:	898b      	ldrh	r3, [r1, #12]
 8010006:	05db      	lsls	r3, r3, #23
 8010008:	4605      	mov	r5, r0
 801000a:	460c      	mov	r4, r1
 801000c:	4616      	mov	r6, r2
 801000e:	d505      	bpl.n	801001c <__swrite+0x1e>
 8010010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010014:	2302      	movs	r3, #2
 8010016:	2200      	movs	r2, #0
 8010018:	f000 f868 	bl	80100ec <_lseek_r>
 801001c:	89a3      	ldrh	r3, [r4, #12]
 801001e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010022:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010026:	81a3      	strh	r3, [r4, #12]
 8010028:	4632      	mov	r2, r6
 801002a:	463b      	mov	r3, r7
 801002c:	4628      	mov	r0, r5
 801002e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010032:	f000 b88f 	b.w	8010154 <_write_r>

08010036 <__sseek>:
 8010036:	b510      	push	{r4, lr}
 8010038:	460c      	mov	r4, r1
 801003a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801003e:	f000 f855 	bl	80100ec <_lseek_r>
 8010042:	1c43      	adds	r3, r0, #1
 8010044:	89a3      	ldrh	r3, [r4, #12]
 8010046:	bf15      	itete	ne
 8010048:	6520      	strne	r0, [r4, #80]	@ 0x50
 801004a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801004e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010052:	81a3      	strheq	r3, [r4, #12]
 8010054:	bf18      	it	ne
 8010056:	81a3      	strhne	r3, [r4, #12]
 8010058:	bd10      	pop	{r4, pc}

0801005a <__sclose>:
 801005a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801005e:	f000 b809 	b.w	8010074 <_close_r>

08010062 <memset>:
 8010062:	4402      	add	r2, r0
 8010064:	4603      	mov	r3, r0
 8010066:	4293      	cmp	r3, r2
 8010068:	d100      	bne.n	801006c <memset+0xa>
 801006a:	4770      	bx	lr
 801006c:	f803 1b01 	strb.w	r1, [r3], #1
 8010070:	e7f9      	b.n	8010066 <memset+0x4>
	...

08010074 <_close_r>:
 8010074:	b538      	push	{r3, r4, r5, lr}
 8010076:	4d06      	ldr	r5, [pc, #24]	@ (8010090 <_close_r+0x1c>)
 8010078:	2300      	movs	r3, #0
 801007a:	4604      	mov	r4, r0
 801007c:	4608      	mov	r0, r1
 801007e:	602b      	str	r3, [r5, #0]
 8010080:	f7f2 fd86 	bl	8002b90 <_close>
 8010084:	1c43      	adds	r3, r0, #1
 8010086:	d102      	bne.n	801008e <_close_r+0x1a>
 8010088:	682b      	ldr	r3, [r5, #0]
 801008a:	b103      	cbz	r3, 801008e <_close_r+0x1a>
 801008c:	6023      	str	r3, [r4, #0]
 801008e:	bd38      	pop	{r3, r4, r5, pc}
 8010090:	200030d8 	.word	0x200030d8

08010094 <_reclaim_reent>:
 8010094:	4b14      	ldr	r3, [pc, #80]	@ (80100e8 <_reclaim_reent+0x54>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4283      	cmp	r3, r0
 801009a:	b570      	push	{r4, r5, r6, lr}
 801009c:	4604      	mov	r4, r0
 801009e:	d022      	beq.n	80100e6 <_reclaim_reent+0x52>
 80100a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80100a2:	b153      	cbz	r3, 80100ba <_reclaim_reent+0x26>
 80100a4:	2500      	movs	r5, #0
 80100a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80100a8:	5959      	ldr	r1, [r3, r5]
 80100aa:	b9b1      	cbnz	r1, 80100da <_reclaim_reent+0x46>
 80100ac:	3504      	adds	r5, #4
 80100ae:	2d80      	cmp	r5, #128	@ 0x80
 80100b0:	d1f9      	bne.n	80100a6 <_reclaim_reent+0x12>
 80100b2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80100b4:	4620      	mov	r0, r4
 80100b6:	f000 f90d 	bl	80102d4 <_free_r>
 80100ba:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80100bc:	b111      	cbz	r1, 80100c4 <_reclaim_reent+0x30>
 80100be:	4620      	mov	r0, r4
 80100c0:	f000 f908 	bl	80102d4 <_free_r>
 80100c4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80100c6:	b111      	cbz	r1, 80100ce <_reclaim_reent+0x3a>
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 f903 	bl	80102d4 <_free_r>
 80100ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80100d0:	b14b      	cbz	r3, 80100e6 <_reclaim_reent+0x52>
 80100d2:	4620      	mov	r0, r4
 80100d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100d8:	4718      	bx	r3
 80100da:	680e      	ldr	r6, [r1, #0]
 80100dc:	4620      	mov	r0, r4
 80100de:	f000 f8f9 	bl	80102d4 <_free_r>
 80100e2:	4631      	mov	r1, r6
 80100e4:	e7e1      	b.n	80100aa <_reclaim_reent+0x16>
 80100e6:	bd70      	pop	{r4, r5, r6, pc}
 80100e8:	20000434 	.word	0x20000434

080100ec <_lseek_r>:
 80100ec:	b538      	push	{r3, r4, r5, lr}
 80100ee:	4d07      	ldr	r5, [pc, #28]	@ (801010c <_lseek_r+0x20>)
 80100f0:	4604      	mov	r4, r0
 80100f2:	4608      	mov	r0, r1
 80100f4:	4611      	mov	r1, r2
 80100f6:	2200      	movs	r2, #0
 80100f8:	602a      	str	r2, [r5, #0]
 80100fa:	461a      	mov	r2, r3
 80100fc:	f7f2 fd6f 	bl	8002bde <_lseek>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d102      	bne.n	801010a <_lseek_r+0x1e>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	b103      	cbz	r3, 801010a <_lseek_r+0x1e>
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	200030d8 	.word	0x200030d8

08010110 <_read_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	@ (8010130 <_read_r+0x20>)
 8010114:	4604      	mov	r4, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	602a      	str	r2, [r5, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f2 fcfd 	bl	8002b1e <_read>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_read_r+0x1e>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_read_r+0x1e>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	200030d8 	.word	0x200030d8

08010134 <_sbrk_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4d06      	ldr	r5, [pc, #24]	@ (8010150 <_sbrk_r+0x1c>)
 8010138:	2300      	movs	r3, #0
 801013a:	4604      	mov	r4, r0
 801013c:	4608      	mov	r0, r1
 801013e:	602b      	str	r3, [r5, #0]
 8010140:	f7f2 fd5a 	bl	8002bf8 <_sbrk>
 8010144:	1c43      	adds	r3, r0, #1
 8010146:	d102      	bne.n	801014e <_sbrk_r+0x1a>
 8010148:	682b      	ldr	r3, [r5, #0]
 801014a:	b103      	cbz	r3, 801014e <_sbrk_r+0x1a>
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	bd38      	pop	{r3, r4, r5, pc}
 8010150:	200030d8 	.word	0x200030d8

08010154 <_write_r>:
 8010154:	b538      	push	{r3, r4, r5, lr}
 8010156:	4d07      	ldr	r5, [pc, #28]	@ (8010174 <_write_r+0x20>)
 8010158:	4604      	mov	r4, r0
 801015a:	4608      	mov	r0, r1
 801015c:	4611      	mov	r1, r2
 801015e:	2200      	movs	r2, #0
 8010160:	602a      	str	r2, [r5, #0]
 8010162:	461a      	mov	r2, r3
 8010164:	f7f2 fcf8 	bl	8002b58 <_write>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d102      	bne.n	8010172 <_write_r+0x1e>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	b103      	cbz	r3, 8010172 <_write_r+0x1e>
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	200030d8 	.word	0x200030d8

08010178 <__errno>:
 8010178:	4b01      	ldr	r3, [pc, #4]	@ (8010180 <__errno+0x8>)
 801017a:	6818      	ldr	r0, [r3, #0]
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	20000434 	.word	0x20000434

08010184 <__libc_init_array>:
 8010184:	b570      	push	{r4, r5, r6, lr}
 8010186:	4d0d      	ldr	r5, [pc, #52]	@ (80101bc <__libc_init_array+0x38>)
 8010188:	4c0d      	ldr	r4, [pc, #52]	@ (80101c0 <__libc_init_array+0x3c>)
 801018a:	1b64      	subs	r4, r4, r5
 801018c:	10a4      	asrs	r4, r4, #2
 801018e:	2600      	movs	r6, #0
 8010190:	42a6      	cmp	r6, r4
 8010192:	d109      	bne.n	80101a8 <__libc_init_array+0x24>
 8010194:	4d0b      	ldr	r5, [pc, #44]	@ (80101c4 <__libc_init_array+0x40>)
 8010196:	4c0c      	ldr	r4, [pc, #48]	@ (80101c8 <__libc_init_array+0x44>)
 8010198:	f005 f9a2 	bl	80154e0 <_init>
 801019c:	1b64      	subs	r4, r4, r5
 801019e:	10a4      	asrs	r4, r4, #2
 80101a0:	2600      	movs	r6, #0
 80101a2:	42a6      	cmp	r6, r4
 80101a4:	d105      	bne.n	80101b2 <__libc_init_array+0x2e>
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80101ac:	4798      	blx	r3
 80101ae:	3601      	adds	r6, #1
 80101b0:	e7ee      	b.n	8010190 <__libc_init_array+0xc>
 80101b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80101b6:	4798      	blx	r3
 80101b8:	3601      	adds	r6, #1
 80101ba:	e7f2      	b.n	80101a2 <__libc_init_array+0x1e>
 80101bc:	08015bb8 	.word	0x08015bb8
 80101c0:	08015bb8 	.word	0x08015bb8
 80101c4:	08015bb8 	.word	0x08015bb8
 80101c8:	08015bc0 	.word	0x08015bc0

080101cc <__retarget_lock_init_recursive>:
 80101cc:	4770      	bx	lr

080101ce <__retarget_lock_close_recursive>:
 80101ce:	4770      	bx	lr

080101d0 <__retarget_lock_acquire_recursive>:
 80101d0:	4770      	bx	lr

080101d2 <__retarget_lock_release_recursive>:
 80101d2:	4770      	bx	lr

080101d4 <sysconf>:
 80101d4:	2808      	cmp	r0, #8
 80101d6:	b508      	push	{r3, lr}
 80101d8:	d006      	beq.n	80101e8 <sysconf+0x14>
 80101da:	f7ff ffcd 	bl	8010178 <__errno>
 80101de:	2316      	movs	r3, #22
 80101e0:	6003      	str	r3, [r0, #0]
 80101e2:	f04f 30ff 	mov.w	r0, #4294967295
 80101e6:	bd08      	pop	{r3, pc}
 80101e8:	2080      	movs	r0, #128	@ 0x80
 80101ea:	e7fc      	b.n	80101e6 <sysconf+0x12>

080101ec <memcpy>:
 80101ec:	440a      	add	r2, r1
 80101ee:	4291      	cmp	r1, r2
 80101f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80101f4:	d100      	bne.n	80101f8 <memcpy+0xc>
 80101f6:	4770      	bx	lr
 80101f8:	b510      	push	{r4, lr}
 80101fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010202:	4291      	cmp	r1, r2
 8010204:	d1f9      	bne.n	80101fa <memcpy+0xe>
 8010206:	bd10      	pop	{r4, pc}

08010208 <register_fini>:
 8010208:	4b02      	ldr	r3, [pc, #8]	@ (8010214 <register_fini+0xc>)
 801020a:	b113      	cbz	r3, 8010212 <register_fini+0xa>
 801020c:	4802      	ldr	r0, [pc, #8]	@ (8010218 <register_fini+0x10>)
 801020e:	f000 b805 	b.w	801021c <atexit>
 8010212:	4770      	bx	lr
 8010214:	00000000 	.word	0x00000000
 8010218:	08011edd 	.word	0x08011edd

0801021c <atexit>:
 801021c:	2300      	movs	r3, #0
 801021e:	4601      	mov	r1, r0
 8010220:	461a      	mov	r2, r3
 8010222:	4618      	mov	r0, r3
 8010224:	f001 bea4 	b.w	8011f70 <__register_exitproc>

08010228 <_malloc_trim_r>:
 8010228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801022c:	4606      	mov	r6, r0
 801022e:	2008      	movs	r0, #8
 8010230:	4689      	mov	r9, r1
 8010232:	f7ff ffcf 	bl	80101d4 <sysconf>
 8010236:	4f24      	ldr	r7, [pc, #144]	@ (80102c8 <_malloc_trim_r+0xa0>)
 8010238:	4680      	mov	r8, r0
 801023a:	4630      	mov	r0, r6
 801023c:	f7ff fcd8 	bl	800fbf0 <__malloc_lock>
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	685d      	ldr	r5, [r3, #4]
 8010244:	f025 0503 	bic.w	r5, r5, #3
 8010248:	f1a5 0411 	sub.w	r4, r5, #17
 801024c:	eba4 0409 	sub.w	r4, r4, r9
 8010250:	4444      	add	r4, r8
 8010252:	fbb4 f4f8 	udiv	r4, r4, r8
 8010256:	3c01      	subs	r4, #1
 8010258:	fb08 f404 	mul.w	r4, r8, r4
 801025c:	45a0      	cmp	r8, r4
 801025e:	dd05      	ble.n	801026c <_malloc_trim_r+0x44>
 8010260:	4630      	mov	r0, r6
 8010262:	f7ff fccb 	bl	800fbfc <__malloc_unlock>
 8010266:	2000      	movs	r0, #0
 8010268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026c:	2100      	movs	r1, #0
 801026e:	4630      	mov	r0, r6
 8010270:	f7ff ff60 	bl	8010134 <_sbrk_r>
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	442b      	add	r3, r5
 8010278:	4298      	cmp	r0, r3
 801027a:	d1f1      	bne.n	8010260 <_malloc_trim_r+0x38>
 801027c:	4261      	negs	r1, r4
 801027e:	4630      	mov	r0, r6
 8010280:	f7ff ff58 	bl	8010134 <_sbrk_r>
 8010284:	3001      	adds	r0, #1
 8010286:	d110      	bne.n	80102aa <_malloc_trim_r+0x82>
 8010288:	2100      	movs	r1, #0
 801028a:	4630      	mov	r0, r6
 801028c:	f7ff ff52 	bl	8010134 <_sbrk_r>
 8010290:	68ba      	ldr	r2, [r7, #8]
 8010292:	1a83      	subs	r3, r0, r2
 8010294:	2b0f      	cmp	r3, #15
 8010296:	dde3      	ble.n	8010260 <_malloc_trim_r+0x38>
 8010298:	490c      	ldr	r1, [pc, #48]	@ (80102cc <_malloc_trim_r+0xa4>)
 801029a:	6809      	ldr	r1, [r1, #0]
 801029c:	1a40      	subs	r0, r0, r1
 801029e:	490c      	ldr	r1, [pc, #48]	@ (80102d0 <_malloc_trim_r+0xa8>)
 80102a0:	f043 0301 	orr.w	r3, r3, #1
 80102a4:	6008      	str	r0, [r1, #0]
 80102a6:	6053      	str	r3, [r2, #4]
 80102a8:	e7da      	b.n	8010260 <_malloc_trim_r+0x38>
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	4a08      	ldr	r2, [pc, #32]	@ (80102d0 <_malloc_trim_r+0xa8>)
 80102ae:	1b2d      	subs	r5, r5, r4
 80102b0:	f045 0501 	orr.w	r5, r5, #1
 80102b4:	605d      	str	r5, [r3, #4]
 80102b6:	6813      	ldr	r3, [r2, #0]
 80102b8:	4630      	mov	r0, r6
 80102ba:	1b1b      	subs	r3, r3, r4
 80102bc:	6013      	str	r3, [r2, #0]
 80102be:	f7ff fc9d 	bl	800fbfc <__malloc_unlock>
 80102c2:	2001      	movs	r0, #1
 80102c4:	e7d0      	b.n	8010268 <_malloc_trim_r+0x40>
 80102c6:	bf00      	nop
 80102c8:	20000020 	.word	0x20000020
 80102cc:	20000018 	.word	0x20000018
 80102d0:	20002f68 	.word	0x20002f68

080102d4 <_free_r>:
 80102d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d6:	4604      	mov	r4, r0
 80102d8:	460f      	mov	r7, r1
 80102da:	2900      	cmp	r1, #0
 80102dc:	f000 80b1 	beq.w	8010442 <_free_r+0x16e>
 80102e0:	f7ff fc86 	bl	800fbf0 <__malloc_lock>
 80102e4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80102e8:	4d56      	ldr	r5, [pc, #344]	@ (8010444 <_free_r+0x170>)
 80102ea:	f022 0001 	bic.w	r0, r2, #1
 80102ee:	f1a7 0308 	sub.w	r3, r7, #8
 80102f2:	eb03 0c00 	add.w	ip, r3, r0
 80102f6:	68a9      	ldr	r1, [r5, #8]
 80102f8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80102fc:	4561      	cmp	r1, ip
 80102fe:	f026 0603 	bic.w	r6, r6, #3
 8010302:	f002 0201 	and.w	r2, r2, #1
 8010306:	d11b      	bne.n	8010340 <_free_r+0x6c>
 8010308:	4406      	add	r6, r0
 801030a:	b93a      	cbnz	r2, 801031c <_free_r+0x48>
 801030c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8010310:	1a9b      	subs	r3, r3, r2
 8010312:	4416      	add	r6, r2
 8010314:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8010318:	60ca      	str	r2, [r1, #12]
 801031a:	6091      	str	r1, [r2, #8]
 801031c:	f046 0201 	orr.w	r2, r6, #1
 8010320:	605a      	str	r2, [r3, #4]
 8010322:	60ab      	str	r3, [r5, #8]
 8010324:	4b48      	ldr	r3, [pc, #288]	@ (8010448 <_free_r+0x174>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	42b3      	cmp	r3, r6
 801032a:	d804      	bhi.n	8010336 <_free_r+0x62>
 801032c:	4b47      	ldr	r3, [pc, #284]	@ (801044c <_free_r+0x178>)
 801032e:	4620      	mov	r0, r4
 8010330:	6819      	ldr	r1, [r3, #0]
 8010332:	f7ff ff79 	bl	8010228 <_malloc_trim_r>
 8010336:	4620      	mov	r0, r4
 8010338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801033c:	f7ff bc5e 	b.w	800fbfc <__malloc_unlock>
 8010340:	f8cc 6004 	str.w	r6, [ip, #4]
 8010344:	2a00      	cmp	r2, #0
 8010346:	d138      	bne.n	80103ba <_free_r+0xe6>
 8010348:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801034c:	1a5b      	subs	r3, r3, r1
 801034e:	4408      	add	r0, r1
 8010350:	6899      	ldr	r1, [r3, #8]
 8010352:	f105 0708 	add.w	r7, r5, #8
 8010356:	42b9      	cmp	r1, r7
 8010358:	d031      	beq.n	80103be <_free_r+0xea>
 801035a:	68df      	ldr	r7, [r3, #12]
 801035c:	60cf      	str	r7, [r1, #12]
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	eb0c 0106 	add.w	r1, ip, r6
 8010364:	6849      	ldr	r1, [r1, #4]
 8010366:	07c9      	lsls	r1, r1, #31
 8010368:	d40b      	bmi.n	8010382 <_free_r+0xae>
 801036a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801036e:	4430      	add	r0, r6
 8010370:	bb3a      	cbnz	r2, 80103c2 <_free_r+0xee>
 8010372:	4e37      	ldr	r6, [pc, #220]	@ (8010450 <_free_r+0x17c>)
 8010374:	42b1      	cmp	r1, r6
 8010376:	d124      	bne.n	80103c2 <_free_r+0xee>
 8010378:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801037c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010380:	2201      	movs	r2, #1
 8010382:	f040 0101 	orr.w	r1, r0, #1
 8010386:	6059      	str	r1, [r3, #4]
 8010388:	5018      	str	r0, [r3, r0]
 801038a:	2a00      	cmp	r2, #0
 801038c:	d1d3      	bne.n	8010336 <_free_r+0x62>
 801038e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010392:	d21b      	bcs.n	80103cc <_free_r+0xf8>
 8010394:	08c2      	lsrs	r2, r0, #3
 8010396:	2101      	movs	r1, #1
 8010398:	0940      	lsrs	r0, r0, #5
 801039a:	4081      	lsls	r1, r0
 801039c:	6868      	ldr	r0, [r5, #4]
 801039e:	3201      	adds	r2, #1
 80103a0:	4301      	orrs	r1, r0
 80103a2:	6069      	str	r1, [r5, #4]
 80103a4:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80103a8:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80103ac:	3908      	subs	r1, #8
 80103ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80103b2:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80103b6:	60c3      	str	r3, [r0, #12]
 80103b8:	e7bd      	b.n	8010336 <_free_r+0x62>
 80103ba:	2200      	movs	r2, #0
 80103bc:	e7d0      	b.n	8010360 <_free_r+0x8c>
 80103be:	2201      	movs	r2, #1
 80103c0:	e7ce      	b.n	8010360 <_free_r+0x8c>
 80103c2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80103c6:	60ce      	str	r6, [r1, #12]
 80103c8:	60b1      	str	r1, [r6, #8]
 80103ca:	e7da      	b.n	8010382 <_free_r+0xae>
 80103cc:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80103d0:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80103d4:	d214      	bcs.n	8010400 <_free_r+0x12c>
 80103d6:	0982      	lsrs	r2, r0, #6
 80103d8:	3238      	adds	r2, #56	@ 0x38
 80103da:	1c51      	adds	r1, r2, #1
 80103dc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80103e0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80103e4:	428e      	cmp	r6, r1
 80103e6:	d125      	bne.n	8010434 <_free_r+0x160>
 80103e8:	2001      	movs	r0, #1
 80103ea:	1092      	asrs	r2, r2, #2
 80103ec:	fa00 f202 	lsl.w	r2, r0, r2
 80103f0:	6868      	ldr	r0, [r5, #4]
 80103f2:	4302      	orrs	r2, r0
 80103f4:	606a      	str	r2, [r5, #4]
 80103f6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80103fa:	60b3      	str	r3, [r6, #8]
 80103fc:	60cb      	str	r3, [r1, #12]
 80103fe:	e79a      	b.n	8010336 <_free_r+0x62>
 8010400:	2a14      	cmp	r2, #20
 8010402:	d801      	bhi.n	8010408 <_free_r+0x134>
 8010404:	325b      	adds	r2, #91	@ 0x5b
 8010406:	e7e8      	b.n	80103da <_free_r+0x106>
 8010408:	2a54      	cmp	r2, #84	@ 0x54
 801040a:	d802      	bhi.n	8010412 <_free_r+0x13e>
 801040c:	0b02      	lsrs	r2, r0, #12
 801040e:	326e      	adds	r2, #110	@ 0x6e
 8010410:	e7e3      	b.n	80103da <_free_r+0x106>
 8010412:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010416:	d802      	bhi.n	801041e <_free_r+0x14a>
 8010418:	0bc2      	lsrs	r2, r0, #15
 801041a:	3277      	adds	r2, #119	@ 0x77
 801041c:	e7dd      	b.n	80103da <_free_r+0x106>
 801041e:	f240 5154 	movw	r1, #1364	@ 0x554
 8010422:	428a      	cmp	r2, r1
 8010424:	bf9a      	itte	ls
 8010426:	0c82      	lsrls	r2, r0, #18
 8010428:	327c      	addls	r2, #124	@ 0x7c
 801042a:	227e      	movhi	r2, #126	@ 0x7e
 801042c:	e7d5      	b.n	80103da <_free_r+0x106>
 801042e:	6889      	ldr	r1, [r1, #8]
 8010430:	428e      	cmp	r6, r1
 8010432:	d004      	beq.n	801043e <_free_r+0x16a>
 8010434:	684a      	ldr	r2, [r1, #4]
 8010436:	f022 0203 	bic.w	r2, r2, #3
 801043a:	4282      	cmp	r2, r0
 801043c:	d8f7      	bhi.n	801042e <_free_r+0x15a>
 801043e:	68ce      	ldr	r6, [r1, #12]
 8010440:	e7d9      	b.n	80103f6 <_free_r+0x122>
 8010442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010444:	20000020 	.word	0x20000020
 8010448:	2000001c 	.word	0x2000001c
 801044c:	20002f98 	.word	0x20002f98
 8010450:	20000028 	.word	0x20000028
 8010454:	00000000 	.word	0x00000000

08010458 <_svfprintf_r>:
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	b0d3      	sub	sp, #332	@ 0x14c
 801045e:	468b      	mov	fp, r1
 8010460:	4691      	mov	r9, r2
 8010462:	461e      	mov	r6, r3
 8010464:	9003      	str	r0, [sp, #12]
 8010466:	f001 fd13 	bl	8011e90 <_localeconv_r>
 801046a:	6803      	ldr	r3, [r0, #0]
 801046c:	9316      	str	r3, [sp, #88]	@ 0x58
 801046e:	4618      	mov	r0, r3
 8010470:	f7ef fed6 	bl	8000220 <strlen>
 8010474:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010478:	900d      	str	r0, [sp, #52]	@ 0x34
 801047a:	061b      	lsls	r3, r3, #24
 801047c:	d515      	bpl.n	80104aa <_svfprintf_r+0x52>
 801047e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010482:	b993      	cbnz	r3, 80104aa <_svfprintf_r+0x52>
 8010484:	9803      	ldr	r0, [sp, #12]
 8010486:	2140      	movs	r1, #64	@ 0x40
 8010488:	f7ff f978 	bl	800f77c <_malloc_r>
 801048c:	f8cb 0000 	str.w	r0, [fp]
 8010490:	f8cb 0010 	str.w	r0, [fp, #16]
 8010494:	b930      	cbnz	r0, 80104a4 <_svfprintf_r+0x4c>
 8010496:	9a03      	ldr	r2, [sp, #12]
 8010498:	230c      	movs	r3, #12
 801049a:	6013      	str	r3, [r2, #0]
 801049c:	f04f 33ff 	mov.w	r3, #4294967295
 80104a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104a2:	e1f7      	b.n	8010894 <_svfprintf_r+0x43c>
 80104a4:	2340      	movs	r3, #64	@ 0x40
 80104a6:	f8cb 3014 	str.w	r3, [fp, #20]
 80104aa:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 80106f8 <_svfprintf_r+0x2a0>
 80104ae:	2300      	movs	r3, #0
 80104b0:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80104b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80104b8:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80104bc:	ac29      	add	r4, sp, #164	@ 0xa4
 80104be:	9426      	str	r4, [sp, #152]	@ 0x98
 80104c0:	9304      	str	r3, [sp, #16]
 80104c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80104c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80104c6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80104c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104ca:	464b      	mov	r3, r9
 80104cc:	461d      	mov	r5, r3
 80104ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d2:	b10a      	cbz	r2, 80104d8 <_svfprintf_r+0x80>
 80104d4:	2a25      	cmp	r2, #37	@ 0x25
 80104d6:	d1f9      	bne.n	80104cc <_svfprintf_r+0x74>
 80104d8:	ebb5 0709 	subs.w	r7, r5, r9
 80104dc:	d00d      	beq.n	80104fa <_svfprintf_r+0xa2>
 80104de:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80104e0:	443b      	add	r3, r7
 80104e2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80104e4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80104e6:	3301      	adds	r3, #1
 80104e8:	2b07      	cmp	r3, #7
 80104ea:	e9c4 9700 	strd	r9, r7, [r4]
 80104ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 80104f0:	dc75      	bgt.n	80105de <_svfprintf_r+0x186>
 80104f2:	3408      	adds	r4, #8
 80104f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104f6:	443b      	add	r3, r7
 80104f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104fa:	782b      	ldrb	r3, [r5, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f001 8148 	beq.w	8011792 <_svfprintf_r+0x133a>
 8010502:	2200      	movs	r2, #0
 8010504:	1c6b      	adds	r3, r5, #1
 8010506:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801050a:	f04f 38ff 	mov.w	r8, #4294967295
 801050e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010510:	4615      	mov	r5, r2
 8010512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010516:	9206      	str	r2, [sp, #24]
 8010518:	930c      	str	r3, [sp, #48]	@ 0x30
 801051a:	9b06      	ldr	r3, [sp, #24]
 801051c:	3b20      	subs	r3, #32
 801051e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010520:	f200 85a4 	bhi.w	801106c <_svfprintf_r+0xc14>
 8010524:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010528:	05a2009d 	.word	0x05a2009d
 801052c:	00a505a2 	.word	0x00a505a2
 8010530:	05a205a2 	.word	0x05a205a2
 8010534:	008505a2 	.word	0x008505a2
 8010538:	05a205a2 	.word	0x05a205a2
 801053c:	00b200a8 	.word	0x00b200a8
 8010540:	00af05a2 	.word	0x00af05a2
 8010544:	05a200b4 	.word	0x05a200b4
 8010548:	00d100ce 	.word	0x00d100ce
 801054c:	00d100d1 	.word	0x00d100d1
 8010550:	00d100d1 	.word	0x00d100d1
 8010554:	00d100d1 	.word	0x00d100d1
 8010558:	00d100d1 	.word	0x00d100d1
 801055c:	05a205a2 	.word	0x05a205a2
 8010560:	05a205a2 	.word	0x05a205a2
 8010564:	05a205a2 	.word	0x05a205a2
 8010568:	014705a2 	.word	0x014705a2
 801056c:	010805a2 	.word	0x010805a2
 8010570:	0147011b 	.word	0x0147011b
 8010574:	01470147 	.word	0x01470147
 8010578:	05a205a2 	.word	0x05a205a2
 801057c:	05a205a2 	.word	0x05a205a2
 8010580:	05a200e2 	.word	0x05a200e2
 8010584:	049d05a2 	.word	0x049d05a2
 8010588:	05a205a2 	.word	0x05a205a2
 801058c:	04e705a2 	.word	0x04e705a2
 8010590:	050805a2 	.word	0x050805a2
 8010594:	05a205a2 	.word	0x05a205a2
 8010598:	05a2052a 	.word	0x05a2052a
 801059c:	05a205a2 	.word	0x05a205a2
 80105a0:	05a205a2 	.word	0x05a205a2
 80105a4:	05a205a2 	.word	0x05a205a2
 80105a8:	014705a2 	.word	0x014705a2
 80105ac:	010805a2 	.word	0x010805a2
 80105b0:	0147011d 	.word	0x0147011d
 80105b4:	01470147 	.word	0x01470147
 80105b8:	011d00ee 	.word	0x011d00ee
 80105bc:	05a20102 	.word	0x05a20102
 80105c0:	05a200fb 	.word	0x05a200fb
 80105c4:	049f047e 	.word	0x049f047e
 80105c8:	010204d6 	.word	0x010204d6
 80105cc:	04e705a2 	.word	0x04e705a2
 80105d0:	050a009b 	.word	0x050a009b
 80105d4:	05a205a2 	.word	0x05a205a2
 80105d8:	05a20065 	.word	0x05a20065
 80105dc:	009b      	.short	0x009b
 80105de:	9803      	ldr	r0, [sp, #12]
 80105e0:	aa26      	add	r2, sp, #152	@ 0x98
 80105e2:	4659      	mov	r1, fp
 80105e4:	f003 f833 	bl	801364e <__ssprint_r>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	f040 814e 	bne.w	801088a <_svfprintf_r+0x432>
 80105ee:	ac29      	add	r4, sp, #164	@ 0xa4
 80105f0:	e780      	b.n	80104f4 <_svfprintf_r+0x9c>
 80105f2:	4b43      	ldr	r3, [pc, #268]	@ (8010700 <_svfprintf_r+0x2a8>)
 80105f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80105f6:	f015 0320 	ands.w	r3, r5, #32
 80105fa:	f000 84c2 	beq.w	8010f82 <_svfprintf_r+0xb2a>
 80105fe:	3607      	adds	r6, #7
 8010600:	f026 0307 	bic.w	r3, r6, #7
 8010604:	461a      	mov	r2, r3
 8010606:	685f      	ldr	r7, [r3, #4]
 8010608:	f852 6b08 	ldr.w	r6, [r2], #8
 801060c:	9207      	str	r2, [sp, #28]
 801060e:	07eb      	lsls	r3, r5, #31
 8010610:	d50a      	bpl.n	8010628 <_svfprintf_r+0x1d0>
 8010612:	ea56 0307 	orrs.w	r3, r6, r7
 8010616:	d007      	beq.n	8010628 <_svfprintf_r+0x1d0>
 8010618:	2330      	movs	r3, #48	@ 0x30
 801061a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801061e:	9b06      	ldr	r3, [sp, #24]
 8010620:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8010624:	f045 0502 	orr.w	r5, r5, #2
 8010628:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801062c:	2302      	movs	r3, #2
 801062e:	f000 bc28 	b.w	8010e82 <_svfprintf_r+0xa2a>
 8010632:	9803      	ldr	r0, [sp, #12]
 8010634:	f001 fc2c 	bl	8011e90 <_localeconv_r>
 8010638:	6843      	ldr	r3, [r0, #4]
 801063a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801063c:	4618      	mov	r0, r3
 801063e:	f7ef fdef 	bl	8000220 <strlen>
 8010642:	9012      	str	r0, [sp, #72]	@ 0x48
 8010644:	9803      	ldr	r0, [sp, #12]
 8010646:	f001 fc23 	bl	8011e90 <_localeconv_r>
 801064a:	6883      	ldr	r3, [r0, #8]
 801064c:	9309      	str	r3, [sp, #36]	@ 0x24
 801064e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010650:	b12b      	cbz	r3, 801065e <_svfprintf_r+0x206>
 8010652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010654:	b11b      	cbz	r3, 801065e <_svfprintf_r+0x206>
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	b10b      	cbz	r3, 801065e <_svfprintf_r+0x206>
 801065a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801065e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010660:	e757      	b.n	8010512 <_svfprintf_r+0xba>
 8010662:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1f9      	bne.n	801065e <_svfprintf_r+0x206>
 801066a:	2320      	movs	r3, #32
 801066c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010670:	e7f5      	b.n	801065e <_svfprintf_r+0x206>
 8010672:	f045 0501 	orr.w	r5, r5, #1
 8010676:	e7f2      	b.n	801065e <_svfprintf_r+0x206>
 8010678:	f856 3b04 	ldr.w	r3, [r6], #4
 801067c:	930e      	str	r3, [sp, #56]	@ 0x38
 801067e:	2b00      	cmp	r3, #0
 8010680:	daed      	bge.n	801065e <_svfprintf_r+0x206>
 8010682:	425b      	negs	r3, r3
 8010684:	930e      	str	r3, [sp, #56]	@ 0x38
 8010686:	f045 0504 	orr.w	r5, r5, #4
 801068a:	e7e8      	b.n	801065e <_svfprintf_r+0x206>
 801068c:	232b      	movs	r3, #43	@ 0x2b
 801068e:	e7ed      	b.n	801066c <_svfprintf_r+0x214>
 8010690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010696:	9206      	str	r2, [sp, #24]
 8010698:	2a2a      	cmp	r2, #42	@ 0x2a
 801069a:	d10f      	bne.n	80106bc <_svfprintf_r+0x264>
 801069c:	f856 2b04 	ldr.w	r2, [r6], #4
 80106a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80106a2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80106a6:	e7da      	b.n	801065e <_svfprintf_r+0x206>
 80106a8:	fb01 2808 	mla	r8, r1, r8, r2
 80106ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106b0:	9206      	str	r2, [sp, #24]
 80106b2:	9a06      	ldr	r2, [sp, #24]
 80106b4:	3a30      	subs	r2, #48	@ 0x30
 80106b6:	2a09      	cmp	r2, #9
 80106b8:	d9f6      	bls.n	80106a8 <_svfprintf_r+0x250>
 80106ba:	e72d      	b.n	8010518 <_svfprintf_r+0xc0>
 80106bc:	f04f 0800 	mov.w	r8, #0
 80106c0:	210a      	movs	r1, #10
 80106c2:	e7f6      	b.n	80106b2 <_svfprintf_r+0x25a>
 80106c4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80106c8:	e7c9      	b.n	801065e <_svfprintf_r+0x206>
 80106ca:	2200      	movs	r2, #0
 80106cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80106d0:	210a      	movs	r1, #10
 80106d2:	9a06      	ldr	r2, [sp, #24]
 80106d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80106d6:	3a30      	subs	r2, #48	@ 0x30
 80106d8:	fb01 2200 	mla	r2, r1, r0, r2
 80106dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80106de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106e2:	9206      	str	r2, [sp, #24]
 80106e4:	3a30      	subs	r2, #48	@ 0x30
 80106e6:	2a09      	cmp	r2, #9
 80106e8:	d9f3      	bls.n	80106d2 <_svfprintf_r+0x27a>
 80106ea:	e715      	b.n	8010518 <_svfprintf_r+0xc0>
 80106ec:	f045 0508 	orr.w	r5, r5, #8
 80106f0:	e7b5      	b.n	801065e <_svfprintf_r+0x206>
 80106f2:	bf00      	nop
 80106f4:	f3af 8000 	nop.w
	...
 8010700:	0801565c 	.word	0x0801565c
 8010704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	2b68      	cmp	r3, #104	@ 0x68
 801070a:	bf01      	itttt	eq
 801070c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801070e:	3301      	addeq	r3, #1
 8010710:	930c      	streq	r3, [sp, #48]	@ 0x30
 8010712:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8010716:	bf18      	it	ne
 8010718:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801071c:	e79f      	b.n	801065e <_svfprintf_r+0x206>
 801071e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	2b6c      	cmp	r3, #108	@ 0x6c
 8010724:	d105      	bne.n	8010732 <_svfprintf_r+0x2da>
 8010726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010728:	3301      	adds	r3, #1
 801072a:	930c      	str	r3, [sp, #48]	@ 0x30
 801072c:	f045 0520 	orr.w	r5, r5, #32
 8010730:	e795      	b.n	801065e <_svfprintf_r+0x206>
 8010732:	f045 0510 	orr.w	r5, r5, #16
 8010736:	e792      	b.n	801065e <_svfprintf_r+0x206>
 8010738:	4632      	mov	r2, r6
 801073a:	f852 3b04 	ldr.w	r3, [r2], #4
 801073e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8010742:	2300      	movs	r3, #0
 8010744:	9207      	str	r2, [sp, #28]
 8010746:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801074a:	469a      	mov	sl, r3
 801074c:	f04f 0801 	mov.w	r8, #1
 8010750:	9310      	str	r3, [sp, #64]	@ 0x40
 8010752:	461f      	mov	r7, r3
 8010754:	9308      	str	r3, [sp, #32]
 8010756:	461e      	mov	r6, r3
 8010758:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801075c:	e1d2      	b.n	8010b04 <_svfprintf_r+0x6ac>
 801075e:	f045 0510 	orr.w	r5, r5, #16
 8010762:	06af      	lsls	r7, r5, #26
 8010764:	d512      	bpl.n	801078c <_svfprintf_r+0x334>
 8010766:	3607      	adds	r6, #7
 8010768:	f026 0307 	bic.w	r3, r6, #7
 801076c:	461a      	mov	r2, r3
 801076e:	685f      	ldr	r7, [r3, #4]
 8010770:	f852 6b08 	ldr.w	r6, [r2], #8
 8010774:	9207      	str	r2, [sp, #28]
 8010776:	2f00      	cmp	r7, #0
 8010778:	da06      	bge.n	8010788 <_svfprintf_r+0x330>
 801077a:	4276      	negs	r6, r6
 801077c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8010780:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8010784:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010788:	2301      	movs	r3, #1
 801078a:	e37d      	b.n	8010e88 <_svfprintf_r+0xa30>
 801078c:	4633      	mov	r3, r6
 801078e:	06ee      	lsls	r6, r5, #27
 8010790:	f853 7b04 	ldr.w	r7, [r3], #4
 8010794:	9307      	str	r3, [sp, #28]
 8010796:	d502      	bpl.n	801079e <_svfprintf_r+0x346>
 8010798:	463e      	mov	r6, r7
 801079a:	17ff      	asrs	r7, r7, #31
 801079c:	e7eb      	b.n	8010776 <_svfprintf_r+0x31e>
 801079e:	0668      	lsls	r0, r5, #25
 80107a0:	d503      	bpl.n	80107aa <_svfprintf_r+0x352>
 80107a2:	b23e      	sxth	r6, r7
 80107a4:	f347 37c0 	sbfx	r7, r7, #15, #1
 80107a8:	e7e5      	b.n	8010776 <_svfprintf_r+0x31e>
 80107aa:	05a9      	lsls	r1, r5, #22
 80107ac:	d5f4      	bpl.n	8010798 <_svfprintf_r+0x340>
 80107ae:	b27e      	sxtb	r6, r7
 80107b0:	f347 17c0 	sbfx	r7, r7, #7, #1
 80107b4:	e7df      	b.n	8010776 <_svfprintf_r+0x31e>
 80107b6:	3607      	adds	r6, #7
 80107b8:	f026 0307 	bic.w	r3, r6, #7
 80107bc:	ecb3 7b02 	vldmia	r3!, {d7}
 80107c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80107c4:	9307      	str	r3, [sp, #28]
 80107c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80107ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80107d2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80107d6:	4b81      	ldr	r3, [pc, #516]	@ (80109dc <_svfprintf_r+0x584>)
 80107d8:	f04f 32ff 	mov.w	r2, #4294967295
 80107dc:	f7f0 f9ce 	bl	8000b7c <__aeabi_dcmpun>
 80107e0:	bb10      	cbnz	r0, 8010828 <_svfprintf_r+0x3d0>
 80107e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80107e6:	4b7d      	ldr	r3, [pc, #500]	@ (80109dc <_svfprintf_r+0x584>)
 80107e8:	f04f 32ff 	mov.w	r2, #4294967295
 80107ec:	f7f0 f9a8 	bl	8000b40 <__aeabi_dcmple>
 80107f0:	b9d0      	cbnz	r0, 8010828 <_svfprintf_r+0x3d0>
 80107f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80107f6:	2200      	movs	r2, #0
 80107f8:	2300      	movs	r3, #0
 80107fa:	f7f0 f997 	bl	8000b2c <__aeabi_dcmplt>
 80107fe:	b110      	cbz	r0, 8010806 <_svfprintf_r+0x3ae>
 8010800:	232d      	movs	r3, #45	@ 0x2d
 8010802:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010806:	4a76      	ldr	r2, [pc, #472]	@ (80109e0 <_svfprintf_r+0x588>)
 8010808:	4b76      	ldr	r3, [pc, #472]	@ (80109e4 <_svfprintf_r+0x58c>)
 801080a:	9906      	ldr	r1, [sp, #24]
 801080c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8010810:	2947      	cmp	r1, #71	@ 0x47
 8010812:	bfd4      	ite	le
 8010814:	4691      	movle	r9, r2
 8010816:	4699      	movgt	r9, r3
 8010818:	f04f 0a00 	mov.w	sl, #0
 801081c:	f04f 0803 	mov.w	r8, #3
 8010820:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8010824:	f000 bfec 	b.w	8011800 <_svfprintf_r+0x13a8>
 8010828:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801082c:	4610      	mov	r0, r2
 801082e:	4619      	mov	r1, r3
 8010830:	f7f0 f9a4 	bl	8000b7c <__aeabi_dcmpun>
 8010834:	4682      	mov	sl, r0
 8010836:	b140      	cbz	r0, 801084a <_svfprintf_r+0x3f2>
 8010838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801083a:	4a6b      	ldr	r2, [pc, #428]	@ (80109e8 <_svfprintf_r+0x590>)
 801083c:	2b00      	cmp	r3, #0
 801083e:	bfbc      	itt	lt
 8010840:	232d      	movlt	r3, #45	@ 0x2d
 8010842:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8010846:	4b69      	ldr	r3, [pc, #420]	@ (80109ec <_svfprintf_r+0x594>)
 8010848:	e7df      	b.n	801080a <_svfprintf_r+0x3b2>
 801084a:	9b06      	ldr	r3, [sp, #24]
 801084c:	2b61      	cmp	r3, #97	@ 0x61
 801084e:	d025      	beq.n	801089c <_svfprintf_r+0x444>
 8010850:	2b41      	cmp	r3, #65	@ 0x41
 8010852:	d125      	bne.n	80108a0 <_svfprintf_r+0x448>
 8010854:	2358      	movs	r3, #88	@ 0x58
 8010856:	2230      	movs	r2, #48	@ 0x30
 8010858:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801085c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8010860:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8010864:	f045 0502 	orr.w	r5, r5, #2
 8010868:	f340 80a5 	ble.w	80109b6 <_svfprintf_r+0x55e>
 801086c:	9803      	ldr	r0, [sp, #12]
 801086e:	f108 0101 	add.w	r1, r8, #1
 8010872:	f7fe ff83 	bl	800f77c <_malloc_r>
 8010876:	4681      	mov	r9, r0
 8010878:	2800      	cmp	r0, #0
 801087a:	f040 80a1 	bne.w	80109c0 <_svfprintf_r+0x568>
 801087e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010886:	f8ab 300c 	strh.w	r3, [fp, #12]
 801088a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801088e:	065b      	lsls	r3, r3, #25
 8010890:	f53f ae04 	bmi.w	801049c <_svfprintf_r+0x44>
 8010894:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8010896:	b053      	add	sp, #332	@ 0x14c
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	2378      	movs	r3, #120	@ 0x78
 801089e:	e7da      	b.n	8010856 <_svfprintf_r+0x3fe>
 80108a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80108a4:	f000 808e 	beq.w	80109c4 <_svfprintf_r+0x56c>
 80108a8:	9b06      	ldr	r3, [sp, #24]
 80108aa:	f023 0320 	bic.w	r3, r3, #32
 80108ae:	2b47      	cmp	r3, #71	@ 0x47
 80108b0:	d105      	bne.n	80108be <_svfprintf_r+0x466>
 80108b2:	f1b8 0f00 	cmp.w	r8, #0
 80108b6:	d102      	bne.n	80108be <_svfprintf_r+0x466>
 80108b8:	46c2      	mov	sl, r8
 80108ba:	f04f 0801 	mov.w	r8, #1
 80108be:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80108c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80108c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	da7f      	bge.n	80109ca <_svfprintf_r+0x572>
 80108ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80108ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80108d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80108d6:	232d      	movs	r3, #45	@ 0x2d
 80108d8:	931c      	str	r3, [sp, #112]	@ 0x70
 80108da:	9b06      	ldr	r3, [sp, #24]
 80108dc:	f023 0320 	bic.w	r3, r3, #32
 80108e0:	2b41      	cmp	r3, #65	@ 0x41
 80108e2:	9308      	str	r3, [sp, #32]
 80108e4:	f040 81e6 	bne.w	8010cb4 <_svfprintf_r+0x85c>
 80108e8:	a820      	add	r0, sp, #128	@ 0x80
 80108ea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80108ee:	f001 fb09 	bl	8011f04 <frexp>
 80108f2:	2200      	movs	r2, #0
 80108f4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80108f8:	ec51 0b10 	vmov	r0, r1, d0
 80108fc:	f7ef fea4 	bl	8000648 <__aeabi_dmul>
 8010900:	4602      	mov	r2, r0
 8010902:	460b      	mov	r3, r1
 8010904:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010908:	2200      	movs	r2, #0
 801090a:	2300      	movs	r3, #0
 801090c:	f7f0 f904 	bl	8000b18 <__aeabi_dcmpeq>
 8010910:	b108      	cbz	r0, 8010916 <_svfprintf_r+0x4be>
 8010912:	2301      	movs	r3, #1
 8010914:	9320      	str	r3, [sp, #128]	@ 0x80
 8010916:	4a36      	ldr	r2, [pc, #216]	@ (80109f0 <_svfprintf_r+0x598>)
 8010918:	4b36      	ldr	r3, [pc, #216]	@ (80109f4 <_svfprintf_r+0x59c>)
 801091a:	9906      	ldr	r1, [sp, #24]
 801091c:	2961      	cmp	r1, #97	@ 0x61
 801091e:	bf18      	it	ne
 8010920:	461a      	movne	r2, r3
 8010922:	9210      	str	r2, [sp, #64]	@ 0x40
 8010924:	f108 37ff 	add.w	r7, r8, #4294967295
 8010928:	464e      	mov	r6, r9
 801092a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801092e:	4b32      	ldr	r3, [pc, #200]	@ (80109f8 <_svfprintf_r+0x5a0>)
 8010930:	2200      	movs	r2, #0
 8010932:	f7ef fe89 	bl	8000648 <__aeabi_dmul>
 8010936:	4602      	mov	r2, r0
 8010938:	460b      	mov	r3, r1
 801093a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801093e:	f7f0 f933 	bl	8000ba8 <__aeabi_d2iz>
 8010942:	9013      	str	r0, [sp, #76]	@ 0x4c
 8010944:	f7ef fe16 	bl	8000574 <__aeabi_i2d>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010950:	f7ef fcc2 	bl	80002d8 <__aeabi_dsub>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801095c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801095e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010960:	5c9b      	ldrb	r3, [r3, r2]
 8010962:	f806 3b01 	strb.w	r3, [r6], #1
 8010966:	1c7a      	adds	r2, r7, #1
 8010968:	d006      	beq.n	8010978 <_svfprintf_r+0x520>
 801096a:	1e7b      	subs	r3, r7, #1
 801096c:	931d      	str	r3, [sp, #116]	@ 0x74
 801096e:	2200      	movs	r2, #0
 8010970:	2300      	movs	r3, #0
 8010972:	f7f0 f8d1 	bl	8000b18 <__aeabi_dcmpeq>
 8010976:	b370      	cbz	r0, 80109d6 <_svfprintf_r+0x57e>
 8010978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801097c:	4b1f      	ldr	r3, [pc, #124]	@ (80109fc <_svfprintf_r+0x5a4>)
 801097e:	2200      	movs	r2, #0
 8010980:	f7f0 f8f2 	bl	8000b68 <__aeabi_dcmpgt>
 8010984:	2800      	cmp	r0, #0
 8010986:	d13b      	bne.n	8010a00 <_svfprintf_r+0x5a8>
 8010988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801098c:	4b1b      	ldr	r3, [pc, #108]	@ (80109fc <_svfprintf_r+0x5a4>)
 801098e:	2200      	movs	r2, #0
 8010990:	f7f0 f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8010994:	b110      	cbz	r0, 801099c <_svfprintf_r+0x544>
 8010996:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010998:	07db      	lsls	r3, r3, #31
 801099a:	d431      	bmi.n	8010a00 <_svfprintf_r+0x5a8>
 801099c:	4633      	mov	r3, r6
 801099e:	19f1      	adds	r1, r6, r7
 80109a0:	2030      	movs	r0, #48	@ 0x30
 80109a2:	1aca      	subs	r2, r1, r3
 80109a4:	2a00      	cmp	r2, #0
 80109a6:	f280 8182 	bge.w	8010cae <_svfprintf_r+0x856>
 80109aa:	1c7b      	adds	r3, r7, #1
 80109ac:	3701      	adds	r7, #1
 80109ae:	bfb8      	it	lt
 80109b0:	2300      	movlt	r3, #0
 80109b2:	441e      	add	r6, r3
 80109b4:	e038      	b.n	8010a28 <_svfprintf_r+0x5d0>
 80109b6:	f04f 0a00 	mov.w	sl, #0
 80109ba:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80109be:	e77e      	b.n	80108be <_svfprintf_r+0x466>
 80109c0:	4682      	mov	sl, r0
 80109c2:	e77c      	b.n	80108be <_svfprintf_r+0x466>
 80109c4:	f04f 0806 	mov.w	r8, #6
 80109c8:	e779      	b.n	80108be <_svfprintf_r+0x466>
 80109ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80109ce:	2300      	movs	r3, #0
 80109d0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80109d4:	e780      	b.n	80108d8 <_svfprintf_r+0x480>
 80109d6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80109d8:	e7a7      	b.n	801092a <_svfprintf_r+0x4d2>
 80109da:	bf00      	nop
 80109dc:	7fefffff 	.word	0x7fefffff
 80109e0:	0801564c 	.word	0x0801564c
 80109e4:	08015650 	.word	0x08015650
 80109e8:	08015654 	.word	0x08015654
 80109ec:	08015658 	.word	0x08015658
 80109f0:	0801565c 	.word	0x0801565c
 80109f4:	0801566d 	.word	0x0801566d
 80109f8:	40300000 	.word	0x40300000
 80109fc:	3fe00000 	.word	0x3fe00000
 8010a00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a02:	9624      	str	r6, [sp, #144]	@ 0x90
 8010a04:	7bd9      	ldrb	r1, [r3, #15]
 8010a06:	2030      	movs	r0, #48	@ 0x30
 8010a08:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010a0a:	1e53      	subs	r3, r2, #1
 8010a0c:	9324      	str	r3, [sp, #144]	@ 0x90
 8010a0e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8010a12:	428b      	cmp	r3, r1
 8010a14:	f000 8148 	beq.w	8010ca8 <_svfprintf_r+0x850>
 8010a18:	2b39      	cmp	r3, #57	@ 0x39
 8010a1a:	bf0b      	itete	eq
 8010a1c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8010a1e:	3301      	addne	r3, #1
 8010a20:	7a9b      	ldrbeq	r3, [r3, #10]
 8010a22:	b2db      	uxtbne	r3, r3
 8010a24:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010a28:	eba6 0309 	sub.w	r3, r6, r9
 8010a2c:	9304      	str	r3, [sp, #16]
 8010a2e:	9b08      	ldr	r3, [sp, #32]
 8010a30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010a32:	2b47      	cmp	r3, #71	@ 0x47
 8010a34:	f040 8187 	bne.w	8010d46 <_svfprintf_r+0x8ee>
 8010a38:	1cf1      	adds	r1, r6, #3
 8010a3a:	db02      	blt.n	8010a42 <_svfprintf_r+0x5ea>
 8010a3c:	4546      	cmp	r6, r8
 8010a3e:	f340 81a5 	ble.w	8010d8c <_svfprintf_r+0x934>
 8010a42:	9b06      	ldr	r3, [sp, #24]
 8010a44:	3b02      	subs	r3, #2
 8010a46:	9306      	str	r3, [sp, #24]
 8010a48:	9906      	ldr	r1, [sp, #24]
 8010a4a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8010a4e:	f021 0120 	bic.w	r1, r1, #32
 8010a52:	2941      	cmp	r1, #65	@ 0x41
 8010a54:	bf08      	it	eq
 8010a56:	320f      	addeq	r2, #15
 8010a58:	f106 33ff 	add.w	r3, r6, #4294967295
 8010a5c:	bf06      	itte	eq
 8010a5e:	b2d2      	uxtbeq	r2, r2
 8010a60:	2101      	moveq	r1, #1
 8010a62:	2100      	movne	r1, #0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	9320      	str	r3, [sp, #128]	@ 0x80
 8010a68:	bfb8      	it	lt
 8010a6a:	f1c6 0301 	rsblt	r3, r6, #1
 8010a6e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8010a72:	bfb4      	ite	lt
 8010a74:	222d      	movlt	r2, #45	@ 0x2d
 8010a76:	222b      	movge	r2, #43	@ 0x2b
 8010a78:	2b09      	cmp	r3, #9
 8010a7a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8010a7e:	f340 8178 	ble.w	8010d72 <_svfprintf_r+0x91a>
 8010a82:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010a86:	270a      	movs	r7, #10
 8010a88:	4602      	mov	r2, r0
 8010a8a:	fbb3 f6f7 	udiv	r6, r3, r7
 8010a8e:	fb07 3116 	mls	r1, r7, r6, r3
 8010a92:	3130      	adds	r1, #48	@ 0x30
 8010a94:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010a98:	4619      	mov	r1, r3
 8010a9a:	2963      	cmp	r1, #99	@ 0x63
 8010a9c:	f100 30ff 	add.w	r0, r0, #4294967295
 8010aa0:	4633      	mov	r3, r6
 8010aa2:	dcf1      	bgt.n	8010a88 <_svfprintf_r+0x630>
 8010aa4:	3330      	adds	r3, #48	@ 0x30
 8010aa6:	1e91      	subs	r1, r2, #2
 8010aa8:	f800 3c01 	strb.w	r3, [r0, #-1]
 8010aac:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8010ab6:	4283      	cmp	r3, r0
 8010ab8:	f0c0 8156 	bcc.w	8010d68 <_svfprintf_r+0x910>
 8010abc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8010ac0:	1a9b      	subs	r3, r3, r2
 8010ac2:	4281      	cmp	r1, r0
 8010ac4:	bf88      	it	hi
 8010ac6:	2300      	movhi	r3, #0
 8010ac8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010acc:	441a      	add	r2, r3
 8010ace:	ab22      	add	r3, sp, #136	@ 0x88
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	9a04      	ldr	r2, [sp, #16]
 8010ad4:	9318      	str	r3, [sp, #96]	@ 0x60
 8010ad6:	2a01      	cmp	r2, #1
 8010ad8:	eb03 0802 	add.w	r8, r3, r2
 8010adc:	dc01      	bgt.n	8010ae2 <_svfprintf_r+0x68a>
 8010ade:	07ea      	lsls	r2, r5, #31
 8010ae0:	d501      	bpl.n	8010ae6 <_svfprintf_r+0x68e>
 8010ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ae4:	4498      	add	r8, r3
 8010ae6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010aea:	2700      	movs	r7, #0
 8010aec:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8010af0:	9311      	str	r3, [sp, #68]	@ 0x44
 8010af2:	9708      	str	r7, [sp, #32]
 8010af4:	463e      	mov	r6, r7
 8010af6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f040 818f 	bne.w	8010e1c <_svfprintf_r+0x9c4>
 8010afe:	2300      	movs	r3, #0
 8010b00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010b02:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b06:	4543      	cmp	r3, r8
 8010b08:	bfb8      	it	lt
 8010b0a:	4643      	movlt	r3, r8
 8010b0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8010b0e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8010b12:	b113      	cbz	r3, 8010b1a <_svfprintf_r+0x6c2>
 8010b14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b16:	3301      	adds	r3, #1
 8010b18:	9311      	str	r3, [sp, #68]	@ 0x44
 8010b1a:	f015 0302 	ands.w	r3, r5, #2
 8010b1e:	931c      	str	r3, [sp, #112]	@ 0x70
 8010b20:	bf1e      	ittt	ne
 8010b22:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8010b24:	3302      	addne	r3, #2
 8010b26:	9311      	strne	r3, [sp, #68]	@ 0x44
 8010b28:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8010b2c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010b2e:	d122      	bne.n	8010b76 <_svfprintf_r+0x71e>
 8010b30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010b34:	1a9b      	subs	r3, r3, r2
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b3a:	dd1c      	ble.n	8010b76 <_svfprintf_r+0x71e>
 8010b3c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010b3e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010b42:	2810      	cmp	r0, #16
 8010b44:	489e      	ldr	r0, [pc, #632]	@ (8010dc0 <_svfprintf_r+0x968>)
 8010b46:	6020      	str	r0, [r4, #0]
 8010b48:	f102 0201 	add.w	r2, r2, #1
 8010b4c:	f104 0108 	add.w	r1, r4, #8
 8010b50:	f300 8298 	bgt.w	8011084 <_svfprintf_r+0xc2c>
 8010b54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010b56:	6060      	str	r0, [r4, #4]
 8010b58:	4403      	add	r3, r0
 8010b5a:	2a07      	cmp	r2, #7
 8010b5c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010b60:	f340 82a5 	ble.w	80110ae <_svfprintf_r+0xc56>
 8010b64:	9803      	ldr	r0, [sp, #12]
 8010b66:	aa26      	add	r2, sp, #152	@ 0x98
 8010b68:	4659      	mov	r1, fp
 8010b6a:	f002 fd70 	bl	801364e <__ssprint_r>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	f040 85ed 	bne.w	801174e <_svfprintf_r+0x12f6>
 8010b74:	ac29      	add	r4, sp, #164	@ 0xa4
 8010b76:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8010b7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010b7c:	b16a      	cbz	r2, 8010b9a <_svfprintf_r+0x742>
 8010b7e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8010b82:	6022      	str	r2, [r4, #0]
 8010b84:	2201      	movs	r2, #1
 8010b86:	4413      	add	r3, r2
 8010b88:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010b8a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010b8c:	6062      	str	r2, [r4, #4]
 8010b8e:	4413      	add	r3, r2
 8010b90:	2b07      	cmp	r3, #7
 8010b92:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010b94:	f300 828d 	bgt.w	80110b2 <_svfprintf_r+0xc5a>
 8010b98:	3408      	adds	r4, #8
 8010b9a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010b9c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010b9e:	b162      	cbz	r2, 8010bba <_svfprintf_r+0x762>
 8010ba0:	aa1f      	add	r2, sp, #124	@ 0x7c
 8010ba2:	6022      	str	r2, [r4, #0]
 8010ba4:	2202      	movs	r2, #2
 8010ba6:	4413      	add	r3, r2
 8010ba8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010baa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010bac:	6062      	str	r2, [r4, #4]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	2b07      	cmp	r3, #7
 8010bb2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010bb4:	f300 8287 	bgt.w	80110c6 <_svfprintf_r+0xc6e>
 8010bb8:	3408      	adds	r4, #8
 8010bba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010bbc:	2b80      	cmp	r3, #128	@ 0x80
 8010bbe:	d122      	bne.n	8010c06 <_svfprintf_r+0x7ae>
 8010bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bc2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010bca:	dd1c      	ble.n	8010c06 <_svfprintf_r+0x7ae>
 8010bcc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010bce:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010bd2:	2810      	cmp	r0, #16
 8010bd4:	487b      	ldr	r0, [pc, #492]	@ (8010dc4 <_svfprintf_r+0x96c>)
 8010bd6:	6020      	str	r0, [r4, #0]
 8010bd8:	f102 0201 	add.w	r2, r2, #1
 8010bdc:	f104 0108 	add.w	r1, r4, #8
 8010be0:	f300 827b 	bgt.w	80110da <_svfprintf_r+0xc82>
 8010be4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010be6:	6060      	str	r0, [r4, #4]
 8010be8:	4403      	add	r3, r0
 8010bea:	2a07      	cmp	r2, #7
 8010bec:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010bf0:	f340 8288 	ble.w	8011104 <_svfprintf_r+0xcac>
 8010bf4:	9803      	ldr	r0, [sp, #12]
 8010bf6:	aa26      	add	r2, sp, #152	@ 0x98
 8010bf8:	4659      	mov	r1, fp
 8010bfa:	f002 fd28 	bl	801364e <__ssprint_r>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	f040 85a5 	bne.w	801174e <_svfprintf_r+0x12f6>
 8010c04:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c08:	eba3 0308 	sub.w	r3, r3, r8
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c10:	dd1c      	ble.n	8010c4c <_svfprintf_r+0x7f4>
 8010c12:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010c14:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8010c18:	2810      	cmp	r0, #16
 8010c1a:	486a      	ldr	r0, [pc, #424]	@ (8010dc4 <_svfprintf_r+0x96c>)
 8010c1c:	6020      	str	r0, [r4, #0]
 8010c1e:	f102 0201 	add.w	r2, r2, #1
 8010c22:	f104 0108 	add.w	r1, r4, #8
 8010c26:	f300 826f 	bgt.w	8011108 <_svfprintf_r+0xcb0>
 8010c2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010c2c:	6060      	str	r0, [r4, #4]
 8010c2e:	4403      	add	r3, r0
 8010c30:	2a07      	cmp	r2, #7
 8010c32:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8010c36:	f340 827c 	ble.w	8011132 <_svfprintf_r+0xcda>
 8010c3a:	9803      	ldr	r0, [sp, #12]
 8010c3c:	aa26      	add	r2, sp, #152	@ 0x98
 8010c3e:	4659      	mov	r1, fp
 8010c40:	f002 fd05 	bl	801364e <__ssprint_r>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	f040 8582 	bne.w	801174e <_svfprintf_r+0x12f6>
 8010c4a:	ac29      	add	r4, sp, #164	@ 0xa4
 8010c4c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010c4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c50:	05ea      	lsls	r2, r5, #23
 8010c52:	f100 8275 	bmi.w	8011140 <_svfprintf_r+0xce8>
 8010c56:	4443      	add	r3, r8
 8010c58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010c5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	2b07      	cmp	r3, #7
 8010c60:	e9c4 9800 	strd	r9, r8, [r4]
 8010c64:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010c66:	f300 82b1 	bgt.w	80111cc <_svfprintf_r+0xd74>
 8010c6a:	3408      	adds	r4, #8
 8010c6c:	076a      	lsls	r2, r5, #29
 8010c6e:	f100 8550 	bmi.w	8011712 <_svfprintf_r+0x12ba>
 8010c72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010c78:	428a      	cmp	r2, r1
 8010c7a:	bfac      	ite	ge
 8010c7c:	189b      	addge	r3, r3, r2
 8010c7e:	185b      	addlt	r3, r3, r1
 8010c80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010c84:	b13b      	cbz	r3, 8010c96 <_svfprintf_r+0x83e>
 8010c86:	9803      	ldr	r0, [sp, #12]
 8010c88:	aa26      	add	r2, sp, #152	@ 0x98
 8010c8a:	4659      	mov	r1, fp
 8010c8c:	f002 fcdf 	bl	801364e <__ssprint_r>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f040 855c 	bne.w	801174e <_svfprintf_r+0x12f6>
 8010c96:	2300      	movs	r3, #0
 8010c98:	9327      	str	r3, [sp, #156]	@ 0x9c
 8010c9a:	f1ba 0f00 	cmp.w	sl, #0
 8010c9e:	f040 8572 	bne.w	8011786 <_svfprintf_r+0x132e>
 8010ca2:	9e07      	ldr	r6, [sp, #28]
 8010ca4:	ac29      	add	r4, sp, #164	@ 0xa4
 8010ca6:	e0c6      	b.n	8010e36 <_svfprintf_r+0x9de>
 8010ca8:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010cac:	e6ac      	b.n	8010a08 <_svfprintf_r+0x5b0>
 8010cae:	f803 0b01 	strb.w	r0, [r3], #1
 8010cb2:	e676      	b.n	80109a2 <_svfprintf_r+0x54a>
 8010cb4:	9b08      	ldr	r3, [sp, #32]
 8010cb6:	2b46      	cmp	r3, #70	@ 0x46
 8010cb8:	d005      	beq.n	8010cc6 <_svfprintf_r+0x86e>
 8010cba:	2b45      	cmp	r3, #69	@ 0x45
 8010cbc:	d11a      	bne.n	8010cf4 <_svfprintf_r+0x89c>
 8010cbe:	f108 0601 	add.w	r6, r8, #1
 8010cc2:	2102      	movs	r1, #2
 8010cc4:	e001      	b.n	8010cca <_svfprintf_r+0x872>
 8010cc6:	4646      	mov	r6, r8
 8010cc8:	2103      	movs	r1, #3
 8010cca:	ab24      	add	r3, sp, #144	@ 0x90
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	ab21      	add	r3, sp, #132	@ 0x84
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8010cd6:	ab20      	add	r3, sp, #128	@ 0x80
 8010cd8:	9803      	ldr	r0, [sp, #12]
 8010cda:	4632      	mov	r2, r6
 8010cdc:	f001 fa10 	bl	8012100 <_dtoa_r>
 8010ce0:	9b08      	ldr	r3, [sp, #32]
 8010ce2:	2b47      	cmp	r3, #71	@ 0x47
 8010ce4:	4681      	mov	r9, r0
 8010ce6:	d119      	bne.n	8010d1c <_svfprintf_r+0x8c4>
 8010ce8:	07e8      	lsls	r0, r5, #31
 8010cea:	d405      	bmi.n	8010cf8 <_svfprintf_r+0x8a0>
 8010cec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010cee:	eba3 0309 	sub.w	r3, r3, r9
 8010cf2:	e69b      	b.n	8010a2c <_svfprintf_r+0x5d4>
 8010cf4:	4646      	mov	r6, r8
 8010cf6:	e7e4      	b.n	8010cc2 <_svfprintf_r+0x86a>
 8010cf8:	eb09 0706 	add.w	r7, r9, r6
 8010cfc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010d00:	2200      	movs	r2, #0
 8010d02:	2300      	movs	r3, #0
 8010d04:	f7ef ff08 	bl	8000b18 <__aeabi_dcmpeq>
 8010d08:	b100      	cbz	r0, 8010d0c <_svfprintf_r+0x8b4>
 8010d0a:	9724      	str	r7, [sp, #144]	@ 0x90
 8010d0c:	2230      	movs	r2, #48	@ 0x30
 8010d0e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010d10:	429f      	cmp	r7, r3
 8010d12:	d9eb      	bls.n	8010cec <_svfprintf_r+0x894>
 8010d14:	1c59      	adds	r1, r3, #1
 8010d16:	9124      	str	r1, [sp, #144]	@ 0x90
 8010d18:	701a      	strb	r2, [r3, #0]
 8010d1a:	e7f8      	b.n	8010d0e <_svfprintf_r+0x8b6>
 8010d1c:	9b08      	ldr	r3, [sp, #32]
 8010d1e:	2b46      	cmp	r3, #70	@ 0x46
 8010d20:	eb00 0706 	add.w	r7, r0, r6
 8010d24:	d1ea      	bne.n	8010cfc <_svfprintf_r+0x8a4>
 8010d26:	7803      	ldrb	r3, [r0, #0]
 8010d28:	2b30      	cmp	r3, #48	@ 0x30
 8010d2a:	d109      	bne.n	8010d40 <_svfprintf_r+0x8e8>
 8010d2c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8010d30:	2200      	movs	r2, #0
 8010d32:	2300      	movs	r3, #0
 8010d34:	f7ef fef0 	bl	8000b18 <__aeabi_dcmpeq>
 8010d38:	b910      	cbnz	r0, 8010d40 <_svfprintf_r+0x8e8>
 8010d3a:	f1c6 0601 	rsb	r6, r6, #1
 8010d3e:	9620      	str	r6, [sp, #128]	@ 0x80
 8010d40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010d42:	441f      	add	r7, r3
 8010d44:	e7da      	b.n	8010cfc <_svfprintf_r+0x8a4>
 8010d46:	9b08      	ldr	r3, [sp, #32]
 8010d48:	2b46      	cmp	r3, #70	@ 0x46
 8010d4a:	f47f ae7d 	bne.w	8010a48 <_svfprintf_r+0x5f0>
 8010d4e:	f005 0301 	and.w	r3, r5, #1
 8010d52:	2e00      	cmp	r6, #0
 8010d54:	ea43 0308 	orr.w	r3, r3, r8
 8010d58:	dd25      	ble.n	8010da6 <_svfprintf_r+0x94e>
 8010d5a:	b37b      	cbz	r3, 8010dbc <_svfprintf_r+0x964>
 8010d5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d5e:	18f3      	adds	r3, r6, r3
 8010d60:	4498      	add	r8, r3
 8010d62:	2366      	movs	r3, #102	@ 0x66
 8010d64:	9306      	str	r3, [sp, #24]
 8010d66:	e033      	b.n	8010dd0 <_svfprintf_r+0x978>
 8010d68:	f813 7b01 	ldrb.w	r7, [r3], #1
 8010d6c:	f806 7f01 	strb.w	r7, [r6, #1]!
 8010d70:	e6a1      	b.n	8010ab6 <_svfprintf_r+0x65e>
 8010d72:	b941      	cbnz	r1, 8010d86 <_svfprintf_r+0x92e>
 8010d74:	2230      	movs	r2, #48	@ 0x30
 8010d76:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8010d7a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8010d7e:	3330      	adds	r3, #48	@ 0x30
 8010d80:	f802 3b01 	strb.w	r3, [r2], #1
 8010d84:	e6a3      	b.n	8010ace <_svfprintf_r+0x676>
 8010d86:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8010d8a:	e7f8      	b.n	8010d7e <_svfprintf_r+0x926>
 8010d8c:	9b04      	ldr	r3, [sp, #16]
 8010d8e:	429e      	cmp	r6, r3
 8010d90:	da0d      	bge.n	8010dae <_svfprintf_r+0x956>
 8010d92:	9b04      	ldr	r3, [sp, #16]
 8010d94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d96:	2e00      	cmp	r6, #0
 8010d98:	eb03 0802 	add.w	r8, r3, r2
 8010d9c:	dc0c      	bgt.n	8010db8 <_svfprintf_r+0x960>
 8010d9e:	f1c6 0301 	rsb	r3, r6, #1
 8010da2:	4498      	add	r8, r3
 8010da4:	e008      	b.n	8010db8 <_svfprintf_r+0x960>
 8010da6:	b17b      	cbz	r3, 8010dc8 <_svfprintf_r+0x970>
 8010da8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010daa:	3301      	adds	r3, #1
 8010dac:	e7d8      	b.n	8010d60 <_svfprintf_r+0x908>
 8010dae:	07eb      	lsls	r3, r5, #31
 8010db0:	d521      	bpl.n	8010df6 <_svfprintf_r+0x99e>
 8010db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010db4:	eb06 0803 	add.w	r8, r6, r3
 8010db8:	2367      	movs	r3, #103	@ 0x67
 8010dba:	e7d3      	b.n	8010d64 <_svfprintf_r+0x90c>
 8010dbc:	46b0      	mov	r8, r6
 8010dbe:	e7d0      	b.n	8010d62 <_svfprintf_r+0x90a>
 8010dc0:	08015690 	.word	0x08015690
 8010dc4:	08015680 	.word	0x08015680
 8010dc8:	2366      	movs	r3, #102	@ 0x66
 8010dca:	9306      	str	r3, [sp, #24]
 8010dcc:	f04f 0801 	mov.w	r8, #1
 8010dd0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8010dd4:	9308      	str	r3, [sp, #32]
 8010dd6:	d01f      	beq.n	8010e18 <_svfprintf_r+0x9c0>
 8010dd8:	2700      	movs	r7, #0
 8010dda:	2e00      	cmp	r6, #0
 8010ddc:	9708      	str	r7, [sp, #32]
 8010dde:	f77f ae8a 	ble.w	8010af6 <_svfprintf_r+0x69e>
 8010de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	2bff      	cmp	r3, #255	@ 0xff
 8010de8:	d107      	bne.n	8010dfa <_svfprintf_r+0x9a2>
 8010dea:	9b08      	ldr	r3, [sp, #32]
 8010dec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010dee:	443b      	add	r3, r7
 8010df0:	fb02 8803 	mla	r8, r2, r3, r8
 8010df4:	e67f      	b.n	8010af6 <_svfprintf_r+0x69e>
 8010df6:	46b0      	mov	r8, r6
 8010df8:	e7de      	b.n	8010db8 <_svfprintf_r+0x960>
 8010dfa:	42b3      	cmp	r3, r6
 8010dfc:	daf5      	bge.n	8010dea <_svfprintf_r+0x992>
 8010dfe:	1af6      	subs	r6, r6, r3
 8010e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e02:	785b      	ldrb	r3, [r3, #1]
 8010e04:	b133      	cbz	r3, 8010e14 <_svfprintf_r+0x9bc>
 8010e06:	9b08      	ldr	r3, [sp, #32]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	9308      	str	r3, [sp, #32]
 8010e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e0e:	3301      	adds	r3, #1
 8010e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e12:	e7e6      	b.n	8010de2 <_svfprintf_r+0x98a>
 8010e14:	3701      	adds	r7, #1
 8010e16:	e7e4      	b.n	8010de2 <_svfprintf_r+0x98a>
 8010e18:	9f08      	ldr	r7, [sp, #32]
 8010e1a:	e66c      	b.n	8010af6 <_svfprintf_r+0x69e>
 8010e1c:	232d      	movs	r3, #45	@ 0x2d
 8010e1e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8010e22:	e66c      	b.n	8010afe <_svfprintf_r+0x6a6>
 8010e24:	06af      	lsls	r7, r5, #26
 8010e26:	d50a      	bpl.n	8010e3e <_svfprintf_r+0x9e6>
 8010e28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e2a:	6833      	ldr	r3, [r6, #0]
 8010e2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010e2e:	17d2      	asrs	r2, r2, #31
 8010e30:	e9c3 1200 	strd	r1, r2, [r3]
 8010e34:	3604      	adds	r6, #4
 8010e36:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8010e3a:	f7ff bb46 	b.w	80104ca <_svfprintf_r+0x72>
 8010e3e:	06e8      	lsls	r0, r5, #27
 8010e40:	d503      	bpl.n	8010e4a <_svfprintf_r+0x9f2>
 8010e42:	6833      	ldr	r3, [r6, #0]
 8010e44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e46:	601a      	str	r2, [r3, #0]
 8010e48:	e7f4      	b.n	8010e34 <_svfprintf_r+0x9dc>
 8010e4a:	0669      	lsls	r1, r5, #25
 8010e4c:	d503      	bpl.n	8010e56 <_svfprintf_r+0x9fe>
 8010e4e:	6833      	ldr	r3, [r6, #0]
 8010e50:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e52:	801a      	strh	r2, [r3, #0]
 8010e54:	e7ee      	b.n	8010e34 <_svfprintf_r+0x9dc>
 8010e56:	05aa      	lsls	r2, r5, #22
 8010e58:	d5f3      	bpl.n	8010e42 <_svfprintf_r+0x9ea>
 8010e5a:	6833      	ldr	r3, [r6, #0]
 8010e5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e5e:	701a      	strb	r2, [r3, #0]
 8010e60:	e7e8      	b.n	8010e34 <_svfprintf_r+0x9dc>
 8010e62:	f045 0510 	orr.w	r5, r5, #16
 8010e66:	f015 0320 	ands.w	r3, r5, #32
 8010e6a:	d020      	beq.n	8010eae <_svfprintf_r+0xa56>
 8010e6c:	3607      	adds	r6, #7
 8010e6e:	f026 0307 	bic.w	r3, r6, #7
 8010e72:	461a      	mov	r2, r3
 8010e74:	685f      	ldr	r7, [r3, #4]
 8010e76:	f852 6b08 	ldr.w	r6, [r2], #8
 8010e7a:	9207      	str	r2, [sp, #28]
 8010e7c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010e80:	2300      	movs	r3, #0
 8010e82:	2200      	movs	r2, #0
 8010e84:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8010e88:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010e8c:	f000 848c 	beq.w	80117a8 <_svfprintf_r+0x1350>
 8010e90:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8010e94:	9208      	str	r2, [sp, #32]
 8010e96:	ea56 0207 	orrs.w	r2, r6, r7
 8010e9a:	f040 848a 	bne.w	80117b2 <_svfprintf_r+0x135a>
 8010e9e:	f1b8 0f00 	cmp.w	r8, #0
 8010ea2:	f000 80db 	beq.w	801105c <_svfprintf_r+0xc04>
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	f040 8486 	bne.w	80117b8 <_svfprintf_r+0x1360>
 8010eac:	e083      	b.n	8010fb6 <_svfprintf_r+0xb5e>
 8010eae:	4632      	mov	r2, r6
 8010eb0:	f015 0710 	ands.w	r7, r5, #16
 8010eb4:	f852 6b04 	ldr.w	r6, [r2], #4
 8010eb8:	9207      	str	r2, [sp, #28]
 8010eba:	d001      	beq.n	8010ec0 <_svfprintf_r+0xa68>
 8010ebc:	461f      	mov	r7, r3
 8010ebe:	e7dd      	b.n	8010e7c <_svfprintf_r+0xa24>
 8010ec0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010ec4:	d001      	beq.n	8010eca <_svfprintf_r+0xa72>
 8010ec6:	b2b6      	uxth	r6, r6
 8010ec8:	e7d8      	b.n	8010e7c <_svfprintf_r+0xa24>
 8010eca:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010ece:	d0d5      	beq.n	8010e7c <_svfprintf_r+0xa24>
 8010ed0:	b2f6      	uxtb	r6, r6
 8010ed2:	e7f3      	b.n	8010ebc <_svfprintf_r+0xa64>
 8010ed4:	4633      	mov	r3, r6
 8010ed6:	2278      	movs	r2, #120	@ 0x78
 8010ed8:	f853 6b04 	ldr.w	r6, [r3], #4
 8010edc:	9307      	str	r3, [sp, #28]
 8010ede:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010ee2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8010ee6:	4b94      	ldr	r3, [pc, #592]	@ (8011138 <_svfprintf_r+0xce0>)
 8010ee8:	9319      	str	r3, [sp, #100]	@ 0x64
 8010eea:	2700      	movs	r7, #0
 8010eec:	f045 0502 	orr.w	r5, r5, #2
 8010ef0:	2302      	movs	r3, #2
 8010ef2:	9206      	str	r2, [sp, #24]
 8010ef4:	e7c5      	b.n	8010e82 <_svfprintf_r+0xa2a>
 8010ef6:	4633      	mov	r3, r6
 8010ef8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010efc:	f853 9b04 	ldr.w	r9, [r3], #4
 8010f00:	9307      	str	r3, [sp, #28]
 8010f02:	f04f 0600 	mov.w	r6, #0
 8010f06:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8010f0a:	d00f      	beq.n	8010f2c <_svfprintf_r+0xad4>
 8010f0c:	4642      	mov	r2, r8
 8010f0e:	4631      	mov	r1, r6
 8010f10:	4648      	mov	r0, r9
 8010f12:	f7ef f98d 	bl	8000230 <memchr>
 8010f16:	4682      	mov	sl, r0
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	f43f ac81 	beq.w	8010820 <_svfprintf_r+0x3c8>
 8010f1e:	eba0 0809 	sub.w	r8, r0, r9
 8010f22:	46b2      	mov	sl, r6
 8010f24:	9610      	str	r6, [sp, #64]	@ 0x40
 8010f26:	4637      	mov	r7, r6
 8010f28:	9608      	str	r6, [sp, #32]
 8010f2a:	e5eb      	b.n	8010b04 <_svfprintf_r+0x6ac>
 8010f2c:	4648      	mov	r0, r9
 8010f2e:	f7ef f977 	bl	8000220 <strlen>
 8010f32:	46b2      	mov	sl, r6
 8010f34:	4680      	mov	r8, r0
 8010f36:	e473      	b.n	8010820 <_svfprintf_r+0x3c8>
 8010f38:	f045 0510 	orr.w	r5, r5, #16
 8010f3c:	f015 0320 	ands.w	r3, r5, #32
 8010f40:	d009      	beq.n	8010f56 <_svfprintf_r+0xafe>
 8010f42:	3607      	adds	r6, #7
 8010f44:	f026 0307 	bic.w	r3, r6, #7
 8010f48:	461a      	mov	r2, r3
 8010f4a:	685f      	ldr	r7, [r3, #4]
 8010f4c:	f852 6b08 	ldr.w	r6, [r2], #8
 8010f50:	9207      	str	r2, [sp, #28]
 8010f52:	2301      	movs	r3, #1
 8010f54:	e795      	b.n	8010e82 <_svfprintf_r+0xa2a>
 8010f56:	4632      	mov	r2, r6
 8010f58:	f015 0710 	ands.w	r7, r5, #16
 8010f5c:	f852 6b04 	ldr.w	r6, [r2], #4
 8010f60:	9207      	str	r2, [sp, #28]
 8010f62:	d001      	beq.n	8010f68 <_svfprintf_r+0xb10>
 8010f64:	461f      	mov	r7, r3
 8010f66:	e7f4      	b.n	8010f52 <_svfprintf_r+0xafa>
 8010f68:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010f6c:	d001      	beq.n	8010f72 <_svfprintf_r+0xb1a>
 8010f6e:	b2b6      	uxth	r6, r6
 8010f70:	e7ef      	b.n	8010f52 <_svfprintf_r+0xafa>
 8010f72:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010f76:	d0ec      	beq.n	8010f52 <_svfprintf_r+0xafa>
 8010f78:	b2f6      	uxtb	r6, r6
 8010f7a:	e7f3      	b.n	8010f64 <_svfprintf_r+0xb0c>
 8010f7c:	4b6f      	ldr	r3, [pc, #444]	@ (801113c <_svfprintf_r+0xce4>)
 8010f7e:	f7ff bb39 	b.w	80105f4 <_svfprintf_r+0x19c>
 8010f82:	4632      	mov	r2, r6
 8010f84:	f015 0710 	ands.w	r7, r5, #16
 8010f88:	f852 6b04 	ldr.w	r6, [r2], #4
 8010f8c:	9207      	str	r2, [sp, #28]
 8010f8e:	d002      	beq.n	8010f96 <_svfprintf_r+0xb3e>
 8010f90:	461f      	mov	r7, r3
 8010f92:	f7ff bb3c 	b.w	801060e <_svfprintf_r+0x1b6>
 8010f96:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010f9a:	d002      	beq.n	8010fa2 <_svfprintf_r+0xb4a>
 8010f9c:	b2b6      	uxth	r6, r6
 8010f9e:	f7ff bb36 	b.w	801060e <_svfprintf_r+0x1b6>
 8010fa2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010fa6:	f43f ab32 	beq.w	801060e <_svfprintf_r+0x1b6>
 8010faa:	b2f6      	uxtb	r6, r6
 8010fac:	e7f0      	b.n	8010f90 <_svfprintf_r+0xb38>
 8010fae:	2e0a      	cmp	r6, #10
 8010fb0:	f177 0300 	sbcs.w	r3, r7, #0
 8010fb4:	d207      	bcs.n	8010fc6 <_svfprintf_r+0xb6e>
 8010fb6:	3630      	adds	r6, #48	@ 0x30
 8010fb8:	b2f6      	uxtb	r6, r6
 8010fba:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8010fbe:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8010fc2:	f000 bc15 	b.w	80117f0 <_svfprintf_r+0x1398>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	9304      	str	r3, [sp, #16]
 8010fca:	9b08      	ldr	r3, [sp, #32]
 8010fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010fd0:	ad52      	add	r5, sp, #328	@ 0x148
 8010fd2:	9310      	str	r3, [sp, #64]	@ 0x40
 8010fd4:	220a      	movs	r2, #10
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	4630      	mov	r0, r6
 8010fda:	4639      	mov	r1, r7
 8010fdc:	f7ef fe7c 	bl	8000cd8 <__aeabi_uldivmod>
 8010fe0:	9b04      	ldr	r3, [sp, #16]
 8010fe2:	9011      	str	r0, [sp, #68]	@ 0x44
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	9304      	str	r3, [sp, #16]
 8010fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010fea:	3230      	adds	r2, #48	@ 0x30
 8010fec:	468a      	mov	sl, r1
 8010fee:	f105 39ff 	add.w	r9, r5, #4294967295
 8010ff2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8010ff6:	b1d3      	cbz	r3, 801102e <_svfprintf_r+0xbd6>
 8010ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ffa:	9a04      	ldr	r2, [sp, #16]
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d115      	bne.n	801102e <_svfprintf_r+0xbd6>
 8011002:	2aff      	cmp	r2, #255	@ 0xff
 8011004:	d013      	beq.n	801102e <_svfprintf_r+0xbd6>
 8011006:	2e0a      	cmp	r6, #10
 8011008:	f177 0300 	sbcs.w	r3, r7, #0
 801100c:	d30f      	bcc.n	801102e <_svfprintf_r+0xbd6>
 801100e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011010:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011012:	eba9 0903 	sub.w	r9, r9, r3
 8011016:	461a      	mov	r2, r3
 8011018:	4648      	mov	r0, r9
 801101a:	f000 ff1f 	bl	8011e5c <strncpy>
 801101e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011020:	785b      	ldrb	r3, [r3, #1]
 8011022:	b11b      	cbz	r3, 801102c <_svfprintf_r+0xbd4>
 8011024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011026:	3301      	adds	r3, #1
 8011028:	9309      	str	r3, [sp, #36]	@ 0x24
 801102a:	2300      	movs	r3, #0
 801102c:	9304      	str	r3, [sp, #16]
 801102e:	2e0a      	cmp	r6, #10
 8011030:	f177 0700 	sbcs.w	r7, r7, #0
 8011034:	f0c0 83dc 	bcc.w	80117f0 <_svfprintf_r+0x1398>
 8011038:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801103a:	4657      	mov	r7, sl
 801103c:	464d      	mov	r5, r9
 801103e:	e7c9      	b.n	8010fd4 <_svfprintf_r+0xb7c>
 8011040:	f006 030f 	and.w	r3, r6, #15
 8011044:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011046:	0936      	lsrs	r6, r6, #4
 8011048:	5cd3      	ldrb	r3, [r2, r3]
 801104a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801104e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8011052:	093f      	lsrs	r7, r7, #4
 8011054:	ea56 0307 	orrs.w	r3, r6, r7
 8011058:	d1f2      	bne.n	8011040 <_svfprintf_r+0xbe8>
 801105a:	e3c9      	b.n	80117f0 <_svfprintf_r+0x1398>
 801105c:	b91b      	cbnz	r3, 8011066 <_svfprintf_r+0xc0e>
 801105e:	07e9      	lsls	r1, r5, #31
 8011060:	d501      	bpl.n	8011066 <_svfprintf_r+0xc0e>
 8011062:	2630      	movs	r6, #48	@ 0x30
 8011064:	e7a9      	b.n	8010fba <_svfprintf_r+0xb62>
 8011066:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801106a:	e3c1      	b.n	80117f0 <_svfprintf_r+0x1398>
 801106c:	9b06      	ldr	r3, [sp, #24]
 801106e:	2b00      	cmp	r3, #0
 8011070:	f000 838f 	beq.w	8011792 <_svfprintf_r+0x133a>
 8011074:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8011078:	2300      	movs	r3, #0
 801107a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801107e:	9607      	str	r6, [sp, #28]
 8011080:	f7ff bb63 	b.w	801074a <_svfprintf_r+0x2f2>
 8011084:	2010      	movs	r0, #16
 8011086:	4403      	add	r3, r0
 8011088:	2a07      	cmp	r2, #7
 801108a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801108e:	6060      	str	r0, [r4, #4]
 8011090:	dd08      	ble.n	80110a4 <_svfprintf_r+0xc4c>
 8011092:	9803      	ldr	r0, [sp, #12]
 8011094:	aa26      	add	r2, sp, #152	@ 0x98
 8011096:	4659      	mov	r1, fp
 8011098:	f002 fad9 	bl	801364e <__ssprint_r>
 801109c:	2800      	cmp	r0, #0
 801109e:	f040 8356 	bne.w	801174e <_svfprintf_r+0x12f6>
 80110a2:	a929      	add	r1, sp, #164	@ 0xa4
 80110a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110a6:	3b10      	subs	r3, #16
 80110a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80110aa:	460c      	mov	r4, r1
 80110ac:	e546      	b.n	8010b3c <_svfprintf_r+0x6e4>
 80110ae:	460c      	mov	r4, r1
 80110b0:	e561      	b.n	8010b76 <_svfprintf_r+0x71e>
 80110b2:	9803      	ldr	r0, [sp, #12]
 80110b4:	aa26      	add	r2, sp, #152	@ 0x98
 80110b6:	4659      	mov	r1, fp
 80110b8:	f002 fac9 	bl	801364e <__ssprint_r>
 80110bc:	2800      	cmp	r0, #0
 80110be:	f040 8346 	bne.w	801174e <_svfprintf_r+0x12f6>
 80110c2:	ac29      	add	r4, sp, #164	@ 0xa4
 80110c4:	e569      	b.n	8010b9a <_svfprintf_r+0x742>
 80110c6:	9803      	ldr	r0, [sp, #12]
 80110c8:	aa26      	add	r2, sp, #152	@ 0x98
 80110ca:	4659      	mov	r1, fp
 80110cc:	f002 fabf 	bl	801364e <__ssprint_r>
 80110d0:	2800      	cmp	r0, #0
 80110d2:	f040 833c 	bne.w	801174e <_svfprintf_r+0x12f6>
 80110d6:	ac29      	add	r4, sp, #164	@ 0xa4
 80110d8:	e56f      	b.n	8010bba <_svfprintf_r+0x762>
 80110da:	2010      	movs	r0, #16
 80110dc:	4403      	add	r3, r0
 80110de:	2a07      	cmp	r2, #7
 80110e0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80110e4:	6060      	str	r0, [r4, #4]
 80110e6:	dd08      	ble.n	80110fa <_svfprintf_r+0xca2>
 80110e8:	9803      	ldr	r0, [sp, #12]
 80110ea:	aa26      	add	r2, sp, #152	@ 0x98
 80110ec:	4659      	mov	r1, fp
 80110ee:	f002 faae 	bl	801364e <__ssprint_r>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	f040 832b 	bne.w	801174e <_svfprintf_r+0x12f6>
 80110f8:	a929      	add	r1, sp, #164	@ 0xa4
 80110fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110fc:	3b10      	subs	r3, #16
 80110fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011100:	460c      	mov	r4, r1
 8011102:	e563      	b.n	8010bcc <_svfprintf_r+0x774>
 8011104:	460c      	mov	r4, r1
 8011106:	e57e      	b.n	8010c06 <_svfprintf_r+0x7ae>
 8011108:	2010      	movs	r0, #16
 801110a:	4403      	add	r3, r0
 801110c:	2a07      	cmp	r2, #7
 801110e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8011112:	6060      	str	r0, [r4, #4]
 8011114:	dd08      	ble.n	8011128 <_svfprintf_r+0xcd0>
 8011116:	9803      	ldr	r0, [sp, #12]
 8011118:	aa26      	add	r2, sp, #152	@ 0x98
 801111a:	4659      	mov	r1, fp
 801111c:	f002 fa97 	bl	801364e <__ssprint_r>
 8011120:	2800      	cmp	r0, #0
 8011122:	f040 8314 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011126:	a929      	add	r1, sp, #164	@ 0xa4
 8011128:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801112a:	3b10      	subs	r3, #16
 801112c:	9310      	str	r3, [sp, #64]	@ 0x40
 801112e:	460c      	mov	r4, r1
 8011130:	e56f      	b.n	8010c12 <_svfprintf_r+0x7ba>
 8011132:	460c      	mov	r4, r1
 8011134:	e58a      	b.n	8010c4c <_svfprintf_r+0x7f4>
 8011136:	bf00      	nop
 8011138:	0801565c 	.word	0x0801565c
 801113c:	0801566d 	.word	0x0801566d
 8011140:	9b06      	ldr	r3, [sp, #24]
 8011142:	2b65      	cmp	r3, #101	@ 0x65
 8011144:	f340 8246 	ble.w	80115d4 <_svfprintf_r+0x117c>
 8011148:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801114c:	2200      	movs	r2, #0
 801114e:	2300      	movs	r3, #0
 8011150:	f7ef fce2 	bl	8000b18 <__aeabi_dcmpeq>
 8011154:	2800      	cmp	r0, #0
 8011156:	d06a      	beq.n	801122e <_svfprintf_r+0xdd6>
 8011158:	4b73      	ldr	r3, [pc, #460]	@ (8011328 <_svfprintf_r+0xed0>)
 801115a:	6023      	str	r3, [r4, #0]
 801115c:	2301      	movs	r3, #1
 801115e:	6063      	str	r3, [r4, #4]
 8011160:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011162:	3301      	adds	r3, #1
 8011164:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011166:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011168:	3301      	adds	r3, #1
 801116a:	2b07      	cmp	r3, #7
 801116c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801116e:	dc37      	bgt.n	80111e0 <_svfprintf_r+0xd88>
 8011170:	3408      	adds	r4, #8
 8011172:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011174:	9a04      	ldr	r2, [sp, #16]
 8011176:	4293      	cmp	r3, r2
 8011178:	db02      	blt.n	8011180 <_svfprintf_r+0xd28>
 801117a:	07ef      	lsls	r7, r5, #31
 801117c:	f57f ad76 	bpl.w	8010c6c <_svfprintf_r+0x814>
 8011180:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011182:	6023      	str	r3, [r4, #0]
 8011184:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011186:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011188:	6063      	str	r3, [r4, #4]
 801118a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801118c:	4413      	add	r3, r2
 801118e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011190:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011192:	3301      	adds	r3, #1
 8011194:	2b07      	cmp	r3, #7
 8011196:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011198:	dc2c      	bgt.n	80111f4 <_svfprintf_r+0xd9c>
 801119a:	3408      	adds	r4, #8
 801119c:	9b04      	ldr	r3, [sp, #16]
 801119e:	1e5e      	subs	r6, r3, #1
 80111a0:	2e00      	cmp	r6, #0
 80111a2:	f77f ad63 	ble.w	8010c6c <_svfprintf_r+0x814>
 80111a6:	4f61      	ldr	r7, [pc, #388]	@ (801132c <_svfprintf_r+0xed4>)
 80111a8:	f04f 0810 	mov.w	r8, #16
 80111ac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80111b0:	2e10      	cmp	r6, #16
 80111b2:	f103 0301 	add.w	r3, r3, #1
 80111b6:	f104 0108 	add.w	r1, r4, #8
 80111ba:	6027      	str	r7, [r4, #0]
 80111bc:	dc24      	bgt.n	8011208 <_svfprintf_r+0xdb0>
 80111be:	6066      	str	r6, [r4, #4]
 80111c0:	2b07      	cmp	r3, #7
 80111c2:	4416      	add	r6, r2
 80111c4:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80111c8:	f340 82a0 	ble.w	801170c <_svfprintf_r+0x12b4>
 80111cc:	9803      	ldr	r0, [sp, #12]
 80111ce:	aa26      	add	r2, sp, #152	@ 0x98
 80111d0:	4659      	mov	r1, fp
 80111d2:	f002 fa3c 	bl	801364e <__ssprint_r>
 80111d6:	2800      	cmp	r0, #0
 80111d8:	f040 82b9 	bne.w	801174e <_svfprintf_r+0x12f6>
 80111dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80111de:	e545      	b.n	8010c6c <_svfprintf_r+0x814>
 80111e0:	9803      	ldr	r0, [sp, #12]
 80111e2:	aa26      	add	r2, sp, #152	@ 0x98
 80111e4:	4659      	mov	r1, fp
 80111e6:	f002 fa32 	bl	801364e <__ssprint_r>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	f040 82af 	bne.w	801174e <_svfprintf_r+0x12f6>
 80111f0:	ac29      	add	r4, sp, #164	@ 0xa4
 80111f2:	e7be      	b.n	8011172 <_svfprintf_r+0xd1a>
 80111f4:	9803      	ldr	r0, [sp, #12]
 80111f6:	aa26      	add	r2, sp, #152	@ 0x98
 80111f8:	4659      	mov	r1, fp
 80111fa:	f002 fa28 	bl	801364e <__ssprint_r>
 80111fe:	2800      	cmp	r0, #0
 8011200:	f040 82a5 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011204:	ac29      	add	r4, sp, #164	@ 0xa4
 8011206:	e7c9      	b.n	801119c <_svfprintf_r+0xd44>
 8011208:	3210      	adds	r2, #16
 801120a:	2b07      	cmp	r3, #7
 801120c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011210:	f8c4 8004 	str.w	r8, [r4, #4]
 8011214:	dd08      	ble.n	8011228 <_svfprintf_r+0xdd0>
 8011216:	9803      	ldr	r0, [sp, #12]
 8011218:	aa26      	add	r2, sp, #152	@ 0x98
 801121a:	4659      	mov	r1, fp
 801121c:	f002 fa17 	bl	801364e <__ssprint_r>
 8011220:	2800      	cmp	r0, #0
 8011222:	f040 8294 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011226:	a929      	add	r1, sp, #164	@ 0xa4
 8011228:	3e10      	subs	r6, #16
 801122a:	460c      	mov	r4, r1
 801122c:	e7be      	b.n	80111ac <_svfprintf_r+0xd54>
 801122e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011230:	2b00      	cmp	r3, #0
 8011232:	dc7d      	bgt.n	8011330 <_svfprintf_r+0xed8>
 8011234:	4b3c      	ldr	r3, [pc, #240]	@ (8011328 <_svfprintf_r+0xed0>)
 8011236:	6023      	str	r3, [r4, #0]
 8011238:	2301      	movs	r3, #1
 801123a:	6063      	str	r3, [r4, #4]
 801123c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801123e:	3301      	adds	r3, #1
 8011240:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011242:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011244:	3301      	adds	r3, #1
 8011246:	2b07      	cmp	r3, #7
 8011248:	9327      	str	r3, [sp, #156]	@ 0x9c
 801124a:	dc46      	bgt.n	80112da <_svfprintf_r+0xe82>
 801124c:	3408      	adds	r4, #8
 801124e:	9904      	ldr	r1, [sp, #16]
 8011250:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011252:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8011254:	430b      	orrs	r3, r1
 8011256:	f005 0101 	and.w	r1, r5, #1
 801125a:	430b      	orrs	r3, r1
 801125c:	f43f ad06 	beq.w	8010c6c <_svfprintf_r+0x814>
 8011260:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011262:	6023      	str	r3, [r4, #0]
 8011264:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011266:	6063      	str	r3, [r4, #4]
 8011268:	441a      	add	r2, r3
 801126a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801126c:	9228      	str	r2, [sp, #160]	@ 0xa0
 801126e:	3301      	adds	r3, #1
 8011270:	2b07      	cmp	r3, #7
 8011272:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011274:	dc3b      	bgt.n	80112ee <_svfprintf_r+0xe96>
 8011276:	f104 0308 	add.w	r3, r4, #8
 801127a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801127c:	2e00      	cmp	r6, #0
 801127e:	da1b      	bge.n	80112b8 <_svfprintf_r+0xe60>
 8011280:	4f2a      	ldr	r7, [pc, #168]	@ (801132c <_svfprintf_r+0xed4>)
 8011282:	4276      	negs	r6, r6
 8011284:	461a      	mov	r2, r3
 8011286:	2410      	movs	r4, #16
 8011288:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801128c:	2e10      	cmp	r6, #16
 801128e:	f101 0101 	add.w	r1, r1, #1
 8011292:	f103 0308 	add.w	r3, r3, #8
 8011296:	6017      	str	r7, [r2, #0]
 8011298:	dc33      	bgt.n	8011302 <_svfprintf_r+0xeaa>
 801129a:	6056      	str	r6, [r2, #4]
 801129c:	2907      	cmp	r1, #7
 801129e:	4406      	add	r6, r0
 80112a0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80112a4:	dd08      	ble.n	80112b8 <_svfprintf_r+0xe60>
 80112a6:	9803      	ldr	r0, [sp, #12]
 80112a8:	aa26      	add	r2, sp, #152	@ 0x98
 80112aa:	4659      	mov	r1, fp
 80112ac:	f002 f9cf 	bl	801364e <__ssprint_r>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	f040 824c 	bne.w	801174e <_svfprintf_r+0x12f6>
 80112b6:	ab29      	add	r3, sp, #164	@ 0xa4
 80112b8:	9a04      	ldr	r2, [sp, #16]
 80112ba:	9904      	ldr	r1, [sp, #16]
 80112bc:	605a      	str	r2, [r3, #4]
 80112be:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80112c0:	f8c3 9000 	str.w	r9, [r3]
 80112c4:	440a      	add	r2, r1
 80112c6:	9228      	str	r2, [sp, #160]	@ 0xa0
 80112c8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80112ca:	3201      	adds	r2, #1
 80112cc:	2a07      	cmp	r2, #7
 80112ce:	9227      	str	r2, [sp, #156]	@ 0x9c
 80112d0:	f73f af7c 	bgt.w	80111cc <_svfprintf_r+0xd74>
 80112d4:	f103 0408 	add.w	r4, r3, #8
 80112d8:	e4c8      	b.n	8010c6c <_svfprintf_r+0x814>
 80112da:	9803      	ldr	r0, [sp, #12]
 80112dc:	aa26      	add	r2, sp, #152	@ 0x98
 80112de:	4659      	mov	r1, fp
 80112e0:	f002 f9b5 	bl	801364e <__ssprint_r>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	f040 8232 	bne.w	801174e <_svfprintf_r+0x12f6>
 80112ea:	ac29      	add	r4, sp, #164	@ 0xa4
 80112ec:	e7af      	b.n	801124e <_svfprintf_r+0xdf6>
 80112ee:	9803      	ldr	r0, [sp, #12]
 80112f0:	aa26      	add	r2, sp, #152	@ 0x98
 80112f2:	4659      	mov	r1, fp
 80112f4:	f002 f9ab 	bl	801364e <__ssprint_r>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	f040 8228 	bne.w	801174e <_svfprintf_r+0x12f6>
 80112fe:	ab29      	add	r3, sp, #164	@ 0xa4
 8011300:	e7bb      	b.n	801127a <_svfprintf_r+0xe22>
 8011302:	3010      	adds	r0, #16
 8011304:	2907      	cmp	r1, #7
 8011306:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801130a:	6054      	str	r4, [r2, #4]
 801130c:	dd08      	ble.n	8011320 <_svfprintf_r+0xec8>
 801130e:	9803      	ldr	r0, [sp, #12]
 8011310:	aa26      	add	r2, sp, #152	@ 0x98
 8011312:	4659      	mov	r1, fp
 8011314:	f002 f99b 	bl	801364e <__ssprint_r>
 8011318:	2800      	cmp	r0, #0
 801131a:	f040 8218 	bne.w	801174e <_svfprintf_r+0x12f6>
 801131e:	ab29      	add	r3, sp, #164	@ 0xa4
 8011320:	3e10      	subs	r6, #16
 8011322:	461a      	mov	r2, r3
 8011324:	e7b0      	b.n	8011288 <_svfprintf_r+0xe30>
 8011326:	bf00      	nop
 8011328:	0801567e 	.word	0x0801567e
 801132c:	08015680 	.word	0x08015680
 8011330:	9b04      	ldr	r3, [sp, #16]
 8011332:	444b      	add	r3, r9
 8011334:	9306      	str	r3, [sp, #24]
 8011336:	9b04      	ldr	r3, [sp, #16]
 8011338:	42b3      	cmp	r3, r6
 801133a:	bfa8      	it	ge
 801133c:	4633      	movge	r3, r6
 801133e:	2b00      	cmp	r3, #0
 8011340:	4698      	mov	r8, r3
 8011342:	dd0b      	ble.n	801135c <_svfprintf_r+0xf04>
 8011344:	e9c4 9300 	strd	r9, r3, [r4]
 8011348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801134a:	4443      	add	r3, r8
 801134c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801134e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011350:	3301      	adds	r3, #1
 8011352:	2b07      	cmp	r3, #7
 8011354:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011356:	f300 8089 	bgt.w	801146c <_svfprintf_r+0x1014>
 801135a:	3408      	adds	r4, #8
 801135c:	4643      	mov	r3, r8
 801135e:	2b00      	cmp	r3, #0
 8011360:	bfac      	ite	ge
 8011362:	eba6 0808 	subge.w	r8, r6, r8
 8011366:	46b0      	movlt	r8, r6
 8011368:	f1b8 0f00 	cmp.w	r8, #0
 801136c:	dd1b      	ble.n	80113a6 <_svfprintf_r+0xf4e>
 801136e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8011372:	4897      	ldr	r0, [pc, #604]	@ (80115d0 <_svfprintf_r+0x1178>)
 8011374:	6020      	str	r0, [r4, #0]
 8011376:	f1b8 0f10 	cmp.w	r8, #16
 801137a:	f102 0201 	add.w	r2, r2, #1
 801137e:	f104 0108 	add.w	r1, r4, #8
 8011382:	dc7d      	bgt.n	8011480 <_svfprintf_r+0x1028>
 8011384:	4443      	add	r3, r8
 8011386:	2a07      	cmp	r2, #7
 8011388:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801138c:	f8c4 8004 	str.w	r8, [r4, #4]
 8011390:	f340 808a 	ble.w	80114a8 <_svfprintf_r+0x1050>
 8011394:	9803      	ldr	r0, [sp, #12]
 8011396:	aa26      	add	r2, sp, #152	@ 0x98
 8011398:	4659      	mov	r1, fp
 801139a:	f002 f958 	bl	801364e <__ssprint_r>
 801139e:	2800      	cmp	r0, #0
 80113a0:	f040 81d5 	bne.w	801174e <_svfprintf_r+0x12f6>
 80113a4:	ac29      	add	r4, sp, #164	@ 0xa4
 80113a6:	eb09 0806 	add.w	r8, r9, r6
 80113aa:	056e      	lsls	r6, r5, #21
 80113ac:	d508      	bpl.n	80113c0 <_svfprintf_r+0xf68>
 80113ae:	9b08      	ldr	r3, [sp, #32]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d17b      	bne.n	80114ac <_svfprintf_r+0x1054>
 80113b4:	2f00      	cmp	r7, #0
 80113b6:	d17b      	bne.n	80114b0 <_svfprintf_r+0x1058>
 80113b8:	9b06      	ldr	r3, [sp, #24]
 80113ba:	4598      	cmp	r8, r3
 80113bc:	bf28      	it	cs
 80113be:	4698      	movcs	r8, r3
 80113c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80113c2:	9a04      	ldr	r2, [sp, #16]
 80113c4:	4293      	cmp	r3, r2
 80113c6:	db01      	blt.n	80113cc <_svfprintf_r+0xf74>
 80113c8:	07e8      	lsls	r0, r5, #31
 80113ca:	d50e      	bpl.n	80113ea <_svfprintf_r+0xf92>
 80113cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80113ce:	6023      	str	r3, [r4, #0]
 80113d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80113d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80113d4:	6063      	str	r3, [r4, #4]
 80113d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80113d8:	4413      	add	r3, r2
 80113da:	9328      	str	r3, [sp, #160]	@ 0xa0
 80113dc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80113de:	3301      	adds	r3, #1
 80113e0:	2b07      	cmp	r3, #7
 80113e2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80113e4:	f300 80df 	bgt.w	80115a6 <_svfprintf_r+0x114e>
 80113e8:	3408      	adds	r4, #8
 80113ea:	9b04      	ldr	r3, [sp, #16]
 80113ec:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80113ee:	1bdf      	subs	r7, r3, r7
 80113f0:	9b06      	ldr	r3, [sp, #24]
 80113f2:	eba3 0308 	sub.w	r3, r3, r8
 80113f6:	429f      	cmp	r7, r3
 80113f8:	bfa8      	it	ge
 80113fa:	461f      	movge	r7, r3
 80113fc:	2f00      	cmp	r7, #0
 80113fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011400:	dd0a      	ble.n	8011418 <_svfprintf_r+0xfc0>
 8011402:	443b      	add	r3, r7
 8011404:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011406:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011408:	3301      	adds	r3, #1
 801140a:	2b07      	cmp	r3, #7
 801140c:	e9c4 8700 	strd	r8, r7, [r4]
 8011410:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011412:	f300 80d2 	bgt.w	80115ba <_svfprintf_r+0x1162>
 8011416:	3408      	adds	r4, #8
 8011418:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801141a:	9b04      	ldr	r3, [sp, #16]
 801141c:	2f00      	cmp	r7, #0
 801141e:	eba3 0606 	sub.w	r6, r3, r6
 8011422:	bfa8      	it	ge
 8011424:	1bf6      	subge	r6, r6, r7
 8011426:	2e00      	cmp	r6, #0
 8011428:	f77f ac20 	ble.w	8010c6c <_svfprintf_r+0x814>
 801142c:	4f68      	ldr	r7, [pc, #416]	@ (80115d0 <_svfprintf_r+0x1178>)
 801142e:	f04f 0810 	mov.w	r8, #16
 8011432:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011436:	2e10      	cmp	r6, #16
 8011438:	f103 0301 	add.w	r3, r3, #1
 801143c:	f104 0108 	add.w	r1, r4, #8
 8011440:	6027      	str	r7, [r4, #0]
 8011442:	f77f aebc 	ble.w	80111be <_svfprintf_r+0xd66>
 8011446:	3210      	adds	r2, #16
 8011448:	2b07      	cmp	r3, #7
 801144a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801144e:	f8c4 8004 	str.w	r8, [r4, #4]
 8011452:	dd08      	ble.n	8011466 <_svfprintf_r+0x100e>
 8011454:	9803      	ldr	r0, [sp, #12]
 8011456:	aa26      	add	r2, sp, #152	@ 0x98
 8011458:	4659      	mov	r1, fp
 801145a:	f002 f8f8 	bl	801364e <__ssprint_r>
 801145e:	2800      	cmp	r0, #0
 8011460:	f040 8175 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011464:	a929      	add	r1, sp, #164	@ 0xa4
 8011466:	3e10      	subs	r6, #16
 8011468:	460c      	mov	r4, r1
 801146a:	e7e2      	b.n	8011432 <_svfprintf_r+0xfda>
 801146c:	9803      	ldr	r0, [sp, #12]
 801146e:	aa26      	add	r2, sp, #152	@ 0x98
 8011470:	4659      	mov	r1, fp
 8011472:	f002 f8ec 	bl	801364e <__ssprint_r>
 8011476:	2800      	cmp	r0, #0
 8011478:	f040 8169 	bne.w	801174e <_svfprintf_r+0x12f6>
 801147c:	ac29      	add	r4, sp, #164	@ 0xa4
 801147e:	e76d      	b.n	801135c <_svfprintf_r+0xf04>
 8011480:	2010      	movs	r0, #16
 8011482:	4403      	add	r3, r0
 8011484:	2a07      	cmp	r2, #7
 8011486:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801148a:	6060      	str	r0, [r4, #4]
 801148c:	dd08      	ble.n	80114a0 <_svfprintf_r+0x1048>
 801148e:	9803      	ldr	r0, [sp, #12]
 8011490:	aa26      	add	r2, sp, #152	@ 0x98
 8011492:	4659      	mov	r1, fp
 8011494:	f002 f8db 	bl	801364e <__ssprint_r>
 8011498:	2800      	cmp	r0, #0
 801149a:	f040 8158 	bne.w	801174e <_svfprintf_r+0x12f6>
 801149e:	a929      	add	r1, sp, #164	@ 0xa4
 80114a0:	f1a8 0810 	sub.w	r8, r8, #16
 80114a4:	460c      	mov	r4, r1
 80114a6:	e762      	b.n	801136e <_svfprintf_r+0xf16>
 80114a8:	460c      	mov	r4, r1
 80114aa:	e77c      	b.n	80113a6 <_svfprintf_r+0xf4e>
 80114ac:	2f00      	cmp	r7, #0
 80114ae:	d04a      	beq.n	8011546 <_svfprintf_r+0x10ee>
 80114b0:	3f01      	subs	r7, #1
 80114b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80114b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80114ba:	6063      	str	r3, [r4, #4]
 80114bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80114be:	4413      	add	r3, r2
 80114c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80114c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80114c4:	3301      	adds	r3, #1
 80114c6:	2b07      	cmp	r3, #7
 80114c8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80114ca:	dc43      	bgt.n	8011554 <_svfprintf_r+0x10fc>
 80114cc:	3408      	adds	r4, #8
 80114ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d0:	781a      	ldrb	r2, [r3, #0]
 80114d2:	9b06      	ldr	r3, [sp, #24]
 80114d4:	eba3 0308 	sub.w	r3, r3, r8
 80114d8:	429a      	cmp	r2, r3
 80114da:	bfa8      	it	ge
 80114dc:	461a      	movge	r2, r3
 80114de:	2a00      	cmp	r2, #0
 80114e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80114e2:	4691      	mov	r9, r2
 80114e4:	dd09      	ble.n	80114fa <_svfprintf_r+0x10a2>
 80114e6:	4413      	add	r3, r2
 80114e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80114ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80114ec:	3301      	adds	r3, #1
 80114ee:	2b07      	cmp	r3, #7
 80114f0:	e9c4 8200 	strd	r8, r2, [r4]
 80114f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80114f6:	dc37      	bgt.n	8011568 <_svfprintf_r+0x1110>
 80114f8:	3408      	adds	r4, #8
 80114fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114fc:	781e      	ldrb	r6, [r3, #0]
 80114fe:	f1b9 0f00 	cmp.w	r9, #0
 8011502:	bfa8      	it	ge
 8011504:	eba6 0609 	subge.w	r6, r6, r9
 8011508:	2e00      	cmp	r6, #0
 801150a:	dd18      	ble.n	801153e <_svfprintf_r+0x10e6>
 801150c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011510:	482f      	ldr	r0, [pc, #188]	@ (80115d0 <_svfprintf_r+0x1178>)
 8011512:	6020      	str	r0, [r4, #0]
 8011514:	2e10      	cmp	r6, #16
 8011516:	f103 0301 	add.w	r3, r3, #1
 801151a:	f104 0108 	add.w	r1, r4, #8
 801151e:	dc2d      	bgt.n	801157c <_svfprintf_r+0x1124>
 8011520:	6066      	str	r6, [r4, #4]
 8011522:	2b07      	cmp	r3, #7
 8011524:	4416      	add	r6, r2
 8011526:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801152a:	dd3a      	ble.n	80115a2 <_svfprintf_r+0x114a>
 801152c:	9803      	ldr	r0, [sp, #12]
 801152e:	aa26      	add	r2, sp, #152	@ 0x98
 8011530:	4659      	mov	r1, fp
 8011532:	f002 f88c 	bl	801364e <__ssprint_r>
 8011536:	2800      	cmp	r0, #0
 8011538:	f040 8109 	bne.w	801174e <_svfprintf_r+0x12f6>
 801153c:	ac29      	add	r4, sp, #164	@ 0xa4
 801153e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	4498      	add	r8, r3
 8011544:	e733      	b.n	80113ae <_svfprintf_r+0xf56>
 8011546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011548:	3b01      	subs	r3, #1
 801154a:	9309      	str	r3, [sp, #36]	@ 0x24
 801154c:	9b08      	ldr	r3, [sp, #32]
 801154e:	3b01      	subs	r3, #1
 8011550:	9308      	str	r3, [sp, #32]
 8011552:	e7ae      	b.n	80114b2 <_svfprintf_r+0x105a>
 8011554:	9803      	ldr	r0, [sp, #12]
 8011556:	aa26      	add	r2, sp, #152	@ 0x98
 8011558:	4659      	mov	r1, fp
 801155a:	f002 f878 	bl	801364e <__ssprint_r>
 801155e:	2800      	cmp	r0, #0
 8011560:	f040 80f5 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011564:	ac29      	add	r4, sp, #164	@ 0xa4
 8011566:	e7b2      	b.n	80114ce <_svfprintf_r+0x1076>
 8011568:	9803      	ldr	r0, [sp, #12]
 801156a:	aa26      	add	r2, sp, #152	@ 0x98
 801156c:	4659      	mov	r1, fp
 801156e:	f002 f86e 	bl	801364e <__ssprint_r>
 8011572:	2800      	cmp	r0, #0
 8011574:	f040 80eb 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011578:	ac29      	add	r4, sp, #164	@ 0xa4
 801157a:	e7be      	b.n	80114fa <_svfprintf_r+0x10a2>
 801157c:	2010      	movs	r0, #16
 801157e:	4402      	add	r2, r0
 8011580:	2b07      	cmp	r3, #7
 8011582:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011586:	6060      	str	r0, [r4, #4]
 8011588:	dd08      	ble.n	801159c <_svfprintf_r+0x1144>
 801158a:	9803      	ldr	r0, [sp, #12]
 801158c:	aa26      	add	r2, sp, #152	@ 0x98
 801158e:	4659      	mov	r1, fp
 8011590:	f002 f85d 	bl	801364e <__ssprint_r>
 8011594:	2800      	cmp	r0, #0
 8011596:	f040 80da 	bne.w	801174e <_svfprintf_r+0x12f6>
 801159a:	a929      	add	r1, sp, #164	@ 0xa4
 801159c:	3e10      	subs	r6, #16
 801159e:	460c      	mov	r4, r1
 80115a0:	e7b4      	b.n	801150c <_svfprintf_r+0x10b4>
 80115a2:	460c      	mov	r4, r1
 80115a4:	e7cb      	b.n	801153e <_svfprintf_r+0x10e6>
 80115a6:	9803      	ldr	r0, [sp, #12]
 80115a8:	aa26      	add	r2, sp, #152	@ 0x98
 80115aa:	4659      	mov	r1, fp
 80115ac:	f002 f84f 	bl	801364e <__ssprint_r>
 80115b0:	2800      	cmp	r0, #0
 80115b2:	f040 80cc 	bne.w	801174e <_svfprintf_r+0x12f6>
 80115b6:	ac29      	add	r4, sp, #164	@ 0xa4
 80115b8:	e717      	b.n	80113ea <_svfprintf_r+0xf92>
 80115ba:	9803      	ldr	r0, [sp, #12]
 80115bc:	aa26      	add	r2, sp, #152	@ 0x98
 80115be:	4659      	mov	r1, fp
 80115c0:	f002 f845 	bl	801364e <__ssprint_r>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	f040 80c2 	bne.w	801174e <_svfprintf_r+0x12f6>
 80115ca:	ac29      	add	r4, sp, #164	@ 0xa4
 80115cc:	e724      	b.n	8011418 <_svfprintf_r+0xfc0>
 80115ce:	bf00      	nop
 80115d0:	08015680 	.word	0x08015680
 80115d4:	9904      	ldr	r1, [sp, #16]
 80115d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115d8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80115da:	2901      	cmp	r1, #1
 80115dc:	f103 0301 	add.w	r3, r3, #1
 80115e0:	f102 0201 	add.w	r2, r2, #1
 80115e4:	f104 0608 	add.w	r6, r4, #8
 80115e8:	dc02      	bgt.n	80115f0 <_svfprintf_r+0x1198>
 80115ea:	07e9      	lsls	r1, r5, #31
 80115ec:	f140 8083 	bpl.w	80116f6 <_svfprintf_r+0x129e>
 80115f0:	2101      	movs	r1, #1
 80115f2:	2a07      	cmp	r2, #7
 80115f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80115f8:	f8c4 9000 	str.w	r9, [r4]
 80115fc:	6061      	str	r1, [r4, #4]
 80115fe:	dd08      	ble.n	8011612 <_svfprintf_r+0x11ba>
 8011600:	9803      	ldr	r0, [sp, #12]
 8011602:	aa26      	add	r2, sp, #152	@ 0x98
 8011604:	4659      	mov	r1, fp
 8011606:	f002 f822 	bl	801364e <__ssprint_r>
 801160a:	2800      	cmp	r0, #0
 801160c:	f040 809f 	bne.w	801174e <_svfprintf_r+0x12f6>
 8011610:	ae29      	add	r6, sp, #164	@ 0xa4
 8011612:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011614:	6033      	str	r3, [r6, #0]
 8011616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011618:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801161a:	6073      	str	r3, [r6, #4]
 801161c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801161e:	4413      	add	r3, r2
 8011620:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011622:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011624:	3301      	adds	r3, #1
 8011626:	2b07      	cmp	r3, #7
 8011628:	9327      	str	r3, [sp, #156]	@ 0x9c
 801162a:	dc33      	bgt.n	8011694 <_svfprintf_r+0x123c>
 801162c:	3608      	adds	r6, #8
 801162e:	9b04      	ldr	r3, [sp, #16]
 8011630:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011634:	1e5c      	subs	r4, r3, #1
 8011636:	2200      	movs	r2, #0
 8011638:	2300      	movs	r3, #0
 801163a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801163e:	f7ef fa6b 	bl	8000b18 <__aeabi_dcmpeq>
 8011642:	2800      	cmp	r0, #0
 8011644:	d12f      	bne.n	80116a6 <_svfprintf_r+0x124e>
 8011646:	f109 0201 	add.w	r2, r9, #1
 801164a:	e9c6 2400 	strd	r2, r4, [r6]
 801164e:	9a04      	ldr	r2, [sp, #16]
 8011650:	f108 0301 	add.w	r3, r8, #1
 8011654:	3f01      	subs	r7, #1
 8011656:	4417      	add	r7, r2
 8011658:	2b07      	cmp	r3, #7
 801165a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801165e:	dd53      	ble.n	8011708 <_svfprintf_r+0x12b0>
 8011660:	9803      	ldr	r0, [sp, #12]
 8011662:	aa26      	add	r2, sp, #152	@ 0x98
 8011664:	4659      	mov	r1, fp
 8011666:	f001 fff2 	bl	801364e <__ssprint_r>
 801166a:	2800      	cmp	r0, #0
 801166c:	d16f      	bne.n	801174e <_svfprintf_r+0x12f6>
 801166e:	ae29      	add	r6, sp, #164	@ 0xa4
 8011670:	ab22      	add	r3, sp, #136	@ 0x88
 8011672:	6033      	str	r3, [r6, #0]
 8011674:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011676:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011678:	6073      	str	r3, [r6, #4]
 801167a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801167c:	4413      	add	r3, r2
 801167e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011680:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011682:	3301      	adds	r3, #1
 8011684:	2b07      	cmp	r3, #7
 8011686:	9327      	str	r3, [sp, #156]	@ 0x9c
 8011688:	f73f ada0 	bgt.w	80111cc <_svfprintf_r+0xd74>
 801168c:	f106 0408 	add.w	r4, r6, #8
 8011690:	f7ff baec 	b.w	8010c6c <_svfprintf_r+0x814>
 8011694:	9803      	ldr	r0, [sp, #12]
 8011696:	aa26      	add	r2, sp, #152	@ 0x98
 8011698:	4659      	mov	r1, fp
 801169a:	f001 ffd8 	bl	801364e <__ssprint_r>
 801169e:	2800      	cmp	r0, #0
 80116a0:	d155      	bne.n	801174e <_svfprintf_r+0x12f6>
 80116a2:	ae29      	add	r6, sp, #164	@ 0xa4
 80116a4:	e7c3      	b.n	801162e <_svfprintf_r+0x11d6>
 80116a6:	9b04      	ldr	r3, [sp, #16]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	dde1      	ble.n	8011670 <_svfprintf_r+0x1218>
 80116ac:	4f57      	ldr	r7, [pc, #348]	@ (801180c <_svfprintf_r+0x13b4>)
 80116ae:	f04f 0810 	mov.w	r8, #16
 80116b2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80116b6:	2c10      	cmp	r4, #16
 80116b8:	f103 0301 	add.w	r3, r3, #1
 80116bc:	f106 0108 	add.w	r1, r6, #8
 80116c0:	6037      	str	r7, [r6, #0]
 80116c2:	dc07      	bgt.n	80116d4 <_svfprintf_r+0x127c>
 80116c4:	6074      	str	r4, [r6, #4]
 80116c6:	2b07      	cmp	r3, #7
 80116c8:	4414      	add	r4, r2
 80116ca:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80116ce:	dcc7      	bgt.n	8011660 <_svfprintf_r+0x1208>
 80116d0:	460e      	mov	r6, r1
 80116d2:	e7cd      	b.n	8011670 <_svfprintf_r+0x1218>
 80116d4:	3210      	adds	r2, #16
 80116d6:	2b07      	cmp	r3, #7
 80116d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80116dc:	f8c6 8004 	str.w	r8, [r6, #4]
 80116e0:	dd06      	ble.n	80116f0 <_svfprintf_r+0x1298>
 80116e2:	9803      	ldr	r0, [sp, #12]
 80116e4:	aa26      	add	r2, sp, #152	@ 0x98
 80116e6:	4659      	mov	r1, fp
 80116e8:	f001 ffb1 	bl	801364e <__ssprint_r>
 80116ec:	bb78      	cbnz	r0, 801174e <_svfprintf_r+0x12f6>
 80116ee:	a929      	add	r1, sp, #164	@ 0xa4
 80116f0:	3c10      	subs	r4, #16
 80116f2:	460e      	mov	r6, r1
 80116f4:	e7dd      	b.n	80116b2 <_svfprintf_r+0x125a>
 80116f6:	2101      	movs	r1, #1
 80116f8:	2a07      	cmp	r2, #7
 80116fa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80116fe:	f8c4 9000 	str.w	r9, [r4]
 8011702:	6061      	str	r1, [r4, #4]
 8011704:	ddb4      	ble.n	8011670 <_svfprintf_r+0x1218>
 8011706:	e7ab      	b.n	8011660 <_svfprintf_r+0x1208>
 8011708:	3608      	adds	r6, #8
 801170a:	e7b1      	b.n	8011670 <_svfprintf_r+0x1218>
 801170c:	460c      	mov	r4, r1
 801170e:	f7ff baad 	b.w	8010c6c <_svfprintf_r+0x814>
 8011712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011714:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011716:	1a9d      	subs	r5, r3, r2
 8011718:	2d00      	cmp	r5, #0
 801171a:	f77f aaaa 	ble.w	8010c72 <_svfprintf_r+0x81a>
 801171e:	4e3c      	ldr	r6, [pc, #240]	@ (8011810 <_svfprintf_r+0x13b8>)
 8011720:	2710      	movs	r7, #16
 8011722:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8011726:	2d10      	cmp	r5, #16
 8011728:	f103 0301 	add.w	r3, r3, #1
 801172c:	6026      	str	r6, [r4, #0]
 801172e:	dc18      	bgt.n	8011762 <_svfprintf_r+0x130a>
 8011730:	442a      	add	r2, r5
 8011732:	2b07      	cmp	r3, #7
 8011734:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8011738:	6065      	str	r5, [r4, #4]
 801173a:	f77f aa9a 	ble.w	8010c72 <_svfprintf_r+0x81a>
 801173e:	9803      	ldr	r0, [sp, #12]
 8011740:	aa26      	add	r2, sp, #152	@ 0x98
 8011742:	4659      	mov	r1, fp
 8011744:	f001 ff83 	bl	801364e <__ssprint_r>
 8011748:	2800      	cmp	r0, #0
 801174a:	f43f aa92 	beq.w	8010c72 <_svfprintf_r+0x81a>
 801174e:	f1ba 0f00 	cmp.w	sl, #0
 8011752:	f43f a89a 	beq.w	801088a <_svfprintf_r+0x432>
 8011756:	9803      	ldr	r0, [sp, #12]
 8011758:	4651      	mov	r1, sl
 801175a:	f7fe fdbb 	bl	80102d4 <_free_r>
 801175e:	f7ff b894 	b.w	801088a <_svfprintf_r+0x432>
 8011762:	3210      	adds	r2, #16
 8011764:	2b07      	cmp	r3, #7
 8011766:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801176a:	6067      	str	r7, [r4, #4]
 801176c:	dc02      	bgt.n	8011774 <_svfprintf_r+0x131c>
 801176e:	3408      	adds	r4, #8
 8011770:	3d10      	subs	r5, #16
 8011772:	e7d6      	b.n	8011722 <_svfprintf_r+0x12ca>
 8011774:	9803      	ldr	r0, [sp, #12]
 8011776:	aa26      	add	r2, sp, #152	@ 0x98
 8011778:	4659      	mov	r1, fp
 801177a:	f001 ff68 	bl	801364e <__ssprint_r>
 801177e:	2800      	cmp	r0, #0
 8011780:	d1e5      	bne.n	801174e <_svfprintf_r+0x12f6>
 8011782:	ac29      	add	r4, sp, #164	@ 0xa4
 8011784:	e7f4      	b.n	8011770 <_svfprintf_r+0x1318>
 8011786:	9803      	ldr	r0, [sp, #12]
 8011788:	4651      	mov	r1, sl
 801178a:	f7fe fda3 	bl	80102d4 <_free_r>
 801178e:	f7ff ba88 	b.w	8010ca2 <_svfprintf_r+0x84a>
 8011792:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011794:	2b00      	cmp	r3, #0
 8011796:	f43f a878 	beq.w	801088a <_svfprintf_r+0x432>
 801179a:	9803      	ldr	r0, [sp, #12]
 801179c:	aa26      	add	r2, sp, #152	@ 0x98
 801179e:	4659      	mov	r1, fp
 80117a0:	f001 ff55 	bl	801364e <__ssprint_r>
 80117a4:	f7ff b871 	b.w	801088a <_svfprintf_r+0x432>
 80117a8:	ea56 0207 	orrs.w	r2, r6, r7
 80117ac:	9508      	str	r5, [sp, #32]
 80117ae:	f43f ab7a 	beq.w	8010ea6 <_svfprintf_r+0xa4e>
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	f43f abfb 	beq.w	8010fae <_svfprintf_r+0xb56>
 80117b8:	2b02      	cmp	r3, #2
 80117ba:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80117be:	f43f ac3f 	beq.w	8011040 <_svfprintf_r+0xbe8>
 80117c2:	f006 0307 	and.w	r3, r6, #7
 80117c6:	08f6      	lsrs	r6, r6, #3
 80117c8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80117cc:	08ff      	lsrs	r7, r7, #3
 80117ce:	3330      	adds	r3, #48	@ 0x30
 80117d0:	ea56 0107 	orrs.w	r1, r6, r7
 80117d4:	464a      	mov	r2, r9
 80117d6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80117da:	d1f2      	bne.n	80117c2 <_svfprintf_r+0x136a>
 80117dc:	9908      	ldr	r1, [sp, #32]
 80117de:	07c8      	lsls	r0, r1, #31
 80117e0:	d506      	bpl.n	80117f0 <_svfprintf_r+0x1398>
 80117e2:	2b30      	cmp	r3, #48	@ 0x30
 80117e4:	d004      	beq.n	80117f0 <_svfprintf_r+0x1398>
 80117e6:	2330      	movs	r3, #48	@ 0x30
 80117e8:	f809 3c01 	strb.w	r3, [r9, #-1]
 80117ec:	f1a2 0902 	sub.w	r9, r2, #2
 80117f0:	ab52      	add	r3, sp, #328	@ 0x148
 80117f2:	9d08      	ldr	r5, [sp, #32]
 80117f4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80117f8:	f04f 0a00 	mov.w	sl, #0
 80117fc:	eba3 0809 	sub.w	r8, r3, r9
 8011800:	4657      	mov	r7, sl
 8011802:	f8cd a020 	str.w	sl, [sp, #32]
 8011806:	4656      	mov	r6, sl
 8011808:	f7ff b97c 	b.w	8010b04 <_svfprintf_r+0x6ac>
 801180c:	08015680 	.word	0x08015680
 8011810:	08015690 	.word	0x08015690

08011814 <_fclose_r>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	4605      	mov	r5, r0
 8011818:	460c      	mov	r4, r1
 801181a:	b1b1      	cbz	r1, 801184a <_fclose_r+0x36>
 801181c:	b118      	cbz	r0, 8011826 <_fclose_r+0x12>
 801181e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011820:	b90b      	cbnz	r3, 8011826 <_fclose_r+0x12>
 8011822:	f7fe fa7d 	bl	800fd20 <__sinit>
 8011826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011828:	07de      	lsls	r6, r3, #31
 801182a:	d405      	bmi.n	8011838 <_fclose_r+0x24>
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	0598      	lsls	r0, r3, #22
 8011830:	d402      	bmi.n	8011838 <_fclose_r+0x24>
 8011832:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011834:	f7fe fccc 	bl	80101d0 <__retarget_lock_acquire_recursive>
 8011838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183c:	b943      	cbnz	r3, 8011850 <_fclose_r+0x3c>
 801183e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011840:	07d9      	lsls	r1, r3, #31
 8011842:	d402      	bmi.n	801184a <_fclose_r+0x36>
 8011844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011846:	f7fe fcc4 	bl	80101d2 <__retarget_lock_release_recursive>
 801184a:	2600      	movs	r6, #0
 801184c:	4630      	mov	r0, r6
 801184e:	bd70      	pop	{r4, r5, r6, pc}
 8011850:	4621      	mov	r1, r4
 8011852:	4628      	mov	r0, r5
 8011854:	f000 f834 	bl	80118c0 <__sflush_r>
 8011858:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801185a:	4606      	mov	r6, r0
 801185c:	b133      	cbz	r3, 801186c <_fclose_r+0x58>
 801185e:	69e1      	ldr	r1, [r4, #28]
 8011860:	4628      	mov	r0, r5
 8011862:	4798      	blx	r3
 8011864:	2800      	cmp	r0, #0
 8011866:	bfb8      	it	lt
 8011868:	f04f 36ff 	movlt.w	r6, #4294967295
 801186c:	89a3      	ldrh	r3, [r4, #12]
 801186e:	061a      	lsls	r2, r3, #24
 8011870:	d503      	bpl.n	801187a <_fclose_r+0x66>
 8011872:	6921      	ldr	r1, [r4, #16]
 8011874:	4628      	mov	r0, r5
 8011876:	f7fe fd2d 	bl	80102d4 <_free_r>
 801187a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801187c:	b141      	cbz	r1, 8011890 <_fclose_r+0x7c>
 801187e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011882:	4299      	cmp	r1, r3
 8011884:	d002      	beq.n	801188c <_fclose_r+0x78>
 8011886:	4628      	mov	r0, r5
 8011888:	f7fe fd24 	bl	80102d4 <_free_r>
 801188c:	2300      	movs	r3, #0
 801188e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011890:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011892:	b121      	cbz	r1, 801189e <_fclose_r+0x8a>
 8011894:	4628      	mov	r0, r5
 8011896:	f7fe fd1d 	bl	80102d4 <_free_r>
 801189a:	2300      	movs	r3, #0
 801189c:	6463      	str	r3, [r4, #68]	@ 0x44
 801189e:	f7fe fa33 	bl	800fd08 <__sfp_lock_acquire>
 80118a2:	2300      	movs	r3, #0
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118a8:	07db      	lsls	r3, r3, #31
 80118aa:	d402      	bmi.n	80118b2 <_fclose_r+0x9e>
 80118ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118ae:	f7fe fc90 	bl	80101d2 <__retarget_lock_release_recursive>
 80118b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118b4:	f7fe fc8b 	bl	80101ce <__retarget_lock_close_recursive>
 80118b8:	f7fe fa2c 	bl	800fd14 <__sfp_lock_release>
 80118bc:	e7c6      	b.n	801184c <_fclose_r+0x38>
	...

080118c0 <__sflush_r>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	4605      	mov	r5, r0
 80118c6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80118ca:	0706      	lsls	r6, r0, #28
 80118cc:	460c      	mov	r4, r1
 80118ce:	d457      	bmi.n	8011980 <__sflush_r+0xc0>
 80118d0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80118d4:	818b      	strh	r3, [r1, #12]
 80118d6:	684b      	ldr	r3, [r1, #4]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	dc02      	bgt.n	80118e2 <__sflush_r+0x22>
 80118dc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80118de:	2b00      	cmp	r3, #0
 80118e0:	dd4c      	ble.n	801197c <__sflush_r+0xbc>
 80118e2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80118e4:	2e00      	cmp	r6, #0
 80118e6:	d049      	beq.n	801197c <__sflush_r+0xbc>
 80118e8:	2300      	movs	r3, #0
 80118ea:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80118ee:	682f      	ldr	r7, [r5, #0]
 80118f0:	69e1      	ldr	r1, [r4, #28]
 80118f2:	602b      	str	r3, [r5, #0]
 80118f4:	d034      	beq.n	8011960 <__sflush_r+0xa0>
 80118f6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	0759      	lsls	r1, r3, #29
 80118fc:	d505      	bpl.n	801190a <__sflush_r+0x4a>
 80118fe:	6863      	ldr	r3, [r4, #4]
 8011900:	1ad2      	subs	r2, r2, r3
 8011902:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011904:	b10b      	cbz	r3, 801190a <__sflush_r+0x4a>
 8011906:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011908:	1ad2      	subs	r2, r2, r3
 801190a:	2300      	movs	r3, #0
 801190c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801190e:	69e1      	ldr	r1, [r4, #28]
 8011910:	4628      	mov	r0, r5
 8011912:	47b0      	blx	r6
 8011914:	1c43      	adds	r3, r0, #1
 8011916:	d106      	bne.n	8011926 <__sflush_r+0x66>
 8011918:	682a      	ldr	r2, [r5, #0]
 801191a:	2a1d      	cmp	r2, #29
 801191c:	d848      	bhi.n	80119b0 <__sflush_r+0xf0>
 801191e:	4b2b      	ldr	r3, [pc, #172]	@ (80119cc <__sflush_r+0x10c>)
 8011920:	4113      	asrs	r3, r2
 8011922:	07de      	lsls	r6, r3, #31
 8011924:	d444      	bmi.n	80119b0 <__sflush_r+0xf0>
 8011926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801192a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801192e:	81a2      	strh	r2, [r4, #12]
 8011930:	2200      	movs	r2, #0
 8011932:	6062      	str	r2, [r4, #4]
 8011934:	04d9      	lsls	r1, r3, #19
 8011936:	6922      	ldr	r2, [r4, #16]
 8011938:	6022      	str	r2, [r4, #0]
 801193a:	d504      	bpl.n	8011946 <__sflush_r+0x86>
 801193c:	1c42      	adds	r2, r0, #1
 801193e:	d101      	bne.n	8011944 <__sflush_r+0x84>
 8011940:	682b      	ldr	r3, [r5, #0]
 8011942:	b903      	cbnz	r3, 8011946 <__sflush_r+0x86>
 8011944:	6520      	str	r0, [r4, #80]	@ 0x50
 8011946:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011948:	602f      	str	r7, [r5, #0]
 801194a:	b1b9      	cbz	r1, 801197c <__sflush_r+0xbc>
 801194c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011950:	4299      	cmp	r1, r3
 8011952:	d002      	beq.n	801195a <__sflush_r+0x9a>
 8011954:	4628      	mov	r0, r5
 8011956:	f7fe fcbd 	bl	80102d4 <_free_r>
 801195a:	2300      	movs	r3, #0
 801195c:	6323      	str	r3, [r4, #48]	@ 0x30
 801195e:	e00d      	b.n	801197c <__sflush_r+0xbc>
 8011960:	2301      	movs	r3, #1
 8011962:	4628      	mov	r0, r5
 8011964:	47b0      	blx	r6
 8011966:	4602      	mov	r2, r0
 8011968:	1c50      	adds	r0, r2, #1
 801196a:	d1c5      	bne.n	80118f8 <__sflush_r+0x38>
 801196c:	682b      	ldr	r3, [r5, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d0c2      	beq.n	80118f8 <__sflush_r+0x38>
 8011972:	2b1d      	cmp	r3, #29
 8011974:	d001      	beq.n	801197a <__sflush_r+0xba>
 8011976:	2b16      	cmp	r3, #22
 8011978:	d11a      	bne.n	80119b0 <__sflush_r+0xf0>
 801197a:	602f      	str	r7, [r5, #0]
 801197c:	2000      	movs	r0, #0
 801197e:	e01e      	b.n	80119be <__sflush_r+0xfe>
 8011980:	690f      	ldr	r7, [r1, #16]
 8011982:	2f00      	cmp	r7, #0
 8011984:	d0fa      	beq.n	801197c <__sflush_r+0xbc>
 8011986:	0783      	lsls	r3, r0, #30
 8011988:	680e      	ldr	r6, [r1, #0]
 801198a:	bf08      	it	eq
 801198c:	694b      	ldreq	r3, [r1, #20]
 801198e:	600f      	str	r7, [r1, #0]
 8011990:	bf18      	it	ne
 8011992:	2300      	movne	r3, #0
 8011994:	eba6 0807 	sub.w	r8, r6, r7
 8011998:	608b      	str	r3, [r1, #8]
 801199a:	f1b8 0f00 	cmp.w	r8, #0
 801199e:	dded      	ble.n	801197c <__sflush_r+0xbc>
 80119a0:	69e1      	ldr	r1, [r4, #28]
 80119a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80119a4:	4643      	mov	r3, r8
 80119a6:	463a      	mov	r2, r7
 80119a8:	4628      	mov	r0, r5
 80119aa:	47b0      	blx	r6
 80119ac:	2800      	cmp	r0, #0
 80119ae:	dc08      	bgt.n	80119c2 <__sflush_r+0x102>
 80119b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	f04f 30ff 	mov.w	r0, #4294967295
 80119be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c2:	4407      	add	r7, r0
 80119c4:	eba8 0800 	sub.w	r8, r8, r0
 80119c8:	e7e7      	b.n	801199a <__sflush_r+0xda>
 80119ca:	bf00      	nop
 80119cc:	dfbffffe 	.word	0xdfbffffe

080119d0 <_fflush_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	460c      	mov	r4, r1
 80119d4:	4605      	mov	r5, r0
 80119d6:	b118      	cbz	r0, 80119e0 <_fflush_r+0x10>
 80119d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80119da:	b90b      	cbnz	r3, 80119e0 <_fflush_r+0x10>
 80119dc:	f7fe f9a0 	bl	800fd20 <__sinit>
 80119e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80119e4:	b1b8      	cbz	r0, 8011a16 <_fflush_r+0x46>
 80119e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119e8:	07db      	lsls	r3, r3, #31
 80119ea:	d404      	bmi.n	80119f6 <_fflush_r+0x26>
 80119ec:	0581      	lsls	r1, r0, #22
 80119ee:	d402      	bmi.n	80119f6 <_fflush_r+0x26>
 80119f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119f2:	f7fe fbed 	bl	80101d0 <__retarget_lock_acquire_recursive>
 80119f6:	4628      	mov	r0, r5
 80119f8:	4621      	mov	r1, r4
 80119fa:	f7ff ff61 	bl	80118c0 <__sflush_r>
 80119fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a00:	07da      	lsls	r2, r3, #31
 8011a02:	4605      	mov	r5, r0
 8011a04:	d405      	bmi.n	8011a12 <_fflush_r+0x42>
 8011a06:	89a3      	ldrh	r3, [r4, #12]
 8011a08:	059b      	lsls	r3, r3, #22
 8011a0a:	d402      	bmi.n	8011a12 <_fflush_r+0x42>
 8011a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a0e:	f7fe fbe0 	bl	80101d2 <__retarget_lock_release_recursive>
 8011a12:	4628      	mov	r0, r5
 8011a14:	bd38      	pop	{r3, r4, r5, pc}
 8011a16:	4605      	mov	r5, r0
 8011a18:	e7fb      	b.n	8011a12 <_fflush_r+0x42>
	...

08011a1c <__sfvwrite_r>:
 8011a1c:	6893      	ldr	r3, [r2, #8]
 8011a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a22:	4606      	mov	r6, r0
 8011a24:	460c      	mov	r4, r1
 8011a26:	4691      	mov	r9, r2
 8011a28:	b91b      	cbnz	r3, 8011a32 <__sfvwrite_r+0x16>
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	b003      	add	sp, #12
 8011a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a32:	898b      	ldrh	r3, [r1, #12]
 8011a34:	0718      	lsls	r0, r3, #28
 8011a36:	d550      	bpl.n	8011ada <__sfvwrite_r+0xbe>
 8011a38:	690b      	ldr	r3, [r1, #16]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d04d      	beq.n	8011ada <__sfvwrite_r+0xbe>
 8011a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a42:	f8d9 8000 	ldr.w	r8, [r9]
 8011a46:	f013 0702 	ands.w	r7, r3, #2
 8011a4a:	d16b      	bne.n	8011b24 <__sfvwrite_r+0x108>
 8011a4c:	f013 0301 	ands.w	r3, r3, #1
 8011a50:	f000 809c 	beq.w	8011b8c <__sfvwrite_r+0x170>
 8011a54:	4638      	mov	r0, r7
 8011a56:	46ba      	mov	sl, r7
 8011a58:	46bb      	mov	fp, r7
 8011a5a:	f1bb 0f00 	cmp.w	fp, #0
 8011a5e:	f000 8103 	beq.w	8011c68 <__sfvwrite_r+0x24c>
 8011a62:	b950      	cbnz	r0, 8011a7a <__sfvwrite_r+0x5e>
 8011a64:	465a      	mov	r2, fp
 8011a66:	210a      	movs	r1, #10
 8011a68:	4650      	mov	r0, sl
 8011a6a:	f7ee fbe1 	bl	8000230 <memchr>
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	f000 8100 	beq.w	8011c74 <__sfvwrite_r+0x258>
 8011a74:	3001      	adds	r0, #1
 8011a76:	eba0 070a 	sub.w	r7, r0, sl
 8011a7a:	6820      	ldr	r0, [r4, #0]
 8011a7c:	6921      	ldr	r1, [r4, #16]
 8011a7e:	68a5      	ldr	r5, [r4, #8]
 8011a80:	6963      	ldr	r3, [r4, #20]
 8011a82:	455f      	cmp	r7, fp
 8011a84:	463a      	mov	r2, r7
 8011a86:	bf28      	it	cs
 8011a88:	465a      	movcs	r2, fp
 8011a8a:	4288      	cmp	r0, r1
 8011a8c:	f240 80f5 	bls.w	8011c7a <__sfvwrite_r+0x25e>
 8011a90:	441d      	add	r5, r3
 8011a92:	42aa      	cmp	r2, r5
 8011a94:	f340 80f1 	ble.w	8011c7a <__sfvwrite_r+0x25e>
 8011a98:	4651      	mov	r1, sl
 8011a9a:	462a      	mov	r2, r5
 8011a9c:	f000 f9c4 	bl	8011e28 <memmove>
 8011aa0:	6823      	ldr	r3, [r4, #0]
 8011aa2:	442b      	add	r3, r5
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	f7ff ff91 	bl	80119d0 <_fflush_r>
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d167      	bne.n	8011b82 <__sfvwrite_r+0x166>
 8011ab2:	1b7f      	subs	r7, r7, r5
 8011ab4:	f040 80f9 	bne.w	8011caa <__sfvwrite_r+0x28e>
 8011ab8:	4621      	mov	r1, r4
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7ff ff88 	bl	80119d0 <_fflush_r>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d15e      	bne.n	8011b82 <__sfvwrite_r+0x166>
 8011ac4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011ac8:	1b5b      	subs	r3, r3, r5
 8011aca:	44aa      	add	sl, r5
 8011acc:	ebab 0b05 	sub.w	fp, fp, r5
 8011ad0:	f8c9 3008 	str.w	r3, [r9, #8]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1c0      	bne.n	8011a5a <__sfvwrite_r+0x3e>
 8011ad8:	e7a7      	b.n	8011a2a <__sfvwrite_r+0xe>
 8011ada:	4621      	mov	r1, r4
 8011adc:	4630      	mov	r0, r6
 8011ade:	f000 f94d 	bl	8011d7c <__swsetup_r>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	d0ab      	beq.n	8011a3e <__sfvwrite_r+0x22>
 8011ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8011aea:	e79f      	b.n	8011a2c <__sfvwrite_r+0x10>
 8011aec:	e9d8 a500 	ldrd	sl, r5, [r8]
 8011af0:	f108 0808 	add.w	r8, r8, #8
 8011af4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011af8:	69e1      	ldr	r1, [r4, #28]
 8011afa:	2d00      	cmp	r5, #0
 8011afc:	d0f6      	beq.n	8011aec <__sfvwrite_r+0xd0>
 8011afe:	42bd      	cmp	r5, r7
 8011b00:	462b      	mov	r3, r5
 8011b02:	4652      	mov	r2, sl
 8011b04:	bf28      	it	cs
 8011b06:	463b      	movcs	r3, r7
 8011b08:	4630      	mov	r0, r6
 8011b0a:	47d8      	blx	fp
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	dd38      	ble.n	8011b82 <__sfvwrite_r+0x166>
 8011b10:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011b14:	1a1b      	subs	r3, r3, r0
 8011b16:	4482      	add	sl, r0
 8011b18:	1a2d      	subs	r5, r5, r0
 8011b1a:	f8c9 3008 	str.w	r3, [r9, #8]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d1e8      	bne.n	8011af4 <__sfvwrite_r+0xd8>
 8011b22:	e782      	b.n	8011a2a <__sfvwrite_r+0xe>
 8011b24:	f04f 0a00 	mov.w	sl, #0
 8011b28:	4f61      	ldr	r7, [pc, #388]	@ (8011cb0 <__sfvwrite_r+0x294>)
 8011b2a:	4655      	mov	r5, sl
 8011b2c:	e7e2      	b.n	8011af4 <__sfvwrite_r+0xd8>
 8011b2e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8011b32:	f108 0808 	add.w	r8, r8, #8
 8011b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b3a:	6820      	ldr	r0, [r4, #0]
 8011b3c:	68a2      	ldr	r2, [r4, #8]
 8011b3e:	f1ba 0f00 	cmp.w	sl, #0
 8011b42:	d0f4      	beq.n	8011b2e <__sfvwrite_r+0x112>
 8011b44:	0599      	lsls	r1, r3, #22
 8011b46:	d563      	bpl.n	8011c10 <__sfvwrite_r+0x1f4>
 8011b48:	4552      	cmp	r2, sl
 8011b4a:	d836      	bhi.n	8011bba <__sfvwrite_r+0x19e>
 8011b4c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8011b50:	d033      	beq.n	8011bba <__sfvwrite_r+0x19e>
 8011b52:	6921      	ldr	r1, [r4, #16]
 8011b54:	6965      	ldr	r5, [r4, #20]
 8011b56:	eba0 0b01 	sub.w	fp, r0, r1
 8011b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b62:	f10b 0201 	add.w	r2, fp, #1
 8011b66:	106d      	asrs	r5, r5, #1
 8011b68:	4452      	add	r2, sl
 8011b6a:	4295      	cmp	r5, r2
 8011b6c:	bf38      	it	cc
 8011b6e:	4615      	movcc	r5, r2
 8011b70:	055b      	lsls	r3, r3, #21
 8011b72:	d53d      	bpl.n	8011bf0 <__sfvwrite_r+0x1d4>
 8011b74:	4629      	mov	r1, r5
 8011b76:	4630      	mov	r0, r6
 8011b78:	f7fd fe00 	bl	800f77c <_malloc_r>
 8011b7c:	b948      	cbnz	r0, 8011b92 <__sfvwrite_r+0x176>
 8011b7e:	230c      	movs	r3, #12
 8011b80:	6033      	str	r3, [r6, #0]
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b88:	81a3      	strh	r3, [r4, #12]
 8011b8a:	e7ac      	b.n	8011ae6 <__sfvwrite_r+0xca>
 8011b8c:	461f      	mov	r7, r3
 8011b8e:	469a      	mov	sl, r3
 8011b90:	e7d1      	b.n	8011b36 <__sfvwrite_r+0x11a>
 8011b92:	465a      	mov	r2, fp
 8011b94:	6921      	ldr	r1, [r4, #16]
 8011b96:	9001      	str	r0, [sp, #4]
 8011b98:	f7fe fb28 	bl	80101ec <memcpy>
 8011b9c:	89a2      	ldrh	r2, [r4, #12]
 8011b9e:	9b01      	ldr	r3, [sp, #4]
 8011ba0:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8011ba4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011ba8:	81a2      	strh	r2, [r4, #12]
 8011baa:	6123      	str	r3, [r4, #16]
 8011bac:	6165      	str	r5, [r4, #20]
 8011bae:	445b      	add	r3, fp
 8011bb0:	eba5 050b 	sub.w	r5, r5, fp
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	4652      	mov	r2, sl
 8011bb8:	60a5      	str	r5, [r4, #8]
 8011bba:	4552      	cmp	r2, sl
 8011bbc:	bf28      	it	cs
 8011bbe:	4652      	movcs	r2, sl
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	9201      	str	r2, [sp, #4]
 8011bc4:	4639      	mov	r1, r7
 8011bc6:	f000 f92f 	bl	8011e28 <memmove>
 8011bca:	68a3      	ldr	r3, [r4, #8]
 8011bcc:	9a01      	ldr	r2, [sp, #4]
 8011bce:	1a9b      	subs	r3, r3, r2
 8011bd0:	60a3      	str	r3, [r4, #8]
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	4655      	mov	r5, sl
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011bde:	1b5b      	subs	r3, r3, r5
 8011be0:	442f      	add	r7, r5
 8011be2:	ebaa 0a05 	sub.w	sl, sl, r5
 8011be6:	f8c9 3008 	str.w	r3, [r9, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d1a3      	bne.n	8011b36 <__sfvwrite_r+0x11a>
 8011bee:	e71c      	b.n	8011a2a <__sfvwrite_r+0xe>
 8011bf0:	462a      	mov	r2, r5
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f001 fb76 	bl	80132e4 <_realloc_r>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d1d5      	bne.n	8011baa <__sfvwrite_r+0x18e>
 8011bfe:	6921      	ldr	r1, [r4, #16]
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7fe fb67 	bl	80102d4 <_free_r>
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011c0c:	81a3      	strh	r3, [r4, #12]
 8011c0e:	e7b6      	b.n	8011b7e <__sfvwrite_r+0x162>
 8011c10:	6923      	ldr	r3, [r4, #16]
 8011c12:	4283      	cmp	r3, r0
 8011c14:	d302      	bcc.n	8011c1c <__sfvwrite_r+0x200>
 8011c16:	6961      	ldr	r1, [r4, #20]
 8011c18:	4551      	cmp	r1, sl
 8011c1a:	d915      	bls.n	8011c48 <__sfvwrite_r+0x22c>
 8011c1c:	4552      	cmp	r2, sl
 8011c1e:	bf28      	it	cs
 8011c20:	4652      	movcs	r2, sl
 8011c22:	4639      	mov	r1, r7
 8011c24:	4615      	mov	r5, r2
 8011c26:	f000 f8ff 	bl	8011e28 <memmove>
 8011c2a:	68a3      	ldr	r3, [r4, #8]
 8011c2c:	6822      	ldr	r2, [r4, #0]
 8011c2e:	1b5b      	subs	r3, r3, r5
 8011c30:	442a      	add	r2, r5
 8011c32:	60a3      	str	r3, [r4, #8]
 8011c34:	6022      	str	r2, [r4, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1cf      	bne.n	8011bda <__sfvwrite_r+0x1be>
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	f7ff fec7 	bl	80119d0 <_fflush_r>
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d0c9      	beq.n	8011bda <__sfvwrite_r+0x1be>
 8011c46:	e79c      	b.n	8011b82 <__sfvwrite_r+0x166>
 8011c48:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011c4c:	4553      	cmp	r3, sl
 8011c4e:	bf28      	it	cs
 8011c50:	4653      	movcs	r3, sl
 8011c52:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011c54:	fb93 f3f1 	sdiv	r3, r3, r1
 8011c58:	463a      	mov	r2, r7
 8011c5a:	434b      	muls	r3, r1
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	69e1      	ldr	r1, [r4, #28]
 8011c60:	47a8      	blx	r5
 8011c62:	1e05      	subs	r5, r0, #0
 8011c64:	dcb9      	bgt.n	8011bda <__sfvwrite_r+0x1be>
 8011c66:	e78c      	b.n	8011b82 <__sfvwrite_r+0x166>
 8011c68:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	f108 0808 	add.w	r8, r8, #8
 8011c72:	e6f2      	b.n	8011a5a <__sfvwrite_r+0x3e>
 8011c74:	f10b 0701 	add.w	r7, fp, #1
 8011c78:	e6ff      	b.n	8011a7a <__sfvwrite_r+0x5e>
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	dc08      	bgt.n	8011c90 <__sfvwrite_r+0x274>
 8011c7e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011c80:	69e1      	ldr	r1, [r4, #28]
 8011c82:	4652      	mov	r2, sl
 8011c84:	4630      	mov	r0, r6
 8011c86:	47a8      	blx	r5
 8011c88:	1e05      	subs	r5, r0, #0
 8011c8a:	f73f af12 	bgt.w	8011ab2 <__sfvwrite_r+0x96>
 8011c8e:	e778      	b.n	8011b82 <__sfvwrite_r+0x166>
 8011c90:	4651      	mov	r1, sl
 8011c92:	9201      	str	r2, [sp, #4]
 8011c94:	f000 f8c8 	bl	8011e28 <memmove>
 8011c98:	9a01      	ldr	r2, [sp, #4]
 8011c9a:	68a3      	ldr	r3, [r4, #8]
 8011c9c:	1a9b      	subs	r3, r3, r2
 8011c9e:	60a3      	str	r3, [r4, #8]
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	6023      	str	r3, [r4, #0]
 8011ca6:	4615      	mov	r5, r2
 8011ca8:	e703      	b.n	8011ab2 <__sfvwrite_r+0x96>
 8011caa:	2001      	movs	r0, #1
 8011cac:	e70a      	b.n	8011ac4 <__sfvwrite_r+0xa8>
 8011cae:	bf00      	nop
 8011cb0:	7ffffc00 	.word	0x7ffffc00

08011cb4 <__swhatbuf_r>:
 8011cb4:	b570      	push	{r4, r5, r6, lr}
 8011cb6:	460c      	mov	r4, r1
 8011cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cbc:	2900      	cmp	r1, #0
 8011cbe:	b096      	sub	sp, #88	@ 0x58
 8011cc0:	4615      	mov	r5, r2
 8011cc2:	461e      	mov	r6, r3
 8011cc4:	da07      	bge.n	8011cd6 <__swhatbuf_r+0x22>
 8011cc6:	89a1      	ldrh	r1, [r4, #12]
 8011cc8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8011ccc:	d117      	bne.n	8011cfe <__swhatbuf_r+0x4a>
 8011cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cd2:	4608      	mov	r0, r1
 8011cd4:	e00f      	b.n	8011cf6 <__swhatbuf_r+0x42>
 8011cd6:	466a      	mov	r2, sp
 8011cd8:	f000 f8de 	bl	8011e98 <_fstat_r>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	dbf2      	blt.n	8011cc6 <__swhatbuf_r+0x12>
 8011ce0:	9901      	ldr	r1, [sp, #4]
 8011ce2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ce6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011cea:	4259      	negs	r1, r3
 8011cec:	4159      	adcs	r1, r3
 8011cee:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cf6:	6031      	str	r1, [r6, #0]
 8011cf8:	602b      	str	r3, [r5, #0]
 8011cfa:	b016      	add	sp, #88	@ 0x58
 8011cfc:	bd70      	pop	{r4, r5, r6, pc}
 8011cfe:	2100      	movs	r1, #0
 8011d00:	2340      	movs	r3, #64	@ 0x40
 8011d02:	e7e6      	b.n	8011cd2 <__swhatbuf_r+0x1e>

08011d04 <__smakebuf_r>:
 8011d04:	898b      	ldrh	r3, [r1, #12]
 8011d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d08:	079d      	lsls	r5, r3, #30
 8011d0a:	4606      	mov	r6, r0
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	d507      	bpl.n	8011d20 <__smakebuf_r+0x1c>
 8011d10:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8011d14:	6023      	str	r3, [r4, #0]
 8011d16:	6123      	str	r3, [r4, #16]
 8011d18:	2301      	movs	r3, #1
 8011d1a:	6163      	str	r3, [r4, #20]
 8011d1c:	b003      	add	sp, #12
 8011d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d20:	ab01      	add	r3, sp, #4
 8011d22:	466a      	mov	r2, sp
 8011d24:	f7ff ffc6 	bl	8011cb4 <__swhatbuf_r>
 8011d28:	9f00      	ldr	r7, [sp, #0]
 8011d2a:	4605      	mov	r5, r0
 8011d2c:	4639      	mov	r1, r7
 8011d2e:	4630      	mov	r0, r6
 8011d30:	f7fd fd24 	bl	800f77c <_malloc_r>
 8011d34:	b948      	cbnz	r0, 8011d4a <__smakebuf_r+0x46>
 8011d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d3a:	059a      	lsls	r2, r3, #22
 8011d3c:	d4ee      	bmi.n	8011d1c <__smakebuf_r+0x18>
 8011d3e:	f023 0303 	bic.w	r3, r3, #3
 8011d42:	f043 0302 	orr.w	r3, r3, #2
 8011d46:	81a3      	strh	r3, [r4, #12]
 8011d48:	e7e2      	b.n	8011d10 <__smakebuf_r+0xc>
 8011d4a:	89a3      	ldrh	r3, [r4, #12]
 8011d4c:	6020      	str	r0, [r4, #0]
 8011d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d52:	81a3      	strh	r3, [r4, #12]
 8011d54:	9b01      	ldr	r3, [sp, #4]
 8011d56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011d5a:	b15b      	cbz	r3, 8011d74 <__smakebuf_r+0x70>
 8011d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d60:	4630      	mov	r0, r6
 8011d62:	f000 f8ab 	bl	8011ebc <_isatty_r>
 8011d66:	b128      	cbz	r0, 8011d74 <__smakebuf_r+0x70>
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	f023 0303 	bic.w	r3, r3, #3
 8011d6e:	f043 0301 	orr.w	r3, r3, #1
 8011d72:	81a3      	strh	r3, [r4, #12]
 8011d74:	89a3      	ldrh	r3, [r4, #12]
 8011d76:	431d      	orrs	r5, r3
 8011d78:	81a5      	strh	r5, [r4, #12]
 8011d7a:	e7cf      	b.n	8011d1c <__smakebuf_r+0x18>

08011d7c <__swsetup_r>:
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	4b29      	ldr	r3, [pc, #164]	@ (8011e24 <__swsetup_r+0xa8>)
 8011d80:	4605      	mov	r5, r0
 8011d82:	6818      	ldr	r0, [r3, #0]
 8011d84:	460c      	mov	r4, r1
 8011d86:	b118      	cbz	r0, 8011d90 <__swsetup_r+0x14>
 8011d88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011d8a:	b90b      	cbnz	r3, 8011d90 <__swsetup_r+0x14>
 8011d8c:	f7fd ffc8 	bl	800fd20 <__sinit>
 8011d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d94:	0719      	lsls	r1, r3, #28
 8011d96:	d422      	bmi.n	8011dde <__swsetup_r+0x62>
 8011d98:	06da      	lsls	r2, r3, #27
 8011d9a:	d407      	bmi.n	8011dac <__swsetup_r+0x30>
 8011d9c:	2209      	movs	r2, #9
 8011d9e:	602a      	str	r2, [r5, #0]
 8011da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011da4:	81a3      	strh	r3, [r4, #12]
 8011da6:	f04f 30ff 	mov.w	r0, #4294967295
 8011daa:	e033      	b.n	8011e14 <__swsetup_r+0x98>
 8011dac:	0758      	lsls	r0, r3, #29
 8011dae:	d512      	bpl.n	8011dd6 <__swsetup_r+0x5a>
 8011db0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011db2:	b141      	cbz	r1, 8011dc6 <__swsetup_r+0x4a>
 8011db4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011db8:	4299      	cmp	r1, r3
 8011dba:	d002      	beq.n	8011dc2 <__swsetup_r+0x46>
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	f7fe fa89 	bl	80102d4 <_free_r>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	2300      	movs	r3, #0
 8011dd0:	6063      	str	r3, [r4, #4]
 8011dd2:	6923      	ldr	r3, [r4, #16]
 8011dd4:	6023      	str	r3, [r4, #0]
 8011dd6:	89a3      	ldrh	r3, [r4, #12]
 8011dd8:	f043 0308 	orr.w	r3, r3, #8
 8011ddc:	81a3      	strh	r3, [r4, #12]
 8011dde:	6923      	ldr	r3, [r4, #16]
 8011de0:	b94b      	cbnz	r3, 8011df6 <__swsetup_r+0x7a>
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dec:	d003      	beq.n	8011df6 <__swsetup_r+0x7a>
 8011dee:	4621      	mov	r1, r4
 8011df0:	4628      	mov	r0, r5
 8011df2:	f7ff ff87 	bl	8011d04 <__smakebuf_r>
 8011df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dfa:	f013 0201 	ands.w	r2, r3, #1
 8011dfe:	d00a      	beq.n	8011e16 <__swsetup_r+0x9a>
 8011e00:	2200      	movs	r2, #0
 8011e02:	60a2      	str	r2, [r4, #8]
 8011e04:	6962      	ldr	r2, [r4, #20]
 8011e06:	4252      	negs	r2, r2
 8011e08:	61a2      	str	r2, [r4, #24]
 8011e0a:	6922      	ldr	r2, [r4, #16]
 8011e0c:	b942      	cbnz	r2, 8011e20 <__swsetup_r+0xa4>
 8011e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e12:	d1c5      	bne.n	8011da0 <__swsetup_r+0x24>
 8011e14:	bd38      	pop	{r3, r4, r5, pc}
 8011e16:	0799      	lsls	r1, r3, #30
 8011e18:	bf58      	it	pl
 8011e1a:	6962      	ldrpl	r2, [r4, #20]
 8011e1c:	60a2      	str	r2, [r4, #8]
 8011e1e:	e7f4      	b.n	8011e0a <__swsetup_r+0x8e>
 8011e20:	2000      	movs	r0, #0
 8011e22:	e7f7      	b.n	8011e14 <__swsetup_r+0x98>
 8011e24:	20000434 	.word	0x20000434

08011e28 <memmove>:
 8011e28:	4288      	cmp	r0, r1
 8011e2a:	b510      	push	{r4, lr}
 8011e2c:	eb01 0402 	add.w	r4, r1, r2
 8011e30:	d902      	bls.n	8011e38 <memmove+0x10>
 8011e32:	4284      	cmp	r4, r0
 8011e34:	4623      	mov	r3, r4
 8011e36:	d807      	bhi.n	8011e48 <memmove+0x20>
 8011e38:	1e43      	subs	r3, r0, #1
 8011e3a:	42a1      	cmp	r1, r4
 8011e3c:	d008      	beq.n	8011e50 <memmove+0x28>
 8011e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e46:	e7f8      	b.n	8011e3a <memmove+0x12>
 8011e48:	4402      	add	r2, r0
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	428a      	cmp	r2, r1
 8011e4e:	d100      	bne.n	8011e52 <memmove+0x2a>
 8011e50:	bd10      	pop	{r4, pc}
 8011e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e5a:	e7f7      	b.n	8011e4c <memmove+0x24>

08011e5c <strncpy>:
 8011e5c:	b510      	push	{r4, lr}
 8011e5e:	3901      	subs	r1, #1
 8011e60:	4603      	mov	r3, r0
 8011e62:	b132      	cbz	r2, 8011e72 <strncpy+0x16>
 8011e64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e68:	f803 4b01 	strb.w	r4, [r3], #1
 8011e6c:	3a01      	subs	r2, #1
 8011e6e:	2c00      	cmp	r4, #0
 8011e70:	d1f7      	bne.n	8011e62 <strncpy+0x6>
 8011e72:	441a      	add	r2, r3
 8011e74:	2100      	movs	r1, #0
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d100      	bne.n	8011e7c <strncpy+0x20>
 8011e7a:	bd10      	pop	{r4, pc}
 8011e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8011e80:	e7f9      	b.n	8011e76 <strncpy+0x1a>
	...

08011e84 <__locale_mb_cur_max>:
 8011e84:	4b01      	ldr	r3, [pc, #4]	@ (8011e8c <__locale_mb_cur_max+0x8>)
 8011e86:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8011e8a:	4770      	bx	lr
 8011e8c:	2000055c 	.word	0x2000055c

08011e90 <_localeconv_r>:
 8011e90:	4800      	ldr	r0, [pc, #0]	@ (8011e94 <_localeconv_r+0x4>)
 8011e92:	4770      	bx	lr
 8011e94:	2000064c 	.word	0x2000064c

08011e98 <_fstat_r>:
 8011e98:	b538      	push	{r3, r4, r5, lr}
 8011e9a:	4d07      	ldr	r5, [pc, #28]	@ (8011eb8 <_fstat_r+0x20>)
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	4608      	mov	r0, r1
 8011ea2:	4611      	mov	r1, r2
 8011ea4:	602b      	str	r3, [r5, #0]
 8011ea6:	f7f0 fe7f 	bl	8002ba8 <_fstat>
 8011eaa:	1c43      	adds	r3, r0, #1
 8011eac:	d102      	bne.n	8011eb4 <_fstat_r+0x1c>
 8011eae:	682b      	ldr	r3, [r5, #0]
 8011eb0:	b103      	cbz	r3, 8011eb4 <_fstat_r+0x1c>
 8011eb2:	6023      	str	r3, [r4, #0]
 8011eb4:	bd38      	pop	{r3, r4, r5, pc}
 8011eb6:	bf00      	nop
 8011eb8:	200030d8 	.word	0x200030d8

08011ebc <_isatty_r>:
 8011ebc:	b538      	push	{r3, r4, r5, lr}
 8011ebe:	4d06      	ldr	r5, [pc, #24]	@ (8011ed8 <_isatty_r+0x1c>)
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	4608      	mov	r0, r1
 8011ec6:	602b      	str	r3, [r5, #0]
 8011ec8:	f7f0 fe7e 	bl	8002bc8 <_isatty>
 8011ecc:	1c43      	adds	r3, r0, #1
 8011ece:	d102      	bne.n	8011ed6 <_isatty_r+0x1a>
 8011ed0:	682b      	ldr	r3, [r5, #0]
 8011ed2:	b103      	cbz	r3, 8011ed6 <_isatty_r+0x1a>
 8011ed4:	6023      	str	r3, [r4, #0]
 8011ed6:	bd38      	pop	{r3, r4, r5, pc}
 8011ed8:	200030d8 	.word	0x200030d8

08011edc <__libc_fini_array>:
 8011edc:	b538      	push	{r3, r4, r5, lr}
 8011ede:	4d07      	ldr	r5, [pc, #28]	@ (8011efc <__libc_fini_array+0x20>)
 8011ee0:	4c07      	ldr	r4, [pc, #28]	@ (8011f00 <__libc_fini_array+0x24>)
 8011ee2:	1b64      	subs	r4, r4, r5
 8011ee4:	10a4      	asrs	r4, r4, #2
 8011ee6:	b91c      	cbnz	r4, 8011ef0 <__libc_fini_array+0x14>
 8011ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eec:	f003 bafe 	b.w	80154ec <_fini>
 8011ef0:	3c01      	subs	r4, #1
 8011ef2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011ef6:	4798      	blx	r3
 8011ef8:	e7f5      	b.n	8011ee6 <__libc_fini_array+0xa>
 8011efa:	bf00      	nop
 8011efc:	08015bc0 	.word	0x08015bc0
 8011f00:	08015bc4 	.word	0x08015bc4

08011f04 <frexp>:
 8011f04:	b570      	push	{r4, r5, r6, lr}
 8011f06:	2100      	movs	r1, #0
 8011f08:	ec55 4b10 	vmov	r4, r5, d0
 8011f0c:	6001      	str	r1, [r0, #0]
 8011f0e:	4915      	ldr	r1, [pc, #84]	@ (8011f64 <frexp+0x60>)
 8011f10:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011f14:	428a      	cmp	r2, r1
 8011f16:	4606      	mov	r6, r0
 8011f18:	462b      	mov	r3, r5
 8011f1a:	d820      	bhi.n	8011f5e <frexp+0x5a>
 8011f1c:	4621      	mov	r1, r4
 8011f1e:	4311      	orrs	r1, r2
 8011f20:	d01d      	beq.n	8011f5e <frexp+0x5a>
 8011f22:	4911      	ldr	r1, [pc, #68]	@ (8011f68 <frexp+0x64>)
 8011f24:	4029      	ands	r1, r5
 8011f26:	b961      	cbnz	r1, 8011f42 <frexp+0x3e>
 8011f28:	4b10      	ldr	r3, [pc, #64]	@ (8011f6c <frexp+0x68>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	4629      	mov	r1, r5
 8011f30:	f7ee fb8a 	bl	8000648 <__aeabi_dmul>
 8011f34:	460b      	mov	r3, r1
 8011f36:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8011f3a:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8011f3e:	4604      	mov	r4, r0
 8011f40:	6031      	str	r1, [r6, #0]
 8011f42:	6831      	ldr	r1, [r6, #0]
 8011f44:	1512      	asrs	r2, r2, #20
 8011f46:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011f4a:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8011f4e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011f52:	4411      	add	r1, r2
 8011f54:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8011f58:	6031      	str	r1, [r6, #0]
 8011f5a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8011f5e:	ec45 4b10 	vmov	d0, r4, r5
 8011f62:	bd70      	pop	{r4, r5, r6, pc}
 8011f64:	7fefffff 	.word	0x7fefffff
 8011f68:	7ff00000 	.word	0x7ff00000
 8011f6c:	43500000 	.word	0x43500000

08011f70 <__register_exitproc>:
 8011f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f74:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8011fec <__register_exitproc+0x7c>
 8011f78:	4606      	mov	r6, r0
 8011f7a:	f8da 0000 	ldr.w	r0, [sl]
 8011f7e:	4698      	mov	r8, r3
 8011f80:	460f      	mov	r7, r1
 8011f82:	4691      	mov	r9, r2
 8011f84:	f7fe f924 	bl	80101d0 <__retarget_lock_acquire_recursive>
 8011f88:	4b16      	ldr	r3, [pc, #88]	@ (8011fe4 <__register_exitproc+0x74>)
 8011f8a:	681c      	ldr	r4, [r3, #0]
 8011f8c:	b90c      	cbnz	r4, 8011f92 <__register_exitproc+0x22>
 8011f8e:	4c16      	ldr	r4, [pc, #88]	@ (8011fe8 <__register_exitproc+0x78>)
 8011f90:	601c      	str	r4, [r3, #0]
 8011f92:	6865      	ldr	r5, [r4, #4]
 8011f94:	f8da 0000 	ldr.w	r0, [sl]
 8011f98:	2d1f      	cmp	r5, #31
 8011f9a:	dd05      	ble.n	8011fa8 <__register_exitproc+0x38>
 8011f9c:	f7fe f919 	bl	80101d2 <__retarget_lock_release_recursive>
 8011fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fa8:	b19e      	cbz	r6, 8011fd2 <__register_exitproc+0x62>
 8011faa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8011fb4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8011fb8:	40aa      	lsls	r2, r5
 8011fba:	4313      	orrs	r3, r2
 8011fbc:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8011fc0:	2e02      	cmp	r6, #2
 8011fc2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8011fc6:	bf02      	ittt	eq
 8011fc8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8011fcc:	4313      	orreq	r3, r2
 8011fce:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8011fd2:	1c6b      	adds	r3, r5, #1
 8011fd4:	3502      	adds	r5, #2
 8011fd6:	6063      	str	r3, [r4, #4]
 8011fd8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8011fdc:	f7fe f8f9 	bl	80101d2 <__retarget_lock_release_recursive>
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	e7df      	b.n	8011fa4 <__register_exitproc+0x34>
 8011fe4:	200030e0 	.word	0x200030e0
 8011fe8:	200030e4 	.word	0x200030e4
 8011fec:	20000558 	.word	0x20000558

08011ff0 <quorem>:
 8011ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	6903      	ldr	r3, [r0, #16]
 8011ff6:	690c      	ldr	r4, [r1, #16]
 8011ff8:	42a3      	cmp	r3, r4
 8011ffa:	4607      	mov	r7, r0
 8011ffc:	db7e      	blt.n	80120fc <quorem+0x10c>
 8011ffe:	3c01      	subs	r4, #1
 8012000:	f101 0814 	add.w	r8, r1, #20
 8012004:	00a3      	lsls	r3, r4, #2
 8012006:	f100 0514 	add.w	r5, r0, #20
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012010:	9301      	str	r3, [sp, #4]
 8012012:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801201a:	3301      	adds	r3, #1
 801201c:	429a      	cmp	r2, r3
 801201e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012022:	fbb2 f6f3 	udiv	r6, r2, r3
 8012026:	d32e      	bcc.n	8012086 <quorem+0x96>
 8012028:	f04f 0a00 	mov.w	sl, #0
 801202c:	46c4      	mov	ip, r8
 801202e:	46ae      	mov	lr, r5
 8012030:	46d3      	mov	fp, sl
 8012032:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012036:	b298      	uxth	r0, r3
 8012038:	fb06 a000 	mla	r0, r6, r0, sl
 801203c:	0c02      	lsrs	r2, r0, #16
 801203e:	0c1b      	lsrs	r3, r3, #16
 8012040:	fb06 2303 	mla	r3, r6, r3, r2
 8012044:	f8de 2000 	ldr.w	r2, [lr]
 8012048:	b280      	uxth	r0, r0
 801204a:	b292      	uxth	r2, r2
 801204c:	1a12      	subs	r2, r2, r0
 801204e:	445a      	add	r2, fp
 8012050:	f8de 0000 	ldr.w	r0, [lr]
 8012054:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012058:	b29b      	uxth	r3, r3
 801205a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801205e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012062:	b292      	uxth	r2, r2
 8012064:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012068:	45e1      	cmp	r9, ip
 801206a:	f84e 2b04 	str.w	r2, [lr], #4
 801206e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012072:	d2de      	bcs.n	8012032 <quorem+0x42>
 8012074:	9b00      	ldr	r3, [sp, #0]
 8012076:	58eb      	ldr	r3, [r5, r3]
 8012078:	b92b      	cbnz	r3, 8012086 <quorem+0x96>
 801207a:	9b01      	ldr	r3, [sp, #4]
 801207c:	3b04      	subs	r3, #4
 801207e:	429d      	cmp	r5, r3
 8012080:	461a      	mov	r2, r3
 8012082:	d32f      	bcc.n	80120e4 <quorem+0xf4>
 8012084:	613c      	str	r4, [r7, #16]
 8012086:	4638      	mov	r0, r7
 8012088:	f001 f824 	bl	80130d4 <__mcmp>
 801208c:	2800      	cmp	r0, #0
 801208e:	db25      	blt.n	80120dc <quorem+0xec>
 8012090:	4629      	mov	r1, r5
 8012092:	2000      	movs	r0, #0
 8012094:	f858 2b04 	ldr.w	r2, [r8], #4
 8012098:	f8d1 c000 	ldr.w	ip, [r1]
 801209c:	fa1f fe82 	uxth.w	lr, r2
 80120a0:	fa1f f38c 	uxth.w	r3, ip
 80120a4:	eba3 030e 	sub.w	r3, r3, lr
 80120a8:	4403      	add	r3, r0
 80120aa:	0c12      	lsrs	r2, r2, #16
 80120ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80120b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120ba:	45c1      	cmp	r9, r8
 80120bc:	f841 3b04 	str.w	r3, [r1], #4
 80120c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80120c4:	d2e6      	bcs.n	8012094 <quorem+0xa4>
 80120c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120ce:	b922      	cbnz	r2, 80120da <quorem+0xea>
 80120d0:	3b04      	subs	r3, #4
 80120d2:	429d      	cmp	r5, r3
 80120d4:	461a      	mov	r2, r3
 80120d6:	d30b      	bcc.n	80120f0 <quorem+0x100>
 80120d8:	613c      	str	r4, [r7, #16]
 80120da:	3601      	adds	r6, #1
 80120dc:	4630      	mov	r0, r6
 80120de:	b003      	add	sp, #12
 80120e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e4:	6812      	ldr	r2, [r2, #0]
 80120e6:	3b04      	subs	r3, #4
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	d1cb      	bne.n	8012084 <quorem+0x94>
 80120ec:	3c01      	subs	r4, #1
 80120ee:	e7c6      	b.n	801207e <quorem+0x8e>
 80120f0:	6812      	ldr	r2, [r2, #0]
 80120f2:	3b04      	subs	r3, #4
 80120f4:	2a00      	cmp	r2, #0
 80120f6:	d1ef      	bne.n	80120d8 <quorem+0xe8>
 80120f8:	3c01      	subs	r4, #1
 80120fa:	e7ea      	b.n	80120d2 <quorem+0xe2>
 80120fc:	2000      	movs	r0, #0
 80120fe:	e7ee      	b.n	80120de <quorem+0xee>

08012100 <_dtoa_r>:
 8012100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	b099      	sub	sp, #100	@ 0x64
 8012106:	ed8d 0b02 	vstr	d0, [sp, #8]
 801210a:	9109      	str	r1, [sp, #36]	@ 0x24
 801210c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801210e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012110:	920e      	str	r2, [sp, #56]	@ 0x38
 8012112:	ec55 4b10 	vmov	r4, r5, d0
 8012116:	4683      	mov	fp, r0
 8012118:	9313      	str	r3, [sp, #76]	@ 0x4c
 801211a:	b149      	cbz	r1, 8012130 <_dtoa_r+0x30>
 801211c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801211e:	604a      	str	r2, [r1, #4]
 8012120:	2301      	movs	r3, #1
 8012122:	4093      	lsls	r3, r2
 8012124:	608b      	str	r3, [r1, #8]
 8012126:	f000 fdce 	bl	8012cc6 <_Bfree>
 801212a:	2300      	movs	r3, #0
 801212c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8012130:	1e2b      	subs	r3, r5, #0
 8012132:	bfb9      	ittee	lt
 8012134:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012138:	9303      	strlt	r3, [sp, #12]
 801213a:	2300      	movge	r3, #0
 801213c:	6033      	strge	r3, [r6, #0]
 801213e:	9f03      	ldr	r7, [sp, #12]
 8012140:	4b97      	ldr	r3, [pc, #604]	@ (80123a0 <_dtoa_r+0x2a0>)
 8012142:	bfbc      	itt	lt
 8012144:	2201      	movlt	r2, #1
 8012146:	6032      	strlt	r2, [r6, #0]
 8012148:	43bb      	bics	r3, r7
 801214a:	d114      	bne.n	8012176 <_dtoa_r+0x76>
 801214c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801214e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012152:	6013      	str	r3, [r2, #0]
 8012154:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012158:	4323      	orrs	r3, r4
 801215a:	f000 854c 	beq.w	8012bf6 <_dtoa_r+0xaf6>
 801215e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012160:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80123b8 <_dtoa_r+0x2b8>
 8012164:	b11b      	cbz	r3, 801216e <_dtoa_r+0x6e>
 8012166:	f10a 0303 	add.w	r3, sl, #3
 801216a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	4650      	mov	r0, sl
 8012170:	b019      	add	sp, #100	@ 0x64
 8012172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012176:	ed9d 7b02 	vldr	d7, [sp, #8]
 801217a:	2200      	movs	r2, #0
 801217c:	ec51 0b17 	vmov	r0, r1, d7
 8012180:	2300      	movs	r3, #0
 8012182:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012186:	f7ee fcc7 	bl	8000b18 <__aeabi_dcmpeq>
 801218a:	4680      	mov	r8, r0
 801218c:	b150      	cbz	r0, 80121a4 <_dtoa_r+0xa4>
 801218e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012190:	2301      	movs	r3, #1
 8012192:	6013      	str	r3, [r2, #0]
 8012194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012196:	b113      	cbz	r3, 801219e <_dtoa_r+0x9e>
 8012198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801219a:	4b82      	ldr	r3, [pc, #520]	@ (80123a4 <_dtoa_r+0x2a4>)
 801219c:	6013      	str	r3, [r2, #0]
 801219e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80123bc <_dtoa_r+0x2bc>
 80121a2:	e7e4      	b.n	801216e <_dtoa_r+0x6e>
 80121a4:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80121a8:	aa16      	add	r2, sp, #88	@ 0x58
 80121aa:	a917      	add	r1, sp, #92	@ 0x5c
 80121ac:	4658      	mov	r0, fp
 80121ae:	f001 f841 	bl	8013234 <__d2b>
 80121b2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80121b6:	4681      	mov	r9, r0
 80121b8:	2e00      	cmp	r6, #0
 80121ba:	d077      	beq.n	80122ac <_dtoa_r+0x1ac>
 80121bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121be:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80121c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121ca:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80121ce:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80121d2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80121d6:	4619      	mov	r1, r3
 80121d8:	2200      	movs	r2, #0
 80121da:	4b73      	ldr	r3, [pc, #460]	@ (80123a8 <_dtoa_r+0x2a8>)
 80121dc:	f7ee f87c 	bl	80002d8 <__aeabi_dsub>
 80121e0:	a369      	add	r3, pc, #420	@ (adr r3, 8012388 <_dtoa_r+0x288>)
 80121e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e6:	f7ee fa2f 	bl	8000648 <__aeabi_dmul>
 80121ea:	a369      	add	r3, pc, #420	@ (adr r3, 8012390 <_dtoa_r+0x290>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	f7ee f874 	bl	80002dc <__adddf3>
 80121f4:	4604      	mov	r4, r0
 80121f6:	4630      	mov	r0, r6
 80121f8:	460d      	mov	r5, r1
 80121fa:	f7ee f9bb 	bl	8000574 <__aeabi_i2d>
 80121fe:	a366      	add	r3, pc, #408	@ (adr r3, 8012398 <_dtoa_r+0x298>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	f7ee fa20 	bl	8000648 <__aeabi_dmul>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	4620      	mov	r0, r4
 801220e:	4629      	mov	r1, r5
 8012210:	f7ee f864 	bl	80002dc <__adddf3>
 8012214:	4604      	mov	r4, r0
 8012216:	460d      	mov	r5, r1
 8012218:	f7ee fcc6 	bl	8000ba8 <__aeabi_d2iz>
 801221c:	2200      	movs	r2, #0
 801221e:	4607      	mov	r7, r0
 8012220:	2300      	movs	r3, #0
 8012222:	4620      	mov	r0, r4
 8012224:	4629      	mov	r1, r5
 8012226:	f7ee fc81 	bl	8000b2c <__aeabi_dcmplt>
 801222a:	b140      	cbz	r0, 801223e <_dtoa_r+0x13e>
 801222c:	4638      	mov	r0, r7
 801222e:	f7ee f9a1 	bl	8000574 <__aeabi_i2d>
 8012232:	4622      	mov	r2, r4
 8012234:	462b      	mov	r3, r5
 8012236:	f7ee fc6f 	bl	8000b18 <__aeabi_dcmpeq>
 801223a:	b900      	cbnz	r0, 801223e <_dtoa_r+0x13e>
 801223c:	3f01      	subs	r7, #1
 801223e:	2f16      	cmp	r7, #22
 8012240:	d851      	bhi.n	80122e6 <_dtoa_r+0x1e6>
 8012242:	4b5a      	ldr	r3, [pc, #360]	@ (80123ac <_dtoa_r+0x2ac>)
 8012244:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012250:	f7ee fc6c 	bl	8000b2c <__aeabi_dcmplt>
 8012254:	2800      	cmp	r0, #0
 8012256:	d048      	beq.n	80122ea <_dtoa_r+0x1ea>
 8012258:	3f01      	subs	r7, #1
 801225a:	2300      	movs	r3, #0
 801225c:	9312      	str	r3, [sp, #72]	@ 0x48
 801225e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012260:	1b9b      	subs	r3, r3, r6
 8012262:	1e5a      	subs	r2, r3, #1
 8012264:	bf44      	itt	mi
 8012266:	f1c3 0801 	rsbmi	r8, r3, #1
 801226a:	2300      	movmi	r3, #0
 801226c:	9208      	str	r2, [sp, #32]
 801226e:	bf54      	ite	pl
 8012270:	f04f 0800 	movpl.w	r8, #0
 8012274:	9308      	strmi	r3, [sp, #32]
 8012276:	2f00      	cmp	r7, #0
 8012278:	db39      	blt.n	80122ee <_dtoa_r+0x1ee>
 801227a:	9b08      	ldr	r3, [sp, #32]
 801227c:	970f      	str	r7, [sp, #60]	@ 0x3c
 801227e:	443b      	add	r3, r7
 8012280:	9308      	str	r3, [sp, #32]
 8012282:	2300      	movs	r3, #0
 8012284:	930a      	str	r3, [sp, #40]	@ 0x28
 8012286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012288:	2b09      	cmp	r3, #9
 801228a:	d865      	bhi.n	8012358 <_dtoa_r+0x258>
 801228c:	2b05      	cmp	r3, #5
 801228e:	bfc4      	itt	gt
 8012290:	3b04      	subgt	r3, #4
 8012292:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012296:	f1a3 0302 	sub.w	r3, r3, #2
 801229a:	bfcc      	ite	gt
 801229c:	2400      	movgt	r4, #0
 801229e:	2401      	movle	r4, #1
 80122a0:	2b03      	cmp	r3, #3
 80122a2:	d864      	bhi.n	801236e <_dtoa_r+0x26e>
 80122a4:	e8df f003 	tbb	[pc, r3]
 80122a8:	5635372a 	.word	0x5635372a
 80122ac:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80122b0:	441e      	add	r6, r3
 80122b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80122b6:	2b20      	cmp	r3, #32
 80122b8:	bfc1      	itttt	gt
 80122ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80122be:	409f      	lslgt	r7, r3
 80122c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80122c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80122c8:	bfd6      	itet	le
 80122ca:	f1c3 0320 	rsble	r3, r3, #32
 80122ce:	ea47 0003 	orrgt.w	r0, r7, r3
 80122d2:	fa04 f003 	lslle.w	r0, r4, r3
 80122d6:	f7ee f93d 	bl	8000554 <__aeabi_ui2d>
 80122da:	2201      	movs	r2, #1
 80122dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80122e0:	3e01      	subs	r6, #1
 80122e2:	9214      	str	r2, [sp, #80]	@ 0x50
 80122e4:	e777      	b.n	80121d6 <_dtoa_r+0xd6>
 80122e6:	2301      	movs	r3, #1
 80122e8:	e7b8      	b.n	801225c <_dtoa_r+0x15c>
 80122ea:	9012      	str	r0, [sp, #72]	@ 0x48
 80122ec:	e7b7      	b.n	801225e <_dtoa_r+0x15e>
 80122ee:	427b      	negs	r3, r7
 80122f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80122f2:	2300      	movs	r3, #0
 80122f4:	eba8 0807 	sub.w	r8, r8, r7
 80122f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80122fa:	e7c4      	b.n	8012286 <_dtoa_r+0x186>
 80122fc:	2300      	movs	r3, #0
 80122fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012302:	2b00      	cmp	r3, #0
 8012304:	dc36      	bgt.n	8012374 <_dtoa_r+0x274>
 8012306:	2301      	movs	r3, #1
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	9307      	str	r3, [sp, #28]
 801230c:	461a      	mov	r2, r3
 801230e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012310:	e00b      	b.n	801232a <_dtoa_r+0x22a>
 8012312:	2301      	movs	r3, #1
 8012314:	e7f3      	b.n	80122fe <_dtoa_r+0x1fe>
 8012316:	2300      	movs	r3, #0
 8012318:	930b      	str	r3, [sp, #44]	@ 0x2c
 801231a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801231c:	18fb      	adds	r3, r7, r3
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	3301      	adds	r3, #1
 8012322:	2b01      	cmp	r3, #1
 8012324:	9307      	str	r3, [sp, #28]
 8012326:	bfb8      	it	lt
 8012328:	2301      	movlt	r3, #1
 801232a:	2100      	movs	r1, #0
 801232c:	2204      	movs	r2, #4
 801232e:	f102 0014 	add.w	r0, r2, #20
 8012332:	4298      	cmp	r0, r3
 8012334:	d922      	bls.n	801237c <_dtoa_r+0x27c>
 8012336:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 801233a:	4658      	mov	r0, fp
 801233c:	f000 fc9e 	bl	8012c7c <_Balloc>
 8012340:	4682      	mov	sl, r0
 8012342:	2800      	cmp	r0, #0
 8012344:	d13c      	bne.n	80123c0 <_dtoa_r+0x2c0>
 8012346:	4b1a      	ldr	r3, [pc, #104]	@ (80123b0 <_dtoa_r+0x2b0>)
 8012348:	4602      	mov	r2, r0
 801234a:	f240 11af 	movw	r1, #431	@ 0x1af
 801234e:	4819      	ldr	r0, [pc, #100]	@ (80123b4 <_dtoa_r+0x2b4>)
 8012350:	f001 f9fa 	bl	8013748 <__assert_func>
 8012354:	2301      	movs	r3, #1
 8012356:	e7df      	b.n	8012318 <_dtoa_r+0x218>
 8012358:	2401      	movs	r4, #1
 801235a:	2300      	movs	r3, #0
 801235c:	9309      	str	r3, [sp, #36]	@ 0x24
 801235e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012360:	f04f 33ff 	mov.w	r3, #4294967295
 8012364:	9300      	str	r3, [sp, #0]
 8012366:	9307      	str	r3, [sp, #28]
 8012368:	2200      	movs	r2, #0
 801236a:	2312      	movs	r3, #18
 801236c:	e7cf      	b.n	801230e <_dtoa_r+0x20e>
 801236e:	2301      	movs	r3, #1
 8012370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012372:	e7f5      	b.n	8012360 <_dtoa_r+0x260>
 8012374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	9307      	str	r3, [sp, #28]
 801237a:	e7d6      	b.n	801232a <_dtoa_r+0x22a>
 801237c:	3101      	adds	r1, #1
 801237e:	0052      	lsls	r2, r2, #1
 8012380:	e7d5      	b.n	801232e <_dtoa_r+0x22e>
 8012382:	bf00      	nop
 8012384:	f3af 8000 	nop.w
 8012388:	636f4361 	.word	0x636f4361
 801238c:	3fd287a7 	.word	0x3fd287a7
 8012390:	8b60c8b3 	.word	0x8b60c8b3
 8012394:	3fc68a28 	.word	0x3fc68a28
 8012398:	509f79fb 	.word	0x509f79fb
 801239c:	3fd34413 	.word	0x3fd34413
 80123a0:	7ff00000 	.word	0x7ff00000
 80123a4:	0801567f 	.word	0x0801567f
 80123a8:	3ff80000 	.word	0x3ff80000
 80123ac:	080157b0 	.word	0x080157b0
 80123b0:	080156b7 	.word	0x080156b7
 80123b4:	080156c8 	.word	0x080156c8
 80123b8:	080156b3 	.word	0x080156b3
 80123bc:	0801567e 	.word	0x0801567e
 80123c0:	9b07      	ldr	r3, [sp, #28]
 80123c2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 80123c6:	2b0e      	cmp	r3, #14
 80123c8:	f200 80a4 	bhi.w	8012514 <_dtoa_r+0x414>
 80123cc:	2c00      	cmp	r4, #0
 80123ce:	f000 80a1 	beq.w	8012514 <_dtoa_r+0x414>
 80123d2:	2f00      	cmp	r7, #0
 80123d4:	dd33      	ble.n	801243e <_dtoa_r+0x33e>
 80123d6:	4bae      	ldr	r3, [pc, #696]	@ (8012690 <_dtoa_r+0x590>)
 80123d8:	f007 020f 	and.w	r2, r7, #15
 80123dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123e0:	ed93 7b00 	vldr	d7, [r3]
 80123e4:	05f8      	lsls	r0, r7, #23
 80123e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80123ea:	ea4f 1427 	mov.w	r4, r7, asr #4
 80123ee:	d516      	bpl.n	801241e <_dtoa_r+0x31e>
 80123f0:	4ba8      	ldr	r3, [pc, #672]	@ (8012694 <_dtoa_r+0x594>)
 80123f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80123f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80123fa:	f7ee fa4f 	bl	800089c <__aeabi_ddiv>
 80123fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012402:	f004 040f 	and.w	r4, r4, #15
 8012406:	2603      	movs	r6, #3
 8012408:	4da2      	ldr	r5, [pc, #648]	@ (8012694 <_dtoa_r+0x594>)
 801240a:	b954      	cbnz	r4, 8012422 <_dtoa_r+0x322>
 801240c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012414:	f7ee fa42 	bl	800089c <__aeabi_ddiv>
 8012418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801241c:	e028      	b.n	8012470 <_dtoa_r+0x370>
 801241e:	2602      	movs	r6, #2
 8012420:	e7f2      	b.n	8012408 <_dtoa_r+0x308>
 8012422:	07e1      	lsls	r1, r4, #31
 8012424:	d508      	bpl.n	8012438 <_dtoa_r+0x338>
 8012426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801242a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801242e:	f7ee f90b 	bl	8000648 <__aeabi_dmul>
 8012432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012436:	3601      	adds	r6, #1
 8012438:	1064      	asrs	r4, r4, #1
 801243a:	3508      	adds	r5, #8
 801243c:	e7e5      	b.n	801240a <_dtoa_r+0x30a>
 801243e:	f000 80d2 	beq.w	80125e6 <_dtoa_r+0x4e6>
 8012442:	427c      	negs	r4, r7
 8012444:	4b92      	ldr	r3, [pc, #584]	@ (8012690 <_dtoa_r+0x590>)
 8012446:	4d93      	ldr	r5, [pc, #588]	@ (8012694 <_dtoa_r+0x594>)
 8012448:	f004 020f 	and.w	r2, r4, #15
 801244c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012458:	f7ee f8f6 	bl	8000648 <__aeabi_dmul>
 801245c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012460:	1124      	asrs	r4, r4, #4
 8012462:	2300      	movs	r3, #0
 8012464:	2602      	movs	r6, #2
 8012466:	2c00      	cmp	r4, #0
 8012468:	f040 80b2 	bne.w	80125d0 <_dtoa_r+0x4d0>
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1d3      	bne.n	8012418 <_dtoa_r+0x318>
 8012470:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012472:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	f000 80b7 	beq.w	80125ea <_dtoa_r+0x4ea>
 801247c:	4b86      	ldr	r3, [pc, #536]	@ (8012698 <_dtoa_r+0x598>)
 801247e:	2200      	movs	r2, #0
 8012480:	4620      	mov	r0, r4
 8012482:	4629      	mov	r1, r5
 8012484:	f7ee fb52 	bl	8000b2c <__aeabi_dcmplt>
 8012488:	2800      	cmp	r0, #0
 801248a:	f000 80ae 	beq.w	80125ea <_dtoa_r+0x4ea>
 801248e:	9b07      	ldr	r3, [sp, #28]
 8012490:	2b00      	cmp	r3, #0
 8012492:	f000 80aa 	beq.w	80125ea <_dtoa_r+0x4ea>
 8012496:	9b00      	ldr	r3, [sp, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	dd37      	ble.n	801250c <_dtoa_r+0x40c>
 801249c:	1e7b      	subs	r3, r7, #1
 801249e:	9304      	str	r3, [sp, #16]
 80124a0:	4620      	mov	r0, r4
 80124a2:	4b7e      	ldr	r3, [pc, #504]	@ (801269c <_dtoa_r+0x59c>)
 80124a4:	2200      	movs	r2, #0
 80124a6:	4629      	mov	r1, r5
 80124a8:	f7ee f8ce 	bl	8000648 <__aeabi_dmul>
 80124ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124b0:	9c00      	ldr	r4, [sp, #0]
 80124b2:	3601      	adds	r6, #1
 80124b4:	4630      	mov	r0, r6
 80124b6:	f7ee f85d 	bl	8000574 <__aeabi_i2d>
 80124ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124be:	f7ee f8c3 	bl	8000648 <__aeabi_dmul>
 80124c2:	4b77      	ldr	r3, [pc, #476]	@ (80126a0 <_dtoa_r+0x5a0>)
 80124c4:	2200      	movs	r2, #0
 80124c6:	f7ed ff09 	bl	80002dc <__adddf3>
 80124ca:	4605      	mov	r5, r0
 80124cc:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80124d0:	2c00      	cmp	r4, #0
 80124d2:	f040 808d 	bne.w	80125f0 <_dtoa_r+0x4f0>
 80124d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124da:	4b72      	ldr	r3, [pc, #456]	@ (80126a4 <_dtoa_r+0x5a4>)
 80124dc:	2200      	movs	r2, #0
 80124de:	f7ed fefb 	bl	80002d8 <__aeabi_dsub>
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124ea:	462a      	mov	r2, r5
 80124ec:	4633      	mov	r3, r6
 80124ee:	f7ee fb3b 	bl	8000b68 <__aeabi_dcmpgt>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	f040 828c 	bne.w	8012a10 <_dtoa_r+0x910>
 80124f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124fc:	462a      	mov	r2, r5
 80124fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012502:	f7ee fb13 	bl	8000b2c <__aeabi_dcmplt>
 8012506:	2800      	cmp	r0, #0
 8012508:	f040 8129 	bne.w	801275e <_dtoa_r+0x65e>
 801250c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012510:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012514:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012516:	2b00      	cmp	r3, #0
 8012518:	f2c0 815b 	blt.w	80127d2 <_dtoa_r+0x6d2>
 801251c:	2f0e      	cmp	r7, #14
 801251e:	f300 8158 	bgt.w	80127d2 <_dtoa_r+0x6d2>
 8012522:	4b5b      	ldr	r3, [pc, #364]	@ (8012690 <_dtoa_r+0x590>)
 8012524:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012528:	ed93 7b00 	vldr	d7, [r3]
 801252c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801252e:	2b00      	cmp	r3, #0
 8012530:	ed8d 7b00 	vstr	d7, [sp]
 8012534:	da03      	bge.n	801253e <_dtoa_r+0x43e>
 8012536:	9b07      	ldr	r3, [sp, #28]
 8012538:	2b00      	cmp	r3, #0
 801253a:	f340 8102 	ble.w	8012742 <_dtoa_r+0x642>
 801253e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012542:	4656      	mov	r6, sl
 8012544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012548:	4620      	mov	r0, r4
 801254a:	4629      	mov	r1, r5
 801254c:	f7ee f9a6 	bl	800089c <__aeabi_ddiv>
 8012550:	f7ee fb2a 	bl	8000ba8 <__aeabi_d2iz>
 8012554:	4680      	mov	r8, r0
 8012556:	f7ee f80d 	bl	8000574 <__aeabi_i2d>
 801255a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801255e:	f7ee f873 	bl	8000648 <__aeabi_dmul>
 8012562:	4602      	mov	r2, r0
 8012564:	460b      	mov	r3, r1
 8012566:	4620      	mov	r0, r4
 8012568:	4629      	mov	r1, r5
 801256a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801256e:	f7ed feb3 	bl	80002d8 <__aeabi_dsub>
 8012572:	f806 4b01 	strb.w	r4, [r6], #1
 8012576:	9d07      	ldr	r5, [sp, #28]
 8012578:	eba6 040a 	sub.w	r4, r6, sl
 801257c:	42a5      	cmp	r5, r4
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	f040 8118 	bne.w	80127b6 <_dtoa_r+0x6b6>
 8012586:	f7ed fea9 	bl	80002dc <__adddf3>
 801258a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801258e:	4604      	mov	r4, r0
 8012590:	460d      	mov	r5, r1
 8012592:	f7ee fae9 	bl	8000b68 <__aeabi_dcmpgt>
 8012596:	2800      	cmp	r0, #0
 8012598:	f040 80fa 	bne.w	8012790 <_dtoa_r+0x690>
 801259c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125a0:	4620      	mov	r0, r4
 80125a2:	4629      	mov	r1, r5
 80125a4:	f7ee fab8 	bl	8000b18 <__aeabi_dcmpeq>
 80125a8:	b118      	cbz	r0, 80125b2 <_dtoa_r+0x4b2>
 80125aa:	f018 0f01 	tst.w	r8, #1
 80125ae:	f040 80ef 	bne.w	8012790 <_dtoa_r+0x690>
 80125b2:	4649      	mov	r1, r9
 80125b4:	4658      	mov	r0, fp
 80125b6:	f000 fb86 	bl	8012cc6 <_Bfree>
 80125ba:	2300      	movs	r3, #0
 80125bc:	7033      	strb	r3, [r6, #0]
 80125be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80125c0:	3701      	adds	r7, #1
 80125c2:	601f      	str	r7, [r3, #0]
 80125c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f43f add1 	beq.w	801216e <_dtoa_r+0x6e>
 80125cc:	601e      	str	r6, [r3, #0]
 80125ce:	e5ce      	b.n	801216e <_dtoa_r+0x6e>
 80125d0:	07e2      	lsls	r2, r4, #31
 80125d2:	d505      	bpl.n	80125e0 <_dtoa_r+0x4e0>
 80125d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80125d8:	f7ee f836 	bl	8000648 <__aeabi_dmul>
 80125dc:	3601      	adds	r6, #1
 80125de:	2301      	movs	r3, #1
 80125e0:	1064      	asrs	r4, r4, #1
 80125e2:	3508      	adds	r5, #8
 80125e4:	e73f      	b.n	8012466 <_dtoa_r+0x366>
 80125e6:	2602      	movs	r6, #2
 80125e8:	e742      	b.n	8012470 <_dtoa_r+0x370>
 80125ea:	9c07      	ldr	r4, [sp, #28]
 80125ec:	9704      	str	r7, [sp, #16]
 80125ee:	e761      	b.n	80124b4 <_dtoa_r+0x3b4>
 80125f0:	4b27      	ldr	r3, [pc, #156]	@ (8012690 <_dtoa_r+0x590>)
 80125f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80125f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80125fc:	4454      	add	r4, sl
 80125fe:	2900      	cmp	r1, #0
 8012600:	d054      	beq.n	80126ac <_dtoa_r+0x5ac>
 8012602:	4929      	ldr	r1, [pc, #164]	@ (80126a8 <_dtoa_r+0x5a8>)
 8012604:	2000      	movs	r0, #0
 8012606:	f7ee f949 	bl	800089c <__aeabi_ddiv>
 801260a:	4633      	mov	r3, r6
 801260c:	462a      	mov	r2, r5
 801260e:	f7ed fe63 	bl	80002d8 <__aeabi_dsub>
 8012612:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012616:	4656      	mov	r6, sl
 8012618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801261c:	f7ee fac4 	bl	8000ba8 <__aeabi_d2iz>
 8012620:	4605      	mov	r5, r0
 8012622:	f7ed ffa7 	bl	8000574 <__aeabi_i2d>
 8012626:	4602      	mov	r2, r0
 8012628:	460b      	mov	r3, r1
 801262a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801262e:	f7ed fe53 	bl	80002d8 <__aeabi_dsub>
 8012632:	3530      	adds	r5, #48	@ 0x30
 8012634:	4602      	mov	r2, r0
 8012636:	460b      	mov	r3, r1
 8012638:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801263c:	f806 5b01 	strb.w	r5, [r6], #1
 8012640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012644:	f7ee fa72 	bl	8000b2c <__aeabi_dcmplt>
 8012648:	2800      	cmp	r0, #0
 801264a:	d172      	bne.n	8012732 <_dtoa_r+0x632>
 801264c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012650:	4911      	ldr	r1, [pc, #68]	@ (8012698 <_dtoa_r+0x598>)
 8012652:	2000      	movs	r0, #0
 8012654:	f7ed fe40 	bl	80002d8 <__aeabi_dsub>
 8012658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801265c:	f7ee fa66 	bl	8000b2c <__aeabi_dcmplt>
 8012660:	2800      	cmp	r0, #0
 8012662:	f040 8096 	bne.w	8012792 <_dtoa_r+0x692>
 8012666:	42a6      	cmp	r6, r4
 8012668:	f43f af50 	beq.w	801250c <_dtoa_r+0x40c>
 801266c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012670:	4b0a      	ldr	r3, [pc, #40]	@ (801269c <_dtoa_r+0x59c>)
 8012672:	2200      	movs	r2, #0
 8012674:	f7ed ffe8 	bl	8000648 <__aeabi_dmul>
 8012678:	4b08      	ldr	r3, [pc, #32]	@ (801269c <_dtoa_r+0x59c>)
 801267a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801267e:	2200      	movs	r2, #0
 8012680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012684:	f7ed ffe0 	bl	8000648 <__aeabi_dmul>
 8012688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801268c:	e7c4      	b.n	8012618 <_dtoa_r+0x518>
 801268e:	bf00      	nop
 8012690:	080157b0 	.word	0x080157b0
 8012694:	08015788 	.word	0x08015788
 8012698:	3ff00000 	.word	0x3ff00000
 801269c:	40240000 	.word	0x40240000
 80126a0:	401c0000 	.word	0x401c0000
 80126a4:	40140000 	.word	0x40140000
 80126a8:	3fe00000 	.word	0x3fe00000
 80126ac:	4631      	mov	r1, r6
 80126ae:	4628      	mov	r0, r5
 80126b0:	f7ed ffca 	bl	8000648 <__aeabi_dmul>
 80126b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126b8:	9415      	str	r4, [sp, #84]	@ 0x54
 80126ba:	4656      	mov	r6, sl
 80126bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126c0:	f7ee fa72 	bl	8000ba8 <__aeabi_d2iz>
 80126c4:	4605      	mov	r5, r0
 80126c6:	f7ed ff55 	bl	8000574 <__aeabi_i2d>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126d2:	f7ed fe01 	bl	80002d8 <__aeabi_dsub>
 80126d6:	3530      	adds	r5, #48	@ 0x30
 80126d8:	f806 5b01 	strb.w	r5, [r6], #1
 80126dc:	4602      	mov	r2, r0
 80126de:	460b      	mov	r3, r1
 80126e0:	42a6      	cmp	r6, r4
 80126e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126e6:	f04f 0200 	mov.w	r2, #0
 80126ea:	d124      	bne.n	8012736 <_dtoa_r+0x636>
 80126ec:	4bac      	ldr	r3, [pc, #688]	@ (80129a0 <_dtoa_r+0x8a0>)
 80126ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80126f2:	f7ed fdf3 	bl	80002dc <__adddf3>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126fe:	f7ee fa33 	bl	8000b68 <__aeabi_dcmpgt>
 8012702:	2800      	cmp	r0, #0
 8012704:	d145      	bne.n	8012792 <_dtoa_r+0x692>
 8012706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801270a:	49a5      	ldr	r1, [pc, #660]	@ (80129a0 <_dtoa_r+0x8a0>)
 801270c:	2000      	movs	r0, #0
 801270e:	f7ed fde3 	bl	80002d8 <__aeabi_dsub>
 8012712:	4602      	mov	r2, r0
 8012714:	460b      	mov	r3, r1
 8012716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801271a:	f7ee fa07 	bl	8000b2c <__aeabi_dcmplt>
 801271e:	2800      	cmp	r0, #0
 8012720:	f43f aef4 	beq.w	801250c <_dtoa_r+0x40c>
 8012724:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012726:	1e73      	subs	r3, r6, #1
 8012728:	9315      	str	r3, [sp, #84]	@ 0x54
 801272a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801272e:	2b30      	cmp	r3, #48	@ 0x30
 8012730:	d0f8      	beq.n	8012724 <_dtoa_r+0x624>
 8012732:	9f04      	ldr	r7, [sp, #16]
 8012734:	e73d      	b.n	80125b2 <_dtoa_r+0x4b2>
 8012736:	4b9b      	ldr	r3, [pc, #620]	@ (80129a4 <_dtoa_r+0x8a4>)
 8012738:	f7ed ff86 	bl	8000648 <__aeabi_dmul>
 801273c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012740:	e7bc      	b.n	80126bc <_dtoa_r+0x5bc>
 8012742:	d10c      	bne.n	801275e <_dtoa_r+0x65e>
 8012744:	4b98      	ldr	r3, [pc, #608]	@ (80129a8 <_dtoa_r+0x8a8>)
 8012746:	2200      	movs	r2, #0
 8012748:	e9dd 0100 	ldrd	r0, r1, [sp]
 801274c:	f7ed ff7c 	bl	8000648 <__aeabi_dmul>
 8012750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012754:	f7ee f9fe 	bl	8000b54 <__aeabi_dcmpge>
 8012758:	2800      	cmp	r0, #0
 801275a:	f000 8157 	beq.w	8012a0c <_dtoa_r+0x90c>
 801275e:	2400      	movs	r4, #0
 8012760:	4625      	mov	r5, r4
 8012762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012764:	43db      	mvns	r3, r3
 8012766:	9304      	str	r3, [sp, #16]
 8012768:	4656      	mov	r6, sl
 801276a:	2700      	movs	r7, #0
 801276c:	4621      	mov	r1, r4
 801276e:	4658      	mov	r0, fp
 8012770:	f000 faa9 	bl	8012cc6 <_Bfree>
 8012774:	2d00      	cmp	r5, #0
 8012776:	d0dc      	beq.n	8012732 <_dtoa_r+0x632>
 8012778:	b12f      	cbz	r7, 8012786 <_dtoa_r+0x686>
 801277a:	42af      	cmp	r7, r5
 801277c:	d003      	beq.n	8012786 <_dtoa_r+0x686>
 801277e:	4639      	mov	r1, r7
 8012780:	4658      	mov	r0, fp
 8012782:	f000 faa0 	bl	8012cc6 <_Bfree>
 8012786:	4629      	mov	r1, r5
 8012788:	4658      	mov	r0, fp
 801278a:	f000 fa9c 	bl	8012cc6 <_Bfree>
 801278e:	e7d0      	b.n	8012732 <_dtoa_r+0x632>
 8012790:	9704      	str	r7, [sp, #16]
 8012792:	4633      	mov	r3, r6
 8012794:	461e      	mov	r6, r3
 8012796:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801279a:	2a39      	cmp	r2, #57	@ 0x39
 801279c:	d107      	bne.n	80127ae <_dtoa_r+0x6ae>
 801279e:	459a      	cmp	sl, r3
 80127a0:	d1f8      	bne.n	8012794 <_dtoa_r+0x694>
 80127a2:	9a04      	ldr	r2, [sp, #16]
 80127a4:	3201      	adds	r2, #1
 80127a6:	9204      	str	r2, [sp, #16]
 80127a8:	2230      	movs	r2, #48	@ 0x30
 80127aa:	f88a 2000 	strb.w	r2, [sl]
 80127ae:	781a      	ldrb	r2, [r3, #0]
 80127b0:	3201      	adds	r2, #1
 80127b2:	701a      	strb	r2, [r3, #0]
 80127b4:	e7bd      	b.n	8012732 <_dtoa_r+0x632>
 80127b6:	4b7b      	ldr	r3, [pc, #492]	@ (80129a4 <_dtoa_r+0x8a4>)
 80127b8:	2200      	movs	r2, #0
 80127ba:	f7ed ff45 	bl	8000648 <__aeabi_dmul>
 80127be:	2200      	movs	r2, #0
 80127c0:	2300      	movs	r3, #0
 80127c2:	4604      	mov	r4, r0
 80127c4:	460d      	mov	r5, r1
 80127c6:	f7ee f9a7 	bl	8000b18 <__aeabi_dcmpeq>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	f43f aeba 	beq.w	8012544 <_dtoa_r+0x444>
 80127d0:	e6ef      	b.n	80125b2 <_dtoa_r+0x4b2>
 80127d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	f000 80db 	beq.w	8012990 <_dtoa_r+0x890>
 80127da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127dc:	2a01      	cmp	r2, #1
 80127de:	f300 80bf 	bgt.w	8012960 <_dtoa_r+0x860>
 80127e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80127e4:	2a00      	cmp	r2, #0
 80127e6:	f000 80b7 	beq.w	8012958 <_dtoa_r+0x858>
 80127ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80127ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80127f0:	4646      	mov	r6, r8
 80127f2:	9a08      	ldr	r2, [sp, #32]
 80127f4:	2101      	movs	r1, #1
 80127f6:	441a      	add	r2, r3
 80127f8:	4658      	mov	r0, fp
 80127fa:	4498      	add	r8, r3
 80127fc:	9208      	str	r2, [sp, #32]
 80127fe:	f000 fafd 	bl	8012dfc <__i2b>
 8012802:	4605      	mov	r5, r0
 8012804:	b15e      	cbz	r6, 801281e <_dtoa_r+0x71e>
 8012806:	9b08      	ldr	r3, [sp, #32]
 8012808:	2b00      	cmp	r3, #0
 801280a:	dd08      	ble.n	801281e <_dtoa_r+0x71e>
 801280c:	42b3      	cmp	r3, r6
 801280e:	9a08      	ldr	r2, [sp, #32]
 8012810:	bfa8      	it	ge
 8012812:	4633      	movge	r3, r6
 8012814:	eba8 0803 	sub.w	r8, r8, r3
 8012818:	1af6      	subs	r6, r6, r3
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	9308      	str	r3, [sp, #32]
 801281e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012820:	b1f3      	cbz	r3, 8012860 <_dtoa_r+0x760>
 8012822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012824:	2b00      	cmp	r3, #0
 8012826:	f000 80b7 	beq.w	8012998 <_dtoa_r+0x898>
 801282a:	b18c      	cbz	r4, 8012850 <_dtoa_r+0x750>
 801282c:	4629      	mov	r1, r5
 801282e:	4622      	mov	r2, r4
 8012830:	4658      	mov	r0, fp
 8012832:	f000 fba3 	bl	8012f7c <__pow5mult>
 8012836:	464a      	mov	r2, r9
 8012838:	4601      	mov	r1, r0
 801283a:	4605      	mov	r5, r0
 801283c:	4658      	mov	r0, fp
 801283e:	f000 faf3 	bl	8012e28 <__multiply>
 8012842:	4649      	mov	r1, r9
 8012844:	9004      	str	r0, [sp, #16]
 8012846:	4658      	mov	r0, fp
 8012848:	f000 fa3d 	bl	8012cc6 <_Bfree>
 801284c:	9b04      	ldr	r3, [sp, #16]
 801284e:	4699      	mov	r9, r3
 8012850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012852:	1b1a      	subs	r2, r3, r4
 8012854:	d004      	beq.n	8012860 <_dtoa_r+0x760>
 8012856:	4649      	mov	r1, r9
 8012858:	4658      	mov	r0, fp
 801285a:	f000 fb8f 	bl	8012f7c <__pow5mult>
 801285e:	4681      	mov	r9, r0
 8012860:	2101      	movs	r1, #1
 8012862:	4658      	mov	r0, fp
 8012864:	f000 faca 	bl	8012dfc <__i2b>
 8012868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801286a:	4604      	mov	r4, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	f000 81cc 	beq.w	8012c0a <_dtoa_r+0xb0a>
 8012872:	461a      	mov	r2, r3
 8012874:	4601      	mov	r1, r0
 8012876:	4658      	mov	r0, fp
 8012878:	f000 fb80 	bl	8012f7c <__pow5mult>
 801287c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801287e:	2b01      	cmp	r3, #1
 8012880:	4604      	mov	r4, r0
 8012882:	f300 8095 	bgt.w	80129b0 <_dtoa_r+0x8b0>
 8012886:	9b02      	ldr	r3, [sp, #8]
 8012888:	2b00      	cmp	r3, #0
 801288a:	f040 8087 	bne.w	801299c <_dtoa_r+0x89c>
 801288e:	9b03      	ldr	r3, [sp, #12]
 8012890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012894:	2b00      	cmp	r3, #0
 8012896:	f040 8089 	bne.w	80129ac <_dtoa_r+0x8ac>
 801289a:	9b03      	ldr	r3, [sp, #12]
 801289c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128a0:	0d1b      	lsrs	r3, r3, #20
 80128a2:	051b      	lsls	r3, r3, #20
 80128a4:	b12b      	cbz	r3, 80128b2 <_dtoa_r+0x7b2>
 80128a6:	9b08      	ldr	r3, [sp, #32]
 80128a8:	3301      	adds	r3, #1
 80128aa:	9308      	str	r3, [sp, #32]
 80128ac:	f108 0801 	add.w	r8, r8, #1
 80128b0:	2301      	movs	r3, #1
 80128b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80128b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f000 81ad 	beq.w	8012c16 <_dtoa_r+0xb16>
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80128c2:	6918      	ldr	r0, [r3, #16]
 80128c4:	f000 fa4e 	bl	8012d64 <__hi0bits>
 80128c8:	f1c0 0020 	rsb	r0, r0, #32
 80128cc:	9b08      	ldr	r3, [sp, #32]
 80128ce:	4418      	add	r0, r3
 80128d0:	f010 001f 	ands.w	r0, r0, #31
 80128d4:	d077      	beq.n	80129c6 <_dtoa_r+0x8c6>
 80128d6:	f1c0 0320 	rsb	r3, r0, #32
 80128da:	2b04      	cmp	r3, #4
 80128dc:	dd6b      	ble.n	80129b6 <_dtoa_r+0x8b6>
 80128de:	9b08      	ldr	r3, [sp, #32]
 80128e0:	f1c0 001c 	rsb	r0, r0, #28
 80128e4:	4403      	add	r3, r0
 80128e6:	4480      	add	r8, r0
 80128e8:	4406      	add	r6, r0
 80128ea:	9308      	str	r3, [sp, #32]
 80128ec:	f1b8 0f00 	cmp.w	r8, #0
 80128f0:	dd05      	ble.n	80128fe <_dtoa_r+0x7fe>
 80128f2:	4649      	mov	r1, r9
 80128f4:	4642      	mov	r2, r8
 80128f6:	4658      	mov	r0, fp
 80128f8:	f000 fb80 	bl	8012ffc <__lshift>
 80128fc:	4681      	mov	r9, r0
 80128fe:	9b08      	ldr	r3, [sp, #32]
 8012900:	2b00      	cmp	r3, #0
 8012902:	dd05      	ble.n	8012910 <_dtoa_r+0x810>
 8012904:	4621      	mov	r1, r4
 8012906:	461a      	mov	r2, r3
 8012908:	4658      	mov	r0, fp
 801290a:	f000 fb77 	bl	8012ffc <__lshift>
 801290e:	4604      	mov	r4, r0
 8012910:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012912:	2b00      	cmp	r3, #0
 8012914:	d059      	beq.n	80129ca <_dtoa_r+0x8ca>
 8012916:	4621      	mov	r1, r4
 8012918:	4648      	mov	r0, r9
 801291a:	f000 fbdb 	bl	80130d4 <__mcmp>
 801291e:	2800      	cmp	r0, #0
 8012920:	da53      	bge.n	80129ca <_dtoa_r+0x8ca>
 8012922:	1e7b      	subs	r3, r7, #1
 8012924:	9304      	str	r3, [sp, #16]
 8012926:	4649      	mov	r1, r9
 8012928:	2300      	movs	r3, #0
 801292a:	220a      	movs	r2, #10
 801292c:	4658      	mov	r0, fp
 801292e:	f000 f9d3 	bl	8012cd8 <__multadd>
 8012932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012934:	4681      	mov	r9, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	f000 816f 	beq.w	8012c1a <_dtoa_r+0xb1a>
 801293c:	2300      	movs	r3, #0
 801293e:	4629      	mov	r1, r5
 8012940:	220a      	movs	r2, #10
 8012942:	4658      	mov	r0, fp
 8012944:	f000 f9c8 	bl	8012cd8 <__multadd>
 8012948:	9b00      	ldr	r3, [sp, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	4605      	mov	r5, r0
 801294e:	dc67      	bgt.n	8012a20 <_dtoa_r+0x920>
 8012950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012952:	2b02      	cmp	r3, #2
 8012954:	dc41      	bgt.n	80129da <_dtoa_r+0x8da>
 8012956:	e063      	b.n	8012a20 <_dtoa_r+0x920>
 8012958:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801295a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801295e:	e746      	b.n	80127ee <_dtoa_r+0x6ee>
 8012960:	9b07      	ldr	r3, [sp, #28]
 8012962:	1e5c      	subs	r4, r3, #1
 8012964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012966:	42a3      	cmp	r3, r4
 8012968:	bfbf      	itttt	lt
 801296a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801296c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801296e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012970:	1ae3      	sublt	r3, r4, r3
 8012972:	bfb4      	ite	lt
 8012974:	18d2      	addlt	r2, r2, r3
 8012976:	1b1c      	subge	r4, r3, r4
 8012978:	9b07      	ldr	r3, [sp, #28]
 801297a:	bfbc      	itt	lt
 801297c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801297e:	2400      	movlt	r4, #0
 8012980:	2b00      	cmp	r3, #0
 8012982:	bfb5      	itete	lt
 8012984:	eba8 0603 	sublt.w	r6, r8, r3
 8012988:	9b07      	ldrge	r3, [sp, #28]
 801298a:	2300      	movlt	r3, #0
 801298c:	4646      	movge	r6, r8
 801298e:	e730      	b.n	80127f2 <_dtoa_r+0x6f2>
 8012990:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012992:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012994:	4646      	mov	r6, r8
 8012996:	e735      	b.n	8012804 <_dtoa_r+0x704>
 8012998:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801299a:	e75c      	b.n	8012856 <_dtoa_r+0x756>
 801299c:	2300      	movs	r3, #0
 801299e:	e788      	b.n	80128b2 <_dtoa_r+0x7b2>
 80129a0:	3fe00000 	.word	0x3fe00000
 80129a4:	40240000 	.word	0x40240000
 80129a8:	40140000 	.word	0x40140000
 80129ac:	9b02      	ldr	r3, [sp, #8]
 80129ae:	e780      	b.n	80128b2 <_dtoa_r+0x7b2>
 80129b0:	2300      	movs	r3, #0
 80129b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80129b4:	e782      	b.n	80128bc <_dtoa_r+0x7bc>
 80129b6:	d099      	beq.n	80128ec <_dtoa_r+0x7ec>
 80129b8:	9a08      	ldr	r2, [sp, #32]
 80129ba:	331c      	adds	r3, #28
 80129bc:	441a      	add	r2, r3
 80129be:	4498      	add	r8, r3
 80129c0:	441e      	add	r6, r3
 80129c2:	9208      	str	r2, [sp, #32]
 80129c4:	e792      	b.n	80128ec <_dtoa_r+0x7ec>
 80129c6:	4603      	mov	r3, r0
 80129c8:	e7f6      	b.n	80129b8 <_dtoa_r+0x8b8>
 80129ca:	9b07      	ldr	r3, [sp, #28]
 80129cc:	9704      	str	r7, [sp, #16]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	dc20      	bgt.n	8012a14 <_dtoa_r+0x914>
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129d6:	2b02      	cmp	r3, #2
 80129d8:	dd1e      	ble.n	8012a18 <_dtoa_r+0x918>
 80129da:	9b00      	ldr	r3, [sp, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	f47f aec0 	bne.w	8012762 <_dtoa_r+0x662>
 80129e2:	4621      	mov	r1, r4
 80129e4:	2205      	movs	r2, #5
 80129e6:	4658      	mov	r0, fp
 80129e8:	f000 f976 	bl	8012cd8 <__multadd>
 80129ec:	4601      	mov	r1, r0
 80129ee:	4604      	mov	r4, r0
 80129f0:	4648      	mov	r0, r9
 80129f2:	f000 fb6f 	bl	80130d4 <__mcmp>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	f77f aeb3 	ble.w	8012762 <_dtoa_r+0x662>
 80129fc:	4656      	mov	r6, sl
 80129fe:	2331      	movs	r3, #49	@ 0x31
 8012a00:	f806 3b01 	strb.w	r3, [r6], #1
 8012a04:	9b04      	ldr	r3, [sp, #16]
 8012a06:	3301      	adds	r3, #1
 8012a08:	9304      	str	r3, [sp, #16]
 8012a0a:	e6ae      	b.n	801276a <_dtoa_r+0x66a>
 8012a0c:	9c07      	ldr	r4, [sp, #28]
 8012a0e:	9704      	str	r7, [sp, #16]
 8012a10:	4625      	mov	r5, r4
 8012a12:	e7f3      	b.n	80129fc <_dtoa_r+0x8fc>
 8012a14:	9b07      	ldr	r3, [sp, #28]
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f000 8101 	beq.w	8012c22 <_dtoa_r+0xb22>
 8012a20:	2e00      	cmp	r6, #0
 8012a22:	dd05      	ble.n	8012a30 <_dtoa_r+0x930>
 8012a24:	4629      	mov	r1, r5
 8012a26:	4632      	mov	r2, r6
 8012a28:	4658      	mov	r0, fp
 8012a2a:	f000 fae7 	bl	8012ffc <__lshift>
 8012a2e:	4605      	mov	r5, r0
 8012a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d059      	beq.n	8012aea <_dtoa_r+0x9ea>
 8012a36:	6869      	ldr	r1, [r5, #4]
 8012a38:	4658      	mov	r0, fp
 8012a3a:	f000 f91f 	bl	8012c7c <_Balloc>
 8012a3e:	4606      	mov	r6, r0
 8012a40:	b920      	cbnz	r0, 8012a4c <_dtoa_r+0x94c>
 8012a42:	4b83      	ldr	r3, [pc, #524]	@ (8012c50 <_dtoa_r+0xb50>)
 8012a44:	4602      	mov	r2, r0
 8012a46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012a4a:	e480      	b.n	801234e <_dtoa_r+0x24e>
 8012a4c:	692a      	ldr	r2, [r5, #16]
 8012a4e:	3202      	adds	r2, #2
 8012a50:	0092      	lsls	r2, r2, #2
 8012a52:	f105 010c 	add.w	r1, r5, #12
 8012a56:	300c      	adds	r0, #12
 8012a58:	f7fd fbc8 	bl	80101ec <memcpy>
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4658      	mov	r0, fp
 8012a62:	f000 facb 	bl	8012ffc <__lshift>
 8012a66:	f10a 0301 	add.w	r3, sl, #1
 8012a6a:	9307      	str	r3, [sp, #28]
 8012a6c:	9b00      	ldr	r3, [sp, #0]
 8012a6e:	4453      	add	r3, sl
 8012a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a72:	9b02      	ldr	r3, [sp, #8]
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	462f      	mov	r7, r5
 8012a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	9b07      	ldr	r3, [sp, #28]
 8012a80:	4621      	mov	r1, r4
 8012a82:	3b01      	subs	r3, #1
 8012a84:	4648      	mov	r0, r9
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	f7ff fab2 	bl	8011ff0 <quorem>
 8012a8c:	4639      	mov	r1, r7
 8012a8e:	9002      	str	r0, [sp, #8]
 8012a90:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012a94:	4648      	mov	r0, r9
 8012a96:	f000 fb1d 	bl	80130d4 <__mcmp>
 8012a9a:	462a      	mov	r2, r5
 8012a9c:	9008      	str	r0, [sp, #32]
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	4658      	mov	r0, fp
 8012aa2:	f000 fb33 	bl	801310c <__mdiff>
 8012aa6:	68c2      	ldr	r2, [r0, #12]
 8012aa8:	4606      	mov	r6, r0
 8012aaa:	bb02      	cbnz	r2, 8012aee <_dtoa_r+0x9ee>
 8012aac:	4601      	mov	r1, r0
 8012aae:	4648      	mov	r0, r9
 8012ab0:	f000 fb10 	bl	80130d4 <__mcmp>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	4658      	mov	r0, fp
 8012aba:	920e      	str	r2, [sp, #56]	@ 0x38
 8012abc:	f000 f903 	bl	8012cc6 <_Bfree>
 8012ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ac4:	9e07      	ldr	r6, [sp, #28]
 8012ac6:	ea43 0102 	orr.w	r1, r3, r2
 8012aca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012acc:	4319      	orrs	r1, r3
 8012ace:	d110      	bne.n	8012af2 <_dtoa_r+0x9f2>
 8012ad0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012ad4:	d029      	beq.n	8012b2a <_dtoa_r+0xa2a>
 8012ad6:	9b08      	ldr	r3, [sp, #32]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	dd02      	ble.n	8012ae2 <_dtoa_r+0x9e2>
 8012adc:	9b02      	ldr	r3, [sp, #8]
 8012ade:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012ae2:	9b00      	ldr	r3, [sp, #0]
 8012ae4:	f883 8000 	strb.w	r8, [r3]
 8012ae8:	e640      	b.n	801276c <_dtoa_r+0x66c>
 8012aea:	4628      	mov	r0, r5
 8012aec:	e7bb      	b.n	8012a66 <_dtoa_r+0x966>
 8012aee:	2201      	movs	r2, #1
 8012af0:	e7e1      	b.n	8012ab6 <_dtoa_r+0x9b6>
 8012af2:	9b08      	ldr	r3, [sp, #32]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	db04      	blt.n	8012b02 <_dtoa_r+0xa02>
 8012af8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012afa:	430b      	orrs	r3, r1
 8012afc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012afe:	430b      	orrs	r3, r1
 8012b00:	d120      	bne.n	8012b44 <_dtoa_r+0xa44>
 8012b02:	2a00      	cmp	r2, #0
 8012b04:	dded      	ble.n	8012ae2 <_dtoa_r+0x9e2>
 8012b06:	4649      	mov	r1, r9
 8012b08:	2201      	movs	r2, #1
 8012b0a:	4658      	mov	r0, fp
 8012b0c:	f000 fa76 	bl	8012ffc <__lshift>
 8012b10:	4621      	mov	r1, r4
 8012b12:	4681      	mov	r9, r0
 8012b14:	f000 fade 	bl	80130d4 <__mcmp>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	dc03      	bgt.n	8012b24 <_dtoa_r+0xa24>
 8012b1c:	d1e1      	bne.n	8012ae2 <_dtoa_r+0x9e2>
 8012b1e:	f018 0f01 	tst.w	r8, #1
 8012b22:	d0de      	beq.n	8012ae2 <_dtoa_r+0x9e2>
 8012b24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b28:	d1d8      	bne.n	8012adc <_dtoa_r+0x9dc>
 8012b2a:	9a00      	ldr	r2, [sp, #0]
 8012b2c:	2339      	movs	r3, #57	@ 0x39
 8012b2e:	7013      	strb	r3, [r2, #0]
 8012b30:	4633      	mov	r3, r6
 8012b32:	461e      	mov	r6, r3
 8012b34:	3b01      	subs	r3, #1
 8012b36:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012b3a:	2a39      	cmp	r2, #57	@ 0x39
 8012b3c:	d052      	beq.n	8012be4 <_dtoa_r+0xae4>
 8012b3e:	3201      	adds	r2, #1
 8012b40:	701a      	strb	r2, [r3, #0]
 8012b42:	e613      	b.n	801276c <_dtoa_r+0x66c>
 8012b44:	2a00      	cmp	r2, #0
 8012b46:	dd07      	ble.n	8012b58 <_dtoa_r+0xa58>
 8012b48:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b4c:	d0ed      	beq.n	8012b2a <_dtoa_r+0xa2a>
 8012b4e:	9a00      	ldr	r2, [sp, #0]
 8012b50:	f108 0301 	add.w	r3, r8, #1
 8012b54:	7013      	strb	r3, [r2, #0]
 8012b56:	e609      	b.n	801276c <_dtoa_r+0x66c>
 8012b58:	9b07      	ldr	r3, [sp, #28]
 8012b5a:	9a07      	ldr	r2, [sp, #28]
 8012b5c:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d028      	beq.n	8012bb8 <_dtoa_r+0xab8>
 8012b66:	4649      	mov	r1, r9
 8012b68:	2300      	movs	r3, #0
 8012b6a:	220a      	movs	r2, #10
 8012b6c:	4658      	mov	r0, fp
 8012b6e:	f000 f8b3 	bl	8012cd8 <__multadd>
 8012b72:	42af      	cmp	r7, r5
 8012b74:	4681      	mov	r9, r0
 8012b76:	f04f 0300 	mov.w	r3, #0
 8012b7a:	f04f 020a 	mov.w	r2, #10
 8012b7e:	4639      	mov	r1, r7
 8012b80:	4658      	mov	r0, fp
 8012b82:	d107      	bne.n	8012b94 <_dtoa_r+0xa94>
 8012b84:	f000 f8a8 	bl	8012cd8 <__multadd>
 8012b88:	4607      	mov	r7, r0
 8012b8a:	4605      	mov	r5, r0
 8012b8c:	9b07      	ldr	r3, [sp, #28]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	9307      	str	r3, [sp, #28]
 8012b92:	e774      	b.n	8012a7e <_dtoa_r+0x97e>
 8012b94:	f000 f8a0 	bl	8012cd8 <__multadd>
 8012b98:	4629      	mov	r1, r5
 8012b9a:	4607      	mov	r7, r0
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	220a      	movs	r2, #10
 8012ba0:	4658      	mov	r0, fp
 8012ba2:	f000 f899 	bl	8012cd8 <__multadd>
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	e7f0      	b.n	8012b8c <_dtoa_r+0xa8c>
 8012baa:	9b00      	ldr	r3, [sp, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	bfcc      	ite	gt
 8012bb0:	461e      	movgt	r6, r3
 8012bb2:	2601      	movle	r6, #1
 8012bb4:	4456      	add	r6, sl
 8012bb6:	2700      	movs	r7, #0
 8012bb8:	4649      	mov	r1, r9
 8012bba:	2201      	movs	r2, #1
 8012bbc:	4658      	mov	r0, fp
 8012bbe:	f000 fa1d 	bl	8012ffc <__lshift>
 8012bc2:	4621      	mov	r1, r4
 8012bc4:	4681      	mov	r9, r0
 8012bc6:	f000 fa85 	bl	80130d4 <__mcmp>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	dcb0      	bgt.n	8012b30 <_dtoa_r+0xa30>
 8012bce:	d102      	bne.n	8012bd6 <_dtoa_r+0xad6>
 8012bd0:	f018 0f01 	tst.w	r8, #1
 8012bd4:	d1ac      	bne.n	8012b30 <_dtoa_r+0xa30>
 8012bd6:	4633      	mov	r3, r6
 8012bd8:	461e      	mov	r6, r3
 8012bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bde:	2a30      	cmp	r2, #48	@ 0x30
 8012be0:	d0fa      	beq.n	8012bd8 <_dtoa_r+0xad8>
 8012be2:	e5c3      	b.n	801276c <_dtoa_r+0x66c>
 8012be4:	459a      	cmp	sl, r3
 8012be6:	d1a4      	bne.n	8012b32 <_dtoa_r+0xa32>
 8012be8:	9b04      	ldr	r3, [sp, #16]
 8012bea:	3301      	adds	r3, #1
 8012bec:	9304      	str	r3, [sp, #16]
 8012bee:	2331      	movs	r3, #49	@ 0x31
 8012bf0:	f88a 3000 	strb.w	r3, [sl]
 8012bf4:	e5ba      	b.n	801276c <_dtoa_r+0x66c>
 8012bf6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012bf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012c54 <_dtoa_r+0xb54>
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	f43f aab6 	beq.w	801216e <_dtoa_r+0x6e>
 8012c02:	f10a 0308 	add.w	r3, sl, #8
 8012c06:	f7ff bab0 	b.w	801216a <_dtoa_r+0x6a>
 8012c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	f77f ae3a 	ble.w	8012886 <_dtoa_r+0x786>
 8012c12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c14:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c16:	2001      	movs	r0, #1
 8012c18:	e658      	b.n	80128cc <_dtoa_r+0x7cc>
 8012c1a:	9b00      	ldr	r3, [sp, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	f77f aed9 	ble.w	80129d4 <_dtoa_r+0x8d4>
 8012c22:	4656      	mov	r6, sl
 8012c24:	4621      	mov	r1, r4
 8012c26:	4648      	mov	r0, r9
 8012c28:	f7ff f9e2 	bl	8011ff0 <quorem>
 8012c2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012c30:	f806 8b01 	strb.w	r8, [r6], #1
 8012c34:	9b00      	ldr	r3, [sp, #0]
 8012c36:	eba6 020a 	sub.w	r2, r6, sl
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	ddb5      	ble.n	8012baa <_dtoa_r+0xaaa>
 8012c3e:	4649      	mov	r1, r9
 8012c40:	2300      	movs	r3, #0
 8012c42:	220a      	movs	r2, #10
 8012c44:	4658      	mov	r0, fp
 8012c46:	f000 f847 	bl	8012cd8 <__multadd>
 8012c4a:	4681      	mov	r9, r0
 8012c4c:	e7ea      	b.n	8012c24 <_dtoa_r+0xb24>
 8012c4e:	bf00      	nop
 8012c50:	080156b7 	.word	0x080156b7
 8012c54:	080156aa 	.word	0x080156aa

08012c58 <__ascii_mbtowc>:
 8012c58:	b082      	sub	sp, #8
 8012c5a:	b901      	cbnz	r1, 8012c5e <__ascii_mbtowc+0x6>
 8012c5c:	a901      	add	r1, sp, #4
 8012c5e:	b142      	cbz	r2, 8012c72 <__ascii_mbtowc+0x1a>
 8012c60:	b14b      	cbz	r3, 8012c76 <__ascii_mbtowc+0x1e>
 8012c62:	7813      	ldrb	r3, [r2, #0]
 8012c64:	600b      	str	r3, [r1, #0]
 8012c66:	7812      	ldrb	r2, [r2, #0]
 8012c68:	1e10      	subs	r0, r2, #0
 8012c6a:	bf18      	it	ne
 8012c6c:	2001      	movne	r0, #1
 8012c6e:	b002      	add	sp, #8
 8012c70:	4770      	bx	lr
 8012c72:	4610      	mov	r0, r2
 8012c74:	e7fb      	b.n	8012c6e <__ascii_mbtowc+0x16>
 8012c76:	f06f 0001 	mvn.w	r0, #1
 8012c7a:	e7f8      	b.n	8012c6e <__ascii_mbtowc+0x16>

08012c7c <_Balloc>:
 8012c7c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012c7e:	b570      	push	{r4, r5, r6, lr}
 8012c80:	4605      	mov	r5, r0
 8012c82:	460c      	mov	r4, r1
 8012c84:	b17b      	cbz	r3, 8012ca6 <_Balloc+0x2a>
 8012c86:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8012c88:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c8c:	b9a0      	cbnz	r0, 8012cb8 <_Balloc+0x3c>
 8012c8e:	2101      	movs	r1, #1
 8012c90:	fa01 f604 	lsl.w	r6, r1, r4
 8012c94:	1d72      	adds	r2, r6, #5
 8012c96:	0092      	lsls	r2, r2, #2
 8012c98:	4628      	mov	r0, r5
 8012c9a:	f000 fd73 	bl	8013784 <_calloc_r>
 8012c9e:	b148      	cbz	r0, 8012cb4 <_Balloc+0x38>
 8012ca0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8012ca4:	e00b      	b.n	8012cbe <_Balloc+0x42>
 8012ca6:	2221      	movs	r2, #33	@ 0x21
 8012ca8:	2104      	movs	r1, #4
 8012caa:	f000 fd6b 	bl	8013784 <_calloc_r>
 8012cae:	6468      	str	r0, [r5, #68]	@ 0x44
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d1e8      	bne.n	8012c86 <_Balloc+0xa>
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	bd70      	pop	{r4, r5, r6, pc}
 8012cb8:	6802      	ldr	r2, [r0, #0]
 8012cba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cc4:	e7f7      	b.n	8012cb6 <_Balloc+0x3a>

08012cc6 <_Bfree>:
 8012cc6:	b131      	cbz	r1, 8012cd6 <_Bfree+0x10>
 8012cc8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012cca:	684a      	ldr	r2, [r1, #4]
 8012ccc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cd0:	6008      	str	r0, [r1, #0]
 8012cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012cd6:	4770      	bx	lr

08012cd8 <__multadd>:
 8012cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cdc:	690d      	ldr	r5, [r1, #16]
 8012cde:	4607      	mov	r7, r0
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	461e      	mov	r6, r3
 8012ce4:	f101 0c14 	add.w	ip, r1, #20
 8012ce8:	2000      	movs	r0, #0
 8012cea:	f8dc 3000 	ldr.w	r3, [ip]
 8012cee:	b299      	uxth	r1, r3
 8012cf0:	fb02 6101 	mla	r1, r2, r1, r6
 8012cf4:	0c1e      	lsrs	r6, r3, #16
 8012cf6:	0c0b      	lsrs	r3, r1, #16
 8012cf8:	fb02 3306 	mla	r3, r2, r6, r3
 8012cfc:	b289      	uxth	r1, r1
 8012cfe:	3001      	adds	r0, #1
 8012d00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d04:	4285      	cmp	r5, r0
 8012d06:	f84c 1b04 	str.w	r1, [ip], #4
 8012d0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d0e:	dcec      	bgt.n	8012cea <__multadd+0x12>
 8012d10:	b30e      	cbz	r6, 8012d56 <__multadd+0x7e>
 8012d12:	68a3      	ldr	r3, [r4, #8]
 8012d14:	42ab      	cmp	r3, r5
 8012d16:	dc19      	bgt.n	8012d4c <__multadd+0x74>
 8012d18:	6861      	ldr	r1, [r4, #4]
 8012d1a:	4638      	mov	r0, r7
 8012d1c:	3101      	adds	r1, #1
 8012d1e:	f7ff ffad 	bl	8012c7c <_Balloc>
 8012d22:	4680      	mov	r8, r0
 8012d24:	b928      	cbnz	r0, 8012d32 <__multadd+0x5a>
 8012d26:	4602      	mov	r2, r0
 8012d28:	4b0c      	ldr	r3, [pc, #48]	@ (8012d5c <__multadd+0x84>)
 8012d2a:	480d      	ldr	r0, [pc, #52]	@ (8012d60 <__multadd+0x88>)
 8012d2c:	21ba      	movs	r1, #186	@ 0xba
 8012d2e:	f000 fd0b 	bl	8013748 <__assert_func>
 8012d32:	6922      	ldr	r2, [r4, #16]
 8012d34:	3202      	adds	r2, #2
 8012d36:	f104 010c 	add.w	r1, r4, #12
 8012d3a:	0092      	lsls	r2, r2, #2
 8012d3c:	300c      	adds	r0, #12
 8012d3e:	f7fd fa55 	bl	80101ec <memcpy>
 8012d42:	4621      	mov	r1, r4
 8012d44:	4638      	mov	r0, r7
 8012d46:	f7ff ffbe 	bl	8012cc6 <_Bfree>
 8012d4a:	4644      	mov	r4, r8
 8012d4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d50:	3501      	adds	r5, #1
 8012d52:	615e      	str	r6, [r3, #20]
 8012d54:	6125      	str	r5, [r4, #16]
 8012d56:	4620      	mov	r0, r4
 8012d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d5c:	080156b7 	.word	0x080156b7
 8012d60:	08015720 	.word	0x08015720

08012d64 <__hi0bits>:
 8012d64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012d68:	4603      	mov	r3, r0
 8012d6a:	bf36      	itet	cc
 8012d6c:	0403      	lslcc	r3, r0, #16
 8012d6e:	2000      	movcs	r0, #0
 8012d70:	2010      	movcc	r0, #16
 8012d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012d76:	bf3c      	itt	cc
 8012d78:	021b      	lslcc	r3, r3, #8
 8012d7a:	3008      	addcc	r0, #8
 8012d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d80:	bf3c      	itt	cc
 8012d82:	011b      	lslcc	r3, r3, #4
 8012d84:	3004      	addcc	r0, #4
 8012d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d8a:	bf3c      	itt	cc
 8012d8c:	009b      	lslcc	r3, r3, #2
 8012d8e:	3002      	addcc	r0, #2
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	db05      	blt.n	8012da0 <__hi0bits+0x3c>
 8012d94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012d98:	f100 0001 	add.w	r0, r0, #1
 8012d9c:	bf08      	it	eq
 8012d9e:	2020      	moveq	r0, #32
 8012da0:	4770      	bx	lr

08012da2 <__lo0bits>:
 8012da2:	6803      	ldr	r3, [r0, #0]
 8012da4:	4602      	mov	r2, r0
 8012da6:	f013 0007 	ands.w	r0, r3, #7
 8012daa:	d00b      	beq.n	8012dc4 <__lo0bits+0x22>
 8012dac:	07d9      	lsls	r1, r3, #31
 8012dae:	d421      	bmi.n	8012df4 <__lo0bits+0x52>
 8012db0:	0798      	lsls	r0, r3, #30
 8012db2:	bf49      	itett	mi
 8012db4:	085b      	lsrmi	r3, r3, #1
 8012db6:	089b      	lsrpl	r3, r3, #2
 8012db8:	2001      	movmi	r0, #1
 8012dba:	6013      	strmi	r3, [r2, #0]
 8012dbc:	bf5c      	itt	pl
 8012dbe:	6013      	strpl	r3, [r2, #0]
 8012dc0:	2002      	movpl	r0, #2
 8012dc2:	4770      	bx	lr
 8012dc4:	b299      	uxth	r1, r3
 8012dc6:	b909      	cbnz	r1, 8012dcc <__lo0bits+0x2a>
 8012dc8:	0c1b      	lsrs	r3, r3, #16
 8012dca:	2010      	movs	r0, #16
 8012dcc:	b2d9      	uxtb	r1, r3
 8012dce:	b909      	cbnz	r1, 8012dd4 <__lo0bits+0x32>
 8012dd0:	3008      	adds	r0, #8
 8012dd2:	0a1b      	lsrs	r3, r3, #8
 8012dd4:	0719      	lsls	r1, r3, #28
 8012dd6:	bf04      	itt	eq
 8012dd8:	091b      	lsreq	r3, r3, #4
 8012dda:	3004      	addeq	r0, #4
 8012ddc:	0799      	lsls	r1, r3, #30
 8012dde:	bf04      	itt	eq
 8012de0:	089b      	lsreq	r3, r3, #2
 8012de2:	3002      	addeq	r0, #2
 8012de4:	07d9      	lsls	r1, r3, #31
 8012de6:	d403      	bmi.n	8012df0 <__lo0bits+0x4e>
 8012de8:	085b      	lsrs	r3, r3, #1
 8012dea:	f100 0001 	add.w	r0, r0, #1
 8012dee:	d003      	beq.n	8012df8 <__lo0bits+0x56>
 8012df0:	6013      	str	r3, [r2, #0]
 8012df2:	4770      	bx	lr
 8012df4:	2000      	movs	r0, #0
 8012df6:	4770      	bx	lr
 8012df8:	2020      	movs	r0, #32
 8012dfa:	4770      	bx	lr

08012dfc <__i2b>:
 8012dfc:	b510      	push	{r4, lr}
 8012dfe:	460c      	mov	r4, r1
 8012e00:	2101      	movs	r1, #1
 8012e02:	f7ff ff3b 	bl	8012c7c <_Balloc>
 8012e06:	4602      	mov	r2, r0
 8012e08:	b928      	cbnz	r0, 8012e16 <__i2b+0x1a>
 8012e0a:	4b05      	ldr	r3, [pc, #20]	@ (8012e20 <__i2b+0x24>)
 8012e0c:	4805      	ldr	r0, [pc, #20]	@ (8012e24 <__i2b+0x28>)
 8012e0e:	f240 1145 	movw	r1, #325	@ 0x145
 8012e12:	f000 fc99 	bl	8013748 <__assert_func>
 8012e16:	2301      	movs	r3, #1
 8012e18:	6144      	str	r4, [r0, #20]
 8012e1a:	6103      	str	r3, [r0, #16]
 8012e1c:	bd10      	pop	{r4, pc}
 8012e1e:	bf00      	nop
 8012e20:	080156b7 	.word	0x080156b7
 8012e24:	08015720 	.word	0x08015720

08012e28 <__multiply>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	4614      	mov	r4, r2
 8012e2e:	690a      	ldr	r2, [r1, #16]
 8012e30:	6923      	ldr	r3, [r4, #16]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	bfa8      	it	ge
 8012e36:	4623      	movge	r3, r4
 8012e38:	460f      	mov	r7, r1
 8012e3a:	bfa4      	itt	ge
 8012e3c:	460c      	movge	r4, r1
 8012e3e:	461f      	movge	r7, r3
 8012e40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012e44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012e48:	68a3      	ldr	r3, [r4, #8]
 8012e4a:	6861      	ldr	r1, [r4, #4]
 8012e4c:	eb0a 0609 	add.w	r6, sl, r9
 8012e50:	42b3      	cmp	r3, r6
 8012e52:	b085      	sub	sp, #20
 8012e54:	bfb8      	it	lt
 8012e56:	3101      	addlt	r1, #1
 8012e58:	f7ff ff10 	bl	8012c7c <_Balloc>
 8012e5c:	b930      	cbnz	r0, 8012e6c <__multiply+0x44>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	4b44      	ldr	r3, [pc, #272]	@ (8012f74 <__multiply+0x14c>)
 8012e62:	4845      	ldr	r0, [pc, #276]	@ (8012f78 <__multiply+0x150>)
 8012e64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012e68:	f000 fc6e 	bl	8013748 <__assert_func>
 8012e6c:	f100 0514 	add.w	r5, r0, #20
 8012e70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012e74:	462b      	mov	r3, r5
 8012e76:	2200      	movs	r2, #0
 8012e78:	4543      	cmp	r3, r8
 8012e7a:	d321      	bcc.n	8012ec0 <__multiply+0x98>
 8012e7c:	f107 0114 	add.w	r1, r7, #20
 8012e80:	f104 0214 	add.w	r2, r4, #20
 8012e84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012e88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012e8c:	9302      	str	r3, [sp, #8]
 8012e8e:	1b13      	subs	r3, r2, r4
 8012e90:	3b15      	subs	r3, #21
 8012e92:	f023 0303 	bic.w	r3, r3, #3
 8012e96:	3304      	adds	r3, #4
 8012e98:	f104 0715 	add.w	r7, r4, #21
 8012e9c:	42ba      	cmp	r2, r7
 8012e9e:	bf38      	it	cc
 8012ea0:	2304      	movcc	r3, #4
 8012ea2:	9301      	str	r3, [sp, #4]
 8012ea4:	9b02      	ldr	r3, [sp, #8]
 8012ea6:	9103      	str	r1, [sp, #12]
 8012ea8:	428b      	cmp	r3, r1
 8012eaa:	d80c      	bhi.n	8012ec6 <__multiply+0x9e>
 8012eac:	2e00      	cmp	r6, #0
 8012eae:	dd03      	ble.n	8012eb8 <__multiply+0x90>
 8012eb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d05b      	beq.n	8012f70 <__multiply+0x148>
 8012eb8:	6106      	str	r6, [r0, #16]
 8012eba:	b005      	add	sp, #20
 8012ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec0:	f843 2b04 	str.w	r2, [r3], #4
 8012ec4:	e7d8      	b.n	8012e78 <__multiply+0x50>
 8012ec6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012eca:	f1ba 0f00 	cmp.w	sl, #0
 8012ece:	d024      	beq.n	8012f1a <__multiply+0xf2>
 8012ed0:	f104 0e14 	add.w	lr, r4, #20
 8012ed4:	46a9      	mov	r9, r5
 8012ed6:	f04f 0c00 	mov.w	ip, #0
 8012eda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012ede:	f8d9 3000 	ldr.w	r3, [r9]
 8012ee2:	fa1f fb87 	uxth.w	fp, r7
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	fb0a 330b 	mla	r3, sl, fp, r3
 8012eec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012ef0:	f8d9 7000 	ldr.w	r7, [r9]
 8012ef4:	4463      	add	r3, ip
 8012ef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012efa:	fb0a c70b 	mla	r7, sl, fp, ip
 8012efe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f08:	4572      	cmp	r2, lr
 8012f0a:	f849 3b04 	str.w	r3, [r9], #4
 8012f0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f12:	d8e2      	bhi.n	8012eda <__multiply+0xb2>
 8012f14:	9b01      	ldr	r3, [sp, #4]
 8012f16:	f845 c003 	str.w	ip, [r5, r3]
 8012f1a:	9b03      	ldr	r3, [sp, #12]
 8012f1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012f20:	3104      	adds	r1, #4
 8012f22:	f1b9 0f00 	cmp.w	r9, #0
 8012f26:	d021      	beq.n	8012f6c <__multiply+0x144>
 8012f28:	682b      	ldr	r3, [r5, #0]
 8012f2a:	f104 0c14 	add.w	ip, r4, #20
 8012f2e:	46ae      	mov	lr, r5
 8012f30:	f04f 0a00 	mov.w	sl, #0
 8012f34:	f8bc b000 	ldrh.w	fp, [ip]
 8012f38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012f3c:	fb09 770b 	mla	r7, r9, fp, r7
 8012f40:	4457      	add	r7, sl
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f48:	f84e 3b04 	str.w	r3, [lr], #4
 8012f4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012f50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f54:	f8be 3000 	ldrh.w	r3, [lr]
 8012f58:	fb09 330a 	mla	r3, r9, sl, r3
 8012f5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012f60:	4562      	cmp	r2, ip
 8012f62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f66:	d8e5      	bhi.n	8012f34 <__multiply+0x10c>
 8012f68:	9f01      	ldr	r7, [sp, #4]
 8012f6a:	51eb      	str	r3, [r5, r7]
 8012f6c:	3504      	adds	r5, #4
 8012f6e:	e799      	b.n	8012ea4 <__multiply+0x7c>
 8012f70:	3e01      	subs	r6, #1
 8012f72:	e79b      	b.n	8012eac <__multiply+0x84>
 8012f74:	080156b7 	.word	0x080156b7
 8012f78:	08015720 	.word	0x08015720

08012f7c <__pow5mult>:
 8012f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f80:	4615      	mov	r5, r2
 8012f82:	f012 0203 	ands.w	r2, r2, #3
 8012f86:	4607      	mov	r7, r0
 8012f88:	460e      	mov	r6, r1
 8012f8a:	d007      	beq.n	8012f9c <__pow5mult+0x20>
 8012f8c:	4c1a      	ldr	r4, [pc, #104]	@ (8012ff8 <__pow5mult+0x7c>)
 8012f8e:	3a01      	subs	r2, #1
 8012f90:	2300      	movs	r3, #0
 8012f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012f96:	f7ff fe9f 	bl	8012cd8 <__multadd>
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	10ad      	asrs	r5, r5, #2
 8012f9e:	d027      	beq.n	8012ff0 <__pow5mult+0x74>
 8012fa0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8012fa2:	b944      	cbnz	r4, 8012fb6 <__pow5mult+0x3a>
 8012fa4:	f240 2171 	movw	r1, #625	@ 0x271
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff ff27 	bl	8012dfc <__i2b>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	6438      	str	r0, [r7, #64]	@ 0x40
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	6003      	str	r3, [r0, #0]
 8012fb6:	f04f 0900 	mov.w	r9, #0
 8012fba:	07eb      	lsls	r3, r5, #31
 8012fbc:	d50a      	bpl.n	8012fd4 <__pow5mult+0x58>
 8012fbe:	4631      	mov	r1, r6
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	f7ff ff30 	bl	8012e28 <__multiply>
 8012fc8:	4631      	mov	r1, r6
 8012fca:	4680      	mov	r8, r0
 8012fcc:	4638      	mov	r0, r7
 8012fce:	f7ff fe7a 	bl	8012cc6 <_Bfree>
 8012fd2:	4646      	mov	r6, r8
 8012fd4:	106d      	asrs	r5, r5, #1
 8012fd6:	d00b      	beq.n	8012ff0 <__pow5mult+0x74>
 8012fd8:	6820      	ldr	r0, [r4, #0]
 8012fda:	b938      	cbnz	r0, 8012fec <__pow5mult+0x70>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	4621      	mov	r1, r4
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f7ff ff21 	bl	8012e28 <__multiply>
 8012fe6:	6020      	str	r0, [r4, #0]
 8012fe8:	f8c0 9000 	str.w	r9, [r0]
 8012fec:	4604      	mov	r4, r0
 8012fee:	e7e4      	b.n	8012fba <__pow5mult+0x3e>
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ff6:	bf00      	nop
 8012ff8:	0801577c 	.word	0x0801577c

08012ffc <__lshift>:
 8012ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013000:	460c      	mov	r4, r1
 8013002:	6849      	ldr	r1, [r1, #4]
 8013004:	6923      	ldr	r3, [r4, #16]
 8013006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801300a:	68a3      	ldr	r3, [r4, #8]
 801300c:	4607      	mov	r7, r0
 801300e:	4691      	mov	r9, r2
 8013010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013014:	f108 0601 	add.w	r6, r8, #1
 8013018:	42b3      	cmp	r3, r6
 801301a:	db0b      	blt.n	8013034 <__lshift+0x38>
 801301c:	4638      	mov	r0, r7
 801301e:	f7ff fe2d 	bl	8012c7c <_Balloc>
 8013022:	4605      	mov	r5, r0
 8013024:	b948      	cbnz	r0, 801303a <__lshift+0x3e>
 8013026:	4602      	mov	r2, r0
 8013028:	4b28      	ldr	r3, [pc, #160]	@ (80130cc <__lshift+0xd0>)
 801302a:	4829      	ldr	r0, [pc, #164]	@ (80130d0 <__lshift+0xd4>)
 801302c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013030:	f000 fb8a 	bl	8013748 <__assert_func>
 8013034:	3101      	adds	r1, #1
 8013036:	005b      	lsls	r3, r3, #1
 8013038:	e7ee      	b.n	8013018 <__lshift+0x1c>
 801303a:	2300      	movs	r3, #0
 801303c:	f100 0114 	add.w	r1, r0, #20
 8013040:	f100 0210 	add.w	r2, r0, #16
 8013044:	4618      	mov	r0, r3
 8013046:	4553      	cmp	r3, sl
 8013048:	db33      	blt.n	80130b2 <__lshift+0xb6>
 801304a:	6920      	ldr	r0, [r4, #16]
 801304c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013050:	f104 0314 	add.w	r3, r4, #20
 8013054:	f019 091f 	ands.w	r9, r9, #31
 8013058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801305c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013060:	d02b      	beq.n	80130ba <__lshift+0xbe>
 8013062:	f1c9 0e20 	rsb	lr, r9, #32
 8013066:	468a      	mov	sl, r1
 8013068:	2200      	movs	r2, #0
 801306a:	6818      	ldr	r0, [r3, #0]
 801306c:	fa00 f009 	lsl.w	r0, r0, r9
 8013070:	4310      	orrs	r0, r2
 8013072:	f84a 0b04 	str.w	r0, [sl], #4
 8013076:	f853 2b04 	ldr.w	r2, [r3], #4
 801307a:	459c      	cmp	ip, r3
 801307c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013080:	d8f3      	bhi.n	801306a <__lshift+0x6e>
 8013082:	ebac 0304 	sub.w	r3, ip, r4
 8013086:	3b15      	subs	r3, #21
 8013088:	f023 0303 	bic.w	r3, r3, #3
 801308c:	3304      	adds	r3, #4
 801308e:	f104 0015 	add.w	r0, r4, #21
 8013092:	4584      	cmp	ip, r0
 8013094:	bf38      	it	cc
 8013096:	2304      	movcc	r3, #4
 8013098:	50ca      	str	r2, [r1, r3]
 801309a:	b10a      	cbz	r2, 80130a0 <__lshift+0xa4>
 801309c:	f108 0602 	add.w	r6, r8, #2
 80130a0:	3e01      	subs	r6, #1
 80130a2:	4638      	mov	r0, r7
 80130a4:	612e      	str	r6, [r5, #16]
 80130a6:	4621      	mov	r1, r4
 80130a8:	f7ff fe0d 	bl	8012cc6 <_Bfree>
 80130ac:	4628      	mov	r0, r5
 80130ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80130b6:	3301      	adds	r3, #1
 80130b8:	e7c5      	b.n	8013046 <__lshift+0x4a>
 80130ba:	3904      	subs	r1, #4
 80130bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80130c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80130c4:	459c      	cmp	ip, r3
 80130c6:	d8f9      	bhi.n	80130bc <__lshift+0xc0>
 80130c8:	e7ea      	b.n	80130a0 <__lshift+0xa4>
 80130ca:	bf00      	nop
 80130cc:	080156b7 	.word	0x080156b7
 80130d0:	08015720 	.word	0x08015720

080130d4 <__mcmp>:
 80130d4:	690a      	ldr	r2, [r1, #16]
 80130d6:	4603      	mov	r3, r0
 80130d8:	6900      	ldr	r0, [r0, #16]
 80130da:	1a80      	subs	r0, r0, r2
 80130dc:	b530      	push	{r4, r5, lr}
 80130de:	d10e      	bne.n	80130fe <__mcmp+0x2a>
 80130e0:	3314      	adds	r3, #20
 80130e2:	3114      	adds	r1, #20
 80130e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80130e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80130ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80130f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80130f4:	4295      	cmp	r5, r2
 80130f6:	d003      	beq.n	8013100 <__mcmp+0x2c>
 80130f8:	d205      	bcs.n	8013106 <__mcmp+0x32>
 80130fa:	f04f 30ff 	mov.w	r0, #4294967295
 80130fe:	bd30      	pop	{r4, r5, pc}
 8013100:	42a3      	cmp	r3, r4
 8013102:	d3f3      	bcc.n	80130ec <__mcmp+0x18>
 8013104:	e7fb      	b.n	80130fe <__mcmp+0x2a>
 8013106:	2001      	movs	r0, #1
 8013108:	e7f9      	b.n	80130fe <__mcmp+0x2a>
	...

0801310c <__mdiff>:
 801310c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	4689      	mov	r9, r1
 8013112:	4606      	mov	r6, r0
 8013114:	4611      	mov	r1, r2
 8013116:	4648      	mov	r0, r9
 8013118:	4614      	mov	r4, r2
 801311a:	f7ff ffdb 	bl	80130d4 <__mcmp>
 801311e:	1e05      	subs	r5, r0, #0
 8013120:	d112      	bne.n	8013148 <__mdiff+0x3c>
 8013122:	4629      	mov	r1, r5
 8013124:	4630      	mov	r0, r6
 8013126:	f7ff fda9 	bl	8012c7c <_Balloc>
 801312a:	4602      	mov	r2, r0
 801312c:	b928      	cbnz	r0, 801313a <__mdiff+0x2e>
 801312e:	4b3f      	ldr	r3, [pc, #252]	@ (801322c <__mdiff+0x120>)
 8013130:	f240 2137 	movw	r1, #567	@ 0x237
 8013134:	483e      	ldr	r0, [pc, #248]	@ (8013230 <__mdiff+0x124>)
 8013136:	f000 fb07 	bl	8013748 <__assert_func>
 801313a:	2301      	movs	r3, #1
 801313c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013140:	4610      	mov	r0, r2
 8013142:	b003      	add	sp, #12
 8013144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013148:	bfbc      	itt	lt
 801314a:	464b      	movlt	r3, r9
 801314c:	46a1      	movlt	r9, r4
 801314e:	4630      	mov	r0, r6
 8013150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013154:	bfba      	itte	lt
 8013156:	461c      	movlt	r4, r3
 8013158:	2501      	movlt	r5, #1
 801315a:	2500      	movge	r5, #0
 801315c:	f7ff fd8e 	bl	8012c7c <_Balloc>
 8013160:	4602      	mov	r2, r0
 8013162:	b918      	cbnz	r0, 801316c <__mdiff+0x60>
 8013164:	4b31      	ldr	r3, [pc, #196]	@ (801322c <__mdiff+0x120>)
 8013166:	f240 2145 	movw	r1, #581	@ 0x245
 801316a:	e7e3      	b.n	8013134 <__mdiff+0x28>
 801316c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013170:	6926      	ldr	r6, [r4, #16]
 8013172:	60c5      	str	r5, [r0, #12]
 8013174:	f109 0310 	add.w	r3, r9, #16
 8013178:	f109 0514 	add.w	r5, r9, #20
 801317c:	f104 0e14 	add.w	lr, r4, #20
 8013180:	f100 0b14 	add.w	fp, r0, #20
 8013184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801318c:	9301      	str	r3, [sp, #4]
 801318e:	46d9      	mov	r9, fp
 8013190:	f04f 0c00 	mov.w	ip, #0
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	f85e 0b04 	ldr.w	r0, [lr], #4
 801319a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	fa1f f38a 	uxth.w	r3, sl
 80131a4:	4619      	mov	r1, r3
 80131a6:	b283      	uxth	r3, r0
 80131a8:	1acb      	subs	r3, r1, r3
 80131aa:	0c00      	lsrs	r0, r0, #16
 80131ac:	4463      	add	r3, ip
 80131ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80131b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80131bc:	4576      	cmp	r6, lr
 80131be:	f849 3b04 	str.w	r3, [r9], #4
 80131c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80131c6:	d8e5      	bhi.n	8013194 <__mdiff+0x88>
 80131c8:	1b33      	subs	r3, r6, r4
 80131ca:	3b15      	subs	r3, #21
 80131cc:	f023 0303 	bic.w	r3, r3, #3
 80131d0:	3415      	adds	r4, #21
 80131d2:	3304      	adds	r3, #4
 80131d4:	42a6      	cmp	r6, r4
 80131d6:	bf38      	it	cc
 80131d8:	2304      	movcc	r3, #4
 80131da:	441d      	add	r5, r3
 80131dc:	445b      	add	r3, fp
 80131de:	461e      	mov	r6, r3
 80131e0:	462c      	mov	r4, r5
 80131e2:	4544      	cmp	r4, r8
 80131e4:	d30e      	bcc.n	8013204 <__mdiff+0xf8>
 80131e6:	f108 0103 	add.w	r1, r8, #3
 80131ea:	1b49      	subs	r1, r1, r5
 80131ec:	f021 0103 	bic.w	r1, r1, #3
 80131f0:	3d03      	subs	r5, #3
 80131f2:	45a8      	cmp	r8, r5
 80131f4:	bf38      	it	cc
 80131f6:	2100      	movcc	r1, #0
 80131f8:	440b      	add	r3, r1
 80131fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80131fe:	b191      	cbz	r1, 8013226 <__mdiff+0x11a>
 8013200:	6117      	str	r7, [r2, #16]
 8013202:	e79d      	b.n	8013140 <__mdiff+0x34>
 8013204:	f854 1b04 	ldr.w	r1, [r4], #4
 8013208:	46e6      	mov	lr, ip
 801320a:	0c08      	lsrs	r0, r1, #16
 801320c:	fa1c fc81 	uxtah	ip, ip, r1
 8013210:	4471      	add	r1, lr
 8013212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013216:	b289      	uxth	r1, r1
 8013218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801321c:	f846 1b04 	str.w	r1, [r6], #4
 8013220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013224:	e7dd      	b.n	80131e2 <__mdiff+0xd6>
 8013226:	3f01      	subs	r7, #1
 8013228:	e7e7      	b.n	80131fa <__mdiff+0xee>
 801322a:	bf00      	nop
 801322c:	080156b7 	.word	0x080156b7
 8013230:	08015720 	.word	0x08015720

08013234 <__d2b>:
 8013234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013238:	460f      	mov	r7, r1
 801323a:	2101      	movs	r1, #1
 801323c:	ec59 8b10 	vmov	r8, r9, d0
 8013240:	4616      	mov	r6, r2
 8013242:	f7ff fd1b 	bl	8012c7c <_Balloc>
 8013246:	4604      	mov	r4, r0
 8013248:	b930      	cbnz	r0, 8013258 <__d2b+0x24>
 801324a:	4602      	mov	r2, r0
 801324c:	4b23      	ldr	r3, [pc, #140]	@ (80132dc <__d2b+0xa8>)
 801324e:	4824      	ldr	r0, [pc, #144]	@ (80132e0 <__d2b+0xac>)
 8013250:	f240 310f 	movw	r1, #783	@ 0x30f
 8013254:	f000 fa78 	bl	8013748 <__assert_func>
 8013258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801325c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013260:	b10d      	cbz	r5, 8013266 <__d2b+0x32>
 8013262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013266:	9301      	str	r3, [sp, #4]
 8013268:	f1b8 0300 	subs.w	r3, r8, #0
 801326c:	d023      	beq.n	80132b6 <__d2b+0x82>
 801326e:	4668      	mov	r0, sp
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	f7ff fd96 	bl	8012da2 <__lo0bits>
 8013276:	e9dd 1200 	ldrd	r1, r2, [sp]
 801327a:	b1d0      	cbz	r0, 80132b2 <__d2b+0x7e>
 801327c:	f1c0 0320 	rsb	r3, r0, #32
 8013280:	fa02 f303 	lsl.w	r3, r2, r3
 8013284:	430b      	orrs	r3, r1
 8013286:	40c2      	lsrs	r2, r0
 8013288:	6163      	str	r3, [r4, #20]
 801328a:	9201      	str	r2, [sp, #4]
 801328c:	9b01      	ldr	r3, [sp, #4]
 801328e:	61a3      	str	r3, [r4, #24]
 8013290:	2b00      	cmp	r3, #0
 8013292:	bf0c      	ite	eq
 8013294:	2201      	moveq	r2, #1
 8013296:	2202      	movne	r2, #2
 8013298:	6122      	str	r2, [r4, #16]
 801329a:	b1a5      	cbz	r5, 80132c6 <__d2b+0x92>
 801329c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80132a0:	4405      	add	r5, r0
 80132a2:	603d      	str	r5, [r7, #0]
 80132a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80132a8:	6030      	str	r0, [r6, #0]
 80132aa:	4620      	mov	r0, r4
 80132ac:	b003      	add	sp, #12
 80132ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132b2:	6161      	str	r1, [r4, #20]
 80132b4:	e7ea      	b.n	801328c <__d2b+0x58>
 80132b6:	a801      	add	r0, sp, #4
 80132b8:	f7ff fd73 	bl	8012da2 <__lo0bits>
 80132bc:	9b01      	ldr	r3, [sp, #4]
 80132be:	6163      	str	r3, [r4, #20]
 80132c0:	3020      	adds	r0, #32
 80132c2:	2201      	movs	r2, #1
 80132c4:	e7e8      	b.n	8013298 <__d2b+0x64>
 80132c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80132ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80132ce:	6038      	str	r0, [r7, #0]
 80132d0:	6918      	ldr	r0, [r3, #16]
 80132d2:	f7ff fd47 	bl	8012d64 <__hi0bits>
 80132d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80132da:	e7e5      	b.n	80132a8 <__d2b+0x74>
 80132dc:	080156b7 	.word	0x080156b7
 80132e0:	08015720 	.word	0x08015720

080132e4 <_realloc_r>:
 80132e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e8:	4682      	mov	sl, r0
 80132ea:	4693      	mov	fp, r2
 80132ec:	460c      	mov	r4, r1
 80132ee:	b929      	cbnz	r1, 80132fc <_realloc_r+0x18>
 80132f0:	4611      	mov	r1, r2
 80132f2:	b003      	add	sp, #12
 80132f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f8:	f7fc ba40 	b.w	800f77c <_malloc_r>
 80132fc:	f7fc fc78 	bl	800fbf0 <__malloc_lock>
 8013300:	f10b 080b 	add.w	r8, fp, #11
 8013304:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8013308:	f1b8 0f16 	cmp.w	r8, #22
 801330c:	f1a4 0908 	sub.w	r9, r4, #8
 8013310:	f025 0603 	bic.w	r6, r5, #3
 8013314:	d908      	bls.n	8013328 <_realloc_r+0x44>
 8013316:	f038 0807 	bics.w	r8, r8, #7
 801331a:	d507      	bpl.n	801332c <_realloc_r+0x48>
 801331c:	230c      	movs	r3, #12
 801331e:	f8ca 3000 	str.w	r3, [sl]
 8013322:	f04f 0b00 	mov.w	fp, #0
 8013326:	e032      	b.n	801338e <_realloc_r+0xaa>
 8013328:	f04f 0810 	mov.w	r8, #16
 801332c:	45c3      	cmp	fp, r8
 801332e:	d8f5      	bhi.n	801331c <_realloc_r+0x38>
 8013330:	4546      	cmp	r6, r8
 8013332:	f280 8174 	bge.w	801361e <_realloc_r+0x33a>
 8013336:	4b9e      	ldr	r3, [pc, #632]	@ (80135b0 <_realloc_r+0x2cc>)
 8013338:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801333c:	eb09 0106 	add.w	r1, r9, r6
 8013340:	458c      	cmp	ip, r1
 8013342:	6848      	ldr	r0, [r1, #4]
 8013344:	d005      	beq.n	8013352 <_realloc_r+0x6e>
 8013346:	f020 0201 	bic.w	r2, r0, #1
 801334a:	440a      	add	r2, r1
 801334c:	6852      	ldr	r2, [r2, #4]
 801334e:	07d7      	lsls	r7, r2, #31
 8013350:	d449      	bmi.n	80133e6 <_realloc_r+0x102>
 8013352:	f020 0003 	bic.w	r0, r0, #3
 8013356:	458c      	cmp	ip, r1
 8013358:	eb06 0700 	add.w	r7, r6, r0
 801335c:	d11b      	bne.n	8013396 <_realloc_r+0xb2>
 801335e:	f108 0210 	add.w	r2, r8, #16
 8013362:	42ba      	cmp	r2, r7
 8013364:	dc41      	bgt.n	80133ea <_realloc_r+0x106>
 8013366:	eb09 0208 	add.w	r2, r9, r8
 801336a:	eba7 0708 	sub.w	r7, r7, r8
 801336e:	f047 0701 	orr.w	r7, r7, #1
 8013372:	609a      	str	r2, [r3, #8]
 8013374:	6057      	str	r7, [r2, #4]
 8013376:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801337a:	f003 0301 	and.w	r3, r3, #1
 801337e:	ea43 0308 	orr.w	r3, r3, r8
 8013382:	f844 3c04 	str.w	r3, [r4, #-4]
 8013386:	4650      	mov	r0, sl
 8013388:	f7fc fc38 	bl	800fbfc <__malloc_unlock>
 801338c:	46a3      	mov	fp, r4
 801338e:	4658      	mov	r0, fp
 8013390:	b003      	add	sp, #12
 8013392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013396:	45b8      	cmp	r8, r7
 8013398:	dc27      	bgt.n	80133ea <_realloc_r+0x106>
 801339a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801339e:	60d3      	str	r3, [r2, #12]
 80133a0:	609a      	str	r2, [r3, #8]
 80133a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80133a6:	eba7 0008 	sub.w	r0, r7, r8
 80133aa:	280f      	cmp	r0, #15
 80133ac:	f003 0301 	and.w	r3, r3, #1
 80133b0:	eb09 0207 	add.w	r2, r9, r7
 80133b4:	f240 8135 	bls.w	8013622 <_realloc_r+0x33e>
 80133b8:	eb09 0108 	add.w	r1, r9, r8
 80133bc:	ea48 0303 	orr.w	r3, r8, r3
 80133c0:	f040 0001 	orr.w	r0, r0, #1
 80133c4:	f8c9 3004 	str.w	r3, [r9, #4]
 80133c8:	6048      	str	r0, [r1, #4]
 80133ca:	6853      	ldr	r3, [r2, #4]
 80133cc:	f043 0301 	orr.w	r3, r3, #1
 80133d0:	6053      	str	r3, [r2, #4]
 80133d2:	3108      	adds	r1, #8
 80133d4:	4650      	mov	r0, sl
 80133d6:	f7fc ff7d 	bl	80102d4 <_free_r>
 80133da:	4650      	mov	r0, sl
 80133dc:	f7fc fc0e 	bl	800fbfc <__malloc_unlock>
 80133e0:	f109 0b08 	add.w	fp, r9, #8
 80133e4:	e7d3      	b.n	801338e <_realloc_r+0xaa>
 80133e6:	2000      	movs	r0, #0
 80133e8:	4601      	mov	r1, r0
 80133ea:	07ea      	lsls	r2, r5, #31
 80133ec:	f100 80c7 	bmi.w	801357e <_realloc_r+0x29a>
 80133f0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80133f4:	eba9 0505 	sub.w	r5, r9, r5
 80133f8:	686a      	ldr	r2, [r5, #4]
 80133fa:	f022 0203 	bic.w	r2, r2, #3
 80133fe:	4432      	add	r2, r6
 8013400:	9201      	str	r2, [sp, #4]
 8013402:	2900      	cmp	r1, #0
 8013404:	f000 8086 	beq.w	8013514 <_realloc_r+0x230>
 8013408:	458c      	cmp	ip, r1
 801340a:	eb00 0702 	add.w	r7, r0, r2
 801340e:	d149      	bne.n	80134a4 <_realloc_r+0x1c0>
 8013410:	f108 0210 	add.w	r2, r8, #16
 8013414:	42ba      	cmp	r2, r7
 8013416:	dc7d      	bgt.n	8013514 <_realloc_r+0x230>
 8013418:	46ab      	mov	fp, r5
 801341a:	68ea      	ldr	r2, [r5, #12]
 801341c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8013420:	60ca      	str	r2, [r1, #12]
 8013422:	6091      	str	r1, [r2, #8]
 8013424:	1f32      	subs	r2, r6, #4
 8013426:	2a24      	cmp	r2, #36	@ 0x24
 8013428:	d836      	bhi.n	8013498 <_realloc_r+0x1b4>
 801342a:	2a13      	cmp	r2, #19
 801342c:	d932      	bls.n	8013494 <_realloc_r+0x1b0>
 801342e:	6821      	ldr	r1, [r4, #0]
 8013430:	60a9      	str	r1, [r5, #8]
 8013432:	6861      	ldr	r1, [r4, #4]
 8013434:	60e9      	str	r1, [r5, #12]
 8013436:	2a1b      	cmp	r2, #27
 8013438:	d81a      	bhi.n	8013470 <_realloc_r+0x18c>
 801343a:	3408      	adds	r4, #8
 801343c:	f105 0210 	add.w	r2, r5, #16
 8013440:	6821      	ldr	r1, [r4, #0]
 8013442:	6011      	str	r1, [r2, #0]
 8013444:	6861      	ldr	r1, [r4, #4]
 8013446:	6051      	str	r1, [r2, #4]
 8013448:	68a1      	ldr	r1, [r4, #8]
 801344a:	6091      	str	r1, [r2, #8]
 801344c:	eb05 0208 	add.w	r2, r5, r8
 8013450:	eba7 0708 	sub.w	r7, r7, r8
 8013454:	f047 0701 	orr.w	r7, r7, #1
 8013458:	609a      	str	r2, [r3, #8]
 801345a:	6057      	str	r7, [r2, #4]
 801345c:	686b      	ldr	r3, [r5, #4]
 801345e:	f003 0301 	and.w	r3, r3, #1
 8013462:	ea43 0308 	orr.w	r3, r3, r8
 8013466:	606b      	str	r3, [r5, #4]
 8013468:	4650      	mov	r0, sl
 801346a:	f7fc fbc7 	bl	800fbfc <__malloc_unlock>
 801346e:	e78e      	b.n	801338e <_realloc_r+0xaa>
 8013470:	68a1      	ldr	r1, [r4, #8]
 8013472:	6129      	str	r1, [r5, #16]
 8013474:	68e1      	ldr	r1, [r4, #12]
 8013476:	6169      	str	r1, [r5, #20]
 8013478:	2a24      	cmp	r2, #36	@ 0x24
 801347a:	bf01      	itttt	eq
 801347c:	6922      	ldreq	r2, [r4, #16]
 801347e:	61aa      	streq	r2, [r5, #24]
 8013480:	6961      	ldreq	r1, [r4, #20]
 8013482:	61e9      	streq	r1, [r5, #28]
 8013484:	bf19      	ittee	ne
 8013486:	3410      	addne	r4, #16
 8013488:	f105 0218 	addne.w	r2, r5, #24
 801348c:	f105 0220 	addeq.w	r2, r5, #32
 8013490:	3418      	addeq	r4, #24
 8013492:	e7d5      	b.n	8013440 <_realloc_r+0x15c>
 8013494:	465a      	mov	r2, fp
 8013496:	e7d3      	b.n	8013440 <_realloc_r+0x15c>
 8013498:	4621      	mov	r1, r4
 801349a:	4658      	mov	r0, fp
 801349c:	f7fe fcc4 	bl	8011e28 <memmove>
 80134a0:	4b43      	ldr	r3, [pc, #268]	@ (80135b0 <_realloc_r+0x2cc>)
 80134a2:	e7d3      	b.n	801344c <_realloc_r+0x168>
 80134a4:	45b8      	cmp	r8, r7
 80134a6:	dc35      	bgt.n	8013514 <_realloc_r+0x230>
 80134a8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80134ac:	4628      	mov	r0, r5
 80134ae:	60d3      	str	r3, [r2, #12]
 80134b0:	609a      	str	r2, [r3, #8]
 80134b2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80134b6:	68eb      	ldr	r3, [r5, #12]
 80134b8:	60d3      	str	r3, [r2, #12]
 80134ba:	609a      	str	r2, [r3, #8]
 80134bc:	1f32      	subs	r2, r6, #4
 80134be:	2a24      	cmp	r2, #36	@ 0x24
 80134c0:	d824      	bhi.n	801350c <_realloc_r+0x228>
 80134c2:	2a13      	cmp	r2, #19
 80134c4:	d908      	bls.n	80134d8 <_realloc_r+0x1f4>
 80134c6:	6823      	ldr	r3, [r4, #0]
 80134c8:	60ab      	str	r3, [r5, #8]
 80134ca:	6863      	ldr	r3, [r4, #4]
 80134cc:	60eb      	str	r3, [r5, #12]
 80134ce:	2a1b      	cmp	r2, #27
 80134d0:	d80a      	bhi.n	80134e8 <_realloc_r+0x204>
 80134d2:	3408      	adds	r4, #8
 80134d4:	f105 0010 	add.w	r0, r5, #16
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	6003      	str	r3, [r0, #0]
 80134dc:	6863      	ldr	r3, [r4, #4]
 80134de:	6043      	str	r3, [r0, #4]
 80134e0:	68a3      	ldr	r3, [r4, #8]
 80134e2:	6083      	str	r3, [r0, #8]
 80134e4:	46a9      	mov	r9, r5
 80134e6:	e75c      	b.n	80133a2 <_realloc_r+0xbe>
 80134e8:	68a3      	ldr	r3, [r4, #8]
 80134ea:	612b      	str	r3, [r5, #16]
 80134ec:	68e3      	ldr	r3, [r4, #12]
 80134ee:	616b      	str	r3, [r5, #20]
 80134f0:	2a24      	cmp	r2, #36	@ 0x24
 80134f2:	bf01      	itttt	eq
 80134f4:	6923      	ldreq	r3, [r4, #16]
 80134f6:	61ab      	streq	r3, [r5, #24]
 80134f8:	6963      	ldreq	r3, [r4, #20]
 80134fa:	61eb      	streq	r3, [r5, #28]
 80134fc:	bf19      	ittee	ne
 80134fe:	3410      	addne	r4, #16
 8013500:	f105 0018 	addne.w	r0, r5, #24
 8013504:	f105 0020 	addeq.w	r0, r5, #32
 8013508:	3418      	addeq	r4, #24
 801350a:	e7e5      	b.n	80134d8 <_realloc_r+0x1f4>
 801350c:	4621      	mov	r1, r4
 801350e:	f7fe fc8b 	bl	8011e28 <memmove>
 8013512:	e7e7      	b.n	80134e4 <_realloc_r+0x200>
 8013514:	9b01      	ldr	r3, [sp, #4]
 8013516:	4598      	cmp	r8, r3
 8013518:	dc31      	bgt.n	801357e <_realloc_r+0x29a>
 801351a:	4628      	mov	r0, r5
 801351c:	68eb      	ldr	r3, [r5, #12]
 801351e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013522:	60d3      	str	r3, [r2, #12]
 8013524:	609a      	str	r2, [r3, #8]
 8013526:	1f32      	subs	r2, r6, #4
 8013528:	2a24      	cmp	r2, #36	@ 0x24
 801352a:	d824      	bhi.n	8013576 <_realloc_r+0x292>
 801352c:	2a13      	cmp	r2, #19
 801352e:	d908      	bls.n	8013542 <_realloc_r+0x25e>
 8013530:	6823      	ldr	r3, [r4, #0]
 8013532:	60ab      	str	r3, [r5, #8]
 8013534:	6863      	ldr	r3, [r4, #4]
 8013536:	60eb      	str	r3, [r5, #12]
 8013538:	2a1b      	cmp	r2, #27
 801353a:	d80a      	bhi.n	8013552 <_realloc_r+0x26e>
 801353c:	3408      	adds	r4, #8
 801353e:	f105 0010 	add.w	r0, r5, #16
 8013542:	6823      	ldr	r3, [r4, #0]
 8013544:	6003      	str	r3, [r0, #0]
 8013546:	6863      	ldr	r3, [r4, #4]
 8013548:	6043      	str	r3, [r0, #4]
 801354a:	68a3      	ldr	r3, [r4, #8]
 801354c:	6083      	str	r3, [r0, #8]
 801354e:	9f01      	ldr	r7, [sp, #4]
 8013550:	e7c8      	b.n	80134e4 <_realloc_r+0x200>
 8013552:	68a3      	ldr	r3, [r4, #8]
 8013554:	612b      	str	r3, [r5, #16]
 8013556:	68e3      	ldr	r3, [r4, #12]
 8013558:	616b      	str	r3, [r5, #20]
 801355a:	2a24      	cmp	r2, #36	@ 0x24
 801355c:	bf01      	itttt	eq
 801355e:	6923      	ldreq	r3, [r4, #16]
 8013560:	61ab      	streq	r3, [r5, #24]
 8013562:	6963      	ldreq	r3, [r4, #20]
 8013564:	61eb      	streq	r3, [r5, #28]
 8013566:	bf19      	ittee	ne
 8013568:	3410      	addne	r4, #16
 801356a:	f105 0018 	addne.w	r0, r5, #24
 801356e:	f105 0020 	addeq.w	r0, r5, #32
 8013572:	3418      	addeq	r4, #24
 8013574:	e7e5      	b.n	8013542 <_realloc_r+0x25e>
 8013576:	4621      	mov	r1, r4
 8013578:	f7fe fc56 	bl	8011e28 <memmove>
 801357c:	e7e7      	b.n	801354e <_realloc_r+0x26a>
 801357e:	4659      	mov	r1, fp
 8013580:	4650      	mov	r0, sl
 8013582:	f7fc f8fb 	bl	800f77c <_malloc_r>
 8013586:	4683      	mov	fp, r0
 8013588:	b918      	cbnz	r0, 8013592 <_realloc_r+0x2ae>
 801358a:	4650      	mov	r0, sl
 801358c:	f7fc fb36 	bl	800fbfc <__malloc_unlock>
 8013590:	e6c7      	b.n	8013322 <_realloc_r+0x3e>
 8013592:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013596:	f023 0301 	bic.w	r3, r3, #1
 801359a:	444b      	add	r3, r9
 801359c:	f1a0 0208 	sub.w	r2, r0, #8
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d107      	bne.n	80135b4 <_realloc_r+0x2d0>
 80135a4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80135a8:	f027 0703 	bic.w	r7, r7, #3
 80135ac:	4437      	add	r7, r6
 80135ae:	e6f8      	b.n	80133a2 <_realloc_r+0xbe>
 80135b0:	20000020 	.word	0x20000020
 80135b4:	1f32      	subs	r2, r6, #4
 80135b6:	2a24      	cmp	r2, #36	@ 0x24
 80135b8:	d82d      	bhi.n	8013616 <_realloc_r+0x332>
 80135ba:	2a13      	cmp	r2, #19
 80135bc:	d928      	bls.n	8013610 <_realloc_r+0x32c>
 80135be:	6823      	ldr	r3, [r4, #0]
 80135c0:	6003      	str	r3, [r0, #0]
 80135c2:	6863      	ldr	r3, [r4, #4]
 80135c4:	6043      	str	r3, [r0, #4]
 80135c6:	2a1b      	cmp	r2, #27
 80135c8:	d80e      	bhi.n	80135e8 <_realloc_r+0x304>
 80135ca:	f104 0208 	add.w	r2, r4, #8
 80135ce:	f100 0308 	add.w	r3, r0, #8
 80135d2:	6811      	ldr	r1, [r2, #0]
 80135d4:	6019      	str	r1, [r3, #0]
 80135d6:	6851      	ldr	r1, [r2, #4]
 80135d8:	6059      	str	r1, [r3, #4]
 80135da:	6892      	ldr	r2, [r2, #8]
 80135dc:	609a      	str	r2, [r3, #8]
 80135de:	4621      	mov	r1, r4
 80135e0:	4650      	mov	r0, sl
 80135e2:	f7fc fe77 	bl	80102d4 <_free_r>
 80135e6:	e73f      	b.n	8013468 <_realloc_r+0x184>
 80135e8:	68a3      	ldr	r3, [r4, #8]
 80135ea:	6083      	str	r3, [r0, #8]
 80135ec:	68e3      	ldr	r3, [r4, #12]
 80135ee:	60c3      	str	r3, [r0, #12]
 80135f0:	2a24      	cmp	r2, #36	@ 0x24
 80135f2:	bf01      	itttt	eq
 80135f4:	6923      	ldreq	r3, [r4, #16]
 80135f6:	6103      	streq	r3, [r0, #16]
 80135f8:	6961      	ldreq	r1, [r4, #20]
 80135fa:	6141      	streq	r1, [r0, #20]
 80135fc:	bf19      	ittee	ne
 80135fe:	f104 0210 	addne.w	r2, r4, #16
 8013602:	f100 0310 	addne.w	r3, r0, #16
 8013606:	f104 0218 	addeq.w	r2, r4, #24
 801360a:	f100 0318 	addeq.w	r3, r0, #24
 801360e:	e7e0      	b.n	80135d2 <_realloc_r+0x2ee>
 8013610:	4603      	mov	r3, r0
 8013612:	4622      	mov	r2, r4
 8013614:	e7dd      	b.n	80135d2 <_realloc_r+0x2ee>
 8013616:	4621      	mov	r1, r4
 8013618:	f7fe fc06 	bl	8011e28 <memmove>
 801361c:	e7df      	b.n	80135de <_realloc_r+0x2fa>
 801361e:	4637      	mov	r7, r6
 8013620:	e6bf      	b.n	80133a2 <_realloc_r+0xbe>
 8013622:	431f      	orrs	r7, r3
 8013624:	f8c9 7004 	str.w	r7, [r9, #4]
 8013628:	6853      	ldr	r3, [r2, #4]
 801362a:	f043 0301 	orr.w	r3, r3, #1
 801362e:	6053      	str	r3, [r2, #4]
 8013630:	e6d3      	b.n	80133da <_realloc_r+0xf6>
 8013632:	bf00      	nop

08013634 <__ascii_wctomb>:
 8013634:	4603      	mov	r3, r0
 8013636:	4608      	mov	r0, r1
 8013638:	b141      	cbz	r1, 801364c <__ascii_wctomb+0x18>
 801363a:	2aff      	cmp	r2, #255	@ 0xff
 801363c:	d904      	bls.n	8013648 <__ascii_wctomb+0x14>
 801363e:	228a      	movs	r2, #138	@ 0x8a
 8013640:	601a      	str	r2, [r3, #0]
 8013642:	f04f 30ff 	mov.w	r0, #4294967295
 8013646:	4770      	bx	lr
 8013648:	700a      	strb	r2, [r1, #0]
 801364a:	2001      	movs	r0, #1
 801364c:	4770      	bx	lr

0801364e <__ssprint_r>:
 801364e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013652:	6893      	ldr	r3, [r2, #8]
 8013654:	f8d2 b000 	ldr.w	fp, [r2]
 8013658:	9001      	str	r0, [sp, #4]
 801365a:	460c      	mov	r4, r1
 801365c:	4617      	mov	r7, r2
 801365e:	2b00      	cmp	r3, #0
 8013660:	d157      	bne.n	8013712 <__ssprint_r+0xc4>
 8013662:	2000      	movs	r0, #0
 8013664:	2300      	movs	r3, #0
 8013666:	607b      	str	r3, [r7, #4]
 8013668:	b003      	add	sp, #12
 801366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801366e:	e9db a800 	ldrd	sl, r8, [fp]
 8013672:	f10b 0b08 	add.w	fp, fp, #8
 8013676:	68a6      	ldr	r6, [r4, #8]
 8013678:	6820      	ldr	r0, [r4, #0]
 801367a:	f1b8 0f00 	cmp.w	r8, #0
 801367e:	d0f6      	beq.n	801366e <__ssprint_r+0x20>
 8013680:	45b0      	cmp	r8, r6
 8013682:	d32e      	bcc.n	80136e2 <__ssprint_r+0x94>
 8013684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013688:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801368c:	d029      	beq.n	80136e2 <__ssprint_r+0x94>
 801368e:	6921      	ldr	r1, [r4, #16]
 8013690:	6965      	ldr	r5, [r4, #20]
 8013692:	eba0 0901 	sub.w	r9, r0, r1
 8013696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801369a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801369e:	f109 0001 	add.w	r0, r9, #1
 80136a2:	106d      	asrs	r5, r5, #1
 80136a4:	4440      	add	r0, r8
 80136a6:	4285      	cmp	r5, r0
 80136a8:	bf38      	it	cc
 80136aa:	4605      	movcc	r5, r0
 80136ac:	0553      	lsls	r3, r2, #21
 80136ae:	d534      	bpl.n	801371a <__ssprint_r+0xcc>
 80136b0:	9801      	ldr	r0, [sp, #4]
 80136b2:	4629      	mov	r1, r5
 80136b4:	f7fc f862 	bl	800f77c <_malloc_r>
 80136b8:	4606      	mov	r6, r0
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d038      	beq.n	8013730 <__ssprint_r+0xe2>
 80136be:	464a      	mov	r2, r9
 80136c0:	6921      	ldr	r1, [r4, #16]
 80136c2:	f7fc fd93 	bl	80101ec <memcpy>
 80136c6:	89a2      	ldrh	r2, [r4, #12]
 80136c8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80136cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80136d0:	81a2      	strh	r2, [r4, #12]
 80136d2:	6126      	str	r6, [r4, #16]
 80136d4:	6165      	str	r5, [r4, #20]
 80136d6:	444e      	add	r6, r9
 80136d8:	eba5 0509 	sub.w	r5, r5, r9
 80136dc:	6026      	str	r6, [r4, #0]
 80136de:	60a5      	str	r5, [r4, #8]
 80136e0:	4646      	mov	r6, r8
 80136e2:	4546      	cmp	r6, r8
 80136e4:	bf28      	it	cs
 80136e6:	4646      	movcs	r6, r8
 80136e8:	4632      	mov	r2, r6
 80136ea:	4651      	mov	r1, sl
 80136ec:	6820      	ldr	r0, [r4, #0]
 80136ee:	f7fe fb9b 	bl	8011e28 <memmove>
 80136f2:	68a2      	ldr	r2, [r4, #8]
 80136f4:	1b92      	subs	r2, r2, r6
 80136f6:	60a2      	str	r2, [r4, #8]
 80136f8:	6822      	ldr	r2, [r4, #0]
 80136fa:	4432      	add	r2, r6
 80136fc:	6022      	str	r2, [r4, #0]
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	eba2 0308 	sub.w	r3, r2, r8
 8013704:	44c2      	add	sl, r8
 8013706:	60bb      	str	r3, [r7, #8]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d0aa      	beq.n	8013662 <__ssprint_r+0x14>
 801370c:	f04f 0800 	mov.w	r8, #0
 8013710:	e7b1      	b.n	8013676 <__ssprint_r+0x28>
 8013712:	f04f 0a00 	mov.w	sl, #0
 8013716:	46d0      	mov	r8, sl
 8013718:	e7ad      	b.n	8013676 <__ssprint_r+0x28>
 801371a:	9801      	ldr	r0, [sp, #4]
 801371c:	462a      	mov	r2, r5
 801371e:	f7ff fde1 	bl	80132e4 <_realloc_r>
 8013722:	4606      	mov	r6, r0
 8013724:	2800      	cmp	r0, #0
 8013726:	d1d4      	bne.n	80136d2 <__ssprint_r+0x84>
 8013728:	6921      	ldr	r1, [r4, #16]
 801372a:	9801      	ldr	r0, [sp, #4]
 801372c:	f7fc fdd2 	bl	80102d4 <_free_r>
 8013730:	9a01      	ldr	r2, [sp, #4]
 8013732:	230c      	movs	r3, #12
 8013734:	6013      	str	r3, [r2, #0]
 8013736:	89a3      	ldrh	r3, [r4, #12]
 8013738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801373c:	81a3      	strh	r3, [r4, #12]
 801373e:	2300      	movs	r3, #0
 8013740:	60bb      	str	r3, [r7, #8]
 8013742:	f04f 30ff 	mov.w	r0, #4294967295
 8013746:	e78d      	b.n	8013664 <__ssprint_r+0x16>

08013748 <__assert_func>:
 8013748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801374a:	4614      	mov	r4, r2
 801374c:	461a      	mov	r2, r3
 801374e:	4b09      	ldr	r3, [pc, #36]	@ (8013774 <__assert_func+0x2c>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	4605      	mov	r5, r0
 8013754:	68d8      	ldr	r0, [r3, #12]
 8013756:	b954      	cbnz	r4, 801376e <__assert_func+0x26>
 8013758:	4b07      	ldr	r3, [pc, #28]	@ (8013778 <__assert_func+0x30>)
 801375a:	461c      	mov	r4, r3
 801375c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013760:	9100      	str	r1, [sp, #0]
 8013762:	462b      	mov	r3, r5
 8013764:	4905      	ldr	r1, [pc, #20]	@ (801377c <__assert_func+0x34>)
 8013766:	f000 f843 	bl	80137f0 <fiprintf>
 801376a:	f000 fdb7 	bl	80142dc <abort>
 801376e:	4b04      	ldr	r3, [pc, #16]	@ (8013780 <__assert_func+0x38>)
 8013770:	e7f4      	b.n	801375c <__assert_func+0x14>
 8013772:	bf00      	nop
 8013774:	20000434 	.word	0x20000434
 8013778:	080159b4 	.word	0x080159b4
 801377c:	08015986 	.word	0x08015986
 8013780:	08015979 	.word	0x08015979

08013784 <_calloc_r>:
 8013784:	b538      	push	{r3, r4, r5, lr}
 8013786:	fba1 1502 	umull	r1, r5, r1, r2
 801378a:	b935      	cbnz	r5, 801379a <_calloc_r+0x16>
 801378c:	f7fb fff6 	bl	800f77c <_malloc_r>
 8013790:	4604      	mov	r4, r0
 8013792:	b938      	cbnz	r0, 80137a4 <_calloc_r+0x20>
 8013794:	2400      	movs	r4, #0
 8013796:	4620      	mov	r0, r4
 8013798:	bd38      	pop	{r3, r4, r5, pc}
 801379a:	f7fc fced 	bl	8010178 <__errno>
 801379e:	230c      	movs	r3, #12
 80137a0:	6003      	str	r3, [r0, #0]
 80137a2:	e7f7      	b.n	8013794 <_calloc_r+0x10>
 80137a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80137a8:	f022 0203 	bic.w	r2, r2, #3
 80137ac:	3a04      	subs	r2, #4
 80137ae:	2a24      	cmp	r2, #36	@ 0x24
 80137b0:	d819      	bhi.n	80137e6 <_calloc_r+0x62>
 80137b2:	2a13      	cmp	r2, #19
 80137b4:	d915      	bls.n	80137e2 <_calloc_r+0x5e>
 80137b6:	2a1b      	cmp	r2, #27
 80137b8:	e9c0 5500 	strd	r5, r5, [r0]
 80137bc:	d806      	bhi.n	80137cc <_calloc_r+0x48>
 80137be:	f100 0308 	add.w	r3, r0, #8
 80137c2:	2200      	movs	r2, #0
 80137c4:	e9c3 2200 	strd	r2, r2, [r3]
 80137c8:	609a      	str	r2, [r3, #8]
 80137ca:	e7e4      	b.n	8013796 <_calloc_r+0x12>
 80137cc:	2a24      	cmp	r2, #36	@ 0x24
 80137ce:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80137d2:	bf11      	iteee	ne
 80137d4:	f100 0310 	addne.w	r3, r0, #16
 80137d8:	6105      	streq	r5, [r0, #16]
 80137da:	f100 0318 	addeq.w	r3, r0, #24
 80137de:	6145      	streq	r5, [r0, #20]
 80137e0:	e7ef      	b.n	80137c2 <_calloc_r+0x3e>
 80137e2:	4603      	mov	r3, r0
 80137e4:	e7ed      	b.n	80137c2 <_calloc_r+0x3e>
 80137e6:	4629      	mov	r1, r5
 80137e8:	f7fc fc3b 	bl	8010062 <memset>
 80137ec:	e7d3      	b.n	8013796 <_calloc_r+0x12>
	...

080137f0 <fiprintf>:
 80137f0:	b40e      	push	{r1, r2, r3}
 80137f2:	b503      	push	{r0, r1, lr}
 80137f4:	4601      	mov	r1, r0
 80137f6:	ab03      	add	r3, sp, #12
 80137f8:	4805      	ldr	r0, [pc, #20]	@ (8013810 <fiprintf+0x20>)
 80137fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80137fe:	6800      	ldr	r0, [r0, #0]
 8013800:	9301      	str	r3, [sp, #4]
 8013802:	f000 f839 	bl	8013878 <_vfiprintf_r>
 8013806:	b002      	add	sp, #8
 8013808:	f85d eb04 	ldr.w	lr, [sp], #4
 801380c:	b003      	add	sp, #12
 801380e:	4770      	bx	lr
 8013810:	20000434 	.word	0x20000434

08013814 <__sprint_r>:
 8013814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013818:	6893      	ldr	r3, [r2, #8]
 801381a:	4680      	mov	r8, r0
 801381c:	460e      	mov	r6, r1
 801381e:	4614      	mov	r4, r2
 8013820:	b343      	cbz	r3, 8013874 <__sprint_r+0x60>
 8013822:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8013824:	049d      	lsls	r5, r3, #18
 8013826:	d522      	bpl.n	801386e <__sprint_r+0x5a>
 8013828:	6815      	ldr	r5, [r2, #0]
 801382a:	68a0      	ldr	r0, [r4, #8]
 801382c:	3508      	adds	r5, #8
 801382e:	b928      	cbnz	r0, 801383c <__sprint_r+0x28>
 8013830:	2300      	movs	r3, #0
 8013832:	60a3      	str	r3, [r4, #8]
 8013834:	2300      	movs	r3, #0
 8013836:	6063      	str	r3, [r4, #4]
 8013838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801383c:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8013840:	f04f 0900 	mov.w	r9, #0
 8013844:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8013848:	45ca      	cmp	sl, r9
 801384a:	dc05      	bgt.n	8013858 <__sprint_r+0x44>
 801384c:	68a3      	ldr	r3, [r4, #8]
 801384e:	f027 0703 	bic.w	r7, r7, #3
 8013852:	1bdb      	subs	r3, r3, r7
 8013854:	60a3      	str	r3, [r4, #8]
 8013856:	e7e8      	b.n	801382a <__sprint_r+0x16>
 8013858:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801385c:	4632      	mov	r2, r6
 801385e:	4640      	mov	r0, r8
 8013860:	f000 fd13 	bl	801428a <_fputwc_r>
 8013864:	1c43      	adds	r3, r0, #1
 8013866:	d0e3      	beq.n	8013830 <__sprint_r+0x1c>
 8013868:	f109 0901 	add.w	r9, r9, #1
 801386c:	e7ec      	b.n	8013848 <__sprint_r+0x34>
 801386e:	f7fe f8d5 	bl	8011a1c <__sfvwrite_r>
 8013872:	e7dd      	b.n	8013830 <__sprint_r+0x1c>
 8013874:	4618      	mov	r0, r3
 8013876:	e7dd      	b.n	8013834 <__sprint_r+0x20>

08013878 <_vfiprintf_r>:
 8013878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801387c:	b0bb      	sub	sp, #236	@ 0xec
 801387e:	460f      	mov	r7, r1
 8013880:	4693      	mov	fp, r2
 8013882:	461c      	mov	r4, r3
 8013884:	461d      	mov	r5, r3
 8013886:	9000      	str	r0, [sp, #0]
 8013888:	b118      	cbz	r0, 8013892 <_vfiprintf_r+0x1a>
 801388a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801388c:	b90b      	cbnz	r3, 8013892 <_vfiprintf_r+0x1a>
 801388e:	f7fc fa47 	bl	800fd20 <__sinit>
 8013892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013894:	07db      	lsls	r3, r3, #31
 8013896:	d405      	bmi.n	80138a4 <_vfiprintf_r+0x2c>
 8013898:	89bb      	ldrh	r3, [r7, #12]
 801389a:	059e      	lsls	r6, r3, #22
 801389c:	d402      	bmi.n	80138a4 <_vfiprintf_r+0x2c>
 801389e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80138a0:	f7fc fc96 	bl	80101d0 <__retarget_lock_acquire_recursive>
 80138a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80138a8:	0498      	lsls	r0, r3, #18
 80138aa:	d406      	bmi.n	80138ba <_vfiprintf_r+0x42>
 80138ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80138b0:	81bb      	strh	r3, [r7, #12]
 80138b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80138b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80138b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80138ba:	89bb      	ldrh	r3, [r7, #12]
 80138bc:	0719      	lsls	r1, r3, #28
 80138be:	d501      	bpl.n	80138c4 <_vfiprintf_r+0x4c>
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	b9ab      	cbnz	r3, 80138f0 <_vfiprintf_r+0x78>
 80138c4:	9800      	ldr	r0, [sp, #0]
 80138c6:	4639      	mov	r1, r7
 80138c8:	f7fe fa58 	bl	8011d7c <__swsetup_r>
 80138cc:	b180      	cbz	r0, 80138f0 <_vfiprintf_r+0x78>
 80138ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80138d0:	07da      	lsls	r2, r3, #31
 80138d2:	d506      	bpl.n	80138e2 <_vfiprintf_r+0x6a>
 80138d4:	f04f 33ff 	mov.w	r3, #4294967295
 80138d8:	9303      	str	r3, [sp, #12]
 80138da:	9803      	ldr	r0, [sp, #12]
 80138dc:	b03b      	add	sp, #236	@ 0xec
 80138de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e2:	89bb      	ldrh	r3, [r7, #12]
 80138e4:	059b      	lsls	r3, r3, #22
 80138e6:	d4f5      	bmi.n	80138d4 <_vfiprintf_r+0x5c>
 80138e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80138ea:	f7fc fc72 	bl	80101d2 <__retarget_lock_release_recursive>
 80138ee:	e7f1      	b.n	80138d4 <_vfiprintf_r+0x5c>
 80138f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80138f4:	f003 021a 	and.w	r2, r3, #26
 80138f8:	2a0a      	cmp	r2, #10
 80138fa:	d114      	bne.n	8013926 <_vfiprintf_r+0xae>
 80138fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013900:	2a00      	cmp	r2, #0
 8013902:	db10      	blt.n	8013926 <_vfiprintf_r+0xae>
 8013904:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013906:	07d6      	lsls	r6, r2, #31
 8013908:	d404      	bmi.n	8013914 <_vfiprintf_r+0x9c>
 801390a:	059d      	lsls	r5, r3, #22
 801390c:	d402      	bmi.n	8013914 <_vfiprintf_r+0x9c>
 801390e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013910:	f7fc fc5f 	bl	80101d2 <__retarget_lock_release_recursive>
 8013914:	9800      	ldr	r0, [sp, #0]
 8013916:	4623      	mov	r3, r4
 8013918:	465a      	mov	r2, fp
 801391a:	4639      	mov	r1, r7
 801391c:	b03b      	add	sp, #236	@ 0xec
 801391e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013922:	f000 bc31 	b.w	8014188 <__sbprintf>
 8013926:	2300      	movs	r3, #0
 8013928:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801392c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013930:	ae11      	add	r6, sp, #68	@ 0x44
 8013932:	960e      	str	r6, [sp, #56]	@ 0x38
 8013934:	9307      	str	r3, [sp, #28]
 8013936:	9309      	str	r3, [sp, #36]	@ 0x24
 8013938:	9303      	str	r3, [sp, #12]
 801393a:	465b      	mov	r3, fp
 801393c:	461c      	mov	r4, r3
 801393e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013942:	b10a      	cbz	r2, 8013948 <_vfiprintf_r+0xd0>
 8013944:	2a25      	cmp	r2, #37	@ 0x25
 8013946:	d1f9      	bne.n	801393c <_vfiprintf_r+0xc4>
 8013948:	ebb4 080b 	subs.w	r8, r4, fp
 801394c:	d00d      	beq.n	801396a <_vfiprintf_r+0xf2>
 801394e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013950:	4443      	add	r3, r8
 8013952:	9310      	str	r3, [sp, #64]	@ 0x40
 8013954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013956:	3301      	adds	r3, #1
 8013958:	2b07      	cmp	r3, #7
 801395a:	e9c6 b800 	strd	fp, r8, [r6]
 801395e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013960:	dc75      	bgt.n	8013a4e <_vfiprintf_r+0x1d6>
 8013962:	3608      	adds	r6, #8
 8013964:	9b03      	ldr	r3, [sp, #12]
 8013966:	4443      	add	r3, r8
 8013968:	9303      	str	r3, [sp, #12]
 801396a:	7823      	ldrb	r3, [r4, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	f000 83cd 	beq.w	801410c <_vfiprintf_r+0x894>
 8013972:	2300      	movs	r3, #0
 8013974:	f04f 32ff 	mov.w	r2, #4294967295
 8013978:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801397c:	3401      	adds	r4, #1
 801397e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013982:	469a      	mov	sl, r3
 8013984:	46a3      	mov	fp, r4
 8013986:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801398a:	f1a3 0220 	sub.w	r2, r3, #32
 801398e:	2a5a      	cmp	r2, #90	@ 0x5a
 8013990:	f200 8316 	bhi.w	8013fc0 <_vfiprintf_r+0x748>
 8013994:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013998:	0314009a 	.word	0x0314009a
 801399c:	00a20314 	.word	0x00a20314
 80139a0:	03140314 	.word	0x03140314
 80139a4:	00820314 	.word	0x00820314
 80139a8:	03140314 	.word	0x03140314
 80139ac:	00af00a5 	.word	0x00af00a5
 80139b0:	00ac0314 	.word	0x00ac0314
 80139b4:	031400b1 	.word	0x031400b1
 80139b8:	00d000cd 	.word	0x00d000cd
 80139bc:	00d000d0 	.word	0x00d000d0
 80139c0:	00d000d0 	.word	0x00d000d0
 80139c4:	00d000d0 	.word	0x00d000d0
 80139c8:	00d000d0 	.word	0x00d000d0
 80139cc:	03140314 	.word	0x03140314
 80139d0:	03140314 	.word	0x03140314
 80139d4:	03140314 	.word	0x03140314
 80139d8:	03140314 	.word	0x03140314
 80139dc:	00f70314 	.word	0x00f70314
 80139e0:	03140104 	.word	0x03140104
 80139e4:	03140314 	.word	0x03140314
 80139e8:	03140314 	.word	0x03140314
 80139ec:	03140314 	.word	0x03140314
 80139f0:	03140314 	.word	0x03140314
 80139f4:	01520314 	.word	0x01520314
 80139f8:	03140314 	.word	0x03140314
 80139fc:	019a0314 	.word	0x019a0314
 8013a00:	027a0314 	.word	0x027a0314
 8013a04:	03140314 	.word	0x03140314
 8013a08:	0314029a 	.word	0x0314029a
 8013a0c:	03140314 	.word	0x03140314
 8013a10:	03140314 	.word	0x03140314
 8013a14:	03140314 	.word	0x03140314
 8013a18:	03140314 	.word	0x03140314
 8013a1c:	00f70314 	.word	0x00f70314
 8013a20:	03140106 	.word	0x03140106
 8013a24:	03140314 	.word	0x03140314
 8013a28:	010600e0 	.word	0x010600e0
 8013a2c:	031400f1 	.word	0x031400f1
 8013a30:	031400eb 	.word	0x031400eb
 8013a34:	01540132 	.word	0x01540132
 8013a38:	00f10189 	.word	0x00f10189
 8013a3c:	019a0314 	.word	0x019a0314
 8013a40:	027c0098 	.word	0x027c0098
 8013a44:	03140314 	.word	0x03140314
 8013a48:	03140065 	.word	0x03140065
 8013a4c:	0098      	.short	0x0098
 8013a4e:	9800      	ldr	r0, [sp, #0]
 8013a50:	aa0e      	add	r2, sp, #56	@ 0x38
 8013a52:	4639      	mov	r1, r7
 8013a54:	f7ff fede 	bl	8013814 <__sprint_r>
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	f040 8336 	bne.w	80140ca <_vfiprintf_r+0x852>
 8013a5e:	ae11      	add	r6, sp, #68	@ 0x44
 8013a60:	e780      	b.n	8013964 <_vfiprintf_r+0xec>
 8013a62:	4a99      	ldr	r2, [pc, #612]	@ (8013cc8 <_vfiprintf_r+0x450>)
 8013a64:	9205      	str	r2, [sp, #20]
 8013a66:	f01a 0220 	ands.w	r2, sl, #32
 8013a6a:	f000 8231 	beq.w	8013ed0 <_vfiprintf_r+0x658>
 8013a6e:	3507      	adds	r5, #7
 8013a70:	f025 0507 	bic.w	r5, r5, #7
 8013a74:	46a8      	mov	r8, r5
 8013a76:	686d      	ldr	r5, [r5, #4]
 8013a78:	f858 4b08 	ldr.w	r4, [r8], #8
 8013a7c:	f01a 0f01 	tst.w	sl, #1
 8013a80:	d009      	beq.n	8013a96 <_vfiprintf_r+0x21e>
 8013a82:	ea54 0205 	orrs.w	r2, r4, r5
 8013a86:	bf1f      	itttt	ne
 8013a88:	2230      	movne	r2, #48	@ 0x30
 8013a8a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8013a8e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8013a92:	f04a 0a02 	orrne.w	sl, sl, #2
 8013a96:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8013a9a:	e112      	b.n	8013cc2 <_vfiprintf_r+0x44a>
 8013a9c:	9800      	ldr	r0, [sp, #0]
 8013a9e:	f7fe f9f7 	bl	8011e90 <_localeconv_r>
 8013aa2:	6843      	ldr	r3, [r0, #4]
 8013aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7ec fbba 	bl	8000220 <strlen>
 8013aac:	9007      	str	r0, [sp, #28]
 8013aae:	9800      	ldr	r0, [sp, #0]
 8013ab0:	f7fe f9ee 	bl	8011e90 <_localeconv_r>
 8013ab4:	6883      	ldr	r3, [r0, #8]
 8013ab6:	9306      	str	r3, [sp, #24]
 8013ab8:	9b07      	ldr	r3, [sp, #28]
 8013aba:	b12b      	cbz	r3, 8013ac8 <_vfiprintf_r+0x250>
 8013abc:	9b06      	ldr	r3, [sp, #24]
 8013abe:	b11b      	cbz	r3, 8013ac8 <_vfiprintf_r+0x250>
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	b10b      	cbz	r3, 8013ac8 <_vfiprintf_r+0x250>
 8013ac4:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8013ac8:	465c      	mov	r4, fp
 8013aca:	e75b      	b.n	8013984 <_vfiprintf_r+0x10c>
 8013acc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1f9      	bne.n	8013ac8 <_vfiprintf_r+0x250>
 8013ad4:	2320      	movs	r3, #32
 8013ad6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013ada:	e7f5      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013adc:	f04a 0a01 	orr.w	sl, sl, #1
 8013ae0:	e7f2      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ae6:	9302      	str	r3, [sp, #8]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	daed      	bge.n	8013ac8 <_vfiprintf_r+0x250>
 8013aec:	425b      	negs	r3, r3
 8013aee:	9302      	str	r3, [sp, #8]
 8013af0:	f04a 0a04 	orr.w	sl, sl, #4
 8013af4:	e7e8      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013af6:	232b      	movs	r3, #43	@ 0x2b
 8013af8:	e7ed      	b.n	8013ad6 <_vfiprintf_r+0x25e>
 8013afa:	465a      	mov	r2, fp
 8013afc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b02:	d112      	bne.n	8013b2a <_vfiprintf_r+0x2b2>
 8013b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b0c:	9301      	str	r3, [sp, #4]
 8013b0e:	4693      	mov	fp, r2
 8013b10:	e7da      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013b12:	9b01      	ldr	r3, [sp, #4]
 8013b14:	fb00 1303 	mla	r3, r0, r3, r1
 8013b18:	9301      	str	r3, [sp, #4]
 8013b1a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013b1e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8013b22:	2909      	cmp	r1, #9
 8013b24:	d9f5      	bls.n	8013b12 <_vfiprintf_r+0x29a>
 8013b26:	4693      	mov	fp, r2
 8013b28:	e72f      	b.n	801398a <_vfiprintf_r+0x112>
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	9101      	str	r1, [sp, #4]
 8013b2e:	200a      	movs	r0, #10
 8013b30:	e7f5      	b.n	8013b1e <_vfiprintf_r+0x2a6>
 8013b32:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8013b36:	e7c7      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013b38:	2100      	movs	r1, #0
 8013b3a:	465a      	mov	r2, fp
 8013b3c:	9102      	str	r1, [sp, #8]
 8013b3e:	200a      	movs	r0, #10
 8013b40:	9902      	ldr	r1, [sp, #8]
 8013b42:	3b30      	subs	r3, #48	@ 0x30
 8013b44:	fb00 3301 	mla	r3, r0, r1, r3
 8013b48:	9302      	str	r3, [sp, #8]
 8013b4a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013b4e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8013b52:	2909      	cmp	r1, #9
 8013b54:	d9f4      	bls.n	8013b40 <_vfiprintf_r+0x2c8>
 8013b56:	e7e6      	b.n	8013b26 <_vfiprintf_r+0x2ae>
 8013b58:	f89b 3000 	ldrb.w	r3, [fp]
 8013b5c:	2b68      	cmp	r3, #104	@ 0x68
 8013b5e:	bf06      	itte	eq
 8013b60:	f10b 0b01 	addeq.w	fp, fp, #1
 8013b64:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8013b68:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8013b6c:	e7ac      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013b6e:	f89b 3000 	ldrb.w	r3, [fp]
 8013b72:	2b6c      	cmp	r3, #108	@ 0x6c
 8013b74:	d104      	bne.n	8013b80 <_vfiprintf_r+0x308>
 8013b76:	f10b 0b01 	add.w	fp, fp, #1
 8013b7a:	f04a 0a20 	orr.w	sl, sl, #32
 8013b7e:	e7a3      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013b80:	f04a 0a10 	orr.w	sl, sl, #16
 8013b84:	e7a0      	b.n	8013ac8 <_vfiprintf_r+0x250>
 8013b86:	46a8      	mov	r8, r5
 8013b88:	2400      	movs	r4, #0
 8013b8a:	f858 3b04 	ldr.w	r3, [r8], #4
 8013b8e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8013b92:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8013b96:	2301      	movs	r3, #1
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8013b9e:	e0ab      	b.n	8013cf8 <_vfiprintf_r+0x480>
 8013ba0:	f04a 0a10 	orr.w	sl, sl, #16
 8013ba4:	f01a 0f20 	tst.w	sl, #32
 8013ba8:	d011      	beq.n	8013bce <_vfiprintf_r+0x356>
 8013baa:	3507      	adds	r5, #7
 8013bac:	f025 0507 	bic.w	r5, r5, #7
 8013bb0:	46a8      	mov	r8, r5
 8013bb2:	686d      	ldr	r5, [r5, #4]
 8013bb4:	f858 4b08 	ldr.w	r4, [r8], #8
 8013bb8:	2d00      	cmp	r5, #0
 8013bba:	da06      	bge.n	8013bca <_vfiprintf_r+0x352>
 8013bbc:	4264      	negs	r4, r4
 8013bbe:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8013bc2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8013bc6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013bca:	2301      	movs	r3, #1
 8013bcc:	e048      	b.n	8013c60 <_vfiprintf_r+0x3e8>
 8013bce:	46a8      	mov	r8, r5
 8013bd0:	f01a 0f10 	tst.w	sl, #16
 8013bd4:	f858 5b04 	ldr.w	r5, [r8], #4
 8013bd8:	d002      	beq.n	8013be0 <_vfiprintf_r+0x368>
 8013bda:	462c      	mov	r4, r5
 8013bdc:	17ed      	asrs	r5, r5, #31
 8013bde:	e7eb      	b.n	8013bb8 <_vfiprintf_r+0x340>
 8013be0:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8013be4:	d003      	beq.n	8013bee <_vfiprintf_r+0x376>
 8013be6:	b22c      	sxth	r4, r5
 8013be8:	f345 35c0 	sbfx	r5, r5, #15, #1
 8013bec:	e7e4      	b.n	8013bb8 <_vfiprintf_r+0x340>
 8013bee:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8013bf2:	d0f2      	beq.n	8013bda <_vfiprintf_r+0x362>
 8013bf4:	b26c      	sxtb	r4, r5
 8013bf6:	f345 15c0 	sbfx	r5, r5, #7, #1
 8013bfa:	e7dd      	b.n	8013bb8 <_vfiprintf_r+0x340>
 8013bfc:	f01a 0f20 	tst.w	sl, #32
 8013c00:	d007      	beq.n	8013c12 <_vfiprintf_r+0x39a>
 8013c02:	9a03      	ldr	r2, [sp, #12]
 8013c04:	682b      	ldr	r3, [r5, #0]
 8013c06:	9903      	ldr	r1, [sp, #12]
 8013c08:	17d2      	asrs	r2, r2, #31
 8013c0a:	e9c3 1200 	strd	r1, r2, [r3]
 8013c0e:	3504      	adds	r5, #4
 8013c10:	e693      	b.n	801393a <_vfiprintf_r+0xc2>
 8013c12:	f01a 0f10 	tst.w	sl, #16
 8013c16:	d003      	beq.n	8013c20 <_vfiprintf_r+0x3a8>
 8013c18:	682b      	ldr	r3, [r5, #0]
 8013c1a:	9a03      	ldr	r2, [sp, #12]
 8013c1c:	601a      	str	r2, [r3, #0]
 8013c1e:	e7f6      	b.n	8013c0e <_vfiprintf_r+0x396>
 8013c20:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8013c24:	d003      	beq.n	8013c2e <_vfiprintf_r+0x3b6>
 8013c26:	682b      	ldr	r3, [r5, #0]
 8013c28:	9a03      	ldr	r2, [sp, #12]
 8013c2a:	801a      	strh	r2, [r3, #0]
 8013c2c:	e7ef      	b.n	8013c0e <_vfiprintf_r+0x396>
 8013c2e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8013c32:	d0f1      	beq.n	8013c18 <_vfiprintf_r+0x3a0>
 8013c34:	682b      	ldr	r3, [r5, #0]
 8013c36:	9a03      	ldr	r2, [sp, #12]
 8013c38:	701a      	strb	r2, [r3, #0]
 8013c3a:	e7e8      	b.n	8013c0e <_vfiprintf_r+0x396>
 8013c3c:	f04a 0a10 	orr.w	sl, sl, #16
 8013c40:	f01a 0320 	ands.w	r3, sl, #32
 8013c44:	d01f      	beq.n	8013c86 <_vfiprintf_r+0x40e>
 8013c46:	3507      	adds	r5, #7
 8013c48:	f025 0507 	bic.w	r5, r5, #7
 8013c4c:	46a8      	mov	r8, r5
 8013c4e:	686d      	ldr	r5, [r5, #4]
 8013c50:	f858 4b08 	ldr.w	r4, [r8], #8
 8013c54:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8013c58:	2300      	movs	r3, #0
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8013c60:	9a01      	ldr	r2, [sp, #4]
 8013c62:	3201      	adds	r2, #1
 8013c64:	f000 825f 	beq.w	8014126 <_vfiprintf_r+0x8ae>
 8013c68:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8013c6c:	9204      	str	r2, [sp, #16]
 8013c6e:	ea54 0205 	orrs.w	r2, r4, r5
 8013c72:	f040 825e 	bne.w	8014132 <_vfiprintf_r+0x8ba>
 8013c76:	9a01      	ldr	r2, [sp, #4]
 8013c78:	2a00      	cmp	r2, #0
 8013c7a:	f000 8198 	beq.w	8013fae <_vfiprintf_r+0x736>
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	f040 825a 	bne.w	8014138 <_vfiprintf_r+0x8c0>
 8013c84:	e13b      	b.n	8013efe <_vfiprintf_r+0x686>
 8013c86:	46a8      	mov	r8, r5
 8013c88:	f01a 0510 	ands.w	r5, sl, #16
 8013c8c:	f858 4b04 	ldr.w	r4, [r8], #4
 8013c90:	d001      	beq.n	8013c96 <_vfiprintf_r+0x41e>
 8013c92:	461d      	mov	r5, r3
 8013c94:	e7de      	b.n	8013c54 <_vfiprintf_r+0x3dc>
 8013c96:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013c9a:	d001      	beq.n	8013ca0 <_vfiprintf_r+0x428>
 8013c9c:	b2a4      	uxth	r4, r4
 8013c9e:	e7d9      	b.n	8013c54 <_vfiprintf_r+0x3dc>
 8013ca0:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013ca4:	d0d6      	beq.n	8013c54 <_vfiprintf_r+0x3dc>
 8013ca6:	b2e4      	uxtb	r4, r4
 8013ca8:	e7f3      	b.n	8013c92 <_vfiprintf_r+0x41a>
 8013caa:	46a8      	mov	r8, r5
 8013cac:	f647 0330 	movw	r3, #30768	@ 0x7830
 8013cb0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8013cb4:	f858 4b04 	ldr.w	r4, [r8], #4
 8013cb8:	4b03      	ldr	r3, [pc, #12]	@ (8013cc8 <_vfiprintf_r+0x450>)
 8013cba:	9305      	str	r3, [sp, #20]
 8013cbc:	2500      	movs	r5, #0
 8013cbe:	f04a 0a02 	orr.w	sl, sl, #2
 8013cc2:	2302      	movs	r3, #2
 8013cc4:	e7c9      	b.n	8013c5a <_vfiprintf_r+0x3e2>
 8013cc6:	bf00      	nop
 8013cc8:	0801565c 	.word	0x0801565c
 8013ccc:	9b01      	ldr	r3, [sp, #4]
 8013cce:	46a8      	mov	r8, r5
 8013cd0:	1c5c      	adds	r4, r3, #1
 8013cd2:	f04f 0500 	mov.w	r5, #0
 8013cd6:	f858 9b04 	ldr.w	r9, [r8], #4
 8013cda:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8013cde:	f000 80d0 	beq.w	8013e82 <_vfiprintf_r+0x60a>
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	4648      	mov	r0, r9
 8013ce8:	f7ec faa2 	bl	8000230 <memchr>
 8013cec:	4604      	mov	r4, r0
 8013cee:	b118      	cbz	r0, 8013cf8 <_vfiprintf_r+0x480>
 8013cf0:	eba0 0309 	sub.w	r3, r0, r9
 8013cf4:	9301      	str	r3, [sp, #4]
 8013cf6:	462c      	mov	r4, r5
 8013cf8:	9b01      	ldr	r3, [sp, #4]
 8013cfa:	42a3      	cmp	r3, r4
 8013cfc:	bfb8      	it	lt
 8013cfe:	4623      	movlt	r3, r4
 8013d00:	9304      	str	r3, [sp, #16]
 8013d02:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8013d06:	b113      	cbz	r3, 8013d0e <_vfiprintf_r+0x496>
 8013d08:	9b04      	ldr	r3, [sp, #16]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	9304      	str	r3, [sp, #16]
 8013d0e:	f01a 0302 	ands.w	r3, sl, #2
 8013d12:	9308      	str	r3, [sp, #32]
 8013d14:	bf1e      	ittt	ne
 8013d16:	9b04      	ldrne	r3, [sp, #16]
 8013d18:	3302      	addne	r3, #2
 8013d1a:	9304      	strne	r3, [sp, #16]
 8013d1c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8013d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d22:	d11f      	bne.n	8013d64 <_vfiprintf_r+0x4ec>
 8013d24:	9b02      	ldr	r3, [sp, #8]
 8013d26:	9a04      	ldr	r2, [sp, #16]
 8013d28:	1a9d      	subs	r5, r3, r2
 8013d2a:	2d00      	cmp	r5, #0
 8013d2c:	dd1a      	ble.n	8013d64 <_vfiprintf_r+0x4ec>
 8013d2e:	4ba9      	ldr	r3, [pc, #676]	@ (8013fd4 <_vfiprintf_r+0x75c>)
 8013d30:	6033      	str	r3, [r6, #0]
 8013d32:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8013d36:	2d10      	cmp	r5, #16
 8013d38:	f102 0201 	add.w	r2, r2, #1
 8013d3c:	f106 0008 	add.w	r0, r6, #8
 8013d40:	f300 814e 	bgt.w	8013fe0 <_vfiprintf_r+0x768>
 8013d44:	6075      	str	r5, [r6, #4]
 8013d46:	2a07      	cmp	r2, #7
 8013d48:	4465      	add	r5, ip
 8013d4a:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8013d4e:	f340 815a 	ble.w	8014006 <_vfiprintf_r+0x78e>
 8013d52:	9800      	ldr	r0, [sp, #0]
 8013d54:	aa0e      	add	r2, sp, #56	@ 0x38
 8013d56:	4639      	mov	r1, r7
 8013d58:	f7ff fd5c 	bl	8013814 <__sprint_r>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f040 81b4 	bne.w	80140ca <_vfiprintf_r+0x852>
 8013d62:	ae11      	add	r6, sp, #68	@ 0x44
 8013d64:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8013d68:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013d6c:	b161      	cbz	r1, 8013d88 <_vfiprintf_r+0x510>
 8013d6e:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8013d72:	3301      	adds	r3, #1
 8013d74:	6031      	str	r1, [r6, #0]
 8013d76:	2101      	movs	r1, #1
 8013d78:	440a      	add	r2, r1
 8013d7a:	2b07      	cmp	r3, #7
 8013d7c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013d80:	6071      	str	r1, [r6, #4]
 8013d82:	f300 8142 	bgt.w	801400a <_vfiprintf_r+0x792>
 8013d86:	3608      	adds	r6, #8
 8013d88:	9908      	ldr	r1, [sp, #32]
 8013d8a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013d8e:	b159      	cbz	r1, 8013da8 <_vfiprintf_r+0x530>
 8013d90:	a90d      	add	r1, sp, #52	@ 0x34
 8013d92:	3301      	adds	r3, #1
 8013d94:	6031      	str	r1, [r6, #0]
 8013d96:	2102      	movs	r1, #2
 8013d98:	440a      	add	r2, r1
 8013d9a:	2b07      	cmp	r3, #7
 8013d9c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013da0:	6071      	str	r1, [r6, #4]
 8013da2:	f300 813b 	bgt.w	801401c <_vfiprintf_r+0x7a4>
 8013da6:	3608      	adds	r6, #8
 8013da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013daa:	2b80      	cmp	r3, #128	@ 0x80
 8013dac:	d11f      	bne.n	8013dee <_vfiprintf_r+0x576>
 8013dae:	9b02      	ldr	r3, [sp, #8]
 8013db0:	9a04      	ldr	r2, [sp, #16]
 8013db2:	1a9d      	subs	r5, r3, r2
 8013db4:	2d00      	cmp	r5, #0
 8013db6:	dd1a      	ble.n	8013dee <_vfiprintf_r+0x576>
 8013db8:	4b87      	ldr	r3, [pc, #540]	@ (8013fd8 <_vfiprintf_r+0x760>)
 8013dba:	6033      	str	r3, [r6, #0]
 8013dbc:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8013dc0:	2d10      	cmp	r5, #16
 8013dc2:	f102 0201 	add.w	r2, r2, #1
 8013dc6:	f106 0008 	add.w	r0, r6, #8
 8013dca:	f300 8130 	bgt.w	801402e <_vfiprintf_r+0x7b6>
 8013dce:	6075      	str	r5, [r6, #4]
 8013dd0:	2a07      	cmp	r2, #7
 8013dd2:	4465      	add	r5, ip
 8013dd4:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8013dd8:	f340 813c 	ble.w	8014054 <_vfiprintf_r+0x7dc>
 8013ddc:	9800      	ldr	r0, [sp, #0]
 8013dde:	aa0e      	add	r2, sp, #56	@ 0x38
 8013de0:	4639      	mov	r1, r7
 8013de2:	f7ff fd17 	bl	8013814 <__sprint_r>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	f040 816f 	bne.w	80140ca <_vfiprintf_r+0x852>
 8013dec:	ae11      	add	r6, sp, #68	@ 0x44
 8013dee:	9b01      	ldr	r3, [sp, #4]
 8013df0:	1ae4      	subs	r4, r4, r3
 8013df2:	2c00      	cmp	r4, #0
 8013df4:	dd1a      	ble.n	8013e2c <_vfiprintf_r+0x5b4>
 8013df6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013dfa:	4877      	ldr	r0, [pc, #476]	@ (8013fd8 <_vfiprintf_r+0x760>)
 8013dfc:	6030      	str	r0, [r6, #0]
 8013dfe:	2c10      	cmp	r4, #16
 8013e00:	f103 0301 	add.w	r3, r3, #1
 8013e04:	f106 0108 	add.w	r1, r6, #8
 8013e08:	f300 8126 	bgt.w	8014058 <_vfiprintf_r+0x7e0>
 8013e0c:	6074      	str	r4, [r6, #4]
 8013e0e:	2b07      	cmp	r3, #7
 8013e10:	4414      	add	r4, r2
 8013e12:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8013e16:	f340 8130 	ble.w	801407a <_vfiprintf_r+0x802>
 8013e1a:	9800      	ldr	r0, [sp, #0]
 8013e1c:	aa0e      	add	r2, sp, #56	@ 0x38
 8013e1e:	4639      	mov	r1, r7
 8013e20:	f7ff fcf8 	bl	8013814 <__sprint_r>
 8013e24:	2800      	cmp	r0, #0
 8013e26:	f040 8150 	bne.w	80140ca <_vfiprintf_r+0x852>
 8013e2a:	ae11      	add	r6, sp, #68	@ 0x44
 8013e2c:	9b01      	ldr	r3, [sp, #4]
 8013e2e:	9a01      	ldr	r2, [sp, #4]
 8013e30:	6073      	str	r3, [r6, #4]
 8013e32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013e34:	f8c6 9000 	str.w	r9, [r6]
 8013e38:	4413      	add	r3, r2
 8013e3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e3e:	3301      	adds	r3, #1
 8013e40:	2b07      	cmp	r3, #7
 8013e42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e44:	f300 811b 	bgt.w	801407e <_vfiprintf_r+0x806>
 8013e48:	f106 0308 	add.w	r3, r6, #8
 8013e4c:	f01a 0f04 	tst.w	sl, #4
 8013e50:	f040 811d 	bne.w	801408e <_vfiprintf_r+0x816>
 8013e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e58:	9904      	ldr	r1, [sp, #16]
 8013e5a:	428a      	cmp	r2, r1
 8013e5c:	bfac      	ite	ge
 8013e5e:	189b      	addge	r3, r3, r2
 8013e60:	185b      	addlt	r3, r3, r1
 8013e62:	9303      	str	r3, [sp, #12]
 8013e64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013e66:	b13b      	cbz	r3, 8013e78 <_vfiprintf_r+0x600>
 8013e68:	9800      	ldr	r0, [sp, #0]
 8013e6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8013e6c:	4639      	mov	r1, r7
 8013e6e:	f7ff fcd1 	bl	8013814 <__sprint_r>
 8013e72:	2800      	cmp	r0, #0
 8013e74:	f040 8129 	bne.w	80140ca <_vfiprintf_r+0x852>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e7c:	4645      	mov	r5, r8
 8013e7e:	ae11      	add	r6, sp, #68	@ 0x44
 8013e80:	e55b      	b.n	801393a <_vfiprintf_r+0xc2>
 8013e82:	4648      	mov	r0, r9
 8013e84:	f7ec f9cc 	bl	8000220 <strlen>
 8013e88:	9001      	str	r0, [sp, #4]
 8013e8a:	e734      	b.n	8013cf6 <_vfiprintf_r+0x47e>
 8013e8c:	f04a 0a10 	orr.w	sl, sl, #16
 8013e90:	f01a 0320 	ands.w	r3, sl, #32
 8013e94:	d008      	beq.n	8013ea8 <_vfiprintf_r+0x630>
 8013e96:	3507      	adds	r5, #7
 8013e98:	f025 0507 	bic.w	r5, r5, #7
 8013e9c:	46a8      	mov	r8, r5
 8013e9e:	686d      	ldr	r5, [r5, #4]
 8013ea0:	f858 4b08 	ldr.w	r4, [r8], #8
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e6d8      	b.n	8013c5a <_vfiprintf_r+0x3e2>
 8013ea8:	46a8      	mov	r8, r5
 8013eaa:	f01a 0510 	ands.w	r5, sl, #16
 8013eae:	f858 4b04 	ldr.w	r4, [r8], #4
 8013eb2:	d001      	beq.n	8013eb8 <_vfiprintf_r+0x640>
 8013eb4:	461d      	mov	r5, r3
 8013eb6:	e7f5      	b.n	8013ea4 <_vfiprintf_r+0x62c>
 8013eb8:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013ebc:	d001      	beq.n	8013ec2 <_vfiprintf_r+0x64a>
 8013ebe:	b2a4      	uxth	r4, r4
 8013ec0:	e7f0      	b.n	8013ea4 <_vfiprintf_r+0x62c>
 8013ec2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013ec6:	d0ed      	beq.n	8013ea4 <_vfiprintf_r+0x62c>
 8013ec8:	b2e4      	uxtb	r4, r4
 8013eca:	e7f3      	b.n	8013eb4 <_vfiprintf_r+0x63c>
 8013ecc:	4a43      	ldr	r2, [pc, #268]	@ (8013fdc <_vfiprintf_r+0x764>)
 8013ece:	e5c9      	b.n	8013a64 <_vfiprintf_r+0x1ec>
 8013ed0:	46a8      	mov	r8, r5
 8013ed2:	f01a 0510 	ands.w	r5, sl, #16
 8013ed6:	f858 4b04 	ldr.w	r4, [r8], #4
 8013eda:	d001      	beq.n	8013ee0 <_vfiprintf_r+0x668>
 8013edc:	4615      	mov	r5, r2
 8013ede:	e5cd      	b.n	8013a7c <_vfiprintf_r+0x204>
 8013ee0:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8013ee4:	d001      	beq.n	8013eea <_vfiprintf_r+0x672>
 8013ee6:	b2a4      	uxth	r4, r4
 8013ee8:	e5c8      	b.n	8013a7c <_vfiprintf_r+0x204>
 8013eea:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013eee:	f43f adc5 	beq.w	8013a7c <_vfiprintf_r+0x204>
 8013ef2:	b2e4      	uxtb	r4, r4
 8013ef4:	e7f2      	b.n	8013edc <_vfiprintf_r+0x664>
 8013ef6:	2c0a      	cmp	r4, #10
 8013ef8:	f175 0300 	sbcs.w	r3, r5, #0
 8013efc:	d206      	bcs.n	8013f0c <_vfiprintf_r+0x694>
 8013efe:	3430      	adds	r4, #48	@ 0x30
 8013f00:	b2e4      	uxtb	r4, r4
 8013f02:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8013f06:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8013f0a:	e131      	b.n	8014170 <_vfiprintf_r+0x8f8>
 8013f0c:	ab3a      	add	r3, sp, #232	@ 0xe8
 8013f0e:	9308      	str	r3, [sp, #32]
 8013f10:	9b04      	ldr	r3, [sp, #16]
 8013f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013f16:	f04f 0a00 	mov.w	sl, #0
 8013f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f1c:	220a      	movs	r2, #10
 8013f1e:	2300      	movs	r3, #0
 8013f20:	4620      	mov	r0, r4
 8013f22:	4629      	mov	r1, r5
 8013f24:	f7ec fed8 	bl	8000cd8 <__aeabi_uldivmod>
 8013f28:	460b      	mov	r3, r1
 8013f2a:	9908      	ldr	r1, [sp, #32]
 8013f2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013f2e:	3230      	adds	r2, #48	@ 0x30
 8013f30:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f36:	f101 39ff 	add.w	r9, r1, #4294967295
 8013f3a:	f10a 0a01 	add.w	sl, sl, #1
 8013f3e:	b1e2      	cbz	r2, 8013f7a <_vfiprintf_r+0x702>
 8013f40:	9a06      	ldr	r2, [sp, #24]
 8013f42:	7812      	ldrb	r2, [r2, #0]
 8013f44:	4552      	cmp	r2, sl
 8013f46:	d118      	bne.n	8013f7a <_vfiprintf_r+0x702>
 8013f48:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8013f4c:	d015      	beq.n	8013f7a <_vfiprintf_r+0x702>
 8013f4e:	2c0a      	cmp	r4, #10
 8013f50:	f175 0200 	sbcs.w	r2, r5, #0
 8013f54:	d311      	bcc.n	8013f7a <_vfiprintf_r+0x702>
 8013f56:	9308      	str	r3, [sp, #32]
 8013f58:	9b07      	ldr	r3, [sp, #28]
 8013f5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f5c:	eba9 0903 	sub.w	r9, r9, r3
 8013f60:	461a      	mov	r2, r3
 8013f62:	4648      	mov	r0, r9
 8013f64:	f7fd ff7a 	bl	8011e5c <strncpy>
 8013f68:	9b06      	ldr	r3, [sp, #24]
 8013f6a:	785a      	ldrb	r2, [r3, #1]
 8013f6c:	9b08      	ldr	r3, [sp, #32]
 8013f6e:	b172      	cbz	r2, 8013f8e <_vfiprintf_r+0x716>
 8013f70:	9a06      	ldr	r2, [sp, #24]
 8013f72:	3201      	adds	r2, #1
 8013f74:	9206      	str	r2, [sp, #24]
 8013f76:	f04f 0a00 	mov.w	sl, #0
 8013f7a:	2c0a      	cmp	r4, #10
 8013f7c:	f175 0500 	sbcs.w	r5, r5, #0
 8013f80:	f0c0 80f6 	bcc.w	8014170 <_vfiprintf_r+0x8f8>
 8013f84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013f86:	f8cd 9020 	str.w	r9, [sp, #32]
 8013f8a:	461d      	mov	r5, r3
 8013f8c:	e7c6      	b.n	8013f1c <_vfiprintf_r+0x6a4>
 8013f8e:	4692      	mov	sl, r2
 8013f90:	e7f3      	b.n	8013f7a <_vfiprintf_r+0x702>
 8013f92:	f004 030f 	and.w	r3, r4, #15
 8013f96:	9a05      	ldr	r2, [sp, #20]
 8013f98:	0924      	lsrs	r4, r4, #4
 8013f9a:	5cd3      	ldrb	r3, [r2, r3]
 8013f9c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013fa0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8013fa4:	092d      	lsrs	r5, r5, #4
 8013fa6:	ea54 0305 	orrs.w	r3, r4, r5
 8013faa:	d1f2      	bne.n	8013f92 <_vfiprintf_r+0x71a>
 8013fac:	e0e0      	b.n	8014170 <_vfiprintf_r+0x8f8>
 8013fae:	b923      	cbnz	r3, 8013fba <_vfiprintf_r+0x742>
 8013fb0:	f01a 0f01 	tst.w	sl, #1
 8013fb4:	d001      	beq.n	8013fba <_vfiprintf_r+0x742>
 8013fb6:	2430      	movs	r4, #48	@ 0x30
 8013fb8:	e7a3      	b.n	8013f02 <_vfiprintf_r+0x68a>
 8013fba:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8013fbe:	e0d7      	b.n	8014170 <_vfiprintf_r+0x8f8>
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	f000 80a3 	beq.w	801410c <_vfiprintf_r+0x894>
 8013fc6:	2400      	movs	r4, #0
 8013fc8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8013fcc:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8013fd0:	46a8      	mov	r8, r5
 8013fd2:	e5e0      	b.n	8013b96 <_vfiprintf_r+0x31e>
 8013fd4:	080159c5 	.word	0x080159c5
 8013fd8:	080159b5 	.word	0x080159b5
 8013fdc:	0801566d 	.word	0x0801566d
 8013fe0:	2110      	movs	r1, #16
 8013fe2:	6071      	str	r1, [r6, #4]
 8013fe4:	2a07      	cmp	r2, #7
 8013fe6:	4461      	add	r1, ip
 8013fe8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013fec:	dd08      	ble.n	8014000 <_vfiprintf_r+0x788>
 8013fee:	9800      	ldr	r0, [sp, #0]
 8013ff0:	aa0e      	add	r2, sp, #56	@ 0x38
 8013ff2:	4639      	mov	r1, r7
 8013ff4:	f7ff fc0e 	bl	8013814 <__sprint_r>
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d166      	bne.n	80140ca <_vfiprintf_r+0x852>
 8013ffc:	4b60      	ldr	r3, [pc, #384]	@ (8014180 <_vfiprintf_r+0x908>)
 8013ffe:	a811      	add	r0, sp, #68	@ 0x44
 8014000:	3d10      	subs	r5, #16
 8014002:	4606      	mov	r6, r0
 8014004:	e694      	b.n	8013d30 <_vfiprintf_r+0x4b8>
 8014006:	4606      	mov	r6, r0
 8014008:	e6ac      	b.n	8013d64 <_vfiprintf_r+0x4ec>
 801400a:	9800      	ldr	r0, [sp, #0]
 801400c:	aa0e      	add	r2, sp, #56	@ 0x38
 801400e:	4639      	mov	r1, r7
 8014010:	f7ff fc00 	bl	8013814 <__sprint_r>
 8014014:	2800      	cmp	r0, #0
 8014016:	d158      	bne.n	80140ca <_vfiprintf_r+0x852>
 8014018:	ae11      	add	r6, sp, #68	@ 0x44
 801401a:	e6b5      	b.n	8013d88 <_vfiprintf_r+0x510>
 801401c:	9800      	ldr	r0, [sp, #0]
 801401e:	aa0e      	add	r2, sp, #56	@ 0x38
 8014020:	4639      	mov	r1, r7
 8014022:	f7ff fbf7 	bl	8013814 <__sprint_r>
 8014026:	2800      	cmp	r0, #0
 8014028:	d14f      	bne.n	80140ca <_vfiprintf_r+0x852>
 801402a:	ae11      	add	r6, sp, #68	@ 0x44
 801402c:	e6bc      	b.n	8013da8 <_vfiprintf_r+0x530>
 801402e:	2110      	movs	r1, #16
 8014030:	6071      	str	r1, [r6, #4]
 8014032:	2a07      	cmp	r2, #7
 8014034:	4461      	add	r1, ip
 8014036:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801403a:	dd08      	ble.n	801404e <_vfiprintf_r+0x7d6>
 801403c:	9800      	ldr	r0, [sp, #0]
 801403e:	aa0e      	add	r2, sp, #56	@ 0x38
 8014040:	4639      	mov	r1, r7
 8014042:	f7ff fbe7 	bl	8013814 <__sprint_r>
 8014046:	2800      	cmp	r0, #0
 8014048:	d13f      	bne.n	80140ca <_vfiprintf_r+0x852>
 801404a:	4b4e      	ldr	r3, [pc, #312]	@ (8014184 <_vfiprintf_r+0x90c>)
 801404c:	a811      	add	r0, sp, #68	@ 0x44
 801404e:	3d10      	subs	r5, #16
 8014050:	4606      	mov	r6, r0
 8014052:	e6b2      	b.n	8013dba <_vfiprintf_r+0x542>
 8014054:	4606      	mov	r6, r0
 8014056:	e6ca      	b.n	8013dee <_vfiprintf_r+0x576>
 8014058:	2010      	movs	r0, #16
 801405a:	4402      	add	r2, r0
 801405c:	2b07      	cmp	r3, #7
 801405e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8014062:	6070      	str	r0, [r6, #4]
 8014064:	dd06      	ble.n	8014074 <_vfiprintf_r+0x7fc>
 8014066:	9800      	ldr	r0, [sp, #0]
 8014068:	aa0e      	add	r2, sp, #56	@ 0x38
 801406a:	4639      	mov	r1, r7
 801406c:	f7ff fbd2 	bl	8013814 <__sprint_r>
 8014070:	bb58      	cbnz	r0, 80140ca <_vfiprintf_r+0x852>
 8014072:	a911      	add	r1, sp, #68	@ 0x44
 8014074:	3c10      	subs	r4, #16
 8014076:	460e      	mov	r6, r1
 8014078:	e6bd      	b.n	8013df6 <_vfiprintf_r+0x57e>
 801407a:	460e      	mov	r6, r1
 801407c:	e6d6      	b.n	8013e2c <_vfiprintf_r+0x5b4>
 801407e:	9800      	ldr	r0, [sp, #0]
 8014080:	aa0e      	add	r2, sp, #56	@ 0x38
 8014082:	4639      	mov	r1, r7
 8014084:	f7ff fbc6 	bl	8013814 <__sprint_r>
 8014088:	b9f8      	cbnz	r0, 80140ca <_vfiprintf_r+0x852>
 801408a:	ab11      	add	r3, sp, #68	@ 0x44
 801408c:	e6de      	b.n	8013e4c <_vfiprintf_r+0x5d4>
 801408e:	9a02      	ldr	r2, [sp, #8]
 8014090:	9904      	ldr	r1, [sp, #16]
 8014092:	1a54      	subs	r4, r2, r1
 8014094:	2c00      	cmp	r4, #0
 8014096:	f77f aedd 	ble.w	8013e54 <_vfiprintf_r+0x5dc>
 801409a:	4d39      	ldr	r5, [pc, #228]	@ (8014180 <_vfiprintf_r+0x908>)
 801409c:	2610      	movs	r6, #16
 801409e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80140a2:	2c10      	cmp	r4, #16
 80140a4:	f102 0201 	add.w	r2, r2, #1
 80140a8:	601d      	str	r5, [r3, #0]
 80140aa:	dc1d      	bgt.n	80140e8 <_vfiprintf_r+0x870>
 80140ac:	605c      	str	r4, [r3, #4]
 80140ae:	2a07      	cmp	r2, #7
 80140b0:	440c      	add	r4, r1
 80140b2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80140b6:	f77f aecd 	ble.w	8013e54 <_vfiprintf_r+0x5dc>
 80140ba:	9800      	ldr	r0, [sp, #0]
 80140bc:	aa0e      	add	r2, sp, #56	@ 0x38
 80140be:	4639      	mov	r1, r7
 80140c0:	f7ff fba8 	bl	8013814 <__sprint_r>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	f43f aec5 	beq.w	8013e54 <_vfiprintf_r+0x5dc>
 80140ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80140cc:	07d9      	lsls	r1, r3, #31
 80140ce:	d405      	bmi.n	80140dc <_vfiprintf_r+0x864>
 80140d0:	89bb      	ldrh	r3, [r7, #12]
 80140d2:	059a      	lsls	r2, r3, #22
 80140d4:	d402      	bmi.n	80140dc <_vfiprintf_r+0x864>
 80140d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80140d8:	f7fc f87b 	bl	80101d2 <__retarget_lock_release_recursive>
 80140dc:	89bb      	ldrh	r3, [r7, #12]
 80140de:	065b      	lsls	r3, r3, #25
 80140e0:	f57f abfb 	bpl.w	80138da <_vfiprintf_r+0x62>
 80140e4:	f7ff bbf6 	b.w	80138d4 <_vfiprintf_r+0x5c>
 80140e8:	3110      	adds	r1, #16
 80140ea:	2a07      	cmp	r2, #7
 80140ec:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80140f0:	605e      	str	r6, [r3, #4]
 80140f2:	dc02      	bgt.n	80140fa <_vfiprintf_r+0x882>
 80140f4:	3308      	adds	r3, #8
 80140f6:	3c10      	subs	r4, #16
 80140f8:	e7d1      	b.n	801409e <_vfiprintf_r+0x826>
 80140fa:	9800      	ldr	r0, [sp, #0]
 80140fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80140fe:	4639      	mov	r1, r7
 8014100:	f7ff fb88 	bl	8013814 <__sprint_r>
 8014104:	2800      	cmp	r0, #0
 8014106:	d1e0      	bne.n	80140ca <_vfiprintf_r+0x852>
 8014108:	ab11      	add	r3, sp, #68	@ 0x44
 801410a:	e7f4      	b.n	80140f6 <_vfiprintf_r+0x87e>
 801410c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801410e:	b913      	cbnz	r3, 8014116 <_vfiprintf_r+0x89e>
 8014110:	2300      	movs	r3, #0
 8014112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014114:	e7d9      	b.n	80140ca <_vfiprintf_r+0x852>
 8014116:	9800      	ldr	r0, [sp, #0]
 8014118:	aa0e      	add	r2, sp, #56	@ 0x38
 801411a:	4639      	mov	r1, r7
 801411c:	f7ff fb7a 	bl	8013814 <__sprint_r>
 8014120:	2800      	cmp	r0, #0
 8014122:	d0f5      	beq.n	8014110 <_vfiprintf_r+0x898>
 8014124:	e7d1      	b.n	80140ca <_vfiprintf_r+0x852>
 8014126:	ea54 0205 	orrs.w	r2, r4, r5
 801412a:	f8cd a010 	str.w	sl, [sp, #16]
 801412e:	f43f ada6 	beq.w	8013c7e <_vfiprintf_r+0x406>
 8014132:	2b01      	cmp	r3, #1
 8014134:	f43f aedf 	beq.w	8013ef6 <_vfiprintf_r+0x67e>
 8014138:	2b02      	cmp	r3, #2
 801413a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801413e:	f43f af28 	beq.w	8013f92 <_vfiprintf_r+0x71a>
 8014142:	f004 0307 	and.w	r3, r4, #7
 8014146:	08e4      	lsrs	r4, r4, #3
 8014148:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801414c:	08ed      	lsrs	r5, r5, #3
 801414e:	3330      	adds	r3, #48	@ 0x30
 8014150:	ea54 0105 	orrs.w	r1, r4, r5
 8014154:	464a      	mov	r2, r9
 8014156:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801415a:	d1f2      	bne.n	8014142 <_vfiprintf_r+0x8ca>
 801415c:	9904      	ldr	r1, [sp, #16]
 801415e:	07c8      	lsls	r0, r1, #31
 8014160:	d506      	bpl.n	8014170 <_vfiprintf_r+0x8f8>
 8014162:	2b30      	cmp	r3, #48	@ 0x30
 8014164:	d004      	beq.n	8014170 <_vfiprintf_r+0x8f8>
 8014166:	2330      	movs	r3, #48	@ 0x30
 8014168:	f809 3c01 	strb.w	r3, [r9, #-1]
 801416c:	f1a2 0902 	sub.w	r9, r2, #2
 8014170:	ab3a      	add	r3, sp, #232	@ 0xe8
 8014172:	eba3 0309 	sub.w	r3, r3, r9
 8014176:	9c01      	ldr	r4, [sp, #4]
 8014178:	f8dd a010 	ldr.w	sl, [sp, #16]
 801417c:	9301      	str	r3, [sp, #4]
 801417e:	e5bb      	b.n	8013cf8 <_vfiprintf_r+0x480>
 8014180:	080159c5 	.word	0x080159c5
 8014184:	080159b5 	.word	0x080159b5

08014188 <__sbprintf>:
 8014188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801418a:	461f      	mov	r7, r3
 801418c:	898b      	ldrh	r3, [r1, #12]
 801418e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8014192:	f023 0302 	bic.w	r3, r3, #2
 8014196:	f8ad 300c 	strh.w	r3, [sp, #12]
 801419a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801419c:	9319      	str	r3, [sp, #100]	@ 0x64
 801419e:	89cb      	ldrh	r3, [r1, #14]
 80141a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80141a4:	69cb      	ldr	r3, [r1, #28]
 80141a6:	9307      	str	r3, [sp, #28]
 80141a8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80141aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ac:	ab1a      	add	r3, sp, #104	@ 0x68
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	9304      	str	r3, [sp, #16]
 80141b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80141b6:	4615      	mov	r5, r2
 80141b8:	4606      	mov	r6, r0
 80141ba:	9302      	str	r3, [sp, #8]
 80141bc:	9305      	str	r3, [sp, #20]
 80141be:	a816      	add	r0, sp, #88	@ 0x58
 80141c0:	2300      	movs	r3, #0
 80141c2:	460c      	mov	r4, r1
 80141c4:	9306      	str	r3, [sp, #24]
 80141c6:	f7fc f801 	bl	80101cc <__retarget_lock_init_recursive>
 80141ca:	462a      	mov	r2, r5
 80141cc:	463b      	mov	r3, r7
 80141ce:	4669      	mov	r1, sp
 80141d0:	4630      	mov	r0, r6
 80141d2:	f7ff fb51 	bl	8013878 <_vfiprintf_r>
 80141d6:	1e05      	subs	r5, r0, #0
 80141d8:	db07      	blt.n	80141ea <__sbprintf+0x62>
 80141da:	4669      	mov	r1, sp
 80141dc:	4630      	mov	r0, r6
 80141de:	f7fd fbf7 	bl	80119d0 <_fflush_r>
 80141e2:	2800      	cmp	r0, #0
 80141e4:	bf18      	it	ne
 80141e6:	f04f 35ff 	movne.w	r5, #4294967295
 80141ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80141ee:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80141f0:	065b      	lsls	r3, r3, #25
 80141f2:	bf42      	ittt	mi
 80141f4:	89a3      	ldrhmi	r3, [r4, #12]
 80141f6:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80141fa:	81a3      	strhmi	r3, [r4, #12]
 80141fc:	f7fb ffe7 	bl	80101ce <__retarget_lock_close_recursive>
 8014200:	4628      	mov	r0, r5
 8014202:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8014206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014208 <__fputwc>:
 8014208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801420c:	4680      	mov	r8, r0
 801420e:	460f      	mov	r7, r1
 8014210:	4614      	mov	r4, r2
 8014212:	f7fd fe37 	bl	8011e84 <__locale_mb_cur_max>
 8014216:	2801      	cmp	r0, #1
 8014218:	4605      	mov	r5, r0
 801421a:	d11b      	bne.n	8014254 <__fputwc+0x4c>
 801421c:	1e7b      	subs	r3, r7, #1
 801421e:	2bfe      	cmp	r3, #254	@ 0xfe
 8014220:	d818      	bhi.n	8014254 <__fputwc+0x4c>
 8014222:	f88d 7004 	strb.w	r7, [sp, #4]
 8014226:	2600      	movs	r6, #0
 8014228:	f10d 0904 	add.w	r9, sp, #4
 801422c:	42ae      	cmp	r6, r5
 801422e:	d021      	beq.n	8014274 <__fputwc+0x6c>
 8014230:	68a3      	ldr	r3, [r4, #8]
 8014232:	f816 1009 	ldrb.w	r1, [r6, r9]
 8014236:	3b01      	subs	r3, #1
 8014238:	2b00      	cmp	r3, #0
 801423a:	60a3      	str	r3, [r4, #8]
 801423c:	da04      	bge.n	8014248 <__fputwc+0x40>
 801423e:	69a2      	ldr	r2, [r4, #24]
 8014240:	4293      	cmp	r3, r2
 8014242:	db1b      	blt.n	801427c <__fputwc+0x74>
 8014244:	290a      	cmp	r1, #10
 8014246:	d019      	beq.n	801427c <__fputwc+0x74>
 8014248:	6823      	ldr	r3, [r4, #0]
 801424a:	1c5a      	adds	r2, r3, #1
 801424c:	6022      	str	r2, [r4, #0]
 801424e:	7019      	strb	r1, [r3, #0]
 8014250:	3601      	adds	r6, #1
 8014252:	e7eb      	b.n	801422c <__fputwc+0x24>
 8014254:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8014258:	463a      	mov	r2, r7
 801425a:	a901      	add	r1, sp, #4
 801425c:	4640      	mov	r0, r8
 801425e:	f000 f845 	bl	80142ec <_wcrtomb_r>
 8014262:	1c43      	adds	r3, r0, #1
 8014264:	4605      	mov	r5, r0
 8014266:	d1de      	bne.n	8014226 <__fputwc+0x1e>
 8014268:	89a3      	ldrh	r3, [r4, #12]
 801426a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801426e:	81a3      	strh	r3, [r4, #12]
 8014270:	f04f 37ff 	mov.w	r7, #4294967295
 8014274:	4638      	mov	r0, r7
 8014276:	b003      	add	sp, #12
 8014278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801427c:	4622      	mov	r2, r4
 801427e:	4640      	mov	r0, r8
 8014280:	f000 f84a 	bl	8014318 <__swbuf_r>
 8014284:	3001      	adds	r0, #1
 8014286:	d1e3      	bne.n	8014250 <__fputwc+0x48>
 8014288:	e7f2      	b.n	8014270 <__fputwc+0x68>

0801428a <_fputwc_r>:
 801428a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 801428c:	07db      	lsls	r3, r3, #31
 801428e:	b570      	push	{r4, r5, r6, lr}
 8014290:	4605      	mov	r5, r0
 8014292:	460e      	mov	r6, r1
 8014294:	4614      	mov	r4, r2
 8014296:	d405      	bmi.n	80142a4 <_fputwc_r+0x1a>
 8014298:	8993      	ldrh	r3, [r2, #12]
 801429a:	0598      	lsls	r0, r3, #22
 801429c:	d402      	bmi.n	80142a4 <_fputwc_r+0x1a>
 801429e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 80142a0:	f7fb ff96 	bl	80101d0 <__retarget_lock_acquire_recursive>
 80142a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142a8:	0499      	lsls	r1, r3, #18
 80142aa:	d406      	bmi.n	80142ba <_fputwc_r+0x30>
 80142ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80142b0:	81a3      	strh	r3, [r4, #12]
 80142b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80142b8:	6663      	str	r3, [r4, #100]	@ 0x64
 80142ba:	4622      	mov	r2, r4
 80142bc:	4628      	mov	r0, r5
 80142be:	4631      	mov	r1, r6
 80142c0:	f7ff ffa2 	bl	8014208 <__fputwc>
 80142c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142c6:	07da      	lsls	r2, r3, #31
 80142c8:	4605      	mov	r5, r0
 80142ca:	d405      	bmi.n	80142d8 <_fputwc_r+0x4e>
 80142cc:	89a3      	ldrh	r3, [r4, #12]
 80142ce:	059b      	lsls	r3, r3, #22
 80142d0:	d402      	bmi.n	80142d8 <_fputwc_r+0x4e>
 80142d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142d4:	f7fb ff7d 	bl	80101d2 <__retarget_lock_release_recursive>
 80142d8:	4628      	mov	r0, r5
 80142da:	bd70      	pop	{r4, r5, r6, pc}

080142dc <abort>:
 80142dc:	b508      	push	{r3, lr}
 80142de:	2006      	movs	r0, #6
 80142e0:	f000 f88c 	bl	80143fc <raise>
 80142e4:	2001      	movs	r0, #1
 80142e6:	f7ee fc0f 	bl	8002b08 <_exit>
	...

080142ec <_wcrtomb_r>:
 80142ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ee:	4c09      	ldr	r4, [pc, #36]	@ (8014314 <_wcrtomb_r+0x28>)
 80142f0:	b085      	sub	sp, #20
 80142f2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80142f6:	4605      	mov	r5, r0
 80142f8:	461e      	mov	r6, r3
 80142fa:	b909      	cbnz	r1, 8014300 <_wcrtomb_r+0x14>
 80142fc:	460a      	mov	r2, r1
 80142fe:	a901      	add	r1, sp, #4
 8014300:	47b8      	blx	r7
 8014302:	1c43      	adds	r3, r0, #1
 8014304:	bf01      	itttt	eq
 8014306:	2300      	moveq	r3, #0
 8014308:	6033      	streq	r3, [r6, #0]
 801430a:	238a      	moveq	r3, #138	@ 0x8a
 801430c:	602b      	streq	r3, [r5, #0]
 801430e:	b005      	add	sp, #20
 8014310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014312:	bf00      	nop
 8014314:	2000055c 	.word	0x2000055c

08014318 <__swbuf_r>:
 8014318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431a:	460e      	mov	r6, r1
 801431c:	4614      	mov	r4, r2
 801431e:	4605      	mov	r5, r0
 8014320:	b118      	cbz	r0, 801432a <__swbuf_r+0x12>
 8014322:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014324:	b90b      	cbnz	r3, 801432a <__swbuf_r+0x12>
 8014326:	f7fb fcfb 	bl	800fd20 <__sinit>
 801432a:	69a3      	ldr	r3, [r4, #24]
 801432c:	60a3      	str	r3, [r4, #8]
 801432e:	89a3      	ldrh	r3, [r4, #12]
 8014330:	0719      	lsls	r1, r3, #28
 8014332:	d501      	bpl.n	8014338 <__swbuf_r+0x20>
 8014334:	6923      	ldr	r3, [r4, #16]
 8014336:	b943      	cbnz	r3, 801434a <__swbuf_r+0x32>
 8014338:	4621      	mov	r1, r4
 801433a:	4628      	mov	r0, r5
 801433c:	f7fd fd1e 	bl	8011d7c <__swsetup_r>
 8014340:	b118      	cbz	r0, 801434a <__swbuf_r+0x32>
 8014342:	f04f 37ff 	mov.w	r7, #4294967295
 8014346:	4638      	mov	r0, r7
 8014348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801434a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801434e:	b2f6      	uxtb	r6, r6
 8014350:	049a      	lsls	r2, r3, #18
 8014352:	4637      	mov	r7, r6
 8014354:	d406      	bmi.n	8014364 <__swbuf_r+0x4c>
 8014356:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801435a:	81a3      	strh	r3, [r4, #12]
 801435c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801435e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014362:	6663      	str	r3, [r4, #100]	@ 0x64
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	6922      	ldr	r2, [r4, #16]
 8014368:	1a98      	subs	r0, r3, r2
 801436a:	6963      	ldr	r3, [r4, #20]
 801436c:	4283      	cmp	r3, r0
 801436e:	dc05      	bgt.n	801437c <__swbuf_r+0x64>
 8014370:	4621      	mov	r1, r4
 8014372:	4628      	mov	r0, r5
 8014374:	f7fd fb2c 	bl	80119d0 <_fflush_r>
 8014378:	2800      	cmp	r0, #0
 801437a:	d1e2      	bne.n	8014342 <__swbuf_r+0x2a>
 801437c:	68a3      	ldr	r3, [r4, #8]
 801437e:	3b01      	subs	r3, #1
 8014380:	60a3      	str	r3, [r4, #8]
 8014382:	6823      	ldr	r3, [r4, #0]
 8014384:	1c5a      	adds	r2, r3, #1
 8014386:	6022      	str	r2, [r4, #0]
 8014388:	701e      	strb	r6, [r3, #0]
 801438a:	6962      	ldr	r2, [r4, #20]
 801438c:	1c43      	adds	r3, r0, #1
 801438e:	429a      	cmp	r2, r3
 8014390:	d004      	beq.n	801439c <__swbuf_r+0x84>
 8014392:	89a3      	ldrh	r3, [r4, #12]
 8014394:	07db      	lsls	r3, r3, #31
 8014396:	d5d6      	bpl.n	8014346 <__swbuf_r+0x2e>
 8014398:	2e0a      	cmp	r6, #10
 801439a:	d1d4      	bne.n	8014346 <__swbuf_r+0x2e>
 801439c:	4621      	mov	r1, r4
 801439e:	4628      	mov	r0, r5
 80143a0:	f7fd fb16 	bl	80119d0 <_fflush_r>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0ce      	beq.n	8014346 <__swbuf_r+0x2e>
 80143a8:	e7cb      	b.n	8014342 <__swbuf_r+0x2a>

080143aa <_raise_r>:
 80143aa:	291f      	cmp	r1, #31
 80143ac:	b538      	push	{r3, r4, r5, lr}
 80143ae:	4605      	mov	r5, r0
 80143b0:	460c      	mov	r4, r1
 80143b2:	d904      	bls.n	80143be <_raise_r+0x14>
 80143b4:	2316      	movs	r3, #22
 80143b6:	6003      	str	r3, [r0, #0]
 80143b8:	f04f 30ff 	mov.w	r0, #4294967295
 80143bc:	bd38      	pop	{r3, r4, r5, pc}
 80143be:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80143c2:	b112      	cbz	r2, 80143ca <_raise_r+0x20>
 80143c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80143c8:	b94b      	cbnz	r3, 80143de <_raise_r+0x34>
 80143ca:	4628      	mov	r0, r5
 80143cc:	f000 f830 	bl	8014430 <_getpid_r>
 80143d0:	4622      	mov	r2, r4
 80143d2:	4601      	mov	r1, r0
 80143d4:	4628      	mov	r0, r5
 80143d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143da:	f000 b817 	b.w	801440c <_kill_r>
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d00a      	beq.n	80143f8 <_raise_r+0x4e>
 80143e2:	1c59      	adds	r1, r3, #1
 80143e4:	d103      	bne.n	80143ee <_raise_r+0x44>
 80143e6:	2316      	movs	r3, #22
 80143e8:	6003      	str	r3, [r0, #0]
 80143ea:	2001      	movs	r0, #1
 80143ec:	e7e6      	b.n	80143bc <_raise_r+0x12>
 80143ee:	2100      	movs	r1, #0
 80143f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80143f4:	4620      	mov	r0, r4
 80143f6:	4798      	blx	r3
 80143f8:	2000      	movs	r0, #0
 80143fa:	e7df      	b.n	80143bc <_raise_r+0x12>

080143fc <raise>:
 80143fc:	4b02      	ldr	r3, [pc, #8]	@ (8014408 <raise+0xc>)
 80143fe:	4601      	mov	r1, r0
 8014400:	6818      	ldr	r0, [r3, #0]
 8014402:	f7ff bfd2 	b.w	80143aa <_raise_r>
 8014406:	bf00      	nop
 8014408:	20000434 	.word	0x20000434

0801440c <_kill_r>:
 801440c:	b538      	push	{r3, r4, r5, lr}
 801440e:	4d07      	ldr	r5, [pc, #28]	@ (801442c <_kill_r+0x20>)
 8014410:	2300      	movs	r3, #0
 8014412:	4604      	mov	r4, r0
 8014414:	4608      	mov	r0, r1
 8014416:	4611      	mov	r1, r2
 8014418:	602b      	str	r3, [r5, #0]
 801441a:	f7ee fb65 	bl	8002ae8 <_kill>
 801441e:	1c43      	adds	r3, r0, #1
 8014420:	d102      	bne.n	8014428 <_kill_r+0x1c>
 8014422:	682b      	ldr	r3, [r5, #0]
 8014424:	b103      	cbz	r3, 8014428 <_kill_r+0x1c>
 8014426:	6023      	str	r3, [r4, #0]
 8014428:	bd38      	pop	{r3, r4, r5, pc}
 801442a:	bf00      	nop
 801442c:	200030d8 	.word	0x200030d8

08014430 <_getpid_r>:
 8014430:	f7ee bb52 	b.w	8002ad8 <_getpid>
 8014434:	0000      	movs	r0, r0
	...

08014438 <sin>:
 8014438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801443a:	ec53 2b10 	vmov	r2, r3, d0
 801443e:	4826      	ldr	r0, [pc, #152]	@ (80144d8 <sin+0xa0>)
 8014440:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014444:	4281      	cmp	r1, r0
 8014446:	d807      	bhi.n	8014458 <sin+0x20>
 8014448:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80144d0 <sin+0x98>
 801444c:	2000      	movs	r0, #0
 801444e:	b005      	add	sp, #20
 8014450:	f85d eb04 	ldr.w	lr, [sp], #4
 8014454:	f000 b930 	b.w	80146b8 <__kernel_sin>
 8014458:	4820      	ldr	r0, [pc, #128]	@ (80144dc <sin+0xa4>)
 801445a:	4281      	cmp	r1, r0
 801445c:	d908      	bls.n	8014470 <sin+0x38>
 801445e:	4610      	mov	r0, r2
 8014460:	4619      	mov	r1, r3
 8014462:	f7eb ff39 	bl	80002d8 <__aeabi_dsub>
 8014466:	ec41 0b10 	vmov	d0, r0, r1
 801446a:	b005      	add	sp, #20
 801446c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014470:	4668      	mov	r0, sp
 8014472:	f000 f9dd 	bl	8014830 <__ieee754_rem_pio2>
 8014476:	f000 0003 	and.w	r0, r0, #3
 801447a:	2801      	cmp	r0, #1
 801447c:	d00c      	beq.n	8014498 <sin+0x60>
 801447e:	2802      	cmp	r0, #2
 8014480:	d011      	beq.n	80144a6 <sin+0x6e>
 8014482:	b9e8      	cbnz	r0, 80144c0 <sin+0x88>
 8014484:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014488:	ed9d 0b00 	vldr	d0, [sp]
 801448c:	2001      	movs	r0, #1
 801448e:	f000 f913 	bl	80146b8 <__kernel_sin>
 8014492:	ec51 0b10 	vmov	r0, r1, d0
 8014496:	e7e6      	b.n	8014466 <sin+0x2e>
 8014498:	ed9d 1b02 	vldr	d1, [sp, #8]
 801449c:	ed9d 0b00 	vldr	d0, [sp]
 80144a0:	f000 f842 	bl	8014528 <__kernel_cos>
 80144a4:	e7f5      	b.n	8014492 <sin+0x5a>
 80144a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144aa:	ed9d 0b00 	vldr	d0, [sp]
 80144ae:	2001      	movs	r0, #1
 80144b0:	f000 f902 	bl	80146b8 <__kernel_sin>
 80144b4:	ec53 2b10 	vmov	r2, r3, d0
 80144b8:	4610      	mov	r0, r2
 80144ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80144be:	e7d2      	b.n	8014466 <sin+0x2e>
 80144c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144c4:	ed9d 0b00 	vldr	d0, [sp]
 80144c8:	f000 f82e 	bl	8014528 <__kernel_cos>
 80144cc:	e7f2      	b.n	80144b4 <sin+0x7c>
 80144ce:	bf00      	nop
	...
 80144d8:	3fe921fb 	.word	0x3fe921fb
 80144dc:	7fefffff 	.word	0x7fefffff

080144e0 <roundf>:
 80144e0:	ee10 0a10 	vmov	r0, s0
 80144e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80144e8:	3a7f      	subs	r2, #127	@ 0x7f
 80144ea:	2a16      	cmp	r2, #22
 80144ec:	dc15      	bgt.n	801451a <roundf+0x3a>
 80144ee:	2a00      	cmp	r2, #0
 80144f0:	da08      	bge.n	8014504 <roundf+0x24>
 80144f2:	3201      	adds	r2, #1
 80144f4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80144f8:	d101      	bne.n	80144fe <roundf+0x1e>
 80144fa:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80144fe:	ee00 3a10 	vmov	s0, r3
 8014502:	4770      	bx	lr
 8014504:	4907      	ldr	r1, [pc, #28]	@ (8014524 <roundf+0x44>)
 8014506:	4111      	asrs	r1, r2
 8014508:	4201      	tst	r1, r0
 801450a:	d0fa      	beq.n	8014502 <roundf+0x22>
 801450c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8014510:	4113      	asrs	r3, r2
 8014512:	4403      	add	r3, r0
 8014514:	ea23 0301 	bic.w	r3, r3, r1
 8014518:	e7f1      	b.n	80144fe <roundf+0x1e>
 801451a:	2a80      	cmp	r2, #128	@ 0x80
 801451c:	d1f1      	bne.n	8014502 <roundf+0x22>
 801451e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014522:	4770      	bx	lr
 8014524:	007fffff 	.word	0x007fffff

08014528 <__kernel_cos>:
 8014528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452c:	ec57 6b10 	vmov	r6, r7, d0
 8014530:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014534:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8014538:	ed8d 1b00 	vstr	d1, [sp]
 801453c:	d206      	bcs.n	801454c <__kernel_cos+0x24>
 801453e:	4630      	mov	r0, r6
 8014540:	4639      	mov	r1, r7
 8014542:	f7ec fb31 	bl	8000ba8 <__aeabi_d2iz>
 8014546:	2800      	cmp	r0, #0
 8014548:	f000 8088 	beq.w	801465c <__kernel_cos+0x134>
 801454c:	4632      	mov	r2, r6
 801454e:	463b      	mov	r3, r7
 8014550:	4630      	mov	r0, r6
 8014552:	4639      	mov	r1, r7
 8014554:	f7ec f878 	bl	8000648 <__aeabi_dmul>
 8014558:	4b51      	ldr	r3, [pc, #324]	@ (80146a0 <__kernel_cos+0x178>)
 801455a:	2200      	movs	r2, #0
 801455c:	4604      	mov	r4, r0
 801455e:	460d      	mov	r5, r1
 8014560:	f7ec f872 	bl	8000648 <__aeabi_dmul>
 8014564:	a340      	add	r3, pc, #256	@ (adr r3, 8014668 <__kernel_cos+0x140>)
 8014566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456a:	4682      	mov	sl, r0
 801456c:	468b      	mov	fp, r1
 801456e:	4620      	mov	r0, r4
 8014570:	4629      	mov	r1, r5
 8014572:	f7ec f869 	bl	8000648 <__aeabi_dmul>
 8014576:	a33e      	add	r3, pc, #248	@ (adr r3, 8014670 <__kernel_cos+0x148>)
 8014578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457c:	f7eb feae 	bl	80002dc <__adddf3>
 8014580:	4622      	mov	r2, r4
 8014582:	462b      	mov	r3, r5
 8014584:	f7ec f860 	bl	8000648 <__aeabi_dmul>
 8014588:	a33b      	add	r3, pc, #236	@ (adr r3, 8014678 <__kernel_cos+0x150>)
 801458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458e:	f7eb fea3 	bl	80002d8 <__aeabi_dsub>
 8014592:	4622      	mov	r2, r4
 8014594:	462b      	mov	r3, r5
 8014596:	f7ec f857 	bl	8000648 <__aeabi_dmul>
 801459a:	a339      	add	r3, pc, #228	@ (adr r3, 8014680 <__kernel_cos+0x158>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	f7eb fe9c 	bl	80002dc <__adddf3>
 80145a4:	4622      	mov	r2, r4
 80145a6:	462b      	mov	r3, r5
 80145a8:	f7ec f84e 	bl	8000648 <__aeabi_dmul>
 80145ac:	a336      	add	r3, pc, #216	@ (adr r3, 8014688 <__kernel_cos+0x160>)
 80145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b2:	f7eb fe91 	bl	80002d8 <__aeabi_dsub>
 80145b6:	4622      	mov	r2, r4
 80145b8:	462b      	mov	r3, r5
 80145ba:	f7ec f845 	bl	8000648 <__aeabi_dmul>
 80145be:	a334      	add	r3, pc, #208	@ (adr r3, 8014690 <__kernel_cos+0x168>)
 80145c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c4:	f7eb fe8a 	bl	80002dc <__adddf3>
 80145c8:	4622      	mov	r2, r4
 80145ca:	462b      	mov	r3, r5
 80145cc:	f7ec f83c 	bl	8000648 <__aeabi_dmul>
 80145d0:	4622      	mov	r2, r4
 80145d2:	462b      	mov	r3, r5
 80145d4:	f7ec f838 	bl	8000648 <__aeabi_dmul>
 80145d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145dc:	4604      	mov	r4, r0
 80145de:	460d      	mov	r5, r1
 80145e0:	4630      	mov	r0, r6
 80145e2:	4639      	mov	r1, r7
 80145e4:	f7ec f830 	bl	8000648 <__aeabi_dmul>
 80145e8:	460b      	mov	r3, r1
 80145ea:	4602      	mov	r2, r0
 80145ec:	4629      	mov	r1, r5
 80145ee:	4620      	mov	r0, r4
 80145f0:	f7eb fe72 	bl	80002d8 <__aeabi_dsub>
 80145f4:	4b2b      	ldr	r3, [pc, #172]	@ (80146a4 <__kernel_cos+0x17c>)
 80145f6:	4598      	cmp	r8, r3
 80145f8:	4606      	mov	r6, r0
 80145fa:	460f      	mov	r7, r1
 80145fc:	d810      	bhi.n	8014620 <__kernel_cos+0xf8>
 80145fe:	4602      	mov	r2, r0
 8014600:	460b      	mov	r3, r1
 8014602:	4650      	mov	r0, sl
 8014604:	4659      	mov	r1, fp
 8014606:	f7eb fe67 	bl	80002d8 <__aeabi_dsub>
 801460a:	460b      	mov	r3, r1
 801460c:	4926      	ldr	r1, [pc, #152]	@ (80146a8 <__kernel_cos+0x180>)
 801460e:	4602      	mov	r2, r0
 8014610:	2000      	movs	r0, #0
 8014612:	f7eb fe61 	bl	80002d8 <__aeabi_dsub>
 8014616:	ec41 0b10 	vmov	d0, r0, r1
 801461a:	b003      	add	sp, #12
 801461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014620:	4b22      	ldr	r3, [pc, #136]	@ (80146ac <__kernel_cos+0x184>)
 8014622:	4921      	ldr	r1, [pc, #132]	@ (80146a8 <__kernel_cos+0x180>)
 8014624:	4598      	cmp	r8, r3
 8014626:	bf8c      	ite	hi
 8014628:	4d21      	ldrhi	r5, [pc, #132]	@ (80146b0 <__kernel_cos+0x188>)
 801462a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801462e:	2400      	movs	r4, #0
 8014630:	4622      	mov	r2, r4
 8014632:	462b      	mov	r3, r5
 8014634:	2000      	movs	r0, #0
 8014636:	f7eb fe4f 	bl	80002d8 <__aeabi_dsub>
 801463a:	4622      	mov	r2, r4
 801463c:	4680      	mov	r8, r0
 801463e:	4689      	mov	r9, r1
 8014640:	462b      	mov	r3, r5
 8014642:	4650      	mov	r0, sl
 8014644:	4659      	mov	r1, fp
 8014646:	f7eb fe47 	bl	80002d8 <__aeabi_dsub>
 801464a:	4632      	mov	r2, r6
 801464c:	463b      	mov	r3, r7
 801464e:	f7eb fe43 	bl	80002d8 <__aeabi_dsub>
 8014652:	4602      	mov	r2, r0
 8014654:	460b      	mov	r3, r1
 8014656:	4640      	mov	r0, r8
 8014658:	4649      	mov	r1, r9
 801465a:	e7da      	b.n	8014612 <__kernel_cos+0xea>
 801465c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8014698 <__kernel_cos+0x170>
 8014660:	e7db      	b.n	801461a <__kernel_cos+0xf2>
 8014662:	bf00      	nop
 8014664:	f3af 8000 	nop.w
 8014668:	be8838d4 	.word	0xbe8838d4
 801466c:	bda8fae9 	.word	0xbda8fae9
 8014670:	bdb4b1c4 	.word	0xbdb4b1c4
 8014674:	3e21ee9e 	.word	0x3e21ee9e
 8014678:	809c52ad 	.word	0x809c52ad
 801467c:	3e927e4f 	.word	0x3e927e4f
 8014680:	19cb1590 	.word	0x19cb1590
 8014684:	3efa01a0 	.word	0x3efa01a0
 8014688:	16c15177 	.word	0x16c15177
 801468c:	3f56c16c 	.word	0x3f56c16c
 8014690:	5555554c 	.word	0x5555554c
 8014694:	3fa55555 	.word	0x3fa55555
 8014698:	00000000 	.word	0x00000000
 801469c:	3ff00000 	.word	0x3ff00000
 80146a0:	3fe00000 	.word	0x3fe00000
 80146a4:	3fd33332 	.word	0x3fd33332
 80146a8:	3ff00000 	.word	0x3ff00000
 80146ac:	3fe90000 	.word	0x3fe90000
 80146b0:	3fd20000 	.word	0x3fd20000
 80146b4:	00000000 	.word	0x00000000

080146b8 <__kernel_sin>:
 80146b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146bc:	ec55 4b10 	vmov	r4, r5, d0
 80146c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80146c4:	b085      	sub	sp, #20
 80146c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80146ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 80146ce:	4680      	mov	r8, r0
 80146d0:	d205      	bcs.n	80146de <__kernel_sin+0x26>
 80146d2:	4620      	mov	r0, r4
 80146d4:	4629      	mov	r1, r5
 80146d6:	f7ec fa67 	bl	8000ba8 <__aeabi_d2iz>
 80146da:	2800      	cmp	r0, #0
 80146dc:	d052      	beq.n	8014784 <__kernel_sin+0xcc>
 80146de:	4622      	mov	r2, r4
 80146e0:	462b      	mov	r3, r5
 80146e2:	4620      	mov	r0, r4
 80146e4:	4629      	mov	r1, r5
 80146e6:	f7eb ffaf 	bl	8000648 <__aeabi_dmul>
 80146ea:	4682      	mov	sl, r0
 80146ec:	468b      	mov	fp, r1
 80146ee:	4602      	mov	r2, r0
 80146f0:	460b      	mov	r3, r1
 80146f2:	4620      	mov	r0, r4
 80146f4:	4629      	mov	r1, r5
 80146f6:	f7eb ffa7 	bl	8000648 <__aeabi_dmul>
 80146fa:	a342      	add	r3, pc, #264	@ (adr r3, 8014804 <__kernel_sin+0x14c>)
 80146fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014700:	e9cd 0100 	strd	r0, r1, [sp]
 8014704:	4650      	mov	r0, sl
 8014706:	4659      	mov	r1, fp
 8014708:	f7eb ff9e 	bl	8000648 <__aeabi_dmul>
 801470c:	a33f      	add	r3, pc, #252	@ (adr r3, 801480c <__kernel_sin+0x154>)
 801470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014712:	f7eb fde1 	bl	80002d8 <__aeabi_dsub>
 8014716:	4652      	mov	r2, sl
 8014718:	465b      	mov	r3, fp
 801471a:	f7eb ff95 	bl	8000648 <__aeabi_dmul>
 801471e:	a33d      	add	r3, pc, #244	@ (adr r3, 8014814 <__kernel_sin+0x15c>)
 8014720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014724:	f7eb fdda 	bl	80002dc <__adddf3>
 8014728:	4652      	mov	r2, sl
 801472a:	465b      	mov	r3, fp
 801472c:	f7eb ff8c 	bl	8000648 <__aeabi_dmul>
 8014730:	a33a      	add	r3, pc, #232	@ (adr r3, 801481c <__kernel_sin+0x164>)
 8014732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014736:	f7eb fdcf 	bl	80002d8 <__aeabi_dsub>
 801473a:	4652      	mov	r2, sl
 801473c:	465b      	mov	r3, fp
 801473e:	f7eb ff83 	bl	8000648 <__aeabi_dmul>
 8014742:	a338      	add	r3, pc, #224	@ (adr r3, 8014824 <__kernel_sin+0x16c>)
 8014744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014748:	f7eb fdc8 	bl	80002dc <__adddf3>
 801474c:	4606      	mov	r6, r0
 801474e:	460f      	mov	r7, r1
 8014750:	f1b8 0f00 	cmp.w	r8, #0
 8014754:	d11b      	bne.n	801478e <__kernel_sin+0xd6>
 8014756:	4602      	mov	r2, r0
 8014758:	460b      	mov	r3, r1
 801475a:	4650      	mov	r0, sl
 801475c:	4659      	mov	r1, fp
 801475e:	f7eb ff73 	bl	8000648 <__aeabi_dmul>
 8014762:	a325      	add	r3, pc, #148	@ (adr r3, 80147f8 <__kernel_sin+0x140>)
 8014764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014768:	f7eb fdb6 	bl	80002d8 <__aeabi_dsub>
 801476c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014770:	f7eb ff6a 	bl	8000648 <__aeabi_dmul>
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	4620      	mov	r0, r4
 801477a:	4629      	mov	r1, r5
 801477c:	f7eb fdae 	bl	80002dc <__adddf3>
 8014780:	4604      	mov	r4, r0
 8014782:	460d      	mov	r5, r1
 8014784:	ec45 4b10 	vmov	d0, r4, r5
 8014788:	b005      	add	sp, #20
 801478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014792:	4b1b      	ldr	r3, [pc, #108]	@ (8014800 <__kernel_sin+0x148>)
 8014794:	2200      	movs	r2, #0
 8014796:	f7eb ff57 	bl	8000648 <__aeabi_dmul>
 801479a:	4632      	mov	r2, r6
 801479c:	4680      	mov	r8, r0
 801479e:	4689      	mov	r9, r1
 80147a0:	463b      	mov	r3, r7
 80147a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147a6:	f7eb ff4f 	bl	8000648 <__aeabi_dmul>
 80147aa:	4602      	mov	r2, r0
 80147ac:	460b      	mov	r3, r1
 80147ae:	4640      	mov	r0, r8
 80147b0:	4649      	mov	r1, r9
 80147b2:	f7eb fd91 	bl	80002d8 <__aeabi_dsub>
 80147b6:	4652      	mov	r2, sl
 80147b8:	465b      	mov	r3, fp
 80147ba:	f7eb ff45 	bl	8000648 <__aeabi_dmul>
 80147be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80147c2:	f7eb fd89 	bl	80002d8 <__aeabi_dsub>
 80147c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80147f8 <__kernel_sin+0x140>)
 80147c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147cc:	4606      	mov	r6, r0
 80147ce:	460f      	mov	r7, r1
 80147d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147d4:	f7eb ff38 	bl	8000648 <__aeabi_dmul>
 80147d8:	4602      	mov	r2, r0
 80147da:	460b      	mov	r3, r1
 80147dc:	4630      	mov	r0, r6
 80147de:	4639      	mov	r1, r7
 80147e0:	f7eb fd7c 	bl	80002dc <__adddf3>
 80147e4:	4602      	mov	r2, r0
 80147e6:	460b      	mov	r3, r1
 80147e8:	4620      	mov	r0, r4
 80147ea:	4629      	mov	r1, r5
 80147ec:	f7eb fd74 	bl	80002d8 <__aeabi_dsub>
 80147f0:	e7c6      	b.n	8014780 <__kernel_sin+0xc8>
 80147f2:	bf00      	nop
 80147f4:	f3af 8000 	nop.w
 80147f8:	55555549 	.word	0x55555549
 80147fc:	3fc55555 	.word	0x3fc55555
 8014800:	3fe00000 	.word	0x3fe00000
 8014804:	5acfd57c 	.word	0x5acfd57c
 8014808:	3de5d93a 	.word	0x3de5d93a
 801480c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014810:	3e5ae5e6 	.word	0x3e5ae5e6
 8014814:	57b1fe7d 	.word	0x57b1fe7d
 8014818:	3ec71de3 	.word	0x3ec71de3
 801481c:	19c161d5 	.word	0x19c161d5
 8014820:	3f2a01a0 	.word	0x3f2a01a0
 8014824:	1110f8a6 	.word	0x1110f8a6
 8014828:	3f811111 	.word	0x3f811111
 801482c:	00000000 	.word	0x00000000

08014830 <__ieee754_rem_pio2>:
 8014830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014834:	ec57 6b10 	vmov	r6, r7, d0
 8014838:	4bc5      	ldr	r3, [pc, #788]	@ (8014b50 <__ieee754_rem_pio2+0x320>)
 801483a:	b08d      	sub	sp, #52	@ 0x34
 801483c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014840:	4598      	cmp	r8, r3
 8014842:	4604      	mov	r4, r0
 8014844:	9704      	str	r7, [sp, #16]
 8014846:	d807      	bhi.n	8014858 <__ieee754_rem_pio2+0x28>
 8014848:	2200      	movs	r2, #0
 801484a:	2300      	movs	r3, #0
 801484c:	ed80 0b00 	vstr	d0, [r0]
 8014850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014854:	2500      	movs	r5, #0
 8014856:	e028      	b.n	80148aa <__ieee754_rem_pio2+0x7a>
 8014858:	4bbe      	ldr	r3, [pc, #760]	@ (8014b54 <__ieee754_rem_pio2+0x324>)
 801485a:	4598      	cmp	r8, r3
 801485c:	d878      	bhi.n	8014950 <__ieee754_rem_pio2+0x120>
 801485e:	9b04      	ldr	r3, [sp, #16]
 8014860:	4dbd      	ldr	r5, [pc, #756]	@ (8014b58 <__ieee754_rem_pio2+0x328>)
 8014862:	2b00      	cmp	r3, #0
 8014864:	4630      	mov	r0, r6
 8014866:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014b18 <__ieee754_rem_pio2+0x2e8>)
 8014868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486c:	4639      	mov	r1, r7
 801486e:	dd38      	ble.n	80148e2 <__ieee754_rem_pio2+0xb2>
 8014870:	f7eb fd32 	bl	80002d8 <__aeabi_dsub>
 8014874:	45a8      	cmp	r8, r5
 8014876:	4606      	mov	r6, r0
 8014878:	460f      	mov	r7, r1
 801487a:	d01a      	beq.n	80148b2 <__ieee754_rem_pio2+0x82>
 801487c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 801487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014882:	f7eb fd29 	bl	80002d8 <__aeabi_dsub>
 8014886:	4602      	mov	r2, r0
 8014888:	460b      	mov	r3, r1
 801488a:	4680      	mov	r8, r0
 801488c:	4689      	mov	r9, r1
 801488e:	4630      	mov	r0, r6
 8014890:	4639      	mov	r1, r7
 8014892:	f7eb fd21 	bl	80002d8 <__aeabi_dsub>
 8014896:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb fd1c 	bl	80002d8 <__aeabi_dsub>
 80148a0:	e9c4 8900 	strd	r8, r9, [r4]
 80148a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148a8:	2501      	movs	r5, #1
 80148aa:	4628      	mov	r0, r5
 80148ac:	b00d      	add	sp, #52	@ 0x34
 80148ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8014b28 <__ieee754_rem_pio2+0x2f8>)
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	f7eb fd0e 	bl	80002d8 <__aeabi_dsub>
 80148bc:	a39c      	add	r3, pc, #624	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 80148be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c2:	4606      	mov	r6, r0
 80148c4:	460f      	mov	r7, r1
 80148c6:	f7eb fd07 	bl	80002d8 <__aeabi_dsub>
 80148ca:	4602      	mov	r2, r0
 80148cc:	460b      	mov	r3, r1
 80148ce:	4680      	mov	r8, r0
 80148d0:	4689      	mov	r9, r1
 80148d2:	4630      	mov	r0, r6
 80148d4:	4639      	mov	r1, r7
 80148d6:	f7eb fcff 	bl	80002d8 <__aeabi_dsub>
 80148da:	a395      	add	r3, pc, #596	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	e7dc      	b.n	801489c <__ieee754_rem_pio2+0x6c>
 80148e2:	f7eb fcfb 	bl	80002dc <__adddf3>
 80148e6:	45a8      	cmp	r8, r5
 80148e8:	4606      	mov	r6, r0
 80148ea:	460f      	mov	r7, r1
 80148ec:	d018      	beq.n	8014920 <__ieee754_rem_pio2+0xf0>
 80148ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 80148f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f4:	f7eb fcf2 	bl	80002dc <__adddf3>
 80148f8:	4602      	mov	r2, r0
 80148fa:	460b      	mov	r3, r1
 80148fc:	4680      	mov	r8, r0
 80148fe:	4689      	mov	r9, r1
 8014900:	4630      	mov	r0, r6
 8014902:	4639      	mov	r1, r7
 8014904:	f7eb fce8 	bl	80002d8 <__aeabi_dsub>
 8014908:	a385      	add	r3, pc, #532	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	f7eb fce5 	bl	80002dc <__adddf3>
 8014912:	f04f 35ff 	mov.w	r5, #4294967295
 8014916:	e9c4 8900 	strd	r8, r9, [r4]
 801491a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801491e:	e7c4      	b.n	80148aa <__ieee754_rem_pio2+0x7a>
 8014920:	a381      	add	r3, pc, #516	@ (adr r3, 8014b28 <__ieee754_rem_pio2+0x2f8>)
 8014922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014926:	f7eb fcd9 	bl	80002dc <__adddf3>
 801492a:	a381      	add	r3, pc, #516	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 801492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014930:	4606      	mov	r6, r0
 8014932:	460f      	mov	r7, r1
 8014934:	f7eb fcd2 	bl	80002dc <__adddf3>
 8014938:	4602      	mov	r2, r0
 801493a:	460b      	mov	r3, r1
 801493c:	4680      	mov	r8, r0
 801493e:	4689      	mov	r9, r1
 8014940:	4630      	mov	r0, r6
 8014942:	4639      	mov	r1, r7
 8014944:	f7eb fcc8 	bl	80002d8 <__aeabi_dsub>
 8014948:	a379      	add	r3, pc, #484	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	e7de      	b.n	801490e <__ieee754_rem_pio2+0xde>
 8014950:	4b82      	ldr	r3, [pc, #520]	@ (8014b5c <__ieee754_rem_pio2+0x32c>)
 8014952:	4598      	cmp	r8, r3
 8014954:	f200 80d1 	bhi.w	8014afa <__ieee754_rem_pio2+0x2ca>
 8014958:	f000 f966 	bl	8014c28 <fabs>
 801495c:	ec57 6b10 	vmov	r6, r7, d0
 8014960:	a375      	add	r3, pc, #468	@ (adr r3, 8014b38 <__ieee754_rem_pio2+0x308>)
 8014962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014966:	4630      	mov	r0, r6
 8014968:	4639      	mov	r1, r7
 801496a:	f7eb fe6d 	bl	8000648 <__aeabi_dmul>
 801496e:	4b7c      	ldr	r3, [pc, #496]	@ (8014b60 <__ieee754_rem_pio2+0x330>)
 8014970:	2200      	movs	r2, #0
 8014972:	f7eb fcb3 	bl	80002dc <__adddf3>
 8014976:	f7ec f917 	bl	8000ba8 <__aeabi_d2iz>
 801497a:	4605      	mov	r5, r0
 801497c:	f7eb fdfa 	bl	8000574 <__aeabi_i2d>
 8014980:	4602      	mov	r2, r0
 8014982:	460b      	mov	r3, r1
 8014984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014988:	a363      	add	r3, pc, #396	@ (adr r3, 8014b18 <__ieee754_rem_pio2+0x2e8>)
 801498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498e:	f7eb fe5b 	bl	8000648 <__aeabi_dmul>
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	4630      	mov	r0, r6
 8014998:	4639      	mov	r1, r7
 801499a:	f7eb fc9d 	bl	80002d8 <__aeabi_dsub>
 801499e:	a360      	add	r3, pc, #384	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 80149a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a4:	4682      	mov	sl, r0
 80149a6:	468b      	mov	fp, r1
 80149a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149ac:	f7eb fe4c 	bl	8000648 <__aeabi_dmul>
 80149b0:	2d1f      	cmp	r5, #31
 80149b2:	4606      	mov	r6, r0
 80149b4:	460f      	mov	r7, r1
 80149b6:	dc0c      	bgt.n	80149d2 <__ieee754_rem_pio2+0x1a2>
 80149b8:	4b6a      	ldr	r3, [pc, #424]	@ (8014b64 <__ieee754_rem_pio2+0x334>)
 80149ba:	1e6a      	subs	r2, r5, #1
 80149bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c0:	4543      	cmp	r3, r8
 80149c2:	d006      	beq.n	80149d2 <__ieee754_rem_pio2+0x1a2>
 80149c4:	4632      	mov	r2, r6
 80149c6:	463b      	mov	r3, r7
 80149c8:	4650      	mov	r0, sl
 80149ca:	4659      	mov	r1, fp
 80149cc:	f7eb fc84 	bl	80002d8 <__aeabi_dsub>
 80149d0:	e00e      	b.n	80149f0 <__ieee754_rem_pio2+0x1c0>
 80149d2:	463b      	mov	r3, r7
 80149d4:	4632      	mov	r2, r6
 80149d6:	4650      	mov	r0, sl
 80149d8:	4659      	mov	r1, fp
 80149da:	f7eb fc7d 	bl	80002d8 <__aeabi_dsub>
 80149de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80149e2:	9305      	str	r3, [sp, #20]
 80149e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80149e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80149ec:	2b10      	cmp	r3, #16
 80149ee:	dc02      	bgt.n	80149f6 <__ieee754_rem_pio2+0x1c6>
 80149f0:	e9c4 0100 	strd	r0, r1, [r4]
 80149f4:	e039      	b.n	8014a6a <__ieee754_rem_pio2+0x23a>
 80149f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8014b28 <__ieee754_rem_pio2+0x2f8>)
 80149f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a00:	f7eb fe22 	bl	8000648 <__aeabi_dmul>
 8014a04:	4606      	mov	r6, r0
 8014a06:	460f      	mov	r7, r1
 8014a08:	4602      	mov	r2, r0
 8014a0a:	460b      	mov	r3, r1
 8014a0c:	4650      	mov	r0, sl
 8014a0e:	4659      	mov	r1, fp
 8014a10:	f7eb fc62 	bl	80002d8 <__aeabi_dsub>
 8014a14:	4602      	mov	r2, r0
 8014a16:	460b      	mov	r3, r1
 8014a18:	4680      	mov	r8, r0
 8014a1a:	4689      	mov	r9, r1
 8014a1c:	4650      	mov	r0, sl
 8014a1e:	4659      	mov	r1, fp
 8014a20:	f7eb fc5a 	bl	80002d8 <__aeabi_dsub>
 8014a24:	4632      	mov	r2, r6
 8014a26:	463b      	mov	r3, r7
 8014a28:	f7eb fc56 	bl	80002d8 <__aeabi_dsub>
 8014a2c:	a340      	add	r3, pc, #256	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	4606      	mov	r6, r0
 8014a34:	460f      	mov	r7, r1
 8014a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a3a:	f7eb fe05 	bl	8000648 <__aeabi_dmul>
 8014a3e:	4632      	mov	r2, r6
 8014a40:	463b      	mov	r3, r7
 8014a42:	f7eb fc49 	bl	80002d8 <__aeabi_dsub>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	460f      	mov	r7, r1
 8014a4e:	4640      	mov	r0, r8
 8014a50:	4649      	mov	r1, r9
 8014a52:	f7eb fc41 	bl	80002d8 <__aeabi_dsub>
 8014a56:	9a05      	ldr	r2, [sp, #20]
 8014a58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	2b31      	cmp	r3, #49	@ 0x31
 8014a60:	dc20      	bgt.n	8014aa4 <__ieee754_rem_pio2+0x274>
 8014a62:	e9c4 0100 	strd	r0, r1, [r4]
 8014a66:	46c2      	mov	sl, r8
 8014a68:	46cb      	mov	fp, r9
 8014a6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014a6e:	4650      	mov	r0, sl
 8014a70:	4642      	mov	r2, r8
 8014a72:	464b      	mov	r3, r9
 8014a74:	4659      	mov	r1, fp
 8014a76:	f7eb fc2f 	bl	80002d8 <__aeabi_dsub>
 8014a7a:	463b      	mov	r3, r7
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	f7eb fc2b 	bl	80002d8 <__aeabi_dsub>
 8014a82:	9b04      	ldr	r3, [sp, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a8a:	f6bf af0e 	bge.w	80148aa <__ieee754_rem_pio2+0x7a>
 8014a8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8014a92:	6063      	str	r3, [r4, #4]
 8014a94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014a98:	f8c4 8000 	str.w	r8, [r4]
 8014a9c:	60a0      	str	r0, [r4, #8]
 8014a9e:	60e3      	str	r3, [r4, #12]
 8014aa0:	426d      	negs	r5, r5
 8014aa2:	e702      	b.n	80148aa <__ieee754_rem_pio2+0x7a>
 8014aa4:	a326      	add	r3, pc, #152	@ (adr r3, 8014b40 <__ieee754_rem_pio2+0x310>)
 8014aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aae:	f7eb fdcb 	bl	8000648 <__aeabi_dmul>
 8014ab2:	4606      	mov	r6, r0
 8014ab4:	460f      	mov	r7, r1
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	460b      	mov	r3, r1
 8014aba:	4640      	mov	r0, r8
 8014abc:	4649      	mov	r1, r9
 8014abe:	f7eb fc0b 	bl	80002d8 <__aeabi_dsub>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	460b      	mov	r3, r1
 8014ac6:	4682      	mov	sl, r0
 8014ac8:	468b      	mov	fp, r1
 8014aca:	4640      	mov	r0, r8
 8014acc:	4649      	mov	r1, r9
 8014ace:	f7eb fc03 	bl	80002d8 <__aeabi_dsub>
 8014ad2:	4632      	mov	r2, r6
 8014ad4:	463b      	mov	r3, r7
 8014ad6:	f7eb fbff 	bl	80002d8 <__aeabi_dsub>
 8014ada:	a31b      	add	r3, pc, #108	@ (adr r3, 8014b48 <__ieee754_rem_pio2+0x318>)
 8014adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	460f      	mov	r7, r1
 8014ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ae8:	f7eb fdae 	bl	8000648 <__aeabi_dmul>
 8014aec:	4632      	mov	r2, r6
 8014aee:	463b      	mov	r3, r7
 8014af0:	f7eb fbf2 	bl	80002d8 <__aeabi_dsub>
 8014af4:	4606      	mov	r6, r0
 8014af6:	460f      	mov	r7, r1
 8014af8:	e764      	b.n	80149c4 <__ieee754_rem_pio2+0x194>
 8014afa:	4b1b      	ldr	r3, [pc, #108]	@ (8014b68 <__ieee754_rem_pio2+0x338>)
 8014afc:	4598      	cmp	r8, r3
 8014afe:	d935      	bls.n	8014b6c <__ieee754_rem_pio2+0x33c>
 8014b00:	4632      	mov	r2, r6
 8014b02:	463b      	mov	r3, r7
 8014b04:	4630      	mov	r0, r6
 8014b06:	4639      	mov	r1, r7
 8014b08:	f7eb fbe6 	bl	80002d8 <__aeabi_dsub>
 8014b0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b10:	e9c4 0100 	strd	r0, r1, [r4]
 8014b14:	e69e      	b.n	8014854 <__ieee754_rem_pio2+0x24>
 8014b16:	bf00      	nop
 8014b18:	54400000 	.word	0x54400000
 8014b1c:	3ff921fb 	.word	0x3ff921fb
 8014b20:	1a626331 	.word	0x1a626331
 8014b24:	3dd0b461 	.word	0x3dd0b461
 8014b28:	1a600000 	.word	0x1a600000
 8014b2c:	3dd0b461 	.word	0x3dd0b461
 8014b30:	2e037073 	.word	0x2e037073
 8014b34:	3ba3198a 	.word	0x3ba3198a
 8014b38:	6dc9c883 	.word	0x6dc9c883
 8014b3c:	3fe45f30 	.word	0x3fe45f30
 8014b40:	2e000000 	.word	0x2e000000
 8014b44:	3ba3198a 	.word	0x3ba3198a
 8014b48:	252049c1 	.word	0x252049c1
 8014b4c:	397b839a 	.word	0x397b839a
 8014b50:	3fe921fb 	.word	0x3fe921fb
 8014b54:	4002d97b 	.word	0x4002d97b
 8014b58:	3ff921fb 	.word	0x3ff921fb
 8014b5c:	413921fb 	.word	0x413921fb
 8014b60:	3fe00000 	.word	0x3fe00000
 8014b64:	080159d8 	.word	0x080159d8
 8014b68:	7fefffff 	.word	0x7fefffff
 8014b6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014b70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8014b74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014b78:	4630      	mov	r0, r6
 8014b7a:	460f      	mov	r7, r1
 8014b7c:	f7ec f814 	bl	8000ba8 <__aeabi_d2iz>
 8014b80:	f7eb fcf8 	bl	8000574 <__aeabi_i2d>
 8014b84:	4602      	mov	r2, r0
 8014b86:	460b      	mov	r3, r1
 8014b88:	4630      	mov	r0, r6
 8014b8a:	4639      	mov	r1, r7
 8014b8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b90:	f7eb fba2 	bl	80002d8 <__aeabi_dsub>
 8014b94:	4b22      	ldr	r3, [pc, #136]	@ (8014c20 <__ieee754_rem_pio2+0x3f0>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	f7eb fd56 	bl	8000648 <__aeabi_dmul>
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	f7ec f802 	bl	8000ba8 <__aeabi_d2iz>
 8014ba4:	f7eb fce6 	bl	8000574 <__aeabi_i2d>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4630      	mov	r0, r6
 8014bae:	4639      	mov	r1, r7
 8014bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bb4:	f7eb fb90 	bl	80002d8 <__aeabi_dsub>
 8014bb8:	4b19      	ldr	r3, [pc, #100]	@ (8014c20 <__ieee754_rem_pio2+0x3f0>)
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f7eb fd44 	bl	8000648 <__aeabi_dmul>
 8014bc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014bc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014bc8:	f04f 0803 	mov.w	r8, #3
 8014bcc:	2600      	movs	r6, #0
 8014bce:	2700      	movs	r7, #0
 8014bd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014bd4:	4632      	mov	r2, r6
 8014bd6:	463b      	mov	r3, r7
 8014bd8:	46c2      	mov	sl, r8
 8014bda:	f108 38ff 	add.w	r8, r8, #4294967295
 8014bde:	f7eb ff9b 	bl	8000b18 <__aeabi_dcmpeq>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d1f4      	bne.n	8014bd0 <__ieee754_rem_pio2+0x3a0>
 8014be6:	4b0f      	ldr	r3, [pc, #60]	@ (8014c24 <__ieee754_rem_pio2+0x3f4>)
 8014be8:	9301      	str	r3, [sp, #4]
 8014bea:	2302      	movs	r3, #2
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	462a      	mov	r2, r5
 8014bf0:	4653      	mov	r3, sl
 8014bf2:	4621      	mov	r1, r4
 8014bf4:	a806      	add	r0, sp, #24
 8014bf6:	f000 f81f 	bl	8014c38 <__kernel_rem_pio2>
 8014bfa:	9b04      	ldr	r3, [sp, #16]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	4605      	mov	r5, r0
 8014c00:	f6bf ae53 	bge.w	80148aa <__ieee754_rem_pio2+0x7a>
 8014c04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014c08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c0c:	e9c4 2300 	strd	r2, r3, [r4]
 8014c10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8014c1c:	e740      	b.n	8014aa0 <__ieee754_rem_pio2+0x270>
 8014c1e:	bf00      	nop
 8014c20:	41700000 	.word	0x41700000
 8014c24:	08015a58 	.word	0x08015a58

08014c28 <fabs>:
 8014c28:	ec51 0b10 	vmov	r0, r1, d0
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014c32:	ec43 2b10 	vmov	d0, r2, r3
 8014c36:	4770      	bx	lr

08014c38 <__kernel_rem_pio2>:
 8014c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	ed2d 8b02 	vpush	{d8}
 8014c40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014c44:	f112 0f14 	cmn.w	r2, #20
 8014c48:	9306      	str	r3, [sp, #24]
 8014c4a:	9104      	str	r1, [sp, #16]
 8014c4c:	4bbe      	ldr	r3, [pc, #760]	@ (8014f48 <__kernel_rem_pio2+0x310>)
 8014c4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014c50:	9008      	str	r0, [sp, #32]
 8014c52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	9b06      	ldr	r3, [sp, #24]
 8014c5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014c5e:	bfa8      	it	ge
 8014c60:	1ed4      	subge	r4, r2, #3
 8014c62:	9305      	str	r3, [sp, #20]
 8014c64:	bfb2      	itee	lt
 8014c66:	2400      	movlt	r4, #0
 8014c68:	2318      	movge	r3, #24
 8014c6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8014c6e:	f06f 0317 	mvn.w	r3, #23
 8014c72:	fb04 3303 	mla	r3, r4, r3, r3
 8014c76:	eb03 0b02 	add.w	fp, r3, r2
 8014c7a:	9b00      	ldr	r3, [sp, #0]
 8014c7c:	9a05      	ldr	r2, [sp, #20]
 8014c7e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8014f38 <__kernel_rem_pio2+0x300>
 8014c82:	eb03 0802 	add.w	r8, r3, r2
 8014c86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014c88:	1aa7      	subs	r7, r4, r2
 8014c8a:	ae20      	add	r6, sp, #128	@ 0x80
 8014c8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014c90:	2500      	movs	r5, #0
 8014c92:	4545      	cmp	r5, r8
 8014c94:	dd13      	ble.n	8014cbe <__kernel_rem_pio2+0x86>
 8014c96:	9b06      	ldr	r3, [sp, #24]
 8014c98:	aa20      	add	r2, sp, #128	@ 0x80
 8014c9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014c9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014ca2:	f04f 0800 	mov.w	r8, #0
 8014ca6:	9b00      	ldr	r3, [sp, #0]
 8014ca8:	4598      	cmp	r8, r3
 8014caa:	dc31      	bgt.n	8014d10 <__kernel_rem_pio2+0xd8>
 8014cac:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8014f38 <__kernel_rem_pio2+0x300>
 8014cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014cb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014cb8:	462f      	mov	r7, r5
 8014cba:	2600      	movs	r6, #0
 8014cbc:	e01b      	b.n	8014cf6 <__kernel_rem_pio2+0xbe>
 8014cbe:	42ef      	cmn	r7, r5
 8014cc0:	d407      	bmi.n	8014cd2 <__kernel_rem_pio2+0x9a>
 8014cc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014cc6:	f7eb fc55 	bl	8000574 <__aeabi_i2d>
 8014cca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014cce:	3501      	adds	r5, #1
 8014cd0:	e7df      	b.n	8014c92 <__kernel_rem_pio2+0x5a>
 8014cd2:	ec51 0b18 	vmov	r0, r1, d8
 8014cd6:	e7f8      	b.n	8014cca <__kernel_rem_pio2+0x92>
 8014cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014cdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014ce0:	f7eb fcb2 	bl	8000648 <__aeabi_dmul>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cec:	f7eb faf6 	bl	80002dc <__adddf3>
 8014cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cf4:	3601      	adds	r6, #1
 8014cf6:	9b05      	ldr	r3, [sp, #20]
 8014cf8:	429e      	cmp	r6, r3
 8014cfa:	f1a7 0708 	sub.w	r7, r7, #8
 8014cfe:	ddeb      	ble.n	8014cd8 <__kernel_rem_pio2+0xa0>
 8014d00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d04:	f108 0801 	add.w	r8, r8, #1
 8014d08:	ecaa 7b02 	vstmia	sl!, {d7}
 8014d0c:	3508      	adds	r5, #8
 8014d0e:	e7ca      	b.n	8014ca6 <__kernel_rem_pio2+0x6e>
 8014d10:	9b00      	ldr	r3, [sp, #0]
 8014d12:	f8dd 8000 	ldr.w	r8, [sp]
 8014d16:	aa0c      	add	r2, sp, #48	@ 0x30
 8014d18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014d20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d26:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014d2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d2c:	ab98      	add	r3, sp, #608	@ 0x260
 8014d2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014d32:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014d36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d3a:	ac0c      	add	r4, sp, #48	@ 0x30
 8014d3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014d3e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014d42:	46a1      	mov	r9, r4
 8014d44:	46c2      	mov	sl, r8
 8014d46:	f1ba 0f00 	cmp.w	sl, #0
 8014d4a:	f1a5 0508 	sub.w	r5, r5, #8
 8014d4e:	dc77      	bgt.n	8014e40 <__kernel_rem_pio2+0x208>
 8014d50:	4658      	mov	r0, fp
 8014d52:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014d56:	f000 fac7 	bl	80152e8 <scalbn>
 8014d5a:	ec57 6b10 	vmov	r6, r7, d0
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014d64:	4630      	mov	r0, r6
 8014d66:	4639      	mov	r1, r7
 8014d68:	f7eb fc6e 	bl	8000648 <__aeabi_dmul>
 8014d6c:	ec41 0b10 	vmov	d0, r0, r1
 8014d70:	f000 fb3a 	bl	80153e8 <floor>
 8014d74:	4b75      	ldr	r3, [pc, #468]	@ (8014f4c <__kernel_rem_pio2+0x314>)
 8014d76:	ec51 0b10 	vmov	r0, r1, d0
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	f7eb fc64 	bl	8000648 <__aeabi_dmul>
 8014d80:	4602      	mov	r2, r0
 8014d82:	460b      	mov	r3, r1
 8014d84:	4630      	mov	r0, r6
 8014d86:	4639      	mov	r1, r7
 8014d88:	f7eb faa6 	bl	80002d8 <__aeabi_dsub>
 8014d8c:	460f      	mov	r7, r1
 8014d8e:	4606      	mov	r6, r0
 8014d90:	f7eb ff0a 	bl	8000ba8 <__aeabi_d2iz>
 8014d94:	9002      	str	r0, [sp, #8]
 8014d96:	f7eb fbed 	bl	8000574 <__aeabi_i2d>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	460b      	mov	r3, r1
 8014d9e:	4630      	mov	r0, r6
 8014da0:	4639      	mov	r1, r7
 8014da2:	f7eb fa99 	bl	80002d8 <__aeabi_dsub>
 8014da6:	f1bb 0f00 	cmp.w	fp, #0
 8014daa:	4606      	mov	r6, r0
 8014dac:	460f      	mov	r7, r1
 8014dae:	dd6c      	ble.n	8014e8a <__kernel_rem_pio2+0x252>
 8014db0:	f108 31ff 	add.w	r1, r8, #4294967295
 8014db4:	ab0c      	add	r3, sp, #48	@ 0x30
 8014db6:	9d02      	ldr	r5, [sp, #8]
 8014db8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014dbc:	f1cb 0018 	rsb	r0, fp, #24
 8014dc0:	fa43 f200 	asr.w	r2, r3, r0
 8014dc4:	4415      	add	r5, r2
 8014dc6:	4082      	lsls	r2, r0
 8014dc8:	1a9b      	subs	r3, r3, r2
 8014dca:	aa0c      	add	r2, sp, #48	@ 0x30
 8014dcc:	9502      	str	r5, [sp, #8]
 8014dce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014dd2:	f1cb 0217 	rsb	r2, fp, #23
 8014dd6:	fa43 f902 	asr.w	r9, r3, r2
 8014dda:	f1b9 0f00 	cmp.w	r9, #0
 8014dde:	dd64      	ble.n	8014eaa <__kernel_rem_pio2+0x272>
 8014de0:	9b02      	ldr	r3, [sp, #8]
 8014de2:	2200      	movs	r2, #0
 8014de4:	3301      	adds	r3, #1
 8014de6:	9302      	str	r3, [sp, #8]
 8014de8:	4615      	mov	r5, r2
 8014dea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014dee:	4590      	cmp	r8, r2
 8014df0:	f300 80b8 	bgt.w	8014f64 <__kernel_rem_pio2+0x32c>
 8014df4:	f1bb 0f00 	cmp.w	fp, #0
 8014df8:	dd07      	ble.n	8014e0a <__kernel_rem_pio2+0x1d2>
 8014dfa:	f1bb 0f01 	cmp.w	fp, #1
 8014dfe:	f000 80bf 	beq.w	8014f80 <__kernel_rem_pio2+0x348>
 8014e02:	f1bb 0f02 	cmp.w	fp, #2
 8014e06:	f000 80c6 	beq.w	8014f96 <__kernel_rem_pio2+0x35e>
 8014e0a:	f1b9 0f02 	cmp.w	r9, #2
 8014e0e:	d14c      	bne.n	8014eaa <__kernel_rem_pio2+0x272>
 8014e10:	4632      	mov	r2, r6
 8014e12:	463b      	mov	r3, r7
 8014e14:	494e      	ldr	r1, [pc, #312]	@ (8014f50 <__kernel_rem_pio2+0x318>)
 8014e16:	2000      	movs	r0, #0
 8014e18:	f7eb fa5e 	bl	80002d8 <__aeabi_dsub>
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	460f      	mov	r7, r1
 8014e20:	2d00      	cmp	r5, #0
 8014e22:	d042      	beq.n	8014eaa <__kernel_rem_pio2+0x272>
 8014e24:	4658      	mov	r0, fp
 8014e26:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8014f40 <__kernel_rem_pio2+0x308>
 8014e2a:	f000 fa5d 	bl	80152e8 <scalbn>
 8014e2e:	4630      	mov	r0, r6
 8014e30:	4639      	mov	r1, r7
 8014e32:	ec53 2b10 	vmov	r2, r3, d0
 8014e36:	f7eb fa4f 	bl	80002d8 <__aeabi_dsub>
 8014e3a:	4606      	mov	r6, r0
 8014e3c:	460f      	mov	r7, r1
 8014e3e:	e034      	b.n	8014eaa <__kernel_rem_pio2+0x272>
 8014e40:	4b44      	ldr	r3, [pc, #272]	@ (8014f54 <__kernel_rem_pio2+0x31c>)
 8014e42:	2200      	movs	r2, #0
 8014e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e48:	f7eb fbfe 	bl	8000648 <__aeabi_dmul>
 8014e4c:	f7eb feac 	bl	8000ba8 <__aeabi_d2iz>
 8014e50:	f7eb fb90 	bl	8000574 <__aeabi_i2d>
 8014e54:	4b40      	ldr	r3, [pc, #256]	@ (8014f58 <__kernel_rem_pio2+0x320>)
 8014e56:	2200      	movs	r2, #0
 8014e58:	4606      	mov	r6, r0
 8014e5a:	460f      	mov	r7, r1
 8014e5c:	f7eb fbf4 	bl	8000648 <__aeabi_dmul>
 8014e60:	4602      	mov	r2, r0
 8014e62:	460b      	mov	r3, r1
 8014e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e68:	f7eb fa36 	bl	80002d8 <__aeabi_dsub>
 8014e6c:	f7eb fe9c 	bl	8000ba8 <__aeabi_d2iz>
 8014e70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014e74:	f849 0b04 	str.w	r0, [r9], #4
 8014e78:	4639      	mov	r1, r7
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	f7eb fa2e 	bl	80002dc <__adddf3>
 8014e80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e88:	e75d      	b.n	8014d46 <__kernel_rem_pio2+0x10e>
 8014e8a:	d107      	bne.n	8014e9c <__kernel_rem_pio2+0x264>
 8014e8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014e90:	aa0c      	add	r2, sp, #48	@ 0x30
 8014e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e96:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014e9a:	e79e      	b.n	8014dda <__kernel_rem_pio2+0x1a2>
 8014e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8014f5c <__kernel_rem_pio2+0x324>)
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f7eb fe58 	bl	8000b54 <__aeabi_dcmpge>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d143      	bne.n	8014f30 <__kernel_rem_pio2+0x2f8>
 8014ea8:	4681      	mov	r9, r0
 8014eaa:	2200      	movs	r2, #0
 8014eac:	2300      	movs	r3, #0
 8014eae:	4630      	mov	r0, r6
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	f7eb fe31 	bl	8000b18 <__aeabi_dcmpeq>
 8014eb6:	2800      	cmp	r0, #0
 8014eb8:	f000 80bf 	beq.w	801503a <__kernel_rem_pio2+0x402>
 8014ebc:	f108 33ff 	add.w	r3, r8, #4294967295
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	9900      	ldr	r1, [sp, #0]
 8014ec4:	428b      	cmp	r3, r1
 8014ec6:	da6e      	bge.n	8014fa6 <__kernel_rem_pio2+0x36e>
 8014ec8:	2a00      	cmp	r2, #0
 8014eca:	f000 8089 	beq.w	8014fe0 <__kernel_rem_pio2+0x3a8>
 8014ece:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ed2:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ed4:	f1ab 0b18 	sub.w	fp, fp, #24
 8014ed8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d0f6      	beq.n	8014ece <__kernel_rem_pio2+0x296>
 8014ee0:	4658      	mov	r0, fp
 8014ee2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8014f40 <__kernel_rem_pio2+0x308>
 8014ee6:	f000 f9ff 	bl	80152e8 <scalbn>
 8014eea:	f108 0301 	add.w	r3, r8, #1
 8014eee:	00da      	lsls	r2, r3, #3
 8014ef0:	9205      	str	r2, [sp, #20]
 8014ef2:	ec55 4b10 	vmov	r4, r5, d0
 8014ef6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014ef8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8014f54 <__kernel_rem_pio2+0x31c>
 8014efc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014f00:	4646      	mov	r6, r8
 8014f02:	f04f 0a00 	mov.w	sl, #0
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	f280 80cf 	bge.w	80150aa <__kernel_rem_pio2+0x472>
 8014f0c:	4644      	mov	r4, r8
 8014f0e:	2c00      	cmp	r4, #0
 8014f10:	f2c0 80fd 	blt.w	801510e <__kernel_rem_pio2+0x4d6>
 8014f14:	4b12      	ldr	r3, [pc, #72]	@ (8014f60 <__kernel_rem_pio2+0x328>)
 8014f16:	461f      	mov	r7, r3
 8014f18:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014f1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014f1e:	9306      	str	r3, [sp, #24]
 8014f20:	f04f 0a00 	mov.w	sl, #0
 8014f24:	f04f 0b00 	mov.w	fp, #0
 8014f28:	2600      	movs	r6, #0
 8014f2a:	eba8 0504 	sub.w	r5, r8, r4
 8014f2e:	e0e2      	b.n	80150f6 <__kernel_rem_pio2+0x4be>
 8014f30:	f04f 0902 	mov.w	r9, #2
 8014f34:	e754      	b.n	8014de0 <__kernel_rem_pio2+0x1a8>
 8014f36:	bf00      	nop
	...
 8014f44:	3ff00000 	.word	0x3ff00000
 8014f48:	08015ba0 	.word	0x08015ba0
 8014f4c:	40200000 	.word	0x40200000
 8014f50:	3ff00000 	.word	0x3ff00000
 8014f54:	3e700000 	.word	0x3e700000
 8014f58:	41700000 	.word	0x41700000
 8014f5c:	3fe00000 	.word	0x3fe00000
 8014f60:	08015b60 	.word	0x08015b60
 8014f64:	f854 3b04 	ldr.w	r3, [r4], #4
 8014f68:	b945      	cbnz	r5, 8014f7c <__kernel_rem_pio2+0x344>
 8014f6a:	b123      	cbz	r3, 8014f76 <__kernel_rem_pio2+0x33e>
 8014f6c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014f70:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f74:	2301      	movs	r3, #1
 8014f76:	3201      	adds	r2, #1
 8014f78:	461d      	mov	r5, r3
 8014f7a:	e738      	b.n	8014dee <__kernel_rem_pio2+0x1b6>
 8014f7c:	1acb      	subs	r3, r1, r3
 8014f7e:	e7f7      	b.n	8014f70 <__kernel_rem_pio2+0x338>
 8014f80:	f108 32ff 	add.w	r2, r8, #4294967295
 8014f84:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014f8e:	a90c      	add	r1, sp, #48	@ 0x30
 8014f90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014f94:	e739      	b.n	8014e0a <__kernel_rem_pio2+0x1d2>
 8014f96:	f108 32ff 	add.w	r2, r8, #4294967295
 8014f9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fa0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014fa4:	e7f3      	b.n	8014f8e <__kernel_rem_pio2+0x356>
 8014fa6:	a90c      	add	r1, sp, #48	@ 0x30
 8014fa8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014fac:	3b01      	subs	r3, #1
 8014fae:	430a      	orrs	r2, r1
 8014fb0:	e787      	b.n	8014ec2 <__kernel_rem_pio2+0x28a>
 8014fb2:	3401      	adds	r4, #1
 8014fb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014fb8:	2a00      	cmp	r2, #0
 8014fba:	d0fa      	beq.n	8014fb2 <__kernel_rem_pio2+0x37a>
 8014fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014fbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014fc2:	eb0d 0503 	add.w	r5, sp, r3
 8014fc6:	9b06      	ldr	r3, [sp, #24]
 8014fc8:	aa20      	add	r2, sp, #128	@ 0x80
 8014fca:	4443      	add	r3, r8
 8014fcc:	f108 0701 	add.w	r7, r8, #1
 8014fd0:	3d98      	subs	r5, #152	@ 0x98
 8014fd2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014fd6:	4444      	add	r4, r8
 8014fd8:	42bc      	cmp	r4, r7
 8014fda:	da04      	bge.n	8014fe6 <__kernel_rem_pio2+0x3ae>
 8014fdc:	46a0      	mov	r8, r4
 8014fde:	e6a2      	b.n	8014d26 <__kernel_rem_pio2+0xee>
 8014fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014fe2:	2401      	movs	r4, #1
 8014fe4:	e7e6      	b.n	8014fb4 <__kernel_rem_pio2+0x37c>
 8014fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fe8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014fec:	f7eb fac2 	bl	8000574 <__aeabi_i2d>
 8014ff0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80152b8 <__kernel_rem_pio2+0x680>
 8014ff4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014ff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ffc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015000:	46b2      	mov	sl, r6
 8015002:	f04f 0800 	mov.w	r8, #0
 8015006:	9b05      	ldr	r3, [sp, #20]
 8015008:	4598      	cmp	r8, r3
 801500a:	dd05      	ble.n	8015018 <__kernel_rem_pio2+0x3e0>
 801500c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015010:	3701      	adds	r7, #1
 8015012:	eca5 7b02 	vstmia	r5!, {d7}
 8015016:	e7df      	b.n	8014fd8 <__kernel_rem_pio2+0x3a0>
 8015018:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801501c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015020:	f7eb fb12 	bl	8000648 <__aeabi_dmul>
 8015024:	4602      	mov	r2, r0
 8015026:	460b      	mov	r3, r1
 8015028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801502c:	f7eb f956 	bl	80002dc <__adddf3>
 8015030:	f108 0801 	add.w	r8, r8, #1
 8015034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015038:	e7e5      	b.n	8015006 <__kernel_rem_pio2+0x3ce>
 801503a:	f1cb 0000 	rsb	r0, fp, #0
 801503e:	ec47 6b10 	vmov	d0, r6, r7
 8015042:	f000 f951 	bl	80152e8 <scalbn>
 8015046:	ec55 4b10 	vmov	r4, r5, d0
 801504a:	4b9d      	ldr	r3, [pc, #628]	@ (80152c0 <__kernel_rem_pio2+0x688>)
 801504c:	2200      	movs	r2, #0
 801504e:	4620      	mov	r0, r4
 8015050:	4629      	mov	r1, r5
 8015052:	f7eb fd7f 	bl	8000b54 <__aeabi_dcmpge>
 8015056:	b300      	cbz	r0, 801509a <__kernel_rem_pio2+0x462>
 8015058:	4b9a      	ldr	r3, [pc, #616]	@ (80152c4 <__kernel_rem_pio2+0x68c>)
 801505a:	2200      	movs	r2, #0
 801505c:	4620      	mov	r0, r4
 801505e:	4629      	mov	r1, r5
 8015060:	f7eb faf2 	bl	8000648 <__aeabi_dmul>
 8015064:	f7eb fda0 	bl	8000ba8 <__aeabi_d2iz>
 8015068:	4606      	mov	r6, r0
 801506a:	f7eb fa83 	bl	8000574 <__aeabi_i2d>
 801506e:	4b94      	ldr	r3, [pc, #592]	@ (80152c0 <__kernel_rem_pio2+0x688>)
 8015070:	2200      	movs	r2, #0
 8015072:	f7eb fae9 	bl	8000648 <__aeabi_dmul>
 8015076:	460b      	mov	r3, r1
 8015078:	4602      	mov	r2, r0
 801507a:	4629      	mov	r1, r5
 801507c:	4620      	mov	r0, r4
 801507e:	f7eb f92b 	bl	80002d8 <__aeabi_dsub>
 8015082:	f7eb fd91 	bl	8000ba8 <__aeabi_d2iz>
 8015086:	ab0c      	add	r3, sp, #48	@ 0x30
 8015088:	f10b 0b18 	add.w	fp, fp, #24
 801508c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015090:	f108 0801 	add.w	r8, r8, #1
 8015094:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015098:	e722      	b.n	8014ee0 <__kernel_rem_pio2+0x2a8>
 801509a:	4620      	mov	r0, r4
 801509c:	4629      	mov	r1, r5
 801509e:	f7eb fd83 	bl	8000ba8 <__aeabi_d2iz>
 80150a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80150a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80150a8:	e71a      	b.n	8014ee0 <__kernel_rem_pio2+0x2a8>
 80150aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80150ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80150b0:	f7eb fa60 	bl	8000574 <__aeabi_i2d>
 80150b4:	4622      	mov	r2, r4
 80150b6:	462b      	mov	r3, r5
 80150b8:	f7eb fac6 	bl	8000648 <__aeabi_dmul>
 80150bc:	4652      	mov	r2, sl
 80150be:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80150c2:	465b      	mov	r3, fp
 80150c4:	4620      	mov	r0, r4
 80150c6:	4629      	mov	r1, r5
 80150c8:	f7eb fabe 	bl	8000648 <__aeabi_dmul>
 80150cc:	3e01      	subs	r6, #1
 80150ce:	4604      	mov	r4, r0
 80150d0:	460d      	mov	r5, r1
 80150d2:	e718      	b.n	8014f06 <__kernel_rem_pio2+0x2ce>
 80150d4:	9906      	ldr	r1, [sp, #24]
 80150d6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80150da:	9106      	str	r1, [sp, #24]
 80150dc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80150e0:	f7eb fab2 	bl	8000648 <__aeabi_dmul>
 80150e4:	4602      	mov	r2, r0
 80150e6:	460b      	mov	r3, r1
 80150e8:	4650      	mov	r0, sl
 80150ea:	4659      	mov	r1, fp
 80150ec:	f7eb f8f6 	bl	80002dc <__adddf3>
 80150f0:	3601      	adds	r6, #1
 80150f2:	4682      	mov	sl, r0
 80150f4:	468b      	mov	fp, r1
 80150f6:	9b00      	ldr	r3, [sp, #0]
 80150f8:	429e      	cmp	r6, r3
 80150fa:	dc01      	bgt.n	8015100 <__kernel_rem_pio2+0x4c8>
 80150fc:	42b5      	cmp	r5, r6
 80150fe:	dae9      	bge.n	80150d4 <__kernel_rem_pio2+0x49c>
 8015100:	ab48      	add	r3, sp, #288	@ 0x120
 8015102:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015106:	e9c5 ab00 	strd	sl, fp, [r5]
 801510a:	3c01      	subs	r4, #1
 801510c:	e6ff      	b.n	8014f0e <__kernel_rem_pio2+0x2d6>
 801510e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015110:	2b02      	cmp	r3, #2
 8015112:	dc0b      	bgt.n	801512c <__kernel_rem_pio2+0x4f4>
 8015114:	2b00      	cmp	r3, #0
 8015116:	dc39      	bgt.n	801518c <__kernel_rem_pio2+0x554>
 8015118:	d05d      	beq.n	80151d6 <__kernel_rem_pio2+0x59e>
 801511a:	9b02      	ldr	r3, [sp, #8]
 801511c:	f003 0007 	and.w	r0, r3, #7
 8015120:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8015124:	ecbd 8b02 	vpop	{d8}
 8015128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801512c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801512e:	2b03      	cmp	r3, #3
 8015130:	d1f3      	bne.n	801511a <__kernel_rem_pio2+0x4e2>
 8015132:	9b05      	ldr	r3, [sp, #20]
 8015134:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015138:	eb0d 0403 	add.w	r4, sp, r3
 801513c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8015140:	4625      	mov	r5, r4
 8015142:	46c2      	mov	sl, r8
 8015144:	f1ba 0f00 	cmp.w	sl, #0
 8015148:	f1a5 0508 	sub.w	r5, r5, #8
 801514c:	dc6b      	bgt.n	8015226 <__kernel_rem_pio2+0x5ee>
 801514e:	4645      	mov	r5, r8
 8015150:	2d01      	cmp	r5, #1
 8015152:	f1a4 0408 	sub.w	r4, r4, #8
 8015156:	f300 8087 	bgt.w	8015268 <__kernel_rem_pio2+0x630>
 801515a:	9c05      	ldr	r4, [sp, #20]
 801515c:	ab48      	add	r3, sp, #288	@ 0x120
 801515e:	441c      	add	r4, r3
 8015160:	2000      	movs	r0, #0
 8015162:	2100      	movs	r1, #0
 8015164:	f1b8 0f01 	cmp.w	r8, #1
 8015168:	f300 809c 	bgt.w	80152a4 <__kernel_rem_pio2+0x66c>
 801516c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015170:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8015174:	f1b9 0f00 	cmp.w	r9, #0
 8015178:	f040 80a6 	bne.w	80152c8 <__kernel_rem_pio2+0x690>
 801517c:	9b04      	ldr	r3, [sp, #16]
 801517e:	e9c3 7800 	strd	r7, r8, [r3]
 8015182:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015186:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801518a:	e7c6      	b.n	801511a <__kernel_rem_pio2+0x4e2>
 801518c:	9d05      	ldr	r5, [sp, #20]
 801518e:	ab48      	add	r3, sp, #288	@ 0x120
 8015190:	441d      	add	r5, r3
 8015192:	4644      	mov	r4, r8
 8015194:	2000      	movs	r0, #0
 8015196:	2100      	movs	r1, #0
 8015198:	2c00      	cmp	r4, #0
 801519a:	da35      	bge.n	8015208 <__kernel_rem_pio2+0x5d0>
 801519c:	f1b9 0f00 	cmp.w	r9, #0
 80151a0:	d038      	beq.n	8015214 <__kernel_rem_pio2+0x5dc>
 80151a2:	4602      	mov	r2, r0
 80151a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80151a8:	9c04      	ldr	r4, [sp, #16]
 80151aa:	e9c4 2300 	strd	r2, r3, [r4]
 80151ae:	4602      	mov	r2, r0
 80151b0:	460b      	mov	r3, r1
 80151b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80151b6:	f7eb f88f 	bl	80002d8 <__aeabi_dsub>
 80151ba:	ad4a      	add	r5, sp, #296	@ 0x128
 80151bc:	2401      	movs	r4, #1
 80151be:	45a0      	cmp	r8, r4
 80151c0:	da2b      	bge.n	801521a <__kernel_rem_pio2+0x5e2>
 80151c2:	f1b9 0f00 	cmp.w	r9, #0
 80151c6:	d002      	beq.n	80151ce <__kernel_rem_pio2+0x596>
 80151c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80151cc:	4619      	mov	r1, r3
 80151ce:	9b04      	ldr	r3, [sp, #16]
 80151d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80151d4:	e7a1      	b.n	801511a <__kernel_rem_pio2+0x4e2>
 80151d6:	9c05      	ldr	r4, [sp, #20]
 80151d8:	ab48      	add	r3, sp, #288	@ 0x120
 80151da:	441c      	add	r4, r3
 80151dc:	2000      	movs	r0, #0
 80151de:	2100      	movs	r1, #0
 80151e0:	f1b8 0f00 	cmp.w	r8, #0
 80151e4:	da09      	bge.n	80151fa <__kernel_rem_pio2+0x5c2>
 80151e6:	f1b9 0f00 	cmp.w	r9, #0
 80151ea:	d002      	beq.n	80151f2 <__kernel_rem_pio2+0x5ba>
 80151ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80151f0:	4619      	mov	r1, r3
 80151f2:	9b04      	ldr	r3, [sp, #16]
 80151f4:	e9c3 0100 	strd	r0, r1, [r3]
 80151f8:	e78f      	b.n	801511a <__kernel_rem_pio2+0x4e2>
 80151fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80151fe:	f7eb f86d 	bl	80002dc <__adddf3>
 8015202:	f108 38ff 	add.w	r8, r8, #4294967295
 8015206:	e7eb      	b.n	80151e0 <__kernel_rem_pio2+0x5a8>
 8015208:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801520c:	f7eb f866 	bl	80002dc <__adddf3>
 8015210:	3c01      	subs	r4, #1
 8015212:	e7c1      	b.n	8015198 <__kernel_rem_pio2+0x560>
 8015214:	4602      	mov	r2, r0
 8015216:	460b      	mov	r3, r1
 8015218:	e7c6      	b.n	80151a8 <__kernel_rem_pio2+0x570>
 801521a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801521e:	f7eb f85d 	bl	80002dc <__adddf3>
 8015222:	3401      	adds	r4, #1
 8015224:	e7cb      	b.n	80151be <__kernel_rem_pio2+0x586>
 8015226:	ed95 7b00 	vldr	d7, [r5]
 801522a:	ed8d 7b00 	vstr	d7, [sp]
 801522e:	ed95 7b02 	vldr	d7, [r5, #8]
 8015232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015236:	ec53 2b17 	vmov	r2, r3, d7
 801523a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801523e:	f7eb f84d 	bl	80002dc <__adddf3>
 8015242:	4602      	mov	r2, r0
 8015244:	460b      	mov	r3, r1
 8015246:	4606      	mov	r6, r0
 8015248:	460f      	mov	r7, r1
 801524a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801524e:	f7eb f843 	bl	80002d8 <__aeabi_dsub>
 8015252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015256:	f7eb f841 	bl	80002dc <__adddf3>
 801525a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801525e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8015262:	e9c5 6700 	strd	r6, r7, [r5]
 8015266:	e76d      	b.n	8015144 <__kernel_rem_pio2+0x50c>
 8015268:	ed94 7b00 	vldr	d7, [r4]
 801526c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015270:	ec51 0b17 	vmov	r0, r1, d7
 8015274:	4652      	mov	r2, sl
 8015276:	465b      	mov	r3, fp
 8015278:	ed8d 7b00 	vstr	d7, [sp]
 801527c:	f7eb f82e 	bl	80002dc <__adddf3>
 8015280:	4602      	mov	r2, r0
 8015282:	460b      	mov	r3, r1
 8015284:	4606      	mov	r6, r0
 8015286:	460f      	mov	r7, r1
 8015288:	e9dd 0100 	ldrd	r0, r1, [sp]
 801528c:	f7eb f824 	bl	80002d8 <__aeabi_dsub>
 8015290:	4652      	mov	r2, sl
 8015292:	465b      	mov	r3, fp
 8015294:	f7eb f822 	bl	80002dc <__adddf3>
 8015298:	3d01      	subs	r5, #1
 801529a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801529e:	e9c4 6700 	strd	r6, r7, [r4]
 80152a2:	e755      	b.n	8015150 <__kernel_rem_pio2+0x518>
 80152a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80152a8:	f7eb f818 	bl	80002dc <__adddf3>
 80152ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80152b0:	e758      	b.n	8015164 <__kernel_rem_pio2+0x52c>
 80152b2:	bf00      	nop
 80152b4:	f3af 8000 	nop.w
	...
 80152c0:	41700000 	.word	0x41700000
 80152c4:	3e700000 	.word	0x3e700000
 80152c8:	9b04      	ldr	r3, [sp, #16]
 80152ca:	9a04      	ldr	r2, [sp, #16]
 80152cc:	601f      	str	r7, [r3, #0]
 80152ce:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80152d2:	605c      	str	r4, [r3, #4]
 80152d4:	609d      	str	r5, [r3, #8]
 80152d6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80152da:	60d3      	str	r3, [r2, #12]
 80152dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80152e0:	6110      	str	r0, [r2, #16]
 80152e2:	6153      	str	r3, [r2, #20]
 80152e4:	e719      	b.n	801511a <__kernel_rem_pio2+0x4e2>
 80152e6:	bf00      	nop

080152e8 <scalbn>:
 80152e8:	b570      	push	{r4, r5, r6, lr}
 80152ea:	ec55 4b10 	vmov	r4, r5, d0
 80152ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80152f2:	4606      	mov	r6, r0
 80152f4:	462b      	mov	r3, r5
 80152f6:	b991      	cbnz	r1, 801531e <scalbn+0x36>
 80152f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80152fc:	4323      	orrs	r3, r4
 80152fe:	d03d      	beq.n	801537c <scalbn+0x94>
 8015300:	4b35      	ldr	r3, [pc, #212]	@ (80153d8 <scalbn+0xf0>)
 8015302:	4620      	mov	r0, r4
 8015304:	4629      	mov	r1, r5
 8015306:	2200      	movs	r2, #0
 8015308:	f7eb f99e 	bl	8000648 <__aeabi_dmul>
 801530c:	4b33      	ldr	r3, [pc, #204]	@ (80153dc <scalbn+0xf4>)
 801530e:	429e      	cmp	r6, r3
 8015310:	4604      	mov	r4, r0
 8015312:	460d      	mov	r5, r1
 8015314:	da0f      	bge.n	8015336 <scalbn+0x4e>
 8015316:	a328      	add	r3, pc, #160	@ (adr r3, 80153b8 <scalbn+0xd0>)
 8015318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531c:	e01e      	b.n	801535c <scalbn+0x74>
 801531e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015322:	4291      	cmp	r1, r2
 8015324:	d10b      	bne.n	801533e <scalbn+0x56>
 8015326:	4622      	mov	r2, r4
 8015328:	4620      	mov	r0, r4
 801532a:	4629      	mov	r1, r5
 801532c:	f7ea ffd6 	bl	80002dc <__adddf3>
 8015330:	4604      	mov	r4, r0
 8015332:	460d      	mov	r5, r1
 8015334:	e022      	b.n	801537c <scalbn+0x94>
 8015336:	460b      	mov	r3, r1
 8015338:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801533c:	3936      	subs	r1, #54	@ 0x36
 801533e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015342:	4296      	cmp	r6, r2
 8015344:	dd0d      	ble.n	8015362 <scalbn+0x7a>
 8015346:	2d00      	cmp	r5, #0
 8015348:	a11d      	add	r1, pc, #116	@ (adr r1, 80153c0 <scalbn+0xd8>)
 801534a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801534e:	da02      	bge.n	8015356 <scalbn+0x6e>
 8015350:	a11d      	add	r1, pc, #116	@ (adr r1, 80153c8 <scalbn+0xe0>)
 8015352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015356:	a31a      	add	r3, pc, #104	@ (adr r3, 80153c0 <scalbn+0xd8>)
 8015358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801535c:	f7eb f974 	bl	8000648 <__aeabi_dmul>
 8015360:	e7e6      	b.n	8015330 <scalbn+0x48>
 8015362:	1872      	adds	r2, r6, r1
 8015364:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015368:	428a      	cmp	r2, r1
 801536a:	dcec      	bgt.n	8015346 <scalbn+0x5e>
 801536c:	2a00      	cmp	r2, #0
 801536e:	dd08      	ble.n	8015382 <scalbn+0x9a>
 8015370:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015374:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015378:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801537c:	ec45 4b10 	vmov	d0, r4, r5
 8015380:	bd70      	pop	{r4, r5, r6, pc}
 8015382:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015386:	da08      	bge.n	801539a <scalbn+0xb2>
 8015388:	2d00      	cmp	r5, #0
 801538a:	a10b      	add	r1, pc, #44	@ (adr r1, 80153b8 <scalbn+0xd0>)
 801538c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015390:	dac1      	bge.n	8015316 <scalbn+0x2e>
 8015392:	a10f      	add	r1, pc, #60	@ (adr r1, 80153d0 <scalbn+0xe8>)
 8015394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015398:	e7bd      	b.n	8015316 <scalbn+0x2e>
 801539a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801539e:	3236      	adds	r2, #54	@ 0x36
 80153a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80153a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80153a8:	4620      	mov	r0, r4
 80153aa:	4b0d      	ldr	r3, [pc, #52]	@ (80153e0 <scalbn+0xf8>)
 80153ac:	4629      	mov	r1, r5
 80153ae:	2200      	movs	r2, #0
 80153b0:	e7d4      	b.n	801535c <scalbn+0x74>
 80153b2:	bf00      	nop
 80153b4:	f3af 8000 	nop.w
 80153b8:	c2f8f359 	.word	0xc2f8f359
 80153bc:	01a56e1f 	.word	0x01a56e1f
 80153c0:	8800759c 	.word	0x8800759c
 80153c4:	7e37e43c 	.word	0x7e37e43c
 80153c8:	8800759c 	.word	0x8800759c
 80153cc:	fe37e43c 	.word	0xfe37e43c
 80153d0:	c2f8f359 	.word	0xc2f8f359
 80153d4:	81a56e1f 	.word	0x81a56e1f
 80153d8:	43500000 	.word	0x43500000
 80153dc:	ffff3cb0 	.word	0xffff3cb0
 80153e0:	3c900000 	.word	0x3c900000
 80153e4:	00000000 	.word	0x00000000

080153e8 <floor>:
 80153e8:	ec51 0b10 	vmov	r0, r1, d0
 80153ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80153f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153f4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80153f8:	2e13      	cmp	r6, #19
 80153fa:	460c      	mov	r4, r1
 80153fc:	4605      	mov	r5, r0
 80153fe:	4680      	mov	r8, r0
 8015400:	dc34      	bgt.n	801546c <floor+0x84>
 8015402:	2e00      	cmp	r6, #0
 8015404:	da17      	bge.n	8015436 <floor+0x4e>
 8015406:	a332      	add	r3, pc, #200	@ (adr r3, 80154d0 <floor+0xe8>)
 8015408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540c:	f7ea ff66 	bl	80002dc <__adddf3>
 8015410:	2200      	movs	r2, #0
 8015412:	2300      	movs	r3, #0
 8015414:	f7eb fba8 	bl	8000b68 <__aeabi_dcmpgt>
 8015418:	b150      	cbz	r0, 8015430 <floor+0x48>
 801541a:	2c00      	cmp	r4, #0
 801541c:	da55      	bge.n	80154ca <floor+0xe2>
 801541e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8015422:	432c      	orrs	r4, r5
 8015424:	2500      	movs	r5, #0
 8015426:	42ac      	cmp	r4, r5
 8015428:	4c2b      	ldr	r4, [pc, #172]	@ (80154d8 <floor+0xf0>)
 801542a:	bf08      	it	eq
 801542c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8015430:	4621      	mov	r1, r4
 8015432:	4628      	mov	r0, r5
 8015434:	e023      	b.n	801547e <floor+0x96>
 8015436:	4f29      	ldr	r7, [pc, #164]	@ (80154dc <floor+0xf4>)
 8015438:	4137      	asrs	r7, r6
 801543a:	ea01 0307 	and.w	r3, r1, r7
 801543e:	4303      	orrs	r3, r0
 8015440:	d01d      	beq.n	801547e <floor+0x96>
 8015442:	a323      	add	r3, pc, #140	@ (adr r3, 80154d0 <floor+0xe8>)
 8015444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015448:	f7ea ff48 	bl	80002dc <__adddf3>
 801544c:	2200      	movs	r2, #0
 801544e:	2300      	movs	r3, #0
 8015450:	f7eb fb8a 	bl	8000b68 <__aeabi_dcmpgt>
 8015454:	2800      	cmp	r0, #0
 8015456:	d0eb      	beq.n	8015430 <floor+0x48>
 8015458:	2c00      	cmp	r4, #0
 801545a:	bfbe      	ittt	lt
 801545c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8015460:	4133      	asrlt	r3, r6
 8015462:	18e4      	addlt	r4, r4, r3
 8015464:	ea24 0407 	bic.w	r4, r4, r7
 8015468:	2500      	movs	r5, #0
 801546a:	e7e1      	b.n	8015430 <floor+0x48>
 801546c:	2e33      	cmp	r6, #51	@ 0x33
 801546e:	dd0a      	ble.n	8015486 <floor+0x9e>
 8015470:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8015474:	d103      	bne.n	801547e <floor+0x96>
 8015476:	4602      	mov	r2, r0
 8015478:	460b      	mov	r3, r1
 801547a:	f7ea ff2f 	bl	80002dc <__adddf3>
 801547e:	ec41 0b10 	vmov	d0, r0, r1
 8015482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015486:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801548a:	f04f 37ff 	mov.w	r7, #4294967295
 801548e:	40df      	lsrs	r7, r3
 8015490:	4207      	tst	r7, r0
 8015492:	d0f4      	beq.n	801547e <floor+0x96>
 8015494:	a30e      	add	r3, pc, #56	@ (adr r3, 80154d0 <floor+0xe8>)
 8015496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549a:	f7ea ff1f 	bl	80002dc <__adddf3>
 801549e:	2200      	movs	r2, #0
 80154a0:	2300      	movs	r3, #0
 80154a2:	f7eb fb61 	bl	8000b68 <__aeabi_dcmpgt>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d0c2      	beq.n	8015430 <floor+0x48>
 80154aa:	2c00      	cmp	r4, #0
 80154ac:	da0a      	bge.n	80154c4 <floor+0xdc>
 80154ae:	2e14      	cmp	r6, #20
 80154b0:	d101      	bne.n	80154b6 <floor+0xce>
 80154b2:	3401      	adds	r4, #1
 80154b4:	e006      	b.n	80154c4 <floor+0xdc>
 80154b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80154ba:	2301      	movs	r3, #1
 80154bc:	40b3      	lsls	r3, r6
 80154be:	441d      	add	r5, r3
 80154c0:	4545      	cmp	r5, r8
 80154c2:	d3f6      	bcc.n	80154b2 <floor+0xca>
 80154c4:	ea25 0507 	bic.w	r5, r5, r7
 80154c8:	e7b2      	b.n	8015430 <floor+0x48>
 80154ca:	2500      	movs	r5, #0
 80154cc:	462c      	mov	r4, r5
 80154ce:	e7af      	b.n	8015430 <floor+0x48>
 80154d0:	8800759c 	.word	0x8800759c
 80154d4:	7e37e43c 	.word	0x7e37e43c
 80154d8:	bff00000 	.word	0xbff00000
 80154dc:	000fffff 	.word	0x000fffff

080154e0 <_init>:
 80154e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154e2:	bf00      	nop
 80154e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154e6:	bc08      	pop	{r3}
 80154e8:	469e      	mov	lr, r3
 80154ea:	4770      	bx	lr

080154ec <_fini>:
 80154ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ee:	bf00      	nop
 80154f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154f2:	bc08      	pop	{r3}
 80154f4:	469e      	mov	lr, r3
 80154f6:	4770      	bx	lr
